typedef 
       _Bool 
            bool_bf;
extern char *emacs_getenv_TZ (void);
extern int emacs_setenv_TZ (char const *);
typedef long unsigned int size_t;
typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;
typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;
typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;
typedef long int __quad_t;
typedef unsigned long int __u_quad_t;
typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct { int __val[2]; } __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;
typedef int __daddr_t;
typedef int __key_t;
typedef int __clockid_t;
typedef void * __timer_t;
typedef long int __blksize_t;
typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;
typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;
typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;
typedef long int __fsword_t;
typedef long int __ssize_t;
typedef long int __syscall_slong_t;
typedef unsigned long int __syscall_ulong_t;
typedef __off64_t __loff_t;
typedef __quad_t *__qaddr_t;
typedef char *__caddr_t;
typedef long int __intptr_t;
typedef unsigned int __socklen_t;
struct _IO_FILE;
typedef struct _IO_FILE FILE;
typedef struct _IO_FILE __FILE;
typedef struct
{
  int __count;
  union
  {
    unsigned int __wch;
    char __wchb[4];
  } __value;
} __mbstate_t;
typedef struct
{
  __off_t __pos;
  __mbstate_t __state;
} _G_fpos_t;
typedef struct
{
  __off64_t __pos;
  __mbstate_t __state;
} _G_fpos64_t;
typedef __builtin_va_list __gnuc_va_list;
struct _IO_jump_t; struct _IO_FILE;
typedef void _IO_lock_t;
struct _IO_marker {
  struct _IO_marker *_next;
  struct _IO_FILE *_sbuf;
  int _pos;
};
enum __codecvt_result
{
  __codecvt_ok,
  __codecvt_partial,
  __codecvt_error,
  __codecvt_noconv
};
struct _IO_FILE {
  int _flags;
  char* _IO_read_ptr;
  char* _IO_read_end;
  char* _IO_read_base;
  char* _IO_write_base;
  char* _IO_write_ptr;
  char* _IO_write_end;
  char* _IO_buf_base;
  char* _IO_buf_end;
  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;
  struct _IO_marker *_markers;
  struct _IO_FILE *_chain;
  int _fileno;
  int _flags2;
  __off_t _old_offset;
  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];
  _IO_lock_t *_lock;
  __off64_t _offset;
  void *__pad1;
  void *__pad2;
  void *__pad3;
  void *__pad4;
  size_t __pad5;
  int _mode;
  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];
};
typedef struct _IO_FILE _IO_FILE;
struct _IO_FILE_plus;
extern struct _IO_FILE_plus _IO_2_1_stdin_;
extern struct _IO_FILE_plus _IO_2_1_stdout_;
extern struct _IO_FILE_plus _IO_2_1_stderr_;
typedef __ssize_t __io_read_fn (void *__cookie, char *__buf, size_t __nbytes);
typedef __ssize_t __io_write_fn (void *__cookie, const char *__buf,
     size_t __n);
typedef int __io_seek_fn (void *__cookie, __off64_t *__pos, int __w);
typedef int __io_close_fn (void *__cookie);
typedef __io_read_fn cookie_read_function_t;
typedef __io_write_fn cookie_write_function_t;
typedef __io_seek_fn cookie_seek_function_t;
typedef __io_close_fn cookie_close_function_t;
typedef struct
{
  __io_read_fn *read;
  __io_write_fn *write;
  __io_seek_fn *seek;
  __io_close_fn *close;
} _IO_cookie_io_functions_t;
typedef _IO_cookie_io_functions_t cookie_io_functions_t;
struct _IO_cookie_file;
extern void _IO_cookie_init (struct _IO_cookie_file *__cfile, int __read_write,
        void *__cookie, _IO_cookie_io_functions_t __fns);
extern int __underflow (_IO_FILE *);
extern int __uflow (_IO_FILE *);
extern int __overflow (_IO_FILE *, int);
extern int _IO_getc (_IO_FILE *__fp);
extern int _IO_putc (int __c, _IO_FILE *__fp);
extern int _IO_feof (_IO_FILE *__fp) __attribute__ ((__nothrow__ , __leaf__));
extern int _IO_ferror (_IO_FILE *__fp) __attribute__ ((__nothrow__ , __leaf__));
extern int _IO_peekc_locked (_IO_FILE *__fp);
extern void _IO_flockfile (_IO_FILE *) __attribute__ ((__nothrow__ , __leaf__));
extern void _IO_funlockfile (_IO_FILE *) __attribute__ ((__nothrow__ , __leaf__));
extern int _IO_ftrylockfile (_IO_FILE *) __attribute__ ((__nothrow__ , __leaf__));
extern int _IO_vfscanf (_IO_FILE * __restrict, const char * __restrict,
   __gnuc_va_list, int *__restrict);
extern int _IO_vfprintf (_IO_FILE *__restrict, const char *__restrict,
    __gnuc_va_list);
extern __ssize_t _IO_padn (_IO_FILE *, int, __ssize_t);
extern size_t _IO_sgetn (_IO_FILE *, void *, size_t);
extern __off64_t _IO_seekoff (_IO_FILE *, __off64_t, int, int);
extern __off64_t _IO_seekpos (_IO_FILE *, __off64_t, int);
extern void _IO_free_backup_area (_IO_FILE *) __attribute__ ((__nothrow__ , __leaf__));
typedef __gnuc_va_list va_list;
typedef __off_t off_t;
typedef __off64_t off64_t;
typedef __ssize_t ssize_t;
typedef _G_fpos_t fpos_t;
typedef _G_fpos64_t fpos64_t;
extern struct _IO_FILE *stdin;
extern struct _IO_FILE *stdout;
extern struct _IO_FILE *stderr;
extern int remove (const char *__filename) __attribute__ ((__nothrow__ , __leaf__));
extern int rename (const char *__old, const char *__new) __attribute__ ((__nothrow__ , __leaf__));
extern int renameat (int __oldfd, const char *__old, int __newfd,
       const char *__new) __attribute__ ((__nothrow__ , __leaf__));
extern FILE *tmpfile (void) __attribute__ ((__warn_unused_result__));
extern FILE *tmpfile64 (void) __attribute__ ((__warn_unused_result__));
extern char *tmpnam (char *__s) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
extern char *tmpnam_r (char *__s) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
extern char *tempnam (const char *__dir, const char *__pfx)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__warn_unused_result__));
extern int fclose (FILE *__stream);
extern int fflush (FILE *__stream);
extern int fflush_unlocked (FILE *__stream);
extern int fcloseall (void);
extern FILE *fopen (const char *__restrict __filename,
      const char *__restrict __modes) __attribute__ ((__warn_unused_result__));
extern FILE *freopen (const char *__restrict __filename,
        const char *__restrict __modes,
        FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern FILE *fopen64 (const char *__restrict __filename,
        const char *__restrict __modes) __attribute__ ((__warn_unused_result__));
extern FILE *freopen64 (const char *__restrict __filename,
   const char *__restrict __modes,
   FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern FILE *fdopen (int __fd, const char *__modes) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
extern FILE *fopencookie (void *__restrict __magic_cookie,
     const char *__restrict __modes,
     _IO_cookie_io_functions_t __io_funcs) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
extern FILE *fmemopen (void *__s, size_t __len, const char *__modes)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));
extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) __attribute__ ((__nothrow__ , __leaf__));
extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
         size_t __size) __attribute__ ((__nothrow__ , __leaf__));
extern void setlinebuf (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));
extern int fprintf (FILE *__restrict __stream,
      const char *__restrict __format, ...);
extern int printf (const char *__restrict __format, ...);
extern int sprintf (char *__restrict __s,
      const char *__restrict __format, ...) __attribute__ ((__nothrow__));
extern int vfprintf (FILE *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg);
extern int vprintf (const char *__restrict __format, __gnuc_va_list __arg);
extern int vsprintf (char *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg) __attribute__ ((__nothrow__));
extern int snprintf (char *__restrict __s, size_t __maxlen,
       const char *__restrict __format, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 4)));
extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 0)));
extern int vasprintf (char **__restrict __ptr, const char *__restrict __f,
        __gnuc_va_list __arg)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 2, 0))) __attribute__ ((__warn_unused_result__));
extern int __asprintf (char **__restrict __ptr,
         const char *__restrict __fmt, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 2, 3))) __attribute__ ((__warn_unused_result__));
extern int asprintf (char **__restrict __ptr,
       const char *__restrict __fmt, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 2, 3))) __attribute__ ((__warn_unused_result__));
extern int vdprintf (int __fd, const char *__restrict __fmt,
       __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));
extern int fscanf (FILE *__restrict __stream,
     const char *__restrict __format, ...) __attribute__ ((__warn_unused_result__));
extern int scanf (const char *__restrict __format, ...) __attribute__ ((__warn_unused_result__));
extern int sscanf (const char *__restrict __s,
     const char *__restrict __format, ...) __attribute__ ((__nothrow__ , __leaf__));
extern int vfscanf (FILE *__restrict __s, const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) __attribute__ ((__warn_unused_result__));
extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) __attribute__ ((__warn_unused_result__));
extern int vsscanf (const char *__restrict __s,
      const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__format__ (__scanf__, 2, 0)));
extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);
extern int getchar (void);
extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
extern int fgetc_unlocked (FILE *__stream);
extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);
extern int putchar (int __c);
extern int fputc_unlocked (int __c, FILE *__stream);
extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);
extern int getw (FILE *__stream);
extern int putw (int __w, FILE *__stream);
extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
     __attribute__ ((__warn_unused_result__));
extern char *fgets_unlocked (char *__restrict __s, int __n,
        FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern __ssize_t __getdelim (char **__restrict __lineptr,
          size_t *__restrict __n, int __delimiter,
          FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern __ssize_t getdelim (char **__restrict __lineptr,
        size_t *__restrict __n, int __delimiter,
        FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern __ssize_t getline (char **__restrict __lineptr,
       size_t *__restrict __n,
       FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern int fputs (const char *__restrict __s, FILE *__restrict __stream);
extern int puts (const char *__s);
extern int ungetc (int __c, FILE *__stream);
extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern size_t fwrite (const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s);
extern int fputs_unlocked (const char *__restrict __s,
      FILE *__restrict __stream);
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
         size_t __n, FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern size_t fwrite_unlocked (const void *__restrict __ptr, size_t __size,
          size_t __n, FILE *__restrict __stream);
extern int fseek (FILE *__stream, long int __off, int __whence);
extern long int ftell (FILE *__stream) __attribute__ ((__warn_unused_result__));
extern void rewind (FILE *__stream);
extern int fseeko (FILE *__stream, __off_t __off, int __whence);
extern __off_t ftello (FILE *__stream) __attribute__ ((__warn_unused_result__));
extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);
extern int fsetpos (FILE *__stream, const fpos_t *__pos);
extern int fseeko64 (FILE *__stream, __off64_t __off, int __whence);
extern __off64_t ftello64 (FILE *__stream) __attribute__ ((__warn_unused_result__));
extern int fgetpos64 (FILE *__restrict __stream, fpos64_t *__restrict __pos);
extern int fsetpos64 (FILE *__stream, const fpos64_t *__pos);
extern void clearerr (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));
extern int feof (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
extern int ferror (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
extern void clearerr_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));
extern int feof_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
extern int ferror_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
extern void perror (const char *__s);
extern int sys_nerr;
extern const char *const sys_errlist[];
extern int _sys_nerr;
extern const char *const _sys_errlist[];
extern int fileno (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
extern int fileno_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
extern FILE *popen (const char *__command, const char *__modes) __attribute__ ((__warn_unused_result__));
extern int pclose (FILE *__stream);
extern char *ctermid (char *__s) __attribute__ ((__nothrow__ , __leaf__));
extern char *cuserid (char *__s);
struct obstack;
extern int obstack_printf (struct obstack *__restrict __obstack,
      const char *__restrict __format, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 2, 3)));
extern int obstack_vprintf (struct obstack *__restrict __obstack,
       const char *__restrict __format,
       __gnuc_va_list __args)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 2, 0)));
extern void flockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));
extern int ftrylockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
extern void funlockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));
extern __inline __attribute__ ((__gnu_inline__)) int
getchar (void)
{
  return _IO_getc (stdin);
}
extern __inline __attribute__ ((__gnu_inline__)) int
fgetc_unlocked (FILE *__fp)
{
  return (__builtin_expect (((__fp)->_IO_read_ptr >= (__fp)->_IO_read_end), 0) ? __uflow (__fp) : *(unsigned char *) (__fp)->_IO_read_ptr++);
}
extern __inline __attribute__ ((__gnu_inline__)) int
getc_unlocked (FILE *__fp)
{
  return (__builtin_expect (((__fp)->_IO_read_ptr >= (__fp)->_IO_read_end), 0) ? __uflow (__fp) : *(unsigned char *) (__fp)->_IO_read_ptr++);
}
extern __inline __attribute__ ((__gnu_inline__)) int
getchar_unlocked (void)
{
  return (__builtin_expect (((stdin)->_IO_read_ptr >= (stdin)->_IO_read_end), 0) ? __uflow (stdin) : *(unsigned char *) (stdin)->_IO_read_ptr++);
}
extern __inline __attribute__ ((__gnu_inline__)) int
putchar (int __c)
{
  return _IO_putc (__c, stdout);
}
extern __inline __attribute__ ((__gnu_inline__)) int
fputc_unlocked (int __c, FILE *__stream)
{
  return (__builtin_expect (((__stream)->_IO_write_ptr >= (__stream)->_IO_write_end), 0) ? __overflow (__stream, (unsigned char) (__c)) : (unsigned char) (*(__stream)->_IO_write_ptr++ = (__c)));
}
extern __inline __attribute__ ((__gnu_inline__)) int
putc_unlocked (int __c, FILE *__stream)
{
  return (__builtin_expect (((__stream)->_IO_write_ptr >= (__stream)->_IO_write_end), 0) ? __overflow (__stream, (unsigned char) (__c)) : (unsigned char) (*(__stream)->_IO_write_ptr++ = (__c)));
}
extern __inline __attribute__ ((__gnu_inline__)) int
putchar_unlocked (int __c)
{
  return (__builtin_expect (((stdout)->_IO_write_ptr >= (stdout)->_IO_write_end), 0) ? __overflow (stdout, (unsigned char) (__c)) : (unsigned char) (*(stdout)->_IO_write_ptr++ = (__c)));
}
extern __inline __attribute__ ((__gnu_inline__)) __ssize_t
getline (char **__lineptr, size_t *__n, FILE *__stream)
{
  return __getdelim (__lineptr, __n, '\n', __stream);
}
extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__nothrow__ , __leaf__)) feof_unlocked (FILE *__stream)
{
  return (((__stream)->_flags & 0x10) != 0);
}
extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__nothrow__ , __leaf__)) ferror_unlocked (FILE *__stream)
{
  return (((__stream)->_flags & 0x20) != 0);
}
extern int __sprintf_chk (char *__restrict __s, int __flag, size_t __slen,
     const char *__restrict __format, ...) __attribute__ ((__nothrow__ , __leaf__));
extern int __vsprintf_chk (char *__restrict __s, int __flag, size_t __slen,
      const char *__restrict __format,
      __gnuc_va_list __ap) __attribute__ ((__nothrow__ , __leaf__));
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__nothrow__ , __leaf__)) sprintf (char *__restrict __s, const char *__restrict __fmt, ...)
{
  return __builtin___sprintf_chk (__s, 2 - 1,
      __builtin_object_size (__s, 2 > 1), __fmt, __builtin_va_arg_pack ());
}
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__nothrow__ , __leaf__)) vsprintf (char *__restrict __s, const char *__restrict __fmt, __gnuc_va_list __ap)
{
  return __builtin___vsprintf_chk (__s, 2 - 1,
       __builtin_object_size (__s, 2 > 1), __fmt, __ap);
}
extern int __snprintf_chk (char *__restrict __s, size_t __n, int __flag,
      size_t __slen, const char *__restrict __format,
      ...) __attribute__ ((__nothrow__ , __leaf__));
extern int __vsnprintf_chk (char *__restrict __s, size_t __n, int __flag,
       size_t __slen, const char *__restrict __format,
       __gnuc_va_list __ap) __attribute__ ((__nothrow__ , __leaf__));
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__nothrow__ , __leaf__)) snprintf (char *__restrict __s, size_t __n, const char *__restrict __fmt, ...)
{
  return __builtin___snprintf_chk (__s, __n, 2 - 1,
       __builtin_object_size (__s, 2 > 1), __fmt, __builtin_va_arg_pack ());
}
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__nothrow__ , __leaf__)) vsnprintf (char *__restrict __s, size_t __n, const char *__restrict __fmt, __gnuc_va_list __ap)
{
  return __builtin___vsnprintf_chk (__s, __n, 2 - 1,
        __builtin_object_size (__s, 2 > 1), __fmt, __ap);
}
extern int __fprintf_chk (FILE *__restrict __stream, int __flag,
     const char *__restrict __format, ...);
extern int __printf_chk (int __flag, const char *__restrict __format, ...);
extern int __vfprintf_chk (FILE *__restrict __stream, int __flag,
      const char *__restrict __format, __gnuc_va_list __ap);
extern int __vprintf_chk (int __flag, const char *__restrict __format,
     __gnuc_va_list __ap);
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
fprintf (FILE *__restrict __stream, const char *__restrict __fmt, ...)
{
  return __fprintf_chk (__stream, 2 - 1, __fmt,
   __builtin_va_arg_pack ());
}
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
printf (const char *__restrict __fmt, ...)
{
  return __printf_chk (2 - 1, __fmt, __builtin_va_arg_pack ());
}
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
vprintf (const char *__restrict __fmt, __gnuc_va_list __ap)
{
  return __vfprintf_chk (stdout, 2 - 1, __fmt, __ap);
}
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
vfprintf (FILE *__restrict __stream,
   const char *__restrict __fmt, __gnuc_va_list __ap)
{
  return __vfprintf_chk (__stream, 2 - 1, __fmt, __ap);
}
extern int __dprintf_chk (int __fd, int __flag, const char *__restrict __fmt,
     ...) __attribute__ ((__format__ (__printf__, 3, 4)));
extern int __vdprintf_chk (int __fd, int __flag,
      const char *__restrict __fmt, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 3, 0)));
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
dprintf (int __fd, const char *__restrict __fmt, ...)
{
  return __dprintf_chk (__fd, 2 - 1, __fmt,
   __builtin_va_arg_pack ());
}
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
vdprintf (int __fd, const char *__restrict __fmt, __gnuc_va_list __ap)
{
  return __vdprintf_chk (__fd, 2 - 1, __fmt, __ap);
}
extern int __asprintf_chk (char **__restrict __ptr, int __flag,
      const char *__restrict __fmt, ...)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__format__ (__printf__, 3, 4))) __attribute__ ((__warn_unused_result__));
extern int __vasprintf_chk (char **__restrict __ptr, int __flag,
       const char *__restrict __fmt, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__format__ (__printf__, 3, 0))) __attribute__ ((__warn_unused_result__));
extern int __obstack_printf_chk (struct obstack *__restrict __obstack,
     int __flag, const char *__restrict __format,
     ...)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__format__ (__printf__, 3, 4)));
extern int __obstack_vprintf_chk (struct obstack *__restrict __obstack,
      int __flag,
      const char *__restrict __format,
      __gnuc_va_list __args)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__format__ (__printf__, 3, 0)));
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__nothrow__ , __leaf__)) asprintf (char **__restrict __ptr, const char *__restrict __fmt, ...)
{
  return __asprintf_chk (__ptr, 2 - 1, __fmt,
    __builtin_va_arg_pack ());
}
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__nothrow__ , __leaf__)) __asprintf (char **__restrict __ptr, const char *__restrict __fmt, ...)
{
  return __asprintf_chk (__ptr, 2 - 1, __fmt,
    __builtin_va_arg_pack ());
}
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__nothrow__ , __leaf__)) obstack_printf (struct obstack *__restrict __obstack, const char *__restrict __fmt, ...)
{
  return __obstack_printf_chk (__obstack, 2 - 1, __fmt,
          __builtin_va_arg_pack ());
}
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__nothrow__ , __leaf__)) vasprintf (char **__restrict __ptr, const char *__restrict __fmt, __gnuc_va_list __ap)
{
  return __vasprintf_chk (__ptr, 2 - 1, __fmt, __ap);
}
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__nothrow__ , __leaf__)) obstack_vprintf (struct obstack *__restrict __obstack, const char *__restrict __fmt, __gnuc_va_list __ap)
{
  return __obstack_vprintf_chk (__obstack, 2 - 1, __fmt,
    __ap);
}
extern char *__fgets_chk (char *__restrict __s, size_t __size, int __n,
     FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern char *__fgets_alias (char *__restrict __s, int __n, FILE *__restrict __stream) __asm__ ("" "fgets")
                                        __attribute__ ((__warn_unused_result__));
extern char *__fgets_chk_warn (char *__restrict __s, size_t __size, int __n, FILE *__restrict __stream) __asm__ ("" "__fgets_chk")
     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("fgets called with bigger size than length " "of destination buffer")))
                                 ;
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) char *
fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
{
  if (__builtin_object_size (__s, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__n) || __n <= 0)
 return __fgets_chk (__s, __builtin_object_size (__s, 2 > 1), __n, __stream);
      if ((size_t) __n > __builtin_object_size (__s, 2 > 1))
 return __fgets_chk_warn (__s, __builtin_object_size (__s, 2 > 1), __n, __stream);
    }
  return __fgets_alias (__s, __n, __stream);
}
extern size_t __fread_chk (void *__restrict __ptr, size_t __ptrlen,
      size_t __size, size_t __n,
      FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern size_t __fread_alias (void *__restrict __ptr, size_t __size, size_t __n, FILE *__restrict __stream) __asm__ ("" "fread")
            __attribute__ ((__warn_unused_result__));
extern size_t __fread_chk_warn (void *__restrict __ptr, size_t __ptrlen, size_t __size, size_t __n, FILE *__restrict __stream) __asm__ ("" "__fread_chk")
     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("fread called with bigger size * nmemb than length " "of destination buffer")))
                                 ;
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) size_t
fread (void *__restrict __ptr, size_t __size, size_t __n,
       FILE *__restrict __stream)
{
  if (__builtin_object_size (__ptr, 0) != (size_t) -1)
    {
      if (!__builtin_constant_p (__size)
   || !__builtin_constant_p (__n)
   || (__size | __n) >= (((size_t) 1) << (8 * sizeof (size_t) / 2)))
 return __fread_chk (__ptr, __builtin_object_size (__ptr, 0), __size, __n, __stream);
      if (__size * __n > __builtin_object_size (__ptr, 0))
 return __fread_chk_warn (__ptr, __builtin_object_size (__ptr, 0), __size, __n, __stream);
    }
  return __fread_alias (__ptr, __size, __n, __stream);
}
extern char *__fgets_unlocked_chk (char *__restrict __s, size_t __size,
       int __n, FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern char *__fgets_unlocked_alias (char *__restrict __s, int __n, FILE *__restrict __stream) __asm__ ("" "fgets_unlocked")
                                                 __attribute__ ((__warn_unused_result__));
extern char *__fgets_unlocked_chk_warn (char *__restrict __s, size_t __size, int __n, FILE *__restrict __stream) __asm__ ("" "__fgets_unlocked_chk")
     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("fgets_unlocked called with bigger size than length " "of destination buffer")))
                                 ;
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) char *
fgets_unlocked (char *__restrict __s, int __n, FILE *__restrict __stream)
{
  if (__builtin_object_size (__s, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__n) || __n <= 0)
 return __fgets_unlocked_chk (__s, __builtin_object_size (__s, 2 > 1), __n, __stream);
      if ((size_t) __n > __builtin_object_size (__s, 2 > 1))
 return __fgets_unlocked_chk_warn (__s, __builtin_object_size (__s, 2 > 1), __n, __stream);
    }
  return __fgets_unlocked_alias (__s, __n, __stream);
}
extern size_t __fread_unlocked_chk (void *__restrict __ptr, size_t __ptrlen,
        size_t __size, size_t __n,
        FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern size_t __fread_unlocked_alias (void *__restrict __ptr, size_t __size, size_t __n, FILE *__restrict __stream) __asm__ ("" "fread_unlocked")
                     __attribute__ ((__warn_unused_result__));
extern size_t __fread_unlocked_chk_warn (void *__restrict __ptr, size_t __ptrlen, size_t __size, size_t __n, FILE *__restrict __stream) __asm__ ("" "__fread_unlocked_chk")
     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("fread_unlocked called with bigger size * nmemb than " "length of destination buffer")))
                                        ;
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) size_t
fread_unlocked (void *__restrict __ptr, size_t __size, size_t __n,
  FILE *__restrict __stream)
{
  if (__builtin_object_size (__ptr, 0) != (size_t) -1)
    {
      if (!__builtin_constant_p (__size)
   || !__builtin_constant_p (__n)
   || (__size | __n) >= (((size_t) 1) << (8 * sizeof (size_t) / 2)))
 return __fread_unlocked_chk (__ptr, __builtin_object_size (__ptr, 0), __size, __n,
         __stream);
      if (__size * __n > __builtin_object_size (__ptr, 0))
 return __fread_unlocked_chk_warn (__ptr, __builtin_object_size (__ptr, 0), __size, __n,
       __stream);
    }
  if (__builtin_constant_p (__size)
      && __builtin_constant_p (__n)
      && (__size | __n) < (((size_t) 1) << (8 * sizeof (size_t) / 2))
      && __size * __n <= 8)
    {
      size_t __cnt = __size * __n;
      char *__cptr = (char *) __ptr;
      if (__cnt == 0)
 return 0;
      for (; __cnt > 0; --__cnt)
 {
   int __c = (__builtin_expect (((__stream)->_IO_read_ptr >= (__stream)->_IO_read_end), 0) ? __uflow (__stream) : *(unsigned char *) (__stream)->_IO_read_ptr++);
   if (__c == (-1))
     break;
   *__cptr++ = __c;
 }
      return (__cptr - (char *) __ptr) / __size;
    }
  return __fread_unlocked_alias (__ptr, __size, __n, __stream);
}
typedef long int ptrdiff_t;
typedef int wchar_t;
typedef struct {
  long long __max_align_ll __attribute__((__aligned__(__alignof__(long long))));
  long double __max_align_ld __attribute__((__aligned__(__alignof__(long double))));
} max_align_t;
typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;
typedef __loff_t loff_t;
typedef __ino_t ino_t;
typedef __ino64_t ino64_t;
typedef __dev_t dev_t;
typedef __gid_t gid_t;
typedef __mode_t mode_t;
typedef __nlink_t nlink_t;
typedef __uid_t uid_t;
typedef __pid_t pid_t;
typedef __id_t id_t;
typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;
typedef __key_t key_t;
typedef __clock_t clock_t;
typedef __time_t time_t;
typedef __clockid_t clockid_t;
typedef __timer_t timer_t;
typedef __useconds_t useconds_t;
typedef __suseconds_t suseconds_t;
typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;
typedef int int8_t __attribute__ ((__mode__ (__QI__)));
typedef int int16_t __attribute__ ((__mode__ (__HI__)));
typedef int int32_t __attribute__ ((__mode__ (__SI__)));
typedef int int64_t __attribute__ ((__mode__ (__DI__)));
typedef unsigned int u_int8_t __attribute__ ((__mode__ (__QI__)));
typedef unsigned int u_int16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int u_int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int u_int64_t __attribute__ ((__mode__ (__DI__)));
typedef int register_t __attribute__ ((__mode__ (__word__)));
static __inline unsigned int
__bswap_32 (unsigned int __bsx)
{
  return __builtin_bswap32 (__bsx);
}
static __inline __uint64_t
__bswap_64 (__uint64_t __bsx)
{
  return __builtin_bswap64 (__bsx);
}
typedef int __sig_atomic_t;
typedef struct
  {
    unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
  } __sigset_t;
typedef __sigset_t sigset_t;
struct timespec
  {
    __time_t tv_sec;
    __syscall_slong_t tv_nsec;
  };
struct timeval
  {
    __time_t tv_sec;
    __suseconds_t tv_usec;
  };
typedef long int __fd_mask;
typedef struct
  {
    __fd_mask fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];
  } fd_set;
typedef __fd_mask fd_mask;
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);
extern long int __fdelt_chk (long int __d);
extern long int __fdelt_warn (long int __d)
  __attribute__((__warning__ ("bit outside of fd_set selected")));
extern int _gl_cxxalias_dummy
                                                                              ;
extern int _gl_cxxalias_dummy;
__extension__
extern unsigned int gnu_dev_major (unsigned long long int __dev)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
__extension__
extern unsigned int gnu_dev_minor (unsigned long long int __dev)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
__extension__
extern unsigned long long int gnu_dev_makedev (unsigned int __major,
            unsigned int __minor)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
__extension__ extern __inline __attribute__ ((__gnu_inline__)) __attribute__ ((__const__)) unsigned int
__attribute__ ((__nothrow__ , __leaf__)) gnu_dev_major (unsigned long long int __dev)
{
  return ((__dev >> 8) & 0xfff) | ((unsigned int) (__dev >> 32) & ~0xfff);
}
__extension__ extern __inline __attribute__ ((__gnu_inline__)) __attribute__ ((__const__)) unsigned int
__attribute__ ((__nothrow__ , __leaf__)) gnu_dev_minor (unsigned long long int __dev)
{
  return (__dev & 0xff) | ((unsigned int) (__dev >> 12) & ~0xff);
}
__extension__ extern __inline __attribute__ ((__gnu_inline__)) __attribute__ ((__const__)) unsigned long long int
__attribute__ ((__nothrow__ , __leaf__)) gnu_dev_makedev (unsigned int __major, unsigned int __minor)
{
  return ((__minor & 0xff) | ((__major & 0xfff) << 8)
   | (((unsigned long long int) (__minor & ~0xff)) << 12)
   | (((unsigned long long int) (__major & ~0xfff)) << 32));
}
typedef __blksize_t blksize_t;
typedef __blkcnt_t blkcnt_t;
typedef __fsblkcnt_t fsblkcnt_t;
typedef __fsfilcnt_t fsfilcnt_t;
typedef __blkcnt64_t blkcnt64_t;
typedef __fsblkcnt64_t fsblkcnt64_t;
typedef __fsfilcnt64_t fsfilcnt64_t;
typedef unsigned long int pthread_t;
union pthread_attr_t
{
  char __size[56];
  long int __align;
};
typedef union pthread_attr_t pthread_attr_t;
typedef struct __pthread_internal_list
{
  struct __pthread_internal_list *__prev;
  struct __pthread_internal_list *__next;
} __pthread_list_t;
typedef union
{
  struct __pthread_mutex_s
  {
    int __lock;
    unsigned int __count;
    int __owner;
    unsigned int __nusers;
    int __kind;
    short __spins;
    short __elision;
    __pthread_list_t __list;
  } __data;
  char __size[40];
  long int __align;
} pthread_mutex_t;
typedef union
{
  char __size[4];
  int __align;
} pthread_mutexattr_t;
typedef union
{
  struct
  {
    int __lock;
    unsigned int __futex;
    __extension__ unsigned long long int __total_seq;
    __extension__ unsigned long long int __wakeup_seq;
    __extension__ unsigned long long int __woken_seq;
    void *__mutex;
    unsigned int __nwaiters;
    unsigned int __broadcast_seq;
  } __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;
typedef union
{
  char __size[4];
  int __align;
} pthread_condattr_t;
typedef unsigned int pthread_key_t;
typedef int pthread_once_t;
typedef union
{
  struct
  {
    int __lock;
    unsigned int __nr_readers;
    unsigned int __readers_wakeup;
    unsigned int __writer_wakeup;
    unsigned int __nr_readers_queued;
    unsigned int __nr_writers_queued;
    int __writer;
    int __shared;
    signed char __rwelision;
    unsigned char __pad1[7];
    unsigned long int __pad2;
    unsigned int __flags;
  } __data;
  char __size[56];
  long int __align;
} pthread_rwlock_t;
typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;
typedef volatile int pthread_spinlock_t;
typedef union
{
  char __size[32];
  long int __align;
} pthread_barrier_t;
typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
extern int _gl_cxxalias_dummy;
extern int _gl_cxxalias_dummy;
extern int _gl_cxxalias_dummy;
extern int _gl_cxxalias_dummy;
extern int _gl_cxxalias_dummy;
extern int _gl_cxxalias_dummy;
extern int _gl_cxxalias_dummy;
extern int _gl_cxxalias_dummy;
extern int _gl_cxxalias_dummy;
extern int _gl_cxxalias_dummy;
extern int _gl_cxxalias_dummy;
extern int _gl_cxxalias_dummy;
extern int _gl_cxxalias_dummy;
extern int _gl_cxxalias_dummy;
extern int _gl_cxxalias_dummy
                                                                      ;
extern int _gl_cxxalias_dummy;
extern int _gl_cxxalias_dummy;
extern int _gl_cxxalias_dummy;
extern int _gl_cxxalias_dummy;
extern int _gl_cxxalias_dummy;
extern int _gl_cxxalias_dummy;
extern int _gl_cxxalias_dummy;
extern int _gl_cxxalias_dummy;
extern int _gl_cxxalias_dummy;
extern int _gl_cxxalias_dummy;
extern int _gl_cxxalias_dummy;
extern int _gl_cxxalias_dummy;
extern int _gl_cxxalias_dummy;
extern int _gl_cxxalias_dummy;
extern int _gl_cxxalias_dummy;
extern int _gl_cxxalias_dummy
                                                                    ;
extern int _gl_cxxalias_dummy;
extern int _gl_cxxalias_dummy;
extern int _gl_cxxalias_dummy;
typedef enum
{
  P_ALL,
  P_PID,
  P_PGID
} idtype_t;
union wait
  {
    int w_status;
    struct
      {
 unsigned int __w_termsig:7;
 unsigned int __w_coredump:1;
 unsigned int __w_retcode:8;
 unsigned int:16;
      } __wait_terminated;
    struct
      {
 unsigned int __w_stopval:8;
 unsigned int __w_stopsig:8;
 unsigned int:16;
      } __wait_stopped;
  };
typedef union
  {
    union wait *__uptr;
    int *__iptr;
  } __WAIT_STATUS __attribute__ ((__transparent_union__));
typedef struct
  {
    int quot;
    int rem;
  } div_t;
typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;
__extension__ typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;
extern size_t __ctype_get_mb_cur_max (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
extern double atof (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
extern int atoi (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
extern long int atol (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
__extension__ extern long long int atoll (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
extern double strtod (const char *__restrict __nptr,
        char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern float strtof (const char *__restrict __nptr,
       char **__restrict __endptr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern long double strtold (const char *__restrict __nptr,
       char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern long int strtol (const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern unsigned long int strtoul (const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
__extension__
extern long long int strtoq (const char *__restrict __nptr,
        char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
__extension__
extern unsigned long long int strtouq (const char *__restrict __nptr,
           char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
__extension__
extern long long int strtoll (const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
__extension__
extern unsigned long long int strtoull (const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
typedef struct __locale_struct
{
  struct __locale_data *__locales[13];
  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;
  const char *__names[13];
} *__locale_t;
typedef __locale_t locale_t;
extern long int strtol_l (const char *__restrict __nptr,
     char **__restrict __endptr, int __base,
     __locale_t __loc) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 4)));
extern unsigned long int strtoul_l (const char *__restrict __nptr,
        char **__restrict __endptr,
        int __base, __locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 4)));
__extension__
extern long long int strtoll_l (const char *__restrict __nptr,
    char **__restrict __endptr, int __base,
    __locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 4)));
__extension__
extern unsigned long long int strtoull_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       int __base, __locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 4)));
extern double strtod_l (const char *__restrict __nptr,
   char **__restrict __endptr, __locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3)));
extern float strtof_l (const char *__restrict __nptr,
         char **__restrict __endptr, __locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3)));
extern long double strtold_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         __locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3)));
extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__nothrow__ , __leaf__)) atoi (const char *__nptr)
{
  return (int) strtol (__nptr, (char **) ((void *)0), 10);
}
extern __inline __attribute__ ((__gnu_inline__)) long int
__attribute__ ((__nothrow__ , __leaf__)) atol (const char *__nptr)
{
  return strtol (__nptr, (char **) ((void *)0), 10);
}
__extension__ extern __inline __attribute__ ((__gnu_inline__)) long long int
__attribute__ ((__nothrow__ , __leaf__)) atoll (const char *__nptr)
{
  return strtoll (__nptr, (char **) ((void *)0), 10);
}
extern char *l64a (long int __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
extern long int a64l (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
extern long int random (void) __attribute__ ((__nothrow__ , __leaf__));
extern void srandom (unsigned int __seed) __attribute__ ((__nothrow__ , __leaf__));
extern char *initstate (unsigned int __seed, char *__statebuf,
   size_t __statelen) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));
extern char *setstate (char *__statebuf) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
struct random_data
  {
    int32_t *fptr;
    int32_t *rptr;
    int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    int32_t *end_ptr;
  };
extern int random_r (struct random_data *__restrict __buf,
       int32_t *__restrict __result) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));
extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
   size_t __statelen,
   struct random_data *__restrict __buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4)));
extern int setstate_r (char *__restrict __statebuf,
         struct random_data *__restrict __buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int rand (void) __attribute__ ((__nothrow__ , __leaf__));
extern void srand (unsigned int __seed) __attribute__ ((__nothrow__ , __leaf__));
extern int rand_r (unsigned int *__seed) __attribute__ ((__nothrow__ , __leaf__));
extern double drand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern double erand48 (unsigned short int __xsubi[3]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern long int lrand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern long int nrand48 (unsigned short int __xsubi[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern long int mrand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern long int jrand48 (unsigned short int __xsubi[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern void srand48 (long int __seedval) __attribute__ ((__nothrow__ , __leaf__));
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
struct drand48_data
  {
    unsigned short int __x[3];
    unsigned short int __old_x[3];
    unsigned short int __c;
    unsigned short int __init;
    __extension__ unsigned long long int __a;
  };
extern int drand48_r (struct drand48_data *__restrict __buffer,
        double *__restrict __result) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int erand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        double *__restrict __result) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int lrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int nrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int mrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int jrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));
extern int seed48_r (unsigned short int __seed16v[3],
       struct drand48_data *__buffer) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int lcong48_r (unsigned short int __param[7],
        struct drand48_data *__buffer)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern void *malloc (size_t __size) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__warn_unused_result__));
extern void *calloc (size_t __nmemb, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__warn_unused_result__));
extern void *realloc (void *__ptr, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
extern void free (void *__ptr) __attribute__ ((__nothrow__ , __leaf__));
extern void cfree (void *__ptr) __attribute__ ((__nothrow__ , __leaf__));
extern void *valloc (size_t __size) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__warn_unused_result__));
extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
extern void *aligned_alloc (size_t __alignment, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__alloc_size__ (2))) __attribute__ ((__warn_unused_result__));
extern void abort (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));
extern int atexit (void (*__func) (void)) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern int at_quick_exit (void (*__func) (void)) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern void exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));
extern void quick_exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));
extern void _Exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));
extern char *getenv (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
extern char *secure_getenv (const char *__name)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
extern int putenv (char *__string) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern int setenv (const char *__name, const char *__value, int __replace)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));
extern int unsetenv (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern int clearenv (void) __attribute__ ((__nothrow__ , __leaf__));
extern char *mktemp (char *__template) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern int mkstemp (char *__template) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
extern int mkstemp64 (char *__template) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
extern int mkstemps (char *__template, int __suffixlen) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
extern int mkstemps64 (char *__template, int __suffixlen)
     __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
extern char *mkdtemp (char *__template) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
extern int mkostemp (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
extern int mkostemp64 (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
extern int mkostemps (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
extern int mkostemps64 (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
extern int system (const char *__command) __attribute__ ((__warn_unused_result__));
extern char *canonicalize_file_name (const char *__name)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
extern char *realpath (const char *__restrict __name,
         char *__restrict __resolved) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
typedef int (*__compar_fn_t) (const void *, const void *);
typedef __compar_fn_t comparison_fn_t;
typedef int (*__compar_d_fn_t) (const void *, const void *, void *);
extern void *bsearch (const void *__key, const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) __attribute__ ((__warn_unused_result__));
extern __inline __attribute__ ((__gnu_inline__)) void *
bsearch (const void *__key, const void *__base, size_t __nmemb, size_t __size,
  __compar_fn_t __compar)
{
  size_t __l, __u, __idx;
  const void *__p;
  int __comparison;
  __l = 0;
  __u = __nmemb;
  while (__l < __u)
    {
      __idx = (__l + __u) / 2;
      __p = (void *) (((const char *) __base) + (__idx * __size));
      __comparison = (*__compar) (__key, __p);
      if (__comparison < 0)
 __u = __idx;
      else if (__comparison > 0)
 __l = __idx + 1;
      else
 return (void *) __p;
    }
  return ((void *)0);
}
extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));
extern void qsort_r (void *__base, size_t __nmemb, size_t __size,
       __compar_d_fn_t __compar, void *__arg)
  __attribute__ ((__nonnull__ (1, 4)));
extern int abs (int __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) __attribute__ ((__warn_unused_result__));
extern long int labs (long int __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) __attribute__ ((__warn_unused_result__));
__extension__ extern long long int llabs (long long int __x)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) __attribute__ ((__warn_unused_result__));
extern div_t div (int __numer, int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) __attribute__ ((__warn_unused_result__));
extern ldiv_t ldiv (long int __numer, long int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) __attribute__ ((__warn_unused_result__));
__extension__ extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) __attribute__ ((__warn_unused_result__));
extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) __attribute__ ((__warn_unused_result__));
extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) __attribute__ ((__warn_unused_result__));
extern char *gcvt (double __value, int __ndigit, char *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3))) __attribute__ ((__warn_unused_result__));
extern char *qecvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) __attribute__ ((__warn_unused_result__));
extern char *qfcvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) __attribute__ ((__warn_unused_result__));
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3))) __attribute__ ((__warn_unused_result__));
extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qecvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qfcvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int mblen (const char *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__));
extern int mbtowc (wchar_t *__restrict __pwc,
     const char *__restrict __s, size_t __n) __attribute__ ((__nothrow__ , __leaf__));
extern int wctomb (char *__s, wchar_t __wchar) __attribute__ ((__nothrow__ , __leaf__));
extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   const char *__restrict __s, size_t __n) __attribute__ ((__nothrow__ , __leaf__));
extern size_t wcstombs (char *__restrict __s,
   const wchar_t *__restrict __pwcs, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__));
extern int rpmatch (const char *__response) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
extern int getsubopt (char **__restrict __optionp,
        char *const *__restrict __tokens,
        char **__restrict __valuep)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2, 3))) __attribute__ ((__warn_unused_result__));
extern void setkey (const char *__key) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern int posix_openpt (int __oflag) __attribute__ ((__warn_unused_result__));
extern int grantpt (int __fd) __attribute__ ((__nothrow__ , __leaf__));
extern int unlockpt (int __fd) __attribute__ ((__nothrow__ , __leaf__));
extern char *ptsname (int __fd) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
extern int ptsname_r (int __fd, char *__buf, size_t __buflen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));
extern int getpt (void);
extern int getloadavg (double __loadavg[], int __nelem)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern __inline __attribute__ ((__gnu_inline__)) double
__attribute__ ((__nothrow__ , __leaf__)) atof (const char *__nptr)
{
  return strtod (__nptr, (char **) ((void *)0));
}
extern char *__realpath_chk (const char *__restrict __name,
        char *__restrict __resolved,
        size_t __resolvedlen) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
extern char *__realpath_alias (const char *__restrict __name, char *__restrict __resolved) __asm__ ("" "realpath") __attribute__ ((__nothrow__ , __leaf__))
                                                 __attribute__ ((__warn_unused_result__));
extern char *__realpath_chk_warn (const char *__restrict __name, char *__restrict __resolved, size_t __resolvedlen) __asm__ ("" "__realpath_chk") __attribute__ ((__nothrow__ , __leaf__))
                                                __attribute__ ((__warn_unused_result__))
     __attribute__((__warning__ ("second argument of realpath must be either NULL or at " "least PATH_MAX bytes long buffer")))
                                      ;
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) char *
__attribute__ ((__nothrow__ , __leaf__)) realpath (const char *__restrict __name, char *__restrict __resolved)
{
  if (__builtin_object_size (__resolved, 2 > 1) != (size_t) -1)
    {
      return __realpath_chk (__name, __resolved, __builtin_object_size (__resolved, 2 > 1));
    }
  return __realpath_alias (__name, __resolved);
}
extern int __ptsname_r_chk (int __fd, char *__buf, size_t __buflen,
       size_t __nreal) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));
extern int __ptsname_r_alias (int __fd, char *__buf, size_t __buflen) __asm__ ("" "ptsname_r") __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__nonnull__ (2)));
extern int __ptsname_r_chk_warn (int __fd, char *__buf, size_t __buflen, size_t __nreal) __asm__ ("" "__ptsname_r_chk") __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__nonnull__ (2))) __attribute__((__warning__ ("ptsname_r called with buflen bigger than " "size of buf")))
                   ;
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__nothrow__ , __leaf__)) ptsname_r (int __fd, char *__buf, size_t __buflen)
{
  if (__builtin_object_size (__buf, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__buflen))
 return __ptsname_r_chk (__fd, __buf, __buflen, __builtin_object_size (__buf, 2 > 1));
      if (__buflen > __builtin_object_size (__buf, 2 > 1))
 return __ptsname_r_chk_warn (__fd, __buf, __buflen, __builtin_object_size (__buf, 2 > 1));
    }
  return __ptsname_r_alias (__fd, __buf, __buflen);
}
extern int __wctomb_chk (char *__s, wchar_t __wchar, size_t __buflen)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
extern int __wctomb_alias (char *__s, wchar_t __wchar) __asm__ ("" "wctomb") __attribute__ ((__nothrow__ , __leaf__))
              __attribute__ ((__warn_unused_result__));
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) int
__attribute__ ((__nothrow__ , __leaf__)) wctomb (char *__s, wchar_t __wchar)
{
  if (__builtin_object_size (__s, 2 > 1) != (size_t) -1 && 16 > __builtin_object_size (__s, 2 > 1))
    return __wctomb_chk (__s, __wchar, __builtin_object_size (__s, 2 > 1));
  return __wctomb_alias (__s, __wchar);
}
extern size_t __mbstowcs_chk (wchar_t *__restrict __dst,
         const char *__restrict __src,
         size_t __len, size_t __dstlen) __attribute__ ((__nothrow__ , __leaf__));
extern size_t __mbstowcs_alias (wchar_t *__restrict __dst, const char *__restrict __src, size_t __len) __asm__ ("" "mbstowcs") __attribute__ ((__nothrow__ , __leaf__))
                                  ;
extern size_t __mbstowcs_chk_warn (wchar_t *__restrict __dst, const char *__restrict __src, size_t __len, size_t __dstlen) __asm__ ("" "__mbstowcs_chk") __attribute__ ((__nothrow__ , __leaf__))
     __attribute__((__warning__ ("mbstowcs called with dst buffer smaller than len " "* sizeof (wchar_t)")))
                        ;
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) size_t
__attribute__ ((__nothrow__ , __leaf__)) mbstowcs (wchar_t *__restrict __dst, const char *__restrict __src, size_t __len)
{
  if (__builtin_object_size (__dst, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__len))
 return __mbstowcs_chk (__dst, __src, __len,
          __builtin_object_size (__dst, 2 > 1) / sizeof (wchar_t));
      if (__len > __builtin_object_size (__dst, 2 > 1) / sizeof (wchar_t))
 return __mbstowcs_chk_warn (__dst, __src, __len,
         __builtin_object_size (__dst, 2 > 1) / sizeof (wchar_t));
    }
  return __mbstowcs_alias (__dst, __src, __len);
}
extern size_t __wcstombs_chk (char *__restrict __dst,
         const wchar_t *__restrict __src,
         size_t __len, size_t __dstlen) __attribute__ ((__nothrow__ , __leaf__));
extern size_t __wcstombs_alias (char *__restrict __dst, const wchar_t *__restrict __src, size_t __len) __asm__ ("" "wcstombs") __attribute__ ((__nothrow__ , __leaf__))
                                  ;
extern size_t __wcstombs_chk_warn (char *__restrict __dst, const wchar_t *__restrict __src, size_t __len, size_t __dstlen) __asm__ ("" "__wcstombs_chk") __attribute__ ((__nothrow__ , __leaf__))
     __attribute__((__warning__ ("wcstombs called with dst buffer smaller than len")));
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) size_t
__attribute__ ((__nothrow__ , __leaf__)) wcstombs (char *__restrict __dst, const wchar_t *__restrict __src, size_t __len)
{
  if (__builtin_object_size (__dst, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__len))
 return __wcstombs_chk (__dst, __src, __len, __builtin_object_size (__dst, 2 > 1));
      if (__len > __builtin_object_size (__dst, 2 > 1))
 return __wcstombs_chk_warn (__dst, __src, __len, __builtin_object_size (__dst, 2 > 1));
    }
  return __wcstombs_alias (__dst, __src, __len);
}
extern int _gl_cxxalias_dummy;
extern int _gl_cxxalias_dummy;
extern int _gl_cxxalias_dummy;
extern int _gl_cxxalias_dummy;
extern int _gl_cxxalias_dummy;
extern int _gl_cxxalias_dummy;
extern int *__errno_location (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
extern char *program_invocation_name, *program_invocation_short_name;
typedef int error_t;
inline 
              _Bool
c_isalnum (int c)
{
  switch (c)
    {
    case '0': case '1': case '2': case '3': case '4': case '5': case '6': case '7': case '8': case '9':
    case 'a' + (0): case 'b' + (0): case 'c' + (0): case 'd' + (0): case 'e' + (0): case 'f' + (0): case 'g' + (0): case 'h' + (0): case 'i' + (0): case 'j' + (0): case 'k' + (0): case 'l' + (0): case 'm' + (0): case 'n' + (0): case 'o' + (0): case 'p' + (0): case 'q' + (0): case 'r' + (0): case 's' + (0): case 't' + (0): case 'u' + (0): case 'v' + (0): case 'w' + (0): case 'x' + (0): case 'y' + (0): case 'z' + (0):
    case 'a' + ('A' - 'a'): case 'b' + ('A' - 'a'): case 'c' + ('A' - 'a'): case 'd' + ('A' - 'a'): case 'e' + ('A' - 'a'): case 'f' + ('A' - 'a'): case 'g' + ('A' - 'a'): case 'h' + ('A' - 'a'): case 'i' + ('A' - 'a'): case 'j' + ('A' - 'a'): case 'k' + ('A' - 'a'): case 'l' + ('A' - 'a'): case 'm' + ('A' - 'a'): case 'n' + ('A' - 'a'): case 'o' + ('A' - 'a'): case 'p' + ('A' - 'a'): case 'q' + ('A' - 'a'): case 'r' + ('A' - 'a'): case 's' + ('A' - 'a'): case 't' + ('A' - 'a'): case 'u' + ('A' - 'a'): case 'v' + ('A' - 'a'): case 'w' + ('A' - 'a'): case 'x' + ('A' - 'a'): case 'y' + ('A' - 'a'): case 'z' + ('A' - 'a'):
      return 
            1
                ;
    default:
      return 
            0
                 ;
    }
}
inline 
              _Bool
c_isalpha (int c)
{
  switch (c)
    {
    case 'a' + (0): case 'b' + (0): case 'c' + (0): case 'd' + (0): case 'e' + (0): case 'f' + (0): case 'g' + (0): case 'h' + (0): case 'i' + (0): case 'j' + (0): case 'k' + (0): case 'l' + (0): case 'm' + (0): case 'n' + (0): case 'o' + (0): case 'p' + (0): case 'q' + (0): case 'r' + (0): case 's' + (0): case 't' + (0): case 'u' + (0): case 'v' + (0): case 'w' + (0): case 'x' + (0): case 'y' + (0): case 'z' + (0):
    case 'a' + ('A' - 'a'): case 'b' + ('A' - 'a'): case 'c' + ('A' - 'a'): case 'd' + ('A' - 'a'): case 'e' + ('A' - 'a'): case 'f' + ('A' - 'a'): case 'g' + ('A' - 'a'): case 'h' + ('A' - 'a'): case 'i' + ('A' - 'a'): case 'j' + ('A' - 'a'): case 'k' + ('A' - 'a'): case 'l' + ('A' - 'a'): case 'm' + ('A' - 'a'): case 'n' + ('A' - 'a'): case 'o' + ('A' - 'a'): case 'p' + ('A' - 'a'): case 'q' + ('A' - 'a'): case 'r' + ('A' - 'a'): case 's' + ('A' - 'a'): case 't' + ('A' - 'a'): case 'u' + ('A' - 'a'): case 'v' + ('A' - 'a'): case 'w' + ('A' - 'a'): case 'x' + ('A' - 'a'): case 'y' + ('A' - 'a'): case 'z' + ('A' - 'a'):
      return 
            1
                ;
    default:
      return 
            0
                 ;
    }
}
inline 
              _Bool
c_isascii (int c)
{
  switch (c)
    {
    case ' ':
    case '\a': case '\b': case '\f': case '\n': case '\r': case '\t': case '\v': case '\x00': case '\x01': case '\x02': case '\x03': case '\x04': case '\x05': case '\x06': case '\x0e': case '\x0f': case '\x10': case '\x11': case '\x12': case '\x13': case '\x14': case '\x15': case '\x16': case '\x17': case '\x18': case '\x19': case '\x1a': case '\x1b': case '\x1c': case '\x1d': case '\x1e': case '\x1f': case '\x7f':
    case '0': case '1': case '2': case '3': case '4': case '5': case '6': case '7': case '8': case '9':
    case 'a' + (0): case 'b' + (0): case 'c' + (0): case 'd' + (0): case 'e' + (0): case 'f' + (0): case 'g' + (0): case 'h' + (0): case 'i' + (0): case 'j' + (0): case 'k' + (0): case 'l' + (0): case 'm' + (0): case 'n' + (0): case 'o' + (0): case 'p' + (0): case 'q' + (0): case 'r' + (0): case 's' + (0): case 't' + (0): case 'u' + (0): case 'v' + (0): case 'w' + (0): case 'x' + (0): case 'y' + (0): case 'z' + (0):
    case '!': case '"': case '#': case '$': case '%': case '&': case '\'': case '(': case ')': case '*': case '+': case ',': case '-': case '.': case '/': case ':': case ';': case '<': case '=': case '>': case '?': case '@': case '[': case '\\': case ']': case '^': case '_': case '`': case '{': case '|': case '}': case '~':
    case 'a' + ('A' - 'a'): case 'b' + ('A' - 'a'): case 'c' + ('A' - 'a'): case 'd' + ('A' - 'a'): case 'e' + ('A' - 'a'): case 'f' + ('A' - 'a'): case 'g' + ('A' - 'a'): case 'h' + ('A' - 'a'): case 'i' + ('A' - 'a'): case 'j' + ('A' - 'a'): case 'k' + ('A' - 'a'): case 'l' + ('A' - 'a'): case 'm' + ('A' - 'a'): case 'n' + ('A' - 'a'): case 'o' + ('A' - 'a'): case 'p' + ('A' - 'a'): case 'q' + ('A' - 'a'): case 'r' + ('A' - 'a'): case 's' + ('A' - 'a'): case 't' + ('A' - 'a'): case 'u' + ('A' - 'a'): case 'v' + ('A' - 'a'): case 'w' + ('A' - 'a'): case 'x' + ('A' - 'a'): case 'y' + ('A' - 'a'): case 'z' + ('A' - 'a'):
      return 
            1
                ;
    default:
      return 
            0
                 ;
    }
}
inline 
              _Bool
c_isblank (int c)
{
  return c == ' ' || c == '\t';
}
inline 
              _Bool
c_iscntrl (int c)
{
  switch (c)
    {
    case '\a': case '\b': case '\f': case '\n': case '\r': case '\t': case '\v': case '\x00': case '\x01': case '\x02': case '\x03': case '\x04': case '\x05': case '\x06': case '\x0e': case '\x0f': case '\x10': case '\x11': case '\x12': case '\x13': case '\x14': case '\x15': case '\x16': case '\x17': case '\x18': case '\x19': case '\x1a': case '\x1b': case '\x1c': case '\x1d': case '\x1e': case '\x1f': case '\x7f':
      return 
            1
                ;
    default:
      return 
            0
                 ;
    }
}
inline 
              _Bool
c_isdigit (int c)
{
  switch (c)
    {
    case '0': case '1': case '2': case '3': case '4': case '5': case '6': case '7': case '8': case '9':
      return 
            1
                ;
    default:
      return 
            0
                 ;
    }
}
inline 
              _Bool
c_isgraph (int c)
{
  switch (c)
    {
    case '0': case '1': case '2': case '3': case '4': case '5': case '6': case '7': case '8': case '9':
    case 'a' + (0): case 'b' + (0): case 'c' + (0): case 'd' + (0): case 'e' + (0): case 'f' + (0): case 'g' + (0): case 'h' + (0): case 'i' + (0): case 'j' + (0): case 'k' + (0): case 'l' + (0): case 'm' + (0): case 'n' + (0): case 'o' + (0): case 'p' + (0): case 'q' + (0): case 'r' + (0): case 's' + (0): case 't' + (0): case 'u' + (0): case 'v' + (0): case 'w' + (0): case 'x' + (0): case 'y' + (0): case 'z' + (0):
    case '!': case '"': case '#': case '$': case '%': case '&': case '\'': case '(': case ')': case '*': case '+': case ',': case '-': case '.': case '/': case ':': case ';': case '<': case '=': case '>': case '?': case '@': case '[': case '\\': case ']': case '^': case '_': case '`': case '{': case '|': case '}': case '~':
    case 'a' + ('A' - 'a'): case 'b' + ('A' - 'a'): case 'c' + ('A' - 'a'): case 'd' + ('A' - 'a'): case 'e' + ('A' - 'a'): case 'f' + ('A' - 'a'): case 'g' + ('A' - 'a'): case 'h' + ('A' - 'a'): case 'i' + ('A' - 'a'): case 'j' + ('A' - 'a'): case 'k' + ('A' - 'a'): case 'l' + ('A' - 'a'): case 'm' + ('A' - 'a'): case 'n' + ('A' - 'a'): case 'o' + ('A' - 'a'): case 'p' + ('A' - 'a'): case 'q' + ('A' - 'a'): case 'r' + ('A' - 'a'): case 's' + ('A' - 'a'): case 't' + ('A' - 'a'): case 'u' + ('A' - 'a'): case 'v' + ('A' - 'a'): case 'w' + ('A' - 'a'): case 'x' + ('A' - 'a'): case 'y' + ('A' - 'a'): case 'z' + ('A' - 'a'):
      return 
            1
                ;
    default:
      return 
            0
                 ;
    }
}
inline 
              _Bool
c_islower (int c)
{
  switch (c)
    {
    case 'a' + (0): case 'b' + (0): case 'c' + (0): case 'd' + (0): case 'e' + (0): case 'f' + (0): case 'g' + (0): case 'h' + (0): case 'i' + (0): case 'j' + (0): case 'k' + (0): case 'l' + (0): case 'm' + (0): case 'n' + (0): case 'o' + (0): case 'p' + (0): case 'q' + (0): case 'r' + (0): case 's' + (0): case 't' + (0): case 'u' + (0): case 'v' + (0): case 'w' + (0): case 'x' + (0): case 'y' + (0): case 'z' + (0):
      return 
            1
                ;
    default:
      return 
            0
                 ;
    }
}
inline 
              _Bool
c_isprint (int c)
{
  switch (c)
    {
    case ' ':
    case '0': case '1': case '2': case '3': case '4': case '5': case '6': case '7': case '8': case '9':
    case 'a' + (0): case 'b' + (0): case 'c' + (0): case 'd' + (0): case 'e' + (0): case 'f' + (0): case 'g' + (0): case 'h' + (0): case 'i' + (0): case 'j' + (0): case 'k' + (0): case 'l' + (0): case 'm' + (0): case 'n' + (0): case 'o' + (0): case 'p' + (0): case 'q' + (0): case 'r' + (0): case 's' + (0): case 't' + (0): case 'u' + (0): case 'v' + (0): case 'w' + (0): case 'x' + (0): case 'y' + (0): case 'z' + (0):
    case '!': case '"': case '#': case '$': case '%': case '&': case '\'': case '(': case ')': case '*': case '+': case ',': case '-': case '.': case '/': case ':': case ';': case '<': case '=': case '>': case '?': case '@': case '[': case '\\': case ']': case '^': case '_': case '`': case '{': case '|': case '}': case '~':
    case 'a' + ('A' - 'a'): case 'b' + ('A' - 'a'): case 'c' + ('A' - 'a'): case 'd' + ('A' - 'a'): case 'e' + ('A' - 'a'): case 'f' + ('A' - 'a'): case 'g' + ('A' - 'a'): case 'h' + ('A' - 'a'): case 'i' + ('A' - 'a'): case 'j' + ('A' - 'a'): case 'k' + ('A' - 'a'): case 'l' + ('A' - 'a'): case 'm' + ('A' - 'a'): case 'n' + ('A' - 'a'): case 'o' + ('A' - 'a'): case 'p' + ('A' - 'a'): case 'q' + ('A' - 'a'): case 'r' + ('A' - 'a'): case 's' + ('A' - 'a'): case 't' + ('A' - 'a'): case 'u' + ('A' - 'a'): case 'v' + ('A' - 'a'): case 'w' + ('A' - 'a'): case 'x' + ('A' - 'a'): case 'y' + ('A' - 'a'): case 'z' + ('A' - 'a'):
      return 
            1
                ;
    default:
      return 
            0
                 ;
    }
}
inline 
              _Bool
c_ispunct (int c)
{
  switch (c)
    {
    case '!': case '"': case '#': case '$': case '%': case '&': case '\'': case '(': case ')': case '*': case '+': case ',': case '-': case '.': case '/': case ':': case ';': case '<': case '=': case '>': case '?': case '@': case '[': case '\\': case ']': case '^': case '_': case '`': case '{': case '|': case '}': case '~':
      return 
            1
                ;
    default:
      return 
            0
                 ;
    }
}
inline 
              _Bool
c_isspace (int c)
{
  switch (c)
    {
    case ' ': case '\t': case '\n': case '\v': case '\f': case '\r':
      return 
            1
                ;
    default:
      return 
            0
                 ;
    }
}
inline 
              _Bool
c_isupper (int c)
{
  switch (c)
    {
    case 'a' + ('A' - 'a'): case 'b' + ('A' - 'a'): case 'c' + ('A' - 'a'): case 'd' + ('A' - 'a'): case 'e' + ('A' - 'a'): case 'f' + ('A' - 'a'): case 'g' + ('A' - 'a'): case 'h' + ('A' - 'a'): case 'i' + ('A' - 'a'): case 'j' + ('A' - 'a'): case 'k' + ('A' - 'a'): case 'l' + ('A' - 'a'): case 'm' + ('A' - 'a'): case 'n' + ('A' - 'a'): case 'o' + ('A' - 'a'): case 'p' + ('A' - 'a'): case 'q' + ('A' - 'a'): case 'r' + ('A' - 'a'): case 's' + ('A' - 'a'): case 't' + ('A' - 'a'): case 'u' + ('A' - 'a'): case 'v' + ('A' - 'a'): case 'w' + ('A' - 'a'): case 'x' + ('A' - 'a'): case 'y' + ('A' - 'a'): case 'z' + ('A' - 'a'):
      return 
            1
                ;
    default:
      return 
            0
                 ;
    }
}
inline 
              _Bool
c_isxdigit (int c)
{
  switch (c)
    {
    case '0': case '1': case '2': case '3': case '4': case '5': case '6': case '7': case '8': case '9':
    case 'a' + (0): case 'b' + (0): case 'c' + (0): case 'd' + (0): case 'e' + (0): case 'f' + (0): case 'a' + ('A' - 'a'): case 'b' + ('A' - 'a'): case 'c' + ('A' - 'a'): case 'd' + ('A' - 'a'): case 'e' + ('A' - 'a'): case 'f' + ('A' - 'a'):
      return 
            1
                ;
    default:
      return 
            0
                 ;
    }
}
inline int
c_tolower (int c)
{
  switch (c)
    {
    case 'a' + ('A' - 'a'): case 'b' + ('A' - 'a'): case 'c' + ('A' - 'a'): case 'd' + ('A' - 'a'): case 'e' + ('A' - 'a'): case 'f' + ('A' - 'a'): case 'g' + ('A' - 'a'): case 'h' + ('A' - 'a'): case 'i' + ('A' - 'a'): case 'j' + ('A' - 'a'): case 'k' + ('A' - 'a'): case 'l' + ('A' - 'a'): case 'm' + ('A' - 'a'): case 'n' + ('A' - 'a'): case 'o' + ('A' - 'a'): case 'p' + ('A' - 'a'): case 'q' + ('A' - 'a'): case 'r' + ('A' - 'a'): case 's' + ('A' - 'a'): case 't' + ('A' - 'a'): case 'u' + ('A' - 'a'): case 'v' + ('A' - 'a'): case 'w' + ('A' - 'a'): case 'x' + ('A' - 'a'): case 'y' + ('A' - 'a'): case 'z' + ('A' - 'a'):
      return c - 'A' + 'a';
    default:
      return c;
    }
}
inline int
c_toupper (int c)
{
  switch (c)
    {
    case 'a' + (0): case 'b' + (0): case 'c' + (0): case 'd' + (0): case 'e' + (0): case 'f' + (0): case 'g' + (0): case 'h' + (0): case 'i' + (0): case 'j' + (0): case 'k' + (0): case 'l' + (0): case 'm' + (0): case 'n' + (0): case 'o' + (0): case 'p' + (0): case 'q' + (0): case 'r' + (0): case 's' + (0): case 't' + (0): case 'u' + (0): case 'v' + (0): case 'w' + (0): case 'x' + (0): case 'y' + (0): case 'z' + (0):
      return c - 'a' + 'A';
    default:
      return c;
    }
}
typedef long int __jmp_buf[8];
struct __jmp_buf_tag
  {
    __jmp_buf __jmpbuf;
    int __mask_was_saved;
    __sigset_t __saved_mask;
  };
typedef struct __jmp_buf_tag jmp_buf[1];
extern int setjmp (jmp_buf __env) __attribute__ ((__nothrow__));
extern int __sigsetjmp (struct __jmp_buf_tag __env[1], int __savemask) __attribute__ ((__nothrow__));
extern int _setjmp (struct __jmp_buf_tag __env[1]) __attribute__ ((__nothrow__));
extern void longjmp (struct __jmp_buf_tag __env[1], int __val)
     __attribute__ ((__nothrow__)) __attribute__ ((__noreturn__));
extern void _longjmp (struct __jmp_buf_tag __env[1], int __val)
     __attribute__ ((__nothrow__)) __attribute__ ((__noreturn__));
typedef struct __jmp_buf_tag sigjmp_buf[1];
extern void siglongjmp (sigjmp_buf __env, int __val)
     __attribute__ ((__nothrow__)) __attribute__ ((__noreturn__));
extern void longjmp (struct __jmp_buf_tag __env[1], int __val) __asm__ ("" "__longjmp_chk") __attribute__ ((__nothrow__))
                        __attribute__ ((__noreturn__));
extern void _longjmp (struct __jmp_buf_tag __env[1], int __val) __asm__ ("" "__longjmp_chk") __attribute__ ((__nothrow__))
                        __attribute__ ((__noreturn__));
extern void siglongjmp (struct __jmp_buf_tag __env[1], int __val) __asm__ ("" "__longjmp_chk") __attribute__ ((__nothrow__))
                        __attribute__ ((__noreturn__));
extern void *memcpy (void *__restrict __dest, const void *__restrict __src,
       size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern void *memmove (void *__dest, const void *__src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern void *memccpy (void *__restrict __dest, const void *__restrict __src,
        int __c, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern void *memset (void *__s, int __c, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern int memcmp (const void *__s1, const void *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern void *memchr (const void *__s, int __c, size_t __n)
      __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern void *rawmemchr (const void *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern void *memrchr (const void *__s, int __c, size_t __n)
      __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern char *strcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern char *strncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern char *strcat (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern char *strncat (char *__restrict __dest, const char *__restrict __src,
        size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int strcmp (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern int strncmp (const char *__s1, const char *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern int strcoll (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern size_t strxfrm (char *__restrict __dest,
         const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));
extern int strcoll_l (const char *__s1, const char *__s2, __locale_t __l)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));
extern size_t strxfrm_l (char *__dest, const char *__src, size_t __n,
    __locale_t __l) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4)));
extern char *strdup (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));
extern char *strndup (const char *__string, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));
extern char *strchr (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern char *strrchr (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern char *strchrnul (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern size_t strcspn (const char *__s, const char *__reject)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern size_t strspn (const char *__s, const char *__accept)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern char *strpbrk (const char *__s, const char *__accept)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern char *strstr (const char *__haystack, const char *__needle)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern char *strtok (char *__restrict __s, const char *__restrict __delim)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));
extern char *__strtok_r (char *__restrict __s,
    const char *__restrict __delim,
    char **__restrict __save_ptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));
extern char *strtok_r (char *__restrict __s, const char *__restrict __delim,
         char **__restrict __save_ptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));
extern char *strcasestr (const char *__haystack, const char *__needle)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern void *memmem (const void *__haystack, size_t __haystacklen,
       const void *__needle, size_t __needlelen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 3)));
extern void *__mempcpy (void *__restrict __dest,
   const void *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern void *mempcpy (void *__restrict __dest,
        const void *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern size_t strlen (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern size_t strnlen (const char *__string, size_t __maxlen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern char *strerror (int __errnum) __attribute__ ((__nothrow__ , __leaf__));
extern char *strerror_r (int __errnum, char *__buf, size_t __buflen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2))) __attribute__ ((__warn_unused_result__));
extern char *strerror_l (int __errnum, __locale_t __l) __attribute__ ((__nothrow__ , __leaf__));
extern void __bzero (void *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern void bcopy (const void *__src, void *__dest, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern void bzero (void *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern int bcmp (const void *__s1, const void *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern char *index (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern char *rindex (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern int ffs (int __i) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
extern int ffsl (long int __l) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
__extension__ extern int ffsll (long long int __ll)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
extern int strcasecmp (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern int strncasecmp (const char *__s1, const char *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern int strcasecmp_l (const char *__s1, const char *__s2,
    __locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));
extern int strncasecmp_l (const char *__s1, const char *__s2,
     size_t __n, __locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 4)));
extern char *strsep (char **__restrict __stringp,
       const char *__restrict __delim)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern char *strsignal (int __sig) __attribute__ ((__nothrow__ , __leaf__));
extern char *__stpcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern char *stpcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern char *__stpncpy (char *__restrict __dest,
   const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern char *stpncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int strverscmp (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern char *strfry (char *__string) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern void *memfrob (void *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern char *basename (const char *__filename) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern void *__rawmemchr (const void *__s, int __c);
extern __inline __attribute__ ((__gnu_inline__)) size_t __strcspn_c1 (const char *__s, int __reject);
extern __inline __attribute__ ((__gnu_inline__)) size_t
__strcspn_c1 (const char *__s, int __reject)
{
  size_t __result = 0;
  while (__s[__result] != '\0' && __s[__result] != __reject)
    ++__result;
  return __result;
}
extern __inline __attribute__ ((__gnu_inline__)) size_t __strcspn_c2 (const char *__s, int __reject1,
         int __reject2);
extern __inline __attribute__ ((__gnu_inline__)) size_t
__strcspn_c2 (const char *__s, int __reject1, int __reject2)
{
  size_t __result = 0;
  while (__s[__result] != '\0' && __s[__result] != __reject1
  && __s[__result] != __reject2)
    ++__result;
  return __result;
}
extern __inline __attribute__ ((__gnu_inline__)) size_t __strcspn_c3 (const char *__s, int __reject1,
         int __reject2, int __reject3);
extern __inline __attribute__ ((__gnu_inline__)) size_t
__strcspn_c3 (const char *__s, int __reject1, int __reject2,
       int __reject3)
{
  size_t __result = 0;
  while (__s[__result] != '\0' && __s[__result] != __reject1
  && __s[__result] != __reject2 && __s[__result] != __reject3)
    ++__result;
  return __result;
}
extern __inline __attribute__ ((__gnu_inline__)) size_t __strspn_c1 (const char *__s, int __accept);
extern __inline __attribute__ ((__gnu_inline__)) size_t
__strspn_c1 (const char *__s, int __accept)
{
  size_t __result = 0;
  while (__s[__result] == __accept)
    ++__result;
  return __result;
}
extern __inline __attribute__ ((__gnu_inline__)) size_t __strspn_c2 (const char *__s, int __accept1,
        int __accept2);
extern __inline __attribute__ ((__gnu_inline__)) size_t
__strspn_c2 (const char *__s, int __accept1, int __accept2)
{
  size_t __result = 0;
  while (__s[__result] == __accept1 || __s[__result] == __accept2)
    ++__result;
  return __result;
}
extern __inline __attribute__ ((__gnu_inline__)) size_t __strspn_c3 (const char *__s, int __accept1,
        int __accept2, int __accept3);
extern __inline __attribute__ ((__gnu_inline__)) size_t
__strspn_c3 (const char *__s, int __accept1, int __accept2, int __accept3)
{
  size_t __result = 0;
  while (__s[__result] == __accept1 || __s[__result] == __accept2
  || __s[__result] == __accept3)
    ++__result;
  return __result;
}
extern __inline __attribute__ ((__gnu_inline__)) char *__strpbrk_c2 (const char *__s, int __accept1,
        int __accept2);
extern __inline __attribute__ ((__gnu_inline__)) char *
__strpbrk_c2 (const char *__s, int __accept1, int __accept2)
{
  while (*__s != '\0' && *__s != __accept1 && *__s != __accept2)
    ++__s;
  return *__s == '\0' ? ((void *)0) : (char *) (size_t) __s;
}
extern __inline __attribute__ ((__gnu_inline__)) char *__strpbrk_c3 (const char *__s, int __accept1,
        int __accept2, int __accept3);
extern __inline __attribute__ ((__gnu_inline__)) char *
__strpbrk_c3 (const char *__s, int __accept1, int __accept2, int __accept3)
{
  while (*__s != '\0' && *__s != __accept1 && *__s != __accept2
  && *__s != __accept3)
    ++__s;
  return *__s == '\0' ? ((void *)0) : (char *) (size_t) __s;
}
extern __inline __attribute__ ((__gnu_inline__)) char *__strtok_r_1c (char *__s, char __sep, char **__nextp);
extern __inline __attribute__ ((__gnu_inline__)) char *
__strtok_r_1c (char *__s, char __sep, char **__nextp)
{
  char *__result;
  if (__s == ((void *)0))
    __s = *__nextp;
  while (*__s == __sep)
    ++__s;
  __result = ((void *)0);
  if (*__s != '\0')
    {
      __result = __s++;
      while (*__s != '\0')
 if (*__s++ == __sep)
   {
     __s[-1] = '\0';
     break;
   }
    }
  *__nextp = __s;
  return __result;
}
extern char *__strsep_g (char **__stringp, const char *__delim);
extern __inline __attribute__ ((__gnu_inline__)) char *__strsep_1c (char **__s, char __reject);
extern __inline __attribute__ ((__gnu_inline__)) char *
__strsep_1c (char **__s, char __reject)
{
  char *__retval = *__s;
  if (__retval != ((void *)0) && (*__s = (__extension__ (__builtin_constant_p (__reject) && !__builtin_constant_p (__retval) && (__reject) == '\0' ? (char *) __rawmemchr (__retval, __reject) : __builtin_strchr (__retval, __reject)))) != ((void *)0))
    *(*__s)++ = '\0';
  return __retval;
}
extern __inline __attribute__ ((__gnu_inline__)) char *__strsep_2c (char **__s, char __reject1, char __reject2);
extern __inline __attribute__ ((__gnu_inline__)) char *
__strsep_2c (char **__s, char __reject1, char __reject2)
{
  char *__retval = *__s;
  if (__retval != ((void *)0))
    {
      char *__cp = __retval;
      while (1)
 {
   if (*__cp == '\0')
     {
       __cp = ((void *)0);
   break;
     }
   if (*__cp == __reject1 || *__cp == __reject2)
     {
       *__cp++ = '\0';
       break;
     }
   ++__cp;
 }
      *__s = __cp;
    }
  return __retval;
}
extern __inline __attribute__ ((__gnu_inline__)) char *__strsep_3c (char **__s, char __reject1, char __reject2,
       char __reject3);
extern __inline __attribute__ ((__gnu_inline__)) char *
__strsep_3c (char **__s, char __reject1, char __reject2, char __reject3)
{
  char *__retval = *__s;
  if (__retval != ((void *)0))
    {
      char *__cp = __retval;
      while (1)
 {
   if (*__cp == '\0')
     {
       __cp = ((void *)0);
   break;
     }
   if (*__cp == __reject1 || *__cp == __reject2 || *__cp == __reject3)
     {
       *__cp++ = '\0';
       break;
     }
   ++__cp;
 }
      *__s = __cp;
    }
  return __retval;
}
extern char *__strdup (const char *__string) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__));
extern char *__strndup (const char *__string, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__));
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void *
__attribute__ ((__nothrow__ , __leaf__)) memcpy (void *__restrict __dest, const void *__restrict __src, size_t __len)
{
  return __builtin___memcpy_chk (__dest, __src, __len, __builtin_object_size (__dest, 0));
}
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void *
__attribute__ ((__nothrow__ , __leaf__)) memmove (void *__dest, const void *__src, size_t __len)
{
  return __builtin___memmove_chk (__dest, __src, __len, __builtin_object_size (__dest, 0));
}
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void *
__attribute__ ((__nothrow__ , __leaf__)) mempcpy (void *__restrict __dest, const void *__restrict __src, size_t __len)
{
  return __builtin___mempcpy_chk (__dest, __src, __len, __builtin_object_size (__dest, 0));
}
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void *
__attribute__ ((__nothrow__ , __leaf__)) memset (void *__dest, int __ch, size_t __len)
{
  return __builtin___memset_chk (__dest, __ch, __len, __builtin_object_size (__dest, 0));
}
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void
__attribute__ ((__nothrow__ , __leaf__)) bcopy (const void *__src, void *__dest, size_t __len)
{
  (void) __builtin___memmove_chk (__dest, __src, __len, __builtin_object_size (__dest, 0));
}
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void
__attribute__ ((__nothrow__ , __leaf__)) bzero (void *__dest, size_t __len)
{
  (void) __builtin___memset_chk (__dest, '\0', __len, __builtin_object_size (__dest, 0));
}
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__nothrow__ , __leaf__)) strcpy (char *__restrict __dest, const char *__restrict __src)
{
  return __builtin___strcpy_chk (__dest, __src, __builtin_object_size (__dest, 2 > 1));
}
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__nothrow__ , __leaf__)) stpcpy (char *__restrict __dest, const char *__restrict __src)
{
  return __builtin___stpcpy_chk (__dest, __src, __builtin_object_size (__dest, 2 > 1));
}
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__nothrow__ , __leaf__)) strncpy (char *__restrict __dest, const char *__restrict __src, size_t __len)
{
  return __builtin___strncpy_chk (__dest, __src, __len, __builtin_object_size (__dest, 2 > 1));
}
extern char *__stpncpy_chk (char *__dest, const char *__src, size_t __n,
       size_t __destlen) __attribute__ ((__nothrow__ , __leaf__));
extern char *__stpncpy_alias (char *__dest, const char *__src, size_t __n) __asm__ ("" "stpncpy") __attribute__ ((__nothrow__ , __leaf__))
                                 ;
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__nothrow__ , __leaf__)) stpncpy (char *__dest, const char *__src, size_t __n)
{
  if (__builtin_object_size (__dest, 2 > 1) != (size_t) -1
      && (!__builtin_constant_p (__n) || __n > __builtin_object_size (__dest, 2 > 1)))
    return __stpncpy_chk (__dest, __src, __n, __builtin_object_size (__dest, 2 > 1));
  return __stpncpy_alias (__dest, __src, __n);
}
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__nothrow__ , __leaf__)) strcat (char *__restrict __dest, const char *__restrict __src)
{
  return __builtin___strcat_chk (__dest, __src, __builtin_object_size (__dest, 2 > 1));
}
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__nothrow__ , __leaf__)) strncat (char *__restrict __dest, const char *__restrict __src, size_t __len)
{
  return __builtin___strncat_chk (__dest, __src, __len, __builtin_object_size (__dest, 2 > 1));
}
extern void explicit_bzero (void *__dest, size_t __n) __attribute__ ((__nonnull__ (1)))
                                                                   ;
extern int _gl_cxxalias_dummy;
extern int _gl_cxxalias_dummy;
extern int _gl_cxxalias_dummy
                                                                  ;
extern int _gl_cxxalias_dummy;
extern int _gl_cxxalias_dummy;
extern int _gl_cxxalias_dummy
                                                                     ;
extern int _gl_cxxalias_dummy;
typedef unsigned char uint8_t;
typedef unsigned short int uint16_t;
typedef unsigned int uint32_t;
typedef unsigned long int uint64_t;
typedef signed char int_least8_t;
typedef short int int_least16_t;
typedef int int_least32_t;
typedef long int int_least64_t;
typedef unsigned char uint_least8_t;
typedef unsigned short int uint_least16_t;
typedef unsigned int uint_least32_t;
typedef unsigned long int uint_least64_t;
typedef signed char int_fast8_t;
typedef long int int_fast16_t;
typedef long int int_fast32_t;
typedef long int int_fast64_t;
typedef unsigned char uint_fast8_t;
typedef unsigned long int uint_fast16_t;
typedef unsigned long int uint_fast32_t;
typedef unsigned long int uint_fast64_t;
typedef long int intptr_t;
typedef unsigned long int uintptr_t;
typedef long int intmax_t;
typedef unsigned long int uintmax_t;
typedef int __gwchar_t;
typedef struct
  {
    long int quot;
    long int rem;
  } imaxdiv_t;
extern intmax_t imaxabs (intmax_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
extern imaxdiv_t imaxdiv (intmax_t __numer, intmax_t __denom)
      __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
extern intmax_t strtoimax (const char *__restrict __nptr,
      char **__restrict __endptr, int __base) __attribute__ ((__nothrow__ , __leaf__));
extern uintmax_t strtoumax (const char *__restrict __nptr,
       char ** __restrict __endptr, int __base) __attribute__ ((__nothrow__ , __leaf__));
extern intmax_t wcstoimax (const __gwchar_t *__restrict __nptr,
      __gwchar_t **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__));
extern uintmax_t wcstoumax (const __gwchar_t *__restrict __nptr,
       __gwchar_t ** __restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__));
extern long int __strtol_internal (const char *__restrict __nptr,
       char **__restrict __endptr,
       int __base, int __group)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
extern __inline __attribute__ ((__gnu_inline__)) intmax_t
__attribute__ ((__nothrow__ , __leaf__)) strtoimax (const char *__restrict nptr, char **__restrict endptr, int base)
{
  return __strtol_internal (nptr, endptr, base, 0);
}
extern unsigned long int __strtoul_internal (const char *__restrict __nptr,
          char ** __restrict __endptr,
          int __base, int __group)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
extern __inline __attribute__ ((__gnu_inline__)) uintmax_t
__attribute__ ((__nothrow__ , __leaf__)) strtoumax (const char *__restrict nptr, char **__restrict endptr, int base)
{
  return __strtoul_internal (nptr, endptr, base, 0);
}
extern long int __wcstol_internal (const __gwchar_t * __restrict __nptr,
       __gwchar_t **__restrict __endptr,
       int __base, int __group)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
extern __inline __attribute__ ((__gnu_inline__)) intmax_t
__attribute__ ((__nothrow__ , __leaf__)) wcstoimax (const __gwchar_t *__restrict nptr, __gwchar_t **__restrict endptr, int base)
{
  return __wcstol_internal (nptr, endptr, base, 0);
}
extern unsigned long int __wcstoul_internal (const __gwchar_t *
          __restrict __nptr,
          __gwchar_t **
          __restrict __endptr,
          int __base, int __group)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
extern __inline __attribute__ ((__gnu_inline__)) uintmax_t
__attribute__ ((__nothrow__ , __leaf__)) wcstoumax (const __gwchar_t *__restrict nptr, __gwchar_t **__restrict endptr, int base)
{
  return __wcstoul_internal (nptr, endptr, base, 0);
}
extern int const GCTYPEBITS __attribute__((externally_visible))
;
typedef long int EMACS_INT;
typedef unsigned long EMACS_UINT;
enum { EMACS_INT_WIDTH = 
                        ((((-0x7fffffffffffffffL - 1L)) < 0) + ((((((!!(((((((0x7fffffffffffffffL) >> 31 >> 31 >> 2) >> 31 >> 1) >> 16) >> 8) >> 4) & 8) + !!(((((((0x7fffffffffffffffL) >> 31 >> 31 >> 2) >> 31 >> 1) >> 16) >> 8) >> 4) & 4) + !!(((((((0x7fffffffffffffffL) >> 31 >> 31 >> 2) >> 31 >> 1) >> 16) >> 8) >> 4) & 2) + !!(((((((0x7fffffffffffffffL) >> 31 >> 31 >> 2) >> 31 >> 1) >> 16) >> 8) >> 4) & 1)) + (!!((((((0x7fffffffffffffffL) >> 31 >> 31 >> 2) >> 31 >> 1) >> 16) >> 8) & 8) + !!((((((0x7fffffffffffffffL) >> 31 >> 31 >> 2) >> 31 >> 1) >> 16) >> 8) & 4) + !!((((((0x7fffffffffffffffL) >> 31 >> 31 >> 2) >> 31 >> 1) >> 16) >> 8) & 2) + !!((((((0x7fffffffffffffffL) >> 31 >> 31 >> 2) >> 31 >> 1) >> 16) >> 8) & 1))) + ((!!((((((0x7fffffffffffffffL) >> 31 >> 31 >> 2) >> 31 >> 1) >> 16) >> 4) & 8) + !!((((((0x7fffffffffffffffL) >> 31 >> 31 >> 2) >> 31 >> 1) >> 16) >> 4) & 4) + !!((((((0x7fffffffffffffffL) >> 31 >> 31 >> 2) >> 31 >> 1) >> 16) >> 4) & 2) + !!((((((0x7fffffffffffffffL) >> 31 >> 31 >> 2) >> 31 >> 1) >> 16) >> 4) & 1)) + (!!(((((0x7fffffffffffffffL) >> 31 >> 31 >> 2) >> 31 >> 1) >> 16) & 8) + !!(((((0x7fffffffffffffffL) >> 31 >> 31 >> 2) >> 31 >> 1) >> 16) & 4) + !!(((((0x7fffffffffffffffL) >> 31 >> 31 >> 2) >> 31 >> 1) >> 16) & 2) + !!(((((0x7fffffffffffffffL) >> 31 >> 31 >> 2) >> 31 >> 1) >> 16) & 1)))) + (((!!((((((0x7fffffffffffffffL) >> 31 >> 31 >> 2) >> 31 >> 1) >> 8) >> 4) & 8) + !!((((((0x7fffffffffffffffL) >> 31 >> 31 >> 2) >> 31 >> 1) >> 8) >> 4) & 4) + !!((((((0x7fffffffffffffffL) >> 31 >> 31 >> 2) >> 31 >> 1) >> 8) >> 4) & 2) + !!((((((0x7fffffffffffffffL) >> 31 >> 31 >> 2) >> 31 >> 1) >> 8) >> 4) & 1)) + (!!(((((0x7fffffffffffffffL) >> 31 >> 31 >> 2) >> 31 >> 1) >> 8) & 8) + !!(((((0x7fffffffffffffffL) >> 31 >> 31 >> 2) >> 31 >> 1) >> 8) & 4) + !!(((((0x7fffffffffffffffL) >> 31 >> 31 >> 2) >> 31 >> 1) >> 8) & 2) + !!(((((0x7fffffffffffffffL) >> 31 >> 31 >> 2) >> 31 >> 1) >> 8) & 1))) + ((!!(((((0x7fffffffffffffffL) >> 31 >> 31 >> 2) >> 31 >> 1) >> 4) & 8) + !!(((((0x7fffffffffffffffL) >> 31 >> 31 >> 2) >> 31 >> 1) >> 4) & 4) + !!(((((0x7fffffffffffffffL) >> 31 >> 31 >> 2) >> 31 >> 1) >> 4) & 2) + !!(((((0x7fffffffffffffffL) >> 31 >> 31 >> 2) >> 31 >> 1) >> 4) & 1)) + (!!((((0x7fffffffffffffffL) >> 31 >> 31 >> 2) >> 31 >> 1) & 8) + !!((((0x7fffffffffffffffL) >> 31 >> 31 >> 2) >> 31 >> 1) & 4) + !!((((0x7fffffffffffffffL) >> 31 >> 31 >> 2) >> 31 >> 1) & 2) + !!((((0x7fffffffffffffffL) >> 31 >> 31 >> 2) >> 31 >> 1) & 1))))) + ((((!!((((((0x7fffffffffffffffL) >> 31 >> 31 >> 2) >> 16) >> 8) >> 4) & 8) + !!((((((0x7fffffffffffffffL) >> 31 >> 31 >> 2) >> 16) >> 8) >> 4) & 4) + !!((((((0x7fffffffffffffffL) >> 31 >> 31 >> 2) >> 16) >> 8) >> 4) & 2) + !!((((((0x7fffffffffffffffL) >> 31 >> 31 >> 2) >> 16) >> 8) >> 4) & 1)) + (!!(((((0x7fffffffffffffffL) >> 31 >> 31 >> 2) >> 16) >> 8) & 8) + !!(((((0x7fffffffffffffffL) >> 31 >> 31 >> 2) >> 16) >> 8) & 4) + !!(((((0x7fffffffffffffffL) >> 31 >> 31 >> 2) >> 16) >> 8) & 2) + !!(((((0x7fffffffffffffffL) >> 31 >> 31 >> 2) >> 16) >> 8) & 1))) + ((!!(((((0x7fffffffffffffffL) >> 31 >> 31 >> 2) >> 16) >> 4) & 8) + !!(((((0x7fffffffffffffffL) >> 31 >> 31 >> 2) >> 16) >> 4) & 4) + !!(((((0x7fffffffffffffffL) >> 31 >> 31 >> 2) >> 16) >> 4) & 2) + !!(((((0x7fffffffffffffffL) >> 31 >> 31 >> 2) >> 16) >> 4) & 1)) + (!!((((0x7fffffffffffffffL) >> 31 >> 31 >> 2) >> 16) & 8) + !!((((0x7fffffffffffffffL) >> 31 >> 31 >> 2) >> 16) & 4) + !!((((0x7fffffffffffffffL) >> 31 >> 31 >> 2) >> 16) & 2) + !!((((0x7fffffffffffffffL) >> 31 >> 31 >> 2) >> 16) & 1)))) + (((!!(((((0x7fffffffffffffffL) >> 31 >> 31 >> 2) >> 8) >> 4) & 8) + !!(((((0x7fffffffffffffffL) >> 31 >> 31 >> 2) >> 8) >> 4) & 4) + !!(((((0x7fffffffffffffffL) >> 31 >> 31 >> 2) >> 8) >> 4) & 2) + !!(((((0x7fffffffffffffffL) >> 31 >> 31 >> 2) >> 8) >> 4) & 1)) + (!!((((0x7fffffffffffffffL) >> 31 >> 31 >> 2) >> 8) & 8) + !!((((0x7fffffffffffffffL) >> 31 >> 31 >> 2) >> 8) & 4) + !!((((0x7fffffffffffffffL) >> 31 >> 31 >> 2) >> 8) & 2) + !!((((0x7fffffffffffffffL) >> 31 >> 31 >> 2) >> 8) & 1))) + ((!!((((0x7fffffffffffffffL) >> 31 >> 31 >> 2) >> 4) & 8) + !!((((0x7fffffffffffffffL) >> 31 >> 31 >> 2) >> 4) & 4) + !!((((0x7fffffffffffffffL) >> 31 >> 31 >> 2) >> 4) & 2) + !!((((0x7fffffffffffffffL) >> 31 >> 31 >> 2) >> 4) & 1)) + (!!(((0x7fffffffffffffffL) >> 31 >> 31 >> 2) & 8) + !!(((0x7fffffffffffffffL) >> 31 >> 31 >> 2) & 4) + !!(((0x7fffffffffffffffL) >> 31 >> 31 >> 2) & 2) + !!(((0x7fffffffffffffffL) >> 31 >> 31 >> 2) & 1)))))) + (((((!!((((((0x7fffffffffffffffL) >> 31 >> 1) >> 16) >> 8) >> 4) & 8) + !!((((((0x7fffffffffffffffL) >> 31 >> 1) >> 16) >> 8) >> 4) & 4) + !!((((((0x7fffffffffffffffL) >> 31 >> 1) >> 16) >> 8) >> 4) & 2) + !!((((((0x7fffffffffffffffL) >> 31 >> 1) >> 16) >> 8) >> 4) & 1)) + (!!(((((0x7fffffffffffffffL) >> 31 >> 1) >> 16) >> 8) & 8) + !!(((((0x7fffffffffffffffL) >> 31 >> 1) >> 16) >> 8) & 4) + !!(((((0x7fffffffffffffffL) >> 31 >> 1) >> 16) >> 8) & 2) + !!(((((0x7fffffffffffffffL) >> 31 >> 1) >> 16) >> 8) & 1))) + ((!!(((((0x7fffffffffffffffL) >> 31 >> 1) >> 16) >> 4) & 8) + !!(((((0x7fffffffffffffffL) >> 31 >> 1) >> 16) >> 4) & 4) + !!(((((0x7fffffffffffffffL) >> 31 >> 1) >> 16) >> 4) & 2) + !!(((((0x7fffffffffffffffL) >> 31 >> 1) >> 16) >> 4) & 1)) + (!!((((0x7fffffffffffffffL) >> 31 >> 1) >> 16) & 8) + !!((((0x7fffffffffffffffL) >> 31 >> 1) >> 16) & 4) + !!((((0x7fffffffffffffffL) >> 31 >> 1) >> 16) & 2) + !!((((0x7fffffffffffffffL) >> 31 >> 1) >> 16) & 1)))) + (((!!(((((0x7fffffffffffffffL) >> 31 >> 1) >> 8) >> 4) & 8) + !!(((((0x7fffffffffffffffL) >> 31 >> 1) >> 8) >> 4) & 4) + !!(((((0x7fffffffffffffffL) >> 31 >> 1) >> 8) >> 4) & 2) + !!(((((0x7fffffffffffffffL) >> 31 >> 1) >> 8) >> 4) & 1)) + (!!((((0x7fffffffffffffffL) >> 31 >> 1) >> 8) & 8) + !!((((0x7fffffffffffffffL) >> 31 >> 1) >> 8) & 4) + !!((((0x7fffffffffffffffL) >> 31 >> 1) >> 8) & 2) + !!((((0x7fffffffffffffffL) >> 31 >> 1) >> 8) & 1))) + ((!!((((0x7fffffffffffffffL) >> 31 >> 1) >> 4) & 8) + !!((((0x7fffffffffffffffL) >> 31 >> 1) >> 4) & 4) + !!((((0x7fffffffffffffffL) >> 31 >> 1) >> 4) & 2) + !!((((0x7fffffffffffffffL) >> 31 >> 1) >> 4) & 1)) + (!!(((0x7fffffffffffffffL) >> 31 >> 1) & 8) + !!(((0x7fffffffffffffffL) >> 31 >> 1) & 4) + !!(((0x7fffffffffffffffL) >> 31 >> 1) & 2) + !!(((0x7fffffffffffffffL) >> 31 >> 1) & 1))))) + ((((!!(((((0x7fffffffffffffffL) >> 16) >> 8) >> 4) & 8) + !!(((((0x7fffffffffffffffL) >> 16) >> 8) >> 4) & 4) + !!(((((0x7fffffffffffffffL) >> 16) >> 8) >> 4) & 2) + !!(((((0x7fffffffffffffffL) >> 16) >> 8) >> 4) & 1)) + (!!((((0x7fffffffffffffffL) >> 16) >> 8) & 8) + !!((((0x7fffffffffffffffL) >> 16) >> 8) & 4) + !!((((0x7fffffffffffffffL) >> 16) >> 8) & 2) + !!((((0x7fffffffffffffffL) >> 16) >> 8) & 1))) + ((!!((((0x7fffffffffffffffL) >> 16) >> 4) & 8) + !!((((0x7fffffffffffffffL) >> 16) >> 4) & 4) + !!((((0x7fffffffffffffffL) >> 16) >> 4) & 2) + !!((((0x7fffffffffffffffL) >> 16) >> 4) & 1)) + (!!(((0x7fffffffffffffffL) >> 16) & 8) + !!(((0x7fffffffffffffffL) >> 16) & 4) + !!(((0x7fffffffffffffffL) >> 16) & 2) + !!(((0x7fffffffffffffffL) >> 16) & 1)))) + (((!!((((0x7fffffffffffffffL) >> 8) >> 4) & 8) + !!((((0x7fffffffffffffffL) >> 8) >> 4) & 4) + !!((((0x7fffffffffffffffL) >> 8) >> 4) & 2) + !!((((0x7fffffffffffffffL) >> 8) >> 4) & 1)) + (!!(((0x7fffffffffffffffL) >> 8) & 8) + !!(((0x7fffffffffffffffL) >> 8) & 4) + !!(((0x7fffffffffffffffL) >> 8) & 2) + !!(((0x7fffffffffffffffL) >> 8) & 1))) + ((!!(((0x7fffffffffffffffL) >> 4) & 8) + !!(((0x7fffffffffffffffL) >> 4) & 4) + !!(((0x7fffffffffffffffL) >> 4) & 2) + !!(((0x7fffffffffffffffL) >> 4) & 1)) + (!!((0x7fffffffffffffffL) & 8) + !!((0x7fffffffffffffffL) & 4) + !!((0x7fffffffffffffffL) & 2) + !!((0x7fffffffffffffffL) & 1))))))))
                                  , EMACS_UINT_WIDTH = 
                                                       (((0) < 0) + ((((((!!((((((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 31 >> 2) >> 31 >> 1) >> 16) >> 8) >> 4) & 8) + !!((((((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 31 >> 2) >> 31 >> 1) >> 16) >> 8) >> 4) & 4) + !!((((((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 31 >> 2) >> 31 >> 1) >> 16) >> 8) >> 4) & 2) + !!((((((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 31 >> 2) >> 31 >> 1) >> 16) >> 8) >> 4) & 1)) + (!!(((((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 31 >> 2) >> 31 >> 1) >> 16) >> 8) & 8) + !!(((((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 31 >> 2) >> 31 >> 1) >> 16) >> 8) & 4) + !!(((((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 31 >> 2) >> 31 >> 1) >> 16) >> 8) & 2) + !!(((((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 31 >> 2) >> 31 >> 1) >> 16) >> 8) & 1))) + ((!!(((((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 31 >> 2) >> 31 >> 1) >> 16) >> 4) & 8) + !!(((((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 31 >> 2) >> 31 >> 1) >> 16) >> 4) & 4) + !!(((((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 31 >> 2) >> 31 >> 1) >> 16) >> 4) & 2) + !!(((((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 31 >> 2) >> 31 >> 1) >> 16) >> 4) & 1)) + (!!((((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 31 >> 2) >> 31 >> 1) >> 16) & 8) + !!((((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 31 >> 2) >> 31 >> 1) >> 16) & 4) + !!((((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 31 >> 2) >> 31 >> 1) >> 16) & 2) + !!((((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 31 >> 2) >> 31 >> 1) >> 16) & 1)))) + (((!!(((((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 31 >> 2) >> 31 >> 1) >> 8) >> 4) & 8) + !!(((((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 31 >> 2) >> 31 >> 1) >> 8) >> 4) & 4) + !!(((((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 31 >> 2) >> 31 >> 1) >> 8) >> 4) & 2) + !!(((((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 31 >> 2) >> 31 >> 1) >> 8) >> 4) & 1)) + (!!((((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 31 >> 2) >> 31 >> 1) >> 8) & 8) + !!((((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 31 >> 2) >> 31 >> 1) >> 8) & 4) + !!((((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 31 >> 2) >> 31 >> 1) >> 8) & 2) + !!((((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 31 >> 2) >> 31 >> 1) >> 8) & 1))) + ((!!((((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 31 >> 2) >> 31 >> 1) >> 4) & 8) + !!((((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 31 >> 2) >> 31 >> 1) >> 4) & 4) + !!((((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 31 >> 2) >> 31 >> 1) >> 4) & 2) + !!((((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 31 >> 2) >> 31 >> 1) >> 4) & 1)) + (!!(((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 31 >> 2) >> 31 >> 1) & 8) + !!(((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 31 >> 2) >> 31 >> 1) & 4) + !!(((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 31 >> 2) >> 31 >> 1) & 2) + !!(((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 31 >> 2) >> 31 >> 1) & 1))))) + ((((!!(((((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 31 >> 2) >> 16) >> 8) >> 4) & 8) + !!(((((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 31 >> 2) >> 16) >> 8) >> 4) & 4) + !!(((((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 31 >> 2) >> 16) >> 8) >> 4) & 2) + !!(((((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 31 >> 2) >> 16) >> 8) >> 4) & 1)) + (!!((((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 31 >> 2) >> 16) >> 8) & 8) + !!((((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 31 >> 2) >> 16) >> 8) & 4) + !!((((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 31 >> 2) >> 16) >> 8) & 2) + !!((((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 31 >> 2) >> 16) >> 8) & 1))) + ((!!((((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 31 >> 2) >> 16) >> 4) & 8) + !!((((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 31 >> 2) >> 16) >> 4) & 4) + !!((((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 31 >> 2) >> 16) >> 4) & 2) + !!((((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 31 >> 2) >> 16) >> 4) & 1)) + (!!(((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 31 >> 2) >> 16) & 8) + !!(((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 31 >> 2) >> 16) & 4) + !!(((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 31 >> 2) >> 16) & 2) + !!(((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 31 >> 2) >> 16) & 1)))) + (((!!((((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 31 >> 2) >> 8) >> 4) & 8) + !!((((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 31 >> 2) >> 8) >> 4) & 4) + !!((((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 31 >> 2) >> 8) >> 4) & 2) + !!((((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 31 >> 2) >> 8) >> 4) & 1)) + (!!(((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 31 >> 2) >> 8) & 8) + !!(((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 31 >> 2) >> 8) & 4) + !!(((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 31 >> 2) >> 8) & 2) + !!(((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 31 >> 2) >> 8) & 1))) + ((!!(((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 31 >> 2) >> 4) & 8) + !!(((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 31 >> 2) >> 4) & 4) + !!(((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 31 >> 2) >> 4) & 2) + !!(((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 31 >> 2) >> 4) & 1)) + (!!((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 31 >> 2) & 8) + !!((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 31 >> 2) & 4) + !!((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 31 >> 2) & 2) + !!((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 31 >> 2) & 1)))))) + (((((!!(((((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 1) >> 16) >> 8) >> 4) & 8) + !!(((((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 1) >> 16) >> 8) >> 4) & 4) + !!(((((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 1) >> 16) >> 8) >> 4) & 2) + !!(((((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 1) >> 16) >> 8) >> 4) & 1)) + (!!((((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 1) >> 16) >> 8) & 8) + !!((((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 1) >> 16) >> 8) & 4) + !!((((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 1) >> 16) >> 8) & 2) + !!((((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 1) >> 16) >> 8) & 1))) + ((!!((((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 1) >> 16) >> 4) & 8) + !!((((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 1) >> 16) >> 4) & 4) + !!((((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 1) >> 16) >> 4) & 2) + !!((((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 1) >> 16) >> 4) & 1)) + (!!(((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 1) >> 16) & 8) + !!(((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 1) >> 16) & 4) + !!(((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 1) >> 16) & 2) + !!(((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 1) >> 16) & 1)))) + (((!!((((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 1) >> 8) >> 4) & 8) + !!((((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 1) >> 8) >> 4) & 4) + !!((((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 1) >> 8) >> 4) & 2) + !!((((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 1) >> 8) >> 4) & 1)) + (!!(((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 1) >> 8) & 8) + !!(((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 1) >> 8) & 4) + !!(((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 1) >> 8) & 2) + !!(((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 1) >> 8) & 1))) + ((!!(((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 1) >> 4) & 8) + !!(((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 1) >> 4) & 4) + !!(((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 1) >> 4) & 2) + !!(((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 1) >> 4) & 1)) + (!!((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 1) & 8) + !!((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 1) & 4) + !!((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 1) & 2) + !!((((0x7fffffffffffffffL * 2UL + 1UL)) >> 31 >> 1) & 1))))) + ((((!!((((((0x7fffffffffffffffL * 2UL + 1UL)) >> 16) >> 8) >> 4) & 8) + !!((((((0x7fffffffffffffffL * 2UL + 1UL)) >> 16) >> 8) >> 4) & 4) + !!((((((0x7fffffffffffffffL * 2UL + 1UL)) >> 16) >> 8) >> 4) & 2) + !!((((((0x7fffffffffffffffL * 2UL + 1UL)) >> 16) >> 8) >> 4) & 1)) + (!!(((((0x7fffffffffffffffL * 2UL + 1UL)) >> 16) >> 8) & 8) + !!(((((0x7fffffffffffffffL * 2UL + 1UL)) >> 16) >> 8) & 4) + !!(((((0x7fffffffffffffffL * 2UL + 1UL)) >> 16) >> 8) & 2) + !!(((((0x7fffffffffffffffL * 2UL + 1UL)) >> 16) >> 8) & 1))) + ((!!(((((0x7fffffffffffffffL * 2UL + 1UL)) >> 16) >> 4) & 8) + !!(((((0x7fffffffffffffffL * 2UL + 1UL)) >> 16) >> 4) & 4) + !!(((((0x7fffffffffffffffL * 2UL + 1UL)) >> 16) >> 4) & 2) + !!(((((0x7fffffffffffffffL * 2UL + 1UL)) >> 16) >> 4) & 1)) + (!!((((0x7fffffffffffffffL * 2UL + 1UL)) >> 16) & 8) + !!((((0x7fffffffffffffffL * 2UL + 1UL)) >> 16) & 4) + !!((((0x7fffffffffffffffL * 2UL + 1UL)) >> 16) & 2) + !!((((0x7fffffffffffffffL * 2UL + 1UL)) >> 16) & 1)))) + (((!!(((((0x7fffffffffffffffL * 2UL + 1UL)) >> 8) >> 4) & 8) + !!(((((0x7fffffffffffffffL * 2UL + 1UL)) >> 8) >> 4) & 4) + !!(((((0x7fffffffffffffffL * 2UL + 1UL)) >> 8) >> 4) & 2) + !!(((((0x7fffffffffffffffL * 2UL + 1UL)) >> 8) >> 4) & 1)) + (!!((((0x7fffffffffffffffL * 2UL + 1UL)) >> 8) & 8) + !!((((0x7fffffffffffffffL * 2UL + 1UL)) >> 8) & 4) + !!((((0x7fffffffffffffffL * 2UL + 1UL)) >> 8) & 2) + !!((((0x7fffffffffffffffL * 2UL + 1UL)) >> 8) & 1))) + ((!!((((0x7fffffffffffffffL * 2UL + 1UL)) >> 4) & 8) + !!((((0x7fffffffffffffffL * 2UL + 1UL)) >> 4) & 4) + !!((((0x7fffffffffffffffL * 2UL + 1UL)) >> 4) & 2) + !!((((0x7fffffffffffffffL * 2UL + 1UL)) >> 4) & 1)) + (!!(((0x7fffffffffffffffL * 2UL + 1UL)) & 8) + !!(((0x7fffffffffffffffL * 2UL + 1UL)) & 4) + !!(((0x7fffffffffffffffL * 2UL + 1UL)) & 2) + !!(((0x7fffffffffffffffL * 2UL + 1UL)) & 1)))))))) 
                                                                   };
enum { BOOL_VECTOR_BITS_PER_CHAR =
        8
};
typedef size_t bits_word;
enum { BITS_PER_BITS_WORD = 
                           (((0) < 0) + ((((((!!((((((((18446744073709551615UL)) >> 31 >> 31 >> 2) >> 31 >> 1) >> 16) >> 8) >> 4) & 8) + !!((((((((18446744073709551615UL)) >> 31 >> 31 >> 2) >> 31 >> 1) >> 16) >> 8) >> 4) & 4) + !!((((((((18446744073709551615UL)) >> 31 >> 31 >> 2) >> 31 >> 1) >> 16) >> 8) >> 4) & 2) + !!((((((((18446744073709551615UL)) >> 31 >> 31 >> 2) >> 31 >> 1) >> 16) >> 8) >> 4) & 1)) + (!!(((((((18446744073709551615UL)) >> 31 >> 31 >> 2) >> 31 >> 1) >> 16) >> 8) & 8) + !!(((((((18446744073709551615UL)) >> 31 >> 31 >> 2) >> 31 >> 1) >> 16) >> 8) & 4) + !!(((((((18446744073709551615UL)) >> 31 >> 31 >> 2) >> 31 >> 1) >> 16) >> 8) & 2) + !!(((((((18446744073709551615UL)) >> 31 >> 31 >> 2) >> 31 >> 1) >> 16) >> 8) & 1))) + ((!!(((((((18446744073709551615UL)) >> 31 >> 31 >> 2) >> 31 >> 1) >> 16) >> 4) & 8) + !!(((((((18446744073709551615UL)) >> 31 >> 31 >> 2) >> 31 >> 1) >> 16) >> 4) & 4) + !!(((((((18446744073709551615UL)) >> 31 >> 31 >> 2) >> 31 >> 1) >> 16) >> 4) & 2) + !!(((((((18446744073709551615UL)) >> 31 >> 31 >> 2) >> 31 >> 1) >> 16) >> 4) & 1)) + (!!((((((18446744073709551615UL)) >> 31 >> 31 >> 2) >> 31 >> 1) >> 16) & 8) + !!((((((18446744073709551615UL)) >> 31 >> 31 >> 2) >> 31 >> 1) >> 16) & 4) + !!((((((18446744073709551615UL)) >> 31 >> 31 >> 2) >> 31 >> 1) >> 16) & 2) + !!((((((18446744073709551615UL)) >> 31 >> 31 >> 2) >> 31 >> 1) >> 16) & 1)))) + (((!!(((((((18446744073709551615UL)) >> 31 >> 31 >> 2) >> 31 >> 1) >> 8) >> 4) & 8) + !!(((((((18446744073709551615UL)) >> 31 >> 31 >> 2) >> 31 >> 1) >> 8) >> 4) & 4) + !!(((((((18446744073709551615UL)) >> 31 >> 31 >> 2) >> 31 >> 1) >> 8) >> 4) & 2) + !!(((((((18446744073709551615UL)) >> 31 >> 31 >> 2) >> 31 >> 1) >> 8) >> 4) & 1)) + (!!((((((18446744073709551615UL)) >> 31 >> 31 >> 2) >> 31 >> 1) >> 8) & 8) + !!((((((18446744073709551615UL)) >> 31 >> 31 >> 2) >> 31 >> 1) >> 8) & 4) + !!((((((18446744073709551615UL)) >> 31 >> 31 >> 2) >> 31 >> 1) >> 8) & 2) + !!((((((18446744073709551615UL)) >> 31 >> 31 >> 2) >> 31 >> 1) >> 8) & 1))) + ((!!((((((18446744073709551615UL)) >> 31 >> 31 >> 2) >> 31 >> 1) >> 4) & 8) + !!((((((18446744073709551615UL)) >> 31 >> 31 >> 2) >> 31 >> 1) >> 4) & 4) + !!((((((18446744073709551615UL)) >> 31 >> 31 >> 2) >> 31 >> 1) >> 4) & 2) + !!((((((18446744073709551615UL)) >> 31 >> 31 >> 2) >> 31 >> 1) >> 4) & 1)) + (!!(((((18446744073709551615UL)) >> 31 >> 31 >> 2) >> 31 >> 1) & 8) + !!(((((18446744073709551615UL)) >> 31 >> 31 >> 2) >> 31 >> 1) & 4) + !!(((((18446744073709551615UL)) >> 31 >> 31 >> 2) >> 31 >> 1) & 2) + !!(((((18446744073709551615UL)) >> 31 >> 31 >> 2) >> 31 >> 1) & 1))))) + ((((!!(((((((18446744073709551615UL)) >> 31 >> 31 >> 2) >> 16) >> 8) >> 4) & 8) + !!(((((((18446744073709551615UL)) >> 31 >> 31 >> 2) >> 16) >> 8) >> 4) & 4) + !!(((((((18446744073709551615UL)) >> 31 >> 31 >> 2) >> 16) >> 8) >> 4) & 2) + !!(((((((18446744073709551615UL)) >> 31 >> 31 >> 2) >> 16) >> 8) >> 4) & 1)) + (!!((((((18446744073709551615UL)) >> 31 >> 31 >> 2) >> 16) >> 8) & 8) + !!((((((18446744073709551615UL)) >> 31 >> 31 >> 2) >> 16) >> 8) & 4) + !!((((((18446744073709551615UL)) >> 31 >> 31 >> 2) >> 16) >> 8) & 2) + !!((((((18446744073709551615UL)) >> 31 >> 31 >> 2) >> 16) >> 8) & 1))) + ((!!((((((18446744073709551615UL)) >> 31 >> 31 >> 2) >> 16) >> 4) & 8) + !!((((((18446744073709551615UL)) >> 31 >> 31 >> 2) >> 16) >> 4) & 4) + !!((((((18446744073709551615UL)) >> 31 >> 31 >> 2) >> 16) >> 4) & 2) + !!((((((18446744073709551615UL)) >> 31 >> 31 >> 2) >> 16) >> 4) & 1)) + (!!(((((18446744073709551615UL)) >> 31 >> 31 >> 2) >> 16) & 8) + !!(((((18446744073709551615UL)) >> 31 >> 31 >> 2) >> 16) & 4) + !!(((((18446744073709551615UL)) >> 31 >> 31 >> 2) >> 16) & 2) + !!(((((18446744073709551615UL)) >> 31 >> 31 >> 2) >> 16) & 1)))) + (((!!((((((18446744073709551615UL)) >> 31 >> 31 >> 2) >> 8) >> 4) & 8) + !!((((((18446744073709551615UL)) >> 31 >> 31 >> 2) >> 8) >> 4) & 4) + !!((((((18446744073709551615UL)) >> 31 >> 31 >> 2) >> 8) >> 4) & 2) + !!((((((18446744073709551615UL)) >> 31 >> 31 >> 2) >> 8) >> 4) & 1)) + (!!(((((18446744073709551615UL)) >> 31 >> 31 >> 2) >> 8) & 8) + !!(((((18446744073709551615UL)) >> 31 >> 31 >> 2) >> 8) & 4) + !!(((((18446744073709551615UL)) >> 31 >> 31 >> 2) >> 8) & 2) + !!(((((18446744073709551615UL)) >> 31 >> 31 >> 2) >> 8) & 1))) + ((!!(((((18446744073709551615UL)) >> 31 >> 31 >> 2) >> 4) & 8) + !!(((((18446744073709551615UL)) >> 31 >> 31 >> 2) >> 4) & 4) + !!(((((18446744073709551615UL)) >> 31 >> 31 >> 2) >> 4) & 2) + !!(((((18446744073709551615UL)) >> 31 >> 31 >> 2) >> 4) & 1)) + (!!((((18446744073709551615UL)) >> 31 >> 31 >> 2) & 8) + !!((((18446744073709551615UL)) >> 31 >> 31 >> 2) & 4) + !!((((18446744073709551615UL)) >> 31 >> 31 >> 2) & 2) + !!((((18446744073709551615UL)) >> 31 >> 31 >> 2) & 1)))))) + (((((!!(((((((18446744073709551615UL)) >> 31 >> 1) >> 16) >> 8) >> 4) & 8) + !!(((((((18446744073709551615UL)) >> 31 >> 1) >> 16) >> 8) >> 4) & 4) + !!(((((((18446744073709551615UL)) >> 31 >> 1) >> 16) >> 8) >> 4) & 2) + !!(((((((18446744073709551615UL)) >> 31 >> 1) >> 16) >> 8) >> 4) & 1)) + (!!((((((18446744073709551615UL)) >> 31 >> 1) >> 16) >> 8) & 8) + !!((((((18446744073709551615UL)) >> 31 >> 1) >> 16) >> 8) & 4) + !!((((((18446744073709551615UL)) >> 31 >> 1) >> 16) >> 8) & 2) + !!((((((18446744073709551615UL)) >> 31 >> 1) >> 16) >> 8) & 1))) + ((!!((((((18446744073709551615UL)) >> 31 >> 1) >> 16) >> 4) & 8) + !!((((((18446744073709551615UL)) >> 31 >> 1) >> 16) >> 4) & 4) + !!((((((18446744073709551615UL)) >> 31 >> 1) >> 16) >> 4) & 2) + !!((((((18446744073709551615UL)) >> 31 >> 1) >> 16) >> 4) & 1)) + (!!(((((18446744073709551615UL)) >> 31 >> 1) >> 16) & 8) + !!(((((18446744073709551615UL)) >> 31 >> 1) >> 16) & 4) + !!(((((18446744073709551615UL)) >> 31 >> 1) >> 16) & 2) + !!(((((18446744073709551615UL)) >> 31 >> 1) >> 16) & 1)))) + (((!!((((((18446744073709551615UL)) >> 31 >> 1) >> 8) >> 4) & 8) + !!((((((18446744073709551615UL)) >> 31 >> 1) >> 8) >> 4) & 4) + !!((((((18446744073709551615UL)) >> 31 >> 1) >> 8) >> 4) & 2) + !!((((((18446744073709551615UL)) >> 31 >> 1) >> 8) >> 4) & 1)) + (!!(((((18446744073709551615UL)) >> 31 >> 1) >> 8) & 8) + !!(((((18446744073709551615UL)) >> 31 >> 1) >> 8) & 4) + !!(((((18446744073709551615UL)) >> 31 >> 1) >> 8) & 2) + !!(((((18446744073709551615UL)) >> 31 >> 1) >> 8) & 1))) + ((!!(((((18446744073709551615UL)) >> 31 >> 1) >> 4) & 8) + !!(((((18446744073709551615UL)) >> 31 >> 1) >> 4) & 4) + !!(((((18446744073709551615UL)) >> 31 >> 1) >> 4) & 2) + !!(((((18446744073709551615UL)) >> 31 >> 1) >> 4) & 1)) + (!!((((18446744073709551615UL)) >> 31 >> 1) & 8) + !!((((18446744073709551615UL)) >> 31 >> 1) & 4) + !!((((18446744073709551615UL)) >> 31 >> 1) & 2) + !!((((18446744073709551615UL)) >> 31 >> 1) & 1))))) + ((((!!((((((18446744073709551615UL)) >> 16) >> 8) >> 4) & 8) + !!((((((18446744073709551615UL)) >> 16) >> 8) >> 4) & 4) + !!((((((18446744073709551615UL)) >> 16) >> 8) >> 4) & 2) + !!((((((18446744073709551615UL)) >> 16) >> 8) >> 4) & 1)) + (!!(((((18446744073709551615UL)) >> 16) >> 8) & 8) + !!(((((18446744073709551615UL)) >> 16) >> 8) & 4) + !!(((((18446744073709551615UL)) >> 16) >> 8) & 2) + !!(((((18446744073709551615UL)) >> 16) >> 8) & 1))) + ((!!(((((18446744073709551615UL)) >> 16) >> 4) & 8) + !!(((((18446744073709551615UL)) >> 16) >> 4) & 4) + !!(((((18446744073709551615UL)) >> 16) >> 4) & 2) + !!(((((18446744073709551615UL)) >> 16) >> 4) & 1)) + (!!((((18446744073709551615UL)) >> 16) & 8) + !!((((18446744073709551615UL)) >> 16) & 4) + !!((((18446744073709551615UL)) >> 16) & 2) + !!((((18446744073709551615UL)) >> 16) & 1)))) + (((!!(((((18446744073709551615UL)) >> 8) >> 4) & 8) + !!(((((18446744073709551615UL)) >> 8) >> 4) & 4) + !!(((((18446744073709551615UL)) >> 8) >> 4) & 2) + !!(((((18446744073709551615UL)) >> 8) >> 4) & 1)) + (!!((((18446744073709551615UL)) >> 8) & 8) + !!((((18446744073709551615UL)) >> 8) & 4) + !!((((18446744073709551615UL)) >> 8) & 2) + !!((((18446744073709551615UL)) >> 8) & 1))) + ((!!((((18446744073709551615UL)) >> 4) & 8) + !!((((18446744073709551615UL)) >> 4) & 4) + !!((((18446744073709551615UL)) >> 4) & 2) + !!((((18446744073709551615UL)) >> 4) & 1)) + (!!(((18446744073709551615UL)) & 8) + !!(((18446744073709551615UL)) & 4) + !!(((18446744073709551615UL)) & 2) + !!(((18446744073709551615UL)) & 1)))))))) 
                                      };
_Static_assert (
(18446744073709551615UL) 
>> (BITS_PER_BITS_WORD - 1) == 1, "verify (" "BITS_WORD_MAX >> (BITS_PER_BITS_WORD - 1) == 1" ")");
typedef intmax_t printmax_t;
typedef uintmax_t uprintmax_t;
enum Lisp_Bits
  {
    VALBITS = EMACS_INT_WIDTH - 3,
    INTTYPEBITS = 3 - 1,
    FIXNUM_BITS = VALBITS + 1
  };
extern 
_Bool 
const USE_LSB_TAG __attribute__((externally_visible))
;
extern EMACS_INT const VALMASK __attribute__((externally_visible))
;
typedef union Lisp_X *Lisp_Word;
enum Lisp_Type
  {
    Lisp_Symbol = 0,
    Lisp_Misc = 1,
    Lisp_Int0 = 2,
    Lisp_Int1 = ((0x7fffffffffffffffL >> (3 - 1)) / 2 < 
               (9223372036854775807L)
               ) ? 6 : 3,
    Lisp_String = 4,
    Lisp_Vectorlike = 5,
    Lisp_Cons = ((0x7fffffffffffffffL >> (3 - 1)) / 2 < 
               (9223372036854775807L)
               ) ? 3 : 6,
    Lisp_Float = 7
  };
enum Lisp_Misc_Type
  {
    Lisp_Misc_Free = 0x5eab,
    Lisp_Misc_Marker,
    Lisp_Misc_Overlay,
    Lisp_Misc_Save_Value,
    Lisp_Misc_Finalizer,
    Lisp_Misc_Limit
  };
enum Lisp_Fwd_Type
  {
    Lisp_Fwd_Int,
    Lisp_Fwd_Bool,
    Lisp_Fwd_Obj,
    Lisp_Fwd_Buffer_Obj,
    Lisp_Fwd_Kboard_Obj
  };
typedef Lisp_Word Lisp_Object;
enum CHECK_LISP_OBJECT_TYPE { CHECK_LISP_OBJECT_TYPE = 
                                                      0 
                                                            };
inline void set_sub_char_table_contents (Lisp_Object, ptrdiff_t,
           Lisp_Object);
extern Lisp_Object char_table_ref (Lisp_Object, int);
extern void char_table_set (Lisp_Object, int, Lisp_Object);
extern _Noreturn void wrong_type_argument (Lisp_Object, Lisp_Object);
extern 
      _Bool 
           might_dump;
extern 
      _Bool 
           initialized;
extern double extract_float (Lisp_Object);
inline EMACS_INT
(XLI) (Lisp_Object o)
{
  return ((EMACS_INT) (o));
}
inline Lisp_Object
(XIL) (EMACS_INT i)
{
  return ((Lisp_Object) (i));
}
inline void *
(XLP) (Lisp_Object o)
{
  return ((void *) (o));
}
inline Lisp_Object
(XPL) (void *p)
{
  return ((Lisp_Object) (p));
}
inline enum Lisp_Type
(XTYPE) (Lisp_Object a)
{
  return ((enum Lisp_Type) (XLI (a) & ~(((0x7fffffffffffffffL >> (3 - 1)) / 2 < 
        (9223372036854775807L)
        ) ? - (1 << 3) : (0x7fffffffffffffffL >> (3 - 1)))));
}
inline void
(CHECK_TYPE) (int ok, Lisp_Object predicate, Lisp_Object x)
{
  ((ok) ? (void) 0 : wrong_type_argument (predicate, x));
}
inline void *
(XUNTAG) (Lisp_Object a, int type)
{
  return __builtin_assume_aligned ((char *) XLP (a) - (type), 8);
}
enum symbol_interned
{
  SYMBOL_UNINTERNED = 0,
  SYMBOL_INTERNED = 1,
  SYMBOL_INTERNED_IN_INITIAL_OBARRAY = 2
};
enum symbol_redirect
{
  SYMBOL_PLAINVAL = 4,
  SYMBOL_VARALIAS = 1,
  SYMBOL_LOCALIZED = 2,
  SYMBOL_FORWARDED = 3
};
enum symbol_trapped_write
{
  SYMBOL_UNTRAPPED_WRITE = 0,
  SYMBOL_NOWRITE = 1,
  SYMBOL_TRAPPED_WRITE = 2
};
struct Lisp_Symbol
{
  union
  {
    struct
    {
      bool_bf gcmarkbit : 1;
      enum symbol_redirect redirect : 3;
      enum symbol_trapped_write trapped_write : 2;
      unsigned interned : 2;
      bool_bf declared_special : 1;
      bool_bf pinned : 1;
      Lisp_Object name;
      union {
 Lisp_Object value;
 struct Lisp_Symbol *alias;
 struct Lisp_Buffer_Local_Value *blv;
 union Lisp_Fwd *fwd;
      } val;
      Lisp_Object function;
      Lisp_Object plist;
      struct Lisp_Symbol *next;
    } s;
    char 
        _Alignas 
                (8) gcaligned;
  } u;
};
_Static_assert (
_Alignof 
(struct Lisp_Symbol) % 8 == 0, "verify (" "alignof (struct Lisp_Symbol) % GCALIGNMENT == 0" ")");
typedef char *untagged_ptr;
typedef uintptr_t Lisp_Word_tag;
struct emacs_globals {
  Lisp_Object f_Vafter_change_functions;
  Lisp_Object f_Vafter_init_time;
  Lisp_Object f_Vafter_insert_file_functions;
  Lisp_Object f_Vafter_load_alist;
  Lisp_Object f_Valternate_fontname_alist;
  Lisp_Object f_Vauto_composition_function;
  Lisp_Object f_Vauto_composition_mode;
  Lisp_Object f_Vauto_fill_chars;
  Lisp_Object f_Vauto_resize_tool_bars;
  Lisp_Object f_Vauto_save_include_big_deletions;
  Lisp_Object f_Vauto_save_list_file_name;
  Lisp_Object f_Vauto_save_timeout;
  Lisp_Object f_Vauto_save_visited_file_name;
  Lisp_Object f_Vbefore_change_functions;
  Lisp_Object f_Vbefore_init_time;
  Lisp_Object f_Vblink_cursor_alist;
  Lisp_Object f_Vbuffer_access_fontified_property;
  Lisp_Object f_Vbuffer_access_fontify_functions;
  Lisp_Object f_Vbuffer_list_update_hook;
  Lisp_Object f_Vbuild_files;
  Lisp_Object f_Vbyte_boolean_vars;
  Lisp_Object f_Vbyte_code_meter;
  Lisp_Object f_Vbytecomp_version_regexp;
  Lisp_Object f_Vcairo_version_string;
  Lisp_Object f_Vchange_major_mode_hook;
  Lisp_Object f_Vchar_code_property_alist;
  Lisp_Object f_Vchar_property_alias_alist;
  Lisp_Object f_Vchar_script_table;
  Lisp_Object f_Vchar_width_table;
  Lisp_Object f_Vcharset_list;
  Lisp_Object f_Vcharset_map_path;
  Lisp_Object f_Vcharset_revision_table;
  Lisp_Object f_Vcode_conversion_map_vector;
  Lisp_Object f_Vcoding_category_list;
  Lisp_Object f_Vcoding_system_alist;
  Lisp_Object f_Vcoding_system_for_read;
  Lisp_Object f_Vcoding_system_for_write;
  Lisp_Object f_Vcoding_system_list;
  Lisp_Object f_Vcombine_after_change_calls;
  Lisp_Object f_Vcommand_debug_status;
  Lisp_Object f_Vcommand_error_function;
  Lisp_Object f_Vcommand_history;
  Lisp_Object f_Vcommand_line_args;
  Lisp_Object f_Vcomment_use_syntax_ppss;
  Lisp_Object f_Vcompletion_ignored_extensions;
  Lisp_Object f_Vcompletion_regexp_list;
  Lisp_Object f_Vcompose_chars_after_function;
  Lisp_Object f_Vcomposition_function_table;
  Lisp_Object f_Vconfigure_info_directory;
  Lisp_Object f_Vcurrent_iso639_language;
  Lisp_Object f_Vcurrent_load_list;
  Lisp_Object f_Vcurrent_prefix_arg;
  Lisp_Object f_Vdata_directory;
  Lisp_Object f_Vdbus_compiled_version;
  Lisp_Object f_Vdbus_debug;
  Lisp_Object f_Vdbus_message_type_error;
  Lisp_Object f_Vdbus_message_type_invalid;
  Lisp_Object f_Vdbus_message_type_method_call;
  Lisp_Object f_Vdbus_message_type_method_return;
  Lisp_Object f_Vdbus_message_type_signal;
  Lisp_Object f_Vdbus_registered_objects_table;
  Lisp_Object f_Vdbus_runtime_version;
  Lisp_Object f_Vdeactivate_mark;
  Lisp_Object f_Vdebug_ignored_errors;
  Lisp_Object f_Vdebug_on_error;
  Lisp_Object f_Vdebug_on_event;
  Lisp_Object f_Vdebug_on_message;
  Lisp_Object f_Vdebug_on_signal;
  Lisp_Object f_Vdebugger;
  Lisp_Object f_Vdefault_file_name_coding_system;
  Lisp_Object f_Vdefault_frame_alist;
  Lisp_Object f_Vdefault_frame_scroll_bars;
  Lisp_Object f_Vdefault_process_coding_system;
  Lisp_Object f_Vdefault_text_properties;
  Lisp_Object f_Vdeferred_action_function;
  Lisp_Object f_Vdeferred_action_list;
  Lisp_Object f_Vdefine_key_rebound_commands;
  Lisp_Object f_Vdelayed_warnings_list;
  Lisp_Object f_Vdelete_frame_functions;
  Lisp_Object f_Vdelete_terminal_functions;
  Lisp_Object f_Vdisable_point_adjustment;
  Lisp_Object f_Vdisplay_line_numbers;
  Lisp_Object f_Vdisplay_line_numbers_current_absolute;
  Lisp_Object f_Vdisplay_line_numbers_width;
  Lisp_Object f_Vdisplay_pixels_per_inch;
  Lisp_Object f_Vdoc_directory;
  Lisp_Object f_Vdoc_file_name;
  Lisp_Object f_Vdouble_click_time;
  Lisp_Object f_Vdynamic_library_alist;
  Lisp_Object f_Vecho_keystrokes;
  Lisp_Object f_Vemacs_copyright;
  Lisp_Object f_Vemacs_version;
  Lisp_Object f_Vemulation_mode_map_alists;
  Lisp_Object f_Venable_character_translation;
  Lisp_Object f_Venable_disabled_menus_and_buttons;
  Lisp_Object f_Veval_buffer_list;
  Lisp_Object f_Vexec_directory;
  Lisp_Object f_Vexec_path;
  Lisp_Object f_Vexec_suffixes;
  Lisp_Object f_Vexecuting_kbd_macro;
  Lisp_Object f_Vface_default_stipple;
  Lisp_Object f_Vface_font_rescale_alist;
  Lisp_Object f_Vface_ignored_fonts;
  Lisp_Object f_Vface_new_frame_defaults;
  Lisp_Object f_Vface_remapping_alist;
  Lisp_Object f_Vfeatures;
  Lisp_Object f_Vfile_coding_system_alist;
  Lisp_Object f_Vfile_name_coding_system;
  Lisp_Object f_Vfile_name_handler_alist;
  Lisp_Object f_Vfind_word_boundary_function_table;
  Lisp_Object f_Vfirst_change_hook;
  Lisp_Object f_Vfloat_output_format;
  Lisp_Object f_Vfocus_in_hook;
  Lisp_Object f_Vfocus_out_hook;
  Lisp_Object f_Vfont_ccl_encoder_alist;
  Lisp_Object f_Vfont_encoding_alist;
  Lisp_Object f_Vfont_encoding_charset_alist;
  Lisp_Object f_Vfont_log;
  Lisp_Object f_Vfont_slant_table;
  Lisp_Object f_Vfont_weight_table;
  Lisp_Object f_Vfont_width_table;
  Lisp_Object f_Vfontification_functions;
  Lisp_Object f_Vfontset_alias_alist;
  Lisp_Object f_Vframe_alpha_lower_limit;
  Lisp_Object f_Vframe_title_format;
  Lisp_Object f_Vfringe_bitmaps;
  Lisp_Object f_Vfunction_key_map;
  Lisp_Object f_Vgc_cons_percentage;
  Lisp_Object f_Vgc_elapsed;
  Lisp_Object f_Vglobal_disable_point_adjustment;
  Lisp_Object f_Vglobal_mode_string;
  Lisp_Object f_Vglyph_table;
  Lisp_Object f_Vglyphless_char_display;
  Lisp_Object f_Vgtk_version_string;
  Lisp_Object f_Vhelp_char;
  Lisp_Object f_Vhelp_event_list;
  Lisp_Object f_Vhelp_form;
  Lisp_Object f_Vhistory_add_new_input;
  Lisp_Object f_Vhistory_length;
  Lisp_Object f_Vhourglass_delay;
  Lisp_Object f_Vhscroll_step;
  Lisp_Object f_Vicon_title_format;
  Lisp_Object f_Vignore_relative_composition;
  Lisp_Object f_Vimage_cache_eviction_delay;
  Lisp_Object f_Vimage_types;
  Lisp_Object f_Vinhibit_changing_match_data;
  Lisp_Object f_Vinhibit_debugger;
  Lisp_Object f_Vinhibit_field_text_motion;
  Lisp_Object f_Vinhibit_file_name_handlers;
  Lisp_Object f_Vinhibit_file_name_operation;
  Lisp_Object f_Vinhibit_point_motion_hooks;
  Lisp_Object f_Vinhibit_quit;
  Lisp_Object f_Vinhibit_read_only;
  Lisp_Object f_Vinhibit_redisplay;
  Lisp_Object f_Vinitial_environment;
  Lisp_Object f_Vinitial_window_system;
  Lisp_Object f_Vinput_method_function;
  Lisp_Object f_Vinput_method_previous_message;
  Lisp_Object f_Vinstallation_directory;
  Lisp_Object f_Vinternal__daemon_sockname;
  Lisp_Object f_Vinternal__top_level_message;
  Lisp_Object f_Vinternal_interpreter_environment;
  Lisp_Object f_Vinterrupt_process_functions;
  Lisp_Object f_Vinvocation_directory;
  Lisp_Object f_Vinvocation_name;
  Lisp_Object f_Vkbd_macro_termination_hook;
  Lisp_Object f_Vkey_translation_map;
  Lisp_Object f_Vkill_buffer_query_functions;
  Lisp_Object f_Vkill_emacs_hook;
  Lisp_Object f_Vlast_code_conversion_error;
  Lisp_Object f_Vlast_coding_system_used;
  Lisp_Object f_Vlast_event_frame;
  Lisp_Object f_Vlatin_extra_code_table;
  Lisp_Object f_Vlexical_binding;
  Lisp_Object f_Vline_number_display_limit;
  Lisp_Object f_Vline_prefix;
  Lisp_Object f_Vload_file_name;
  Lisp_Object f_Vload_file_rep_suffixes;
  Lisp_Object f_Vload_history;
  Lisp_Object f_Vload_path;
  Lisp_Object f_Vload_read_function;
  Lisp_Object f_Vload_source_file_function;
  Lisp_Object f_Vload_suffixes;
  Lisp_Object f_Vlocale_coding_system;
  Lisp_Object f_Vlread_unescaped_character_literals;
  Lisp_Object f_Vlucid_menu_bar_dirty_flag;
  Lisp_Object f_Vmake_pointer_invisible;
  Lisp_Object f_Vmark_even_if_inactive;
  Lisp_Object f_Vmax_image_size;
  Lisp_Object f_Vmax_mini_window_height;
  Lisp_Object f_Vmaximum_scroll_margin;
  Lisp_Object f_Vmemory_full;
  Lisp_Object f_Vmemory_signal_data;
  Lisp_Object f_Vmenu_bar_final_items;
  Lisp_Object f_Vmenu_bar_mode;
  Lisp_Object f_Vmenu_bar_update_hook;
  Lisp_Object f_Vmenu_updating_frame;
  Lisp_Object f_Vmessage_log_max;
  Lisp_Object f_Vminibuf_scroll_window;
  Lisp_Object f_Vminibuffer_completing_file_name;
  Lisp_Object f_Vminibuffer_completion_confirm;
  Lisp_Object f_Vminibuffer_completion_predicate;
  Lisp_Object f_Vminibuffer_completion_table;
  Lisp_Object f_Vminibuffer_exit_hook;
  Lisp_Object f_Vminibuffer_help_form;
  Lisp_Object f_Vminibuffer_history_position;
  Lisp_Object f_Vminibuffer_history_variable;
  Lisp_Object f_Vminibuffer_local_map;
  Lisp_Object f_Vminibuffer_local_ns_map;
  Lisp_Object f_Vminibuffer_message_timeout;
  Lisp_Object f_Vminibuffer_prompt_properties;
  Lisp_Object f_Vminibuffer_setup_hook;
  Lisp_Object f_Vminor_mode_map_alist;
  Lisp_Object f_Vminor_mode_overriding_map_alist;
  Lisp_Object f_Vmodule_file_suffix;
  Lisp_Object f_Vmost_negative_fixnum;
  Lisp_Object f_Vmost_positive_fixnum;
  Lisp_Object f_Vmotif_version_string;
  Lisp_Object f_Vmouse_autoselect_window;
  Lisp_Object f_Vmouse_highlight;
  Lisp_Object f_Vmouse_leave_buffer_hook;
  Lisp_Object f_Vmouse_position_function;
  Lisp_Object f_Vmove_frame_functions;
  Lisp_Object f_Vnetwork_coding_system_alist;
  Lisp_Object f_Vnobreak_char_display;
  Lisp_Object f_Vobarray;
  Lisp_Object f_Voperating_system_release;
  Lisp_Object f_Votf_script_alist;
  Lisp_Object f_Vother_window_scroll_buffer;
  Lisp_Object f_Voverflow_newline_into_fringe;
  Lisp_Object f_Voverlay_arrow_position;
  Lisp_Object f_Voverlay_arrow_string;
  Lisp_Object f_Voverlay_arrow_variable_list;
  Lisp_Object f_Voverriding_local_map;
  Lisp_Object f_Voverriding_local_map_menu_flag;
  Lisp_Object f_Voverriding_plist_environment;
  Lisp_Object f_Vpath_separator;
  Lisp_Object f_Vpost_command_hook;
  Lisp_Object f_Vpost_gc_hook;
  Lisp_Object f_Vpost_self_insert_hook;
  Lisp_Object f_Vpre_command_hook;
  Lisp_Object f_Vpre_redisplay_function;
  Lisp_Object f_Vprefix_help_command;
  Lisp_Object f_Vpreloaded_file_list;
  Lisp_Object f_Vprevious_system_messages_locale;
  Lisp_Object f_Vprevious_system_time_locale;
  Lisp_Object f_Vprint_charset_text_property;
  Lisp_Object f_Vprint_circle;
  Lisp_Object f_Vprint_continuous_numbering;
  Lisp_Object f_Vprint_gensym;
  Lisp_Object f_Vprint_length;
  Lisp_Object f_Vprint_level;
  Lisp_Object f_Vprint_number_table;
  Lisp_Object f_Vprintable_chars;
  Lisp_Object f_Vprocess_adaptive_read_buffering;
  Lisp_Object f_Vprocess_coding_system_alist;
  Lisp_Object f_Vprocess_connection_type;
  Lisp_Object f_Vprocess_environment;
  Lisp_Object f_Vpurify_flag;
  Lisp_Object f_Vquit_flag;
  Lisp_Object f_Vread_buffer_function;
  Lisp_Object f_Vread_circle;
  Lisp_Object f_Vread_expression_history;
  Lisp_Object f_Vread_hide_char;
  Lisp_Object f_Vread_symbol_positions_list;
  Lisp_Object f_Vread_with_symbol_positions;
  Lisp_Object f_Vreal_this_command;
  Lisp_Object f_Vrecenter_redisplay;
  Lisp_Object f_Vredisplay__all_windows_cause;
  Lisp_Object f_Vredisplay__mode_lines_cause;
  Lisp_Object f_Vredisplay_end_trigger_functions;
  Lisp_Object f_Vreport_emacs_bug_address;
  Lisp_Object f_Vresize_mini_windows;
  Lisp_Object f_Vresume_tty_functions;
  Lisp_Object f_Vring_bell_function;
  Lisp_Object f_Vsaved_region_selection;
  Lisp_Object f_Vscalable_fonts_allowed;
  Lisp_Object f_Vscript_representative_chars;
  Lisp_Object f_Vscroll_preserve_screen_position;
  Lisp_Object f_Vsearch_spaces_regexp;
  Lisp_Object f_Vselect_active_regions;
  Lisp_Object f_Vselect_safe_coding_system_function;
  Lisp_Object f_Vselection_converter_alist;
  Lisp_Object f_Vselection_inhibit_update_commands;
  Lisp_Object f_Vset_auto_coding_function;
  Lisp_Object f_Vshared_game_score_directory;
  Lisp_Object f_Vshell_file_name;
  Lisp_Object f_Vshow_help_function;
  Lisp_Object f_Vshow_trailing_whitespace;
  Lisp_Object f_Vsignal_hook_function;
  Lisp_Object f_Vsource_directory;
  Lisp_Object f_Vspecial_event_map;
  Lisp_Object f_Vstandard_display_table;
  Lisp_Object f_Vstandard_input;
  Lisp_Object f_Vstandard_output;
  Lisp_Object f_Vstandard_translation_table_for_decode;
  Lisp_Object f_Vstandard_translation_table_for_encode;
  Lisp_Object f_Vsuspend_tty_functions;
  Lisp_Object f_Vsystem_configuration;
  Lisp_Object f_Vsystem_configuration_features;
  Lisp_Object f_Vsystem_configuration_options;
  Lisp_Object f_Vsystem_messages_locale;
  Lisp_Object f_Vsystem_name;
  Lisp_Object f_Vsystem_time_locale;
  Lisp_Object f_Vsystem_type;
  Lisp_Object f_Vtemp_buffer_show_function;
  Lisp_Object f_Vtemporary_file_directory;
  Lisp_Object f_Vterminal_frame;
  Lisp_Object f_Vtext_property_default_nonsticky;
  Lisp_Object f_Vtext_quoting_style;
  Lisp_Object f_Vthis_command;
  Lisp_Object f_Vthis_command_keys_shift_translated;
  Lisp_Object f_Vthis_original_command;
  Lisp_Object f_Vthrow_on_input;
  Lisp_Object f_Vtimer_idle_list;
  Lisp_Object f_Vtimer_list;
  Lisp_Object f_Vtool_bar_border;
  Lisp_Object f_Vtool_bar_button_margin;
  Lisp_Object f_Vtool_bar_mode;
  Lisp_Object f_Vtool_bar_separator_image_expression;
  Lisp_Object f_Vtool_bar_style;
  Lisp_Object f_Vtop_level;
  Lisp_Object f_Vtransient_mark_mode;
  Lisp_Object f_Vtranslation_hash_table_vector;
  Lisp_Object f_Vtranslation_table_for_input;
  Lisp_Object f_Vtranslation_table_vector;
  Lisp_Object f_Vtruncate_partial_width_windows;
  Lisp_Object f_Vtty_defined_color_alist;
  Lisp_Object f_Vtty_erase_char;
  Lisp_Object f_Vundo_outer_limit;
  Lisp_Object f_Vundo_outer_limit_function;
  Lisp_Object f_Vunicode_category_table;
  Lisp_Object f_Vunread_command_events;
  Lisp_Object f_Vunread_input_method_events;
  Lisp_Object f_Vunread_post_input_method_events;
  Lisp_Object f_Vuse_default_ascent;
  Lisp_Object f_Vuser_full_name;
  Lisp_Object f_Vuser_init_file;
  Lisp_Object f_Vuser_login_name;
  Lisp_Object f_Vuser_real_login_name;
  Lisp_Object f_Vvalues;
  Lisp_Object f_Vvertical_centering_font_regexp;
  Lisp_Object f_Vvoid_text_area_pointer;
  Lisp_Object f_Vwhere_is_preferred_modifier;
  Lisp_Object f_Vwhile_no_input_ignore_events;
  Lisp_Object f_Vwindow_combination_limit;
  Lisp_Object f_Vwindow_combination_resize;
  Lisp_Object f_Vwindow_configuration_change_hook;
  Lisp_Object f_Vwindow_persistent_parameters;
  Lisp_Object f_Vwindow_point_insertion_type;
  Lisp_Object f_Vwindow_scroll_functions;
  Lisp_Object f_Vwindow_size_change_functions;
  Lisp_Object f_Vwindow_system_version;
  Lisp_Object f_Vword_combining_categories;
  Lisp_Object f_Vword_separating_categories;
  Lisp_Object f_Vwrap_prefix;
  Lisp_Object f_Vwrite_region_annotate_functions;
  Lisp_Object f_Vwrite_region_annotations_so_far;
  Lisp_Object f_Vwrite_region_post_annotation_function;
  Lisp_Object f_Vx_alt_keysym;
  Lisp_Object f_Vx_bitmap_file_path;
  Lisp_Object f_Vx_ctrl_keysym;
  Lisp_Object f_Vx_cursor_fore_pixel;
  Lisp_Object f_Vx_hourglass_pointer_shape;
  Lisp_Object f_Vx_hyper_keysym;
  Lisp_Object f_Vx_keysym_table;
  Lisp_Object f_Vx_lost_selection_functions;
  Lisp_Object f_Vx_max_tooltip_size;
  Lisp_Object f_Vx_meta_keysym;
  Lisp_Object f_Vx_mode_pointer_shape;
  Lisp_Object f_Vx_no_window_manager;
  Lisp_Object f_Vx_nontext_pointer_shape;
  Lisp_Object f_Vx_pixel_size_width_font_regexp;
  Lisp_Object f_Vx_pointer_shape;
  Lisp_Object f_Vx_resource_class;
  Lisp_Object f_Vx_resource_name;
  Lisp_Object f_Vx_select_enable_clipboard_manager;
  Lisp_Object f_Vx_sensitive_text_pointer_shape;
  Lisp_Object f_Vx_sent_selection_functions;
  Lisp_Object f_Vx_session_id;
  Lisp_Object f_Vx_session_previous_id;
  Lisp_Object f_Vx_super_keysym;
  Lisp_Object f_Vx_toolkit_scroll_bars;
  Lisp_Object f_Vx_wait_for_event_timeout;
  Lisp_Object f_Vx_window_bottom_edge_shape;
  Lisp_Object f_Vx_window_bottom_left_corner_shape;
  Lisp_Object f_Vx_window_bottom_right_corner_shape;
  Lisp_Object f_Vx_window_horizontal_drag_shape;
  Lisp_Object f_Vx_window_left_edge_shape;
  Lisp_Object f_Vx_window_right_edge_shape;
  Lisp_Object f_Vx_window_top_edge_shape;
  Lisp_Object f_Vx_window_top_left_corner_shape;
  Lisp_Object f_Vx_window_top_right_corner_shape;
  Lisp_Object f_Vx_window_vertical_drag_shape;
  Lisp_Object f_Vxft_settings;
  Lisp_Object f_automatic_hscrolling;
  Lisp_Object f_do_mouse_tracking;
  Lisp_Object f_eol_mnemonic_dos;
  Lisp_Object f_eol_mnemonic_mac;
  Lisp_Object f_eol_mnemonic_undecided;
  Lisp_Object f_eol_mnemonic_unix;
  Lisp_Object f_focus_follows_mouse;
  Lisp_Object f_frame_inhibit_implied_resize;
  Lisp_Object f_frame_size_history;
  Lisp_Object f_iconify_child_frame;
  Lisp_Object f_last_command_event;
  Lisp_Object f_last_input_event;
  Lisp_Object f_last_nonmenu_event;
  Lisp_Object f_menu_prompt_more_char;
  Lisp_Object f_meta_prefix_char;
  EMACS_INT f_auto_save_interval;
  EMACS_INT f_baud_rate;
  EMACS_INT f_cons_cells_consed;
  EMACS_INT f_debug_end_pos;
  EMACS_INT f_double_click_fuzz;
  EMACS_INT f_emacs_scroll_step;
  EMACS_INT f_executing_kbd_macro_index;
  EMACS_INT f_extra_keyboard_modifiers;
  EMACS_INT f_floats_consed;
  EMACS_INT f_gc_cons_threshold;
  EMACS_INT f_gcs_done;
  EMACS_INT f_global_gnutls_log_level;
  EMACS_INT f_hscroll_margin;
  EMACS_INT f_imagemagick_render_type;
  EMACS_INT f_intervals_consed;
  EMACS_INT f_line_number_display_limit_width;
  EMACS_INT f_max_lisp_eval_depth;
  EMACS_INT f_max_specpdl_size;
  EMACS_INT f_misc_objects_consed;
  EMACS_INT f_next_screen_context_lines;
  EMACS_INT f_num_input_keys;
  EMACS_INT f_num_nonmacro_input_events;
  EMACS_INT f_overline_margin;
  EMACS_INT f_polling_period;
  EMACS_INT f_profiler_log_size;
  EMACS_INT f_profiler_max_stack_depth;
  EMACS_INT f_pure_bytes_used;
  EMACS_INT f_scroll_conservatively;
  EMACS_INT f_scroll_margin;
  EMACS_INT f_string_chars_consed;
  EMACS_INT f_strings_consed;
  EMACS_INT f_symbols_consed;
  EMACS_INT f_syntax_propertize__done;
  EMACS_INT f_tool_bar_button_relief;
  EMACS_INT f_tool_bar_max_label_size;
  EMACS_INT f_underline_minimum_offset;
  EMACS_INT f_undo_limit;
  EMACS_INT f_undo_strong_limit;
  EMACS_INT f_vector_cells_consed;
  EMACS_INT f_x_selection_timeout;
 _Bool 
      f_Vcomment_end_can_be_escaped;
 _Bool 
      f_Vfast_but_imprecise_scrolling;
 _Bool 
      f_Vxft_ignore_color_fonts;
 _Bool 
      f_attempt_orderly_shutdown_on_fatal_signal;
 _Bool 
      f_attempt_stack_overflow_recovery;
 _Bool 
      f_auto_raise_tool_bar_buttons_p;
 _Bool 
      f_auto_window_vscroll_p;
 _Bool 
      f_byte_metering_on;
 _Bool 
      f_cannot_suspend;
 _Bool 
      f_coding_system_require_warning;
 _Bool 
      f_completion_ignore_case;
 _Bool 
      f_create_lockfiles;
 _Bool 
      f_cross_disabled_images;
 _Bool 
      f_cursor_in_echo_area;
 _Bool 
      f_debug_on_next_call;
 _Bool 
      f_debug_on_quit;
 _Bool 
      f_debugger_may_continue;
 _Bool 
      f_debugger_stack_frame_as_list;
 _Bool 
      f_delete_by_moving_to_trash;
 _Bool 
      f_delete_exited_processes;
 _Bool 
      f_disable_ascii_optimization;
 _Bool 
      f_display_hourglass_p;
 _Bool 
      f_display_line_numbers_widen;
 _Bool 
      f_display_raw_bytes_as_hex;
 _Bool 
      f_enable_recursive_minibuffers;
 _Bool 
      f_force_load_messages;
 _Bool 
      f_force_new_style_backquotes;
 _Bool 
      f_frame_resize_pixelwise;
 _Bool 
      f_garbage_collection_messages;
 _Bool 
      f_highlight_nonselected_windows;
 _Bool 
      f_history_delete_duplicates;
 _Bool 
      f_indent_tabs_mode;
 _Bool 
      f_inherit_process_coding_system;
 _Bool 
      f_inhibit_bidi_mirroring;
 _Bool 
      f_inhibit_compacting_font_caches;
 _Bool 
      f_inhibit_eol_conversion;
 _Bool 
      f_inhibit_eval_during_redisplay;
 _Bool 
      f_inhibit_free_realized_faces;
 _Bool 
      f_inhibit_iso_escape_detection;
 _Bool 
      f_inhibit_load_charset_map;
 _Bool 
      f_inhibit_menubar_update;
 _Bool 
      f_inhibit_message;
 _Bool 
      f_inhibit_modification_hooks;
 _Bool 
      f_inhibit_null_byte_detection;
 _Bool 
      f_inhibit_try_cursor_movement;
 _Bool 
      f_inhibit_try_window_id;
 _Bool 
      f_inhibit_try_window_reusing;
 _Bool 
      f_inhibit_x_resources;
 _Bool 
      f_inverse_video;
 _Bool 
      f_load_convert_to_unibyte;
 _Bool 
      f_load_dangerous_libraries;
 _Bool 
      f_load_force_doc_strings;
 _Bool 
      f_load_in_progress;
 _Bool 
      f_load_prefer_newer;
 _Bool 
      f_make_cursor_line_fully_visible_p;
 _Bool 
      f_menu_prompting;
 _Bool 
      f_message_truncate_lines;
 _Bool 
      f_minibuffer_allow_text_properties;
 _Bool 
      f_minibuffer_auto_raise;
 _Bool 
      f_mode_line_in_non_selected_windows;
 _Bool 
      f_multibyte_syntax_as_symbol;
 _Bool 
      f_multiple_frames;
 _Bool 
      f_no_redraw_on_reenter;
 _Bool 
      f_noninteractive1;
 _Bool 
      f_open_paren_in_column_0_is_defun_start;
 _Bool 
      f_parse_sexp_ignore_comments;
 _Bool 
      f_parse_sexp_lookup_properties;
 _Bool 
      f_print_escape_control_characters;
 _Bool 
      f_print_escape_multibyte;
 _Bool 
      f_print_escape_newlines;
 _Bool 
      f_print_escape_nonascii;
 _Bool 
      f_print_quoted;
 _Bool 
      f_read_buffer_completion_ignore_case;
 _Bool 
      f_read_integer_overflow_as_float;
 _Bool 
      f_redisplay__inhibit_bidi;
 _Bool 
      f_redisplay_dont_pause;
 _Bool 
      f_scroll_bar_adjust_thumb_portion_p;
 _Bool 
      f_system_uses_terminfo;
 _Bool 
      f_text_quoting_flag;
 _Bool 
      f_tooltip_reuse_hidden_frame;
 _Bool 
      f_undo_inhibit_record_point;
 _Bool 
      f_unibyte_display_via_language_environment;
 _Bool 
      f_use_default_font_for_symbols;
 _Bool 
      f_use_dialog_box;
 _Bool 
      f_use_file_dialog;
 _Bool 
      f_use_system_font;
 _Bool 
      f_visible_bell;
 _Bool 
      f_visible_cursor;
 _Bool 
      f_window_resize_pixelwise;
 _Bool 
      f_words_include_escapes;
 _Bool 
      f_write_region_inhibit_fsync;
 _Bool 
      f_x_frame_normalize_before_maximize;
 _Bool 
      f_x_gtk_file_dialog_help_text;
 _Bool 
      f_x_gtk_show_hidden_files;
 _Bool 
      f_x_gtk_use_old_file_dialog;
 _Bool 
      f_x_gtk_use_system_tooltips;
 _Bool 
      f_x_gtk_use_window_move;
 _Bool 
      f_x_mouse_click_focus_ignore_position;
 _Bool 
      f_x_stretch_cursor_p;
 _Bool 
      f_x_underline_at_descent_line;
 _Bool 
      f_x_use_underline_position_properties;
 _Bool 
      f_xft_font_ascent_descent_override;
};
extern struct emacs_globals globals;
extern
struct Lisp_Symbol lispsym[1218];
extern Lisp_Object const Qnil __attribute__((externally_visible)) ;
extern Lisp_Object const QATOM __attribute__((externally_visible)) ;
extern Lisp_Object const QAutomatic_GC __attribute__((externally_visible)) ;
extern Lisp_Object const QCLIPBOARD __attribute__((externally_visible)) ;
extern Lisp_Object const QCLIPBOARD_MANAGER __attribute__((externally_visible)) ;
extern Lisp_Object const QCOMPOUND_TEXT __attribute__((externally_visible)) ;
extern Lisp_Object const QCadstyle __attribute__((externally_visible)) ;
extern Lisp_Object const QCadvertised_binding __attribute__((externally_visible)) ;
extern Lisp_Object const QCalign_to __attribute__((externally_visible)) ;
extern Lisp_Object const QCantialias __attribute__((externally_visible)) ;
extern Lisp_Object const QCarray __attribute__((externally_visible)) ;
extern Lisp_Object const QCascent __attribute__((externally_visible)) ;
extern Lisp_Object const QCascii_compatible_p __attribute__((externally_visible)) ;
extern Lisp_Object const QCautohint __attribute__((externally_visible)) ;
extern Lisp_Object const QCavgwidth __attribute__((externally_visible)) ;
extern Lisp_Object const QCbackground __attribute__((externally_visible)) ;
extern Lisp_Object const QCbold __attribute__((externally_visible)) ;
extern Lisp_Object const QCboolean __attribute__((externally_visible)) ;
extern Lisp_Object const QCbox __attribute__((externally_visible)) ;
extern Lisp_Object const QCbuffer __attribute__((externally_visible)) ;
extern Lisp_Object const QCbutton __attribute__((externally_visible)) ;
extern Lisp_Object const QCbyte __attribute__((externally_visible)) ;
extern Lisp_Object const QCbytesize __attribute__((externally_visible)) ;
extern Lisp_Object const QCcategory __attribute__((externally_visible)) ;
extern Lisp_Object const QCcipher_aead_capable __attribute__((externally_visible)) ;
extern Lisp_Object const QCcipher_blocksize __attribute__((externally_visible)) ;
extern Lisp_Object const QCcipher_id __attribute__((externally_visible)) ;
extern Lisp_Object const QCcipher_ivsize __attribute__((externally_visible)) ;
extern Lisp_Object const QCcipher_keysize __attribute__((externally_visible)) ;
extern Lisp_Object const QCcipher_tagsize __attribute__((externally_visible)) ;
extern Lisp_Object const QCcoding __attribute__((externally_visible)) ;
extern Lisp_Object const QCcolor __attribute__((externally_visible)) ;
extern Lisp_Object const QCcolor_adjustment __attribute__((externally_visible)) ;
extern Lisp_Object const QCcolor_symbols __attribute__((externally_visible)) ;
extern Lisp_Object const QCcombining_capability __attribute__((externally_visible)) ;
extern Lisp_Object const QCcommand __attribute__((externally_visible)) ;
extern Lisp_Object const QCcomplete_negotiation __attribute__((externally_visible)) ;
extern Lisp_Object const QCconnection_type __attribute__((externally_visible)) ;
extern Lisp_Object const QCconversion __attribute__((externally_visible)) ;
extern Lisp_Object const QCcrlfiles __attribute__((externally_visible)) ;
extern Lisp_Object const QCcrop __attribute__((externally_visible)) ;
extern Lisp_Object const QCdata __attribute__((externally_visible)) ;
extern Lisp_Object const QCdebug_on_exit __attribute__((externally_visible)) ;
extern Lisp_Object const QCdecode_translation_table __attribute__((externally_visible)) ;
extern Lisp_Object const QCdefault_char __attribute__((externally_visible)) ;
extern Lisp_Object const QCdevice __attribute__((externally_visible)) ;
extern Lisp_Object const QCdict_entry __attribute__((externally_visible)) ;
extern Lisp_Object const QCdigest_algorithm_id __attribute__((externally_visible)) ;
extern Lisp_Object const QCdigest_algorithm_length __attribute__((externally_visible)) ;
extern Lisp_Object const QCdistant_foreground __attribute__((externally_visible)) ;
extern Lisp_Object const QCdocumentation __attribute__((externally_visible)) ;
extern Lisp_Object const QCdouble __attribute__((externally_visible)) ;
extern Lisp_Object const QCdpi __attribute__((externally_visible)) ;
extern Lisp_Object const QCembolden __attribute__((externally_visible)) ;
extern Lisp_Object const QCenable __attribute__((externally_visible)) ;
extern Lisp_Object const QCencode_translation_table __attribute__((externally_visible)) ;
extern Lisp_Object const QCeval __attribute__((externally_visible)) ;
extern Lisp_Object const QCfamily __attribute__((externally_visible)) ;
extern Lisp_Object const QCfile __attribute__((externally_visible)) ;
extern Lisp_Object const QCfilter __attribute__((externally_visible)) ;
extern Lisp_Object const QCflowcontrol __attribute__((externally_visible)) ;
extern Lisp_Object const QCfont __attribute__((externally_visible)) ;
extern Lisp_Object const QCfont_entity __attribute__((externally_visible)) ;
extern Lisp_Object const QCfontset __attribute__((externally_visible)) ;
extern Lisp_Object const QCforeground __attribute__((externally_visible)) ;
extern Lisp_Object const QCfoundry __attribute__((externally_visible)) ;
extern Lisp_Object const QCheight __attribute__((externally_visible)) ;
extern Lisp_Object const QChelp __attribute__((externally_visible)) ;
extern Lisp_Object const QCheuristic_mask __attribute__((externally_visible)) ;
extern Lisp_Object const QChinting __attribute__((externally_visible)) ;
extern Lisp_Object const QChintstyle __attribute__((externally_visible)) ;
extern Lisp_Object const QChost __attribute__((externally_visible)) ;
extern Lisp_Object const QChostname __attribute__((externally_visible)) ;
extern Lisp_Object const QCignore_defface __attribute__((externally_visible)) ;
extern Lisp_Object const QCimage __attribute__((externally_visible)) ;
extern Lisp_Object const QCindex __attribute__((externally_visible)) ;
extern Lisp_Object const QCinherit __attribute__((externally_visible)) ;
extern Lisp_Object const QCint16 __attribute__((externally_visible)) ;
extern Lisp_Object const QCint32 __attribute__((externally_visible)) ;
extern Lisp_Object const QCint64 __attribute__((externally_visible)) ;
extern Lisp_Object const QCinverse_video __attribute__((externally_visible)) ;
extern Lisp_Object const QCitalic __attribute__((externally_visible)) ;
extern Lisp_Object const QCkey_sequence __attribute__((externally_visible)) ;
extern Lisp_Object const QCkeylist __attribute__((externally_visible)) ;
extern Lisp_Object const QCkeys __attribute__((externally_visible)) ;
extern Lisp_Object const QClabel __attribute__((externally_visible)) ;
extern Lisp_Object const QClang __attribute__((externally_visible)) ;
extern Lisp_Object const QClcdfilter __attribute__((externally_visible)) ;
extern Lisp_Object const QCline_width __attribute__((externally_visible)) ;
extern Lisp_Object const QCloader __attribute__((externally_visible)) ;
extern Lisp_Object const QClocal __attribute__((externally_visible)) ;
extern Lisp_Object const QClog __attribute__((externally_visible)) ;
extern Lisp_Object const QCloglevel __attribute__((externally_visible)) ;
extern Lisp_Object const QCmac_algorithm_id __attribute__((externally_visible)) ;
extern Lisp_Object const QCmac_algorithm_keysize __attribute__((externally_visible)) ;
extern Lisp_Object const QCmac_algorithm_length __attribute__((externally_visible)) ;
extern Lisp_Object const QCmac_algorithm_noncesize __attribute__((externally_visible)) ;
extern Lisp_Object const QCmap __attribute__((externally_visible)) ;
extern Lisp_Object const QCmargin __attribute__((externally_visible)) ;
extern Lisp_Object const QCmask __attribute__((externally_visible)) ;
extern Lisp_Object const QCmatrix __attribute__((externally_visible)) ;
extern Lisp_Object const QCmax_height __attribute__((externally_visible)) ;
extern Lisp_Object const QCmax_width __attribute__((externally_visible)) ;
extern Lisp_Object const QCmethod __attribute__((externally_visible)) ;
extern Lisp_Object const QCmin_prime_bits __attribute__((externally_visible)) ;
extern Lisp_Object const QCmnemonic __attribute__((externally_visible)) ;
extern Lisp_Object const QCname __attribute__((externally_visible)) ;
extern Lisp_Object const QCnoquery __attribute__((externally_visible)) ;
extern Lisp_Object const QCnowait __attribute__((externally_visible)) ;
extern Lisp_Object const QCobject_path __attribute__((externally_visible)) ;
extern Lisp_Object const QCotf __attribute__((externally_visible)) ;
extern Lisp_Object const QCoverline __attribute__((externally_visible)) ;
extern Lisp_Object const QCparity __attribute__((externally_visible)) ;
extern Lisp_Object const QCplist __attribute__((externally_visible)) ;
extern Lisp_Object const QCpointer __attribute__((externally_visible)) ;
extern Lisp_Object const QCport __attribute__((externally_visible)) ;
extern Lisp_Object const QCpost_read_conversion __attribute__((externally_visible)) ;
extern Lisp_Object const QCpre_write_conversion __attribute__((externally_visible)) ;
extern Lisp_Object const QCpriority __attribute__((externally_visible)) ;
extern Lisp_Object const QCprocess __attribute__((externally_visible)) ;
extern Lisp_Object const QCpropertize __attribute__((externally_visible)) ;
extern Lisp_Object const QCpt_height __attribute__((externally_visible)) ;
extern Lisp_Object const QCpt_width __attribute__((externally_visible)) ;
extern Lisp_Object const QCpurecopy __attribute__((externally_visible)) ;
extern Lisp_Object const QCradio __attribute__((externally_visible)) ;
extern Lisp_Object const QCregistry __attribute__((externally_visible)) ;
extern Lisp_Object const QCrehash_size __attribute__((externally_visible)) ;
extern Lisp_Object const QCrehash_threshold __attribute__((externally_visible)) ;
extern Lisp_Object const QCrelative_height __attribute__((externally_visible)) ;
extern Lisp_Object const QCrelative_width __attribute__((externally_visible)) ;
extern Lisp_Object const QCrelief __attribute__((externally_visible)) ;
extern Lisp_Object const QCremote __attribute__((externally_visible)) ;
extern Lisp_Object const QCreverse_video __attribute__((externally_visible)) ;
extern Lisp_Object const QCrgba __attribute__((externally_visible)) ;
extern Lisp_Object const QCrotation __attribute__((externally_visible)) ;
extern Lisp_Object const QCrtl __attribute__((externally_visible)) ;
extern Lisp_Object const QCscalable __attribute__((externally_visible)) ;
extern Lisp_Object const QCscale __attribute__((externally_visible)) ;
extern Lisp_Object const QCscript __attribute__((externally_visible)) ;
extern Lisp_Object const QCsentinel __attribute__((externally_visible)) ;
extern Lisp_Object const QCserial __attribute__((externally_visible)) ;
extern Lisp_Object const QCserver __attribute__((externally_visible)) ;
extern Lisp_Object const QCservice __attribute__((externally_visible)) ;
extern Lisp_Object const QCsession __attribute__((externally_visible)) ;
extern Lisp_Object const QCsignal __attribute__((externally_visible)) ;
extern Lisp_Object const QCsignature __attribute__((externally_visible)) ;
extern Lisp_Object const QCsize __attribute__((externally_visible)) ;
extern Lisp_Object const QCslant __attribute__((externally_visible)) ;
extern Lisp_Object const QCspacing __attribute__((externally_visible)) ;
extern Lisp_Object const QCspeed __attribute__((externally_visible)) ;
extern Lisp_Object const QCstderr __attribute__((externally_visible)) ;
extern Lisp_Object const QCstipple __attribute__((externally_visible)) ;
extern Lisp_Object const QCstop __attribute__((externally_visible)) ;
extern Lisp_Object const QCstopbits __attribute__((externally_visible)) ;
extern Lisp_Object const QCstrike_through __attribute__((externally_visible)) ;
extern Lisp_Object const QCstring __attribute__((externally_visible)) ;
extern Lisp_Object const QCstruct __attribute__((externally_visible)) ;
extern Lisp_Object const QCstyle __attribute__((externally_visible)) ;
extern Lisp_Object const QCsummary __attribute__((externally_visible)) ;
extern Lisp_Object const QCsystem __attribute__((externally_visible)) ;
extern Lisp_Object const QCtest __attribute__((externally_visible)) ;
extern Lisp_Object const QCtimeout __attribute__((externally_visible)) ;
extern Lisp_Object const QCtls_parameters __attribute__((externally_visible)) ;
extern Lisp_Object const QCtoggle __attribute__((externally_visible)) ;
extern Lisp_Object const QCtrustfiles __attribute__((externally_visible)) ;
extern Lisp_Object const QCtype __attribute__((externally_visible)) ;
extern Lisp_Object const QCuint16 __attribute__((externally_visible)) ;
extern Lisp_Object const QCuint32 __attribute__((externally_visible)) ;
extern Lisp_Object const QCuint64 __attribute__((externally_visible)) ;
extern Lisp_Object const QCunderline __attribute__((externally_visible)) ;
extern Lisp_Object const QCunix_fd __attribute__((externally_visible)) ;
extern Lisp_Object const QCuse_external_socket __attribute__((externally_visible)) ;
extern Lisp_Object const QCuser_spec __attribute__((externally_visible)) ;
extern Lisp_Object const QCvariant __attribute__((externally_visible)) ;
extern Lisp_Object const QCverify_error __attribute__((externally_visible)) ;
extern Lisp_Object const QCverify_flags __attribute__((externally_visible)) ;
extern Lisp_Object const QCvert_only __attribute__((externally_visible)) ;
extern Lisp_Object const QCvisible __attribute__((externally_visible)) ;
extern Lisp_Object const QCvolume __attribute__((externally_visible)) ;
extern Lisp_Object const QCweakness __attribute__((externally_visible)) ;
extern Lisp_Object const QCweight __attribute__((externally_visible)) ;
extern Lisp_Object const QCwidth __attribute__((externally_visible)) ;
extern Lisp_Object const QDELETE __attribute__((externally_visible)) ;
extern Lisp_Object const QEmacsFrameResize __attribute__((externally_visible)) ;
extern Lisp_Object const QINCR __attribute__((externally_visible)) ;
extern Lisp_Object const QINTEGER __attribute__((externally_visible)) ;
extern Lisp_Object const QMULTIPLE __attribute__((externally_visible)) ;
extern Lisp_Object const QNULL __attribute__((externally_visible)) ;
extern Lisp_Object const QPRIMARY __attribute__((externally_visible)) ;
extern Lisp_Object const QSAVE_TARGETS __attribute__((externally_visible)) ;
extern Lisp_Object const QSECONDARY __attribute__((externally_visible)) ;
extern Lisp_Object const QSTRING __attribute__((externally_visible)) ;
extern Lisp_Object const QTARGETS __attribute__((externally_visible)) ;
extern Lisp_Object const QTEXT __attribute__((externally_visible)) ;
extern Lisp_Object const QTIMESTAMP __attribute__((externally_visible)) ;
extern Lisp_Object const QUTF8_STRING __attribute__((externally_visible)) ;
extern Lisp_Object const Q_EMACS_TMP_ __attribute__((externally_visible)) ;
extern Lisp_Object const Qabove __attribute__((externally_visible)) ;
extern Lisp_Object const Qabove_handle __attribute__((externally_visible)) ;
extern Lisp_Object const Qabove_suspended __attribute__((externally_visible)) ;
extern Lisp_Object const Qaccess __attribute__((externally_visible)) ;
extern Lisp_Object const Qaccess_file __attribute__((externally_visible)) ;
extern Lisp_Object const Qactivate_input_method __attribute__((externally_visible)) ;
extern Lisp_Object const Qactivate_menubar_hook __attribute__((externally_visible)) ;
extern Lisp_Object const Qadd_name_to_file __attribute__((externally_visible)) ;
extern Lisp_Object const Qadjust_frame_size_1 __attribute__((externally_visible)) ;
extern Lisp_Object const Qadjust_frame_size_2 __attribute__((externally_visible)) ;
extern Lisp_Object const Qadjust_frame_size_3 __attribute__((externally_visible)) ;
extern Lisp_Object const Qafter_change_functions __attribute__((externally_visible)) ;
extern Lisp_Object const Qafter_handle __attribute__((externally_visible)) ;
extern Lisp_Object const Qafter_insert_file_set_coding __attribute__((externally_visible)) ;
extern Lisp_Object const Qafter_string __attribute__((externally_visible)) ;
extern Lisp_Object const Qall_events __attribute__((externally_visible)) ;
extern Lisp_Object const Qalpha __attribute__((externally_visible)) ;
extern Lisp_Object const Qalt __attribute__((externally_visible)) ;
extern Lisp_Object const Qand_optional __attribute__((externally_visible)) ;
extern Lisp_Object const Qand_rest __attribute__((externally_visible)) ;
extern Lisp_Object const Qappend __attribute__((externally_visible)) ;
extern Lisp_Object const Qapply __attribute__((externally_visible)) ;
extern Lisp_Object const Qargs __attribute__((externally_visible)) ;
extern Lisp_Object const Qargs_out_of_range __attribute__((externally_visible)) ;
extern Lisp_Object const Qarith_error __attribute__((externally_visible)) ;
extern Lisp_Object const Qarrayp __attribute__((externally_visible)) ;
extern Lisp_Object const Qarrow __attribute__((externally_visible)) ;
extern Lisp_Object const Qascii __attribute__((externally_visible)) ;
extern Lisp_Object const Qascii_0 __attribute__((externally_visible)) ;
extern Lisp_Object const Qascii_character __attribute__((externally_visible)) ;
extern Lisp_Object const Qassq_delete_all __attribute__((externally_visible)) ;
extern Lisp_Object const Qattrib __attribute__((externally_visible)) ;
extern Lisp_Object const Qauto_composed __attribute__((externally_visible)) ;
extern Lisp_Object const Qauto_fill_chars __attribute__((externally_visible)) ;
extern Lisp_Object const Qauto_hscroll_mode __attribute__((externally_visible)) ;
extern Lisp_Object const Qauto_lower __attribute__((externally_visible)) ;
extern Lisp_Object const Qauto_raise __attribute__((externally_visible)) ;
extern Lisp_Object const Qauto_save_coding __attribute__((externally_visible)) ;
extern Lisp_Object const Qautoload __attribute__((externally_visible)) ;
extern Lisp_Object const Qbackground_color __attribute__((externally_visible)) ;
extern Lisp_Object const Qbackground_mode __attribute__((externally_visible)) ;
extern Lisp_Object const Qbackquote __attribute__((externally_visible)) ;
extern Lisp_Object const Qbar __attribute__((externally_visible)) ;
extern Lisp_Object const Qbefore_change_functions __attribute__((externally_visible)) ;
extern Lisp_Object const Qbefore_handle __attribute__((externally_visible)) ;
extern Lisp_Object const Qbefore_string __attribute__((externally_visible)) ;
extern Lisp_Object const Qbeginning_of_buffer __attribute__((externally_visible)) ;
extern Lisp_Object const Qbelow __attribute__((externally_visible)) ;
extern Lisp_Object const Qbelow_handle __attribute__((externally_visible)) ;
extern Lisp_Object const Qbig __attribute__((externally_visible)) ;
extern Lisp_Object const Qbig5 __attribute__((externally_visible)) ;
extern Lisp_Object const Qbitmap_spec_p __attribute__((externally_visible)) ;
extern Lisp_Object const Qbold __attribute__((externally_visible)) ;
extern Lisp_Object const Qbool_vector __attribute__((externally_visible)) ;
extern Lisp_Object const Qbool_vector_p __attribute__((externally_visible)) ;
extern Lisp_Object const Qborder __attribute__((externally_visible)) ;
extern Lisp_Object const Qborder_color __attribute__((externally_visible)) ;
extern Lisp_Object const Qborder_width __attribute__((externally_visible)) ;
extern Lisp_Object const Qboth __attribute__((externally_visible)) ;
extern Lisp_Object const Qboth_horiz __attribute__((externally_visible)) ;
extern Lisp_Object const Qbottom __attribute__((externally_visible)) ;
extern Lisp_Object const Qbottom_divider __attribute__((externally_visible)) ;
extern Lisp_Object const Qbottom_divider_width __attribute__((externally_visible)) ;
extern Lisp_Object const Qbottom_edge __attribute__((externally_visible)) ;
extern Lisp_Object const Qbottom_left_corner __attribute__((externally_visible)) ;
extern Lisp_Object const Qbottom_margin __attribute__((externally_visible)) ;
extern Lisp_Object const Qbottom_right_corner __attribute__((externally_visible)) ;
extern Lisp_Object const Qboundary __attribute__((externally_visible)) ;
extern Lisp_Object const Qbox __attribute__((externally_visible)) ;
extern Lisp_Object const Qbuffer __attribute__((externally_visible)) ;
extern Lisp_Object const Qbuffer_access_fontify_functions __attribute__((externally_visible)) ;
extern Lisp_Object const Qbuffer_file_coding_system __attribute__((externally_visible)) ;
extern Lisp_Object const Qbuffer_list __attribute__((externally_visible)) ;
extern Lisp_Object const Qbuffer_list_update_hook __attribute__((externally_visible)) ;
extern Lisp_Object const Qbuffer_name_history __attribute__((externally_visible)) ;
extern Lisp_Object const Qbuffer_or_string_p __attribute__((externally_visible)) ;
extern Lisp_Object const Qbuffer_position __attribute__((externally_visible)) ;
extern Lisp_Object const Qbuffer_predicate __attribute__((externally_visible)) ;
extern Lisp_Object const Qbuffer_read_only __attribute__((externally_visible)) ;
extern Lisp_Object const Qbufferp __attribute__((externally_visible)) ;
extern Lisp_Object const Qbuffers __attribute__((externally_visible)) ;
extern Lisp_Object const Qburied_buffer_list __attribute__((externally_visible)) ;
extern Lisp_Object const Qbyte_code_meter __attribute__((externally_visible)) ;
extern Lisp_Object const Qc __attribute__((externally_visible)) ;
extern Lisp_Object const Qcall_process __attribute__((externally_visible)) ;
extern Lisp_Object const Qcall_process_region __attribute__((externally_visible)) ;
extern Lisp_Object const Qcancel_timer __attribute__((externally_visible)) ;
extern Lisp_Object const Qcar_less_than_car __attribute__((externally_visible)) ;
extern Lisp_Object const Qcase_fold_search __attribute__((externally_visible)) ;
extern Lisp_Object const Qcase_table __attribute__((externally_visible)) ;
extern Lisp_Object const Qcase_table_p __attribute__((externally_visible)) ;
extern Lisp_Object const Qcatch_all_memory_full __attribute__((externally_visible)) ;
extern Lisp_Object const Qcategory __attribute__((externally_visible)) ;
extern Lisp_Object const Qcategory_table __attribute__((externally_visible)) ;
extern Lisp_Object const Qcategory_table_p __attribute__((externally_visible)) ;
extern Lisp_Object const Qcategoryp __attribute__((externally_visible)) ;
extern Lisp_Object const Qcategorysetp __attribute__((externally_visible)) ;
extern Lisp_Object const Qccl __attribute__((externally_visible)) ;
extern Lisp_Object const Qccl_program_idx __attribute__((externally_visible)) ;
extern Lisp_Object const Qcclp __attribute__((externally_visible)) ;
extern Lisp_Object const Qcdr __attribute__((externally_visible)) ;
extern Lisp_Object const Qceiling __attribute__((externally_visible)) ;
extern Lisp_Object const Qcenter __attribute__((externally_visible)) ;
extern Lisp_Object const Qchange_frame_size __attribute__((externally_visible)) ;
extern Lisp_Object const Qchange_major_mode_hook __attribute__((externally_visible)) ;
extern Lisp_Object const Qchar __attribute__((externally_visible)) ;
extern Lisp_Object const Qchar_code_property_table __attribute__((externally_visible)) ;
extern Lisp_Object const Qchar_from_name __attribute__((externally_visible)) ;
extern Lisp_Object const Qchar_or_string_p __attribute__((externally_visible)) ;
extern Lisp_Object const Qchar_script_table __attribute__((externally_visible)) ;
extern Lisp_Object const Qchar_table __attribute__((externally_visible)) ;
extern Lisp_Object const Qchar_table_extra_slots __attribute__((externally_visible)) ;
extern Lisp_Object const Qchar_table_p __attribute__((externally_visible)) ;
extern Lisp_Object const Qcharacterp __attribute__((externally_visible)) ;
extern Lisp_Object const Qcharset __attribute__((externally_visible)) ;
extern Lisp_Object const Qcharsetp __attribute__((externally_visible)) ;
extern Lisp_Object const Qchoice __attribute__((externally_visible)) ;
extern Lisp_Object const Qcircle __attribute__((externally_visible)) ;
extern Lisp_Object const Qcircular_list __attribute__((externally_visible)) ;
extern Lisp_Object const Qclone_of __attribute__((externally_visible)) ;
extern Lisp_Object const Qclose __attribute__((externally_visible)) ;
extern Lisp_Object const Qclose_nowrite __attribute__((externally_visible)) ;
extern Lisp_Object const Qclose_write __attribute__((externally_visible)) ;
extern Lisp_Object const Qclosed __attribute__((externally_visible)) ;
extern Lisp_Object const Qclosure __attribute__((externally_visible)) ;
extern Lisp_Object const Qcmajflt __attribute__((externally_visible)) ;
extern Lisp_Object const Qcminflt __attribute__((externally_visible)) ;
extern Lisp_Object const Qcode_conversion_map __attribute__((externally_visible)) ;
extern Lisp_Object const Qcode_conversion_map_id __attribute__((externally_visible)) ;
extern Lisp_Object const Qcodeset __attribute__((externally_visible)) ;
extern Lisp_Object const Qcoding_system_define_form __attribute__((externally_visible)) ;
extern Lisp_Object const Qcoding_system_error __attribute__((externally_visible)) ;
extern Lisp_Object const Qcoding_system_history __attribute__((externally_visible)) ;
extern Lisp_Object const Qcoding_system_p __attribute__((externally_visible)) ;
extern Lisp_Object const Qcolumns __attribute__((externally_visible)) ;
extern Lisp_Object const Qcomm __attribute__((externally_visible)) ;
extern Lisp_Object const Qcomma __attribute__((externally_visible)) ;
extern Lisp_Object const Qcomma_at __attribute__((externally_visible)) ;
extern Lisp_Object const Qcomma_dot __attribute__((externally_visible)) ;
extern Lisp_Object const Qcommand_debug_status __attribute__((externally_visible)) ;
extern Lisp_Object const Qcommand_execute __attribute__((externally_visible)) ;
extern Lisp_Object const Qcommandp __attribute__((externally_visible)) ;
extern Lisp_Object const Qcomment_end_can_be_escaped __attribute__((externally_visible)) ;
extern Lisp_Object const Qcompiled_function __attribute__((externally_visible)) ;
extern Lisp_Object const Qcompletion_ignore_case __attribute__((externally_visible)) ;
extern Lisp_Object const Qcomposition __attribute__((externally_visible)) ;
extern Lisp_Object const Qcompound_text __attribute__((externally_visible)) ;
extern Lisp_Object const Qcondition_variable __attribute__((externally_visible)) ;
extern Lisp_Object const Qcondition_variable_p __attribute__((externally_visible)) ;
extern Lisp_Object const Qconfig_changed_event __attribute__((externally_visible)) ;
extern Lisp_Object const Qconnect __attribute__((externally_visible)) ;
extern Lisp_Object const Qcons __attribute__((externally_visible)) ;
extern Lisp_Object const Qconses __attribute__((externally_visible)) ;
extern Lisp_Object const Qconsp __attribute__((externally_visible)) ;
extern Lisp_Object const Qcontinuation __attribute__((externally_visible)) ;
extern Lisp_Object const Qcopy_directory __attribute__((externally_visible)) ;
extern Lisp_Object const Qcopy_file __attribute__((externally_visible)) ;
extern Lisp_Object const Qcount __attribute__((externally_visible)) ;
extern Lisp_Object const Qcreate __attribute__((externally_visible)) ;
extern Lisp_Object const Qcstime __attribute__((externally_visible)) ;
extern Lisp_Object const Qctime __attribute__((externally_visible)) ;
extern Lisp_Object const Qctrl __attribute__((externally_visible)) ;
extern Lisp_Object const Qcurrent_input_method __attribute__((externally_visible)) ;
extern Lisp_Object const Qcurrent_line __attribute__((externally_visible)) ;
extern Lisp_Object const Qcurrent_load_list __attribute__((externally_visible)) ;
extern Lisp_Object const Qcursor __attribute__((externally_visible)) ;
extern Lisp_Object const Qcursor_color __attribute__((externally_visible)) ;
extern Lisp_Object const Qcursor_in_echo_area __attribute__((externally_visible)) ;
extern Lisp_Object const Qcursor_type __attribute__((externally_visible)) ;
extern Lisp_Object const Qcustom_variable_history __attribute__((externally_visible)) ;
extern Lisp_Object const Qcustom_variable_p __attribute__((externally_visible)) ;
extern Lisp_Object const Qcutime __attribute__((externally_visible)) ;
extern Lisp_Object const Qcyclic_function_indirection __attribute__((externally_visible)) ;
extern Lisp_Object const Qcyclic_variable_indirection __attribute__((externally_visible)) ;
extern Lisp_Object const Qd __attribute__((externally_visible)) ;
extern Lisp_Object const Qdata __attribute__((externally_visible)) ;
extern Lisp_Object const Qdatagram __attribute__((externally_visible)) ;
extern Lisp_Object const Qdays __attribute__((externally_visible)) ;
extern Lisp_Object const Qdbus_error __attribute__((externally_visible)) ;
extern Lisp_Object const Qdbus_event __attribute__((externally_visible)) ;
extern Lisp_Object const Qdbus_message_internal __attribute__((externally_visible)) ;
extern Lisp_Object const Qdeactivate_mark __attribute__((externally_visible)) ;
extern Lisp_Object const Qdebug __attribute__((externally_visible)) ;
extern Lisp_Object const Qdebug_on_next_call __attribute__((externally_visible)) ;
extern Lisp_Object const Qdecomposed_characters __attribute__((externally_visible)) ;
extern Lisp_Object const Qdefalias_fset_function __attribute__((externally_visible)) ;
extern Lisp_Object const Qdefault __attribute__((externally_visible)) ;
extern Lisp_Object const Qdefault_directory __attribute__((externally_visible)) ;
extern Lisp_Object const Qdeferred_action_function __attribute__((externally_visible)) ;
extern Lisp_Object const Qdefun __attribute__((externally_visible)) ;
extern Lisp_Object const Qdefvaralias __attribute__((externally_visible)) ;
extern Lisp_Object const Qdelay __attribute__((externally_visible)) ;
extern Lisp_Object const Qdelayed_warnings_hook __attribute__((externally_visible)) ;
extern Lisp_Object const Qdelete __attribute__((externally_visible)) ;
extern Lisp_Object const Qdelete_before __attribute__((externally_visible)) ;
extern Lisp_Object const Qdelete_by_moving_to_trash __attribute__((externally_visible)) ;
extern Lisp_Object const Qdelete_directory __attribute__((externally_visible)) ;
extern Lisp_Object const Qdelete_file __attribute__((externally_visible)) ;
extern Lisp_Object const Qdelete_frame __attribute__((externally_visible)) ;
extern Lisp_Object const Qdelete_frame_functions __attribute__((externally_visible)) ;
extern Lisp_Object const Qdelete_self __attribute__((externally_visible)) ;
extern Lisp_Object const Qdelete_terminal_functions __attribute__((externally_visible)) ;
extern Lisp_Object const Qdelete_window __attribute__((externally_visible)) ;
extern Lisp_Object const Qdir_ok __attribute__((externally_visible)) ;
extern Lisp_Object const Qdirectory_file_name __attribute__((externally_visible)) ;
extern Lisp_Object const Qdirectory_files __attribute__((externally_visible)) ;
extern Lisp_Object const Qdirectory_files_and_attributes __attribute__((externally_visible)) ;
extern Lisp_Object const Qdisable_eval __attribute__((externally_visible)) ;
extern Lisp_Object const Qdisabled __attribute__((externally_visible)) ;
extern Lisp_Object const Qdisplay __attribute__((externally_visible)) ;
extern Lisp_Object const Qdisplay_buffer __attribute__((externally_visible)) ;
extern Lisp_Object const Qdisplay_line_numbers __attribute__((externally_visible)) ;
extern Lisp_Object const Qdisplay_line_numbers_disable __attribute__((externally_visible)) ;
extern Lisp_Object const Qdisplay_line_numbers_widen __attribute__((externally_visible)) ;
extern Lisp_Object const Qdisplay_line_numbers_width __attribute__((externally_visible)) ;
extern Lisp_Object const Qdisplay_monitor_attributes_list __attribute__((externally_visible)) ;
extern Lisp_Object const Qdisplay_table __attribute__((externally_visible)) ;
extern Lisp_Object const Qdisplay_type __attribute__((externally_visible)) ;
extern Lisp_Object const Qdo_after_load_evaluation __attribute__((externally_visible)) ;
extern Lisp_Object const Qdomain_error __attribute__((externally_visible)) ;
extern Lisp_Object const Qdont_follow __attribute__((externally_visible)) ;
extern Lisp_Object const Qdos __attribute__((externally_visible)) ;
extern Lisp_Object const Qdown __attribute__((externally_visible)) ;
extern Lisp_Object const Qdrag_internal_border __attribute__((externally_visible)) ;
extern Lisp_Object const Qdrag_n_drop __attribute__((externally_visible)) ;
extern Lisp_Object const Qdragging __attribute__((externally_visible)) ;
extern Lisp_Object const Qecho_area_clear_hook __attribute__((externally_visible)) ;
extern Lisp_Object const Qecho_keystrokes __attribute__((externally_visible)) ;
extern Lisp_Object const Qedge_detection __attribute__((externally_visible)) ;
extern Lisp_Object const Qegid __attribute__((externally_visible)) ;
extern Lisp_Object const Qeight_bit __attribute__((externally_visible)) ;
extern Lisp_Object const Qemacs __attribute__((externally_visible)) ;
extern Lisp_Object const Qemacs_mule __attribute__((externally_visible)) ;
extern Lisp_Object const Qemboss __attribute__((externally_visible)) ;
extern Lisp_Object const Qempty_box __attribute__((externally_visible)) ;
extern Lisp_Object const Qempty_line __attribute__((externally_visible)) ;
extern Lisp_Object const Qenable_recursive_minibuffers __attribute__((externally_visible)) ;
extern Lisp_Object const Qend_of_buffer __attribute__((externally_visible)) ;
extern Lisp_Object const Qend_of_file __attribute__((externally_visible)) ;
extern Lisp_Object const Qend_scroll __attribute__((externally_visible)) ;
extern Lisp_Object const Qend_session __attribute__((externally_visible)) ;
extern Lisp_Object const Qeq __attribute__((externally_visible)) ;
extern Lisp_Object const Qeql __attribute__((externally_visible)) ;
extern Lisp_Object const Qequal __attribute__((externally_visible)) ;
extern Lisp_Object const Qerror __attribute__((externally_visible)) ;
extern Lisp_Object const Qerror_conditions __attribute__((externally_visible)) ;
extern Lisp_Object const Qerror_message __attribute__((externally_visible)) ;
extern Lisp_Object const Qescape_glyph __attribute__((externally_visible)) ;
extern Lisp_Object const Qetime __attribute__((externally_visible)) ;
extern Lisp_Object const Qeuid __attribute__((externally_visible)) ;
extern Lisp_Object const Qeval __attribute__((externally_visible)) ;
extern Lisp_Object const Qeval_buffer_list __attribute__((externally_visible)) ;
extern Lisp_Object const Qevaporate __attribute__((externally_visible)) ;
extern Lisp_Object const Qeven __attribute__((externally_visible)) ;
extern Lisp_Object const Qevent_kind __attribute__((externally_visible)) ;
extern Lisp_Object const Qevent_symbol_element_mask __attribute__((externally_visible)) ;
extern Lisp_Object const Qevent_symbol_elements __attribute__((externally_visible)) ;
extern Lisp_Object const Qexcl __attribute__((externally_visible)) ;
extern Lisp_Object const Qexit __attribute__((externally_visible)) ;
extern Lisp_Object const Qexpand_abbrev __attribute__((externally_visible)) ;
extern Lisp_Object const Qexpand_file_name __attribute__((externally_visible)) ;
extern Lisp_Object const Qexplicit __attribute__((externally_visible)) ;
extern Lisp_Object const Qexplicit_name __attribute__((externally_visible)) ;
extern Lisp_Object const Qextension_data __attribute__((externally_visible)) ;
extern Lisp_Object const Qexternal_border_size __attribute__((externally_visible)) ;
extern Lisp_Object const Qexternal_debugging_output __attribute__((externally_visible)) ;
extern Lisp_Object const Qextra_bold __attribute__((externally_visible)) ;
extern Lisp_Object const Qextra_light __attribute__((externally_visible)) ;
extern Lisp_Object const Qface __attribute__((externally_visible)) ;
extern Lisp_Object const Qface_alias __attribute__((externally_visible)) ;
extern Lisp_Object const Qface_no_inherit __attribute__((externally_visible)) ;
extern Lisp_Object const Qface_set_after_frame_default __attribute__((externally_visible)) ;
extern Lisp_Object const Qfailed __attribute__((externally_visible)) ;
extern Lisp_Object const Qfboundp __attribute__((externally_visible)) ;
extern Lisp_Object const Qfeatures __attribute__((externally_visible)) ;
extern Lisp_Object const Qfield __attribute__((externally_visible)) ;
extern Lisp_Object const Qfile_accessible_directory_p __attribute__((externally_visible)) ;
extern Lisp_Object const Qfile_acl __attribute__((externally_visible)) ;
extern Lisp_Object const Qfile_already_exists __attribute__((externally_visible)) ;
extern Lisp_Object const Qfile_attributes __attribute__((externally_visible)) ;
extern Lisp_Object const Qfile_attributes_lessp __attribute__((externally_visible)) ;
extern Lisp_Object const Qfile_date_error __attribute__((externally_visible)) ;
extern Lisp_Object const Qfile_directory_p __attribute__((externally_visible)) ;
extern Lisp_Object const Qfile_error __attribute__((externally_visible)) ;
extern Lisp_Object const Qfile_executable_p __attribute__((externally_visible)) ;
extern Lisp_Object const Qfile_exists_p __attribute__((externally_visible)) ;
extern Lisp_Object const Qfile_missing __attribute__((externally_visible)) ;
extern Lisp_Object const Qfile_modes __attribute__((externally_visible)) ;
extern Lisp_Object const Qfile_name_all_completions __attribute__((externally_visible)) ;
extern Lisp_Object const Qfile_name_as_directory __attribute__((externally_visible)) ;
extern Lisp_Object const Qfile_name_case_insensitive_p __attribute__((externally_visible)) ;
extern Lisp_Object const Qfile_name_completion __attribute__((externally_visible)) ;
extern Lisp_Object const Qfile_name_directory __attribute__((externally_visible)) ;
extern Lisp_Object const Qfile_name_handler_alist __attribute__((externally_visible)) ;
extern Lisp_Object const Qfile_name_history __attribute__((externally_visible)) ;
extern Lisp_Object const Qfile_name_nondirectory __attribute__((externally_visible)) ;
extern Lisp_Object const Qfile_newer_than_file_p __attribute__((externally_visible)) ;
extern Lisp_Object const Qfile_notify __attribute__((externally_visible)) ;
extern Lisp_Object const Qfile_notify_error __attribute__((externally_visible)) ;
extern Lisp_Object const Qfile_readable_p __attribute__((externally_visible)) ;
extern Lisp_Object const Qfile_regular_p __attribute__((externally_visible)) ;
extern Lisp_Object const Qfile_selinux_context __attribute__((externally_visible)) ;
extern Lisp_Object const Qfile_symlink_p __attribute__((externally_visible)) ;
extern Lisp_Object const Qfile_system_info __attribute__((externally_visible)) ;
extern Lisp_Object const Qfile_truename __attribute__((externally_visible)) ;
extern Lisp_Object const Qfile_writable_p __attribute__((externally_visible)) ;
extern Lisp_Object const Qfinalizer __attribute__((externally_visible)) ;
extern Lisp_Object const Qfirst_change_hook __attribute__((externally_visible)) ;
extern Lisp_Object const Qfloat __attribute__((externally_visible)) ;
extern Lisp_Object const Qfloatp __attribute__((externally_visible)) ;
extern Lisp_Object const Qfloats __attribute__((externally_visible)) ;
extern Lisp_Object const Qfloor __attribute__((externally_visible)) ;
extern Lisp_Object const Qfocus_in __attribute__((externally_visible)) ;
extern Lisp_Object const Qfocus_out __attribute__((externally_visible)) ;
extern Lisp_Object const Qfont __attribute__((externally_visible)) ;
extern Lisp_Object const Qfont_backend __attribute__((externally_visible)) ;
extern Lisp_Object const Qfont_entity __attribute__((externally_visible)) ;
extern Lisp_Object const Qfont_name __attribute__((externally_visible)) ;
extern Lisp_Object const Qfont_object __attribute__((externally_visible)) ;
extern Lisp_Object const Qfont_parameter __attribute__((externally_visible)) ;
extern Lisp_Object const Qfont_render __attribute__((externally_visible)) ;
extern Lisp_Object const Qfont_spec __attribute__((externally_visible)) ;
extern Lisp_Object const Qfontification_functions __attribute__((externally_visible)) ;
extern Lisp_Object const Qfontified __attribute__((externally_visible)) ;
extern Lisp_Object const Qfontset __attribute__((externally_visible)) ;
extern Lisp_Object const Qfontset_info __attribute__((externally_visible)) ;
extern Lisp_Object const Qforeground_color __attribute__((externally_visible)) ;
extern Lisp_Object const Qforeign_selection __attribute__((externally_visible)) ;
extern Lisp_Object const Qformat __attribute__((externally_visible)) ;
extern Lisp_Object const Qformat_annotate_function __attribute__((externally_visible)) ;
extern Lisp_Object const Qformat_decode __attribute__((externally_visible)) ;
extern Lisp_Object const Qfraction __attribute__((externally_visible)) ;
extern Lisp_Object const Qframe __attribute__((externally_visible)) ;
extern Lisp_Object const Qframe_edges __attribute__((externally_visible)) ;
extern Lisp_Object const Qframe_inhibit_resize __attribute__((externally_visible)) ;
extern Lisp_Object const Qframe_live_p __attribute__((externally_visible)) ;
extern Lisp_Object const Qframe_monitor_workarea __attribute__((externally_visible)) ;
extern Lisp_Object const Qframe_set_background_mode __attribute__((externally_visible)) ;
extern Lisp_Object const Qframe_windows_min_size __attribute__((externally_visible)) ;
extern Lisp_Object const Qframep __attribute__((externally_visible)) ;
extern Lisp_Object const Qframes __attribute__((externally_visible)) ;
extern Lisp_Object const Qfree_frame_menubar_1 __attribute__((externally_visible)) ;
extern Lisp_Object const Qfree_frame_menubar_2 __attribute__((externally_visible)) ;
extern Lisp_Object const Qfree_frame_tool_bar __attribute__((externally_visible)) ;
extern Lisp_Object const Qfreetype __attribute__((externally_visible)) ;
extern Lisp_Object const Qfringe __attribute__((externally_visible)) ;
extern Lisp_Object const Qfront_sticky __attribute__((externally_visible)) ;
extern Lisp_Object const Qftx __attribute__((externally_visible)) ;
extern Lisp_Object const Qfullboth __attribute__((externally_visible)) ;
extern Lisp_Object const Qfullheight __attribute__((externally_visible)) ;
extern Lisp_Object const Qfullscreen __attribute__((externally_visible)) ;
extern Lisp_Object const Qfullwidth __attribute__((externally_visible)) ;
extern Lisp_Object const Qfuncall __attribute__((externally_visible)) ;
extern Lisp_Object const Qfuncall_interactively __attribute__((externally_visible)) ;
extern Lisp_Object const Qfunction __attribute__((externally_visible)) ;
extern Lisp_Object const Qfunction_documentation __attribute__((externally_visible)) ;
extern Lisp_Object const Qfunction_key __attribute__((externally_visible)) ;
extern Lisp_Object const Qfundamental_mode __attribute__((externally_visible)) ;
extern Lisp_Object const Qgc_cons_threshold __attribute__((externally_visible)) ;
extern Lisp_Object const Qgdk_pixbuf __attribute__((externally_visible)) ;
extern Lisp_Object const Qgeometry __attribute__((externally_visible)) ;
extern Lisp_Object const Qget_buffer_window_list __attribute__((externally_visible)) ;
extern Lisp_Object const Qget_emacs_mule_file_char __attribute__((externally_visible)) ;
extern Lisp_Object const Qget_file_buffer __attribute__((externally_visible)) ;
extern Lisp_Object const Qget_file_char __attribute__((externally_visible)) ;
extern Lisp_Object const Qget_mru_window __attribute__((externally_visible)) ;
extern Lisp_Object const Qgif __attribute__((externally_visible)) ;
extern Lisp_Object const Qglib __attribute__((externally_visible)) ;
extern Lisp_Object const Qglyphless_char __attribute__((externally_visible)) ;
extern Lisp_Object const Qglyphless_char_display __attribute__((externally_visible)) ;
extern Lisp_Object const Qgnutls_anon __attribute__((externally_visible)) ;
extern Lisp_Object const Qgnutls_code __attribute__((externally_visible)) ;
extern Lisp_Object const Qgnutls_e_again __attribute__((externally_visible)) ;
extern Lisp_Object const Qgnutls_e_interrupted __attribute__((externally_visible)) ;
extern Lisp_Object const Qgnutls_e_invalid_session __attribute__((externally_visible)) ;
extern Lisp_Object const Qgnutls_e_not_ready_for_handshake __attribute__((externally_visible)) ;
extern Lisp_Object const Qgnutls_type_cipher __attribute__((externally_visible)) ;
extern Lisp_Object const Qgnutls_type_digest_algorithm __attribute__((externally_visible)) ;
extern Lisp_Object const Qgnutls_type_mac_algorithm __attribute__((externally_visible)) ;
extern Lisp_Object const Qgnutls_x509pki __attribute__((externally_visible)) ;
extern Lisp_Object const Qgobject __attribute__((externally_visible)) ;
extern Lisp_Object const Qgrave __attribute__((externally_visible)) ;
extern Lisp_Object const Qgroup __attribute__((externally_visible)) ;
extern Lisp_Object const Qgrow_only __attribute__((externally_visible)) ;
extern Lisp_Object const Qgui_set_selection __attribute__((externally_visible)) ;
extern Lisp_Object const Qhand __attribute__((externally_visible)) ;
extern Lisp_Object const Qhandle __attribute__((externally_visible)) ;
extern Lisp_Object const Qhandle_select_window __attribute__((externally_visible)) ;
extern Lisp_Object const Qhandle_shift_selection __attribute__((externally_visible)) ;
extern Lisp_Object const Qhandle_switch_frame __attribute__((externally_visible)) ;
extern Lisp_Object const Qhash_table __attribute__((externally_visible)) ;
extern Lisp_Object const Qhash_table_p __attribute__((externally_visible)) ;
extern Lisp_Object const Qhash_table_test __attribute__((externally_visible)) ;
extern Lisp_Object const Qhbar __attribute__((externally_visible)) ;
extern Lisp_Object const Qheader_line __attribute__((externally_visible)) ;
extern Lisp_Object const Qheader_line_format __attribute__((externally_visible)) ;
extern Lisp_Object const Qheap __attribute__((externally_visible)) ;
extern Lisp_Object const Qheight __attribute__((externally_visible)) ;
extern Lisp_Object const Qheight_only __attribute__((externally_visible)) ;
extern Lisp_Object const Qhelp_echo __attribute__((externally_visible)) ;
extern Lisp_Object const Qhelp_form_show __attribute__((externally_visible)) ;
extern Lisp_Object const Qheuristic __attribute__((externally_visible)) ;
extern Lisp_Object const Qhex_code __attribute__((externally_visible)) ;
extern Lisp_Object const Qhistory_length __attribute__((externally_visible)) ;
extern Lisp_Object const Qhollow __attribute__((externally_visible)) ;
extern Lisp_Object const Qhollow_small __attribute__((externally_visible)) ;
extern Lisp_Object const Qhorizontal_handle __attribute__((externally_visible)) ;
extern Lisp_Object const Qhorizontal_scroll_bar __attribute__((externally_visible)) ;
extern Lisp_Object const Qhorizontal_scroll_bars __attribute__((externally_visible)) ;
extern Lisp_Object const Qhw __attribute__((externally_visible)) ;
extern Lisp_Object const Qhyper __attribute__((externally_visible)) ;
extern Lisp_Object const Qicon __attribute__((externally_visible)) ;
extern Lisp_Object const Qicon_left __attribute__((externally_visible)) ;
extern Lisp_Object const Qicon_name __attribute__((externally_visible)) ;
extern Lisp_Object const Qicon_top __attribute__((externally_visible)) ;
extern Lisp_Object const Qicon_type __attribute__((externally_visible)) ;
extern Lisp_Object const Qiconify_frame __attribute__((externally_visible)) ;
extern Lisp_Object const Qiconify_top_level __attribute__((externally_visible)) ;
extern Lisp_Object const Qidentity __attribute__((externally_visible)) ;
extern Lisp_Object const Qif __attribute__((externally_visible)) ;
extern Lisp_Object const Qignored __attribute__((externally_visible)) ;
extern Lisp_Object const Qimage __attribute__((externally_visible)) ;
extern Lisp_Object const Qimagemagick __attribute__((externally_visible)) ;
extern Lisp_Object const Qinhibit_changing_match_data __attribute__((externally_visible)) ;
extern Lisp_Object const Qinhibit_debugger __attribute__((externally_visible)) ;
extern Lisp_Object const Qinhibit_double_buffering __attribute__((externally_visible)) ;
extern Lisp_Object const Qinhibit_eval_during_redisplay __attribute__((externally_visible)) ;
extern Lisp_Object const Qinhibit_file_name_operation __attribute__((externally_visible)) ;
extern Lisp_Object const Qinhibit_free_realized_faces __attribute__((externally_visible)) ;
extern Lisp_Object const Qinhibit_menubar_update __attribute__((externally_visible)) ;
extern Lisp_Object const Qinhibit_modification_hooks __attribute__((externally_visible)) ;
extern Lisp_Object const Qinhibit_point_motion_hooks __attribute__((externally_visible)) ;
extern Lisp_Object const Qinhibit_quit __attribute__((externally_visible)) ;
extern Lisp_Object const Qinhibit_read_only __attribute__((externally_visible)) ;
extern Lisp_Object const Qinhibit_redisplay __attribute__((externally_visible)) ;
extern Lisp_Object const Qinner_edges __attribute__((externally_visible)) ;
extern Lisp_Object const Qinput_method_exit_on_first_char __attribute__((externally_visible)) ;
extern Lisp_Object const Qinput_method_use_echo_area __attribute__((externally_visible)) ;
extern Lisp_Object const Qinsert_behind_hooks __attribute__((externally_visible)) ;
extern Lisp_Object const Qinsert_file_contents __attribute__((externally_visible)) ;
extern Lisp_Object const Qinsert_in_front_hooks __attribute__((externally_visible)) ;
extern Lisp_Object const Qinsufficient_source __attribute__((externally_visible)) ;
extern Lisp_Object const Qintangible __attribute__((externally_visible)) ;
extern Lisp_Object const Qinteger __attribute__((externally_visible)) ;
extern Lisp_Object const Qinteger_or_marker_p __attribute__((externally_visible)) ;
extern Lisp_Object const Qintegerp __attribute__((externally_visible)) ;
extern Lisp_Object const Qinteractive __attribute__((externally_visible)) ;
extern Lisp_Object const Qinteractive_form __attribute__((externally_visible)) ;
extern Lisp_Object const Qinternal__syntax_propertize __attribute__((externally_visible)) ;
extern Lisp_Object const Qinternal_auto_fill __attribute__((externally_visible)) ;
extern Lisp_Object const Qinternal_border __attribute__((externally_visible)) ;
extern Lisp_Object const Qinternal_border_width __attribute__((externally_visible)) ;
extern Lisp_Object const Qinternal_default_interrupt_process __attribute__((externally_visible)) ;
extern Lisp_Object const Qinternal_default_process_filter __attribute__((externally_visible)) ;
extern Lisp_Object const Qinternal_default_process_sentinel __attribute__((externally_visible)) ;
extern Lisp_Object const Qinternal_echo_keystrokes_prefix __attribute__((externally_visible)) ;
extern Lisp_Object const Qinternal_interpreter_environment __attribute__((externally_visible)) ;
extern Lisp_Object const Qinterrupt_process_functions __attribute__((externally_visible)) ;
extern Lisp_Object const Qinterrupted __attribute__((externally_visible)) ;
extern Lisp_Object const Qintervals __attribute__((externally_visible)) ;
extern Lisp_Object const Qinvalid_function __attribute__((externally_visible)) ;
extern Lisp_Object const Qinvalid_read_syntax __attribute__((externally_visible)) ;
extern Lisp_Object const Qinvalid_regexp __attribute__((externally_visible)) ;
extern Lisp_Object const Qinvalid_source __attribute__((externally_visible)) ;
extern Lisp_Object const Qinvisible __attribute__((externally_visible)) ;
extern Lisp_Object const Qipv4 __attribute__((externally_visible)) ;
extern Lisp_Object const Qipv6 __attribute__((externally_visible)) ;
extern Lisp_Object const Qisdir __attribute__((externally_visible)) ;
extern Lisp_Object const Qiso10646_1 __attribute__((externally_visible)) ;
extern Lisp_Object const Qiso8859_1 __attribute__((externally_visible)) ;
extern Lisp_Object const Qiso_2022 __attribute__((externally_visible)) ;
extern Lisp_Object const Qiso_8859_1 __attribute__((externally_visible)) ;
extern Lisp_Object const Qitalic __attribute__((externally_visible)) ;
extern Lisp_Object const Qiv_auto __attribute__((externally_visible)) ;
extern Lisp_Object const Qja __attribute__((externally_visible)) ;
extern Lisp_Object const Qjpeg __attribute__((externally_visible)) ;
extern Lisp_Object const Qkbd_macro_termination_hook __attribute__((externally_visible)) ;
extern Lisp_Object const Qkeep_ratio __attribute__((externally_visible)) ;
extern Lisp_Object const Qkey __attribute__((externally_visible)) ;
extern Lisp_Object const Qkey_and_value __attribute__((externally_visible)) ;
extern Lisp_Object const Qkey_or_value __attribute__((externally_visible)) ;
extern Lisp_Object const Qkeymap __attribute__((externally_visible)) ;
extern Lisp_Object const Qkeymap_canonicalize __attribute__((externally_visible)) ;
extern Lisp_Object const Qkeymapp __attribute__((externally_visible)) ;
extern Lisp_Object const Qkill_buffer_hook __attribute__((externally_visible)) ;
extern Lisp_Object const Qkill_buffer_query_functions __attribute__((externally_visible)) ;
extern Lisp_Object const Qkill_emacs __attribute__((externally_visible)) ;
extern Lisp_Object const Qkill_emacs_hook __attribute__((externally_visible)) ;
extern Lisp_Object const Qkill_forward_chars __attribute__((externally_visible)) ;
extern Lisp_Object const Qko __attribute__((externally_visible)) ;
extern Lisp_Object const Qlambda __attribute__((externally_visible)) ;
extern Lisp_Object const Qlandscape __attribute__((externally_visible)) ;
extern Lisp_Object const Qlanguage_change __attribute__((externally_visible)) ;
extern Lisp_Object const Qlaplace __attribute__((externally_visible)) ;
extern Lisp_Object const Qlast_arrow_position __attribute__((externally_visible)) ;
extern Lisp_Object const Qlast_arrow_string __attribute__((externally_visible)) ;
extern Lisp_Object const Qlast_nonmenu_event __attribute__((externally_visible)) ;
extern Lisp_Object const Qlatin __attribute__((externally_visible)) ;
extern Lisp_Object const Qlatin_1 __attribute__((externally_visible)) ;
extern Lisp_Object const Qleft __attribute__((externally_visible)) ;
extern Lisp_Object const Qleft_edge __attribute__((externally_visible)) ;
extern Lisp_Object const Qleft_fringe __attribute__((externally_visible)) ;
extern Lisp_Object const Qleft_margin __attribute__((externally_visible)) ;
extern Lisp_Object const Qleft_only __attribute__((externally_visible)) ;
extern Lisp_Object const Qleft_to_right __attribute__((externally_visible)) ;
extern Lisp_Object const Qleftmost __attribute__((externally_visible)) ;
extern Lisp_Object const Qlet __attribute__((externally_visible)) ;
extern Lisp_Object const Qletx __attribute__((externally_visible)) ;
extern Lisp_Object const Qlexical_binding __attribute__((externally_visible)) ;
extern Lisp_Object const Qlibgif_version __attribute__((externally_visible)) ;
extern Lisp_Object const Qlibgnutls_version __attribute__((externally_visible)) ;
extern Lisp_Object const Qlibjpeg_version __attribute__((externally_visible)) ;
extern Lisp_Object const Qlibpng_version __attribute__((externally_visible)) ;
extern Lisp_Object const Qlight __attribute__((externally_visible)) ;
extern Lisp_Object const Qline __attribute__((externally_visible)) ;
extern Lisp_Object const Qline_height __attribute__((externally_visible)) ;
extern Lisp_Object const Qline_number __attribute__((externally_visible)) ;
extern Lisp_Object const Qline_number_current_line __attribute__((externally_visible)) ;
extern Lisp_Object const Qline_prefix __attribute__((externally_visible)) ;
extern Lisp_Object const Qline_spacing __attribute__((externally_visible)) ;
extern Lisp_Object const Qlist __attribute__((externally_visible)) ;
extern Lisp_Object const Qlisten __attribute__((externally_visible)) ;
extern Lisp_Object const Qlistp __attribute__((externally_visible)) ;
extern Lisp_Object const Qlittle __attribute__((externally_visible)) ;
extern Lisp_Object const Qload __attribute__((externally_visible)) ;
extern Lisp_Object const Qload_file_name __attribute__((externally_visible)) ;
extern Lisp_Object const Qload_force_doc_strings __attribute__((externally_visible)) ;
extern Lisp_Object const Qload_in_progress __attribute__((externally_visible)) ;
extern Lisp_Object const Qlocal __attribute__((externally_visible)) ;
extern Lisp_Object const Qlocal_map __attribute__((externally_visible)) ;
extern Lisp_Object const Qlread_unescaped_character_literals __attribute__((externally_visible)) ;
extern Lisp_Object const Qlss __attribute__((externally_visible)) ;
extern Lisp_Object const Qm __attribute__((externally_visible)) ;
extern Lisp_Object const Qmac __attribute__((externally_visible)) ;
extern Lisp_Object const Qmacro __attribute__((externally_visible)) ;
extern Lisp_Object const Qmajflt __attribute__((externally_visible)) ;
extern Lisp_Object const Qmake_directory __attribute__((externally_visible)) ;
extern Lisp_Object const Qmake_directory_internal __attribute__((externally_visible)) ;
extern Lisp_Object const Qmake_frame_visible __attribute__((externally_visible)) ;
extern Lisp_Object const Qmake_invisible __attribute__((externally_visible)) ;
extern Lisp_Object const Qmake_symbolic_link __attribute__((externally_visible)) ;
extern Lisp_Object const Qmakunbound __attribute__((externally_visible)) ;
extern Lisp_Object const Qmany __attribute__((externally_visible)) ;
extern Lisp_Object const Qmargin __attribute__((externally_visible)) ;
extern Lisp_Object const Qmark_for_redisplay __attribute__((externally_visible)) ;
extern Lisp_Object const Qmark_inactive __attribute__((externally_visible)) ;
extern Lisp_Object const Qmarker __attribute__((externally_visible)) ;
extern Lisp_Object const Qmarkerp __attribute__((externally_visible)) ;
extern Lisp_Object const Qmaximized __attribute__((externally_visible)) ;
extern Lisp_Object const Qmd5 __attribute__((externally_visible)) ;
extern Lisp_Object const Qmenu __attribute__((externally_visible)) ;
extern Lisp_Object const Qmenu_bar __attribute__((externally_visible)) ;
extern Lisp_Object const Qmenu_bar_external __attribute__((externally_visible)) ;
extern Lisp_Object const Qmenu_bar_lines __attribute__((externally_visible)) ;
extern Lisp_Object const Qmenu_bar_size __attribute__((externally_visible)) ;
extern Lisp_Object const Qmenu_bar_update_hook __attribute__((externally_visible)) ;
extern Lisp_Object const Qmenu_enable __attribute__((externally_visible)) ;
extern Lisp_Object const Qmenu_item __attribute__((externally_visible)) ;
extern Lisp_Object const Qmeta __attribute__((externally_visible)) ;
extern Lisp_Object const Qmetadata __attribute__((externally_visible)) ;
extern Lisp_Object const Qmin_height __attribute__((externally_visible)) ;
extern Lisp_Object const Qmin_width __attribute__((externally_visible)) ;
extern Lisp_Object const Qminflt __attribute__((externally_visible)) ;
extern Lisp_Object const Qminibuffer __attribute__((externally_visible)) ;
extern Lisp_Object const Qminibuffer_completion_table __attribute__((externally_visible)) ;
extern Lisp_Object const Qminibuffer_default __attribute__((externally_visible)) ;
extern Lisp_Object const Qminibuffer_exit __attribute__((externally_visible)) ;
extern Lisp_Object const Qminibuffer_exit_hook __attribute__((externally_visible)) ;
extern Lisp_Object const Qminibuffer_history __attribute__((externally_visible)) ;
extern Lisp_Object const Qminibuffer_prompt __attribute__((externally_visible)) ;
extern Lisp_Object const Qminibuffer_setup_hook __attribute__((externally_visible)) ;
extern Lisp_Object const Qminus __attribute__((externally_visible)) ;
extern Lisp_Object const Qmiscs __attribute__((externally_visible)) ;
extern Lisp_Object const Qmm_size __attribute__((externally_visible)) ;
extern Lisp_Object const Qmode_class __attribute__((externally_visible)) ;
extern Lisp_Object const Qmode_line __attribute__((externally_visible)) ;
extern Lisp_Object const Qmode_line_default_help_echo __attribute__((externally_visible)) ;
extern Lisp_Object const Qmode_line_format __attribute__((externally_visible)) ;
extern Lisp_Object const Qmode_line_inactive __attribute__((externally_visible)) ;
extern Lisp_Object const Qmodeline __attribute__((externally_visible)) ;
extern Lisp_Object const Qmodification_hooks __attribute__((externally_visible)) ;
extern Lisp_Object const Qmodifier_cache __attribute__((externally_visible)) ;
extern Lisp_Object const Qmodifier_value __attribute__((externally_visible)) ;
extern Lisp_Object const Qmodify __attribute__((externally_visible)) ;
extern Lisp_Object const Qmodule_function __attribute__((externally_visible)) ;
extern Lisp_Object const Qmono __attribute__((externally_visible)) ;
extern Lisp_Object const Qmonospace __attribute__((externally_visible)) ;
extern Lisp_Object const Qmonospace_font_name __attribute__((externally_visible)) ;
extern Lisp_Object const Qmonths __attribute__((externally_visible)) ;
extern Lisp_Object const Qmouse __attribute__((externally_visible)) ;
extern Lisp_Object const Qmouse_click __attribute__((externally_visible)) ;
extern Lisp_Object const Qmouse_color __attribute__((externally_visible)) ;
extern Lisp_Object const Qmouse_face __attribute__((externally_visible)) ;
extern Lisp_Object const Qmouse_fixup_help_message __attribute__((externally_visible)) ;
extern Lisp_Object const Qmouse_leave_buffer_hook __attribute__((externally_visible)) ;
extern Lisp_Object const Qmouse_movement __attribute__((externally_visible)) ;
extern Lisp_Object const Qmouse_wheel_frame __attribute__((externally_visible)) ;
extern Lisp_Object const Qmove __attribute__((externally_visible)) ;
extern Lisp_Object const Qmove_file_to_trash __attribute__((externally_visible)) ;
extern Lisp_Object const Qmove_frame __attribute__((externally_visible)) ;
extern Lisp_Object const Qmove_self __attribute__((externally_visible)) ;
extern Lisp_Object const Qmoved_from __attribute__((externally_visible)) ;
extern Lisp_Object const Qmoved_to __attribute__((externally_visible)) ;
extern Lisp_Object const Qmutex __attribute__((externally_visible)) ;
extern Lisp_Object const Qmutexp __attribute__((externally_visible)) ;
extern Lisp_Object const Qname __attribute__((externally_visible)) ;
extern Lisp_Object const Qnative_edges __attribute__((externally_visible)) ;
extern Lisp_Object const Qnatnump __attribute__((externally_visible)) ;
extern Lisp_Object const Qnetwork __attribute__((externally_visible)) ;
extern Lisp_Object const Qnice __attribute__((externally_visible)) ;
extern Lisp_Object const Qno_accept_focus __attribute__((externally_visible)) ;
extern Lisp_Object const Qno_catch __attribute__((externally_visible)) ;
extern Lisp_Object const Qno_conversion __attribute__((externally_visible)) ;
extern Lisp_Object const Qno_focus_on_map __attribute__((externally_visible)) ;
extern Lisp_Object const Qno_other_frame __attribute__((externally_visible)) ;
extern Lisp_Object const Qno_special_glyphs __attribute__((externally_visible)) ;
extern Lisp_Object const Qnobreak_hyphen __attribute__((externally_visible)) ;
extern Lisp_Object const Qnobreak_space __attribute__((externally_visible)) ;
extern Lisp_Object const Qnoelisp __attribute__((externally_visible)) ;
extern Lisp_Object const Qnon_ascii __attribute__((externally_visible)) ;
extern Lisp_Object const Qnone __attribute__((externally_visible)) ;
extern Lisp_Object const Qnormal __attribute__((externally_visible)) ;
extern Lisp_Object const Qns __attribute__((externally_visible)) ;
extern Lisp_Object const Qns_appearance __attribute__((externally_visible)) ;
extern Lisp_Object const Qns_parse_geometry __attribute__((externally_visible)) ;
extern Lisp_Object const Qns_transparent_titlebar __attribute__((externally_visible)) ;
extern Lisp_Object const Qnsm_verify_connection __attribute__((externally_visible)) ;
extern Lisp_Object const Qnumber_or_marker_p __attribute__((externally_visible)) ;
extern Lisp_Object const Qnumberp __attribute__((externally_visible)) ;
extern Lisp_Object const Qobject __attribute__((externally_visible)) ;
extern Lisp_Object const Qoblique __attribute__((externally_visible)) ;
extern Lisp_Object const Qodd __attribute__((externally_visible)) ;
extern Lisp_Object const Qonly __attribute__((externally_visible)) ;
extern Lisp_Object const Qonlydir __attribute__((externally_visible)) ;
extern Lisp_Object const Qopen __attribute__((externally_visible)) ;
extern Lisp_Object const Qopen_network_stream __attribute__((externally_visible)) ;
extern Lisp_Object const Qopentype __attribute__((externally_visible)) ;
extern Lisp_Object const Qoperations __attribute__((externally_visible)) ;
extern Lisp_Object const Qorientation __attribute__((externally_visible)) ;
extern Lisp_Object const Qouter_border_width __attribute__((externally_visible)) ;
extern Lisp_Object const Qouter_edges __attribute__((externally_visible)) ;
extern Lisp_Object const Qouter_position __attribute__((externally_visible)) ;
extern Lisp_Object const Qouter_size __attribute__((externally_visible)) ;
extern Lisp_Object const Qouter_window_id __attribute__((externally_visible)) ;
extern Lisp_Object const Qoverflow_error __attribute__((externally_visible)) ;
extern Lisp_Object const Qoverlay __attribute__((externally_visible)) ;
extern Lisp_Object const Qoverlay_arrow __attribute__((externally_visible)) ;
extern Lisp_Object const Qoverlay_arrow_bitmap __attribute__((externally_visible)) ;
extern Lisp_Object const Qoverlay_arrow_string __attribute__((externally_visible)) ;
extern Lisp_Object const Qoverlayp __attribute__((externally_visible)) ;
extern Lisp_Object const Qoverride_redirect __attribute__((externally_visible)) ;
extern Lisp_Object const Qoverriding_local_map __attribute__((externally_visible)) ;
extern Lisp_Object const Qoverriding_plist_environment __attribute__((externally_visible)) ;
extern Lisp_Object const Qoverriding_terminal_local_map __attribute__((externally_visible)) ;
extern Lisp_Object const Qoverwrite_mode __attribute__((externally_visible)) ;
extern Lisp_Object const Qoverwrite_mode_binary __attribute__((externally_visible)) ;
extern Lisp_Object const Qp __attribute__((externally_visible)) ;
extern Lisp_Object const Qpaper __attribute__((externally_visible)) ;
extern Lisp_Object const Qparent_frame __attribute__((externally_visible)) ;
extern Lisp_Object const Qparent_id __attribute__((externally_visible)) ;
extern Lisp_Object const Qpbm __attribute__((externally_visible)) ;
extern Lisp_Object const Qpc __attribute__((externally_visible)) ;
extern Lisp_Object const Qpcpu __attribute__((externally_visible)) ;
extern Lisp_Object const Qpdf __attribute__((externally_visible)) ;
extern Lisp_Object const Qpermanent_local __attribute__((externally_visible)) ;
extern Lisp_Object const Qpermanent_local_hook __attribute__((externally_visible)) ;
extern Lisp_Object const Qpgrp __attribute__((externally_visible)) ;
extern Lisp_Object const Qpipe __attribute__((externally_visible)) ;
extern Lisp_Object const Qplay_sound_functions __attribute__((externally_visible)) ;
extern Lisp_Object const Qplistp __attribute__((externally_visible)) ;
extern Lisp_Object const Qplus __attribute__((externally_visible)) ;
extern Lisp_Object const Qpmem __attribute__((externally_visible)) ;
extern Lisp_Object const Qpng __attribute__((externally_visible)) ;
extern Lisp_Object const Qpoint_entered __attribute__((externally_visible)) ;
extern Lisp_Object const Qpoint_left __attribute__((externally_visible)) ;
extern Lisp_Object const Qpointer __attribute__((externally_visible)) ;
extern Lisp_Object const Qpolling_period __attribute__((externally_visible)) ;
extern Lisp_Object const Qpoly __attribute__((externally_visible)) ;
extern Lisp_Object const Qportrait __attribute__((externally_visible)) ;
extern Lisp_Object const Qposition __attribute__((externally_visible)) ;
extern Lisp_Object const Qpost_command_hook __attribute__((externally_visible)) ;
extern Lisp_Object const Qpost_gc_hook __attribute__((externally_visible)) ;
extern Lisp_Object const Qpost_self_insert_hook __attribute__((externally_visible)) ;
extern Lisp_Object const Qpostscript __attribute__((externally_visible)) ;
extern Lisp_Object const Qppid __attribute__((externally_visible)) ;
extern Lisp_Object const Qpre_command_hook __attribute__((externally_visible)) ;
extern Lisp_Object const Qpressed_button __attribute__((externally_visible)) ;
extern Lisp_Object const Qpri __attribute__((externally_visible)) ;
extern Lisp_Object const Qprint_escape_multibyte __attribute__((externally_visible)) ;
extern Lisp_Object const Qprint_escape_nonascii __attribute__((externally_visible)) ;
extern Lisp_Object const Qpriority __attribute__((externally_visible)) ;
extern Lisp_Object const Qprocess __attribute__((externally_visible)) ;
extern Lisp_Object const Qprocessp __attribute__((externally_visible)) ;
extern Lisp_Object const Qprofiler_backtrace_equal __attribute__((externally_visible)) ;
extern Lisp_Object const Qprogn __attribute__((externally_visible)) ;
extern Lisp_Object const Qprotected_field __attribute__((externally_visible)) ;
extern Lisp_Object const Qprovide __attribute__((externally_visible)) ;
extern Lisp_Object const Qpty __attribute__((externally_visible)) ;
extern Lisp_Object const Qpurecopy __attribute__((externally_visible)) ;
extern Lisp_Object const Qq_overflow __attribute__((externally_visible)) ;
extern Lisp_Object const Qquit __attribute__((externally_visible)) ;
extern Lisp_Object const Qquote __attribute__((externally_visible)) ;
extern Lisp_Object const Qraise __attribute__((externally_visible)) ;
extern Lisp_Object const Qrange __attribute__((externally_visible)) ;
extern Lisp_Object const Qrange_error __attribute__((externally_visible)) ;
extern Lisp_Object const Qratio __attribute__((externally_visible)) ;
extern Lisp_Object const Qraw_text __attribute__((externally_visible)) ;
extern Lisp_Object const Qread __attribute__((externally_visible)) ;
extern Lisp_Object const Qread_char __attribute__((externally_visible)) ;
extern Lisp_Object const Qread_number __attribute__((externally_visible)) ;
extern Lisp_Object const Qread_only __attribute__((externally_visible)) ;
extern Lisp_Object const Qreal __attribute__((externally_visible)) ;
extern Lisp_Object const Qrear_nonsticky __attribute__((externally_visible)) ;
extern Lisp_Object const Qrecompute_lucid_menubar __attribute__((externally_visible)) ;
extern Lisp_Object const Qrecord __attribute__((externally_visible)) ;
extern Lisp_Object const Qrecord_window_buffer __attribute__((externally_visible)) ;
extern Lisp_Object const Qrecordp __attribute__((externally_visible)) ;
extern Lisp_Object const Qrect __attribute__((externally_visible)) ;
extern Lisp_Object const Qredisplay_dont_pause __attribute__((externally_visible)) ;
extern Lisp_Object const Qredisplay_end_trigger_functions __attribute__((externally_visible)) ;
extern Lisp_Object const Qredisplay_internal_xC_functionx __attribute__((externally_visible)) ;
extern Lisp_Object const Qregion_extract_function __attribute__((externally_visible)) ;
extern Lisp_Object const Qrehash_size __attribute__((externally_visible)) ;
extern Lisp_Object const Qrehash_threshold __attribute__((externally_visible)) ;
extern Lisp_Object const Qrelative __attribute__((externally_visible)) ;
extern Lisp_Object const Qreleased_button __attribute__((externally_visible)) ;
extern Lisp_Object const Qremap __attribute__((externally_visible)) ;
extern Lisp_Object const Qrename_file __attribute__((externally_visible)) ;
extern Lisp_Object const Qreplace_buffer_in_windows __attribute__((externally_visible)) ;
extern Lisp_Object const Qrequire __attribute__((externally_visible)) ;
extern Lisp_Object const Qreverse_landscape __attribute__((externally_visible)) ;
extern Lisp_Object const Qreverse_portrait __attribute__((externally_visible)) ;
extern Lisp_Object const Qright __attribute__((externally_visible)) ;
extern Lisp_Object const Qright_divider __attribute__((externally_visible)) ;
extern Lisp_Object const Qright_divider_width __attribute__((externally_visible)) ;
extern Lisp_Object const Qright_edge __attribute__((externally_visible)) ;
extern Lisp_Object const Qright_fringe __attribute__((externally_visible)) ;
extern Lisp_Object const Qright_margin __attribute__((externally_visible)) ;
extern Lisp_Object const Qright_to_left __attribute__((externally_visible)) ;
extern Lisp_Object const Qrightmost __attribute__((externally_visible)) ;
extern Lisp_Object const Qrisky_local_variable __attribute__((externally_visible)) ;
extern Lisp_Object const Qrss __attribute__((externally_visible)) ;
extern Lisp_Object const Qrun __attribute__((externally_visible)) ;
extern Lisp_Object const Qrun_hook_with_args __attribute__((externally_visible)) ;
extern Lisp_Object const Qsafe __attribute__((externally_visible)) ;
extern Lisp_Object const Qsans __attribute__((externally_visible)) ;
extern Lisp_Object const Qsans__serif __attribute__((externally_visible)) ;
extern Lisp_Object const Qsans_serif __attribute__((externally_visible)) ;
extern Lisp_Object const Qsave_excursion __attribute__((externally_visible)) ;
extern Lisp_Object const Qsave_session __attribute__((externally_visible)) ;
extern Lisp_Object const Qscan_error __attribute__((externally_visible)) ;
extern Lisp_Object const Qscreen_gamma __attribute__((externally_visible)) ;
extern Lisp_Object const Qscroll_bar __attribute__((externally_visible)) ;
extern Lisp_Object const Qscroll_bar_background __attribute__((externally_visible)) ;
extern Lisp_Object const Qscroll_bar_foreground __attribute__((externally_visible)) ;
extern Lisp_Object const Qscroll_bar_height __attribute__((externally_visible)) ;
extern Lisp_Object const Qscroll_bar_movement __attribute__((externally_visible)) ;
extern Lisp_Object const Qscroll_bar_width __attribute__((externally_visible)) ;
extern Lisp_Object const Qscroll_command __attribute__((externally_visible)) ;
extern Lisp_Object const Qscroll_down __attribute__((externally_visible)) ;
extern Lisp_Object const Qscroll_up __attribute__((externally_visible)) ;
extern Lisp_Object const Qsearch_failed __attribute__((externally_visible)) ;
extern Lisp_Object const Qselect_window __attribute__((externally_visible)) ;
extern Lisp_Object const Qselection_request __attribute__((externally_visible)) ;
extern Lisp_Object const Qsemi_bold __attribute__((externally_visible)) ;
extern Lisp_Object const Qsemi_light __attribute__((externally_visible)) ;
extern Lisp_Object const Qseqpacket __attribute__((externally_visible)) ;
extern Lisp_Object const Qsequencep __attribute__((externally_visible)) ;
extern Lisp_Object const Qserial __attribute__((externally_visible)) ;
extern Lisp_Object const Qsess __attribute__((externally_visible)) ;
extern Lisp_Object const Qset __attribute__((externally_visible)) ;
extern Lisp_Object const Qset_default __attribute__((externally_visible)) ;
extern Lisp_Object const Qset_file_acl __attribute__((externally_visible)) ;
extern Lisp_Object const Qset_file_modes __attribute__((externally_visible)) ;
extern Lisp_Object const Qset_file_selinux_context __attribute__((externally_visible)) ;
extern Lisp_Object const Qset_file_times __attribute__((externally_visible)) ;
extern Lisp_Object const Qset_frame_size __attribute__((externally_visible)) ;
extern Lisp_Object const Qset_visited_file_modtime __attribute__((externally_visible)) ;
extern Lisp_Object const Qset_window_configuration __attribute__((externally_visible)) ;
extern Lisp_Object const Qsetq __attribute__((externally_visible)) ;
extern Lisp_Object const Qsetting_constant __attribute__((externally_visible)) ;
extern Lisp_Object const Qsha1 __attribute__((externally_visible)) ;
extern Lisp_Object const Qsha224 __attribute__((externally_visible)) ;
extern Lisp_Object const Qsha256 __attribute__((externally_visible)) ;
extern Lisp_Object const Qsha384 __attribute__((externally_visible)) ;
extern Lisp_Object const Qsha512 __attribute__((externally_visible)) ;
extern Lisp_Object const Qshift_jis __attribute__((externally_visible)) ;
extern Lisp_Object const Qsignal __attribute__((externally_visible)) ;
extern Lisp_Object const Qsingularity_error __attribute__((externally_visible)) ;
extern Lisp_Object const Qsize __attribute__((externally_visible)) ;
extern Lisp_Object const Qskip_taskbar __attribute__((externally_visible)) ;
extern Lisp_Object const Qslice __attribute__((externally_visible)) ;
extern Lisp_Object const Qsound __attribute__((externally_visible)) ;
extern Lisp_Object const Qsource __attribute__((externally_visible)) ;
extern Lisp_Object const Qspace __attribute__((externally_visible)) ;
extern Lisp_Object const Qspace_width __attribute__((externally_visible)) ;
extern Lisp_Object const Qspecial_lowercase __attribute__((externally_visible)) ;
extern Lisp_Object const Qspecial_titlecase __attribute__((externally_visible)) ;
extern Lisp_Object const Qspecial_uppercase __attribute__((externally_visible)) ;
extern Lisp_Object const Qstandard_input __attribute__((externally_visible)) ;
extern Lisp_Object const Qstandard_output __attribute__((externally_visible)) ;
extern Lisp_Object const Qstart __attribute__((externally_visible)) ;
extern Lisp_Object const Qstart_process __attribute__((externally_visible)) ;
extern Lisp_Object const Qstate __attribute__((externally_visible)) ;
extern Lisp_Object const Qstderr __attribute__((externally_visible)) ;
extern Lisp_Object const Qstdin __attribute__((externally_visible)) ;
extern Lisp_Object const Qstdout __attribute__((externally_visible)) ;
extern Lisp_Object const Qsticky __attribute__((externally_visible)) ;
extern Lisp_Object const Qstime __attribute__((externally_visible)) ;
extern Lisp_Object const Qstop __attribute__((externally_visible)) ;
extern Lisp_Object const Qstraight __attribute__((externally_visible)) ;
extern Lisp_Object const Qstring __attribute__((externally_visible)) ;
extern Lisp_Object const Qstring_bytes __attribute__((externally_visible)) ;
extern Lisp_Object const Qstring_lessp __attribute__((externally_visible)) ;
extern Lisp_Object const Qstringp __attribute__((externally_visible)) ;
extern Lisp_Object const Qstrings __attribute__((externally_visible)) ;
extern Lisp_Object const Qsubfeatures __attribute__((externally_visible)) ;
extern Lisp_Object const Qsubr __attribute__((externally_visible)) ;
extern Lisp_Object const Qsubrp __attribute__((externally_visible)) ;
extern Lisp_Object const Qsubstitute_env_in_file_name __attribute__((externally_visible)) ;
extern Lisp_Object const Qsubstitute_in_file_name __attribute__((externally_visible)) ;
extern Lisp_Object const Qsuper __attribute__((externally_visible)) ;
extern Lisp_Object const Qsvg __attribute__((externally_visible)) ;
extern Lisp_Object const Qsw __attribute__((externally_visible)) ;
extern Lisp_Object const Qswitch_frame __attribute__((externally_visible)) ;
extern Lisp_Object const Qsymbol __attribute__((externally_visible)) ;
extern Lisp_Object const Qsymbolp __attribute__((externally_visible)) ;
extern Lisp_Object const Qsymbols __attribute__((externally_visible)) ;
extern Lisp_Object const Qsyntax_ppss __attribute__((externally_visible)) ;
extern Lisp_Object const Qsyntax_table __attribute__((externally_visible)) ;
extern Lisp_Object const Qsyntax_table_p __attribute__((externally_visible)) ;
extern Lisp_Object const Qt __attribute__((externally_visible)) ;
extern Lisp_Object const Qtarget_idx __attribute__((externally_visible)) ;
extern Lisp_Object const Qtb_size_cb __attribute__((externally_visible)) ;
extern Lisp_Object const Qtemp_buffer_setup_hook __attribute__((externally_visible)) ;
extern Lisp_Object const Qtemp_buffer_show_hook __attribute__((externally_visible)) ;
extern Lisp_Object const Qterminal __attribute__((externally_visible)) ;
extern Lisp_Object const Qterminal_frame __attribute__((externally_visible)) ;
extern Lisp_Object const Qterminal_live_p __attribute__((externally_visible)) ;
extern Lisp_Object const Qtest __attribute__((externally_visible)) ;
extern Lisp_Object const Qtext __attribute__((externally_visible)) ;
extern Lisp_Object const Qtext_image_horiz __attribute__((externally_visible)) ;
extern Lisp_Object const Qtext_pixels __attribute__((externally_visible)) ;
extern Lisp_Object const Qtext_read_only __attribute__((externally_visible)) ;
extern Lisp_Object const Qthcount __attribute__((externally_visible)) ;
extern Lisp_Object const Qthin_space __attribute__((externally_visible)) ;
extern Lisp_Object const Qthread __attribute__((externally_visible)) ;
extern Lisp_Object const Qthreadp __attribute__((externally_visible)) ;
extern Lisp_Object const Qtiff __attribute__((externally_visible)) ;
extern Lisp_Object const Qtime __attribute__((externally_visible)) ;
extern Lisp_Object const Qtimer_event_handler __attribute__((externally_visible)) ;
extern Lisp_Object const Qtitle __attribute__((externally_visible)) ;
extern Lisp_Object const Qtitle_bar_size __attribute__((externally_visible)) ;
extern Lisp_Object const Qtitlecase __attribute__((externally_visible)) ;
extern Lisp_Object const Qtool_bar __attribute__((externally_visible)) ;
extern Lisp_Object const Qtool_bar_external __attribute__((externally_visible)) ;
extern Lisp_Object const Qtool_bar_lines __attribute__((externally_visible)) ;
extern Lisp_Object const Qtool_bar_position __attribute__((externally_visible)) ;
extern Lisp_Object const Qtool_bar_size __attribute__((externally_visible)) ;
extern Lisp_Object const Qtool_bar_style __attribute__((externally_visible)) ;
extern Lisp_Object const Qtooltip __attribute__((externally_visible)) ;
extern Lisp_Object const Qtop __attribute__((externally_visible)) ;
extern Lisp_Object const Qtop_bottom __attribute__((externally_visible)) ;
extern Lisp_Object const Qtop_edge __attribute__((externally_visible)) ;
extern Lisp_Object const Qtop_left_corner __attribute__((externally_visible)) ;
extern Lisp_Object const Qtop_level __attribute__((externally_visible)) ;
extern Lisp_Object const Qtop_margin __attribute__((externally_visible)) ;
extern Lisp_Object const Qtop_only __attribute__((externally_visible)) ;
extern Lisp_Object const Qtop_right_corner __attribute__((externally_visible)) ;
extern Lisp_Object const Qtpgid __attribute__((externally_visible)) ;
extern Lisp_Object const Qtrailing_whitespace __attribute__((externally_visible)) ;
extern Lisp_Object const Qtranslation_table __attribute__((externally_visible)) ;
extern Lisp_Object const Qtranslation_table_id __attribute__((externally_visible)) ;
extern Lisp_Object const Qtrapping_constant __attribute__((externally_visible)) ;
extern Lisp_Object const Qtruncation __attribute__((externally_visible)) ;
extern Lisp_Object const Qttname __attribute__((externally_visible)) ;
extern Lisp_Object const Qtty __attribute__((externally_visible)) ;
extern Lisp_Object const Qtty_color_alist __attribute__((externally_visible)) ;
extern Lisp_Object const Qtty_color_by_index __attribute__((externally_visible)) ;
extern Lisp_Object const Qtty_color_desc __attribute__((externally_visible)) ;
extern Lisp_Object const Qtty_color_mode __attribute__((externally_visible)) ;
extern Lisp_Object const Qtty_color_standard_values __attribute__((externally_visible)) ;
extern Lisp_Object const Qtty_menu_exit __attribute__((externally_visible)) ;
extern Lisp_Object const Qtty_menu_ignore __attribute__((externally_visible)) ;
extern Lisp_Object const Qtty_menu_mouse_movement __attribute__((externally_visible)) ;
extern Lisp_Object const Qtty_menu_navigation_map __attribute__((externally_visible)) ;
extern Lisp_Object const Qtty_menu_next_item __attribute__((externally_visible)) ;
extern Lisp_Object const Qtty_menu_next_menu __attribute__((externally_visible)) ;
extern Lisp_Object const Qtty_menu_prev_item __attribute__((externally_visible)) ;
extern Lisp_Object const Qtty_menu_prev_menu __attribute__((externally_visible)) ;
extern Lisp_Object const Qtty_menu_select __attribute__((externally_visible)) ;
extern Lisp_Object const Qtty_mode_reset_strings __attribute__((externally_visible)) ;
extern Lisp_Object const Qtty_mode_set_strings __attribute__((externally_visible)) ;
extern Lisp_Object const Qtty_type __attribute__((externally_visible)) ;
extern Lisp_Object const Qultra_bold __attribute__((externally_visible)) ;
extern Lisp_Object const Qunbound __attribute__((externally_visible)) ;
extern Lisp_Object const Qundecided __attribute__((externally_visible)) ;
extern Lisp_Object const Qundecorated __attribute__((externally_visible)) ;
extern Lisp_Object const Qundefined __attribute__((externally_visible)) ;
extern Lisp_Object const Qundefined_color __attribute__((externally_visible)) ;
extern Lisp_Object const Qunderflow_error __attribute__((externally_visible)) ;
extern Lisp_Object const Qunderline_minimum_offset __attribute__((externally_visible)) ;
extern Lisp_Object const Qundo_auto__add_boundary __attribute__((externally_visible)) ;
extern Lisp_Object const Qundo_auto__last_boundary_cause __attribute__((externally_visible)) ;
extern Lisp_Object const Qundo_auto__this_command_amalgamating __attribute__((externally_visible)) ;
extern Lisp_Object const Qundo_auto__undoable_change __attribute__((externally_visible)) ;
extern Lisp_Object const Qundo_auto__undoably_changed_buffers __attribute__((externally_visible)) ;
extern Lisp_Object const Qundo_auto_amalgamate __attribute__((externally_visible)) ;
extern Lisp_Object const Qunevalled __attribute__((externally_visible)) ;
extern Lisp_Object const Qunhandled_file_name_directory __attribute__((externally_visible)) ;
extern Lisp_Object const Qunicode __attribute__((externally_visible)) ;
extern Lisp_Object const Qunicode_bmp __attribute__((externally_visible)) ;
extern Lisp_Object const Qunix __attribute__((externally_visible)) ;
extern Lisp_Object const Qunlet __attribute__((externally_visible)) ;
extern Lisp_Object const Qunmount __attribute__((externally_visible)) ;
extern Lisp_Object const Qunspecified __attribute__((externally_visible)) ;
extern Lisp_Object const Qunsplittable __attribute__((externally_visible)) ;
extern Lisp_Object const Qup __attribute__((externally_visible)) ;
extern Lisp_Object const Qupdate_frame_menubar __attribute__((externally_visible)) ;
extern Lisp_Object const Qupdate_frame_tool_bar __attribute__((externally_visible)) ;
extern Lisp_Object const Quser __attribute__((externally_visible)) ;
extern Lisp_Object const Quser_error __attribute__((externally_visible)) ;
extern Lisp_Object const Quser_position __attribute__((externally_visible)) ;
extern Lisp_Object const Quser_ptr __attribute__((externally_visible)) ;
extern Lisp_Object const Quser_ptrp __attribute__((externally_visible)) ;
extern Lisp_Object const Quser_search_failed __attribute__((externally_visible)) ;
extern Lisp_Object const Quser_size __attribute__((externally_visible)) ;
extern Lisp_Object const Qutf_16 __attribute__((externally_visible)) ;
extern Lisp_Object const Qutf_16le __attribute__((externally_visible)) ;
extern Lisp_Object const Qutf_8 __attribute__((externally_visible)) ;
extern Lisp_Object const Qutf_8_emacs __attribute__((externally_visible)) ;
extern Lisp_Object const Qutf_8_unix __attribute__((externally_visible)) ;
extern Lisp_Object const Qutime __attribute__((externally_visible)) ;
extern Lisp_Object const Qvalue __attribute__((externally_visible)) ;
extern Lisp_Object const Qvariable_documentation __attribute__((externally_visible)) ;
extern Lisp_Object const Qvector __attribute__((externally_visible)) ;
extern Lisp_Object const Qvector_or_char_table_p __attribute__((externally_visible)) ;
extern Lisp_Object const Qvector_slots __attribute__((externally_visible)) ;
extern Lisp_Object const Qvectorp __attribute__((externally_visible)) ;
extern Lisp_Object const Qvectors __attribute__((externally_visible)) ;
extern Lisp_Object const Qvendor_specific_keysyms __attribute__((externally_visible)) ;
extern Lisp_Object const Qverify_visited_file_modtime __attribute__((externally_visible)) ;
extern Lisp_Object const Qvertical_border __attribute__((externally_visible)) ;
extern Lisp_Object const Qvertical_line __attribute__((externally_visible)) ;
extern Lisp_Object const Qvertical_scroll_bar __attribute__((externally_visible)) ;
extern Lisp_Object const Qvertical_scroll_bars __attribute__((externally_visible)) ;
extern Lisp_Object const Qvisibility __attribute__((externally_visible)) ;
extern Lisp_Object const Qvisible __attribute__((externally_visible)) ;
extern Lisp_Object const Qvisual __attribute__((externally_visible)) ;
extern Lisp_Object const Qvoid_function __attribute__((externally_visible)) ;
extern Lisp_Object const Qvoid_variable __attribute__((externally_visible)) ;
extern Lisp_Object const Qvsize __attribute__((externally_visible)) ;
extern Lisp_Object const Qw32 __attribute__((externally_visible)) ;
extern Lisp_Object const Qwait_for_wm __attribute__((externally_visible)) ;
extern Lisp_Object const Qwall __attribute__((externally_visible)) ;
extern Lisp_Object const Qwatchers __attribute__((externally_visible)) ;
extern Lisp_Object const Qwave __attribute__((externally_visible)) ;
extern Lisp_Object const Qweakness __attribute__((externally_visible)) ;
extern Lisp_Object const Qwhen __attribute__((externally_visible)) ;
extern Lisp_Object const Qwholenump __attribute__((externally_visible)) ;
extern Lisp_Object const Qwidget_type __attribute__((externally_visible)) ;
extern Lisp_Object const Qwidth __attribute__((externally_visible)) ;
extern Lisp_Object const Qwidth_only __attribute__((externally_visible)) ;
extern Lisp_Object const Qwindow __attribute__((externally_visible)) ;
extern Lisp_Object const Qwindow__pixel_to_total __attribute__((externally_visible)) ;
extern Lisp_Object const Qwindow__resize_root_window __attribute__((externally_visible)) ;
extern Lisp_Object const Qwindow__resize_root_window_vertically __attribute__((externally_visible)) ;
extern Lisp_Object const Qwindow__sanitize_window_sizes __attribute__((externally_visible)) ;
extern Lisp_Object const Qwindow_configuration __attribute__((externally_visible)) ;
extern Lisp_Object const Qwindow_configuration_change_hook __attribute__((externally_visible)) ;
extern Lisp_Object const Qwindow_configuration_p __attribute__((externally_visible)) ;
extern Lisp_Object const Qwindow_deletable_p __attribute__((externally_visible)) ;
extern Lisp_Object const Qwindow_divider __attribute__((externally_visible)) ;
extern Lisp_Object const Qwindow_divider_first_pixel __attribute__((externally_visible)) ;
extern Lisp_Object const Qwindow_divider_last_pixel __attribute__((externally_visible)) ;
extern Lisp_Object const Qwindow_id __attribute__((externally_visible)) ;
extern Lisp_Object const Qwindow_live_p __attribute__((externally_visible)) ;
extern Lisp_Object const Qwindow_point_insertion_type __attribute__((externally_visible)) ;
extern Lisp_Object const Qwindow_scroll_functions __attribute__((externally_visible)) ;
extern Lisp_Object const Qwindow_size __attribute__((externally_visible)) ;
extern Lisp_Object const Qwindow_valid_p __attribute__((externally_visible)) ;
extern Lisp_Object const Qwindowp __attribute__((externally_visible)) ;
extern Lisp_Object const Qworkarea __attribute__((externally_visible)) ;
extern Lisp_Object const Qwrap_prefix __attribute__((externally_visible)) ;
extern Lisp_Object const Qwrite_region __attribute__((externally_visible)) ;
extern Lisp_Object const Qwrite_region_annotate_functions __attribute__((externally_visible)) ;
extern Lisp_Object const Qwrong_length_argument __attribute__((externally_visible)) ;
extern Lisp_Object const Qwrong_number_of_arguments __attribute__((externally_visible)) ;
extern Lisp_Object const Qwrong_type_argument __attribute__((externally_visible)) ;
extern Lisp_Object const Qx __attribute__((externally_visible)) ;
extern Lisp_Object const Qx_check_fullscreen __attribute__((externally_visible)) ;
extern Lisp_Object const Qx_create_frame_1 __attribute__((externally_visible)) ;
extern Lisp_Object const Qx_create_frame_2 __attribute__((externally_visible)) ;
extern Lisp_Object const Qx_frame_parameter __attribute__((externally_visible)) ;
extern Lisp_Object const Qx_gtk_map_stock __attribute__((externally_visible)) ;
extern Lisp_Object const Qx_handle_net_wm_state __attribute__((externally_visible)) ;
extern Lisp_Object const Qx_lost_selection_functions __attribute__((externally_visible)) ;
extern Lisp_Object const Qx_net_wm_state __attribute__((externally_visible)) ;
extern Lisp_Object const Qx_resource_name __attribute__((externally_visible)) ;
extern Lisp_Object const Qx_sent_selection_functions __attribute__((externally_visible)) ;
extern Lisp_Object const Qx_set_frame_parameters __attribute__((externally_visible)) ;
extern Lisp_Object const Qx_set_fullscreen __attribute__((externally_visible)) ;
extern Lisp_Object const Qx_set_menu_bar_lines __attribute__((externally_visible)) ;
extern Lisp_Object const Qx_set_window_size_1 __attribute__((externally_visible)) ;
extern Lisp_Object const Qx_set_window_size_2 __attribute__((externally_visible)) ;
extern Lisp_Object const Qx_set_window_size_3 __attribute__((externally_visible)) ;
extern Lisp_Object const Qx_underline_at_descent_line __attribute__((externally_visible)) ;
extern Lisp_Object const Qx_use_underline_position_properties __attribute__((externally_visible)) ;
extern Lisp_Object const Qxbm __attribute__((externally_visible)) ;
extern Lisp_Object const Qxft __attribute__((externally_visible)) ;
extern Lisp_Object const Qxg_change_toolbar_position __attribute__((externally_visible)) ;
extern Lisp_Object const Qxg_frame_resized __attribute__((externally_visible)) ;
extern Lisp_Object const Qxg_frame_set_char_size __attribute__((externally_visible)) ;
extern Lisp_Object const Qxg_frame_set_char_size_1 __attribute__((externally_visible)) ;
extern Lisp_Object const Qxg_frame_set_char_size_2 __attribute__((externally_visible)) ;
extern Lisp_Object const Qxg_frame_set_char_size_3 __attribute__((externally_visible)) ;
extern Lisp_Object const Qxpm __attribute__((externally_visible)) ;
extern Lisp_Object const Qxwidget_event __attribute__((externally_visible)) ;
extern Lisp_Object const Qyes_or_no_p_history __attribute__((externally_visible)) ;
extern Lisp_Object const Qz_group __attribute__((externally_visible)) ;
extern Lisp_Object const Qzero_width __attribute__((externally_visible)) ;
_Noreturn extern Lisp_Object Fabort_recursive_edit (void);
extern Lisp_Object Fabs (Lisp_Object);
extern Lisp_Object Faccept_process_output (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Faccess_file (Lisp_Object, Lisp_Object);
extern Lisp_Object Faccessible_keymaps (Lisp_Object, Lisp_Object);
extern Lisp_Object Facos (Lisp_Object);
extern Lisp_Object Factive_minibuffer_window (void);
extern Lisp_Object Fadd1 (Lisp_Object);
extern Lisp_Object Fadd_face_text_property (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fadd_name_to_file (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fadd_text_properties (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fadd_variable_watcher (Lisp_Object, Lisp_Object);
extern Lisp_Object Fall_completions (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fall_threads (void);
extern Lisp_Object Fand (Lisp_Object);
extern Lisp_Object Fappend (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Fapply (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Fapropos_internal (Lisp_Object, Lisp_Object);
extern Lisp_Object Faref (Lisp_Object, Lisp_Object);
extern Lisp_Object Farrayp (Lisp_Object);
extern Lisp_Object Faset (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fash (Lisp_Object, Lisp_Object);
extern Lisp_Object Fasin (Lisp_Object);
extern Lisp_Object Fassoc (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fassoc_string (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fassq (Lisp_Object, Lisp_Object);
extern Lisp_Object Fatan (Lisp_Object, Lisp_Object);
extern Lisp_Object Fatom (Lisp_Object) __attribute__ ((__const__));
extern Lisp_Object Fautoload (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fautoload_do_load (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fbacktrace__locals (Lisp_Object, Lisp_Object);
extern Lisp_Object Fbacktrace_debug (Lisp_Object, Lisp_Object);
extern Lisp_Object Fbacktrace_eval (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fbacktrace_frame_internal (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fbackward_char (Lisp_Object);
extern Lisp_Object Fbackward_prefix_chars (void);
extern Lisp_Object Fbarf_if_buffer_read_only (Lisp_Object);
extern Lisp_Object Fbase64_decode_region (Lisp_Object, Lisp_Object);
extern Lisp_Object Fbase64_decode_string (Lisp_Object);
extern Lisp_Object Fbase64_encode_region (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fbase64_encode_string (Lisp_Object, Lisp_Object);
extern Lisp_Object Fbeginning_of_line (Lisp_Object);
extern Lisp_Object Fbidi_find_overridden_directionality (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fbidi_resolved_levels (Lisp_Object);
extern Lisp_Object Fbitmap_spec_p (Lisp_Object);
extern Lisp_Object Fbobp (void);
extern Lisp_Object Fbolp (void);
extern Lisp_Object Fbool_vector (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Fbool_vector_count_consecutive (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fbool_vector_count_population (Lisp_Object);
extern Lisp_Object Fbool_vector_exclusive_or (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fbool_vector_intersection (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fbool_vector_not (Lisp_Object, Lisp_Object);
extern Lisp_Object Fbool_vector_p (Lisp_Object);
extern Lisp_Object Fbool_vector_set_difference (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fbool_vector_subsetp (Lisp_Object, Lisp_Object);
extern Lisp_Object Fbool_vector_union (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fbottom_divider_width (Lisp_Object);
extern Lisp_Object Fboundp (Lisp_Object);
extern Lisp_Object Fbuffer_base_buffer (Lisp_Object);
extern Lisp_Object Fbuffer_chars_modified_tick (Lisp_Object);
extern Lisp_Object Fbuffer_enable_undo (Lisp_Object);
extern Lisp_Object Fbuffer_file_name (Lisp_Object);
extern Lisp_Object Fbuffer_has_markers_at (Lisp_Object);
extern Lisp_Object Fbuffer_hash (Lisp_Object);
extern Lisp_Object Fbuffer_list (Lisp_Object);
extern Lisp_Object Fbuffer_live_p (Lisp_Object);
extern Lisp_Object Fbuffer_local_value (Lisp_Object, Lisp_Object);
extern Lisp_Object Fbuffer_local_variables (Lisp_Object);
extern Lisp_Object Fbuffer_modified_p (Lisp_Object);
extern Lisp_Object Fbuffer_modified_tick (Lisp_Object);
extern Lisp_Object Fbuffer_name (Lisp_Object);
extern Lisp_Object Fbuffer_size (Lisp_Object);
extern Lisp_Object Fbuffer_string (void);
extern Lisp_Object Fbuffer_substring (Lisp_Object, Lisp_Object);
extern Lisp_Object Fbuffer_substring_no_properties (Lisp_Object, Lisp_Object);
extern Lisp_Object Fbuffer_swap_text (Lisp_Object);
extern Lisp_Object Fbufferp (Lisp_Object);
extern Lisp_Object Fbury_buffer_internal (Lisp_Object);
extern Lisp_Object Fbyte_code (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fbyte_code_function_p (Lisp_Object);
extern Lisp_Object Fbyte_to_position (Lisp_Object);
extern Lisp_Object Fbyte_to_string (Lisp_Object);
extern Lisp_Object Fbyteorder (void) __attribute__ ((__const__));
extern Lisp_Object Fcall_interactively (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fcall_last_kbd_macro (Lisp_Object, Lisp_Object);
extern Lisp_Object Fcall_process (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Fcall_process_region (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Fcancel_kbd_macro_events (void);
extern Lisp_Object Fcapitalize (Lisp_Object);
extern Lisp_Object Fcapitalize_region (Lisp_Object, Lisp_Object);
extern Lisp_Object Fcapitalize_word (Lisp_Object);
extern Lisp_Object Fcar (Lisp_Object);
extern Lisp_Object Fcar_less_than_car (Lisp_Object, Lisp_Object);
extern Lisp_Object Fcar_safe (Lisp_Object);
extern Lisp_Object Fcase_table_p (Lisp_Object);
extern Lisp_Object Fcatch (Lisp_Object);
extern Lisp_Object Fcategory_docstring (Lisp_Object, Lisp_Object);
extern Lisp_Object Fcategory_set_mnemonics (Lisp_Object);
extern Lisp_Object Fcategory_table (void);
extern Lisp_Object Fcategory_table_p (Lisp_Object);
extern Lisp_Object Fccl_execute (Lisp_Object, Lisp_Object);
extern Lisp_Object Fccl_execute_on_string (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fccl_program_p (Lisp_Object);
extern Lisp_Object Fcdr (Lisp_Object);
extern Lisp_Object Fcdr_safe (Lisp_Object);
extern Lisp_Object Fceiling (Lisp_Object, Lisp_Object);
extern Lisp_Object Fchar_after (Lisp_Object);
extern Lisp_Object Fchar_before (Lisp_Object);
extern Lisp_Object Fchar_category_set (Lisp_Object);
extern Lisp_Object Fchar_charset (Lisp_Object, Lisp_Object);
extern Lisp_Object Fchar_equal (Lisp_Object, Lisp_Object);
extern Lisp_Object Fchar_or_string_p (Lisp_Object) __attribute__ ((__const__));
extern Lisp_Object Fchar_resolve_modifiers (Lisp_Object);
extern Lisp_Object Fchar_syntax (Lisp_Object);
extern Lisp_Object Fchar_table_extra_slot (Lisp_Object, Lisp_Object);
extern Lisp_Object Fchar_table_p (Lisp_Object);
extern Lisp_Object Fchar_table_parent (Lisp_Object);
extern Lisp_Object Fchar_table_range (Lisp_Object, Lisp_Object);
extern Lisp_Object Fchar_table_subtype (Lisp_Object);
extern Lisp_Object Fchar_to_string (Lisp_Object);
extern Lisp_Object Fchar_width (Lisp_Object);
extern Lisp_Object Fcharacterp (Lisp_Object, Lisp_Object) __attribute__ ((__const__));
extern Lisp_Object Fcharset_after (Lisp_Object);
extern Lisp_Object Fcharset_id_internal (Lisp_Object);
extern Lisp_Object Fcharset_plist (Lisp_Object);
extern Lisp_Object Fcharset_priority_list (Lisp_Object);
extern Lisp_Object Fcharsetp (Lisp_Object);
extern Lisp_Object Fcheck_coding_system (Lisp_Object);
extern Lisp_Object Fcheck_coding_systems_region (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fclear_buffer_auto_save_failure (void);
extern Lisp_Object Fclear_charset_maps (void);
extern Lisp_Object Fclear_composition_cache (void);
extern Lisp_Object Fclear_face_cache (Lisp_Object);
extern Lisp_Object Fclear_font_cache (void);
extern Lisp_Object Fclear_image_cache (Lisp_Object);
extern Lisp_Object Fclear_string (Lisp_Object);
extern Lisp_Object Fclear_this_command_keys (Lisp_Object);
extern Lisp_Object Fclose_font (Lisp_Object, Lisp_Object);
extern Lisp_Object Fclrhash (Lisp_Object);
extern Lisp_Object Fcoding_system_aliases (Lisp_Object);
extern Lisp_Object Fcoding_system_base (Lisp_Object);
extern Lisp_Object Fcoding_system_eol_type (Lisp_Object);
extern Lisp_Object Fcoding_system_p (Lisp_Object);
extern Lisp_Object Fcoding_system_plist (Lisp_Object);
extern Lisp_Object Fcoding_system_priority_list (Lisp_Object);
extern Lisp_Object Fcoding_system_put (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fcolor_distance (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fcolor_gray_p (Lisp_Object, Lisp_Object);
extern Lisp_Object Fcolor_supported_p (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fcombine_after_change_execute (void);
extern Lisp_Object Fcommand_error_default_function (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fcommand_remapping (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fcommandp (Lisp_Object, Lisp_Object);
extern Lisp_Object Fcompare_buffer_substrings (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fcompare_strings (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fcompare_window_configurations (Lisp_Object, Lisp_Object);
extern Lisp_Object Fcompleting_read (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fcompose_region_internal (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fcompose_string_internal (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fcomposition_get_gstring (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fcompute_motion (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fconcat (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Fcond (Lisp_Object);
extern Lisp_Object Fcondition_case (Lisp_Object);
extern Lisp_Object Fcondition_mutex (Lisp_Object);
extern Lisp_Object Fcondition_name (Lisp_Object);
extern Lisp_Object Fcondition_notify (Lisp_Object, Lisp_Object);
extern Lisp_Object Fcondition_variable_p (Lisp_Object);
extern Lisp_Object Fcondition_wait (Lisp_Object);
extern Lisp_Object Fcons (Lisp_Object, Lisp_Object);
extern Lisp_Object Fconsp (Lisp_Object) __attribute__ ((__const__));
extern Lisp_Object Fconstrain_to_field (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fcontinue_process (Lisp_Object, Lisp_Object);
extern Lisp_Object Fcontrolling_tty_p (Lisp_Object);
extern Lisp_Object Fcoordinates_in_window_p (Lisp_Object, Lisp_Object);
extern Lisp_Object Fcopy_alist (Lisp_Object);
extern Lisp_Object Fcopy_category_table (Lisp_Object);
extern Lisp_Object Fcopy_file (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fcopy_hash_table (Lisp_Object);
extern Lisp_Object Fcopy_keymap (Lisp_Object);
extern Lisp_Object Fcopy_marker (Lisp_Object, Lisp_Object);
extern Lisp_Object Fcopy_sequence (Lisp_Object);
extern Lisp_Object Fcopy_syntax_table (Lisp_Object);
extern Lisp_Object Fcopysign (Lisp_Object, Lisp_Object);
extern Lisp_Object Fcos (Lisp_Object);
extern Lisp_Object Fcurrent_active_maps (Lisp_Object, Lisp_Object);
extern Lisp_Object Fcurrent_bidi_paragraph_direction (Lisp_Object);
extern Lisp_Object Fcurrent_buffer (void);
extern Lisp_Object Fcurrent_case_table (void);
extern Lisp_Object Fcurrent_column (void);
extern Lisp_Object Fcurrent_global_map (void);
extern Lisp_Object Fcurrent_idle_time (void);
extern Lisp_Object Fcurrent_indentation (void);
extern Lisp_Object Fcurrent_input_mode (void);
extern Lisp_Object Fcurrent_local_map (void);
extern Lisp_Object Fcurrent_message (void);
extern Lisp_Object Fcurrent_minor_mode_maps (void);
extern Lisp_Object Fcurrent_thread (void);
extern Lisp_Object Fcurrent_time (void);
extern Lisp_Object Fcurrent_time_string (Lisp_Object, Lisp_Object);
extern Lisp_Object Fcurrent_time_zone (Lisp_Object, Lisp_Object);
extern Lisp_Object Fcurrent_window_configuration (Lisp_Object);
extern Lisp_Object Fdaemon_initialized (void);
extern Lisp_Object Fdaemonp (void);
extern Lisp_Object Fdbus__init_bus (Lisp_Object, Lisp_Object);
extern Lisp_Object Fdbus_get_unique_name (Lisp_Object);
extern Lisp_Object Fdbus_message_internal (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Fdebug_timer_check (void);
extern Lisp_Object Fdeclare_equiv_charset (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fdecode_big5_char (Lisp_Object);
extern Lisp_Object Fdecode_char (Lisp_Object, Lisp_Object);
extern Lisp_Object Fdecode_coding_region (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fdecode_coding_string (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fdecode_sjis_char (Lisp_Object);
extern Lisp_Object Fdecode_time (Lisp_Object, Lisp_Object);
extern Lisp_Object Fdefalias (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fdefault_boundp (Lisp_Object);
extern Lisp_Object Fdefault_file_modes (void);
extern Lisp_Object Fdefault_toplevel_value (Lisp_Object);
extern Lisp_Object Fdefault_value (Lisp_Object);
extern Lisp_Object Fdefconst (Lisp_Object);
extern Lisp_Object Fdefine_category (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fdefine_charset_alias (Lisp_Object, Lisp_Object);
extern Lisp_Object Fdefine_charset_internal (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Fdefine_coding_system_alias (Lisp_Object, Lisp_Object);
extern Lisp_Object Fdefine_coding_system_internal (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Fdefine_fringe_bitmap (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fdefine_hash_table_test (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fdefine_key (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fdefine_prefix_command (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fdefvar (Lisp_Object);
extern Lisp_Object Fdefvaralias (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fdelete (Lisp_Object, Lisp_Object);
extern Lisp_Object Fdelete_all_overlays (Lisp_Object);
extern Lisp_Object Fdelete_and_extract_region (Lisp_Object, Lisp_Object);
extern Lisp_Object Fdelete_char (Lisp_Object, Lisp_Object);
extern Lisp_Object Fdelete_directory_internal (Lisp_Object);
extern Lisp_Object Fdelete_field (Lisp_Object);
extern Lisp_Object Fdelete_file (Lisp_Object, Lisp_Object);
extern Lisp_Object Fdelete_frame (Lisp_Object, Lisp_Object);
extern Lisp_Object Fdelete_other_windows_internal (Lisp_Object, Lisp_Object);
extern Lisp_Object Fdelete_overlay (Lisp_Object);
extern Lisp_Object Fdelete_process (Lisp_Object);
extern Lisp_Object Fdelete_region (Lisp_Object, Lisp_Object);
extern Lisp_Object Fdelete_terminal (Lisp_Object, Lisp_Object);
extern Lisp_Object Fdelete_window_internal (Lisp_Object);
extern Lisp_Object Fdelq (Lisp_Object, Lisp_Object);
extern Lisp_Object Fdescribe_buffer_bindings (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fdescribe_vector (Lisp_Object, Lisp_Object);
extern Lisp_Object Fdestroy_fringe_bitmap (Lisp_Object);
extern Lisp_Object Fdetect_coding_region (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fdetect_coding_string (Lisp_Object, Lisp_Object);
extern Lisp_Object Fding (Lisp_Object);
extern Lisp_Object Fdirectory_file_name (Lisp_Object);
extern Lisp_Object Fdirectory_files (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fdirectory_files_and_attributes (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fdirectory_name_p (Lisp_Object);
extern Lisp_Object Fdiscard_input (void);
extern Lisp_Object Fdisplay_supports_face_attributes_p (Lisp_Object, Lisp_Object);
extern Lisp_Object Fdo_auto_save (Lisp_Object, Lisp_Object);
extern Lisp_Object Fdocumentation (Lisp_Object, Lisp_Object);
extern Lisp_Object Fdocumentation_property (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fdowncase (Lisp_Object);
extern Lisp_Object Fdowncase_region (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fdowncase_word (Lisp_Object);
extern Lisp_Object Fdraw_string (Lisp_Object, Lisp_Object);
extern Lisp_Object Fdump_colors (void);
extern Lisp_Object Fdump_emacs (Lisp_Object, Lisp_Object);
extern Lisp_Object Fdump_face (Lisp_Object);
extern Lisp_Object Fdump_frame_glyph_matrix (void);
extern Lisp_Object Fdump_glyph_matrix (Lisp_Object);
extern Lisp_Object Fdump_glyph_row (Lisp_Object, Lisp_Object);
extern Lisp_Object Fdump_redisplay_history (void);
extern Lisp_Object Fdump_tool_bar_row (Lisp_Object, Lisp_Object);
extern Lisp_Object Felt (Lisp_Object, Lisp_Object);
extern Lisp_Object Femacs_pid (void);
extern Lisp_Object Fencode_big5_char (Lisp_Object);
extern Lisp_Object Fencode_char (Lisp_Object, Lisp_Object);
extern Lisp_Object Fencode_coding_region (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fencode_coding_string (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fencode_sjis_char (Lisp_Object);
extern Lisp_Object Fencode_time (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Fend_kbd_macro (Lisp_Object, Lisp_Object);
extern Lisp_Object Fend_of_line (Lisp_Object);
extern Lisp_Object Feobp (void);
extern Lisp_Object Feolp (void);
extern Lisp_Object Feq (Lisp_Object, Lisp_Object) __attribute__ ((__const__));
extern Lisp_Object Feql (Lisp_Object, Lisp_Object);
extern Lisp_Object Feqlsign (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Fequal (Lisp_Object, Lisp_Object);
extern Lisp_Object Fequal_including_properties (Lisp_Object, Lisp_Object);
extern Lisp_Object Ferase_buffer (void);
extern Lisp_Object Ferror_message_string (Lisp_Object);
extern Lisp_Object Feval (Lisp_Object, Lisp_Object);
extern Lisp_Object Feval_buffer (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Feval_region (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fevent_convert_list (Lisp_Object);
extern Lisp_Object Fevent_symbol_parse_modifiers (Lisp_Object);
extern Lisp_Object Fexecute_kbd_macro (Lisp_Object, Lisp_Object, Lisp_Object);
_Noreturn extern Lisp_Object Fexit_recursive_edit (void);
extern Lisp_Object Fexp (Lisp_Object);
extern Lisp_Object Fexpand_file_name (Lisp_Object, Lisp_Object);
extern Lisp_Object Fexpt (Lisp_Object, Lisp_Object);
extern Lisp_Object Fexternal_debugging_output (Lisp_Object);
extern Lisp_Object Fface_attribute_relative_p (Lisp_Object, Lisp_Object) __attribute__ ((__const__));
extern Lisp_Object Fface_attributes_as_vector (Lisp_Object);
extern Lisp_Object Fface_font (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Ffboundp (Lisp_Object);
extern Lisp_Object Ffceiling (Lisp_Object);
extern Lisp_Object Ffeaturep (Lisp_Object, Lisp_Object);
extern Lisp_Object Ffetch_bytecode (Lisp_Object);
extern Lisp_Object Fffloor (Lisp_Object);
extern Lisp_Object Ffield_beginning (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Ffield_end (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Ffield_string (Lisp_Object);
extern Lisp_Object Ffield_string_no_properties (Lisp_Object);
extern Lisp_Object Ffile_accessible_directory_p (Lisp_Object);
extern Lisp_Object Ffile_acl (Lisp_Object);
extern Lisp_Object Ffile_attributes (Lisp_Object, Lisp_Object);
extern Lisp_Object Ffile_attributes_lessp (Lisp_Object, Lisp_Object);
extern Lisp_Object Ffile_directory_p (Lisp_Object);
extern Lisp_Object Ffile_executable_p (Lisp_Object);
extern Lisp_Object Ffile_exists_p (Lisp_Object);
extern Lisp_Object Ffile_locked_p (Lisp_Object);
extern Lisp_Object Ffile_modes (Lisp_Object);
extern Lisp_Object Ffile_name_absolute_p (Lisp_Object);
extern Lisp_Object Ffile_name_all_completions (Lisp_Object, Lisp_Object);
extern Lisp_Object Ffile_name_as_directory (Lisp_Object);
extern Lisp_Object Ffile_name_case_insensitive_p (Lisp_Object);
extern Lisp_Object Ffile_name_completion (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Ffile_name_directory (Lisp_Object);
extern Lisp_Object Ffile_name_nondirectory (Lisp_Object);
extern Lisp_Object Ffile_newer_than_file_p (Lisp_Object, Lisp_Object);
extern Lisp_Object Ffile_readable_p (Lisp_Object);
extern Lisp_Object Ffile_regular_p (Lisp_Object);
extern Lisp_Object Ffile_selinux_context (Lisp_Object);
extern Lisp_Object Ffile_symlink_p (Lisp_Object);
extern Lisp_Object Ffile_system_info (Lisp_Object);
extern Lisp_Object Ffile_writable_p (Lisp_Object);
extern Lisp_Object Ffillarray (Lisp_Object, Lisp_Object);
extern Lisp_Object Ffind_charset_region (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Ffind_charset_string (Lisp_Object, Lisp_Object);
extern Lisp_Object Ffind_coding_systems_region_internal (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Ffind_composition_internal (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Ffind_file_name_handler (Lisp_Object, Lisp_Object);
extern Lisp_Object Ffind_font (Lisp_Object, Lisp_Object);
extern Lisp_Object Ffind_operation_coding_system (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Ffloat (Lisp_Object);
extern Lisp_Object Ffloat_time (Lisp_Object);
extern Lisp_Object Ffloatp (Lisp_Object) __attribute__ ((__const__));
extern Lisp_Object Ffloor (Lisp_Object, Lisp_Object);
extern Lisp_Object Ffmakunbound (Lisp_Object);
extern Lisp_Object Ffollowing_char (void);
extern Lisp_Object Ffont_at (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Ffont_drive_otf (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Ffont_face_attributes (Lisp_Object, Lisp_Object);
extern Lisp_Object Ffont_family_list (Lisp_Object);
extern Lisp_Object Ffont_get (Lisp_Object, Lisp_Object);
extern Lisp_Object Ffont_get_glyphs (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Ffont_get_system_font (void);
extern Lisp_Object Ffont_get_system_normal_font (void);
extern Lisp_Object Ffont_info (Lisp_Object, Lisp_Object);
extern Lisp_Object Ffont_match_p (Lisp_Object, Lisp_Object);
extern Lisp_Object Ffont_otf_alternates (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Ffont_put (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Ffont_shape_gstring (Lisp_Object);
extern Lisp_Object Ffont_spec (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Ffont_variation_glyphs (Lisp_Object, Lisp_Object);
extern Lisp_Object Ffont_xlfd_name (Lisp_Object, Lisp_Object);
extern Lisp_Object Ffontp (Lisp_Object, Lisp_Object);
extern Lisp_Object Ffontset_font (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Ffontset_info (Lisp_Object, Lisp_Object);
extern Lisp_Object Ffontset_list (void);
extern Lisp_Object Ffontset_list_all (void);
extern Lisp_Object Fforce_mode_line_update (Lisp_Object);
extern Lisp_Object Fforce_window_update (Lisp_Object);
extern Lisp_Object Fformat (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Fformat_message (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Fformat_mode_line (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fformat_network_address (Lisp_Object, Lisp_Object);
extern Lisp_Object Fformat_time_string (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fforward_char (Lisp_Object);
extern Lisp_Object Fforward_comment (Lisp_Object);
extern Lisp_Object Fforward_line (Lisp_Object);
extern Lisp_Object Fforward_point (Lisp_Object);
extern Lisp_Object Fforward_word (Lisp_Object);
extern Lisp_Object Fframe_after_make_frame (Lisp_Object, Lisp_Object);
extern Lisp_Object Fframe_ancestor_p (Lisp_Object, Lisp_Object);
extern Lisp_Object Fframe_char_height (Lisp_Object);
extern Lisp_Object Fframe_char_width (Lisp_Object);
extern Lisp_Object Fframe_face_alist (Lisp_Object);
extern Lisp_Object Fframe_first_window (Lisp_Object);
extern Lisp_Object Fframe_focus (Lisp_Object);
extern Lisp_Object Fframe_font_cache (Lisp_Object);
extern Lisp_Object Fframe_internal_border_width (Lisp_Object);
extern Lisp_Object Fframe_list (void);
extern Lisp_Object Fframe_live_p (Lisp_Object);
extern Lisp_Object Fframe_native_height (Lisp_Object);
extern Lisp_Object Fframe_native_width (Lisp_Object);
extern Lisp_Object Fframe_or_buffer_changed_p (Lisp_Object);
extern Lisp_Object Fframe_parameter (Lisp_Object, Lisp_Object);
extern Lisp_Object Fframe_parameters (Lisp_Object);
extern Lisp_Object Fframe_parent (Lisp_Object);
extern Lisp_Object Fframe_pointer_visible_p (Lisp_Object);
extern Lisp_Object Fframe_position (Lisp_Object);
extern Lisp_Object Fframe_root_window (Lisp_Object);
extern Lisp_Object Fframe_selected_window (Lisp_Object);
extern Lisp_Object Fframe_terminal (Lisp_Object);
extern Lisp_Object Fframe_text_cols (Lisp_Object);
extern Lisp_Object Fframe_text_height (Lisp_Object);
extern Lisp_Object Fframe_text_lines (Lisp_Object);
extern Lisp_Object Fframe_text_width (Lisp_Object);
extern Lisp_Object Fframe_total_cols (Lisp_Object);
extern Lisp_Object Fframe_total_lines (Lisp_Object);
extern Lisp_Object Fframe_visible_p (Lisp_Object);
extern Lisp_Object Fframe_windows_min_size (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object) __attribute__ ((__const__));
extern Lisp_Object Fframep (Lisp_Object);
extern Lisp_Object Ffrexp (Lisp_Object);
extern Lisp_Object Ffringe_bitmaps_at_pos (Lisp_Object, Lisp_Object);
extern Lisp_Object Ffringe_width (Lisp_Object);
extern Lisp_Object Ffround (Lisp_Object);
extern Lisp_Object Ffset (Lisp_Object, Lisp_Object);
extern Lisp_Object Fftruncate (Lisp_Object);
extern Lisp_Object Ffunc_arity (Lisp_Object);
extern Lisp_Object Ffuncall (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Ffuncall_interactively (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Ffunction (Lisp_Object);
extern Lisp_Object Ffunction_equal (Lisp_Object, Lisp_Object);
extern Lisp_Object Ffunctionp (Lisp_Object);
extern Lisp_Object Fgap_position (void);
extern Lisp_Object Fgap_size (void);
__attribute__((noinline)) extern Lisp_Object Fgarbage_collect (void);
extern Lisp_Object Fgenerate_new_buffer_name (Lisp_Object, Lisp_Object);
extern Lisp_Object Fgeq (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Fget (Lisp_Object, Lisp_Object);
extern Lisp_Object Fget_buffer (Lisp_Object);
extern Lisp_Object Fget_buffer_create (Lisp_Object);
extern Lisp_Object Fget_buffer_process (Lisp_Object);
extern Lisp_Object Fget_buffer_window (Lisp_Object, Lisp_Object);
extern Lisp_Object Fget_byte (Lisp_Object, Lisp_Object);
extern Lisp_Object Fget_char_property (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fget_char_property_and_overlay (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fget_file_buffer (Lisp_Object);
extern Lisp_Object Fget_file_char (void);
extern Lisp_Object Fget_internal_run_time (void);
extern Lisp_Object Fget_load_suffixes (void);
extern Lisp_Object Fget_pos_property (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fget_process (Lisp_Object);
extern Lisp_Object Fget_text_property (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fget_unicode_property_internal (Lisp_Object, Lisp_Object);
extern Lisp_Object Fget_unused_category (Lisp_Object);
extern Lisp_Object Fget_unused_iso_final_char (Lisp_Object, Lisp_Object);
extern Lisp_Object Fget_variable_watchers (Lisp_Object);
extern Lisp_Object Fgetenv_internal (Lisp_Object, Lisp_Object);
extern Lisp_Object Fgethash (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fglobal_key_binding (Lisp_Object, Lisp_Object);
extern Lisp_Object Fgnutls_asynchronous_parameters (Lisp_Object, Lisp_Object);
extern Lisp_Object Fgnutls_available_p (void);
extern Lisp_Object Fgnutls_boot (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fgnutls_bye (Lisp_Object, Lisp_Object);
extern Lisp_Object Fgnutls_ciphers (void);
extern Lisp_Object Fgnutls_deinit (Lisp_Object);
extern Lisp_Object Fgnutls_digests (void);
extern Lisp_Object Fgnutls_error_fatalp (Lisp_Object);
extern Lisp_Object Fgnutls_error_string (Lisp_Object);
extern Lisp_Object Fgnutls_errorp (Lisp_Object) __attribute__ ((__const__));
extern Lisp_Object Fgnutls_get_initstage (Lisp_Object);
extern Lisp_Object Fgnutls_hash_digest (Lisp_Object, Lisp_Object);
extern Lisp_Object Fgnutls_hash_mac (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fgnutls_macs (void);
extern Lisp_Object Fgnutls_peer_status (Lisp_Object);
extern Lisp_Object Fgnutls_peer_status_warning_describe (Lisp_Object);
extern Lisp_Object Fgnutls_symmetric_decrypt (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fgnutls_symmetric_encrypt (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fgoto_char (Lisp_Object);
extern Lisp_Object Fgpm_mouse_start (void);
extern Lisp_Object Fgpm_mouse_stop (void);
extern Lisp_Object Fgroup_gid (void);
extern Lisp_Object Fgroup_real_gid (void);
extern Lisp_Object Fgtr (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Fhandle_save_session (Lisp_Object);
extern Lisp_Object Fhandle_switch_frame (Lisp_Object);
extern Lisp_Object Fhash_table_count (Lisp_Object);
extern Lisp_Object Fhash_table_p (Lisp_Object);
extern Lisp_Object Fhash_table_rehash_size (Lisp_Object);
extern Lisp_Object Fhash_table_rehash_threshold (Lisp_Object);
extern Lisp_Object Fhash_table_size (Lisp_Object);
extern Lisp_Object Fhash_table_test (Lisp_Object);
extern Lisp_Object Fhash_table_weakness (Lisp_Object);
extern Lisp_Object Ficonify_frame (Lisp_Object);
extern Lisp_Object Fidentity (Lisp_Object) __attribute__ ((__const__));
extern Lisp_Object Fif (Lisp_Object);
extern Lisp_Object Fimage_flush (Lisp_Object, Lisp_Object);
extern Lisp_Object Fimage_mask_p (Lisp_Object, Lisp_Object);
extern Lisp_Object Fimage_metadata (Lisp_Object, Lisp_Object);
extern Lisp_Object Fimage_size (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fimagemagick_types (void);
extern Lisp_Object Fimagep (Lisp_Object);
extern Lisp_Object Findent_to (Lisp_Object, Lisp_Object);
extern Lisp_Object Findirect_function (Lisp_Object, Lisp_Object);
extern Lisp_Object Findirect_variable (Lisp_Object);
extern Lisp_Object Finit_image_library (Lisp_Object);
extern Lisp_Object Finotify_add_watch (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Finotify_allocated_p (void);
extern Lisp_Object Finotify_rm_watch (Lisp_Object);
extern Lisp_Object Finotify_valid_p (Lisp_Object);
extern Lisp_Object Finotify_watch_list (void);
extern Lisp_Object Finput_pending_p (Lisp_Object);
extern Lisp_Object Finsert (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Finsert_and_inherit (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Finsert_and_inherit_before_markers (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Finsert_before_markers (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Finsert_buffer_substring (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Finsert_byte (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Finsert_char (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Finsert_file_contents (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Finteger_or_marker_p (Lisp_Object);
extern Lisp_Object Fintegerp (Lisp_Object) __attribute__ ((__const__));
extern Lisp_Object Finteractive (Lisp_Object) __attribute__ ((__const__));
extern Lisp_Object Finteractive_form (Lisp_Object);
extern Lisp_Object Fintern (Lisp_Object, Lisp_Object);
extern Lisp_Object Fintern_soft (Lisp_Object, Lisp_Object);
extern Lisp_Object Finternal_char_font (Lisp_Object, Lisp_Object);
extern Lisp_Object Finternal_complete_buffer (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Finternal_copy_lisp_face (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Finternal_default_interrupt_process (Lisp_Object, Lisp_Object);
extern Lisp_Object Finternal_default_process_filter (Lisp_Object, Lisp_Object);
extern Lisp_Object Finternal_default_process_sentinel (Lisp_Object, Lisp_Object);
extern Lisp_Object Finternal_describe_syntax_value (Lisp_Object);
extern Lisp_Object Finternal_face_x_get_resource (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Finternal_get_lisp_face_attribute (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Finternal_lisp_face_attribute_values (Lisp_Object);
extern Lisp_Object Finternal_lisp_face_empty_p (Lisp_Object, Lisp_Object);
extern Lisp_Object Finternal_lisp_face_equal_p (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Finternal_lisp_face_p (Lisp_Object, Lisp_Object);
extern Lisp_Object Finternal_make_lisp_face (Lisp_Object, Lisp_Object);
extern Lisp_Object Finternal_merge_in_global_face (Lisp_Object, Lisp_Object);
extern Lisp_Object Finternal_set_alternative_font_family_alist (Lisp_Object);
extern Lisp_Object Finternal_set_alternative_font_registry_alist (Lisp_Object);
extern Lisp_Object Finternal_set_font_selection_order (Lisp_Object);
extern Lisp_Object Finternal_set_lisp_face_attribute (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Finternal_set_lisp_face_attribute_from_resource (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Finternal_show_cursor (Lisp_Object, Lisp_Object);
extern Lisp_Object Finternal_show_cursor_p (Lisp_Object);
extern Lisp_Object Finterrupt_process (Lisp_Object, Lisp_Object);
extern Lisp_Object Finvisible_p (Lisp_Object);
extern Lisp_Object Finvocation_directory (void);
extern Lisp_Object Finvocation_name (void);
extern Lisp_Object Fisnan (Lisp_Object);
extern Lisp_Object Fiso_charset (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fkey_binding (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fkey_description (Lisp_Object, Lisp_Object);
extern Lisp_Object Fkeyboard_coding_system (Lisp_Object);
extern Lisp_Object Fkeymap_parent (Lisp_Object);
extern Lisp_Object Fkeymap_prompt (Lisp_Object);
extern Lisp_Object Fkeymapp (Lisp_Object);
extern Lisp_Object Fkeywordp (Lisp_Object);
extern Lisp_Object Fkill_all_local_variables (void);
extern Lisp_Object Fkill_buffer (Lisp_Object);
_Noreturn extern Lisp_Object Fkill_emacs (Lisp_Object);
extern Lisp_Object Fkill_local_variable (Lisp_Object);
extern Lisp_Object Fkill_process (Lisp_Object, Lisp_Object);
extern Lisp_Object Flast_nonminibuf_frame (void);
extern Lisp_Object Flax_plist_get (Lisp_Object, Lisp_Object);
extern Lisp_Object Flax_plist_put (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Flcms2_available_p (void);
extern Lisp_Object Flcms_cam02_ucs (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Flcms_cie_de2000 (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Flcms_jab_to_jch (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Flcms_jch_to_jab (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Flcms_jch_to_xyz (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Flcms_temp_to_white_point (Lisp_Object);
extern Lisp_Object Flcms_xyz_to_jch (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fldexp (Lisp_Object, Lisp_Object);
extern Lisp_Object Flength (Lisp_Object);
extern Lisp_Object Fleq (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Flet (Lisp_Object);
extern Lisp_Object FletX (Lisp_Object);
extern Lisp_Object Flibxml_available_p (void);
extern Lisp_Object Flibxml_parse_html_region (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Flibxml_parse_xml_region (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fline_beginning_position (Lisp_Object);
extern Lisp_Object Fline_end_position (Lisp_Object);
extern Lisp_Object Fline_number_display_width (Lisp_Object);
extern Lisp_Object Fline_pixel_height (void);
extern Lisp_Object Flist (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Flist_fonts (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Flist_system_processes (void);
extern Lisp_Object Flistp (Lisp_Object) __attribute__ ((__const__));
extern Lisp_Object Fload (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fload_average (Lisp_Object);
extern Lisp_Object Flocal_key_binding (Lisp_Object, Lisp_Object);
extern Lisp_Object Flocal_variable_if_set_p (Lisp_Object, Lisp_Object);
extern Lisp_Object Flocal_variable_p (Lisp_Object, Lisp_Object);
extern Lisp_Object Flocale_info (Lisp_Object);
extern Lisp_Object Flocate_file_internal (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Flock_buffer (Lisp_Object);
extern Lisp_Object Flog (Lisp_Object, Lisp_Object);
extern Lisp_Object Flogand (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Flogb (Lisp_Object);
extern Lisp_Object Flogcount (Lisp_Object);
extern Lisp_Object Flogior (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Flognot (Lisp_Object);
extern Lisp_Object Flogxor (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Flooking_at (Lisp_Object);
extern Lisp_Object Flookup_image (Lisp_Object);
extern Lisp_Object Flookup_image_map (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Flookup_key (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Flower_frame (Lisp_Object);
extern Lisp_Object Flread__substitute_object_in_subtree (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Flsh (Lisp_Object, Lisp_Object);
extern Lisp_Object Flss (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Fmacroexpand (Lisp_Object, Lisp_Object);
extern Lisp_Object Fmake_bool_vector (Lisp_Object, Lisp_Object);
extern Lisp_Object Fmake_byte_code (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Fmake_category_set (Lisp_Object);
extern Lisp_Object Fmake_category_table (void);
extern Lisp_Object Fmake_char (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fmake_char_table (Lisp_Object, Lisp_Object);
extern Lisp_Object Fmake_condition_variable (Lisp_Object, Lisp_Object);
extern Lisp_Object Fmake_directory_internal (Lisp_Object);
extern Lisp_Object Fmake_finalizer (Lisp_Object);
extern Lisp_Object Fmake_frame_invisible (Lisp_Object, Lisp_Object);
extern Lisp_Object Fmake_frame_visible (Lisp_Object);
extern Lisp_Object Fmake_hash_table (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Fmake_indirect_buffer (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fmake_keymap (Lisp_Object);
extern Lisp_Object Fmake_list (Lisp_Object, Lisp_Object);
extern Lisp_Object Fmake_local_variable (Lisp_Object);
extern Lisp_Object Fmake_marker (void);
extern Lisp_Object Fmake_mutex (Lisp_Object);
extern Lisp_Object Fmake_network_process (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Fmake_overlay (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fmake_pipe_process (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Fmake_process (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Fmake_record (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fmake_serial_process (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Fmake_sparse_keymap (Lisp_Object);
extern Lisp_Object Fmake_string (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fmake_symbol (Lisp_Object);
extern Lisp_Object Fmake_symbolic_link (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fmake_temp_file_internal (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fmake_temp_name (Lisp_Object);
extern Lisp_Object Fmake_terminal_frame (Lisp_Object);
extern Lisp_Object Fmake_thread (Lisp_Object, Lisp_Object);
extern Lisp_Object Fmake_var_non_special (Lisp_Object);
extern Lisp_Object Fmake_variable_buffer_local (Lisp_Object);
extern Lisp_Object Fmake_vector (Lisp_Object, Lisp_Object);
extern Lisp_Object Fmakunbound (Lisp_Object);
extern Lisp_Object Fmap_char_table (Lisp_Object, Lisp_Object);
extern Lisp_Object Fmap_charset_chars (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fmap_keymap (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fmap_keymap_internal (Lisp_Object, Lisp_Object);
extern Lisp_Object Fmapatoms (Lisp_Object, Lisp_Object);
extern Lisp_Object Fmapbacktrace (Lisp_Object, Lisp_Object);
extern Lisp_Object Fmapc (Lisp_Object, Lisp_Object);
extern Lisp_Object Fmapcan (Lisp_Object, Lisp_Object);
extern Lisp_Object Fmapcar (Lisp_Object, Lisp_Object);
extern Lisp_Object Fmapconcat (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fmaphash (Lisp_Object, Lisp_Object);
extern Lisp_Object Fmark_marker (void);
extern Lisp_Object Fmarker_buffer (Lisp_Object);
extern Lisp_Object Fmarker_insertion_type (Lisp_Object);
extern Lisp_Object Fmarker_position (Lisp_Object);
extern Lisp_Object Fmarkerp (Lisp_Object);
extern Lisp_Object Fmatch_beginning (Lisp_Object);
extern Lisp_Object Fmatch_data (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fmatch_end (Lisp_Object);
extern Lisp_Object Fmatching_paren (Lisp_Object);
extern Lisp_Object Fmax (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Fmax_char (void) __attribute__ ((__const__));
extern Lisp_Object Fmd5 (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fmember (Lisp_Object, Lisp_Object);
extern Lisp_Object Fmemory_info (void);
extern Lisp_Object Fmemory_limit (void);
extern Lisp_Object Fmemory_use_counts (void);
extern Lisp_Object Fmemq (Lisp_Object, Lisp_Object);
extern Lisp_Object Fmemql (Lisp_Object, Lisp_Object);
extern Lisp_Object Fmenu_bar_menu_at_x_y (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fmenu_or_popup_active_p (void);
extern Lisp_Object Fmerge_face_attribute (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fmessage (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Fmessage_box (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Fmessage_or_box (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Fmin (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Fminibuffer_contents (void);
extern Lisp_Object Fminibuffer_contents_no_properties (void);
extern Lisp_Object Fminibuffer_depth (void);
extern Lisp_Object Fminibuffer_prompt (void);
extern Lisp_Object Fminibuffer_prompt_end (void);
extern Lisp_Object Fminibuffer_selected_window (void);
extern Lisp_Object Fminibuffer_window (Lisp_Object);
extern Lisp_Object Fminibufferp (Lisp_Object);
extern Lisp_Object Fminor_mode_key_binding (Lisp_Object, Lisp_Object);
extern Lisp_Object Fminus (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Fmod (Lisp_Object, Lisp_Object);
extern Lisp_Object Fmodify_category_entry (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fmodify_frame_parameters (Lisp_Object, Lisp_Object);
extern Lisp_Object Fmodify_syntax_entry (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fmodule_function_p (Lisp_Object) __attribute__ ((__const__));
extern Lisp_Object Fmouse_pixel_position (void);
extern Lisp_Object Fmouse_position (void);
extern Lisp_Object Fmove_overlay (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fmove_point_visually (Lisp_Object);
extern Lisp_Object Fmove_to_column (Lisp_Object, Lisp_Object);
extern Lisp_Object Fmove_to_window_line (Lisp_Object);
extern Lisp_Object Fmultibyte_char_to_unibyte (Lisp_Object);
extern Lisp_Object Fmultibyte_string_p (Lisp_Object);
extern Lisp_Object Fmutex_lock (Lisp_Object);
extern Lisp_Object Fmutex_name (Lisp_Object);
extern Lisp_Object Fmutex_unlock (Lisp_Object);
extern Lisp_Object Fmutexp (Lisp_Object);
extern Lisp_Object Fnarrow_to_region (Lisp_Object, Lisp_Object);
extern Lisp_Object Fnatnump (Lisp_Object) __attribute__ ((__const__));
extern Lisp_Object Fnconc (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Fneq (Lisp_Object, Lisp_Object);
extern Lisp_Object Fnetwork_interface_info (Lisp_Object);
extern Lisp_Object Fnetwork_interface_list (void);
extern Lisp_Object Fnew_fontset (Lisp_Object, Lisp_Object);
extern Lisp_Object Fnewline_cache_check (Lisp_Object);
extern Lisp_Object Fnext_char_property_change (Lisp_Object, Lisp_Object);
extern Lisp_Object Fnext_frame (Lisp_Object, Lisp_Object);
extern Lisp_Object Fnext_overlay_change (Lisp_Object);
extern Lisp_Object Fnext_property_change (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fnext_read_file_uses_dialog_p (void);
extern Lisp_Object Fnext_single_char_property_change (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fnext_single_property_change (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fnext_window (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fnlistp (Lisp_Object) __attribute__ ((__const__));
extern Lisp_Object Fnreverse (Lisp_Object);
extern Lisp_Object Fnth (Lisp_Object, Lisp_Object);
extern Lisp_Object Fnthcdr (Lisp_Object, Lisp_Object);
extern Lisp_Object Fnull (Lisp_Object) __attribute__ ((__const__));
extern Lisp_Object Fnumber_or_marker_p (Lisp_Object);
extern Lisp_Object Fnumber_to_string (Lisp_Object);
extern Lisp_Object Fnumberp (Lisp_Object) __attribute__ ((__const__));
extern Lisp_Object Fopen_dribble_file (Lisp_Object);
extern Lisp_Object Fopen_font (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fopen_termscript (Lisp_Object);
extern Lisp_Object Foptimize_char_table (Lisp_Object, Lisp_Object);
extern Lisp_Object For (Lisp_Object);
extern Lisp_Object Fother_buffer (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fother_window_for_scrolling (void);
extern Lisp_Object Foverlay_buffer (Lisp_Object);
extern Lisp_Object Foverlay_end (Lisp_Object);
extern Lisp_Object Foverlay_get (Lisp_Object, Lisp_Object);
extern Lisp_Object Foverlay_lists (void);
extern Lisp_Object Foverlay_properties (Lisp_Object);
extern Lisp_Object Foverlay_put (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Foverlay_recenter (Lisp_Object);
extern Lisp_Object Foverlay_start (Lisp_Object);
extern Lisp_Object Foverlayp (Lisp_Object);
extern Lisp_Object Foverlays_at (Lisp_Object, Lisp_Object);
extern Lisp_Object Foverlays_in (Lisp_Object, Lisp_Object);
extern Lisp_Object Fparse_partial_sexp (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fplay_sound_internal (Lisp_Object);
extern Lisp_Object Fplist_get (Lisp_Object, Lisp_Object);
extern Lisp_Object Fplist_member (Lisp_Object, Lisp_Object);
extern Lisp_Object Fplist_put (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fplus (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Fpoint (void);
extern Lisp_Object Fpoint_marker (void);
extern Lisp_Object Fpoint_max (void);
extern Lisp_Object Fpoint_max_marker (void);
extern Lisp_Object Fpoint_min (void);
extern Lisp_Object Fpoint_min_marker (void);
extern Lisp_Object Fpos_visible_in_window_p (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fposition_bytes (Lisp_Object);
extern Lisp_Object Fposix_looking_at (Lisp_Object);
extern Lisp_Object Fposix_search_backward (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fposix_search_forward (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fposix_string_match (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fposn_at_point (Lisp_Object, Lisp_Object);
extern Lisp_Object Fposn_at_x_y (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fprefix_numeric_value (Lisp_Object);
extern Lisp_Object Fprevious_char (void);
extern Lisp_Object Fprevious_char_property_change (Lisp_Object, Lisp_Object);
extern Lisp_Object Fprevious_frame (Lisp_Object, Lisp_Object);
extern Lisp_Object Fprevious_overlay_change (Lisp_Object);
extern Lisp_Object Fprevious_property_change (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fprevious_single_char_property_change (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fprevious_single_property_change (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fprevious_window (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fprin1 (Lisp_Object, Lisp_Object);
extern Lisp_Object Fprin1_to_string (Lisp_Object, Lisp_Object);
extern Lisp_Object Fprinc (Lisp_Object, Lisp_Object);
extern Lisp_Object Fprint (Lisp_Object, Lisp_Object);
extern Lisp_Object Fprint_preprocess (Lisp_Object);
extern Lisp_Object Fprocess_attributes (Lisp_Object);
extern Lisp_Object Fprocess_buffer (Lisp_Object);
extern Lisp_Object Fprocess_coding_system (Lisp_Object);
extern Lisp_Object Fprocess_command (Lisp_Object);
extern Lisp_Object Fprocess_connection (Lisp_Object);
extern Lisp_Object Fprocess_contact (Lisp_Object, Lisp_Object);
extern Lisp_Object Fprocess_datagram_address (Lisp_Object);
extern Lisp_Object Fprocess_exit_status (Lisp_Object);
extern Lisp_Object Fprocess_filter (Lisp_Object);
extern Lisp_Object Fprocess_filter_multibyte_p (Lisp_Object);
extern Lisp_Object Fprocess_id (Lisp_Object);
extern Lisp_Object Fprocess_inherit_coding_system_flag (Lisp_Object);
extern Lisp_Object Fprocess_list (void);
extern Lisp_Object Fprocess_mark (Lisp_Object);
extern Lisp_Object Fprocess_name (Lisp_Object);
extern Lisp_Object Fprocess_plist (Lisp_Object);
extern Lisp_Object Fprocess_query_on_exit_flag (Lisp_Object);
extern Lisp_Object Fprocess_running_child_p (Lisp_Object);
extern Lisp_Object Fprocess_send_eof (Lisp_Object);
extern Lisp_Object Fprocess_send_region (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fprocess_send_string (Lisp_Object, Lisp_Object);
extern Lisp_Object Fprocess_sentinel (Lisp_Object);
extern Lisp_Object Fprocess_status (Lisp_Object);
extern Lisp_Object Fprocess_thread (Lisp_Object);
extern Lisp_Object Fprocess_tty_name (Lisp_Object);
extern Lisp_Object Fprocess_type (Lisp_Object);
extern Lisp_Object Fprocessp (Lisp_Object);
extern Lisp_Object Fprofiler_cpu_log (void);
extern Lisp_Object Fprofiler_cpu_running_p (void);
extern Lisp_Object Fprofiler_cpu_start (Lisp_Object);
extern Lisp_Object Fprofiler_cpu_stop (void);
extern Lisp_Object Fprofiler_memory_log (void);
extern Lisp_Object Fprofiler_memory_running_p (void);
extern Lisp_Object Fprofiler_memory_start (void);
extern Lisp_Object Fprofiler_memory_stop (void);
extern Lisp_Object Fprog1 (Lisp_Object);
extern Lisp_Object Fprog2 (Lisp_Object);
extern Lisp_Object Fprogn (Lisp_Object);
extern Lisp_Object Fpropertize (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Fprovide (Lisp_Object, Lisp_Object);
extern Lisp_Object Fpurecopy (Lisp_Object);
extern Lisp_Object Fput (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fput_text_property (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fput_unicode_property_internal (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fputhash (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fquery_font (Lisp_Object);
extern Lisp_Object Fquery_fontset (Lisp_Object, Lisp_Object);
extern Lisp_Object Fquit_process (Lisp_Object, Lisp_Object);
extern Lisp_Object Fquo (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Fquote (Lisp_Object);
extern Lisp_Object Fraise_frame (Lisp_Object);
extern Lisp_Object Frandom (Lisp_Object);
extern Lisp_Object Frassoc (Lisp_Object, Lisp_Object);
extern Lisp_Object Frassq (Lisp_Object, Lisp_Object);
extern Lisp_Object Fre_search_backward (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fre_search_forward (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fread (Lisp_Object);
extern Lisp_Object Fread_buffer (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fread_char (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fread_char_exclusive (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fread_coding_system (Lisp_Object, Lisp_Object);
extern Lisp_Object Fread_command (Lisp_Object, Lisp_Object);
extern Lisp_Object Fread_event (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fread_from_minibuffer (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fread_from_string (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fread_function (Lisp_Object);
extern Lisp_Object Fread_key_sequence (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fread_key_sequence_vector (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fread_no_blanks_input (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fread_non_nil_coding_system (Lisp_Object);
extern Lisp_Object Fread_string (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fread_variable (Lisp_Object, Lisp_Object);
extern Lisp_Object Frecent_auto_save_p (void);
extern Lisp_Object Frecent_keys (Lisp_Object);
extern Lisp_Object Frecenter (Lisp_Object);
extern Lisp_Object Frecord (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Frecordp (Lisp_Object);
extern Lisp_Object Frecursion_depth (void);
extern Lisp_Object Frecursive_edit (void);
extern Lisp_Object Fredirect_debugging_output (Lisp_Object, Lisp_Object);
extern Lisp_Object Fredirect_frame_focus (Lisp_Object, Lisp_Object);
extern Lisp_Object Fredisplay (Lisp_Object);
extern Lisp_Object Fredraw_display (void);
extern Lisp_Object Fredraw_frame (Lisp_Object);
extern Lisp_Object Fregexp_quote (Lisp_Object);
extern Lisp_Object Fregion_beginning (void);
extern Lisp_Object Fregion_end (void);
extern Lisp_Object Fregister_ccl_program (Lisp_Object, Lisp_Object);
extern Lisp_Object Fregister_code_conversion_map (Lisp_Object, Lisp_Object);
extern Lisp_Object Frem (Lisp_Object, Lisp_Object);
extern Lisp_Object Fremhash (Lisp_Object, Lisp_Object);
extern Lisp_Object Fremove_list_of_text_properties (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fremove_text_properties (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fremove_variable_watcher (Lisp_Object, Lisp_Object);
extern Lisp_Object Frename_buffer (Lisp_Object, Lisp_Object);
extern Lisp_Object Frename_file (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Freplace_buffer_contents (Lisp_Object);
extern Lisp_Object Freplace_match (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Frequire (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fresize_mini_window_internal (Lisp_Object);
extern Lisp_Object Frestore_buffer_modified_p (Lisp_Object);
extern Lisp_Object Fresume_tty (Lisp_Object);
extern Lisp_Object Freverse (Lisp_Object);
extern Lisp_Object Fright_divider_width (Lisp_Object);
extern Lisp_Object Fround (Lisp_Object, Lisp_Object);
extern Lisp_Object Frun_hook_with_args (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Frun_hook_with_args_until_failure (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Frun_hook_with_args_until_success (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Frun_hook_wrapped (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Frun_hooks (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Frun_window_configuration_change_hook (Lisp_Object);
extern Lisp_Object Frun_window_scroll_functions (Lisp_Object);
extern Lisp_Object Fsafe_length (Lisp_Object);
extern Lisp_Object Fsave_current_buffer (Lisp_Object);
extern Lisp_Object Fsave_excursion (Lisp_Object);
extern Lisp_Object Fsave_restriction (Lisp_Object);
extern Lisp_Object Fscan_lists (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fscan_sexps (Lisp_Object, Lisp_Object);
extern Lisp_Object Fscroll_bar_height (Lisp_Object);
extern Lisp_Object Fscroll_bar_width (Lisp_Object);
extern Lisp_Object Fscroll_down (Lisp_Object);
extern Lisp_Object Fscroll_left (Lisp_Object, Lisp_Object);
extern Lisp_Object Fscroll_other_window (Lisp_Object);
extern Lisp_Object Fscroll_right (Lisp_Object, Lisp_Object);
extern Lisp_Object Fscroll_up (Lisp_Object);
extern Lisp_Object Fsearch_backward (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fsearch_forward (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fsecure_hash (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fsecure_hash_algorithms (void);
extern Lisp_Object Fselect_frame (Lisp_Object, Lisp_Object);
extern Lisp_Object Fselect_window (Lisp_Object, Lisp_Object);
extern Lisp_Object Fselected_frame (void);
extern Lisp_Object Fselected_window (void);
extern Lisp_Object Fself_insert_command (Lisp_Object);
extern Lisp_Object Fsend_string_to_terminal (Lisp_Object, Lisp_Object);
extern Lisp_Object Fsequencep (Lisp_Object);
extern Lisp_Object Fserial_process_configure (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Fset (Lisp_Object, Lisp_Object);
extern Lisp_Object Fset__this_command_keys (Lisp_Object);
extern Lisp_Object Fset_binary_mode (Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_buffer (Lisp_Object);
extern Lisp_Object Fset_buffer_auto_saved (void);
extern Lisp_Object Fset_buffer_major_mode (Lisp_Object);
extern Lisp_Object Fset_buffer_modified_p (Lisp_Object);
extern Lisp_Object Fset_buffer_multibyte (Lisp_Object);
extern Lisp_Object Fset_buffer_redisplay (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_case_table (Lisp_Object);
extern Lisp_Object Fset_category_table (Lisp_Object);
extern Lisp_Object Fset_char_table_extra_slot (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_char_table_parent (Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_char_table_range (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_charset_plist (Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_charset_priority (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Fset_coding_system_priority (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Fset_default (Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_default_file_modes (Lisp_Object);
extern Lisp_Object Fset_default_toplevel_value (Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_file_acl (Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_file_modes (Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_file_selinux_context (Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_file_times (Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_fontset_font (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_frame_height (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_frame_position (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_frame_selected_window (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_frame_size (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_frame_width (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_fringe_bitmap_face (Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_input_interrupt_mode (Lisp_Object);
extern Lisp_Object Fset_input_meta_mode (Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_input_mode (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_keyboard_coding_system_internal (Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_keymap_parent (Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_marker (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_marker_insertion_type (Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_match_data (Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_minibuffer_window (Lisp_Object);
extern Lisp_Object Fset_mouse_pixel_position (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_mouse_position (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_network_process_option (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_output_flow_control (Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_process_buffer (Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_process_coding_system (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_process_datagram_address (Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_process_filter (Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_process_filter_multibyte (Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_process_inherit_coding_system_flag (Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_process_plist (Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_process_query_on_exit_flag (Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_process_sentinel (Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_process_thread (Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_process_window_size (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_quit_char (Lisp_Object);
extern Lisp_Object Fset_safe_terminal_coding_system_internal (Lisp_Object);
extern Lisp_Object Fset_standard_case_table (Lisp_Object);
extern Lisp_Object Fset_syntax_table (Lisp_Object);
extern Lisp_Object Fset_terminal_coding_system_internal (Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_terminal_local_value (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_terminal_parameter (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_text_properties (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_time_zone_rule (Lisp_Object);
extern Lisp_Object Fset_visited_file_modtime (Lisp_Object);
extern Lisp_Object Fset_window_buffer (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_window_combination_limit (Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_window_configuration (Lisp_Object);
extern Lisp_Object Fset_window_dedicated_p (Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_window_display_table (Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_window_fringes (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_window_hscroll (Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_window_margins (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_window_new_normal (Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_window_new_pixel (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_window_new_total (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_window_next_buffers (Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_window_parameter (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_window_point (Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_window_prev_buffers (Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_window_redisplay_end_trigger (Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_window_scroll_bars (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_window_start (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_window_vscroll (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fsetcar (Lisp_Object, Lisp_Object);
extern Lisp_Object Fsetcdr (Lisp_Object, Lisp_Object);
extern Lisp_Object Fsetplist (Lisp_Object, Lisp_Object);
extern Lisp_Object Fsetq (Lisp_Object);
extern Lisp_Object Fsetq_default (Lisp_Object);
extern Lisp_Object Fshow_face_resources (void);
_Noreturn extern Lisp_Object Fsignal (Lisp_Object, Lisp_Object);
extern Lisp_Object Fsignal_process (Lisp_Object, Lisp_Object);
extern Lisp_Object Fsin (Lisp_Object);
extern Lisp_Object Fsingle_key_description (Lisp_Object, Lisp_Object);
extern Lisp_Object Fskip_chars_backward (Lisp_Object, Lisp_Object);
extern Lisp_Object Fskip_chars_forward (Lisp_Object, Lisp_Object);
extern Lisp_Object Fskip_syntax_backward (Lisp_Object, Lisp_Object);
extern Lisp_Object Fskip_syntax_forward (Lisp_Object, Lisp_Object);
extern Lisp_Object Fsleep_for (Lisp_Object, Lisp_Object);
extern Lisp_Object Fsnarf_documentation (Lisp_Object);
extern Lisp_Object Fsort (Lisp_Object, Lisp_Object);
extern Lisp_Object Fsort_charsets (Lisp_Object);
extern Lisp_Object Fspecial_variable_p (Lisp_Object);
extern Lisp_Object Fsplit_char (Lisp_Object);
extern Lisp_Object Fsplit_window_internal (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fsqrt (Lisp_Object);
extern Lisp_Object Fstandard_case_table (void);
extern Lisp_Object Fstandard_category_table (void);
extern Lisp_Object Fstandard_syntax_table (void);
extern Lisp_Object Fstart_kbd_macro (Lisp_Object, Lisp_Object);
extern Lisp_Object Fstop_process (Lisp_Object, Lisp_Object);
extern Lisp_Object Fstore_kbd_macro_event (Lisp_Object);
extern Lisp_Object Fstring (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Fstring_as_multibyte (Lisp_Object);
extern Lisp_Object Fstring_as_unibyte (Lisp_Object);
extern Lisp_Object Fstring_bytes (Lisp_Object);
extern Lisp_Object Fstring_collate_equalp (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fstring_collate_lessp (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fstring_distance (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fstring_equal (Lisp_Object, Lisp_Object);
extern Lisp_Object Fstring_lessp (Lisp_Object, Lisp_Object);
extern Lisp_Object Fstring_make_multibyte (Lisp_Object);
extern Lisp_Object Fstring_make_unibyte (Lisp_Object);
extern Lisp_Object Fstring_match (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fstring_to_char (Lisp_Object);
extern Lisp_Object Fstring_to_multibyte (Lisp_Object);
extern Lisp_Object Fstring_to_number (Lisp_Object, Lisp_Object);
extern Lisp_Object Fstring_to_syntax (Lisp_Object);
extern Lisp_Object Fstring_to_unibyte (Lisp_Object);
extern Lisp_Object Fstring_version_lessp (Lisp_Object, Lisp_Object);
extern Lisp_Object Fstring_width (Lisp_Object);
extern Lisp_Object Fstringp (Lisp_Object) __attribute__ ((__const__));
extern Lisp_Object Fsub1 (Lisp_Object);
extern Lisp_Object Fsubr_arity (Lisp_Object);
extern Lisp_Object Fsubr_name (Lisp_Object);
extern Lisp_Object Fsubrp (Lisp_Object);
extern Lisp_Object Fsubst_char_in_region (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fsubstitute_command_keys (Lisp_Object);
extern Lisp_Object Fsubstitute_in_file_name (Lisp_Object);
extern Lisp_Object Fsubstring (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fsubstring_no_properties (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fsuspend_emacs (Lisp_Object);
extern Lisp_Object Fsuspend_tty (Lisp_Object);
extern Lisp_Object Fsuspicious_object (Lisp_Object);
extern Lisp_Object Fsxhash_eq (Lisp_Object);
extern Lisp_Object Fsxhash_eql (Lisp_Object);
extern Lisp_Object Fsxhash_equal (Lisp_Object);
extern Lisp_Object Fsymbol_function (Lisp_Object);
extern Lisp_Object Fsymbol_name (Lisp_Object);
extern Lisp_Object Fsymbol_plist (Lisp_Object);
extern Lisp_Object Fsymbol_value (Lisp_Object);
extern Lisp_Object Fsymbolp (Lisp_Object) __attribute__ ((__const__));
extern Lisp_Object Fsyntax_table (void);
extern Lisp_Object Fsyntax_table_p (Lisp_Object);
extern Lisp_Object Fsystem_groups (void);
extern Lisp_Object Fsystem_name (void);
extern Lisp_Object Fsystem_users (void);
extern Lisp_Object Ftan (Lisp_Object);
extern Lisp_Object Fterminal_coding_system (Lisp_Object);
extern Lisp_Object Fterminal_list (void);
extern Lisp_Object Fterminal_live_p (Lisp_Object);
extern Lisp_Object Fterminal_local_value (Lisp_Object, Lisp_Object);
extern Lisp_Object Fterminal_name (Lisp_Object);
extern Lisp_Object Fterminal_parameter (Lisp_Object, Lisp_Object);
extern Lisp_Object Fterminal_parameters (Lisp_Object);
extern Lisp_Object Fterpri (Lisp_Object, Lisp_Object);
extern Lisp_Object Ftest_completion (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Ftext_char_description (Lisp_Object);
extern Lisp_Object Ftext_properties_at (Lisp_Object, Lisp_Object);
extern Lisp_Object Ftext_property_any (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Ftext_property_not_all (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fthis_command_keys (void);
extern Lisp_Object Fthis_command_keys_vector (void);
extern Lisp_Object Fthis_single_command_keys (void);
extern Lisp_Object Fthis_single_command_raw_keys (void);
extern Lisp_Object Fthread_alive_p (Lisp_Object);
extern Lisp_Object Fthread_blocker (Lisp_Object);
extern Lisp_Object Fthread_join (Lisp_Object);
extern Lisp_Object Fthread_last_error (void);
extern Lisp_Object Fthread_name (Lisp_Object);
extern Lisp_Object Fthread_signal (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fthread_yield (void);
extern Lisp_Object Fthreadp (Lisp_Object);
_Noreturn extern Lisp_Object Fthrow (Lisp_Object, Lisp_Object);
extern Lisp_Object Ftime_add (Lisp_Object, Lisp_Object);
extern Lisp_Object Ftime_less_p (Lisp_Object, Lisp_Object);
extern Lisp_Object Ftime_subtract (Lisp_Object, Lisp_Object);
extern Lisp_Object Ftimes (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Ftool_bar_get_system_style (void);
extern Lisp_Object Ftool_bar_height (Lisp_Object, Lisp_Object);
extern Lisp_Object Ftool_bar_pixel_width (Lisp_Object);
_Noreturn extern Lisp_Object Ftop_level (void);
extern Lisp_Object Ftrace_redisplay (Lisp_Object);
extern Lisp_Object Ftrace_to_stderr (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Ftrack_mouse (Lisp_Object);
extern Lisp_Object Ftranslate_region_internal (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Ftranspose_regions (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Ftruncate (Lisp_Object, Lisp_Object);
extern Lisp_Object Ftry_completion (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Ftty_display_color_cells (Lisp_Object);
extern Lisp_Object Ftty_display_color_p (Lisp_Object);
extern Lisp_Object Ftty_no_underline (Lisp_Object);
extern Lisp_Object Ftty_suppress_bold_inverse_default_colors (Lisp_Object);
extern Lisp_Object Ftty_top_frame (Lisp_Object);
extern Lisp_Object Ftty_type (Lisp_Object);
extern Lisp_Object Ftype_of (Lisp_Object);
extern Lisp_Object Fundo_boundary (void);
extern Lisp_Object Funencodable_char_position (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Funhandled_file_name_directory (Lisp_Object);
extern Lisp_Object Funibyte_char_to_multibyte (Lisp_Object);
extern Lisp_Object Funibyte_string (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Funicode_property_table_internal (Lisp_Object);
extern Lisp_Object Funify_charset (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Funintern (Lisp_Object, Lisp_Object);
extern Lisp_Object Funix_sync (void);
extern Lisp_Object Funlock_buffer (void);
extern Lisp_Object Funwind_protect (Lisp_Object);
extern Lisp_Object Fupcase (Lisp_Object);
extern Lisp_Object Fupcase_initials (Lisp_Object);
extern Lisp_Object Fupcase_initials_region (Lisp_Object, Lisp_Object);
extern Lisp_Object Fupcase_region (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fupcase_word (Lisp_Object);
extern Lisp_Object Fuse_global_map (Lisp_Object);
extern Lisp_Object Fuse_local_map (Lisp_Object);
extern Lisp_Object Fuser_full_name (Lisp_Object);
extern Lisp_Object Fuser_login_name (Lisp_Object);
extern Lisp_Object Fuser_ptrp (Lisp_Object);
extern Lisp_Object Fuser_real_login_name (void);
extern Lisp_Object Fuser_real_uid (void);
extern Lisp_Object Fuser_uid (void);
extern Lisp_Object Fvariable_binding_locus (Lisp_Object);
extern Lisp_Object Fvconcat (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Fvector (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Fvector_or_char_table_p (Lisp_Object);
extern Lisp_Object Fvectorp (Lisp_Object);
extern Lisp_Object Fverify_visited_file_modtime (Lisp_Object);
extern Lisp_Object Fvertical_motion (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fvisible_frame_list (void);
extern Lisp_Object Fvisited_file_modtime (void);
extern Lisp_Object Fwaiting_for_user_input_p (void);
extern Lisp_Object Fwhere_is_internal (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fwhile (Lisp_Object);
extern Lisp_Object Fwiden (void);
extern Lisp_Object Fwidget_apply (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Fwidget_get (Lisp_Object, Lisp_Object);
extern Lisp_Object Fwidget_put (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fwindow_at (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fwindow_body_height (Lisp_Object, Lisp_Object);
extern Lisp_Object Fwindow_body_width (Lisp_Object, Lisp_Object);
extern Lisp_Object Fwindow_bottom_divider_width (Lisp_Object);
extern Lisp_Object Fwindow_buffer (Lisp_Object);
extern Lisp_Object Fwindow_combination_limit (Lisp_Object);
extern Lisp_Object Fwindow_configuration_frame (Lisp_Object);
extern Lisp_Object Fwindow_configuration_p (Lisp_Object);
extern Lisp_Object Fwindow_dedicated_p (Lisp_Object);
extern Lisp_Object Fwindow_display_table (Lisp_Object);
extern Lisp_Object Fwindow_end (Lisp_Object, Lisp_Object);
extern Lisp_Object Fwindow_frame (Lisp_Object);
extern Lisp_Object Fwindow_fringes (Lisp_Object);
extern Lisp_Object Fwindow_header_line_height (Lisp_Object);
extern Lisp_Object Fwindow_hscroll (Lisp_Object);
extern Lisp_Object Fwindow_left_child (Lisp_Object);
extern Lisp_Object Fwindow_left_column (Lisp_Object);
extern Lisp_Object Fwindow_line_height (Lisp_Object, Lisp_Object);
extern Lisp_Object Fwindow_lines_pixel_dimensions (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fwindow_list (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fwindow_list_1 (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fwindow_live_p (Lisp_Object);
extern Lisp_Object Fwindow_margins (Lisp_Object);
extern Lisp_Object Fwindow_minibuffer_p (Lisp_Object);
extern Lisp_Object Fwindow_mode_line_height (Lisp_Object);
extern Lisp_Object Fwindow_new_normal (Lisp_Object);
extern Lisp_Object Fwindow_new_pixel (Lisp_Object);
extern Lisp_Object Fwindow_new_total (Lisp_Object);
extern Lisp_Object Fwindow_next_buffers (Lisp_Object);
extern Lisp_Object Fwindow_next_sibling (Lisp_Object);
extern Lisp_Object Fwindow_normal_size (Lisp_Object, Lisp_Object);
extern Lisp_Object Fwindow_old_point (Lisp_Object);
extern Lisp_Object Fwindow_parameter (Lisp_Object, Lisp_Object);
extern Lisp_Object Fwindow_parameters (Lisp_Object);
extern Lisp_Object Fwindow_parent (Lisp_Object);
extern Lisp_Object Fwindow_pixel_height (Lisp_Object);
extern Lisp_Object Fwindow_pixel_height_before_size_change (Lisp_Object);
extern Lisp_Object Fwindow_pixel_left (Lisp_Object);
extern Lisp_Object Fwindow_pixel_top (Lisp_Object);
extern Lisp_Object Fwindow_pixel_width (Lisp_Object);
extern Lisp_Object Fwindow_pixel_width_before_size_change (Lisp_Object);
extern Lisp_Object Fwindow_point (Lisp_Object);
extern Lisp_Object Fwindow_prev_buffers (Lisp_Object);
extern Lisp_Object Fwindow_prev_sibling (Lisp_Object);
extern Lisp_Object Fwindow_redisplay_end_trigger (Lisp_Object);
extern Lisp_Object Fwindow_resize_apply (Lisp_Object, Lisp_Object);
extern Lisp_Object Fwindow_resize_apply_total (Lisp_Object, Lisp_Object);
extern Lisp_Object Fwindow_right_divider_width (Lisp_Object);
extern Lisp_Object Fwindow_scroll_bar_height (Lisp_Object);
extern Lisp_Object Fwindow_scroll_bar_width (Lisp_Object);
extern Lisp_Object Fwindow_scroll_bars (Lisp_Object);
extern Lisp_Object Fwindow_start (Lisp_Object);
extern Lisp_Object Fwindow_system (Lisp_Object);
extern Lisp_Object Fwindow_text_height (Lisp_Object, Lisp_Object);
extern Lisp_Object Fwindow_text_pixel_size (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fwindow_text_width (Lisp_Object, Lisp_Object);
extern Lisp_Object Fwindow_top_child (Lisp_Object);
extern Lisp_Object Fwindow_top_line (Lisp_Object);
extern Lisp_Object Fwindow_total_height (Lisp_Object, Lisp_Object);
extern Lisp_Object Fwindow_total_width (Lisp_Object, Lisp_Object);
extern Lisp_Object Fwindow_use_time (Lisp_Object);
extern Lisp_Object Fwindow_valid_p (Lisp_Object);
extern Lisp_Object Fwindow_vscroll (Lisp_Object, Lisp_Object);
extern Lisp_Object Fwindowp (Lisp_Object);
extern Lisp_Object Fwrite_char (Lisp_Object, Lisp_Object);
extern Lisp_Object Fwrite_region (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fx_backspace_delete_keys_p (Lisp_Object);
extern Lisp_Object Fx_change_window_property (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fx_close_connection (Lisp_Object);
extern Lisp_Object Fx_create_frame (Lisp_Object);
extern Lisp_Object Fx_delete_window_property (Lisp_Object, Lisp_Object);
extern Lisp_Object Fx_disown_selection_internal (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fx_display_backing_store (Lisp_Object);
extern Lisp_Object Fx_display_color_cells (Lisp_Object);
extern Lisp_Object Fx_display_grayscale_p (Lisp_Object);
extern Lisp_Object Fx_display_list (void);
extern Lisp_Object Fx_display_mm_height (Lisp_Object);
extern Lisp_Object Fx_display_mm_width (Lisp_Object);
extern Lisp_Object Fx_display_monitor_attributes_list (Lisp_Object);
extern Lisp_Object Fx_display_pixel_height (Lisp_Object);
extern Lisp_Object Fx_display_pixel_width (Lisp_Object);
extern Lisp_Object Fx_display_planes (Lisp_Object);
extern Lisp_Object Fx_display_save_under (Lisp_Object);
extern Lisp_Object Fx_display_screens (Lisp_Object);
extern Lisp_Object Fx_display_visual_class (Lisp_Object);
extern Lisp_Object Fx_double_buffered_p (Lisp_Object);
extern Lisp_Object Fx_export_frames (Lisp_Object, Lisp_Object);
extern Lisp_Object Fx_family_fonts (Lisp_Object, Lisp_Object);
extern Lisp_Object Fx_file_dialog (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fx_focus_frame (Lisp_Object, Lisp_Object);
extern Lisp_Object Fx_frame_edges (Lisp_Object, Lisp_Object);
extern Lisp_Object Fx_frame_geometry (Lisp_Object);
extern Lisp_Object Fx_frame_list_z_order (Lisp_Object);
extern Lisp_Object Fx_frame_restack (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fx_get_atom_name (Lisp_Object, Lisp_Object);
extern Lisp_Object Fx_get_page_setup (void);
extern Lisp_Object Fx_get_resource (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fx_get_selection_internal (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fx_hide_tip (void);
extern Lisp_Object Fx_list_fonts (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fx_load_color_file (Lisp_Object);
extern Lisp_Object Fx_menu_bar_open_internal (Lisp_Object);
extern Lisp_Object Fx_mouse_absolute_pixel_position (void);
extern Lisp_Object Fx_open_connection (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fx_own_selection_internal (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fx_page_setup_dialog (void);
extern Lisp_Object Fx_parse_geometry (Lisp_Object);
extern Lisp_Object Fx_popup_dialog (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fx_popup_menu (Lisp_Object, Lisp_Object);
extern Lisp_Object Fx_print_frames_dialog (Lisp_Object);
extern Lisp_Object Fx_register_dnd_atom (Lisp_Object, Lisp_Object);
extern Lisp_Object Fx_select_font (Lisp_Object, Lisp_Object);
extern Lisp_Object Fx_selection_exists_p (Lisp_Object, Lisp_Object);
extern Lisp_Object Fx_selection_owner_p (Lisp_Object, Lisp_Object);
extern Lisp_Object Fx_send_client_message (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fx_server_max_request_size (Lisp_Object);
extern Lisp_Object Fx_server_vendor (Lisp_Object);
extern Lisp_Object Fx_server_version (Lisp_Object);
extern Lisp_Object Fx_set_mouse_absolute_pixel_position (Lisp_Object, Lisp_Object);
extern Lisp_Object Fx_show_tip (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fx_synchronize (Lisp_Object, Lisp_Object);
extern Lisp_Object Fx_uses_old_gtk_dialog (void);
extern Lisp_Object Fx_window_property (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fx_window_property_attributes (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fx_wm_set_size_hint (Lisp_Object);
extern Lisp_Object Fxw_color_defined_p (Lisp_Object, Lisp_Object);
extern Lisp_Object Fxw_color_values (Lisp_Object, Lisp_Object);
extern Lisp_Object Fxw_display_color_p (Lisp_Object);
extern Lisp_Object Fyes_or_no_p (Lisp_Object);
extern Lisp_Object Fzlib_available_p (void);
extern Lisp_Object Fzlib_decompress_region (Lisp_Object, Lisp_Object);
union vectorlike_header
  {
    ptrdiff_t size;
    char 
        _Alignas 
                (8) gcaligned;
  };
_Static_assert (
_Alignof 
(union vectorlike_header) % 8 == 0, "verify (" "alignof (union vectorlike_header) % GCALIGNMENT == 0" ")");
inline 
      _Bool
(SYMBOLP) (Lisp_Object x)
{
  return (XTYPE (x) == Lisp_Symbol);
}
inline struct Lisp_Symbol *
(XSYMBOL) (Lisp_Object a)
{
  return (((void) (
        0 
        && (SYMBOLP (a)))), (struct Lisp_Symbol *) ((intptr_t) XLI (a) - Lisp_Symbol + (char *) lispsym));
}
inline Lisp_Object
make_lisp_symbol (struct Lisp_Symbol *sym)
{
  char *symoffset = (char *) ((char *) sym - (char *) lispsym);
  Lisp_Object a = ((Lisp_Word) ((untagged_ptr) (symoffset) + ((Lisp_Word_tag) (Lisp_Symbol) << (((0x7fffffffffffffffL >> (3 - 1)) / 2 < 
                 (9223372036854775807L)
                 ) ? 0 : VALBITS))));
  ((void) (
 0 
 && (XSYMBOL (a) == sym)));
  return a;
}
inline Lisp_Object
builtin_lisp_symbol (int index)
{
  return make_lisp_symbol (&lispsym[index]);
}
inline void
(CHECK_SYMBOL) (Lisp_Object x)
{
  CHECK_TYPE (SYMBOLP (x), builtin_lisp_symbol (1023), x);
}
extern ptrdiff_t const ARRAY_MARK_FLAG __attribute__((externally_visible))
;
extern ptrdiff_t const PSEUDOVECTOR_FLAG __attribute__((externally_visible))
;
enum pvec_type
{
  PVEC_NORMAL_VECTOR,
  PVEC_FREE,
  PVEC_PROCESS,
  PVEC_FRAME,
  PVEC_WINDOW,
  PVEC_BOOL_VECTOR,
  PVEC_BUFFER,
  PVEC_HASH_TABLE,
  PVEC_TERMINAL,
  PVEC_WINDOW_CONFIGURATION,
  PVEC_SUBR,
  PVEC_OTHER,
  PVEC_XWIDGET,
  PVEC_XWIDGET_VIEW,
  PVEC_THREAD,
  PVEC_MUTEX,
  PVEC_CONDVAR,
  PVEC_MODULE_FUNCTION,
  PVEC_COMPILED,
  PVEC_CHAR_TABLE,
  PVEC_SUB_CHAR_TABLE,
  PVEC_RECORD,
  PVEC_FONT
};
enum More_Lisp_Bits
  {
    PSEUDOVECTOR_SIZE_BITS = 12,
    PSEUDOVECTOR_SIZE_MASK = (1 << PSEUDOVECTOR_SIZE_BITS) - 1,
    PSEUDOVECTOR_REST_BITS = 12,
    PSEUDOVECTOR_REST_MASK = (((1 << PSEUDOVECTOR_REST_BITS) - 1)
         << PSEUDOVECTOR_SIZE_BITS),
    PSEUDOVECTOR_AREA_BITS = PSEUDOVECTOR_SIZE_BITS + PSEUDOVECTOR_REST_BITS,
    PVEC_TYPE_MASK = 0x3f << PSEUDOVECTOR_AREA_BITS
  };
inline Lisp_Object
(make_number) (EMACS_INT n)
{
  return XIL ((EMACS_INT) (((EMACS_UINT) (n) << INTTYPEBITS) + Lisp_Int0));
}
inline EMACS_INT
(XINT) (Lisp_Object a)
{
  return (XLI (a) >> INTTYPEBITS);
}
inline EMACS_INT
(XFASTINT) (Lisp_Object a)
{
  EMACS_INT n = XINT (a);
  ((0 <= n) ? (void) 0 : __builtin_unreachable ());
  return n;
}
inline EMACS_UINT
XUINT (Lisp_Object a)
{
  EMACS_UINT i = XLI (a);
  return ((0x7fffffffffffffffL >> (3 - 1)) / 2 < 
        (9223372036854775807L)
        ) ? i >> INTTYPEBITS : i & (0x7fffffffffffffffL >> (INTTYPEBITS - 1));
}
inline EMACS_INT
(XHASH) (Lisp_Object a)
{
  return XUINT (a);
}
inline Lisp_Object
make_natnum (EMACS_INT n)
{
  ((void) (
 0 
 && (0 <= n && n <= (0x7fffffffffffffffL >> INTTYPEBITS))));
  EMACS_INT int0 = Lisp_Int0;
  return ((0x7fffffffffffffffL >> (3 - 1)) / 2 < 
        (9223372036854775807L)
        ) ? make_number (n) : XIL (n + (int0 << VALBITS));
}
inline 
      _Bool
(EQ) (Lisp_Object x, Lisp_Object y)
{
  return (XLI (x) == XLI (y));
}
inline ptrdiff_t
clip_to_bounds (ptrdiff_t lower, EMACS_INT num, ptrdiff_t upper)
{
  return num < lower ? lower : num <= upper ? num : upper;
}
inline Lisp_Object
make_lisp_ptr (void *ptr, enum Lisp_Type type)
{
  Lisp_Object a = ((Lisp_Word) ((untagged_ptr) (ptr) + ((Lisp_Word_tag) (type) << (((0x7fffffffffffffffL >> (3 - 1)) / 2 < 
                 (9223372036854775807L)
                 ) ? 0 : VALBITS))));
  ((void) (
 0 
 && (XTYPE (a) == type && XUNTAG (a, type) == ptr)));
  return a;
}
inline 
      _Bool
(INTEGERP) (Lisp_Object x)
{
  return ((XTYPE (x) & (Lisp_Int0 | ~Lisp_Int1)) == Lisp_Int0);
}
inline void *
XINTPTR (Lisp_Object a)
{
  return XUNTAG (a, Lisp_Int0);
}
inline Lisp_Object
make_pointer_integer (void *p)
{
  Lisp_Object a = ((Lisp_Word) ((untagged_ptr) (p) + ((Lisp_Word_tag) (Lisp_Int0) << (((0x7fffffffffffffffL >> (3 - 1)) / 2 < 
                 (9223372036854775807L)
                 ) ? 0 : VALBITS))));
  ((void) (
 0 
 && (INTEGERP (a) && XINTPTR (a) == p)));
  return a;
}
typedef struct interval *INTERVAL;
struct Lisp_Cons
{
  union
  {
    struct
    {
      Lisp_Object car;
      union
      {
 Lisp_Object cdr;
 struct Lisp_Cons *chain;
      } u;
    } s;
    char 
        _Alignas 
                (8) gcaligned;
  } u;
};
_Static_assert (
_Alignof 
(struct Lisp_Cons) % 8 == 0, "verify (" "alignof (struct Lisp_Cons) % GCALIGNMENT == 0" ")");
inline 
      _Bool
(NILP) (Lisp_Object x)
{
  return EQ (x, builtin_lisp_symbol (0));
}
inline 
      _Bool
(CONSP) (Lisp_Object x)
{
  return (XTYPE (x) == Lisp_Cons);
}
inline void
CHECK_CONS (Lisp_Object x)
{
  CHECK_TYPE (CONSP (x), builtin_lisp_symbol (350), x);
}
inline struct Lisp_Cons *
(XCONS) (Lisp_Object a)
{
  return (((void) (
        0 
        && (CONSP (a)))), (struct Lisp_Cons *) XUNTAG (a, Lisp_Cons));
}
inline Lisp_Object *
xcar_addr (Lisp_Object c)
{
  return &XCONS (c)->u.s.car;
}
inline Lisp_Object *
xcdr_addr (Lisp_Object c)
{
  return &XCONS (c)->u.s.u.cdr;
}
inline Lisp_Object
(XCAR) (Lisp_Object c)
{
  return XCONS (c)->u.s.car;
}
inline Lisp_Object
(XCDR) (Lisp_Object c)
{
  return XCONS (c)->u.s.u.cdr;
}
inline void
XSETCAR (Lisp_Object c, Lisp_Object n)
{
  *xcar_addr (c) = n;
}
inline void
XSETCDR (Lisp_Object c, Lisp_Object n)
{
  *xcdr_addr (c) = n;
}
inline Lisp_Object
CAR (Lisp_Object c)
{
  if (CONSP (c))
    return XCAR (c);
  if (!NILP (c))
    wrong_type_argument (builtin_lisp_symbol (719), c);
  return builtin_lisp_symbol (0);
}
inline Lisp_Object
CDR (Lisp_Object c)
{
  if (CONSP (c))
    return XCDR (c);
  if (!NILP (c))
    wrong_type_argument (builtin_lisp_symbol (719), c);
  return builtin_lisp_symbol (0);
}
inline Lisp_Object
CAR_SAFE (Lisp_Object c)
{
  return CONSP (c) ? XCAR (c) : builtin_lisp_symbol (0);
}
inline Lisp_Object
CDR_SAFE (Lisp_Object c)
{
  return CONSP (c) ? XCDR (c) : builtin_lisp_symbol (0);
}
struct Lisp_String
{
  union
  {
    struct
    {
      ptrdiff_t size;
      ptrdiff_t size_byte;
      INTERVAL intervals;
      unsigned char *data;
    } s;
    struct Lisp_String *next;
    char 
        _Alignas 
                (8) gcaligned;
  } u;
};
_Static_assert (
_Alignof 
(struct Lisp_String) % 8 == 0, "verify (" "alignof (struct Lisp_String) % GCALIGNMENT == 0" ")");
inline 
      _Bool
STRINGP (Lisp_Object x)
{
  return XTYPE (x) == Lisp_String;
}
inline void
CHECK_STRING (Lisp_Object x)
{
  CHECK_TYPE (STRINGP (x), builtin_lisp_symbol (1011), x);
}
inline struct Lisp_String *
XSTRING (Lisp_Object a)
{
  ((void) (
 0 
 && (STRINGP (a))));
  return XUNTAG (a, Lisp_String);
}
inline 
      _Bool
STRING_MULTIBYTE (Lisp_Object str)
{
  return 0 <= XSTRING (str)->u.s.size_byte;
}
inline unsigned char *
SDATA (Lisp_Object string)
{
  return XSTRING (string)->u.s.data;
}
inline char *
SSDATA (Lisp_Object string)
{
  return (char *) SDATA (string);
}
inline unsigned char
SREF (Lisp_Object string, ptrdiff_t index)
{
  return SDATA (string)[index];
}
inline void
SSET (Lisp_Object string, ptrdiff_t index, unsigned char new)
{
  SDATA (string)[index] = new;
}
inline ptrdiff_t
SCHARS (Lisp_Object string)
{
  ptrdiff_t nchars = XSTRING (string)->u.s.size;
  ((0 <= nchars) ? (void) 0 : __builtin_unreachable ());
  return nchars;
}
inline ptrdiff_t
STRING_BYTES (struct Lisp_String *s)
{
  ptrdiff_t nbytes = s->u.s.size_byte < 0 ? s->u.s.size : s->u.s.size_byte;
  ((0 <= nbytes) ? (void) 0 : __builtin_unreachable ());
  return nbytes;
}
inline ptrdiff_t
SBYTES (Lisp_Object string)
{
  return STRING_BYTES (XSTRING (string));
}
inline void
STRING_SET_CHARS (Lisp_Object string, ptrdiff_t newsize)
{
  ((void) (
 0 
 && (STRING_MULTIBYTE (string) ? 0 <= newsize && newsize <= SBYTES (string) : newsize == SCHARS (string))))
                                 ;
  XSTRING (string)->u.s.size = newsize;
}
struct Lisp_Vector
  {
    union vectorlike_header header;
    Lisp_Object contents[];
  };
inline 
      _Bool
(VECTORLIKEP) (Lisp_Object x)
{
  return (XTYPE (x) == Lisp_Vectorlike);
}
inline struct Lisp_Vector *
XVECTOR (Lisp_Object a)
{
  ((void) (
 0 
 && (VECTORLIKEP (a))));
  return XUNTAG (a, Lisp_Vectorlike);
}
inline ptrdiff_t
ASIZE (Lisp_Object array)
{
  ptrdiff_t size = XVECTOR (array)->header.size;
  ((0 <= size) ? (void) 0 : __builtin_unreachable ());
  return size;
}
inline ptrdiff_t
PVSIZE (Lisp_Object pv)
{
  return ASIZE (pv) & PSEUDOVECTOR_SIZE_MASK;
}
inline 
      _Bool
VECTORP (Lisp_Object x)
{
  return VECTORLIKEP (x) && ! (ASIZE (x) & (
                                          (9223372036854775807L) 
                                          - 
                                          (9223372036854775807L) 
                                          / 2));
}
inline void
CHECK_VECTOR (Lisp_Object x)
{
  CHECK_TYPE (VECTORP (x), builtin_lisp_symbol (1135), x);
}
inline enum pvec_type
PSEUDOVECTOR_TYPE (struct Lisp_Vector *v)
{
  ptrdiff_t size = v->header.size;
  return (size & (
                (9223372036854775807L) 
                - 
                (9223372036854775807L) 
                / 2)
          ? (size & PVEC_TYPE_MASK) >> PSEUDOVECTOR_AREA_BITS
          : PVEC_NORMAL_VECTOR);
}
inline 
      _Bool
PSEUDOVECTOR_TYPEP (union vectorlike_header *a, enum pvec_type code)
{
  return ((a->size & ((
                     (9223372036854775807L) 
                     - 
                     (9223372036854775807L) 
                     / 2) | PVEC_TYPE_MASK))
   == ((
      (9223372036854775807L) 
      - 
      (9223372036854775807L) 
      / 2) | (code << PSEUDOVECTOR_AREA_BITS)));
}
inline 
      _Bool
PSEUDOVECTORP (Lisp_Object a, int code)
{
  if (! VECTORLIKEP (a))
    return 
          0
               ;
  else
    {
      union vectorlike_header *h = XUNTAG (a, Lisp_Vectorlike);
      return PSEUDOVECTOR_TYPEP (h, code);
    }
}
struct Lisp_Bool_Vector
  {
    union vectorlike_header header;
    EMACS_INT size;
    bits_word data[];
  };
enum
  {
    header_size = 
                 __builtin_offsetof (
                 struct Lisp_Vector
                 , 
                 contents
                 )
                                                        ,
    bool_header_size = 
                      __builtin_offsetof (
                      struct Lisp_Bool_Vector
                      , 
                      data
                      )
                                                              ,
    word_size = sizeof (Lisp_Object)
  };
inline EMACS_INT
bool_vector_words (EMACS_INT size)
{
  ((0 <= size && size <= 0x7fffffffffffffffL - (BITS_PER_BITS_WORD - 1)) ? (void) 0 : __builtin_unreachable ());
  return (size + BITS_PER_BITS_WORD - 1) / BITS_PER_BITS_WORD;
}
inline EMACS_INT
bool_vector_bytes (EMACS_INT size)
{
  ((0 <= size && size <= 0x7fffffffffffffffL - (BITS_PER_BITS_WORD - 1)) ? (void) 0 : __builtin_unreachable ());
  return (size + 8 - 1) / 8;
}
inline 
      _Bool
BOOL_VECTOR_P (Lisp_Object a)
{
  return PSEUDOVECTORP (a, PVEC_BOOL_VECTOR);
}
inline void
CHECK_BOOL_VECTOR (Lisp_Object x)
{
  CHECK_TYPE (BOOL_VECTOR_P (x), builtin_lisp_symbol (251), x);
}
inline struct Lisp_Bool_Vector *
XBOOL_VECTOR (Lisp_Object a)
{
  ((void) (
 0 
 && (BOOL_VECTOR_P (a))));
  return XUNTAG (a, Lisp_Vectorlike);
}
inline EMACS_INT
bool_vector_size (Lisp_Object a)
{
  EMACS_INT size = XBOOL_VECTOR (a)->size;
  ((0 <= size) ? (void) 0 : __builtin_unreachable ());
  return size;
}
inline bits_word *
bool_vector_data (Lisp_Object a)
{
  return XBOOL_VECTOR (a)->data;
}
inline unsigned char *
bool_vector_uchar_data (Lisp_Object a)
{
  return (unsigned char *) bool_vector_data (a);
}
inline 
      _Bool
bool_vector_bitref (Lisp_Object a, EMACS_INT i)
{
  ((0 <= i && i < bool_vector_size (a)) ? (void) 0 : __builtin_unreachable ());
  return !! (bool_vector_uchar_data (a)[i / 8]
      & (1 << (i % 8)));
}
inline Lisp_Object
bool_vector_ref (Lisp_Object a, EMACS_INT i)
{
  return bool_vector_bitref (a, i) ? builtin_lisp_symbol (1028) : builtin_lisp_symbol (0);
}
inline void
bool_vector_set (Lisp_Object a, EMACS_INT i, 
                                            _Bool 
                                                 b)
{
  unsigned char *addr;
  ((0 <= i && i < bool_vector_size (a)) ? (void) 0 : __builtin_unreachable ());
  addr = &bool_vector_uchar_data (a)[i / 8];
  if (b)
    *addr |= 1 << (i % 8);
  else
    *addr &= ~ (1 << (i % 8));
}
inline Lisp_Object
AREF (Lisp_Object array, ptrdiff_t idx)
{
  return XVECTOR (array)->contents[idx];
}
inline Lisp_Object *
aref_addr (Lisp_Object array, ptrdiff_t idx)
{
  return & XVECTOR (array)->contents[idx];
}
inline ptrdiff_t
gc_asize (Lisp_Object array)
{
  return XVECTOR (array)->header.size & ~
                                        (-9223372036854775807L-1)
                                                       ;
}
inline void
ASET (Lisp_Object array, ptrdiff_t idx, Lisp_Object val)
{
  ((void) (
 0 
 && (0 <= idx && idx < ASIZE (array))));
  XVECTOR (array)->contents[idx] = val;
}
inline void
gc_aset (Lisp_Object array, ptrdiff_t idx, Lisp_Object val)
{
  ((void) (
 0 
 && (0 <= idx && idx < gc_asize (array))));
  XVECTOR (array)->contents[idx] = val;
}
enum { NIL_IS_ZERO = 0 == 0 && Lisp_Symbol == 0 };
inline void
memclear (void *p, ptrdiff_t nbytes)
{
  ((void) (
 0 
 && (0 <= nbytes)));
  _Static_assert (NIL_IS_ZERO, "verify (" "NIL_IS_ZERO" ")");
  memset (p, 0, nbytes);
}
enum CHARTAB_SIZE_BITS
  {
    CHARTAB_SIZE_BITS_0 = 6,
    CHARTAB_SIZE_BITS_1 = 4,
    CHARTAB_SIZE_BITS_2 = 5,
    CHARTAB_SIZE_BITS_3 = 7
  };
extern const int chartab_size[4];
struct Lisp_Char_Table
  {
    union vectorlike_header header;
    Lisp_Object defalt;
    Lisp_Object parent;
    Lisp_Object purpose;
    Lisp_Object ascii;
    Lisp_Object contents[(1 << CHARTAB_SIZE_BITS_0)];
    Lisp_Object extras[];
  };
inline 
      _Bool
CHAR_TABLE_P (Lisp_Object a)
{
  return PSEUDOVECTORP (a, PVEC_CHAR_TABLE);
}
inline struct Lisp_Char_Table *
XCHAR_TABLE (Lisp_Object a)
{
  ((void) (
 0 
 && (CHAR_TABLE_P (a))));
  return XUNTAG (a, Lisp_Vectorlike);
}
struct Lisp_Sub_Char_Table
  {
    union vectorlike_header header;
    int depth;
    int min_char;
    Lisp_Object contents[];
  };
inline 
      _Bool
SUB_CHAR_TABLE_P (Lisp_Object a)
{
  return PSEUDOVECTORP (a, PVEC_SUB_CHAR_TABLE);
}
inline struct Lisp_Sub_Char_Table *
XSUB_CHAR_TABLE (Lisp_Object a)
{
  ((void) (
 0 
 && (SUB_CHAR_TABLE_P (a))));
  return XUNTAG (a, Lisp_Vectorlike);
}
inline Lisp_Object
CHAR_TABLE_REF_ASCII (Lisp_Object ct, ptrdiff_t idx)
{
  struct Lisp_Char_Table *tbl = 
                               ((void *)0)
                                   ;
  Lisp_Object val;
  do
    {
      tbl = tbl ? XCHAR_TABLE (tbl->parent) : XCHAR_TABLE (ct);
      val = (! SUB_CHAR_TABLE_P (tbl->ascii) ? tbl->ascii
      : XSUB_CHAR_TABLE (tbl->ascii)->contents[idx]);
      if (NILP (val))
 val = tbl->defalt;
    }
  while (NILP (val) && ! NILP (tbl->parent));
  return val;
}
inline Lisp_Object
CHAR_TABLE_REF (Lisp_Object ct, int idx)
{
  return ((((sizeof ((idx) + 0)) > (sizeof ((0x80) + 0)) ? (sizeof ((idx) + 0)) : (sizeof ((0x80) + 0))) <= sizeof (unsigned) ? ((idx) + (unsigned) 0) < ((0x80) + (unsigned) 0) : ((idx) + (uintmax_t) 0) < ((0x80) + (uintmax_t) 0))
   ? CHAR_TABLE_REF_ASCII (ct, idx)
   : char_table_ref (ct, idx));
}
inline void
CHAR_TABLE_SET (Lisp_Object ct, int idx, Lisp_Object val)
{
  if ((((sizeof ((idx) + 0)) > (sizeof ((0x80) + 0)) ? (sizeof ((idx) + 0)) : (sizeof ((0x80) + 0))) <= sizeof (unsigned) ? ((idx) + (unsigned) 0) < ((0x80) + (unsigned) 0) : ((idx) + (uintmax_t) 0) < ((0x80) + (uintmax_t) 0)) && SUB_CHAR_TABLE_P (XCHAR_TABLE (ct)->ascii))
    set_sub_char_table_contents (XCHAR_TABLE (ct)->ascii, idx, val);
  else
    char_table_set (ct, idx, val);
}
struct Lisp_Subr
  {
    union vectorlike_header header;
    union {
      Lisp_Object (*a0) (void);
      Lisp_Object (*a1) (Lisp_Object);
      Lisp_Object (*a2) (Lisp_Object, Lisp_Object);
      Lisp_Object (*a3) (Lisp_Object, Lisp_Object, Lisp_Object);
      Lisp_Object (*a4) (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
      Lisp_Object (*a5) (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
      Lisp_Object (*a6) (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
      Lisp_Object (*a7) (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
      Lisp_Object (*a8) (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
      Lisp_Object (*aUNEVALLED) (Lisp_Object args);
      Lisp_Object (*aMANY) (ptrdiff_t, Lisp_Object *);
    } function;
    short min_args, max_args;
    const char *symbol_name;
    const char *intspec;
    EMACS_INT doc;
  };
inline 
      _Bool
SUBRP (Lisp_Object a)
{
  return PSEUDOVECTORP (a, PVEC_SUBR);
}
inline struct Lisp_Subr *
XSUBR (Lisp_Object a)
{
  ((void) (
 0 
 && (SUBRP (a))));
  return XUNTAG (a, Lisp_Vectorlike);
}
enum char_table_specials
  {
    CHAR_TABLE_STANDARD_SLOTS = ((
                               __builtin_offsetof (
                               struct Lisp_Char_Table
                               , 
                               extras
                               ) 
                               - header_size) / word_size),
    SUB_CHAR_TABLE_OFFSET = ((
                           __builtin_offsetof (
                           struct Lisp_Sub_Char_Table
                           , 
                           contents
                           ) 
                           - header_size) / word_size)
  };
inline int
CHAR_TABLE_EXTRA_SLOTS (struct Lisp_Char_Table *ct)
{
  return ((ct->header.size & PSEUDOVECTOR_SIZE_MASK)
   - CHAR_TABLE_STANDARD_SLOTS);
}
_Static_assert (
__builtin_offsetof (
struct Lisp_Sub_Char_Table
, 
contents
) 
== (
__builtin_offsetof (
struct Lisp_Vector
, 
contents
) 
+ SUB_CHAR_TABLE_OFFSET * sizeof (Lisp_Object)), "verify (" "offsetof (struct Lisp_Sub_Char_Table, contents) == (offsetof (struct Lisp_Vector, contents) + SUB_CHAR_TABLE_OFFSET * sizeof (Lisp_Object))" ")")
                                                     ;
typedef jmp_buf sys_jmp_buf;
typedef unsigned long reg_syntax_t;
extern size_t emacs_re_max_failures;
extern ptrdiff_t emacs_re_safe_alloca;
typedef enum
{
  REG_ENOSYS = -1,
  REG_NOERROR = 0,
  REG_NOMATCH,
  REG_BADPAT,
  REG_ECOLLATE,
  REG_ECTYPE,
  REG_EESCAPE,
  REG_ESUBREG,
  REG_EBRACK,
  REG_EPAREN,
  REG_EBRACE,
  REG_BADBR,
  REG_ERANGE,
  REG_ESPACE,
  REG_BADRPT,
  REG_EEND,
  REG_ESIZE,
  REG_ERPAREN,
  REG_ERANGEX,
  REG_ESIZEBR
} reg_errcode_t;
struct re_pattern_buffer
{
  unsigned char *buffer;
  size_t allocated;
  size_t used;
  char *fastmap;
  Lisp_Object translate;
  size_t re_nsub;
  unsigned can_be_null : 1;
  unsigned regs_allocated : 2;
  unsigned fastmap_accurate : 1;
  unsigned no_sub : 1;
  unsigned not_bol : 1;
  unsigned not_eol : 1;
  unsigned used_syntax : 1;
  unsigned multibyte : 1;
  unsigned target_multibyte : 1;
  int charset_unibyte;
};
typedef struct re_pattern_buffer regex_t;
typedef ssize_t regoff_t;
struct re_registers
{
  unsigned num_regs;
  regoff_t *start;
  regoff_t *end;
};
typedef struct
{
  regoff_t rm_so;
  regoff_t rm_eo;
} regmatch_t;
extern const char *re_compile_pattern (const char *__pattern, size_t __length,
          _Bool 
               posix_backtracking,
           const char *whitespace_regexp,
           struct re_pattern_buffer *__buffer);
extern int re_compile_fastmap (struct re_pattern_buffer *__buffer);
extern regoff_t re_search (struct re_pattern_buffer *__buffer,
      const char *__string, size_t __length,
      ssize_t __start, ssize_t __range,
      struct re_registers *__regs);
extern regoff_t re_search_2 (struct re_pattern_buffer *__buffer,
        const char *__string1, size_t __length1,
        const char *__string2, size_t __length2,
        ssize_t __start, ssize_t __range,
        struct re_registers *__regs,
        ssize_t __stop);
extern regoff_t re_match (struct re_pattern_buffer *__buffer,
     const char *__string, size_t __length,
     ssize_t __start, struct re_registers *__regs);
extern regoff_t re_match_2 (struct re_pattern_buffer *__buffer,
       const char *__string1, size_t __length1,
       const char *__string2, size_t __length2,
       ssize_t __start, struct re_registers *__regs,
       ssize_t __stop);
extern void re_set_registers (struct re_pattern_buffer *__buffer,
         struct re_registers *__regs,
         unsigned __num_regs,
         regoff_t *__starts, regoff_t *__ends);
extern reg_errcode_t regcomp (regex_t *__restrict __preg,
         const char *__restrict __pattern,
         int __cflags);
extern reg_errcode_t regexec (const regex_t *__restrict __preg,
         const char *__restrict __string, size_t __nmatch,
         regmatch_t __pmatch[__restrict],
         int __eflags);
extern size_t regerror (int __errcode, const regex_t * __preg,
   char *__errbuf, size_t __errbuf_size);
extern void regfree (regex_t *__preg);
typedef enum { RECC_ERROR = 0,
        RECC_ALNUM, RECC_ALPHA, RECC_WORD,
        RECC_GRAPH, RECC_PRINT,
        RECC_LOWER, RECC_UPPER,
        RECC_PUNCT, RECC_CNTRL,
        RECC_DIGIT, RECC_XDIGIT,
        RECC_BLANK, RECC_SPACE,
        RECC_MULTIBYTE, RECC_NONASCII,
        RECC_ASCII, RECC_UNIBYTE
} re_wctype_t;
extern char re_iswctype (int ch, re_wctype_t cc);
extern re_wctype_t re_wctype_parse (const unsigned char **strp, unsigned limit);
typedef int re_wchar_t;
inline void
fd_CLR (int fd, fd_set *set)
{
  ((0 <= fd && fd < 
 1024
 ) ? (void) 0 : __builtin_unreachable ());
 ((void) (((
 set
 )->fds_bits)[__extension__ ({ long int __d = (
 fd
 ); (__builtin_constant_p (__d) ? (0 <= __d && __d < 1024 ? (__d / (8 * (int) sizeof (__fd_mask))) : __fdelt_warn (__d)) : __fdelt_chk (__d)); })] &= ~((__fd_mask) (1UL << ((
 fd
 ) % (8 * (int) sizeof (__fd_mask)))))))
                 ;
}
inline 
      _Bool
fd_ISSET (int fd, fd_set *set)
{
  ((0 <= fd && fd < 
 1024
 ) ? (void) 0 : __builtin_unreachable ());
  return 
        ((((
        set
        )->fds_bits)[__extension__ ({ long int __d = (
        fd
        ); (__builtin_constant_p (__d) ? (0 <= __d && __d < 1024 ? (__d / (8 * (int) sizeof (__fd_mask))) : __fdelt_warn (__d)) : __fdelt_chk (__d)); })] & ((__fd_mask) (1UL << ((
        fd
        ) % (8 * (int) sizeof (__fd_mask)))))) != 0) 
                           != 0;
}
inline void
fd_SET (int fd, fd_set *set)
{
  ((0 <= fd && fd < 
 1024
 ) ? (void) 0 : __builtin_unreachable ());
 ((void) (((
 set
 )->fds_bits)[__extension__ ({ long int __d = (
 fd
 ); (__builtin_constant_p (__d) ? (0 <= __d && __d < 1024 ? (__d / (8 * (int) sizeof (__fd_mask))) : __fdelt_warn (__d)) : __fdelt_chk (__d)); })] |= ((__fd_mask) (1UL << ((
 fd
 ) % (8 * (int) sizeof (__fd_mask)))))))
                 ;
}
struct timex
{
  unsigned int modes;
  __syscall_slong_t offset;
  __syscall_slong_t freq;
  __syscall_slong_t maxerror;
  __syscall_slong_t esterror;
  int status;
  __syscall_slong_t constant;
  __syscall_slong_t precision;
  __syscall_slong_t tolerance;
  struct timeval time;
  __syscall_slong_t tick;
  __syscall_slong_t ppsfreq;
  __syscall_slong_t jitter;
  int shift;
  __syscall_slong_t stabil;
  __syscall_slong_t jitcnt;
  __syscall_slong_t calcnt;
  __syscall_slong_t errcnt;
  __syscall_slong_t stbcnt;
  int tai;
  int :32; int :32; int :32; int :32;
  int :32; int :32; int :32; int :32;
  int :32; int :32; int :32;
};
extern int clock_adjtime (__clockid_t __clock_id, struct timex *__utx) __attribute__ ((__nothrow__ , __leaf__));
struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;
  long int tm_gmtoff;
  const char *tm_zone;
};
struct itimerspec
  {
    struct timespec it_interval;
    struct timespec it_value;
  };
struct sigevent;
extern clock_t clock (void) __attribute__ ((__nothrow__ , __leaf__));
extern time_t time (time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));
extern double difftime (time_t __time1, time_t __time0)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
extern time_t mktime (struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));
extern size_t strftime (char *__restrict __s, size_t __maxsize,
   const char *__restrict __format,
   const struct tm *__restrict __tp) __attribute__ ((__nothrow__ , __leaf__));
extern char *strptime (const char *__restrict __s,
         const char *__restrict __fmt, struct tm *__tp)
     __attribute__ ((__nothrow__ , __leaf__));
extern size_t strftime_l (char *__restrict __s, size_t __maxsize,
     const char *__restrict __format,
     const struct tm *__restrict __tp,
     __locale_t __loc) __attribute__ ((__nothrow__ , __leaf__));
extern char *strptime_l (const char *__restrict __s,
    const char *__restrict __fmt, struct tm *__tp,
    __locale_t __loc) __attribute__ ((__nothrow__ , __leaf__));
extern struct tm *gmtime (const time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));
extern struct tm *localtime (const time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));
extern struct tm *gmtime_r (const time_t *__restrict __timer,
       struct tm *__restrict __tp) __attribute__ ((__nothrow__ , __leaf__));
extern struct tm *localtime_r (const time_t *__restrict __timer,
          struct tm *__restrict __tp) __attribute__ ((__nothrow__ , __leaf__));
extern char *asctime (const struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));
extern char *ctime (const time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));
extern char *asctime_r (const struct tm *__restrict __tp,
   char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));
extern char *ctime_r (const time_t *__restrict __timer,
        char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));
extern char *__tzname[2];
extern int __daylight;
extern long int __timezone;
extern char *tzname[2];
extern void tzset (void) __attribute__ ((__nothrow__ , __leaf__));
extern int daylight;
extern long int timezone;
extern int stime (const time_t *__when) __attribute__ ((__nothrow__ , __leaf__));
extern time_t timegm (struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));
extern time_t timelocal (struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));
extern int dysize (int __year) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
extern int nanosleep (const struct timespec *__requested_time,
        struct timespec *__remaining);
extern int clock_getres (clockid_t __clock_id, struct timespec *__res) __attribute__ ((__nothrow__ , __leaf__));
extern int clock_gettime (clockid_t __clock_id, struct timespec *__tp) __attribute__ ((__nothrow__ , __leaf__));
extern int clock_settime (clockid_t __clock_id, const struct timespec *__tp)
     __attribute__ ((__nothrow__ , __leaf__));
extern int clock_nanosleep (clockid_t __clock_id, int __flags,
       const struct timespec *__req,
       struct timespec *__rem);
extern int clock_getcpuclockid (pid_t __pid, clockid_t *__clock_id) __attribute__ ((__nothrow__ , __leaf__));
extern int timer_create (clockid_t __clock_id,
    struct sigevent *__restrict __evp,
    timer_t *__restrict __timerid) __attribute__ ((__nothrow__ , __leaf__));
extern int timer_delete (timer_t __timerid) __attribute__ ((__nothrow__ , __leaf__));
extern int timer_settime (timer_t __timerid, int __flags,
     const struct itimerspec *__restrict __value,
     struct itimerspec *__restrict __ovalue) __attribute__ ((__nothrow__ , __leaf__));
extern int timer_gettime (timer_t __timerid, struct itimerspec *__value)
     __attribute__ ((__nothrow__ , __leaf__));
extern int timer_getoverrun (timer_t __timerid) __attribute__ ((__nothrow__ , __leaf__));
extern int timespec_get (struct timespec *__ts, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern int getdate_err;
extern struct tm *getdate (const char *__string);
extern int getdate_r (const char *__restrict __string,
        struct tm *__restrict __resbufp);
struct __time_t_must_be_integral {
  unsigned int __floating_time_t_unsupported : (time_t) 1;
};
extern int _gl_cxxalias_dummy;
extern int _gl_cxxalias_dummy;
extern int _gl_cxxalias_dummy
                                                                           ;
extern int _gl_cxxalias_dummy;
extern int _gl_cxxalias_dummy
                                                                        ;
extern int _gl_cxxalias_dummy;
typedef struct tm_zone *timezone_t;
extern timezone_t tzalloc (char const *__name);
extern int _gl_cxxalias_dummy;
extern void tzfree (timezone_t __tz);
extern int _gl_cxxalias_dummy;
extern struct tm * localtime_rz (timezone_t __tz, time_t const *
__restrict 
__timer, struct tm *
__restrict 
__result) __attribute__ ((__nonnull__ (2, 3)))
                                                                          ;
extern int _gl_cxxalias_dummy
                                                 ;
extern time_t mktime_z (timezone_t __tz, struct tm *
__restrict 
__result) __attribute__ ((__nonnull__ (2)))
                                        ;
extern int _gl_cxxalias_dummy
                                                                  ;
extern int _gl_cxxalias_dummy;
extern int _gl_cxxalias_dummy;
enum { TIMESPEC_RESOLUTION = 1000000000 };
enum { LOG10_TIMESPEC_RESOLUTION = 9 };
inline struct timespec
make_timespec (time_t s, long int ns)
{
  struct timespec r;
  r.tv_sec = s;
  r.tv_nsec = ns;
  return r;
}
inline int 
                       __attribute__ ((__pure__))
timespec_cmp (struct timespec a, struct timespec b)
{
  if (a.tv_sec < b.tv_sec)
    return -1;
  if (a.tv_sec > b.tv_sec)
    return 1;
  ((-1 <= a.tv_nsec && a.tv_nsec <= 2 * TIMESPEC_RESOLUTION) ? (void) 0 : __builtin_unreachable ());
  ((-1 <= b.tv_nsec && b.tv_nsec <= 2 * TIMESPEC_RESOLUTION) ? (void) 0 : __builtin_unreachable ());
  return a.tv_nsec - b.tv_nsec;
}
inline int 
                       __attribute__ ((__pure__))
timespec_sign (struct timespec a)
{
  return a.tv_sec < 0 ? -1 : a.tv_sec || a.tv_nsec;
}
struct timespec timespec_add (struct timespec, struct timespec)
  __attribute__ ((__const__));
struct timespec timespec_sub (struct timespec, struct timespec)
  __attribute__ ((__const__));
struct timespec dtotimespec (double)
  __attribute__ ((__const__));
inline double
timespectod (struct timespec a)
{
  return a.tv_sec + a.tv_nsec / 1e9;
}
void gettime (struct timespec *);
int settime (struct timespec const *);
typedef unsigned long XID;
typedef unsigned long Mask;
typedef unsigned long Atom;
typedef unsigned long VisualID;
typedef unsigned long Time;
typedef XID Window;
typedef XID Drawable;
typedef XID Font;
typedef XID Pixmap;
typedef XID Cursor;
typedef XID Colormap;
typedef XID GContext;
typedef XID KeySym;
typedef unsigned char KeyCode;
struct timezone
  {
    int tz_minuteswest;
    int tz_dsttime;
  };
typedef struct timezone *__restrict __timezone_ptr_t;
extern int gettimeofday (struct timeval *__restrict __tv,
    __timezone_ptr_t __tz) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern int settimeofday (const struct timeval *__tv,
    const struct timezone *__tz)
     __attribute__ ((__nothrow__ , __leaf__));
extern int adjtime (const struct timeval *__delta,
      struct timeval *__olddelta) __attribute__ ((__nothrow__ , __leaf__));
enum __itimer_which
  {
    ITIMER_REAL = 0,
    ITIMER_VIRTUAL = 1,
    ITIMER_PROF = 2
  };
struct itimerval
  {
    struct timeval it_interval;
    struct timeval it_value;
  };
typedef enum __itimer_which __itimer_which_t;
extern int getitimer (__itimer_which_t __which,
        struct itimerval *__value) __attribute__ ((__nothrow__ , __leaf__));
extern int setitimer (__itimer_which_t __which,
        const struct itimerval *__restrict __new,
        struct itimerval *__restrict __old) __attribute__ ((__nothrow__ , __leaf__));
extern int utimes (const char *__file, const struct timeval __tvp[2])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern int lutimes (const char *__file, const struct timeval __tvp[2])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern int futimes (int __fd, const struct timeval __tvp[2]) __attribute__ ((__nothrow__ , __leaf__));
extern int futimesat (int __fd, const char *__file,
        const struct timeval __tvp[2]) __attribute__ ((__nothrow__ , __leaf__));
extern int _gl_cxxalias_dummy
                                                                  ;
extern int _gl_cxxalias_dummy;
inline struct timespec
invalid_timespec (void)
{
  return make_timespec (0, -1);
}
inline 
      _Bool
timespec_valid_p (struct timespec t)
{
  return t.tv_nsec >= 0;
}
inline struct timespec
current_timespec (void)
{
  struct timespec r;
  gettime (&r);
  return r;
}
extern int set_file_times (int, const char *, struct timespec, struct timespec);
extern struct timeval make_timeval (struct timespec) __attribute__ ((__const__));
extern void set_waiting_for_input (struct timespec *);
enum { LO_TIME_BITS = 16 };
struct lisp_time
{
  EMACS_INT hi;
  int lo, us, ps;
};
extern Lisp_Object make_lisp_time (struct timespec);
extern int decode_time_components (Lisp_Object, Lisp_Object, Lisp_Object,
       Lisp_Object, struct lisp_time *, double *);
extern struct timespec lisp_to_timespec (struct lisp_time);
extern struct timespec lisp_time_argument (Lisp_Object);
struct sched_param
  {
    int __sched_priority;
  };
extern int clone (int (*__fn) (void *__arg), void *__child_stack,
    int __flags, void *__arg, ...) __attribute__ ((__nothrow__ , __leaf__));
extern int unshare (int __flags) __attribute__ ((__nothrow__ , __leaf__));
extern int sched_getcpu (void) __attribute__ ((__nothrow__ , __leaf__));
extern int setns (int __fd, int __nstype) __attribute__ ((__nothrow__ , __leaf__));
struct __sched_param
  {
    int __sched_priority;
  };
typedef unsigned long int __cpu_mask;
typedef struct
{
  __cpu_mask __bits[1024 / (8 * sizeof (__cpu_mask))];
} cpu_set_t;
extern int __sched_cpucount (size_t __setsize, const cpu_set_t *__setp)
  __attribute__ ((__nothrow__ , __leaf__));
extern cpu_set_t *__sched_cpualloc (size_t __count) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
extern void __sched_cpufree (cpu_set_t *__set) __attribute__ ((__nothrow__ , __leaf__));
extern int sched_setparam (__pid_t __pid, const struct sched_param *__param)
     __attribute__ ((__nothrow__ , __leaf__));
extern int sched_getparam (__pid_t __pid, struct sched_param *__param) __attribute__ ((__nothrow__ , __leaf__));
extern int sched_setscheduler (__pid_t __pid, int __policy,
          const struct sched_param *__param) __attribute__ ((__nothrow__ , __leaf__));
extern int sched_getscheduler (__pid_t __pid) __attribute__ ((__nothrow__ , __leaf__));
extern int sched_yield (void) __attribute__ ((__nothrow__ , __leaf__));
extern int sched_get_priority_max (int __algorithm) __attribute__ ((__nothrow__ , __leaf__));
extern int sched_get_priority_min (int __algorithm) __attribute__ ((__nothrow__ , __leaf__));
extern int sched_rr_get_interval (__pid_t __pid, struct timespec *__t) __attribute__ ((__nothrow__ , __leaf__));
extern int sched_setaffinity (__pid_t __pid, size_t __cpusetsize,
         const cpu_set_t *__cpuset) __attribute__ ((__nothrow__ , __leaf__));
extern int sched_getaffinity (__pid_t __pid, size_t __cpusetsize,
         cpu_set_t *__cpuset) __attribute__ ((__nothrow__ , __leaf__));
enum
{
  PTHREAD_CREATE_JOINABLE,
  PTHREAD_CREATE_DETACHED
};
enum
{
  PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_ADAPTIVE_NP
  ,
  PTHREAD_MUTEX_NORMAL = PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE = PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK = PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_DEFAULT = PTHREAD_MUTEX_NORMAL
  , PTHREAD_MUTEX_FAST_NP = PTHREAD_MUTEX_TIMED_NP
};
enum
{
  PTHREAD_MUTEX_STALLED,
  PTHREAD_MUTEX_STALLED_NP = PTHREAD_MUTEX_STALLED,
  PTHREAD_MUTEX_ROBUST,
  PTHREAD_MUTEX_ROBUST_NP = PTHREAD_MUTEX_ROBUST
};
enum
{
  PTHREAD_PRIO_NONE,
  PTHREAD_PRIO_INHERIT,
  PTHREAD_PRIO_PROTECT
};
enum
{
  PTHREAD_RWLOCK_PREFER_READER_NP,
  PTHREAD_RWLOCK_PREFER_WRITER_NP,
  PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP,
  PTHREAD_RWLOCK_DEFAULT_NP = PTHREAD_RWLOCK_PREFER_READER_NP
};
enum
{
  PTHREAD_INHERIT_SCHED,
  PTHREAD_EXPLICIT_SCHED
};
enum
{
  PTHREAD_SCOPE_SYSTEM,
  PTHREAD_SCOPE_PROCESS
};
enum
{
  PTHREAD_PROCESS_PRIVATE,
  PTHREAD_PROCESS_SHARED
};
struct _pthread_cleanup_buffer
{
  void (*__routine) (void *);
  void *__arg;
  int __canceltype;
  struct _pthread_cleanup_buffer *__prev;
};
enum
{
  PTHREAD_CANCEL_ENABLE,
  PTHREAD_CANCEL_DISABLE
};
enum
{
  PTHREAD_CANCEL_DEFERRED,
  PTHREAD_CANCEL_ASYNCHRONOUS
};
extern int pthread_create (pthread_t *__restrict __newthread,
      const pthread_attr_t *__restrict __attr,
      void *(*__start_routine) (void *),
      void *__restrict __arg) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 3)));
extern void pthread_exit (void *__retval) __attribute__ ((__noreturn__));
extern int pthread_join (pthread_t __th, void **__thread_return);
extern int pthread_tryjoin_np (pthread_t __th, void **__thread_return) __attribute__ ((__nothrow__ , __leaf__));
extern int pthread_timedjoin_np (pthread_t __th, void **__thread_return,
     const struct timespec *__abstime);
extern int pthread_detach (pthread_t __th) __attribute__ ((__nothrow__ , __leaf__));
extern pthread_t pthread_self (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
extern int pthread_equal (pthread_t __thread1, pthread_t __thread2)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
extern int pthread_attr_init (pthread_attr_t *__attr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern int pthread_attr_destroy (pthread_attr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern int pthread_attr_getdetachstate (const pthread_attr_t *__attr,
     int *__detachstate)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int pthread_attr_setdetachstate (pthread_attr_t *__attr,
     int __detachstate)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern int pthread_attr_getguardsize (const pthread_attr_t *__attr,
          size_t *__guardsize)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int pthread_attr_setguardsize (pthread_attr_t *__attr,
          size_t __guardsize)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern int pthread_attr_getschedparam (const pthread_attr_t *__restrict __attr,
           struct sched_param *__restrict __param)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int pthread_attr_setschedparam (pthread_attr_t *__restrict __attr,
           const struct sched_param *__restrict
           __param) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int pthread_attr_getschedpolicy (const pthread_attr_t *__restrict
     __attr, int *__restrict __policy)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int pthread_attr_setschedpolicy (pthread_attr_t *__attr, int __policy)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern int pthread_attr_getinheritsched (const pthread_attr_t *__restrict
      __attr, int *__restrict __inherit)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int pthread_attr_setinheritsched (pthread_attr_t *__attr,
      int __inherit)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern int pthread_attr_getscope (const pthread_attr_t *__restrict __attr,
      int *__restrict __scope)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int pthread_attr_setscope (pthread_attr_t *__attr, int __scope)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern int pthread_attr_getstackaddr (const pthread_attr_t *__restrict
          __attr, void **__restrict __stackaddr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__deprecated__));
extern int pthread_attr_setstackaddr (pthread_attr_t *__attr,
          void *__stackaddr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__));
extern int pthread_attr_getstacksize (const pthread_attr_t *__restrict
          __attr, size_t *__restrict __stacksize)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int pthread_attr_setstacksize (pthread_attr_t *__attr,
          size_t __stacksize)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern int pthread_attr_getstack (const pthread_attr_t *__restrict __attr,
      void **__restrict __stackaddr,
      size_t *__restrict __stacksize)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2, 3)));
extern int pthread_attr_setstack (pthread_attr_t *__attr, void *__stackaddr,
      size_t __stacksize) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern int pthread_attr_setaffinity_np (pthread_attr_t *__attr,
     size_t __cpusetsize,
     const cpu_set_t *__cpuset)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3)));
extern int pthread_attr_getaffinity_np (const pthread_attr_t *__attr,
     size_t __cpusetsize,
     cpu_set_t *__cpuset)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3)));
extern int pthread_getattr_default_np (pthread_attr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern int pthread_setattr_default_np (const pthread_attr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern int pthread_getattr_np (pthread_t __th, pthread_attr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));
extern int pthread_setschedparam (pthread_t __target_thread, int __policy,
      const struct sched_param *__param)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3)));
extern int pthread_getschedparam (pthread_t __target_thread,
      int *__restrict __policy,
      struct sched_param *__restrict __param)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));
extern int pthread_setschedprio (pthread_t __target_thread, int __prio)
     __attribute__ ((__nothrow__ , __leaf__));
extern int pthread_getname_np (pthread_t __target_thread, char *__buf,
          size_t __buflen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));
extern int pthread_setname_np (pthread_t __target_thread, const char *__name)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));
extern int pthread_getconcurrency (void) __attribute__ ((__nothrow__ , __leaf__));
extern int pthread_setconcurrency (int __level) __attribute__ ((__nothrow__ , __leaf__));
extern int pthread_yield (void) __attribute__ ((__nothrow__ , __leaf__));
extern int pthread_setaffinity_np (pthread_t __th, size_t __cpusetsize,
       const cpu_set_t *__cpuset)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3)));
extern int pthread_getaffinity_np (pthread_t __th, size_t __cpusetsize,
       cpu_set_t *__cpuset)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3)));
extern int pthread_once (pthread_once_t *__once_control,
    void (*__init_routine) (void)) __attribute__ ((__nonnull__ (1, 2)));
extern int pthread_setcancelstate (int __state, int *__oldstate);
extern int pthread_setcanceltype (int __type, int *__oldtype);
extern int pthread_cancel (pthread_t __th);
extern void pthread_testcancel (void);
typedef struct
{
  struct
  {
    __jmp_buf __cancel_jmp_buf;
    int __mask_was_saved;
  } __cancel_jmp_buf[1];
  void *__pad[4];
} __pthread_unwind_buf_t __attribute__ ((__aligned__));
struct __pthread_cleanup_frame
{
  void (*__cancel_routine) (void *);
  void *__cancel_arg;
  int __do_it;
  int __cancel_type;
};
extern void __pthread_register_cancel (__pthread_unwind_buf_t *__buf)
     ;
extern void __pthread_unregister_cancel (__pthread_unwind_buf_t *__buf)
  ;
extern void __pthread_register_cancel_defer (__pthread_unwind_buf_t *__buf)
     ;
extern void __pthread_unregister_cancel_restore (__pthread_unwind_buf_t *__buf)
  ;
extern void __pthread_unwind_next (__pthread_unwind_buf_t *__buf)
     __attribute__ ((__noreturn__))
     __attribute__ ((__weak__))
     ;
struct __jmp_buf_tag;
extern int __sigsetjmp (struct __jmp_buf_tag *__env, int __savemask) __attribute__ ((__nothrow__));
extern int pthread_mutex_init (pthread_mutex_t *__mutex,
          const pthread_mutexattr_t *__mutexattr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern int pthread_mutex_destroy (pthread_mutex_t *__mutex)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern int pthread_mutex_trylock (pthread_mutex_t *__mutex)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));
extern int pthread_mutex_lock (pthread_mutex_t *__mutex)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));
extern int pthread_mutex_timedlock (pthread_mutex_t *__restrict __mutex,
        const struct timespec *__restrict
        __abstime) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));
extern int pthread_mutex_unlock (pthread_mutex_t *__mutex)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));
extern int pthread_mutex_getprioceiling (const pthread_mutex_t *
      __restrict __mutex,
      int *__restrict __prioceiling)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int pthread_mutex_setprioceiling (pthread_mutex_t *__restrict __mutex,
      int __prioceiling,
      int *__restrict __old_ceiling)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3)));
extern int pthread_mutex_consistent (pthread_mutex_t *__mutex)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern int pthread_mutex_consistent_np (pthread_mutex_t *__mutex)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern int pthread_mutexattr_init (pthread_mutexattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern int pthread_mutexattr_destroy (pthread_mutexattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern int pthread_mutexattr_getpshared (const pthread_mutexattr_t *
      __restrict __attr,
      int *__restrict __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int pthread_mutexattr_setpshared (pthread_mutexattr_t *__attr,
      int __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern int pthread_mutexattr_gettype (const pthread_mutexattr_t *__restrict
          __attr, int *__restrict __kind)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int pthread_mutexattr_settype (pthread_mutexattr_t *__attr, int __kind)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern int pthread_mutexattr_getprotocol (const pthread_mutexattr_t *
       __restrict __attr,
       int *__restrict __protocol)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int pthread_mutexattr_setprotocol (pthread_mutexattr_t *__attr,
       int __protocol)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern int pthread_mutexattr_getprioceiling (const pthread_mutexattr_t *
          __restrict __attr,
          int *__restrict __prioceiling)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int pthread_mutexattr_setprioceiling (pthread_mutexattr_t *__attr,
          int __prioceiling)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern int pthread_mutexattr_getrobust (const pthread_mutexattr_t *__attr,
     int *__robustness)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int pthread_mutexattr_getrobust_np (const pthread_mutexattr_t *__attr,
        int *__robustness)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int pthread_mutexattr_setrobust (pthread_mutexattr_t *__attr,
     int __robustness)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern int pthread_mutexattr_setrobust_np (pthread_mutexattr_t *__attr,
        int __robustness)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern int pthread_rwlock_init (pthread_rwlock_t *__restrict __rwlock,
    const pthread_rwlockattr_t *__restrict
    __attr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern int pthread_rwlock_destroy (pthread_rwlock_t *__rwlock)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern int pthread_rwlock_rdlock (pthread_rwlock_t *__rwlock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));
extern int pthread_rwlock_tryrdlock (pthread_rwlock_t *__rwlock)
  __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));
extern int pthread_rwlock_timedrdlock (pthread_rwlock_t *__restrict __rwlock,
           const struct timespec *__restrict
           __abstime) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));
extern int pthread_rwlock_wrlock (pthread_rwlock_t *__rwlock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));
extern int pthread_rwlock_trywrlock (pthread_rwlock_t *__rwlock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));
extern int pthread_rwlock_timedwrlock (pthread_rwlock_t *__restrict __rwlock,
           const struct timespec *__restrict
           __abstime) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));
extern int pthread_rwlock_unlock (pthread_rwlock_t *__rwlock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));
extern int pthread_rwlockattr_init (pthread_rwlockattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern int pthread_rwlockattr_destroy (pthread_rwlockattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern int pthread_rwlockattr_getpshared (const pthread_rwlockattr_t *
       __restrict __attr,
       int *__restrict __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int pthread_rwlockattr_setpshared (pthread_rwlockattr_t *__attr,
       int __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern int pthread_rwlockattr_getkind_np (const pthread_rwlockattr_t *
       __restrict __attr,
       int *__restrict __pref)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int pthread_rwlockattr_setkind_np (pthread_rwlockattr_t *__attr,
       int __pref) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern int pthread_cond_init (pthread_cond_t *__restrict __cond,
         const pthread_condattr_t *__restrict __cond_attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern int pthread_cond_destroy (pthread_cond_t *__cond)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern int pthread_cond_signal (pthread_cond_t *__cond)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));
extern int pthread_cond_broadcast (pthread_cond_t *__cond)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));
extern int pthread_cond_wait (pthread_cond_t *__restrict __cond,
         pthread_mutex_t *__restrict __mutex)
     __attribute__ ((__nonnull__ (1, 2)));
extern int pthread_cond_timedwait (pthread_cond_t *__restrict __cond,
       pthread_mutex_t *__restrict __mutex,
       const struct timespec *__restrict __abstime)
     __attribute__ ((__nonnull__ (1, 2, 3)));
extern int pthread_condattr_init (pthread_condattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern int pthread_condattr_destroy (pthread_condattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern int pthread_condattr_getpshared (const pthread_condattr_t *
     __restrict __attr,
     int *__restrict __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int pthread_condattr_setpshared (pthread_condattr_t *__attr,
     int __pshared) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern int pthread_condattr_getclock (const pthread_condattr_t *
          __restrict __attr,
          __clockid_t *__restrict __clock_id)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int pthread_condattr_setclock (pthread_condattr_t *__attr,
          __clockid_t __clock_id)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern int pthread_spin_init (pthread_spinlock_t *__lock, int __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern int pthread_spin_destroy (pthread_spinlock_t *__lock)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern int pthread_spin_lock (pthread_spinlock_t *__lock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));
extern int pthread_spin_trylock (pthread_spinlock_t *__lock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));
extern int pthread_spin_unlock (pthread_spinlock_t *__lock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));
extern int pthread_barrier_init (pthread_barrier_t *__restrict __barrier,
     const pthread_barrierattr_t *__restrict
     __attr, unsigned int __count)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern int pthread_barrier_destroy (pthread_barrier_t *__barrier)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern int pthread_barrier_wait (pthread_barrier_t *__barrier)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));
extern int pthread_barrierattr_init (pthread_barrierattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern int pthread_barrierattr_destroy (pthread_barrierattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern int pthread_barrierattr_getpshared (const pthread_barrierattr_t *
        __restrict __attr,
        int *__restrict __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int pthread_barrierattr_setpshared (pthread_barrierattr_t *__attr,
        int __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern int pthread_key_create (pthread_key_t *__key,
          void (*__destr_function) (void *))
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern int pthread_key_delete (pthread_key_t __key) __attribute__ ((__nothrow__ , __leaf__));
extern void *pthread_getspecific (pthread_key_t __key) __attribute__ ((__nothrow__ , __leaf__));
extern int pthread_setspecific (pthread_key_t __key,
    const void *__pointer) __attribute__ ((__nothrow__ , __leaf__)) ;
extern int pthread_getcpuclockid (pthread_t __thread_id,
      __clockid_t *__clock_id)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));
extern int pthread_atfork (void (*__prepare) (void),
      void (*__parent) (void),
      void (*__child) (void)) __attribute__ ((__nothrow__ , __leaf__));
extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__nothrow__ , __leaf__)) pthread_equal (pthread_t __thread1, pthread_t __thread2)
{
  return __thread1 == __thread2;
}
typedef pthread_mutex_t sys_mutex_t;
typedef pthread_cond_t sys_cond_t;
typedef pthread_t sys_thread_t;
typedef void *(thread_creation_function) (void *);
extern void sys_mutex_init (sys_mutex_t *);
extern void sys_mutex_lock (sys_mutex_t *);
extern void sys_mutex_unlock (sys_mutex_t *);
extern void sys_cond_init (sys_cond_t *);
extern void sys_cond_wait (sys_cond_t *, sys_mutex_t *);
extern void sys_cond_signal (sys_cond_t *);
extern void sys_cond_broadcast (sys_cond_t *);
extern void sys_cond_destroy (sys_cond_t *);
extern sys_thread_t sys_thread_self (void);
extern 
      _Bool 
           sys_thread_equal (sys_thread_t, sys_thread_t);
extern int sys_thread_create (sys_thread_t *, const char *,
         thread_creation_function *,
         void *);
extern void sys_thread_yield (void);
struct thread_state
{
  union vectorlike_header header;
  Lisp_Object m_last_thing_searched;
  Lisp_Object m_saved_last_thing_searched;
  Lisp_Object name;
  Lisp_Object function;
  Lisp_Object error_symbol;
  Lisp_Object error_data;
  Lisp_Object event_object;
  char *m_stack_bottom;
  void *stack_top;
  struct catchtag *m_catchlist;
  struct handler *m_handlerlist;
  struct handler *m_handlerlist_sentinel;
  ptrdiff_t m_specpdl_size;
  union specbinding *m_specpdl;
  union specbinding *m_specpdl_ptr;
  EMACS_INT m_lisp_eval_depth;
  struct buffer *m_current_buffer;
  struct re_registers m_search_regs;
 _Bool 
      m_search_regs_saved;
  struct re_registers m_saved_search_regs;
  Lisp_Object m_re_match_object;
  int m_waiting_for_user_input_p;
 _Bool 
      m_waiting_for_input;
  sys_jmp_buf m_getcjmp;
  sys_thread_t thread_id;
  sys_cond_t thread_condvar;
  sys_cond_t *wait_condvar;
  int not_holding_lock;
  struct thread_state *next_thread;
};
inline 
      _Bool
THREADP (Lisp_Object a)
{
  return PSEUDOVECTORP (a, PVEC_THREAD);
}
inline void
CHECK_THREAD (Lisp_Object x)
{
  CHECK_TYPE (THREADP (x), builtin_lisp_symbol (1044), x);
}
inline struct thread_state *
XTHREAD (Lisp_Object a)
{
  ((void) (
 0 
 && (THREADP (a))));
  return XUNTAG (a, Lisp_Vectorlike);
}
typedef struct
{
  struct thread_state *owner;
  unsigned int count;
  sys_cond_t condition;
} lisp_mutex_t;
struct Lisp_Mutex
{
  union vectorlike_header header;
  Lisp_Object name;
  lisp_mutex_t mutex;
};
inline 
      _Bool
MUTEXP (Lisp_Object a)
{
  return PSEUDOVECTORP (a, PVEC_MUTEX);
}
inline void
CHECK_MUTEX (Lisp_Object x)
{
  CHECK_TYPE (MUTEXP (x), builtin_lisp_symbol (801), x);
}
inline struct Lisp_Mutex *
XMUTEX (Lisp_Object a)
{
  ((void) (
 0 
 && (MUTEXP (a))));
  return XUNTAG (a, Lisp_Vectorlike);
}
struct Lisp_CondVar
{
  union vectorlike_header header;
  Lisp_Object mutex;
  Lisp_Object name;
  sys_cond_t cond;
};
inline 
      _Bool
CONDVARP (Lisp_Object a)
{
  return PSEUDOVECTORP (a, PVEC_CONDVAR);
}
inline void
CHECK_CONDVAR (Lisp_Object x)
{
  CHECK_TYPE (CONDVARP (x), builtin_lisp_symbol (345), x);
}
inline struct Lisp_CondVar *
XCONDVAR (Lisp_Object a)
{
  ((void) (
 0 
 && (CONDVARP (a))));
  return XUNTAG (a, Lisp_Vectorlike);
}
extern struct thread_state *current_thread;
extern void finalize_one_thread (struct thread_state *state);
extern void finalize_one_mutex (struct Lisp_Mutex *);
extern void finalize_one_condvar (struct Lisp_CondVar *);
extern void maybe_reacquire_global_lock (void);
extern void init_threads_once (void);
extern void init_threads (void);
extern void syms_of_threads (void);
extern 
      _Bool 
           main_thread_p (void *);
extern 
      _Bool 
           in_current_thread (void);
typedef int select_func (int, fd_set *, fd_set *, fd_set *,
    const struct timespec *, const sigset_t *);
int thread_select (select_func *func, int max_fds, fd_set *rfds,
      fd_set *wfds, fd_set *efds, struct timespec *timeout,
      sigset_t *sigmask);
_Bool 
    thread_check_current_buffer (struct buffer *);
inline Lisp_Object
(SYMBOL_VAL) (struct Lisp_Symbol *sym)
{
  return (((void) (
        0 
        && ((sym)->u.s.redirect == SYMBOL_PLAINVAL))), (sym)->u.s.val.value);
}
inline struct Lisp_Symbol *
SYMBOL_ALIAS (struct Lisp_Symbol *sym)
{
  ((sym->u.s.redirect == SYMBOL_VARALIAS && sym->u.s.val.alias) ? (void) 0 : __builtin_unreachable ());
  return sym->u.s.val.alias;
}
inline struct Lisp_Buffer_Local_Value *
SYMBOL_BLV (struct Lisp_Symbol *sym)
{
  ((sym->u.s.redirect == SYMBOL_LOCALIZED && sym->u.s.val.blv) ? (void) 0 : __builtin_unreachable ());
  return sym->u.s.val.blv;
}
inline union Lisp_Fwd *
SYMBOL_FWD (struct Lisp_Symbol *sym)
{
  ((sym->u.s.redirect == SYMBOL_FORWARDED && sym->u.s.val.fwd) ? (void) 0 : __builtin_unreachable ());
  return sym->u.s.val.fwd;
}
inline void
(SET_SYMBOL_VAL) (struct Lisp_Symbol *sym, Lisp_Object v)
{
  (((void) (
 0 
 && ((sym)->u.s.redirect == SYMBOL_PLAINVAL))), (sym)->u.s.val.value = (v));
}
inline void
SET_SYMBOL_ALIAS (struct Lisp_Symbol *sym, struct Lisp_Symbol *v)
{
  ((sym->u.s.redirect == SYMBOL_VARALIAS && v) ? (void) 0 : __builtin_unreachable ());
  sym->u.s.val.alias = v;
}
inline void
SET_SYMBOL_BLV (struct Lisp_Symbol *sym, struct Lisp_Buffer_Local_Value *v)
{
  ((sym->u.s.redirect == SYMBOL_LOCALIZED && v) ? (void) 0 : __builtin_unreachable ());
  sym->u.s.val.blv = v;
}
inline void
SET_SYMBOL_FWD (struct Lisp_Symbol *sym, union Lisp_Fwd *v)
{
  ((sym->u.s.redirect == SYMBOL_FORWARDED && v) ? (void) 0 : __builtin_unreachable ());
  sym->u.s.val.fwd = v;
}
inline Lisp_Object
SYMBOL_NAME (Lisp_Object sym)
{
  return XSYMBOL (sym)->u.s.name;
}
inline 
      _Bool
SYMBOL_INTERNED_P (Lisp_Object sym)
{
  return XSYMBOL (sym)->u.s.interned != SYMBOL_UNINTERNED;
}
inline 
      _Bool
SYMBOL_INTERNED_IN_INITIAL_OBARRAY_P (Lisp_Object sym)
{
  return XSYMBOL (sym)->u.s.interned == SYMBOL_INTERNED_IN_INITIAL_OBARRAY;
}
inline int
(SYMBOL_TRAPPED_WRITE_P) (Lisp_Object sym)
{
  return (XSYMBOL (sym)->u.s.trapped_write);
}
inline int
(SYMBOL_CONSTANT_P) (Lisp_Object sym)
{
  return (XSYMBOL (sym)->u.s.trapped_write == SYMBOL_NOWRITE);
}
struct hash_table_test
{
  Lisp_Object name;
  Lisp_Object user_hash_function;
  Lisp_Object user_cmp_function;
 _Bool 
      (*cmpfn) (struct hash_table_test *t, Lisp_Object, Lisp_Object);
  EMACS_UINT (*hashfn) (struct hash_table_test *t, Lisp_Object);
};
struct Lisp_Hash_Table
{
  union vectorlike_header header;
  Lisp_Object weak;
  Lisp_Object hash;
  Lisp_Object next;
  Lisp_Object index;
  ptrdiff_t count;
  ptrdiff_t next_free;
 _Bool 
      pure;
  float rehash_threshold;
  float rehash_size;
  Lisp_Object key_and_value;
  struct hash_table_test test;
  struct Lisp_Hash_Table *next_weak;
};
inline 
      _Bool
HASH_TABLE_P (Lisp_Object a)
{
  return PSEUDOVECTORP (a, PVEC_HASH_TABLE);
}
inline struct Lisp_Hash_Table *
XHASH_TABLE (Lisp_Object a)
{
  ((void) (
 0 
 && (HASH_TABLE_P (a))));
  return XUNTAG (a, Lisp_Vectorlike);
}
inline Lisp_Object
HASH_KEY (struct Lisp_Hash_Table *h, ptrdiff_t idx)
{
  return AREF (h->key_and_value, 2 * idx);
}
inline Lisp_Object
HASH_VALUE (struct Lisp_Hash_Table *h, ptrdiff_t idx)
{
  return AREF (h->key_and_value, 2 * idx + 1);
}
inline Lisp_Object
HASH_HASH (struct Lisp_Hash_Table *h, ptrdiff_t idx)
{
  return AREF (h->hash, idx);
}
inline ptrdiff_t
HASH_TABLE_SIZE (struct Lisp_Hash_Table *h)
{
  return ASIZE (h->next);
}
enum DEFAULT_HASH_SIZE { DEFAULT_HASH_SIZE = 65 };
static float const DEFAULT_REHASH_THRESHOLD = 0.8125;
static float const DEFAULT_REHASH_SIZE = 1.5 - 1;
inline EMACS_UINT
sxhash_combine (EMACS_UINT x, EMACS_UINT y)
{
  return (x << 4) + (x >> (EMACS_INT_WIDTH - 4)) + y;
}
inline EMACS_UINT
SXHASH_REDUCE (EMACS_UINT x)
{
  return (x ^ x >> (EMACS_INT_WIDTH - FIXNUM_BITS)) & (0x7fffffffffffffffL >> (INTTYPEBITS - 1));
}
struct Lisp_Misc_Any
{
  enum Lisp_Misc_Type type : 16;
  bool_bf gcmarkbit : 1;
  unsigned spacer : 15;
};
inline 
      _Bool
(MISCP) (Lisp_Object x)
{
  return (XTYPE (x) == Lisp_Misc);
}
inline struct Lisp_Misc_Any *
XMISCANY (Lisp_Object a)
{
  ((void) (
 0 
 && (MISCP (a))));
  return XUNTAG (a, Lisp_Misc);
}
inline enum Lisp_Misc_Type
XMISCTYPE (Lisp_Object a)
{
  return XMISCANY (a)->type;
}
struct Lisp_Marker
{
  enum Lisp_Misc_Type type : 16;
  bool_bf gcmarkbit : 1;
  unsigned spacer : 13;
  bool_bf need_adjustment : 1;
  bool_bf insertion_type : 1;
  struct buffer *buffer;
  struct Lisp_Marker *next;
  ptrdiff_t charpos;
  ptrdiff_t bytepos;
};
struct Lisp_Overlay
  {
    enum Lisp_Misc_Type type : 16;
    bool_bf gcmarkbit : 1;
    unsigned spacer : 15;
    struct Lisp_Overlay *next;
    Lisp_Object start;
    Lisp_Object end;
    Lisp_Object plist;
  };
enum { SAVE_SLOT_BITS = 3 };
enum { SAVE_VALUE_SLOTS = 4 };
enum { SAVE_TYPE_BITS = SAVE_VALUE_SLOTS * SAVE_SLOT_BITS + 1 };
enum Lisp_Save_Type
  {
    SAVE_UNUSED,
    SAVE_INTEGER,
    SAVE_FUNCPOINTER,
    SAVE_POINTER,
    SAVE_OBJECT,
    SAVE_TYPE_INT_INT = SAVE_INTEGER + (SAVE_INTEGER << SAVE_SLOT_BITS),
    SAVE_TYPE_INT_INT_INT
      = (SAVE_INTEGER + (SAVE_TYPE_INT_INT << SAVE_SLOT_BITS)),
    SAVE_TYPE_OBJ_OBJ = SAVE_OBJECT + (SAVE_OBJECT << SAVE_SLOT_BITS),
    SAVE_TYPE_OBJ_OBJ_OBJ = SAVE_OBJECT + (SAVE_TYPE_OBJ_OBJ << SAVE_SLOT_BITS),
    SAVE_TYPE_OBJ_OBJ_OBJ_OBJ
      = SAVE_OBJECT + (SAVE_TYPE_OBJ_OBJ_OBJ << SAVE_SLOT_BITS),
    SAVE_TYPE_PTR_INT = SAVE_POINTER + (SAVE_INTEGER << SAVE_SLOT_BITS),
    SAVE_TYPE_PTR_OBJ = SAVE_POINTER + (SAVE_OBJECT << SAVE_SLOT_BITS),
    SAVE_TYPE_PTR_PTR = SAVE_POINTER + (SAVE_POINTER << SAVE_SLOT_BITS),
    SAVE_TYPE_FUNCPTR_PTR_OBJ
      = SAVE_FUNCPOINTER + (SAVE_TYPE_PTR_OBJ << SAVE_SLOT_BITS),
    SAVE_TYPE_MEMORY = SAVE_TYPE_PTR_INT + (1 << (SAVE_TYPE_BITS - 1))
  };
_Static_assert (((SAVE_UNUSED | SAVE_INTEGER | SAVE_FUNCPOINTER | SAVE_POINTER | SAVE_OBJECT) >> SAVE_SLOT_BITS) == 0, "verify (" "((SAVE_UNUSED | SAVE_INTEGER | SAVE_FUNCPOINTER | SAVE_POINTER | SAVE_OBJECT) >> SAVE_SLOT_BITS) == 0" ")")
      ;
typedef void (*voidfuncptr) (void);
struct Lisp_Save_Value
  {
    enum Lisp_Misc_Type type : 16;
    bool_bf gcmarkbit : 1;
    unsigned spacer : 32 - (16 + 1 + SAVE_TYPE_BITS);
    enum Lisp_Save_Type save_type : SAVE_TYPE_BITS;
    union {
      void *pointer;
      voidfuncptr funcpointer;
      ptrdiff_t integer;
      Lisp_Object object;
    } data[SAVE_VALUE_SLOTS];
  };
inline 
      _Bool
SAVE_VALUEP (Lisp_Object x)
{
  return MISCP (x) && XMISCTYPE (x) == Lisp_Misc_Save_Value;
}
inline struct Lisp_Save_Value *
XSAVE_VALUE (Lisp_Object a)
{
  ((void) (
 0 
 && (SAVE_VALUEP (a))));
  return XUNTAG (a, Lisp_Misc);
}
inline int
save_type (struct Lisp_Save_Value *v, int n)
{
  ((void) (
 0 
 && (0 <= n && n < SAVE_VALUE_SLOTS)));
  return (v->save_type >> (SAVE_SLOT_BITS * n) & ((1 << SAVE_SLOT_BITS) - 1));
}
inline void *
XSAVE_POINTER (Lisp_Object obj, int n)
{
  ((void) (
 0 
 && (save_type (XSAVE_VALUE (obj), n) == SAVE_POINTER)));
  return XSAVE_VALUE (obj)->data[n].pointer;
}
inline void
set_save_pointer (Lisp_Object obj, int n, void *val)
{
  ((void) (
 0 
 && (save_type (XSAVE_VALUE (obj), n) == SAVE_POINTER)));
  XSAVE_VALUE (obj)->data[n].pointer = val;
}
inline voidfuncptr
XSAVE_FUNCPOINTER (Lisp_Object obj, int n)
{
  ((void) (
 0 
 && (save_type (XSAVE_VALUE (obj), n) == SAVE_FUNCPOINTER)));
  return XSAVE_VALUE (obj)->data[n].funcpointer;
}
inline ptrdiff_t
XSAVE_INTEGER (Lisp_Object obj, int n)
{
  ((void) (
 0 
 && (save_type (XSAVE_VALUE (obj), n) == SAVE_INTEGER)));
  return XSAVE_VALUE (obj)->data[n].integer;
}
inline void
set_save_integer (Lisp_Object obj, int n, ptrdiff_t val)
{
  ((void) (
 0 
 && (save_type (XSAVE_VALUE (obj), n) == SAVE_INTEGER)));
  XSAVE_VALUE (obj)->data[n].integer = val;
}
inline Lisp_Object
XSAVE_OBJECT (Lisp_Object obj, int n)
{
  ((void) (
 0 
 && (save_type (XSAVE_VALUE (obj), n) == SAVE_OBJECT)));
  return XSAVE_VALUE (obj)->data[n].object;
}
struct Lisp_Finalizer
  {
    struct Lisp_Misc_Any base;
    struct Lisp_Finalizer *prev;
    struct Lisp_Finalizer *next;
    Lisp_Object function;
  };
inline 
      _Bool
FINALIZERP (Lisp_Object x)
{
  return MISCP (x) && XMISCTYPE (x) == Lisp_Misc_Finalizer;
}
inline struct Lisp_Finalizer *
XFINALIZER (Lisp_Object a)
{
  ((void) (
 0 
 && (FINALIZERP (a))));
  return XUNTAG (a, Lisp_Misc);
}
struct Lisp_Free
  {
    enum Lisp_Misc_Type type : 16;
    bool_bf gcmarkbit : 1;
    unsigned spacer : 15;
    union Lisp_Misc *chain;
  };
union Lisp_Misc
  {
    struct Lisp_Misc_Any u_any;
    struct Lisp_Free u_free;
    struct Lisp_Marker u_marker;
    struct Lisp_Overlay u_overlay;
    struct Lisp_Save_Value u_save_value;
    struct Lisp_Finalizer u_finalizer;
  };
inline union Lisp_Misc *
XMISC (Lisp_Object a)
{
  return XUNTAG (a, Lisp_Misc);
}
inline 
      _Bool
(MARKERP) (Lisp_Object x)
{
  return (MISCP (x) && XMISCTYPE (x) == Lisp_Misc_Marker);
}
inline struct Lisp_Marker *
XMARKER (Lisp_Object a)
{
  ((void) (
 0 
 && (MARKERP (a))));
  return XUNTAG (a, Lisp_Misc);
}
inline 
      _Bool
OVERLAYP (Lisp_Object x)
{
  return MISCP (x) && XMISCTYPE (x) == Lisp_Misc_Overlay;
}
inline struct Lisp_Overlay *
XOVERLAY (Lisp_Object a)
{
  ((void) (
 0 
 && (OVERLAYP (a))));
  return XUNTAG (a, Lisp_Misc);
}
struct Lisp_Intfwd
  {
    enum Lisp_Fwd_Type type;
    EMACS_INT *intvar;
  };
struct Lisp_Boolfwd
  {
    enum Lisp_Fwd_Type type;
   _Bool 
        *boolvar;
  };
struct Lisp_Objfwd
  {
    enum Lisp_Fwd_Type type;
    Lisp_Object *objvar;
  };
struct Lisp_Buffer_Objfwd
  {
    enum Lisp_Fwd_Type type;
    int offset;
    Lisp_Object predicate;
  };
struct Lisp_Buffer_Local_Value
  {
    bool_bf local_if_set : 1;
    bool_bf found : 1;
    union Lisp_Fwd *fwd;
    Lisp_Object where;
    Lisp_Object defcell;
    Lisp_Object valcell;
  };
struct Lisp_Kboard_Objfwd
  {
    enum Lisp_Fwd_Type type;
    int offset;
  };
union Lisp_Fwd
  {
    struct Lisp_Intfwd u_intfwd;
    struct Lisp_Boolfwd u_boolfwd;
    struct Lisp_Objfwd u_objfwd;
    struct Lisp_Buffer_Objfwd u_buffer_objfwd;
    struct Lisp_Kboard_Objfwd u_kboard_objfwd;
  };
inline enum Lisp_Fwd_Type
XFWDTYPE (union Lisp_Fwd *a)
{
  return a->u_intfwd.type;
}
inline 
      _Bool
BUFFER_OBJFWDP (union Lisp_Fwd *a)
{
  return XFWDTYPE (a) == Lisp_Fwd_Buffer_Obj;
}
inline struct Lisp_Buffer_Objfwd *
XBUFFER_OBJFWD (union Lisp_Fwd *a)
{
  ((void) (
 0 
 && (BUFFER_OBJFWDP (a))));
  return &a->u_buffer_objfwd;
}
struct Lisp_Float
  {
    union
    {
      double data;
      struct Lisp_Float *chain;
    } u;
  };
inline 
      _Bool
(FLOATP) (Lisp_Object x)
{
  return (XTYPE (x) == Lisp_Float);
}
inline struct Lisp_Float *
XFLOAT (Lisp_Object a)
{
  ((void) (
 0 
 && (FLOATP (a))));
  return XUNTAG (a, Lisp_Float);
}
inline double
XFLOAT_DATA (Lisp_Object f)
{
  return XFLOAT (f)->u.data;
}
enum
  {
    IEEE_FLOATING_POINT
      = (2 == 2 && 24 == 24
  && (-125) == -125 && 128 == 128)
  };
typedef unsigned char UCHAR;
enum Lisp_Compiled
  {
    COMPILED_ARGLIST = 0,
    COMPILED_BYTECODE = 1,
    COMPILED_CONSTANTS = 2,
    COMPILED_STACK_DEPTH = 3,
    COMPILED_DOC_STRING = 4,
    COMPILED_INTERACTIVE = 5
  };
enum char_bits
  {
    CHAR_ALT = 0x0400000,
    CHAR_SUPER = 0x0800000,
    CHAR_HYPER = 0x1000000,
    CHAR_SHIFT = 0x2000000,
    CHAR_CTL = 0x4000000,
    CHAR_META = 0x8000000,
    CHAR_MODIFIER_MASK =
      CHAR_ALT | CHAR_SUPER | CHAR_HYPER | CHAR_SHIFT | CHAR_CTL | CHAR_META,
    CHARACTERBITS = 22
  };
inline 
      _Bool
NUMBERP (Lisp_Object x)
{
  return INTEGERP (x) || FLOATP (x);
}
inline 
      _Bool
NATNUMP (Lisp_Object x)
{
  return INTEGERP (x) && 0 <= XINT (x);
}
inline 
      _Bool
RANGED_INTEGERP (intmax_t lo, Lisp_Object x, intmax_t hi)
{
  return INTEGERP (x) && lo <= XINT (x) && XINT (x) <= hi;
}
inline 
      _Bool
AUTOLOADP (Lisp_Object x)
{
  return CONSP (x) && EQ (builtin_lisp_symbol (235), XCAR (x));
}
inline 
      _Bool
WINDOW_CONFIGURATIONP (Lisp_Object a)
{
  return PSEUDOVECTORP (a, PVEC_WINDOW_CONFIGURATION);
}
inline 
      _Bool
COMPILEDP (Lisp_Object a)
{
  return PSEUDOVECTORP (a, PVEC_COMPILED);
}
inline 
      _Bool
FRAMEP (Lisp_Object a)
{
  return PSEUDOVECTORP (a, PVEC_FRAME);
}
inline 
      _Bool
RECORDP (Lisp_Object a)
{
  return PSEUDOVECTORP (a, PVEC_RECORD);
}
inline void
CHECK_RECORD (Lisp_Object x)
{
  CHECK_TYPE (RECORDP (x), builtin_lisp_symbol (913), x);
}
inline 
      _Bool
IMAGEP (Lisp_Object x)
{
  return CONSP (x) && EQ (XCAR (x), builtin_lisp_symbol (618));
}
inline 
      _Bool
ARRAYP (Lisp_Object x)
{
  return VECTORP (x) || STRINGP (x) || CHAR_TABLE_P (x) || BOOL_VECTOR_P (x);
}
inline void
CHECK_LIST (Lisp_Object x)
{
  CHECK_TYPE (CONSP (x) || NILP (x), builtin_lisp_symbol (719), x);
}
inline void
CHECK_LIST_END (Lisp_Object x, Lisp_Object y)
{
  CHECK_TYPE (NILP (x), builtin_lisp_symbol (719), y);
}
inline void
(CHECK_NUMBER) (Lisp_Object x)
{
  CHECK_TYPE (INTEGERP (x), builtin_lisp_symbol (642), x);
}
inline void
CHECK_STRING_CAR (Lisp_Object x)
{
  CHECK_TYPE (STRINGP (XCAR (x)), builtin_lisp_symbol (1011), XCAR (x));
}
inline ptrdiff_t
CHECK_VECTOR_OR_STRING (Lisp_Object x)
{
  if (VECTORP (x))
    return ASIZE (x);
  if (STRINGP (x))
    return SCHARS (x);
  wrong_type_argument (builtin_lisp_symbol (222), x);
}
inline void
CHECK_ARRAY (Lisp_Object x, Lisp_Object predicate)
{
  CHECK_TYPE (ARRAYP (x), predicate, x);
}
inline void
CHECK_NATNUM (Lisp_Object x)
{
  CHECK_TYPE (NATNUMP (x), builtin_lisp_symbol (1156), x);
}
inline double
XFLOATINT (Lisp_Object n)
{
  return FLOATP (n) ? XFLOAT_DATA (n) : XINT (n);
}
inline void
CHECK_NUMBER_OR_FLOAT (Lisp_Object x)
{
  CHECK_TYPE (NUMBERP (x), builtin_lisp_symbol (825), x);
}
inline void
CHECK_NUMBER_CAR (Lisp_Object x)
{
  Lisp_Object tmp = XCAR (x);
  CHECK_NUMBER (tmp);
  XSETCAR (x, tmp);
}
inline void
CHECK_NUMBER_CDR (Lisp_Object x)
{
  Lisp_Object tmp = XCDR (x);
  CHECK_NUMBER (tmp);
  XSETCDR (x, tmp);
}
extern void defsubr (struct Lisp_Subr *);
enum maxargs
  {
    MANY = -2,
    UNEVALLED = -1
  };
extern void defvar_lisp (struct Lisp_Objfwd *, const char *, Lisp_Object *);
extern void defvar_lisp_nopro (struct Lisp_Objfwd *, const char *, Lisp_Object *);
extern void defvar_bool (struct Lisp_Boolfwd *, const char *, 
                                                             _Bool 
                                                                  *);
extern void defvar_int (struct Lisp_Intfwd *, const char *, EMACS_INT *);
extern void defvar_kboard (struct Lisp_Kboard_Objfwd *, const char *, int);
enum specbind_tag {
  SPECPDL_UNWIND,
  SPECPDL_UNWIND_PTR,
  SPECPDL_UNWIND_INT,
  SPECPDL_UNWIND_VOID,
  SPECPDL_BACKTRACE,
  SPECPDL_LET,
  SPECPDL_LET_LOCAL,
  SPECPDL_LET_DEFAULT
};
union specbinding
  {
    enum specbind_tag kind : 8;
    struct {
      enum specbind_tag kind : 8;
      void (*func) (Lisp_Object);
      Lisp_Object arg;
    } unwind;
    struct {
      enum specbind_tag kind : 8;
      void (*func) (void *);
      void *arg;
    } unwind_ptr;
    struct {
      enum specbind_tag kind : 8;
      void (*func) (int);
      int arg;
    } unwind_int;
    struct {
      enum specbind_tag kind : 8;
      void (*func) (void);
    } unwind_void;
    struct {
      enum specbind_tag kind : 8;
      Lisp_Object symbol, old_value, where;
      Lisp_Object saved_value;
    } let;
    struct {
      enum specbind_tag kind : 8;
      bool_bf debug_on_exit : 1;
      Lisp_Object function;
      Lisp_Object *args;
      ptrdiff_t nargs;
    } bt;
  };
inline ptrdiff_t
SPECPDL_INDEX (void)
{
  return (current_thread->m_specpdl_ptr) - (current_thread->m_specpdl);
}
enum handlertype { CATCHER, CONDITION_CASE, CATCHER_ALL };
struct handler
{
  enum handlertype type;
  Lisp_Object tag_or_ch;
  Lisp_Object val;
  struct handler *next;
  struct handler *nextfree;
  Lisp_Object *bytecode_top;
  int bytecode_dest;
  sys_jmp_buf jmp;
  EMACS_INT f_lisp_eval_depth;
  ptrdiff_t pdlcount;
  int poll_suppress_count;
  int interrupt_input_blocked;
};
extern Lisp_Object memory_signal_data;
extern void maybe_quit (void);
inline void
rarely_quit (unsigned short int count)
{
  if (! count)
    maybe_quit ();
}
extern Lisp_Object Vascii_downcase_table;
extern Lisp_Object Vascii_canon_table;
void staticpro (Lisp_Object *);
struct window;
struct frame;
inline void
vcopy (Lisp_Object v, ptrdiff_t offset, Lisp_Object *args, ptrdiff_t count)
{
  ((void) (
 0 
 && (0 <= offset && 0 <= count && offset + count <= ASIZE (v))));
  memcpy (XVECTOR (v)->contents + offset, args, count * sizeof *args);
}
inline void
set_hash_key_slot (struct Lisp_Hash_Table *h, ptrdiff_t idx, Lisp_Object val)
{
  gc_aset (h->key_and_value, 2 * idx, val);
}
inline void
set_hash_value_slot (struct Lisp_Hash_Table *h, ptrdiff_t idx, Lisp_Object val)
{
  gc_aset (h->key_and_value, 2 * idx + 1, val);
}
inline void
set_symbol_function (Lisp_Object sym, Lisp_Object function)
{
  XSYMBOL (sym)->u.s.function = function;
}
inline void
set_symbol_plist (Lisp_Object sym, Lisp_Object plist)
{
  XSYMBOL (sym)->u.s.plist = plist;
}
inline void
set_symbol_next (Lisp_Object sym, struct Lisp_Symbol *next)
{
  XSYMBOL (sym)->u.s.next = next;
}
inline void
make_symbol_constant (Lisp_Object sym)
{
  XSYMBOL (sym)->u.s.trapped_write = SYMBOL_NOWRITE;
}
inline int
blv_found (struct Lisp_Buffer_Local_Value *blv)
{
  ((void) (
 0 
 && (blv->found == !EQ (blv->defcell, blv->valcell))));
  return blv->found;
}
inline void
set_overlay_plist (Lisp_Object overlay, Lisp_Object plist)
{
  XOVERLAY (overlay)->plist = plist;
}
inline INTERVAL
string_intervals (Lisp_Object s)
{
  return XSTRING (s)->u.s.intervals;
}
inline void
set_string_intervals (Lisp_Object s, INTERVAL i)
{
  XSTRING (s)->u.s.intervals = i;
}
inline void
set_char_table_defalt (Lisp_Object table, Lisp_Object val)
{
  XCHAR_TABLE (table)->defalt = val;
}
inline void
set_char_table_purpose (Lisp_Object table, Lisp_Object val)
{
  XCHAR_TABLE (table)->purpose = val;
}
inline void
set_char_table_extras (Lisp_Object table, ptrdiff_t idx, Lisp_Object val)
{
  ((void) (
 0 
 && (0 <= idx && idx < CHAR_TABLE_EXTRA_SLOTS (XCHAR_TABLE (table)))));
  XCHAR_TABLE (table)->extras[idx] = val;
}
inline void
set_char_table_contents (Lisp_Object table, ptrdiff_t idx, Lisp_Object val)
{
  ((void) (
 0 
 && (0 <= idx && idx < (1 << CHARTAB_SIZE_BITS_0))));
  XCHAR_TABLE (table)->contents[idx] = val;
}
inline void
set_sub_char_table_contents (Lisp_Object table, ptrdiff_t idx, Lisp_Object val)
{
  XSUB_CHAR_TABLE (table)->contents[idx] = val;
}
extern _Noreturn void wrong_choice (Lisp_Object, Lisp_Object);
extern void notify_variable_watchers (Lisp_Object, Lisp_Object,
          Lisp_Object, Lisp_Object);
extern Lisp_Object indirect_function (Lisp_Object);
extern Lisp_Object find_symbol_value (Lisp_Object);
enum Arith_Comparison {
  ARITH_EQUAL,
  ARITH_NOTEQUAL,
  ARITH_LESS,
  ARITH_GRTR,
  ARITH_LESS_OR_EQUAL,
  ARITH_GRTR_OR_EQUAL
};
extern Lisp_Object arithcompare (Lisp_Object num1, Lisp_Object num2,
                                 enum Arith_Comparison comparison);
extern Lisp_Object intbig_to_lisp (intmax_t);
extern Lisp_Object uintbig_to_lisp (uintmax_t);
extern intmax_t cons_to_signed (Lisp_Object, intmax_t, intmax_t);
extern uintmax_t cons_to_unsigned (Lisp_Object, uintmax_t);
extern struct Lisp_Symbol *indirect_variable (struct Lisp_Symbol *);
extern _Noreturn void args_out_of_range (Lisp_Object, Lisp_Object);
extern _Noreturn void args_out_of_range_3 (Lisp_Object, Lisp_Object,
        Lisp_Object);
extern _Noreturn void circular_list (Lisp_Object);
extern Lisp_Object do_symval_forwarding (union Lisp_Fwd *);
enum Set_Internal_Bind {
  SET_INTERNAL_SET,
  SET_INTERNAL_BIND,
  SET_INTERNAL_UNBIND,
  SET_INTERNAL_THREAD_SWITCH
};
extern void set_internal (Lisp_Object, Lisp_Object, Lisp_Object,
                          enum Set_Internal_Bind);
extern void set_default_internal (Lisp_Object, Lisp_Object,
                                  enum Set_Internal_Bind bindflag);
extern void syms_of_data (void);
extern void swap_in_global_binding (struct Lisp_Symbol *);
extern void syms_of_cmds (void);
extern void keys_of_cmds (void);
extern Lisp_Object detect_coding_system (const unsigned char *, ptrdiff_t,
                                         ptrdiff_t, 
                                                   _Bool
                                                       , 
                                                         _Bool
                                                             , Lisp_Object);
extern void init_coding (void);
extern void init_coding_once (void);
extern void syms_of_coding (void);
extern ptrdiff_t chars_in_text (const unsigned char *, ptrdiff_t);
extern ptrdiff_t multibyte_chars_in_text (const unsigned char *, ptrdiff_t);
extern void syms_of_character (void);
extern void init_charset (void);
extern void init_charset_once (void);
extern void syms_of_charset (void);
struct charset;
extern void init_syntax_once (void);
extern void syms_of_syntax (void);
enum { NEXT_ALMOST_PRIME_LIMIT = 11 };
extern EMACS_INT next_almost_prime (EMACS_INT) __attribute__ ((__const__));
extern Lisp_Object larger_vector (Lisp_Object, ptrdiff_t, ptrdiff_t);
extern void sweep_weak_hash_tables (void);
extern char *extract_data_from_object (Lisp_Object, ptrdiff_t *, ptrdiff_t *);
EMACS_UINT hash_string (char const *, ptrdiff_t);
EMACS_UINT sxhash (Lisp_Object, int);
Lisp_Object make_hash_table (struct hash_table_test, EMACS_INT, float, float,
        Lisp_Object, 
                    _Bool
                        );
ptrdiff_t hash_lookup (struct Lisp_Hash_Table *, Lisp_Object, EMACS_UINT *);
ptrdiff_t hash_put (struct Lisp_Hash_Table *, Lisp_Object, Lisp_Object,
      EMACS_UINT);
void hash_remove_from_table (struct Lisp_Hash_Table *, Lisp_Object);
extern struct hash_table_test const hashtest_eq, hashtest_eql, hashtest_equal;
extern void validate_subarray (Lisp_Object, Lisp_Object, Lisp_Object,
          ptrdiff_t, ptrdiff_t *, ptrdiff_t *);
extern Lisp_Object substring_both (Lisp_Object, ptrdiff_t, ptrdiff_t,
       ptrdiff_t, ptrdiff_t);
extern Lisp_Object merge (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object do_yes_or_no_p (Lisp_Object);
extern Lisp_Object concat2 (Lisp_Object, Lisp_Object);
extern Lisp_Object concat3 (Lisp_Object, Lisp_Object, Lisp_Object);
extern 
      _Bool 
           equal_no_quit (Lisp_Object, Lisp_Object);
extern Lisp_Object nconc2 (Lisp_Object, Lisp_Object);
extern Lisp_Object assq_no_quit (Lisp_Object, Lisp_Object);
extern Lisp_Object assoc_no_quit (Lisp_Object, Lisp_Object);
extern void clear_string_char_byte_cache (void);
extern ptrdiff_t string_char_to_byte (Lisp_Object, ptrdiff_t);
extern ptrdiff_t string_byte_to_char (Lisp_Object, ptrdiff_t);
extern Lisp_Object string_to_multibyte (Lisp_Object);
extern Lisp_Object string_make_unibyte (Lisp_Object);
extern void syms_of_fns (void);
extern void syms_of_floatfns (void);
extern Lisp_Object fmod_float (Lisp_Object x, Lisp_Object y);
extern void syms_of_fringe (void);
extern void init_fringe (void);
extern void mark_fringe_data (void);
extern void init_fringe_once (void);
extern int x_bitmap_mask (struct frame *, ptrdiff_t);
extern void reset_image_types (void);
extern void syms_of_image (void);
extern void move_gap_both (ptrdiff_t, ptrdiff_t);
extern _Noreturn void buffer_overflow (void);
extern void make_gap (ptrdiff_t);
extern void make_gap_1 (struct buffer *, ptrdiff_t);
extern ptrdiff_t copy_text (const unsigned char *, unsigned char *,
       ptrdiff_t, 
                 _Bool
                     , 
                       _Bool
                           );
extern int count_combining_before (const unsigned char *,
       ptrdiff_t, ptrdiff_t, ptrdiff_t);
extern int count_combining_after (const unsigned char *,
      ptrdiff_t, ptrdiff_t, ptrdiff_t);
extern void insert (const char *, ptrdiff_t);
extern void insert_and_inherit (const char *, ptrdiff_t);
extern void insert_1_both (const char *, ptrdiff_t, ptrdiff_t,
     _Bool
         , 
           _Bool
               , 
                 _Bool
                     );
extern void insert_from_gap (ptrdiff_t, ptrdiff_t, 
                                                  _Bool 
                                                       text_at_gap_tail);
extern void insert_from_string (Lisp_Object, ptrdiff_t, ptrdiff_t,
    ptrdiff_t, ptrdiff_t, 
                         _Bool
                             );
extern void insert_from_buffer (struct buffer *, ptrdiff_t, ptrdiff_t, 
                                                                      _Bool
                                                                          );
extern void insert_char (int);
extern void insert_string (const char *);
extern void insert_before_markers (const char *, ptrdiff_t);
extern void insert_before_markers_and_inherit (const char *, ptrdiff_t);
extern void insert_from_string_before_markers (Lisp_Object, ptrdiff_t,
            ptrdiff_t, ptrdiff_t,
            ptrdiff_t, 
                      _Bool
                          );
extern void del_range (ptrdiff_t, ptrdiff_t);
extern Lisp_Object del_range_1 (ptrdiff_t, ptrdiff_t, 
                                                     _Bool
                                                         , 
                                                           _Bool
                                                               );
extern void del_range_byte (ptrdiff_t, ptrdiff_t);
extern void del_range_both (ptrdiff_t, ptrdiff_t, ptrdiff_t, ptrdiff_t, 
                                                                       _Bool
                                                                           );
extern Lisp_Object del_range_2 (ptrdiff_t, ptrdiff_t,
    ptrdiff_t, ptrdiff_t, 
                         _Bool
                             );
extern void modify_text (ptrdiff_t, ptrdiff_t);
extern void prepare_to_modify_buffer (ptrdiff_t, ptrdiff_t, ptrdiff_t *);
extern void prepare_to_modify_buffer_1 (ptrdiff_t, ptrdiff_t, ptrdiff_t *);
extern void invalidate_buffer_caches (struct buffer *, ptrdiff_t, ptrdiff_t);
extern void signal_after_change (ptrdiff_t, ptrdiff_t, ptrdiff_t);
extern void adjust_after_insert (ptrdiff_t, ptrdiff_t, ptrdiff_t,
     ptrdiff_t, ptrdiff_t);
extern void adjust_markers_for_delete (ptrdiff_t, ptrdiff_t,
           ptrdiff_t, ptrdiff_t);
extern void adjust_markers_bytepos (ptrdiff_t, ptrdiff_t,
        ptrdiff_t, ptrdiff_t, int);
extern void replace_range (ptrdiff_t, ptrdiff_t, Lisp_Object, 
                                                             _Bool
                                                                 , 
                                                                   _Bool
                                                                       , 
                                                                         _Bool
                                                                             , 
                                                                               _Bool
                                                                                   );
extern void replace_range_2 (ptrdiff_t, ptrdiff_t, ptrdiff_t, ptrdiff_t,
        const char *, ptrdiff_t, ptrdiff_t, 
                                           _Bool
                                               );
extern void syms_of_insdel (void);
extern Lisp_Object Vwindow_system;
extern Lisp_Object sit_for (Lisp_Object, 
                                        _Bool
                                            , int);
extern 
      _Bool 
           noninteractive_need_newline;
extern Lisp_Object echo_area_buffer[2];
extern void add_to_log (char const *, ...);
extern void vadd_to_log (char const *, va_list);
extern void check_message_stack (void);
extern void setup_echo_area_for_printing (
                                         _Bool
                                             );
extern 
      _Bool 
           push_message (void);
extern void pop_message_unwind (void);
extern Lisp_Object restore_message_unwind (Lisp_Object);
extern void restore_message (void);
extern Lisp_Object current_message (void);
extern void clear_message (
                          _Bool
                              , 
                                _Bool
                                    );
extern void message (const char *, ...) __attribute__ ((__format__ (__printf__, 1, 2)));
extern void message1 (const char *);
extern void message1_nolog (const char *);
extern void message3 (Lisp_Object);
extern void message3_nolog (Lisp_Object);
extern void message_dolog (const char *, ptrdiff_t, 
                                                   _Bool
                                                       , 
                                                         _Bool
                                                             );
extern void message_with_string (const char *, Lisp_Object, 
                                                           _Bool
                                                               );
extern void message_log_maybe_newline (void);
extern void update_echo_area (void);
extern void truncate_echo_area (ptrdiff_t);
extern void redisplay (void);
void set_frame_cursor_types (struct frame *, Lisp_Object);
extern void syms_of_xdisp (void);
extern void init_xdisp (void);
extern Lisp_Object safe_eval (Lisp_Object);
extern 
      _Bool 
           pos_visible_p (struct window *, ptrdiff_t, int *,
      int *, int *, int *, int *, int *);
extern void syms_of_xsettings (void);
extern void memory_warnings (void *, void (*warnfun) (const char *));
extern void parse_str_as_multibyte (const unsigned char *, ptrdiff_t,
        ptrdiff_t *, ptrdiff_t *);
extern void *my_heap_start (void);
extern void check_pure_size (void);
extern void free_misc (Lisp_Object);
extern void allocate_string_data (struct Lisp_String *, EMACS_INT, EMACS_INT);
extern void malloc_warning (const char *);
extern _Noreturn void memory_full (size_t);
extern _Noreturn void buffer_memory_full (ptrdiff_t);
extern 
      _Bool 
           survives_gc_p (Lisp_Object);
extern void mark_object (Lisp_Object);
extern void alloc_unexec_pre (void);
extern void alloc_unexec_post (void);
extern void mark_stack (char *, char *);
extern void flush_stack_call_func (void (*func) (void *arg), void *arg);
extern const char *pending_malloc_warning;
extern Lisp_Object zero_vector;
extern EMACS_INT consing_since_gc;
extern EMACS_INT gc_relative_threshold;
extern EMACS_INT memory_full_cons_threshold;
extern Lisp_Object list1 (Lisp_Object);
extern Lisp_Object list2 (Lisp_Object, Lisp_Object);
extern Lisp_Object list3 (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object list4 (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object list5 (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object,
     Lisp_Object);
enum constype {CONSTYPE_HEAP, CONSTYPE_PURE};
extern Lisp_Object listn (enum constype, ptrdiff_t, Lisp_Object, ...);
inline Lisp_Object
list2i (EMACS_INT x, EMACS_INT y)
{
  return list2 (make_number (x), make_number (y));
}
inline Lisp_Object
list3i (EMACS_INT x, EMACS_INT y, EMACS_INT w)
{
  return list3 (make_number (x), make_number (y), make_number (w));
}
inline Lisp_Object
list4i (EMACS_INT x, EMACS_INT y, EMACS_INT w, EMACS_INT h)
{
  return list4 (make_number (x), make_number (y),
  make_number (w), make_number (h));
}
extern Lisp_Object make_uninit_bool_vector (EMACS_INT);
extern Lisp_Object bool_vector_fill (Lisp_Object, Lisp_Object);
extern _Noreturn void string_overflow (void);
extern Lisp_Object make_string (const char *, ptrdiff_t);
extern Lisp_Object make_formatted_string (char *, const char *, ...)
  __attribute__ ((__format__ (__printf__, 2, 3)));
extern Lisp_Object make_unibyte_string (const char *, ptrdiff_t);
inline Lisp_Object
build_unibyte_string (const char *str)
{
  return make_unibyte_string (str, strlen (str));
}
extern Lisp_Object make_multibyte_string (const char *, ptrdiff_t, ptrdiff_t);
extern Lisp_Object make_event_array (ptrdiff_t, Lisp_Object *);
extern Lisp_Object make_uninit_string (EMACS_INT);
extern Lisp_Object make_uninit_multibyte_string (EMACS_INT, EMACS_INT);
extern Lisp_Object make_string_from_bytes (const char *, ptrdiff_t, ptrdiff_t);
extern Lisp_Object make_specified_string (const char *,
       ptrdiff_t, ptrdiff_t, 
                            _Bool
                                );
extern Lisp_Object make_pure_string (const char *, ptrdiff_t, ptrdiff_t, 
                                                                        _Bool
                                                                            );
extern Lisp_Object make_pure_c_string (const char *, ptrdiff_t);
inline Lisp_Object
build_pure_c_string (const char *str)
{
  return make_pure_c_string (str, strlen (str));
}
inline Lisp_Object
build_string (const char *str)
{
  return make_string (str, strlen (str));
}
extern Lisp_Object pure_cons (Lisp_Object, Lisp_Object);
extern void make_byte_code (struct Lisp_Vector *);
extern struct Lisp_Vector *allocate_vector (EMACS_INT);
inline Lisp_Object
make_uninit_vector (ptrdiff_t size)
{
  Lisp_Object v;
  struct Lisp_Vector *p;
  p = allocate_vector (size);
  ((v) = make_lisp_ptr (p, Lisp_Vectorlike));
  return v;
}
inline Lisp_Object
make_uninit_sub_char_table (int depth, int min_char)
{
  int slots = SUB_CHAR_TABLE_OFFSET + chartab_size[depth];
  Lisp_Object v = make_uninit_vector (slots);
  ((XVECTOR (v))->header.size |= (
 (9223372036854775807L) 
 - 
 (9223372036854775807L) 
 / 2) | ((PVEC_SUB_CHAR_TABLE) << PSEUDOVECTOR_AREA_BITS));
  XSUB_CHAR_TABLE (v)->depth = depth;
  XSUB_CHAR_TABLE (v)->min_char = min_char;
  return v;
}
extern struct Lisp_Vector *allocate_pseudovector (int, int, int,
        enum pvec_type);
extern 
      _Bool 
           gc_in_progress;
extern Lisp_Object make_float (double);
extern void display_malloc_warning (void);
extern ptrdiff_t inhibit_garbage_collection (void);
extern Lisp_Object make_save_int_int_int (ptrdiff_t, ptrdiff_t, ptrdiff_t);
extern Lisp_Object make_save_obj_obj_obj_obj (Lisp_Object, Lisp_Object,
           Lisp_Object, Lisp_Object);
extern Lisp_Object make_save_ptr (void *);
extern Lisp_Object make_save_ptr_int (void *, ptrdiff_t);
extern Lisp_Object make_save_ptr_ptr (void *, void *);
extern Lisp_Object make_save_funcptr_ptr_obj (void (*) (void), void *,
           Lisp_Object);
extern Lisp_Object make_save_memory (Lisp_Object *, ptrdiff_t);
extern void free_save_value (Lisp_Object);
extern Lisp_Object build_overlay (Lisp_Object, Lisp_Object, Lisp_Object);
extern void free_cons (struct Lisp_Cons *);
extern void init_alloc_once (void);
extern void init_alloc (void);
extern void syms_of_alloc (void);
extern struct buffer * allocate_buffer (void);
extern int valid_lisp_object_p (Lisp_Object);
inline void (check_cons_list) (void) { ((void) 0); }
extern void malloc_enable_thread (void);
extern Lisp_Object copy_char_table (Lisp_Object);
extern Lisp_Object char_table_ref_and_range (Lisp_Object, int,
                                             int *, int *);
extern void char_table_set_range (Lisp_Object, int, int, Lisp_Object);
extern void map_char_table (void (*) (Lisp_Object, Lisp_Object,
                            Lisp_Object),
                            Lisp_Object, Lisp_Object, Lisp_Object);
extern void map_char_table_for_charset (void (*c_function) (Lisp_Object, Lisp_Object),
     Lisp_Object, Lisp_Object,
     Lisp_Object, struct charset *,
     unsigned, unsigned);
extern Lisp_Object uniprop_table (Lisp_Object);
extern void syms_of_chartab (void);
extern Lisp_Object Vprin1_to_string_buffer;
extern void debug_print (Lisp_Object) __attribute__((externally_visible));
extern void temp_output_buffer_setup (const char *);
extern int print_level;
extern void print_error_message (Lisp_Object, Lisp_Object, const char *,
     Lisp_Object);
extern Lisp_Object internal_with_output_to_temp_buffer
        (const char *, Lisp_Object (*) (Lisp_Object), Lisp_Object);
extern int float_to_string (char *, double);
extern void init_print_once (void);
extern void syms_of_print (void);
extern ptrdiff_t doprnt (char *, ptrdiff_t, const char *, const char *,
    va_list);
extern ptrdiff_t esprintf (char *, char const *, ...)
  __attribute__ ((__format__ (__printf__, 2, 3)));
extern ptrdiff_t exprintf (char **, ptrdiff_t *, char const *, ptrdiff_t,
      char const *, ...)
  __attribute__ ((__format__ (__printf__, 5, 6)));
extern ptrdiff_t evxprintf (char **, ptrdiff_t *, char const *, ptrdiff_t,
       char const *, va_list)
  __attribute__ ((__format__ (__printf__, 5, 0)));
extern Lisp_Object check_obarray (Lisp_Object);
extern Lisp_Object intern_1 (const char *, ptrdiff_t);
extern Lisp_Object intern_c_string_1 (const char *, ptrdiff_t);
extern Lisp_Object intern_driver (Lisp_Object, Lisp_Object, Lisp_Object);
extern void init_symbol (Lisp_Object, Lisp_Object);
extern Lisp_Object oblookup (Lisp_Object, const char *, ptrdiff_t, ptrdiff_t);
inline void
LOADHIST_ATTACH (Lisp_Object x)
{
  if (initialized)
    globals.f_Vcurrent_load_list = Fcons (x, globals.f_Vcurrent_load_list);
}
extern int openp (Lisp_Object, Lisp_Object, Lisp_Object,
                  Lisp_Object *, Lisp_Object, 
                                             _Bool
                                                 );
enum { S2N_IGNORE_TRAILING = 1, S2N_OVERFLOW_TO_FLOAT = 2 };
extern Lisp_Object string_to_number (char const *, int, int);
extern void map_obarray (Lisp_Object, void (*) (Lisp_Object, Lisp_Object),
                         Lisp_Object);
extern void dir_warning (const char *, Lisp_Object);
extern void init_obarray (void);
extern void init_lread (void);
extern void syms_of_lread (void);
inline Lisp_Object
intern (const char *str)
{
  return intern_1 (str, strlen (str));
}
inline Lisp_Object
intern_c_string (const char *str)
{
  return intern_c_string_1 (str, strlen (str));
}
extern Lisp_Object Vautoload_queue;
extern Lisp_Object Vrun_hooks;
extern Lisp_Object Vsignaling_function;
extern Lisp_Object inhibit_lisp_code;
extern void run_hook (Lisp_Object);
extern void run_hook_with_args_2 (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object run_hook_with_args (ptrdiff_t nargs, Lisp_Object *args,
           Lisp_Object (*funcall)
           (ptrdiff_t nargs, Lisp_Object *args));
extern Lisp_Object quit (void);
inline _Noreturn void
xsignal (Lisp_Object error_symbol, Lisp_Object data)
{
  Fsignal (error_symbol, data);
}
extern _Noreturn void xsignal0 (Lisp_Object);
extern _Noreturn void xsignal1 (Lisp_Object, Lisp_Object);
extern _Noreturn void xsignal2 (Lisp_Object, Lisp_Object, Lisp_Object);
extern _Noreturn void xsignal3 (Lisp_Object, Lisp_Object, Lisp_Object,
    Lisp_Object);
extern _Noreturn void signal_error (const char *, Lisp_Object);
extern 
      _Bool 
           FUNCTIONP (Lisp_Object);
extern Lisp_Object funcall_subr (struct Lisp_Subr *subr, ptrdiff_t numargs, Lisp_Object *arg_vector);
extern Lisp_Object eval_sub (Lisp_Object form);
extern Lisp_Object apply1 (Lisp_Object, Lisp_Object);
extern Lisp_Object call0 (Lisp_Object);
extern Lisp_Object call1 (Lisp_Object, Lisp_Object);
extern Lisp_Object call2 (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object call3 (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object call4 (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object call5 (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object call6 (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object call7 (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object call8 (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object internal_catch (Lisp_Object, Lisp_Object (*) (Lisp_Object), Lisp_Object);
extern Lisp_Object internal_lisp_condition_case (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object internal_condition_case (Lisp_Object (*) (void), Lisp_Object, Lisp_Object (*) (Lisp_Object));
extern Lisp_Object internal_condition_case_1 (Lisp_Object (*) (Lisp_Object), Lisp_Object, Lisp_Object, Lisp_Object (*) (Lisp_Object));
extern Lisp_Object internal_condition_case_2 (Lisp_Object (*) (Lisp_Object, Lisp_Object), Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object (*) (Lisp_Object));
extern Lisp_Object internal_condition_case_n
    (Lisp_Object (*) (ptrdiff_t, Lisp_Object *), ptrdiff_t, Lisp_Object *,
     Lisp_Object, Lisp_Object (*) (Lisp_Object, ptrdiff_t, Lisp_Object *));
extern Lisp_Object internal_catch_all (Lisp_Object (*) (void *), void *, Lisp_Object (*) (Lisp_Object));
extern struct handler *push_handler (Lisp_Object, enum handlertype);
extern struct handler *push_handler_nosignal (Lisp_Object, enum handlertype);
extern void specbind (Lisp_Object, Lisp_Object);
extern void record_unwind_protect (void (*) (Lisp_Object), Lisp_Object);
extern void record_unwind_protect_ptr (void (*) (void *), void *);
extern void record_unwind_protect_int (void (*) (int), int);
extern void record_unwind_protect_void (void (*) (void));
extern void record_unwind_protect_nothing (void);
extern void clear_unwind_protect (ptrdiff_t);
extern void set_unwind_protect (ptrdiff_t, void (*) (Lisp_Object), Lisp_Object);
extern void set_unwind_protect_ptr (ptrdiff_t, void (*) (void *), void *);
extern Lisp_Object unbind_to (ptrdiff_t, Lisp_Object);
extern void rebind_for_thread_switch (void);
extern void unbind_for_thread_switch (struct thread_state *);
extern _Noreturn void error (const char *, ...) __attribute__ ((__format__ (__printf__, 1, 2)));
extern _Noreturn void verror (const char *, va_list)
  __attribute__ ((__format__ (__printf__, 1, 0)));
extern Lisp_Object vformat_string (const char *, va_list)
  __attribute__ ((__format__ (__printf__, 1, 0)));
extern void un_autoload (Lisp_Object);
extern Lisp_Object call_debugger (Lisp_Object arg);
extern void init_eval_once (void);
extern Lisp_Object safe_call (ptrdiff_t, Lisp_Object, ...);
extern Lisp_Object safe_call1 (Lisp_Object, Lisp_Object);
extern Lisp_Object safe_call2 (Lisp_Object, Lisp_Object, Lisp_Object);
extern void init_eval (void);
extern void syms_of_eval (void);
extern void prog_ignore (Lisp_Object);
extern ptrdiff_t record_in_backtrace (Lisp_Object, Lisp_Object *, ptrdiff_t);
extern void mark_specpdl (union specbinding *first, union specbinding *ptr);
extern void get_backtrace (Lisp_Object array);
Lisp_Object backtrace_top_function (void);
extern 
      _Bool 
           let_shadows_buffer_binding_p (struct Lisp_Symbol *symbol);
typedef struct emacs_env_26 emacs_env;
typedef struct emacs_value_tag *emacs_value;
enum { emacs_variadic_function = -2 };
struct emacs_runtime
{
  ptrdiff_t size;
  struct emacs_runtime_private *private_members;
  emacs_env *(*get_environment) (struct emacs_runtime *ert)
    __attribute__((__nonnull__(1)));
};
enum emacs_funcall_exit
{
  emacs_funcall_exit_return = 0,
  emacs_funcall_exit_signal = 1,
  emacs_funcall_exit_throw = 2
};
struct emacs_env_25
{
  ptrdiff_t size;
  struct emacs_env_private *private_members;
  emacs_value (*make_global_ref) (emacs_env *env,
      emacs_value any_reference)
    __attribute__((__nonnull__(1)));
  void (*free_global_ref) (emacs_env *env,
      emacs_value global_reference)
    __attribute__((__nonnull__(1)));
  enum emacs_funcall_exit (*non_local_exit_check) (emacs_env *env)
    __attribute__((__nonnull__(1)));
  void (*non_local_exit_clear) (emacs_env *env)
    __attribute__((__nonnull__(1)));
  enum emacs_funcall_exit (*non_local_exit_get)
    (emacs_env *env,
     emacs_value *non_local_exit_symbol_out,
     emacs_value *non_local_exit_data_out)
    __attribute__((__nonnull__(1, 2, 3)));
  void (*non_local_exit_signal) (emacs_env *env,
     emacs_value non_local_exit_symbol,
     emacs_value non_local_exit_data)
    __attribute__((__nonnull__(1)));
  void (*non_local_exit_throw) (emacs_env *env,
    emacs_value tag,
    emacs_value value)
    __attribute__((__nonnull__(1)));
  emacs_value (*make_function) (emacs_env *env,
    ptrdiff_t min_arity,
    ptrdiff_t max_arity,
    emacs_value (*function) (emacs_env *env,
        ptrdiff_t nargs,
        emacs_value args[],
        void *)
                                  __attribute__((__nonnull__(1))),
    const char *documentation,
    void *data)
    __attribute__((__nonnull__(1, 4)));
  emacs_value (*funcall) (emacs_env *env,
                          emacs_value function,
                          ptrdiff_t nargs,
                          emacs_value args[])
    __attribute__((__nonnull__(1)));
  emacs_value (*intern) (emacs_env *env,
                         const char *symbol_name)
    __attribute__((__nonnull__(1, 2)));
  emacs_value (*type_of) (emacs_env *env,
     emacs_value value)
    __attribute__((__nonnull__(1)));
 _Bool 
      (*is_not_nil) (emacs_env *env, emacs_value value)
    __attribute__((__nonnull__(1)));
 _Bool 
      (*eq) (emacs_env *env, emacs_value a, emacs_value b)
    __attribute__((__nonnull__(1)));
  intmax_t (*extract_integer) (emacs_env *env, emacs_value value)
    __attribute__((__nonnull__(1)));
  emacs_value (*make_integer) (emacs_env *env, intmax_t value)
    __attribute__((__nonnull__(1)));
  double (*extract_float) (emacs_env *env, emacs_value value)
    __attribute__((__nonnull__(1)));
  emacs_value (*make_float) (emacs_env *env, double value)
    __attribute__((__nonnull__(1)));
 _Bool 
      (*copy_string_contents) (emacs_env *env,
                                emacs_value value,
                                char *buffer,
                                ptrdiff_t *size_inout)
    __attribute__((__nonnull__(1, 4)));
  emacs_value (*make_string) (emacs_env *env,
         const char *contents, ptrdiff_t length)
    __attribute__((__nonnull__(1, 2)));
  emacs_value (*make_user_ptr) (emacs_env *env,
    void (*fin) (void *) ,
    void *ptr)
    __attribute__((__nonnull__(1)));
  void *(*get_user_ptr) (emacs_env *env, emacs_value uptr)
    __attribute__((__nonnull__(1)));
  void (*set_user_ptr) (emacs_env *env, emacs_value uptr, void *ptr)
    __attribute__((__nonnull__(1)));
  void (*(*get_user_finalizer) (emacs_env *env, emacs_value uptr))
    (void *) __attribute__((__nonnull__(1)));
  void (*set_user_finalizer) (emacs_env *env,
         emacs_value uptr,
         void (*fin) (void *) )
    __attribute__((__nonnull__(1)));
  emacs_value (*vec_get) (emacs_env *env, emacs_value vec, ptrdiff_t i)
    __attribute__((__nonnull__(1)));
  void (*vec_set) (emacs_env *env, emacs_value vec, ptrdiff_t i,
     emacs_value val)
    __attribute__((__nonnull__(1)));
  ptrdiff_t (*vec_size) (emacs_env *env, emacs_value vec)
    __attribute__((__nonnull__(1)));
};
struct emacs_env_26
{
  ptrdiff_t size;
  struct emacs_env_private *private_members;
  emacs_value (*make_global_ref) (emacs_env *env,
      emacs_value any_reference)
    __attribute__((__nonnull__(1)));
  void (*free_global_ref) (emacs_env *env,
      emacs_value global_reference)
    __attribute__((__nonnull__(1)));
  enum emacs_funcall_exit (*non_local_exit_check) (emacs_env *env)
    __attribute__((__nonnull__(1)));
  void (*non_local_exit_clear) (emacs_env *env)
    __attribute__((__nonnull__(1)));
  enum emacs_funcall_exit (*non_local_exit_get)
    (emacs_env *env,
     emacs_value *non_local_exit_symbol_out,
     emacs_value *non_local_exit_data_out)
    __attribute__((__nonnull__(1, 2, 3)));
  void (*non_local_exit_signal) (emacs_env *env,
     emacs_value non_local_exit_symbol,
     emacs_value non_local_exit_data)
    __attribute__((__nonnull__(1)));
  void (*non_local_exit_throw) (emacs_env *env,
    emacs_value tag,
    emacs_value value)
    __attribute__((__nonnull__(1)));
  emacs_value (*make_function) (emacs_env *env,
    ptrdiff_t min_arity,
    ptrdiff_t max_arity,
    emacs_value (*function) (emacs_env *env,
        ptrdiff_t nargs,
        emacs_value args[],
        void *)
                                  __attribute__((__nonnull__(1))),
    const char *documentation,
    void *data)
    __attribute__((__nonnull__(1, 4)));
  emacs_value (*funcall) (emacs_env *env,
                          emacs_value function,
                          ptrdiff_t nargs,
                          emacs_value args[])
    __attribute__((__nonnull__(1)));
  emacs_value (*intern) (emacs_env *env,
                         const char *symbol_name)
    __attribute__((__nonnull__(1, 2)));
  emacs_value (*type_of) (emacs_env *env,
     emacs_value value)
    __attribute__((__nonnull__(1)));
 _Bool 
      (*is_not_nil) (emacs_env *env, emacs_value value)
    __attribute__((__nonnull__(1)));
 _Bool 
      (*eq) (emacs_env *env, emacs_value a, emacs_value b)
    __attribute__((__nonnull__(1)));
  intmax_t (*extract_integer) (emacs_env *env, emacs_value value)
    __attribute__((__nonnull__(1)));
  emacs_value (*make_integer) (emacs_env *env, intmax_t value)
    __attribute__((__nonnull__(1)));
  double (*extract_float) (emacs_env *env, emacs_value value)
    __attribute__((__nonnull__(1)));
  emacs_value (*make_float) (emacs_env *env, double value)
    __attribute__((__nonnull__(1)));
 _Bool 
      (*copy_string_contents) (emacs_env *env,
                                emacs_value value,
                                char *buffer,
                                ptrdiff_t *size_inout)
    __attribute__((__nonnull__(1, 4)));
  emacs_value (*make_string) (emacs_env *env,
         const char *contents, ptrdiff_t length)
    __attribute__((__nonnull__(1, 2)));
  emacs_value (*make_user_ptr) (emacs_env *env,
    void (*fin) (void *) ,
    void *ptr)
    __attribute__((__nonnull__(1)));
  void *(*get_user_ptr) (emacs_env *env, emacs_value uptr)
    __attribute__((__nonnull__(1)));
  void (*set_user_ptr) (emacs_env *env, emacs_value uptr, void *ptr)
    __attribute__((__nonnull__(1)));
  void (*(*get_user_finalizer) (emacs_env *env, emacs_value uptr))
    (void *) __attribute__((__nonnull__(1)));
  void (*set_user_finalizer) (emacs_env *env,
         emacs_value uptr,
         void (*fin) (void *) )
    __attribute__((__nonnull__(1)));
  emacs_value (*vec_get) (emacs_env *env, emacs_value vec, ptrdiff_t i)
    __attribute__((__nonnull__(1)));
  void (*vec_set) (emacs_env *env, emacs_value vec, ptrdiff_t i,
     emacs_value val)
    __attribute__((__nonnull__(1)));
  ptrdiff_t (*vec_size) (emacs_env *env, emacs_value vec)
    __attribute__((__nonnull__(1)));
 _Bool 
      (*should_quit) (emacs_env *env)
    __attribute__((__nonnull__(1)));
};
extern int emacs_module_init (struct emacs_runtime *ert)
  __attribute__((__nonnull__(1)));
typedef emacs_value (*emacs_subr) (emacs_env *, ptrdiff_t,
       emacs_value [], void *);
struct Lisp_Module_Function
{
  union vectorlike_header header;
  Lisp_Object documentation;
  ptrdiff_t min_arity, max_arity;
  emacs_subr subr;
  void *data;
};
inline 
      _Bool
MODULE_FUNCTIONP (Lisp_Object o)
{
  return PSEUDOVECTORP (o, PVEC_MODULE_FUNCTION);
}
inline struct Lisp_Module_Function *
XMODULE_FUNCTION (Lisp_Object o)
{
  ((void) (
 0 
 && (MODULE_FUNCTIONP (o))));
  return XUNTAG (o, Lisp_Vectorlike);
}
extern void mark_threads (void);
extern void insert1 (Lisp_Object);
extern Lisp_Object save_excursion_save (void);
extern Lisp_Object save_restriction_save (void);
extern void save_excursion_restore (Lisp_Object);
extern void save_restriction_restore (Lisp_Object);
extern _Noreturn void time_overflow (void);
extern Lisp_Object make_buffer_string (ptrdiff_t, ptrdiff_t, 
                                                            _Bool
                                                                );
extern Lisp_Object make_buffer_string_both (ptrdiff_t, ptrdiff_t, ptrdiff_t,
         ptrdiff_t, 
                   _Bool
                       );
extern void init_editfns (
                         _Bool
                             );
extern void syms_of_editfns (void);
extern 
      _Bool 
           mouse_face_overlay_overlaps (Lisp_Object);
extern Lisp_Object disable_line_numbers_overlay_at_eob (void);
extern _Noreturn void nsberror (Lisp_Object);
extern void adjust_overlays_for_insert (ptrdiff_t, ptrdiff_t);
extern void adjust_overlays_for_delete (ptrdiff_t, ptrdiff_t);
extern void fix_start_end_in_overlays (ptrdiff_t, ptrdiff_t);
extern void report_overlay_modification (Lisp_Object, Lisp_Object, 
                                                                  _Bool
                                                                      ,
                                         Lisp_Object, Lisp_Object, Lisp_Object);
extern 
      _Bool 
           overlay_touches_p (ptrdiff_t);
extern Lisp_Object other_buffer_safely (Lisp_Object);
extern Lisp_Object get_truename_buffer (Lisp_Object);
extern void init_buffer_once (void);
extern void init_buffer (int);
extern void syms_of_buffer (void);
extern void keys_of_buffer (void);
extern ptrdiff_t marker_position (Lisp_Object);
extern ptrdiff_t marker_byte_position (Lisp_Object);
extern void clear_charpos_cache (struct buffer *);
extern ptrdiff_t buf_charpos_to_bytepos (struct buffer *, ptrdiff_t);
extern ptrdiff_t buf_bytepos_to_charpos (struct buffer *, ptrdiff_t);
extern void detach_marker (Lisp_Object);
extern void unchain_marker (struct Lisp_Marker *);
extern Lisp_Object set_marker_restricted (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object set_marker_both (Lisp_Object, Lisp_Object, ptrdiff_t, ptrdiff_t);
extern Lisp_Object set_marker_restricted_both (Lisp_Object, Lisp_Object,
                                               ptrdiff_t, ptrdiff_t);
extern Lisp_Object build_marker (struct buffer *, ptrdiff_t, ptrdiff_t);
extern void syms_of_marker (void);
extern Lisp_Object expand_and_dir_to_file (Lisp_Object);
extern Lisp_Object write_region (Lisp_Object, Lisp_Object, Lisp_Object,
     Lisp_Object, Lisp_Object, Lisp_Object,
     Lisp_Object, int);
extern void close_file_unwind (int);
extern void fclose_unwind (void *);
extern void restore_point_unwind (Lisp_Object);
extern _Noreturn void report_file_errno (const char *, Lisp_Object, int);
extern _Noreturn void report_file_error (const char *, Lisp_Object);
extern _Noreturn void report_file_notify_error (const char *, Lisp_Object);
extern 
      _Bool 
           internal_delete_file (Lisp_Object);
extern Lisp_Object emacs_readlinkat (int, const char *);
extern 
      _Bool 
           file_directory_p (Lisp_Object);
extern 
      _Bool 
           file_accessible_directory_p (Lisp_Object);
extern void init_fileio (void);
extern void syms_of_fileio (void);
extern void shrink_regexp_cache (void);
extern void restore_search_regs (void);
extern void update_search_regs (ptrdiff_t oldstart,
                                ptrdiff_t oldend, ptrdiff_t newend);
extern void record_unwind_save_match_data (void);
struct re_registers;
extern struct re_pattern_buffer *compile_pattern (Lisp_Object,
        struct re_registers *,
        Lisp_Object, 
                    _Bool
                        , 
                          _Bool
                              );
extern ptrdiff_t fast_string_match_internal (Lisp_Object, Lisp_Object,
          Lisp_Object);
inline ptrdiff_t
fast_string_match (Lisp_Object regexp, Lisp_Object string)
{
  return fast_string_match_internal (regexp, string, builtin_lisp_symbol (0));
}
inline ptrdiff_t
fast_string_match_ignore_case (Lisp_Object regexp, Lisp_Object string)
{
  return fast_string_match_internal (regexp, string, Vascii_canon_table);
}
extern ptrdiff_t fast_c_string_match_ignore_case (Lisp_Object, const char *,
        ptrdiff_t);
extern ptrdiff_t fast_looking_at (Lisp_Object, ptrdiff_t, ptrdiff_t,
                                  ptrdiff_t, ptrdiff_t, Lisp_Object);
extern ptrdiff_t find_newline (ptrdiff_t, ptrdiff_t, ptrdiff_t, ptrdiff_t,
          ptrdiff_t, ptrdiff_t *, ptrdiff_t *, 
                                              _Bool
                                                  );
extern ptrdiff_t scan_newline (ptrdiff_t, ptrdiff_t, ptrdiff_t, ptrdiff_t,
          ptrdiff_t, 
                    _Bool
                        );
extern ptrdiff_t scan_newline_from_point (ptrdiff_t, ptrdiff_t *, ptrdiff_t *);
extern ptrdiff_t find_newline_no_quit (ptrdiff_t, ptrdiff_t,
           ptrdiff_t, ptrdiff_t *);
extern ptrdiff_t find_before_next_newline (ptrdiff_t, ptrdiff_t,
        ptrdiff_t, ptrdiff_t *);
extern void syms_of_search (void);
extern void clear_regexp_cache (void);
extern Lisp_Object Vminibuffer_list;
extern Lisp_Object last_minibuf_string;
extern Lisp_Object get_minibuffer (EMACS_INT);
extern void init_minibuf_once (void);
extern void syms_of_minibuf (void);
extern void syms_of_callint (void);
extern void syms_of_casefiddle (void);
extern void keys_of_casefiddle (void);
extern void init_casetab_once (void);
extern void syms_of_casetab (void);
extern Lisp_Object echo_message_buffer;
extern struct kboard *echo_kboard;
extern void cancel_echoing (void);
extern 
      _Bool 
           input_pending;
extern sigjmp_buf return_to_command_loop;
extern Lisp_Object menu_bar_items (Lisp_Object);
extern Lisp_Object tool_bar_items (Lisp_Object, int *);
extern void discard_mouse_events (void);
void handle_input_available_signal (int);
extern Lisp_Object pending_funcalls;
extern 
      _Bool 
           detect_input_pending (void);
extern 
      _Bool 
           detect_input_pending_ignore_squeezables (void);
extern 
      _Bool 
           detect_input_pending_run_timers (
                                            _Bool
                                                );
extern void safe_run_hooks (Lisp_Object);
extern void cmd_error_internal (Lisp_Object, const char *);
extern Lisp_Object command_loop_1 (void);
extern Lisp_Object read_menu_command (void);
extern Lisp_Object recursive_edit_1 (void);
extern void record_auto_save (void);
extern void force_auto_save_soon (void);
extern void init_keyboard (void);
extern void syms_of_keyboard (void);
extern void keys_of_keyboard (void);
extern ptrdiff_t current_column (void);
extern void invalidate_current_column (void);
extern 
      _Bool 
           indented_beyond_p (ptrdiff_t, ptrdiff_t, EMACS_INT);
extern void syms_of_indent (void);
extern void store_frame_param (struct frame *, Lisp_Object, Lisp_Object);
extern void store_in_alist (Lisp_Object *, Lisp_Object, Lisp_Object);
extern Lisp_Object do_switch_frame (Lisp_Object, int, int, Lisp_Object);
extern Lisp_Object get_frame_param (struct frame *, Lisp_Object);
extern void frames_discard_buffer (Lisp_Object);
extern void syms_of_frame (void);
extern char **initial_argv;
extern int initial_argc;
extern 
      _Bool 
           display_arg;
extern Lisp_Object decode_env_path (const char *, const char *, 
                                                               _Bool
                                                                   );
extern Lisp_Object empty_unibyte_string, empty_multibyte_string;
extern _Noreturn void terminate_due_to_signal (int, int);
void fixup_locale (void);
void synchronize_system_messages_locale (void);
void synchronize_system_time_locale (void);
extern char *emacs_strerror (int);
extern void shut_down_emacs (int, Lisp_Object);
extern 
      _Bool 
           noninteractive;
extern 
      _Bool 
           no_site_lisp;
extern 
      _Bool 
           build_details;
extern int daemon_type;
extern 
      _Bool 
           fatal_error_in_progress;
extern 
      _Bool 
           inhibit_window_system;
extern 
      _Bool 
           running_asynch_code;
struct Lisp_Process;
extern void kill_buffer_processes (Lisp_Object);
extern int wait_reading_process_output (intmax_t, int, int, 
                                                           _Bool
                                                               , Lisp_Object,
     struct Lisp_Process *, int);
extern void add_timer_wait_descriptor (int);
extern void add_keyboard_wait_descriptor (int);
extern void delete_keyboard_wait_descriptor (int);
extern void add_gpm_wait_descriptor (int);
extern void delete_gpm_wait_descriptor (int);
extern void init_process_emacs (int);
extern void syms_of_process (void);
extern void setup_process_coding_systems (Lisp_Object);
extern _Noreturn void child_setup (int, int, int, char **, 
                                                            _Bool
                                                                , Lisp_Object);
extern void init_callproc_1 (void);
extern void init_callproc (void);
extern void set_initial_environment (void);
extern void syms_of_callproc (void);
enum text_quoting_style
  {
    CURVE_QUOTING_STYLE,
    GRAVE_QUOTING_STYLE,
    STRAIGHT_QUOTING_STYLE
  };
extern enum text_quoting_style text_quoting_style (void);
extern Lisp_Object read_doc_string (Lisp_Object);
extern Lisp_Object get_doc_string (Lisp_Object, 
                                               _Bool
                                                   , 
                                                     _Bool
                                                         );
extern void syms_of_doc (void);
extern int read_bytecode_char (
                              _Bool
                                  );
extern void syms_of_bytecode (void);
extern Lisp_Object exec_byte_code (Lisp_Object, Lisp_Object, Lisp_Object,
       Lisp_Object, ptrdiff_t, Lisp_Object *);
extern Lisp_Object get_byte_code_arity (Lisp_Object);
extern void init_macros (void);
extern void syms_of_macros (void);
extern void truncate_undo_list (struct buffer *);
extern void record_insert (ptrdiff_t, ptrdiff_t);
extern void record_delete (ptrdiff_t, Lisp_Object, 
                                                  _Bool
                                                      );
extern void record_first_change (void);
extern void record_change (ptrdiff_t, ptrdiff_t);
extern void record_property_change (ptrdiff_t, ptrdiff_t,
        Lisp_Object, Lisp_Object,
                                    Lisp_Object);
extern void syms_of_undo (void);
extern void report_interval_modification (Lisp_Object, Lisp_Object);
extern void syms_of_menu (void);
extern void syms_of_xmenu (void);
struct tty_display_info;
extern 
      _Bool 
           disable_address_randomization (void);
extern int emacs_exec_file (char const *, char *const *, char *const *);
extern void init_standard_fds (void);
extern char *emacs_get_current_dir_name (void);
extern void stuff_char (char c);
extern void init_foreground_group (void);
extern void sys_subshell (void);
extern void sys_suspend (void);
extern void discard_tty_input (void);
extern void init_sys_modes (struct tty_display_info *);
extern void reset_sys_modes (struct tty_display_info *);
extern void init_all_sys_modes (void);
extern void reset_all_sys_modes (void);
extern void child_setup_tty (int);
extern void setup_pty (int);
extern int set_window_size (int, int, int);
extern EMACS_INT get_random (void);
extern void seed_random (void *, ptrdiff_t);
extern void init_random (void);
extern void emacs_backtrace (int);
extern _Noreturn void emacs_abort (void) __attribute__((noinline));
extern int emacs_open (const char *, int, int);
extern int emacs_pipe (int[2]);
extern int emacs_close (int);
extern ptrdiff_t emacs_read (int, void *, ptrdiff_t);
extern ptrdiff_t emacs_read_quit (int, void *, ptrdiff_t);
extern ptrdiff_t emacs_write (int, void const *, ptrdiff_t);
extern ptrdiff_t emacs_write_sig (int, void const *, ptrdiff_t);
extern ptrdiff_t emacs_write_quit (int, void const *, ptrdiff_t);
extern void emacs_perror (char const *);
extern int renameat_noreplace (int, char const *, int, char const *);
extern int str_collate (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern void lock_file (Lisp_Object);
extern void unlock_file (Lisp_Object);
extern void unlock_all_files (void);
extern void unlock_buffer (struct buffer *);
extern void syms_of_filelock (void);
extern void syms_of_sound (void);
extern void init_category_once (void);
extern Lisp_Object char_category_set (int);
extern void syms_of_category (void);
extern void syms_of_ccl (void);
extern void syms_of_dired (void);
extern Lisp_Object directory_files_internal (Lisp_Object, Lisp_Object,
                                             Lisp_Object, Lisp_Object,
                                            _Bool
                                                , Lisp_Object);
extern int *char_ins_del_vector;
extern void syms_of_term (void);
extern _Noreturn void fatal (const char *msgid, ...)
  __attribute__ ((__format__ (__printf__, 1, 2)));
extern void syms_of_terminal (void);
extern void syms_of_font (void);
extern void init_font (void);
extern void syms_of_fontset (void);
extern void syms_of_inotify (void);
extern Lisp_Object Vface_alternative_font_family_alist;
extern Lisp_Object Vface_alternative_font_registry_alist;
extern void syms_of_xfaces (void);
extern void syms_of_xfns (void);
extern void syms_of_xsmfns (void);
extern void syms_of_xselect (void);
extern void init_xterm (void);
extern void syms_of_xterm (void);
extern char *x_get_keysym_name (int);
extern void syms_of_xml (void);
extern void xml_cleanup_parser (void);
extern void syms_of_lcms2 (void);
extern void syms_of_decompress (void);
void init_dbusbind (void);
void syms_of_dbusbind (void);
extern 
      _Bool 
           profiler_memory_running;
extern void malloc_probe (size_t);
extern void syms_of_profiler (void);
extern char my_edata[];
extern char my_endbss[];
extern char *my_endbss_static;
extern void *xmalloc (size_t) __attribute__ ((__malloc__)) __attribute__ ((__alloc_size__ (1)));
extern void *xzalloc (size_t) __attribute__ ((__malloc__)) __attribute__ ((__alloc_size__ (1)));
extern void *xrealloc (void *, size_t) __attribute__ ((__alloc_size__ (2)));
extern void xfree (void *);
extern void *xnmalloc (ptrdiff_t, ptrdiff_t) __attribute__ ((__malloc__)) __attribute__ ((__alloc_size__ (1,2)));
extern void *xnrealloc (void *, ptrdiff_t, ptrdiff_t)
  __attribute__ ((__alloc_size__ (2,3)));
extern void *xpalloc (void *, ptrdiff_t *, ptrdiff_t, ptrdiff_t, ptrdiff_t);
extern char *xstrdup (const char *) __attribute__ ((__malloc__));
extern char *xlispstrdup (Lisp_Object) __attribute__ ((__malloc__));
extern void dupstring (char **, char const *);
inline char *
lispstpcpy (char *dest, Lisp_Object string)
{
  ptrdiff_t len = SBYTES (string);
  memcpy (dest, SDATA (string), len + 1);
  return dest + len;
}
extern void xputenv (const char *);
extern char *egetenv_internal (const char *, ptrdiff_t);
inline char *
egetenv (const char *var)
{
  return egetenv_internal (var, strlen (var));
}
extern void init_system_name (void);
enum MAX_ALLOCA { MAX_ALLOCA = 16 * 1024 };
extern void *record_xmalloc (size_t) __attribute__ ((__alloc_size__ (1)));
enum { defined_GC_CHECK_STRING_BYTES = 
                                      0 
                                            };
enum
  {
    USE_STACK_CONS = 
                    1
                                          ,
    USE_STACK_STRING = (USE_STACK_CONS
   && !defined_GC_CHECK_STRING_BYTES)
  };
struct for_each_tail_internal
{
  Lisp_Object tortoise;
  intptr_t max, n;
  unsigned short int q;
};
inline void
maybe_gc (void)
{
  if ((consing_since_gc > globals.f_gc_cons_threshold
       && consing_since_gc > gc_relative_threshold)
      || (!NILP (globals.f_Vmemory_full)
   && consing_since_gc > memory_full_cons_threshold))
    Fgarbage_collect ();
}
typedef signed char gint8;
typedef unsigned char guint8;
typedef signed short gint16;
typedef unsigned short guint16;
typedef signed int gint32;
typedef unsigned int guint32;
typedef signed long gint64;
typedef unsigned long guint64;
typedef signed long gssize;
typedef unsigned long gsize;
typedef gint64 goffset;
typedef signed long gintptr;
typedef unsigned long guintptr;
typedef int GPid;
typedef char gchar;
typedef short gshort;
typedef long glong;
typedef int gint;
typedef gint gboolean;
typedef unsigned char guchar;
typedef unsigned short gushort;
typedef unsigned long gulong;
typedef unsigned int guint;
typedef float gfloat;
typedef double gdouble;
typedef void* gpointer;
typedef const void *gconstpointer;
typedef gint (*GCompareFunc) (gconstpointer a,
                                                 gconstpointer b);
typedef gint (*GCompareDataFunc) (gconstpointer a,
                                                 gconstpointer b,
       gpointer user_data);
typedef gboolean (*GEqualFunc) (gconstpointer a,
                                                 gconstpointer b);
typedef void (*GDestroyNotify) (gpointer data);
typedef void (*GFunc) (gpointer data,
                                                 gpointer user_data);
typedef guint (*GHashFunc) (gconstpointer key);
typedef void (*GHFunc) (gpointer key,
                                                 gpointer value,
                                                 gpointer user_data);
typedef void (*GFreeFunc) (gpointer data);
typedef const gchar * (*GTranslateFunc) (const gchar *str,
       gpointer data);
static inline gboolean _GLIB_CHECKED_ADD_U32 (guint32 *dest, guint32 a, guint32 b) {
  return !__builtin_uadd_overflow(a, b, dest); }
static inline gboolean _GLIB_CHECKED_MUL_U32 (guint32 *dest, guint32 a, guint32 b) {
  return !__builtin_umul_overflow(a, b, dest); }
static inline gboolean _GLIB_CHECKED_ADD_U64 (guint64 *dest, guint64 a, guint64 b) {
  typedef char _GStaticAssertCompileTimeAssertion_2[(sizeof (unsigned long long) == sizeof (guint64)) ? 1 : -1] __attribute__((__unused__));
  return !__builtin_uaddll_overflow(a, b, (unsigned long long *) dest); }
static inline gboolean _GLIB_CHECKED_MUL_U64 (guint64 *dest, guint64 a, guint64 b) {
  return !__builtin_umulll_overflow(a, b, (unsigned long long *) dest); }
typedef union _GDoubleIEEE754 GDoubleIEEE754;
typedef union _GFloatIEEE754 GFloatIEEE754;
union _GFloatIEEE754
{
  gfloat v_float;
  struct {
    guint mantissa : 23;
    guint biased_exponent : 8;
    guint sign : 1;
  } mpn;
};
union _GDoubleIEEE754
{
  gdouble v_double;
  struct {
    guint mantissa_low : 32;
    guint mantissa_high : 20;
    guint biased_exponent : 11;
    guint sign : 1;
  } mpn;
};
typedef struct _GTimeVal GTimeVal;
struct _GTimeVal
{
  glong tv_sec;
  glong tv_usec;
};
typedef struct _GBytes GBytes;
typedef struct _GArray GArray;
typedef struct _GByteArray GByteArray;
typedef struct _GPtrArray GPtrArray;
struct _GArray
{
  gchar *data;
  guint len;
};
struct _GByteArray
{
  guint8 *data;
  guint len;
};
struct _GPtrArray
{
  gpointer *pdata;
  guint len;
};
extern
GArray* g_array_new (gboolean zero_terminated,
       gboolean clear_,
       guint element_size);
extern
GArray* g_array_sized_new (gboolean zero_terminated,
       gboolean clear_,
       guint element_size,
       guint reserved_size);
extern
gchar* g_array_free (GArray *array,
       gboolean free_segment);
extern
GArray *g_array_ref (GArray *array);
extern
void g_array_unref (GArray *array);
extern
guint g_array_get_element_size (GArray *array);
extern
GArray* g_array_append_vals (GArray *array,
       gconstpointer data,
       guint len);
extern
GArray* g_array_prepend_vals (GArray *array,
       gconstpointer data,
       guint len);
extern
GArray* g_array_insert_vals (GArray *array,
       guint index_,
       gconstpointer data,
       guint len);
extern
GArray* g_array_set_size (GArray *array,
       guint length);
extern
GArray* g_array_remove_index (GArray *array,
       guint index_);
extern
GArray* g_array_remove_index_fast (GArray *array,
       guint index_);
extern
GArray* g_array_remove_range (GArray *array,
       guint index_,
       guint length);
extern
void g_array_sort (GArray *array,
       GCompareFunc compare_func);
extern
void g_array_sort_with_data (GArray *array,
       GCompareDataFunc compare_func,
       gpointer user_data);
extern
void g_array_set_clear_func (GArray *array,
                                   GDestroyNotify clear_func);
extern
GPtrArray* g_ptr_array_new (void);
extern
GPtrArray* g_ptr_array_new_with_free_func (GDestroyNotify element_free_func);
extern
GPtrArray* g_ptr_array_sized_new (guint reserved_size);
extern
GPtrArray* g_ptr_array_new_full (guint reserved_size,
        GDestroyNotify element_free_func);
extern
gpointer* g_ptr_array_free (GPtrArray *array,
        gboolean free_seg);
extern
GPtrArray* g_ptr_array_ref (GPtrArray *array);
extern
void g_ptr_array_unref (GPtrArray *array);
extern
void g_ptr_array_set_free_func (GPtrArray *array,
                                           GDestroyNotify element_free_func);
extern
void g_ptr_array_set_size (GPtrArray *array,
        gint length);
extern
gpointer g_ptr_array_remove_index (GPtrArray *array,
        guint index_);
extern
gpointer g_ptr_array_remove_index_fast (GPtrArray *array,
        guint index_);
extern
gboolean g_ptr_array_remove (GPtrArray *array,
        gpointer data);
extern
gboolean g_ptr_array_remove_fast (GPtrArray *array,
        gpointer data);
extern
GPtrArray *g_ptr_array_remove_range (GPtrArray *array,
        guint index_,
        guint length);
extern
void g_ptr_array_add (GPtrArray *array,
        gpointer data);
extern
void g_ptr_array_insert (GPtrArray *array,
                                           gint index_,
                                           gpointer data);
extern
void g_ptr_array_sort (GPtrArray *array,
        GCompareFunc compare_func);
extern
void g_ptr_array_sort_with_data (GPtrArray *array,
        GCompareDataFunc compare_func,
        gpointer user_data);
extern
void g_ptr_array_foreach (GPtrArray *array,
        GFunc func,
        gpointer user_data);
extern
GByteArray* g_byte_array_new (void);
extern
GByteArray* g_byte_array_new_take (guint8 *data,
                                            gsize len);
extern
GByteArray* g_byte_array_sized_new (guint reserved_size);
extern
guint8* g_byte_array_free (GByteArray *array,
         gboolean free_segment);
extern
GBytes* g_byte_array_free_to_bytes (GByteArray *array);
extern
GByteArray *g_byte_array_ref (GByteArray *array);
extern
void g_byte_array_unref (GByteArray *array);
extern
GByteArray* g_byte_array_append (GByteArray *array,
         const guint8 *data,
         guint len);
extern
GByteArray* g_byte_array_prepend (GByteArray *array,
         const guint8 *data,
         guint len);
extern
GByteArray* g_byte_array_set_size (GByteArray *array,
         guint length);
extern
GByteArray* g_byte_array_remove_index (GByteArray *array,
         guint index_);
extern
GByteArray* g_byte_array_remove_index_fast (GByteArray *array,
         guint index_);
extern
GByteArray* g_byte_array_remove_range (GByteArray *array,
         guint index_,
         guint length);
extern
void g_byte_array_sort (GByteArray *array,
         GCompareFunc compare_func);
extern
void g_byte_array_sort_with_data (GByteArray *array,
         GCompareDataFunc compare_func,
         gpointer user_data);
extern
gint g_atomic_int_get (const volatile gint *atomic);
extern
void g_atomic_int_set (volatile gint *atomic,
                                                               gint newval);
extern
void g_atomic_int_inc (volatile gint *atomic);
extern
gboolean g_atomic_int_dec_and_test (volatile gint *atomic);
extern
gboolean g_atomic_int_compare_and_exchange (volatile gint *atomic,
                                                               gint oldval,
                                                               gint newval);
extern
gint g_atomic_int_add (volatile gint *atomic,
                                                               gint val);
extern
guint g_atomic_int_and (volatile guint *atomic,
                                                               guint val);
extern
guint g_atomic_int_or (volatile guint *atomic,
                                                               guint val);
extern
guint g_atomic_int_xor (volatile guint *atomic,
                                                               guint val);
extern
gpointer g_atomic_pointer_get (const volatile void *atomic);
extern
void g_atomic_pointer_set (volatile void *atomic,
                                                               gpointer newval);
extern
gboolean g_atomic_pointer_compare_and_exchange (volatile void *atomic,
                                                               gpointer oldval,
                                                               gpointer newval);
extern
gssize g_atomic_pointer_add (volatile void *atomic,
                                                               gssize val);
extern
gsize g_atomic_pointer_and (volatile void *atomic,
                                                               gsize val);
extern
gsize g_atomic_pointer_or (volatile void *atomic,
                                                               gsize val);
extern
gsize g_atomic_pointer_xor (volatile void *atomic,
                                                               gsize val);
extern
gint g_atomic_int_exchange_and_add (volatile gint *atomic,
                                                               gint val);
typedef guint32 GQuark;
extern
GQuark g_quark_try_string (const gchar *string);
extern
GQuark g_quark_from_static_string (const gchar *string);
extern
GQuark g_quark_from_string (const gchar *string);
extern
const gchar * g_quark_to_string (GQuark quark) __attribute__((__const__));
extern
const gchar * g_intern_string (const gchar *string);
extern
const gchar * g_intern_static_string (const gchar *string);
typedef struct _GError GError;
struct _GError
{
  GQuark domain;
  gint code;
  gchar *message;
};
extern
GError* g_error_new (GQuark domain,
                                gint code,
                                const gchar *format,
                                ...) __attribute__((__format__ (__printf__, 3, 4)));
extern
GError* g_error_new_literal (GQuark domain,
                                gint code,
                                const gchar *message);
extern
GError* g_error_new_valist (GQuark domain,
                                gint code,
                                const gchar *format,
                                va_list args) __attribute__((__format__ (__printf__, 3, 0)));
extern
void g_error_free (GError *error);
extern
GError* g_error_copy (const GError *error);
extern
gboolean g_error_matches (const GError *error,
                                GQuark domain,
                                gint code);
extern
void g_set_error (GError **err,
                                GQuark domain,
                                gint code,
                                const gchar *format,
                                ...) __attribute__((__format__ (__printf__, 4, 5)));
extern
void g_set_error_literal (GError **err,
                                GQuark domain,
                                gint code,
                                const gchar *message);
extern
void g_propagate_error (GError **dest,
    GError *src);
extern
void g_clear_error (GError **err);
extern
void g_prefix_error (GError **err,
                                       const gchar *format,
                                       ...) __attribute__((__format__ (__printf__, 2, 3)));
extern
void g_propagate_prefixed_error (GError **dest,
                                       GError *src,
                                       const gchar *format,
                                       ...) __attribute__((__format__ (__printf__, 3, 4)));
extern
const gchar * g_get_user_name (void);
extern
const gchar * g_get_real_name (void);
extern
const gchar * g_get_home_dir (void);
extern
const gchar * g_get_tmp_dir (void);
extern
const gchar * g_get_host_name (void);
extern
const gchar * g_get_prgname (void);
extern
void g_set_prgname (const gchar *prgname);
extern
const gchar * g_get_application_name (void);
extern
void g_set_application_name (const gchar *application_name);
extern
void g_reload_user_special_dirs_cache (void);
extern
const gchar * g_get_user_data_dir (void);
extern
const gchar * g_get_user_config_dir (void);
extern
const gchar * g_get_user_cache_dir (void);
extern
const gchar * const * g_get_system_data_dirs (void);
extern
const gchar * const * g_get_system_config_dirs (void);
extern
const gchar * g_get_user_runtime_dir (void);
typedef enum {
  G_USER_DIRECTORY_DESKTOP,
  G_USER_DIRECTORY_DOCUMENTS,
  G_USER_DIRECTORY_DOWNLOAD,
  G_USER_DIRECTORY_MUSIC,
  G_USER_DIRECTORY_PICTURES,
  G_USER_DIRECTORY_PUBLIC_SHARE,
  G_USER_DIRECTORY_TEMPLATES,
  G_USER_DIRECTORY_VIDEOS,
  G_USER_N_DIRECTORIES
} GUserDirectory;
extern
const gchar * g_get_user_special_dir (GUserDirectory directory);
typedef struct _GDebugKey GDebugKey;
struct _GDebugKey
{
  const gchar *key;
  guint value;
};
extern
guint g_parse_debug_string (const gchar *string,
         const GDebugKey *keys,
         guint nkeys);
extern
gint g_snprintf (gchar *string,
         gulong n,
         gchar const *format,
         ...) __attribute__((__format__ (__printf__, 3, 4)));
extern
gint g_vsnprintf (gchar *string,
         gulong n,
         gchar const *format,
         va_list args)
         __attribute__((__format__ (__printf__, 3, 0)));
extern
void g_nullify_pointer (gpointer *nullify_location);
typedef enum
{
  G_FORMAT_SIZE_DEFAULT = 0,
  G_FORMAT_SIZE_LONG_FORMAT = 1 << 0,
  G_FORMAT_SIZE_IEC_UNITS = 1 << 1
} GFormatSizeFlags;
extern
gchar *g_format_size_full (guint64 size,
                             GFormatSizeFlags flags);
extern
gchar *g_format_size (guint64 size);
extern
gchar *g_format_size_for_display (goffset size);
typedef void (*GVoidFunc) (void);
extern
void g_atexit (GVoidFunc func);
extern
gchar* g_find_program_in_path (const gchar *program);
extern
gint (g_bit_nth_lsf) (gulong mask,
                                 gint nth_bit);
extern
gint (g_bit_nth_msf) (gulong mask,
                                 gint nth_bit);
extern
guint (g_bit_storage) (gulong number);
static inline gint
g_bit_nth_lsf_impl (gulong mask,
                    gint nth_bit)
{
  if ((__builtin_expect (__extension__ ({ int _g_boolean_var_; if ((nth_bit < -1)) _g_boolean_var_ = 1; else _g_boolean_var_ = 0; _g_boolean_var_; }), 0)))
    nth_bit = -1;
  while (nth_bit < ((8 * 8) - 1))
    {
      nth_bit++;
      if (mask & (1UL << nth_bit))
        return nth_bit;
    }
  return -1;
}
static inline gint
g_bit_nth_msf_impl (gulong mask,
                    gint nth_bit)
{
  if (nth_bit < 0 || (__builtin_expect (__extension__ ({ int _g_boolean_var_; if ((nth_bit > 8 * 8)) _g_boolean_var_ = 1; else _g_boolean_var_ = 0; _g_boolean_var_; }), 0)))
    nth_bit = 8 * 8;
  while (nth_bit > 0)
    {
      nth_bit--;
      if (mask & (1UL << nth_bit))
        return nth_bit;
    }
  return -1;
}
static inline guint
g_bit_storage_impl (gulong number)
{
  return (__builtin_expect (__extension__ ({ int _g_boolean_var_; if ((number)) _g_boolean_var_ = 1; else _g_boolean_var_ = 0; _g_boolean_var_; }), 1)) ?
           ((8 * 8U - 1) ^ (guint) __builtin_clzl(number)) + 1 : 1;
}
extern
GQuark g_thread_error_quark (void);
typedef enum
{
  G_THREAD_ERROR_AGAIN
} GThreadError;
typedef gpointer (*GThreadFunc) (gpointer data);
typedef struct _GThread GThread;
typedef union _GMutex GMutex;
typedef struct _GRecMutex GRecMutex;
typedef struct _GRWLock GRWLock;
typedef struct _GCond GCond;
typedef struct _GPrivate GPrivate;
typedef struct _GOnce GOnce;
union _GMutex
{
  gpointer p;
  guint i[2];
};
struct _GRWLock
{
  gpointer p;
  guint i[2];
};
struct _GCond
{
  gpointer p;
  guint i[2];
};
struct _GRecMutex
{
  gpointer p;
  guint i[2];
};
struct _GPrivate
{
  gpointer p;
  GDestroyNotify notify;
  gpointer future[2];
};
typedef enum
{
  G_ONCE_STATUS_NOTCALLED,
  G_ONCE_STATUS_PROGRESS,
  G_ONCE_STATUS_READY
} GOnceStatus;
struct _GOnce
{
  volatile GOnceStatus status;
  volatile gpointer retval;
};
extern
GThread * g_thread_ref (GThread *thread);
extern
void g_thread_unref (GThread *thread);
extern
GThread * g_thread_new (const gchar *name,
                                                 GThreadFunc func,
                                                 gpointer data);
extern
GThread * g_thread_try_new (const gchar *name,
                                                 GThreadFunc func,
                                                 gpointer data,
                                                 GError **error);
extern
GThread * g_thread_self (void);
extern
void g_thread_exit (gpointer retval);
extern
gpointer g_thread_join (GThread *thread);
extern
void g_thread_yield (void);
extern
void g_mutex_init (GMutex *mutex);
extern
void g_mutex_clear (GMutex *mutex);
extern
void g_mutex_lock (GMutex *mutex);
extern
gboolean g_mutex_trylock (GMutex *mutex);
extern
void g_mutex_unlock (GMutex *mutex);
extern
void g_rw_lock_init (GRWLock *rw_lock);
extern
void g_rw_lock_clear (GRWLock *rw_lock);
extern
void g_rw_lock_writer_lock (GRWLock *rw_lock);
extern
gboolean g_rw_lock_writer_trylock (GRWLock *rw_lock);
extern
void g_rw_lock_writer_unlock (GRWLock *rw_lock);
extern
void g_rw_lock_reader_lock (GRWLock *rw_lock);
extern
gboolean g_rw_lock_reader_trylock (GRWLock *rw_lock);
extern
void g_rw_lock_reader_unlock (GRWLock *rw_lock);
extern
void g_rec_mutex_init (GRecMutex *rec_mutex);
extern
void g_rec_mutex_clear (GRecMutex *rec_mutex);
extern
void g_rec_mutex_lock (GRecMutex *rec_mutex);
extern
gboolean g_rec_mutex_trylock (GRecMutex *rec_mutex);
extern
void g_rec_mutex_unlock (GRecMutex *rec_mutex);
extern
void g_cond_init (GCond *cond);
extern
void g_cond_clear (GCond *cond);
extern
void g_cond_wait (GCond *cond,
                                                 GMutex *mutex);
extern
void g_cond_signal (GCond *cond);
extern
void g_cond_broadcast (GCond *cond);
extern
gboolean g_cond_wait_until (GCond *cond,
                                                 GMutex *mutex,
                                                 gint64 end_time);
extern
gpointer g_private_get (GPrivate *key);
extern
void g_private_set (GPrivate *key,
                                                 gpointer value);
extern
void g_private_replace (GPrivate *key,
                                                 gpointer value);
extern
gpointer g_once_impl (GOnce *once,
                                                 GThreadFunc func,
                                                 gpointer arg);
extern
gboolean g_once_init_enter (volatile void *location);
extern
void g_once_init_leave (volatile void *location,
                                                 gsize result);
extern
guint g_get_num_processors (void);
typedef void GMutexLocker;
static inline GMutexLocker *
g_mutex_locker_new (GMutex *mutex)
{
  g_mutex_lock (mutex);
  return (GMutexLocker *) mutex;
}
static inline void
g_mutex_locker_free (GMutexLocker *locker)
{
  g_mutex_unlock ((GMutex *) locker);
}
typedef struct _GAsyncQueue GAsyncQueue;
extern
GAsyncQueue *g_async_queue_new (void);
extern
GAsyncQueue *g_async_queue_new_full (GDestroyNotify item_free_func);
extern
void g_async_queue_lock (GAsyncQueue *queue);
extern
void g_async_queue_unlock (GAsyncQueue *queue);
extern
GAsyncQueue *g_async_queue_ref (GAsyncQueue *queue);
extern
void g_async_queue_unref (GAsyncQueue *queue);
extern
void g_async_queue_ref_unlocked (GAsyncQueue *queue);
extern
void g_async_queue_unref_and_unlock (GAsyncQueue *queue);
extern
void g_async_queue_push (GAsyncQueue *queue,
                                                 gpointer data);
extern
void g_async_queue_push_unlocked (GAsyncQueue *queue,
                                                 gpointer data);
extern
void g_async_queue_push_sorted (GAsyncQueue *queue,
                                                 gpointer data,
                                                 GCompareDataFunc func,
                                                 gpointer user_data);
extern
void g_async_queue_push_sorted_unlocked (GAsyncQueue *queue,
                                                 gpointer data,
                                                 GCompareDataFunc func,
                                                 gpointer user_data);
extern
gpointer g_async_queue_pop (GAsyncQueue *queue);
extern
gpointer g_async_queue_pop_unlocked (GAsyncQueue *queue);
extern
gpointer g_async_queue_try_pop (GAsyncQueue *queue);
extern
gpointer g_async_queue_try_pop_unlocked (GAsyncQueue *queue);
extern
gpointer g_async_queue_timeout_pop (GAsyncQueue *queue,
                                                 guint64 timeout);
extern
gpointer g_async_queue_timeout_pop_unlocked (GAsyncQueue *queue,
                                                 guint64 timeout);
extern
gint g_async_queue_length (GAsyncQueue *queue);
extern
gint g_async_queue_length_unlocked (GAsyncQueue *queue);
extern
void g_async_queue_sort (GAsyncQueue *queue,
                                                 GCompareDataFunc func,
                                                 gpointer user_data);
extern
void g_async_queue_sort_unlocked (GAsyncQueue *queue,
                                                 GCompareDataFunc func,
                                                 gpointer user_data);
extern
gboolean g_async_queue_remove (GAsyncQueue *queue,
                                                 gpointer item);
extern
gboolean g_async_queue_remove_unlocked (GAsyncQueue *queue,
                                                 gpointer item);
extern
void g_async_queue_push_front (GAsyncQueue *queue,
                                                 gpointer item);
extern
void g_async_queue_push_front_unlocked (GAsyncQueue *queue,
                                                 gpointer item);
extern
gpointer g_async_queue_timed_pop (GAsyncQueue *queue,
                                                 GTimeVal *end_time);
extern
gpointer g_async_queue_timed_pop_unlocked (GAsyncQueue *queue,
                                                 GTimeVal *end_time);
extern int __sigismember (const __sigset_t *, int);
extern int __sigaddset (__sigset_t *, int);
extern int __sigdelset (__sigset_t *, int);
extern __inline __attribute__ ((__gnu_inline__)) int __sigismember (const __sigset_t *__set, int __sig) { unsigned long int __mask = (((unsigned long int) 1) << (((__sig) - 1) % (8 * sizeof (unsigned long int)))); unsigned long int __word = (((__sig) - 1) / (8 * sizeof (unsigned long int))); return (__set->__val[__word] & __mask) ? 1 : 0; }
extern __inline __attribute__ ((__gnu_inline__)) int __sigaddset ( __sigset_t *__set, int __sig) { unsigned long int __mask = (((unsigned long int) 1) << (((__sig) - 1) % (8 * sizeof (unsigned long int)))); unsigned long int __word = (((__sig) - 1) / (8 * sizeof (unsigned long int))); return ((__set->__val[__word] |= __mask), 0); }
extern __inline __attribute__ ((__gnu_inline__)) int __sigdelset ( __sigset_t *__set, int __sig) { unsigned long int __mask = (((unsigned long int) 1) << (((__sig) - 1) % (8 * sizeof (unsigned long int)))); unsigned long int __word = (((__sig) - 1) / (8 * sizeof (unsigned long int))); return ((__set->__val[__word] &= ~__mask), 0); }
typedef __sig_atomic_t sig_atomic_t;
typedef union sigval
  {
    int sival_int;
    void *sival_ptr;
  } sigval_t;
typedef __clock_t __sigchld_clock_t;
typedef struct
  {
    int si_signo;
    int si_errno;
    int si_code;
    union
      {
 int _pad[((128 / sizeof (int)) - 4)];
 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
   } _kill;
 struct
   {
     int si_tid;
     int si_overrun;
     sigval_t si_sigval;
   } _timer;
 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
     sigval_t si_sigval;
   } _rt;
 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
     int si_status;
     __sigchld_clock_t si_utime;
     __sigchld_clock_t si_stime;
   } _sigchld;
 struct
   {
     void *si_addr;
     short int si_addr_lsb;
     struct
       {
  void *_lower;
  void *_upper;
       } si_addr_bnd;
   } _sigfault;
 struct
   {
     long int si_band;
     int si_fd;
   } _sigpoll;
 struct
   {
     void *_call_addr;
     int _syscall;
     unsigned int _arch;
   } _sigsys;
      } _sifields;
  } siginfo_t ;
enum
{
  SI_ASYNCNL = -60,
  SI_TKILL = -6,
  SI_SIGIO,
  SI_ASYNCIO,
  SI_MESGQ,
  SI_TIMER,
  SI_QUEUE,
  SI_USER,
  SI_KERNEL = 0x80
};
enum
{
  ILL_ILLOPC = 1,
  ILL_ILLOPN,
  ILL_ILLADR,
  ILL_ILLTRP,
  ILL_PRVOPC,
  ILL_PRVREG,
  ILL_COPROC,
  ILL_BADSTK
};
enum
{
  FPE_INTDIV = 1,
  FPE_INTOVF,
  FPE_FLTDIV,
  FPE_FLTOVF,
  FPE_FLTUND,
  FPE_FLTRES,
  FPE_FLTINV,
  FPE_FLTSUB
};
enum
{
  SEGV_MAPERR = 1,
  SEGV_ACCERR
};
enum
{
  BUS_ADRALN = 1,
  BUS_ADRERR,
  BUS_OBJERR,
  BUS_MCEERR_AR,
  BUS_MCEERR_AO
};
enum
{
  TRAP_BRKPT = 1,
  TRAP_TRACE
};
enum
{
  CLD_EXITED = 1,
  CLD_KILLED,
  CLD_DUMPED,
  CLD_TRAPPED,
  CLD_STOPPED,
  CLD_CONTINUED
};
enum
{
  POLL_IN = 1,
  POLL_OUT,
  POLL_MSG,
  POLL_ERR,
  POLL_PRI,
  POLL_HUP
};
typedef struct sigevent
  {
    sigval_t sigev_value;
    int sigev_signo;
    int sigev_notify;
    union
      {
 int _pad[((64 / sizeof (int)) - 4)];
 __pid_t _tid;
 struct
   {
     void (*_function) (sigval_t);
     pthread_attr_t *_attribute;
   } _sigev_thread;
      } _sigev_un;
  } sigevent_t;
enum
{
  SIGEV_SIGNAL = 0,
  SIGEV_NONE,
  SIGEV_THREAD,
  SIGEV_THREAD_ID = 4
};
typedef void (*__sighandler_t) (int);
extern __sighandler_t __sysv_signal (int __sig, __sighandler_t __handler)
     __attribute__ ((__nothrow__ , __leaf__));
extern __sighandler_t sysv_signal (int __sig, __sighandler_t __handler)
     __attribute__ ((__nothrow__ , __leaf__));
extern __sighandler_t signal (int __sig, __sighandler_t __handler)
     __attribute__ ((__nothrow__ , __leaf__));
extern __sighandler_t bsd_signal (int __sig, __sighandler_t __handler)
     __attribute__ ((__nothrow__ , __leaf__));
extern int kill (__pid_t __pid, int __sig) __attribute__ ((__nothrow__ , __leaf__));
extern int killpg (__pid_t __pgrp, int __sig) __attribute__ ((__nothrow__ , __leaf__));
extern int raise (int __sig) __attribute__ ((__nothrow__ , __leaf__));
extern __sighandler_t ssignal (int __sig, __sighandler_t __handler)
     __attribute__ ((__nothrow__ , __leaf__));
extern int gsignal (int __sig) __attribute__ ((__nothrow__ , __leaf__));
extern void psignal (int __sig, const char *__s);
extern void psiginfo (const siginfo_t *__pinfo, const char *__s);
extern int sigpause (int __sig) __asm__ ("__xpg_sigpause");
extern int sigblock (int __mask) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__deprecated__));
extern int sigsetmask (int __mask) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__deprecated__));
extern int siggetmask (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__deprecated__));
typedef __sighandler_t sighandler_t;
typedef __sighandler_t sig_t;
extern int sigemptyset (sigset_t *__set) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern int sigfillset (sigset_t *__set) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern int sigaddset (sigset_t *__set, int __signo) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern int sigdelset (sigset_t *__set, int __signo) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern int sigismember (const sigset_t *__set, int __signo)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern int sigisemptyset (const sigset_t *__set) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern int sigandset (sigset_t *__set, const sigset_t *__left,
        const sigset_t *__right) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2, 3)));
extern int sigorset (sigset_t *__set, const sigset_t *__left,
       const sigset_t *__right) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2, 3)));
struct sigaction
  {
    union
      {
 __sighandler_t sa_handler;
 void (*sa_sigaction) (int, siginfo_t *, void *);
      }
    __sigaction_handler;
    __sigset_t sa_mask;
    int sa_flags;
    void (*sa_restorer) (void);
  };
extern int sigprocmask (int __how, const sigset_t *__restrict __set,
   sigset_t *__restrict __oset) __attribute__ ((__nothrow__ , __leaf__));
extern int sigsuspend (const sigset_t *__set) __attribute__ ((__nonnull__ (1)));
extern int sigaction (int __sig, const struct sigaction *__restrict __act,
        struct sigaction *__restrict __oact) __attribute__ ((__nothrow__ , __leaf__));
extern int sigpending (sigset_t *__set) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern int sigwait (const sigset_t *__restrict __set, int *__restrict __sig)
     __attribute__ ((__nonnull__ (1, 2)));
extern int sigwaitinfo (const sigset_t *__restrict __set,
   siginfo_t *__restrict __info) __attribute__ ((__nonnull__ (1)));
extern int sigtimedwait (const sigset_t *__restrict __set,
    siginfo_t *__restrict __info,
    const struct timespec *__restrict __timeout)
     __attribute__ ((__nonnull__ (1)));
extern int sigqueue (__pid_t __pid, int __sig, const union sigval __val)
     __attribute__ ((__nothrow__ , __leaf__));
extern const char *const _sys_siglist[65];
extern const char *const sys_siglist[65];
struct _fpx_sw_bytes
{
  __uint32_t magic1;
  __uint32_t extended_size;
  __uint64_t xstate_bv;
  __uint32_t xstate_size;
  __uint32_t padding[7];
};
struct _fpreg
{
  unsigned short significand[4];
  unsigned short exponent;
};
struct _fpxreg
{
  unsigned short significand[4];
  unsigned short exponent;
  unsigned short padding[3];
};
struct _xmmreg
{
  __uint32_t element[4];
};
struct _fpstate
{
  __uint16_t cwd;
  __uint16_t swd;
  __uint16_t ftw;
  __uint16_t fop;
  __uint64_t rip;
  __uint64_t rdp;
  __uint32_t mxcsr;
  __uint32_t mxcr_mask;
  struct _fpxreg _st[8];
  struct _xmmreg _xmm[16];
  __uint32_t padding[24];
};
struct sigcontext
{
  __uint64_t r8;
  __uint64_t r9;
  __uint64_t r10;
  __uint64_t r11;
  __uint64_t r12;
  __uint64_t r13;
  __uint64_t r14;
  __uint64_t r15;
  __uint64_t rdi;
  __uint64_t rsi;
  __uint64_t rbp;
  __uint64_t rbx;
  __uint64_t rdx;
  __uint64_t rax;
  __uint64_t rcx;
  __uint64_t rsp;
  __uint64_t rip;
  __uint64_t eflags;
  unsigned short cs;
  unsigned short gs;
  unsigned short fs;
  unsigned short __pad0;
  __uint64_t err;
  __uint64_t trapno;
  __uint64_t oldmask;
  __uint64_t cr2;
  __extension__ union
    {
      struct _fpstate * fpstate;
      __uint64_t __fpstate_word;
    };
  __uint64_t __reserved1 [8];
};
struct _xsave_hdr
{
  __uint64_t xstate_bv;
  __uint64_t reserved1[2];
  __uint64_t reserved2[5];
};
struct _ymmh_state
{
  __uint32_t ymmh_space[64];
};
struct _xstate
{
  struct _fpstate fpstate;
  struct _xsave_hdr xstate_hdr;
  struct _ymmh_state ymmh;
};
extern int sigreturn (struct sigcontext *__scp) __attribute__ ((__nothrow__ , __leaf__));
extern int siginterrupt (int __sig, int __interrupt) __attribute__ ((__nothrow__ , __leaf__));
struct sigstack
  {
    void *ss_sp;
    int ss_onstack;
  };
enum
{
  SS_ONSTACK = 1,
  SS_DISABLE
};
typedef struct sigaltstack
  {
    void *ss_sp;
    int ss_flags;
    size_t ss_size;
  } stack_t;
__extension__ typedef long long int greg_t;
typedef greg_t gregset_t[23];
enum
{
  REG_R8 = 0,
  REG_R9,
  REG_R10,
  REG_R11,
  REG_R12,
  REG_R13,
  REG_R14,
  REG_R15,
  REG_RDI,
  REG_RSI,
  REG_RBP,
  REG_RBX,
  REG_RDX,
  REG_RAX,
  REG_RCX,
  REG_RSP,
  REG_RIP,
  REG_EFL,
  REG_CSGSFS,
  REG_ERR,
  REG_TRAPNO,
  REG_OLDMASK,
  REG_CR2
};
struct _libc_fpxreg
{
  unsigned short int significand[4];
  unsigned short int exponent;
  unsigned short int padding[3];
};
struct _libc_xmmreg
{
  __uint32_t element[4];
};
struct _libc_fpstate
{
  __uint16_t cwd;
  __uint16_t swd;
  __uint16_t ftw;
  __uint16_t fop;
  __uint64_t rip;
  __uint64_t rdp;
  __uint32_t mxcsr;
  __uint32_t mxcr_mask;
  struct _libc_fpxreg _st[8];
  struct _libc_xmmreg _xmm[16];
  __uint32_t padding[24];
};
typedef struct _libc_fpstate *fpregset_t;
typedef struct
  {
    gregset_t gregs;
    fpregset_t fpregs;
    __extension__ unsigned long long __reserved1 [8];
} mcontext_t;
typedef struct ucontext
  {
    unsigned long int uc_flags;
    struct ucontext *uc_link;
    stack_t uc_stack;
    mcontext_t uc_mcontext;
    __sigset_t uc_sigmask;
    struct _libc_fpstate __fpregs_mem;
  } ucontext_t;
extern int sigstack (struct sigstack *__ss, struct sigstack *__oss)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__deprecated__));
extern int sigaltstack (const struct sigaltstack *__restrict __ss,
   struct sigaltstack *__restrict __oss) __attribute__ ((__nothrow__ , __leaf__));
extern int sighold (int __sig) __attribute__ ((__nothrow__ , __leaf__));
extern int sigrelse (int __sig) __attribute__ ((__nothrow__ , __leaf__));
extern int sigignore (int __sig) __attribute__ ((__nothrow__ , __leaf__));
extern __sighandler_t sigset (int __sig, __sighandler_t __disp) __attribute__ ((__nothrow__ , __leaf__));
extern int pthread_sigmask (int __how,
       const __sigset_t *__restrict __newmask,
       __sigset_t *__restrict __oldmask)__attribute__ ((__nothrow__ , __leaf__));
extern int pthread_kill (pthread_t __threadid, int __signo) __attribute__ ((__nothrow__ , __leaf__));
extern int pthread_sigqueue (pthread_t __threadid, int __signo,
        const union sigval __value) __attribute__ ((__nothrow__ , __leaf__));
extern int __libc_current_sigrtmin (void) __attribute__ ((__nothrow__ , __leaf__));
extern int __libc_current_sigrtmax (void) __attribute__ ((__nothrow__ , __leaf__));
extern int _gl_cxxalias_dummy
                                                                          ;
extern int _gl_cxxalias_dummy;
extern
void g_on_error_query (const gchar *prg_name);
extern
void g_on_error_stack_trace (const gchar *prg_name);
extern
gsize g_base64_encode_step (const guchar *in,
                                 gsize len,
                                 gboolean break_lines,
                                 gchar *out,
                                 gint *state,
                                 gint *save);
extern
gsize g_base64_encode_close (gboolean break_lines,
                                 gchar *out,
                                 gint *state,
                                 gint *save);
extern
gchar* g_base64_encode (const guchar *data,
                                 gsize len) __attribute__((__malloc__));
extern
gsize g_base64_decode_step (const gchar *in,
                                 gsize len,
                                 guchar *out,
                                 gint *state,
                                 guint *save);
extern
guchar *g_base64_decode (const gchar *text,
                                 gsize *out_len) __attribute__((__malloc__));
extern
guchar *g_base64_decode_inplace (gchar *text,
                                 gsize *out_len);
extern
void g_bit_lock (volatile gint *address,
                                           gint lock_bit);
extern
gboolean g_bit_trylock (volatile gint *address,
                                           gint lock_bit);
extern
void g_bit_unlock (volatile gint *address,
                                           gint lock_bit);
extern
void g_pointer_bit_lock (volatile void *address,
                                           gint lock_bit);
extern
gboolean g_pointer_bit_trylock (volatile void *address,
                                           gint lock_bit);
extern
void g_pointer_bit_unlock (volatile void *address,
                                           gint lock_bit);
typedef enum
{
  G_BOOKMARK_FILE_ERROR_INVALID_URI,
  G_BOOKMARK_FILE_ERROR_INVALID_VALUE,
  G_BOOKMARK_FILE_ERROR_APP_NOT_REGISTERED,
  G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND,
  G_BOOKMARK_FILE_ERROR_READ,
  G_BOOKMARK_FILE_ERROR_UNKNOWN_ENCODING,
  G_BOOKMARK_FILE_ERROR_WRITE,
  G_BOOKMARK_FILE_ERROR_FILE_NOT_FOUND
} GBookmarkFileError;
extern
GQuark g_bookmark_file_error_quark (void);
typedef struct _GBookmarkFile GBookmarkFile;
extern
GBookmarkFile *g_bookmark_file_new (void);
extern
void g_bookmark_file_free (GBookmarkFile *bookmark);
extern
gboolean g_bookmark_file_load_from_file (GBookmarkFile *bookmark,
          const gchar *filename,
          GError **error);
extern
gboolean g_bookmark_file_load_from_data (GBookmarkFile *bookmark,
          const gchar *data,
          gsize length,
          GError **error);
extern
gboolean g_bookmark_file_load_from_data_dirs (GBookmarkFile *bookmark,
          const gchar *file,
          gchar **full_path,
          GError **error);
extern
gchar * g_bookmark_file_to_data (GBookmarkFile *bookmark,
          gsize *length,
          GError **error) __attribute__((__malloc__));
extern
gboolean g_bookmark_file_to_file (GBookmarkFile *bookmark,
          const gchar *filename,
          GError **error);
extern
void g_bookmark_file_set_title (GBookmarkFile *bookmark,
          const gchar *uri,
          const gchar *title);
extern
gchar * g_bookmark_file_get_title (GBookmarkFile *bookmark,
          const gchar *uri,
          GError **error) __attribute__((__malloc__));
extern
void g_bookmark_file_set_description (GBookmarkFile *bookmark,
          const gchar *uri,
          const gchar *description);
extern
gchar * g_bookmark_file_get_description (GBookmarkFile *bookmark,
          const gchar *uri,
          GError **error) __attribute__((__malloc__));
extern
void g_bookmark_file_set_mime_type (GBookmarkFile *bookmark,
          const gchar *uri,
          const gchar *mime_type);
extern
gchar * g_bookmark_file_get_mime_type (GBookmarkFile *bookmark,
          const gchar *uri,
          GError **error) __attribute__((__malloc__));
extern
void g_bookmark_file_set_groups (GBookmarkFile *bookmark,
          const gchar *uri,
          const gchar **groups,
          gsize length);
extern
void g_bookmark_file_add_group (GBookmarkFile *bookmark,
          const gchar *uri,
          const gchar *group);
extern
gboolean g_bookmark_file_has_group (GBookmarkFile *bookmark,
          const gchar *uri,
          const gchar *group,
          GError **error);
extern
gchar ** g_bookmark_file_get_groups (GBookmarkFile *bookmark,
          const gchar *uri,
          gsize *length,
          GError **error) __attribute__((__malloc__));
extern
void g_bookmark_file_add_application (GBookmarkFile *bookmark,
          const gchar *uri,
          const gchar *name,
          const gchar *exec);
extern
gboolean g_bookmark_file_has_application (GBookmarkFile *bookmark,
          const gchar *uri,
          const gchar *name,
          GError **error);
extern
gchar ** g_bookmark_file_get_applications (GBookmarkFile *bookmark,
          const gchar *uri,
          gsize *length,
          GError **error) __attribute__((__malloc__));
extern
gboolean g_bookmark_file_set_app_info (GBookmarkFile *bookmark,
          const gchar *uri,
          const gchar *name,
          const gchar *exec,
          gint count,
          time_t stamp,
          GError **error);
extern
gboolean g_bookmark_file_get_app_info (GBookmarkFile *bookmark,
          const gchar *uri,
          const gchar *name,
          gchar **exec,
          guint *count,
          time_t *stamp,
          GError **error);
extern
void g_bookmark_file_set_is_private (GBookmarkFile *bookmark,
          const gchar *uri,
          gboolean is_private);
extern
gboolean g_bookmark_file_get_is_private (GBookmarkFile *bookmark,
          const gchar *uri,
          GError **error);
extern
void g_bookmark_file_set_icon (GBookmarkFile *bookmark,
          const gchar *uri,
          const gchar *href,
          const gchar *mime_type);
extern
gboolean g_bookmark_file_get_icon (GBookmarkFile *bookmark,
          const gchar *uri,
          gchar **href,
          gchar **mime_type,
          GError **error);
extern
void g_bookmark_file_set_added (GBookmarkFile *bookmark,
          const gchar *uri,
          time_t added);
extern
time_t g_bookmark_file_get_added (GBookmarkFile *bookmark,
          const gchar *uri,
          GError **error);
extern
void g_bookmark_file_set_modified (GBookmarkFile *bookmark,
          const gchar *uri,
          time_t modified);
extern
time_t g_bookmark_file_get_modified (GBookmarkFile *bookmark,
          const gchar *uri,
          GError **error);
extern
void g_bookmark_file_set_visited (GBookmarkFile *bookmark,
          const gchar *uri,
          time_t visited);
extern
time_t g_bookmark_file_get_visited (GBookmarkFile *bookmark,
          const gchar *uri,
          GError **error);
extern
gboolean g_bookmark_file_has_item (GBookmarkFile *bookmark,
          const gchar *uri);
extern
gint g_bookmark_file_get_size (GBookmarkFile *bookmark);
extern
gchar ** g_bookmark_file_get_uris (GBookmarkFile *bookmark,
          gsize *length) __attribute__((__malloc__));
extern
gboolean g_bookmark_file_remove_group (GBookmarkFile *bookmark,
          const gchar *uri,
          const gchar *group,
          GError **error);
extern
gboolean g_bookmark_file_remove_application (GBookmarkFile *bookmark,
          const gchar *uri,
          const gchar *name,
          GError **error);
extern
gboolean g_bookmark_file_remove_item (GBookmarkFile *bookmark,
          const gchar *uri,
          GError **error);
extern
gboolean g_bookmark_file_move_item (GBookmarkFile *bookmark,
          const gchar *old_uri,
          const gchar *new_uri,
          GError **error);
extern
GBytes * g_bytes_new (gconstpointer data,
                                                 gsize size);
extern
GBytes * g_bytes_new_take (gpointer data,
                                                 gsize size);
extern
GBytes * g_bytes_new_static (gconstpointer data,
                                                 gsize size);
extern
GBytes * g_bytes_new_with_free_func (gconstpointer data,
                                                 gsize size,
                                                 GDestroyNotify free_func,
                                                 gpointer user_data);
extern
GBytes * g_bytes_new_from_bytes (GBytes *bytes,
                                                 gsize offset,
                                                 gsize length);
extern
gconstpointer g_bytes_get_data (GBytes *bytes,
                                                 gsize *size);
extern
gsize g_bytes_get_size (GBytes *bytes);
extern
GBytes * g_bytes_ref (GBytes *bytes);
extern
void g_bytes_unref (GBytes *bytes);
extern
gpointer g_bytes_unref_to_data (GBytes *bytes,
                                                 gsize *size);
extern
GByteArray * g_bytes_unref_to_array (GBytes *bytes);
extern
guint g_bytes_hash (gconstpointer bytes);
extern
gboolean g_bytes_equal (gconstpointer bytes1,
                                                 gconstpointer bytes2);
extern
gint g_bytes_compare (gconstpointer bytes1,
                                                 gconstpointer bytes2);
extern
gboolean g_get_charset (const char **charset);
extern
gchar * g_get_codeset (void);
extern
const gchar * const * g_get_language_names (void);
extern
gchar ** g_get_locale_variants (const gchar *locale);
typedef enum {
  G_CHECKSUM_MD5,
  G_CHECKSUM_SHA1,
  G_CHECKSUM_SHA256,
  G_CHECKSUM_SHA512
} GChecksumType;
typedef struct _GChecksum GChecksum;
extern
gssize g_checksum_type_get_length (GChecksumType checksum_type);
extern
GChecksum * g_checksum_new (GChecksumType checksum_type);
extern
void g_checksum_reset (GChecksum *checksum);
extern
GChecksum * g_checksum_copy (const GChecksum *checksum);
extern
void g_checksum_free (GChecksum *checksum);
extern
void g_checksum_update (GChecksum *checksum,
                                                     const guchar *data,
                                                     gssize length);
extern
const gchar * g_checksum_get_string (GChecksum *checksum);
extern
void g_checksum_get_digest (GChecksum *checksum,
                                                     guint8 *buffer,
                                                     gsize *digest_len);
extern
gchar *g_compute_checksum_for_data (GChecksumType checksum_type,
                                                     const guchar *data,
                                                     gsize length);
extern
gchar *g_compute_checksum_for_string (GChecksumType checksum_type,
                                                     const gchar *str,
                                                     gssize length);
extern
gchar *g_compute_checksum_for_bytes (GChecksumType checksum_type,
                                                     GBytes *data);
typedef enum
{
  G_CONVERT_ERROR_NO_CONVERSION,
  G_CONVERT_ERROR_ILLEGAL_SEQUENCE,
  G_CONVERT_ERROR_FAILED,
  G_CONVERT_ERROR_PARTIAL_INPUT,
  G_CONVERT_ERROR_BAD_URI,
  G_CONVERT_ERROR_NOT_ABSOLUTE_PATH,
  G_CONVERT_ERROR_NO_MEMORY
} GConvertError;
extern
GQuark g_convert_error_quark (void);
typedef struct _GIConv *GIConv;
extern
GIConv g_iconv_open (const gchar *to_codeset,
         const gchar *from_codeset);
extern
gsize g_iconv (GIConv converter,
         gchar **inbuf,
         gsize *inbytes_left,
         gchar **outbuf,
         gsize *outbytes_left);
extern
gint g_iconv_close (GIConv converter);
extern
gchar* g_convert (const gchar *str,
    gssize len,
    const gchar *to_codeset,
    const gchar *from_codeset,
    gsize *bytes_read,
    gsize *bytes_written,
    GError **error) __attribute__((__malloc__));
extern
gchar* g_convert_with_iconv (const gchar *str,
    gssize len,
    GIConv converter,
    gsize *bytes_read,
    gsize *bytes_written,
    GError **error) __attribute__((__malloc__));
extern
gchar* g_convert_with_fallback (const gchar *str,
    gssize len,
    const gchar *to_codeset,
    const gchar *from_codeset,
    const gchar *fallback,
    gsize *bytes_read,
    gsize *bytes_written,
    GError **error) __attribute__((__malloc__));
extern
gchar* g_locale_to_utf8 (const gchar *opsysstring,
      gssize len,
      gsize *bytes_read,
      gsize *bytes_written,
      GError **error) __attribute__((__malloc__));
extern
gchar* g_locale_from_utf8 (const gchar *utf8string,
      gssize len,
      gsize *bytes_read,
      gsize *bytes_written,
      GError **error) __attribute__((__malloc__));
extern
gchar* g_filename_to_utf8 (const gchar *opsysstring,
        gssize len,
        gsize *bytes_read,
        gsize *bytes_written,
        GError **error) __attribute__((__malloc__));
extern
gchar* g_filename_from_utf8 (const gchar *utf8string,
        gssize len,
        gsize *bytes_read,
        gsize *bytes_written,
        GError **error) __attribute__((__malloc__));
extern
gchar *g_filename_from_uri (const gchar *uri,
       gchar **hostname,
       GError **error) __attribute__((__malloc__));
extern
gchar *g_filename_to_uri (const gchar *filename,
       const gchar *hostname,
       GError **error) __attribute__((__malloc__));
extern
gchar *g_filename_display_name (const gchar *filename) __attribute__((__malloc__));
extern
gboolean g_get_filename_charsets (const gchar ***charsets);
extern
gchar *g_filename_display_basename (const gchar *filename) __attribute__((__malloc__));
extern
gchar **g_uri_list_extract_uris (const gchar *uri_list) __attribute__((__malloc__));
typedef struct _GData GData;
typedef void (*GDataForeachFunc) (GQuark key_id,
                                                 gpointer data,
                                                 gpointer user_data);
extern
void g_datalist_init (GData **datalist);
extern
void g_datalist_clear (GData **datalist);
extern
gpointer g_datalist_id_get_data (GData **datalist,
      GQuark key_id);
extern
void g_datalist_id_set_data_full (GData **datalist,
      GQuark key_id,
      gpointer data,
      GDestroyNotify destroy_func);
typedef gpointer (*GDuplicateFunc) (gpointer data, gpointer user_data);
extern
gpointer g_datalist_id_dup_data (GData **datalist,
                                         GQuark key_id,
                                         GDuplicateFunc dup_func,
      gpointer user_data);
extern
gboolean g_datalist_id_replace_data (GData **datalist,
                                         GQuark key_id,
                                         gpointer oldval,
                                         gpointer newval,
                                         GDestroyNotify destroy,
      GDestroyNotify *old_destroy);
extern
gpointer g_datalist_id_remove_no_notify (GData **datalist,
      GQuark key_id);
extern
void g_datalist_foreach (GData **datalist,
      GDataForeachFunc func,
      gpointer user_data);
extern
void g_datalist_set_flags (GData **datalist,
      guint flags);
extern
void g_datalist_unset_flags (GData **datalist,
      guint flags);
extern
guint g_datalist_get_flags (GData **datalist);
extern
void g_dataset_destroy (gconstpointer dataset_location);
extern
gpointer g_dataset_id_get_data (gconstpointer dataset_location,
                                         GQuark key_id);
extern
gpointer g_datalist_get_data (GData **datalist,
       const gchar *key);
extern
void g_dataset_id_set_data_full (gconstpointer dataset_location,
                                         GQuark key_id,
                                         gpointer data,
                                         GDestroyNotify destroy_func);
extern
gpointer g_dataset_id_remove_no_notify (gconstpointer dataset_location,
                                         GQuark key_id);
extern
void g_dataset_foreach (gconstpointer dataset_location,
                                         GDataForeachFunc func,
                                         gpointer user_data);
typedef gint32 GTime;
typedef guint16 GDateYear;
typedef guint8 GDateDay;
typedef struct _GDate GDate;
typedef enum
{
  G_DATE_DAY = 0,
  G_DATE_MONTH = 1,
  G_DATE_YEAR = 2
} GDateDMY;
typedef enum
{
  G_DATE_BAD_WEEKDAY = 0,
  G_DATE_MONDAY = 1,
  G_DATE_TUESDAY = 2,
  G_DATE_WEDNESDAY = 3,
  G_DATE_THURSDAY = 4,
  G_DATE_FRIDAY = 5,
  G_DATE_SATURDAY = 6,
  G_DATE_SUNDAY = 7
} GDateWeekday;
typedef enum
{
  G_DATE_BAD_MONTH = 0,
  G_DATE_JANUARY = 1,
  G_DATE_FEBRUARY = 2,
  G_DATE_MARCH = 3,
  G_DATE_APRIL = 4,
  G_DATE_MAY = 5,
  G_DATE_JUNE = 6,
  G_DATE_JULY = 7,
  G_DATE_AUGUST = 8,
  G_DATE_SEPTEMBER = 9,
  G_DATE_OCTOBER = 10,
  G_DATE_NOVEMBER = 11,
  G_DATE_DECEMBER = 12
} GDateMonth;
struct _GDate
{
  guint julian_days : 32;
  guint julian : 1;
  guint dmy : 1;
  guint day : 6;
  guint month : 4;
  guint year : 16;
};
extern
GDate* g_date_new (void);
extern
GDate* g_date_new_dmy (GDateDay day,
                                           GDateMonth month,
                                           GDateYear year);
extern
GDate* g_date_new_julian (guint32 julian_day);
extern
void g_date_free (GDate *date);
extern
gboolean g_date_valid (const GDate *date);
extern
gboolean g_date_valid_day (GDateDay day) __attribute__((__const__));
extern
gboolean g_date_valid_month (GDateMonth month) __attribute__((__const__));
extern
gboolean g_date_valid_year (GDateYear year) __attribute__((__const__));
extern
gboolean g_date_valid_weekday (GDateWeekday weekday) __attribute__((__const__));
extern
gboolean g_date_valid_julian (guint32 julian_date) __attribute__((__const__));
extern
gboolean g_date_valid_dmy (GDateDay day,
                                           GDateMonth month,
                                           GDateYear year) __attribute__((__const__));
extern
GDateWeekday g_date_get_weekday (const GDate *date);
extern
GDateMonth g_date_get_month (const GDate *date);
extern
GDateYear g_date_get_year (const GDate *date);
extern
GDateDay g_date_get_day (const GDate *date);
extern
guint32 g_date_get_julian (const GDate *date);
extern
guint g_date_get_day_of_year (const GDate *date);
extern
guint g_date_get_monday_week_of_year (const GDate *date);
extern
guint g_date_get_sunday_week_of_year (const GDate *date);
extern
guint g_date_get_iso8601_week_of_year (const GDate *date);
extern
void g_date_clear (GDate *date,
                                           guint n_dates);
extern
void g_date_set_parse (GDate *date,
                                           const gchar *str);
extern
void g_date_set_time_t (GDate *date,
        time_t timet);
extern
void g_date_set_time_val (GDate *date,
        GTimeVal *timeval);
extern
void g_date_set_time (GDate *date,
                                           GTime time_);
extern
void g_date_set_month (GDate *date,
                                           GDateMonth month);
extern
void g_date_set_day (GDate *date,
                                           GDateDay day);
extern
void g_date_set_year (GDate *date,
                                           GDateYear year);
extern
void g_date_set_dmy (GDate *date,
                                           GDateDay day,
                                           GDateMonth month,
                                           GDateYear y);
extern
void g_date_set_julian (GDate *date,
                                           guint32 julian_date);
extern
gboolean g_date_is_first_of_month (const GDate *date);
extern
gboolean g_date_is_last_of_month (const GDate *date);
extern
void g_date_add_days (GDate *date,
                                           guint n_days);
extern
void g_date_subtract_days (GDate *date,
                                           guint n_days);
extern
void g_date_add_months (GDate *date,
                                           guint n_months);
extern
void g_date_subtract_months (GDate *date,
                                           guint n_months);
extern
void g_date_add_years (GDate *date,
                                           guint n_years);
extern
void g_date_subtract_years (GDate *date,
                                           guint n_years);
extern
gboolean g_date_is_leap_year (GDateYear year) __attribute__((__const__));
extern
guint8 g_date_get_days_in_month (GDateMonth month,
                                           GDateYear year) __attribute__((__const__));
extern
guint8 g_date_get_monday_weeks_in_year (GDateYear year) __attribute__((__const__));
extern
guint8 g_date_get_sunday_weeks_in_year (GDateYear year) __attribute__((__const__));
extern
gint g_date_days_between (const GDate *date1,
        const GDate *date2);
extern
gint g_date_compare (const GDate *lhs,
                                           const GDate *rhs);
extern
void g_date_to_struct_tm (const GDate *date,
                                           struct tm *tm);
extern
void g_date_clamp (GDate *date,
        const GDate *min_date,
        const GDate *max_date);
extern
void g_date_order (GDate *date1, GDate *date2);
extern
gsize g_date_strftime (gchar *s,
                                           gsize slen,
                                           const gchar *format,
                                           const GDate *date);
typedef struct _GTimeZone GTimeZone;
typedef enum
{
  G_TIME_TYPE_STANDARD,
  G_TIME_TYPE_DAYLIGHT,
  G_TIME_TYPE_UNIVERSAL
} GTimeType;
extern
GTimeZone * g_time_zone_new (const gchar *identifier);
extern
GTimeZone * g_time_zone_new_utc (void);
extern
GTimeZone * g_time_zone_new_local (void);
extern
GTimeZone * g_time_zone_ref (GTimeZone *tz);
extern
void g_time_zone_unref (GTimeZone *tz);
extern
gint g_time_zone_find_interval (GTimeZone *tz,
                                                                         GTimeType type,
                                                                         gint64 time_);
extern
gint g_time_zone_adjust_time (GTimeZone *tz,
                                                                         GTimeType type,
                                                                         gint64 *time_);
extern
const gchar * g_time_zone_get_abbreviation (GTimeZone *tz,
                                                                         gint interval);
extern
gint32 g_time_zone_get_offset (GTimeZone *tz,
                                                                         gint interval);
extern
gboolean g_time_zone_is_dst (GTimeZone *tz,
                                                                         gint interval);
typedef gint64 GTimeSpan;
typedef struct _GDateTime GDateTime;
extern
void g_date_time_unref (GDateTime *datetime);
extern
GDateTime * g_date_time_ref (GDateTime *datetime);
extern
GDateTime * g_date_time_new_now (GTimeZone *tz);
extern
GDateTime * g_date_time_new_now_local (void);
extern
GDateTime * g_date_time_new_now_utc (void);
extern
GDateTime * g_date_time_new_from_unix_local (gint64 t);
extern
GDateTime * g_date_time_new_from_unix_utc (gint64 t);
extern
GDateTime * g_date_time_new_from_timeval_local (const GTimeVal *tv);
extern
GDateTime * g_date_time_new_from_timeval_utc (const GTimeVal *tv);
extern
GDateTime * g_date_time_new (GTimeZone *tz,
                                                                         gint year,
                                                                         gint month,
                                                                         gint day,
                                                                         gint hour,
                                                                         gint minute,
                                                                         gdouble seconds);
extern
GDateTime * g_date_time_new_local (gint year,
                                                                         gint month,
                                                                         gint day,
                                                                         gint hour,
                                                                         gint minute,
                                                                         gdouble seconds);
extern
GDateTime * g_date_time_new_utc (gint year,
                                                                         gint month,
                                                                         gint day,
                                                                         gint hour,
                                                                         gint minute,
                                                                         gdouble seconds);
extern
__attribute__((warn_unused_result))
GDateTime * g_date_time_add (GDateTime *datetime,
                                                                         GTimeSpan timespan);
extern
__attribute__((warn_unused_result))
GDateTime * g_date_time_add_years (GDateTime *datetime,
                                                                         gint years);
extern
__attribute__((warn_unused_result))
GDateTime * g_date_time_add_months (GDateTime *datetime,
                                                                         gint months);
extern
__attribute__((warn_unused_result))
GDateTime * g_date_time_add_weeks (GDateTime *datetime,
                                                                         gint weeks);
extern
__attribute__((warn_unused_result))
GDateTime * g_date_time_add_days (GDateTime *datetime,
                                                                         gint days);
extern
__attribute__((warn_unused_result))
GDateTime * g_date_time_add_hours (GDateTime *datetime,
                                                                         gint hours);
extern
__attribute__((warn_unused_result))
GDateTime * g_date_time_add_minutes (GDateTime *datetime,
                                                                         gint minutes);
extern
__attribute__((warn_unused_result))
GDateTime * g_date_time_add_seconds (GDateTime *datetime,
                                                                         gdouble seconds);
extern
__attribute__((warn_unused_result))
GDateTime * g_date_time_add_full (GDateTime *datetime,
                                                                         gint years,
                                                                         gint months,
                                                                         gint days,
                                                                         gint hours,
                                                                         gint minutes,
                                                                         gdouble seconds);
extern
gint g_date_time_compare (gconstpointer dt1,
                                                                         gconstpointer dt2);
extern
GTimeSpan g_date_time_difference (GDateTime *end,
                                                                         GDateTime *begin);
extern
guint g_date_time_hash (gconstpointer datetime);
extern
gboolean g_date_time_equal (gconstpointer dt1,
                                                                         gconstpointer dt2);
extern
void g_date_time_get_ymd (GDateTime *datetime,
                                                                         gint *year,
                                                                         gint *month,
                                                                         gint *day);
extern
gint g_date_time_get_year (GDateTime *datetime);
extern
gint g_date_time_get_month (GDateTime *datetime);
extern
gint g_date_time_get_day_of_month (GDateTime *datetime);
extern
gint g_date_time_get_week_numbering_year (GDateTime *datetime);
extern
gint g_date_time_get_week_of_year (GDateTime *datetime);
extern
gint g_date_time_get_day_of_week (GDateTime *datetime);
extern
gint g_date_time_get_day_of_year (GDateTime *datetime);
extern
gint g_date_time_get_hour (GDateTime *datetime);
extern
gint g_date_time_get_minute (GDateTime *datetime);
extern
gint g_date_time_get_second (GDateTime *datetime);
extern
gint g_date_time_get_microsecond (GDateTime *datetime);
extern
gdouble g_date_time_get_seconds (GDateTime *datetime);
extern
gint64 g_date_time_to_unix (GDateTime *datetime);
extern
gboolean g_date_time_to_timeval (GDateTime *datetime,
                                                                         GTimeVal *tv);
extern
GTimeSpan g_date_time_get_utc_offset (GDateTime *datetime);
extern
const gchar * g_date_time_get_timezone_abbreviation (GDateTime *datetime);
extern
gboolean g_date_time_is_daylight_savings (GDateTime *datetime);
extern
GDateTime * g_date_time_to_timezone (GDateTime *datetime,
                                                                         GTimeZone *tz);
extern
GDateTime * g_date_time_to_local (GDateTime *datetime);
extern
GDateTime * g_date_time_to_utc (GDateTime *datetime);
extern
gchar * g_date_time_format (GDateTime *datetime,
                                                                         const gchar *format) __attribute__((__malloc__));
struct dirent
  {
    __ino_t d_ino;
    __off_t d_off;
    unsigned short int d_reclen;
    unsigned char d_type;
    char d_name[256];
  };
struct dirent64
  {
    __ino64_t d_ino;
    __off64_t d_off;
    unsigned short int d_reclen;
    unsigned char d_type;
    char d_name[256];
  };
enum
  {
    DT_UNKNOWN = 0,
    DT_FIFO = 1,
    DT_CHR = 2,
    DT_DIR = 4,
    DT_BLK = 6,
    DT_REG = 8,
    DT_LNK = 10,
    DT_SOCK = 12,
    DT_WHT = 14
  };
typedef struct __dirstream DIR;
extern DIR *opendir (const char *__name) __attribute__ ((__nonnull__ (1)));
extern DIR *fdopendir (int __fd);
extern int closedir (DIR *__dirp) __attribute__ ((__nonnull__ (1)));
extern struct dirent *readdir (DIR *__dirp) __attribute__ ((__nonnull__ (1)));
extern struct dirent64 *readdir64 (DIR *__dirp) __attribute__ ((__nonnull__ (1)));
extern int readdir_r (DIR *__restrict __dirp,
        struct dirent *__restrict __entry,
        struct dirent **__restrict __result)
     __attribute__ ((__nonnull__ (1, 2, 3)));
extern int readdir64_r (DIR *__restrict __dirp,
   struct dirent64 *__restrict __entry,
   struct dirent64 **__restrict __result)
     __attribute__ ((__nonnull__ (1, 2, 3)));
extern void rewinddir (DIR *__dirp) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern void seekdir (DIR *__dirp, long int __pos) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern long int telldir (DIR *__dirp) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern int dirfd (DIR *__dirp) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern int scandir (const char *__restrict __dir,
      struct dirent ***__restrict __namelist,
      int (*__selector) (const struct dirent *),
      int (*__cmp) (const struct dirent **,
      const struct dirent **))
     __attribute__ ((__nonnull__ (1, 2)));
extern int scandir64 (const char *__restrict __dir,
        struct dirent64 ***__restrict __namelist,
        int (*__selector) (const struct dirent64 *),
        int (*__cmp) (const struct dirent64 **,
        const struct dirent64 **))
     __attribute__ ((__nonnull__ (1, 2)));
extern int scandirat (int __dfd, const char *__restrict __dir,
        struct dirent ***__restrict __namelist,
        int (*__selector) (const struct dirent *),
        int (*__cmp) (const struct dirent **,
        const struct dirent **))
     __attribute__ ((__nonnull__ (2, 3)));
extern int scandirat64 (int __dfd, const char *__restrict __dir,
   struct dirent64 ***__restrict __namelist,
   int (*__selector) (const struct dirent64 *),
   int (*__cmp) (const struct dirent64 **,
          const struct dirent64 **))
     __attribute__ ((__nonnull__ (2, 3)));
extern int alphasort (const struct dirent **__e1,
        const struct dirent **__e2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern int alphasort64 (const struct dirent64 **__e1,
   const struct dirent64 **__e2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern __ssize_t getdirentries (int __fd, char *__restrict __buf,
    size_t __nbytes,
    __off_t *__restrict __basep)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4)));
extern __ssize_t getdirentries64 (int __fd, char *__restrict __buf,
      size_t __nbytes,
      __off64_t *__restrict __basep)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4)));
extern int versionsort (const struct dirent **__e1,
   const struct dirent **__e2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern int versionsort64 (const struct dirent64 **__e1,
     const struct dirent64 **__e2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern int _gl_cxxalias_dummy;
extern int _gl_cxxalias_dummy;
typedef struct _GDir GDir;
extern
GDir * g_dir_open (const gchar *path,
            guint flags,
            GError **error);
extern
const gchar * g_dir_read_name (GDir *dir);
extern
void g_dir_rewind (GDir *dir);
extern
void g_dir_close (GDir *dir);
extern
const gchar * g_getenv (const gchar *variable);
extern
gboolean g_setenv (const gchar *variable,
                                  const gchar *value,
                                  gboolean overwrite);
extern
void g_unsetenv (const gchar *variable);
extern
gchar ** g_listenv (void);
extern
gchar ** g_get_environ (void);
extern
const gchar * g_environ_getenv (gchar **envp,
                                  const gchar *variable);
extern
gchar ** g_environ_setenv (gchar **envp,
                                  const gchar *variable,
                                  const gchar *value,
                                  gboolean overwrite) __attribute__((warn_unused_result));
extern
gchar ** g_environ_unsetenv (gchar **envp,
                                  const gchar *variable) __attribute__((warn_unused_result));
typedef enum
{
  G_FILE_ERROR_EXIST,
  G_FILE_ERROR_ISDIR,
  G_FILE_ERROR_ACCES,
  G_FILE_ERROR_NAMETOOLONG,
  G_FILE_ERROR_NOENT,
  G_FILE_ERROR_NOTDIR,
  G_FILE_ERROR_NXIO,
  G_FILE_ERROR_NODEV,
  G_FILE_ERROR_ROFS,
  G_FILE_ERROR_TXTBSY,
  G_FILE_ERROR_FAULT,
  G_FILE_ERROR_LOOP,
  G_FILE_ERROR_NOSPC,
  G_FILE_ERROR_NOMEM,
  G_FILE_ERROR_MFILE,
  G_FILE_ERROR_NFILE,
  G_FILE_ERROR_BADF,
  G_FILE_ERROR_INVAL,
  G_FILE_ERROR_PIPE,
  G_FILE_ERROR_AGAIN,
  G_FILE_ERROR_INTR,
  G_FILE_ERROR_IO,
  G_FILE_ERROR_PERM,
  G_FILE_ERROR_NOSYS,
  G_FILE_ERROR_FAILED
} GFileError;
typedef enum
{
  G_FILE_TEST_IS_REGULAR = 1 << 0,
  G_FILE_TEST_IS_SYMLINK = 1 << 1,
  G_FILE_TEST_IS_DIR = 1 << 2,
  G_FILE_TEST_IS_EXECUTABLE = 1 << 3,
  G_FILE_TEST_EXISTS = 1 << 4
} GFileTest;
extern
GQuark g_file_error_quark (void);
extern
GFileError g_file_error_from_errno (gint err_no);
extern
gboolean g_file_test (const gchar *filename,
                              GFileTest test);
extern
gboolean g_file_get_contents (const gchar *filename,
                              gchar **contents,
                              gsize *length,
                              GError **error);
extern
gboolean g_file_set_contents (const gchar *filename,
                              const gchar *contents,
                              gssize length,
                              GError **error);
extern
gchar *g_file_read_link (const gchar *filename,
                              GError **error);
extern
gchar *g_mkdtemp (gchar *tmpl);
extern
gchar *g_mkdtemp_full (gchar *tmpl,
                               gint mode);
extern
gint g_mkstemp (gchar *tmpl);
extern
gint g_mkstemp_full (gchar *tmpl,
                               gint flags,
                               gint mode);
extern
gint g_file_open_tmp (const gchar *tmpl,
                               gchar **name_used,
                               GError **error);
extern
gchar *g_dir_make_tmp (const gchar *tmpl,
                               GError **error);
extern
gchar *g_build_path (const gchar *separator,
                               const gchar *first_element,
                               ...) __attribute__((__malloc__)) __attribute__((__sentinel__));
extern
gchar *g_build_pathv (const gchar *separator,
                               gchar **args) __attribute__((__malloc__));
extern
gchar *g_build_filename (const gchar *first_element,
                               ...) __attribute__((__malloc__)) __attribute__((__sentinel__));
extern
gchar *g_build_filenamev (gchar **args) __attribute__((__malloc__));
extern
gint g_mkdir_with_parents (const gchar *pathname,
                               gint mode);
extern
gboolean g_path_is_absolute (const gchar *file_name);
extern
const gchar *g_path_skip_root (const gchar *file_name);
extern
const gchar *g_basename (const gchar *file_name);
extern
gchar *g_get_current_dir (void);
extern
gchar *g_path_get_basename (const gchar *file_name) __attribute__((__malloc__));
extern
gchar *g_path_get_dirname (const gchar *file_name) __attribute__((__malloc__));
extern
const gchar *g_strip_context (const gchar *msgid,
                              const gchar *msgval) __attribute__((__format_arg__ (1)));
extern
const gchar *g_dgettext (const gchar *domain,
                              const gchar *msgid) __attribute__((__format_arg__ (2)));
extern
const gchar *g_dcgettext (const gchar *domain,
                              const gchar *msgid,
                              gint category) __attribute__((__format_arg__ (2)));
extern
const gchar *g_dngettext (const gchar *domain,
                              const gchar *msgid,
                              const gchar *msgid_plural,
                              gulong n) __attribute__((__format_arg__ (3)));
extern
const gchar *g_dpgettext (const gchar *domain,
                              const gchar *msgctxtid,
                              gsize msgidoffset) __attribute__((__format_arg__ (2)));
extern
const gchar *g_dpgettext2 (const gchar *domain,
                              const gchar *context,
                              const gchar *msgid) __attribute__((__format_arg__ (3)));
typedef struct _GMemVTable GMemVTable;
extern
void g_free (gpointer mem);
extern
void g_clear_pointer (gpointer *pp,
                           GDestroyNotify destroy);
extern
gpointer g_malloc (gsize n_bytes) __attribute__((__malloc__)) __attribute__((__alloc_size__(1)));
extern
gpointer g_malloc0 (gsize n_bytes) __attribute__((__malloc__)) __attribute__((__alloc_size__(1)));
extern
gpointer g_realloc (gpointer mem,
      gsize n_bytes) __attribute__((warn_unused_result));
extern
gpointer g_try_malloc (gsize n_bytes) __attribute__((__malloc__)) __attribute__((__alloc_size__(1)));
extern
gpointer g_try_malloc0 (gsize n_bytes) __attribute__((__malloc__)) __attribute__((__alloc_size__(1)));
extern
gpointer g_try_realloc (gpointer mem,
      gsize n_bytes) __attribute__((warn_unused_result));
extern
gpointer g_malloc_n (gsize n_blocks,
      gsize n_block_bytes) __attribute__((__malloc__)) __attribute__((__alloc_size__(1,2)));
extern
gpointer g_malloc0_n (gsize n_blocks,
      gsize n_block_bytes) __attribute__((__malloc__)) __attribute__((__alloc_size__(1,2)));
extern
gpointer g_realloc_n (gpointer mem,
      gsize n_blocks,
      gsize n_block_bytes) __attribute__((warn_unused_result));
extern
gpointer g_try_malloc_n (gsize n_blocks,
      gsize n_block_bytes) __attribute__((__malloc__)) __attribute__((__alloc_size__(1,2)));
extern
gpointer g_try_malloc0_n (gsize n_blocks,
      gsize n_block_bytes) __attribute__((__malloc__)) __attribute__((__alloc_size__(1,2)));
extern
gpointer g_try_realloc_n (gpointer mem,
      gsize n_blocks,
      gsize n_block_bytes) __attribute__((warn_unused_result));
static inline gpointer
g_steal_pointer (gpointer pp)
{
  gpointer *ptr = (gpointer *) pp;
  gpointer ref;
  ref = *ptr;
  *ptr = ((void *)0);
  return ref;
}
struct _GMemVTable {
  gpointer (*malloc) (gsize n_bytes);
  gpointer (*realloc) (gpointer mem,
      gsize n_bytes);
  void (*free) (gpointer mem);
  gpointer (*calloc) (gsize n_blocks,
      gsize n_block_bytes);
  gpointer (*try_malloc) (gsize n_bytes);
  gpointer (*try_realloc) (gpointer mem,
      gsize n_bytes);
};
extern
void g_mem_set_vtable (GMemVTable *vtable);
extern
gboolean g_mem_is_system_malloc (void);
extern gboolean g_mem_gc_friendly;
extern GMemVTable *glib_mem_profiler_table;
extern
void g_mem_profile (void);
typedef struct _GNode GNode;
typedef enum
{
  G_TRAVERSE_LEAVES = 1 << 0,
  G_TRAVERSE_NON_LEAVES = 1 << 1,
  G_TRAVERSE_ALL = G_TRAVERSE_LEAVES | G_TRAVERSE_NON_LEAVES,
  G_TRAVERSE_MASK = 0x03,
  G_TRAVERSE_LEAFS = G_TRAVERSE_LEAVES,
  G_TRAVERSE_NON_LEAFS = G_TRAVERSE_NON_LEAVES
} GTraverseFlags;
typedef enum
{
  G_IN_ORDER,
  G_PRE_ORDER,
  G_POST_ORDER,
  G_LEVEL_ORDER
} GTraverseType;
typedef gboolean (*GNodeTraverseFunc) (GNode *node,
       gpointer data);
typedef void (*GNodeForeachFunc) (GNode *node,
       gpointer data);
typedef gpointer (*GCopyFunc) (gconstpointer src,
                                                 gpointer data);
struct _GNode
{
  gpointer data;
  GNode *next;
  GNode *prev;
  GNode *parent;
  GNode *children;
};
extern
GNode* g_node_new (gpointer data);
extern
void g_node_destroy (GNode *root);
extern
void g_node_unlink (GNode *node);
extern
GNode* g_node_copy_deep (GNode *node,
     GCopyFunc copy_func,
     gpointer data);
extern
GNode* g_node_copy (GNode *node);
extern
GNode* g_node_insert (GNode *parent,
     gint position,
     GNode *node);
extern
GNode* g_node_insert_before (GNode *parent,
     GNode *sibling,
     GNode *node);
extern
GNode* g_node_insert_after (GNode *parent,
     GNode *sibling,
     GNode *node);
extern
GNode* g_node_prepend (GNode *parent,
     GNode *node);
extern
guint g_node_n_nodes (GNode *root,
     GTraverseFlags flags);
extern
GNode* g_node_get_root (GNode *node);
extern
gboolean g_node_is_ancestor (GNode *node,
     GNode *descendant);
extern
guint g_node_depth (GNode *node);
extern
GNode* g_node_find (GNode *root,
     GTraverseType order,
     GTraverseFlags flags,
     gpointer data);
extern
void g_node_traverse (GNode *root,
     GTraverseType order,
     GTraverseFlags flags,
     gint max_depth,
     GNodeTraverseFunc func,
     gpointer data);
extern
guint g_node_max_height (GNode *root);
extern
void g_node_children_foreach (GNode *node,
      GTraverseFlags flags,
      GNodeForeachFunc func,
      gpointer data);
extern
void g_node_reverse_children (GNode *node);
extern
guint g_node_n_children (GNode *node);
extern
GNode* g_node_nth_child (GNode *node,
      guint n);
extern
GNode* g_node_last_child (GNode *node);
extern
GNode* g_node_find_child (GNode *node,
      GTraverseFlags flags,
      gpointer data);
extern
gint g_node_child_position (GNode *node,
      GNode *child);
extern
gint g_node_child_index (GNode *node,
      gpointer data);
extern
GNode* g_node_first_sibling (GNode *node);
extern
GNode* g_node_last_sibling (GNode *node);
typedef struct _GList GList;
struct _GList
{
  gpointer data;
  GList *next;
  GList *prev;
};
extern
GList* g_list_alloc (void) __attribute__((warn_unused_result));
extern
void g_list_free (GList *list);
extern
void g_list_free_1 (GList *list);
extern
void g_list_free_full (GList *list,
      GDestroyNotify free_func);
extern
GList* g_list_append (GList *list,
      gpointer data) __attribute__((warn_unused_result));
extern
GList* g_list_prepend (GList *list,
      gpointer data) __attribute__((warn_unused_result));
extern
GList* g_list_insert (GList *list,
      gpointer data,
      gint position) __attribute__((warn_unused_result));
extern
GList* g_list_insert_sorted (GList *list,
      gpointer data,
      GCompareFunc func) __attribute__((warn_unused_result));
extern
GList* g_list_insert_sorted_with_data (GList *list,
      gpointer data,
      GCompareDataFunc func,
      gpointer user_data) __attribute__((warn_unused_result));
extern
GList* g_list_insert_before (GList *list,
      GList *sibling,
      gpointer data) __attribute__((warn_unused_result));
extern
GList* g_list_concat (GList *list1,
      GList *list2) __attribute__((warn_unused_result));
extern
GList* g_list_remove (GList *list,
      gconstpointer data) __attribute__((warn_unused_result));
extern
GList* g_list_remove_all (GList *list,
      gconstpointer data) __attribute__((warn_unused_result));
extern
GList* g_list_remove_link (GList *list,
      GList *llink) __attribute__((warn_unused_result));
extern
GList* g_list_delete_link (GList *list,
      GList *link_) __attribute__((warn_unused_result));
extern
GList* g_list_reverse (GList *list) __attribute__((warn_unused_result));
extern
GList* g_list_copy (GList *list) __attribute__((warn_unused_result));
extern
GList* g_list_copy_deep (GList *list,
      GCopyFunc func,
      gpointer user_data) __attribute__((warn_unused_result));
extern
GList* g_list_nth (GList *list,
      guint n);
extern
GList* g_list_nth_prev (GList *list,
      guint n);
extern
GList* g_list_find (GList *list,
      gconstpointer data);
extern
GList* g_list_find_custom (GList *list,
      gconstpointer data,
      GCompareFunc func);
extern
gint g_list_position (GList *list,
      GList *llink);
extern
gint g_list_index (GList *list,
      gconstpointer data);
extern
GList* g_list_last (GList *list);
extern
GList* g_list_first (GList *list);
extern
guint g_list_length (GList *list);
extern
void g_list_foreach (GList *list,
      GFunc func,
      gpointer user_data);
extern
GList* g_list_sort (GList *list,
      GCompareFunc compare_func) __attribute__((warn_unused_result));
extern
GList* g_list_sort_with_data (GList *list,
      GCompareDataFunc compare_func,
      gpointer user_data) __attribute__((warn_unused_result));
extern
gpointer g_list_nth_data (GList *list,
      guint n);
typedef struct _GHashTable GHashTable;
typedef gboolean (*GHRFunc) (gpointer key,
                               gpointer value,
                               gpointer user_data);
typedef struct _GHashTableIter GHashTableIter;
struct _GHashTableIter
{
  gpointer dummy1;
  gpointer dummy2;
  gpointer dummy3;
  int dummy4;
  gboolean dummy5;
  gpointer dummy6;
};
extern
GHashTable* g_hash_table_new (GHashFunc hash_func,
                                            GEqualFunc key_equal_func);
extern
GHashTable* g_hash_table_new_full (GHashFunc hash_func,
                                            GEqualFunc key_equal_func,
                                            GDestroyNotify key_destroy_func,
                                            GDestroyNotify value_destroy_func);
extern
void g_hash_table_destroy (GHashTable *hash_table);
extern
gboolean g_hash_table_insert (GHashTable *hash_table,
                                            gpointer key,
                                            gpointer value);
extern
gboolean g_hash_table_replace (GHashTable *hash_table,
                                            gpointer key,
                                            gpointer value);
extern
gboolean g_hash_table_add (GHashTable *hash_table,
                                            gpointer key);
extern
gboolean g_hash_table_remove (GHashTable *hash_table,
                                            gconstpointer key);
extern
void g_hash_table_remove_all (GHashTable *hash_table);
extern
gboolean g_hash_table_steal (GHashTable *hash_table,
                                            gconstpointer key);
extern
void g_hash_table_steal_all (GHashTable *hash_table);
extern
gpointer g_hash_table_lookup (GHashTable *hash_table,
                                            gconstpointer key);
extern
gboolean g_hash_table_contains (GHashTable *hash_table,
                                            gconstpointer key);
extern
gboolean g_hash_table_lookup_extended (GHashTable *hash_table,
                                            gconstpointer lookup_key,
                                            gpointer *orig_key,
                                            gpointer *value);
extern
void g_hash_table_foreach (GHashTable *hash_table,
                                            GHFunc func,
                                            gpointer user_data);
extern
gpointer g_hash_table_find (GHashTable *hash_table,
                                            GHRFunc predicate,
                                            gpointer user_data);
extern
guint g_hash_table_foreach_remove (GHashTable *hash_table,
                                            GHRFunc func,
                                            gpointer user_data);
extern
guint g_hash_table_foreach_steal (GHashTable *hash_table,
                                            GHRFunc func,
                                            gpointer user_data);
extern
guint g_hash_table_size (GHashTable *hash_table);
extern
GList * g_hash_table_get_keys (GHashTable *hash_table);
extern
GList * g_hash_table_get_values (GHashTable *hash_table);
extern
gpointer * g_hash_table_get_keys_as_array (GHashTable *hash_table,
                                            guint *length);
extern
void g_hash_table_iter_init (GHashTableIter *iter,
                                            GHashTable *hash_table);
extern
gboolean g_hash_table_iter_next (GHashTableIter *iter,
                                            gpointer *key,
                                            gpointer *value);
extern
GHashTable* g_hash_table_iter_get_hash_table (GHashTableIter *iter);
extern
void g_hash_table_iter_remove (GHashTableIter *iter);
extern
void g_hash_table_iter_replace (GHashTableIter *iter,
                                            gpointer value);
extern
void g_hash_table_iter_steal (GHashTableIter *iter);
extern
GHashTable* g_hash_table_ref (GHashTable *hash_table);
extern
void g_hash_table_unref (GHashTable *hash_table);
extern
gboolean g_str_equal (gconstpointer v1,
                         gconstpointer v2);
extern
guint g_str_hash (gconstpointer v);
extern
gboolean g_int_equal (gconstpointer v1,
                         gconstpointer v2);
extern
guint g_int_hash (gconstpointer v);
extern
gboolean g_int64_equal (gconstpointer v1,
                         gconstpointer v2);
extern
guint g_int64_hash (gconstpointer v);
extern
gboolean g_double_equal (gconstpointer v1,
                         gconstpointer v2);
extern
guint g_double_hash (gconstpointer v);
extern
guint g_direct_hash (gconstpointer v) __attribute__((__const__));
extern
gboolean g_direct_equal (gconstpointer v1,
                         gconstpointer v2) __attribute__((__const__));
typedef struct _GHmac GHmac;
extern
GHmac * g_hmac_new (GChecksumType digest_type,
                                                     const guchar *key,
                                                     gsize key_len);
extern
GHmac * g_hmac_copy (const GHmac *hmac);
extern
GHmac * g_hmac_ref (GHmac *hmac);
extern
void g_hmac_unref (GHmac *hmac);
extern
void g_hmac_update (GHmac *hmac,
                                                     const guchar *data,
                                                     gssize length);
extern
const gchar * g_hmac_get_string (GHmac *hmac);
extern
void g_hmac_get_digest (GHmac *hmac,
                                                     guint8 *buffer,
                                                     gsize *digest_len);
extern
gchar *g_compute_hmac_for_data (GChecksumType digest_type,
                                                     const guchar *key,
                                                     gsize key_len,
                                                     const guchar *data,
                                                     gsize length);
extern
gchar *g_compute_hmac_for_string (GChecksumType digest_type,
                                                     const guchar *key,
                                                     gsize key_len,
                                                     const gchar *str,
                                                     gssize length);
typedef struct _GHook GHook;
typedef struct _GHookList GHookList;
typedef gint (*GHookCompareFunc) (GHook *new_hook,
       GHook *sibling);
typedef gboolean (*GHookFindFunc) (GHook *hook,
       gpointer data);
typedef void (*GHookMarshaller) (GHook *hook,
       gpointer marshal_data);
typedef gboolean (*GHookCheckMarshaller) (GHook *hook,
       gpointer marshal_data);
typedef void (*GHookFunc) (gpointer data);
typedef gboolean (*GHookCheckFunc) (gpointer data);
typedef void (*GHookFinalizeFunc) (GHookList *hook_list,
       GHook *hook);
typedef enum
{
  G_HOOK_FLAG_ACTIVE = 1 << 0,
  G_HOOK_FLAG_IN_CALL = 1 << 1,
  G_HOOK_FLAG_MASK = 0x0f
} GHookFlagMask;
struct _GHookList
{
  gulong seq_id;
  guint hook_size : 16;
  guint is_setup : 1;
  GHook *hooks;
  gpointer dummy3;
  GHookFinalizeFunc finalize_hook;
  gpointer dummy[2];
};
struct _GHook
{
  gpointer data;
  GHook *next;
  GHook *prev;
  guint ref_count;
  gulong hook_id;
  guint flags;
  gpointer func;
  GDestroyNotify destroy;
};
extern
void g_hook_list_init (GHookList *hook_list,
      guint hook_size);
extern
void g_hook_list_clear (GHookList *hook_list);
extern
GHook* g_hook_alloc (GHookList *hook_list);
extern
void g_hook_free (GHookList *hook_list,
      GHook *hook);
extern
GHook * g_hook_ref (GHookList *hook_list,
      GHook *hook);
extern
void g_hook_unref (GHookList *hook_list,
      GHook *hook);
extern
gboolean g_hook_destroy (GHookList *hook_list,
      gulong hook_id);
extern
void g_hook_destroy_link (GHookList *hook_list,
      GHook *hook);
extern
void g_hook_prepend (GHookList *hook_list,
      GHook *hook);
extern
void g_hook_insert_before (GHookList *hook_list,
      GHook *sibling,
      GHook *hook);
extern
void g_hook_insert_sorted (GHookList *hook_list,
      GHook *hook,
      GHookCompareFunc func);
extern
GHook* g_hook_get (GHookList *hook_list,
      gulong hook_id);
extern
GHook* g_hook_find (GHookList *hook_list,
      gboolean need_valids,
      GHookFindFunc func,
      gpointer data);
extern
GHook* g_hook_find_data (GHookList *hook_list,
      gboolean need_valids,
      gpointer data);
extern
GHook* g_hook_find_func (GHookList *hook_list,
      gboolean need_valids,
      gpointer func);
extern
GHook* g_hook_find_func_data (GHookList *hook_list,
      gboolean need_valids,
      gpointer func,
      gpointer data);
extern
GHook* g_hook_first_valid (GHookList *hook_list,
      gboolean may_be_in_call);
extern
GHook* g_hook_next_valid (GHookList *hook_list,
      GHook *hook,
      gboolean may_be_in_call);
extern
gint g_hook_compare_ids (GHook *new_hook,
      GHook *sibling);
extern
void g_hook_list_invoke (GHookList *hook_list,
      gboolean may_recurse);
extern
void g_hook_list_invoke_check (GHookList *hook_list,
      gboolean may_recurse);
extern
void g_hook_list_marshal (GHookList *hook_list,
      gboolean may_recurse,
      GHookMarshaller marshaller,
      gpointer marshal_data);
extern
void g_hook_list_marshal_check (GHookList *hook_list,
      gboolean may_recurse,
      GHookCheckMarshaller marshaller,
      gpointer marshal_data);
extern
gboolean g_hostname_is_non_ascii (const gchar *hostname);
extern
gboolean g_hostname_is_ascii_encoded (const gchar *hostname);
extern
gboolean g_hostname_is_ip_address (const gchar *hostname);
extern
gchar *g_hostname_to_ascii (const gchar *hostname);
extern
gchar *g_hostname_to_unicode (const gchar *hostname);
typedef struct _GPollFD GPollFD;
typedef gint (*GPollFunc) (GPollFD *ufds,
                                 guint nfsd,
                                 gint timeout_);
struct _GPollFD
{
  gint fd;
  gushort events;
  gushort revents;
};
extern
gint
g_poll (GPollFD *fds,
 guint nfds,
 gint timeout);
typedef struct _GSList GSList;
struct _GSList
{
  gpointer data;
  GSList *next;
};
extern
GSList* g_slist_alloc (void) __attribute__((warn_unused_result));
extern
void g_slist_free (GSList *list);
extern
void g_slist_free_1 (GSList *list);
extern
void g_slist_free_full (GSList *list,
       GDestroyNotify free_func);
extern
GSList* g_slist_append (GSList *list,
       gpointer data) __attribute__((warn_unused_result));
extern
GSList* g_slist_prepend (GSList *list,
       gpointer data) __attribute__((warn_unused_result));
extern
GSList* g_slist_insert (GSList *list,
       gpointer data,
       gint position) __attribute__((warn_unused_result));
extern
GSList* g_slist_insert_sorted (GSList *list,
       gpointer data,
       GCompareFunc func) __attribute__((warn_unused_result));
extern
GSList* g_slist_insert_sorted_with_data (GSList *list,
       gpointer data,
       GCompareDataFunc func,
       gpointer user_data) __attribute__((warn_unused_result));
extern
GSList* g_slist_insert_before (GSList *slist,
       GSList *sibling,
       gpointer data) __attribute__((warn_unused_result));
extern
GSList* g_slist_concat (GSList *list1,
       GSList *list2) __attribute__((warn_unused_result));
extern
GSList* g_slist_remove (GSList *list,
       gconstpointer data) __attribute__((warn_unused_result));
extern
GSList* g_slist_remove_all (GSList *list,
       gconstpointer data) __attribute__((warn_unused_result));
extern
GSList* g_slist_remove_link (GSList *list,
       GSList *link_) __attribute__((warn_unused_result));
extern
GSList* g_slist_delete_link (GSList *list,
       GSList *link_) __attribute__((warn_unused_result));
extern
GSList* g_slist_reverse (GSList *list) __attribute__((warn_unused_result));
extern
GSList* g_slist_copy (GSList *list) __attribute__((warn_unused_result));
extern
GSList* g_slist_copy_deep (GSList *list,
       GCopyFunc func,
       gpointer user_data) __attribute__((warn_unused_result));
extern
GSList* g_slist_nth (GSList *list,
       guint n);
extern
GSList* g_slist_find (GSList *list,
       gconstpointer data);
extern
GSList* g_slist_find_custom (GSList *list,
       gconstpointer data,
       GCompareFunc func);
extern
gint g_slist_position (GSList *list,
       GSList *llink);
extern
gint g_slist_index (GSList *list,
       gconstpointer data);
extern
GSList* g_slist_last (GSList *list);
extern
guint g_slist_length (GSList *list);
extern
void g_slist_foreach (GSList *list,
       GFunc func,
       gpointer user_data);
extern
GSList* g_slist_sort (GSList *list,
       GCompareFunc compare_func) __attribute__((warn_unused_result));
extern
GSList* g_slist_sort_with_data (GSList *list,
       GCompareDataFunc compare_func,
       gpointer user_data) __attribute__((warn_unused_result));
extern
gpointer g_slist_nth_data (GSList *list,
       guint n);
typedef enum
{
  G_IO_IN =1,
  G_IO_OUT =4,
  G_IO_PRI =2,
  G_IO_ERR =8,
  G_IO_HUP =16,
  G_IO_NVAL =32
} GIOCondition;
typedef struct _GMainContext GMainContext;
typedef struct _GMainLoop GMainLoop;
typedef struct _GSource GSource;
typedef struct _GSourcePrivate GSourcePrivate;
typedef struct _GSourceCallbackFuncs GSourceCallbackFuncs;
typedef struct _GSourceFuncs GSourceFuncs;
typedef gboolean (*GSourceFunc) (gpointer user_data);
typedef void (*GChildWatchFunc) (GPid pid,
                                       gint status,
                                       gpointer user_data);
struct _GSource
{
  gpointer callback_data;
  GSourceCallbackFuncs *callback_funcs;
  const GSourceFuncs *source_funcs;
  guint ref_count;
  GMainContext *context;
  gint priority;
  guint flags;
  guint source_id;
  GSList *poll_fds;
  GSource *prev;
  GSource *next;
  char *name;
  GSourcePrivate *priv;
};
struct _GSourceCallbackFuncs
{
  void (*ref) (gpointer cb_data);
  void (*unref) (gpointer cb_data);
  void (*get) (gpointer cb_data,
                 GSource *source,
                 GSourceFunc *func,
                 gpointer *data);
};
typedef void (*GSourceDummyMarshal) (void);
struct _GSourceFuncs
{
  gboolean (*prepare) (GSource *source,
                        gint *timeout_);
  gboolean (*check) (GSource *source);
  gboolean (*dispatch) (GSource *source,
                        GSourceFunc callback,
                        gpointer user_data);
  void (*finalize) (GSource *source);
  GSourceFunc closure_callback;
  GSourceDummyMarshal closure_marshal;
};
extern
GMainContext *g_main_context_new (void);
extern
GMainContext *g_main_context_ref (GMainContext *context);
extern
void g_main_context_unref (GMainContext *context);
extern
GMainContext *g_main_context_default (void);
extern
gboolean g_main_context_iteration (GMainContext *context,
                                        gboolean may_block);
extern
gboolean g_main_context_pending (GMainContext *context);
extern
GSource *g_main_context_find_source_by_id (GMainContext *context,
                                                             guint source_id);
extern
GSource *g_main_context_find_source_by_user_data (GMainContext *context,
                                                             gpointer user_data);
extern
GSource *g_main_context_find_source_by_funcs_user_data (GMainContext *context,
                                                             GSourceFuncs *funcs,
                                                             gpointer user_data);
extern
void g_main_context_wakeup (GMainContext *context);
extern
gboolean g_main_context_acquire (GMainContext *context);
extern
void g_main_context_release (GMainContext *context);
extern
gboolean g_main_context_is_owner (GMainContext *context);
extern
gboolean g_main_context_wait (GMainContext *context,
                                 GCond *cond,
                                 GMutex *mutex);
extern
gboolean g_main_context_prepare (GMainContext *context,
                                  gint *priority);
extern
gint g_main_context_query (GMainContext *context,
                                  gint max_priority,
                                  gint *timeout_,
                                  GPollFD *fds,
                                  gint n_fds);
extern
gint g_main_context_check (GMainContext *context,
                                  gint max_priority,
                                  GPollFD *fds,
                                  gint n_fds);
extern
void g_main_context_dispatch (GMainContext *context);
extern
void g_main_context_set_poll_func (GMainContext *context,
                                       GPollFunc func);
extern
GPollFunc g_main_context_get_poll_func (GMainContext *context);
extern
void g_main_context_add_poll (GMainContext *context,
                                     GPollFD *fd,
                                     gint priority);
extern
void g_main_context_remove_poll (GMainContext *context,
                                     GPollFD *fd);
extern
gint g_main_depth (void);
extern
GSource *g_main_current_source (void);
extern
void g_main_context_push_thread_default (GMainContext *context);
extern
void g_main_context_pop_thread_default (GMainContext *context);
extern
GMainContext *g_main_context_get_thread_default (void);
extern
GMainContext *g_main_context_ref_thread_default (void);
extern
GMainLoop *g_main_loop_new (GMainContext *context,
                                   gboolean is_running);
extern
void g_main_loop_run (GMainLoop *loop);
extern
void g_main_loop_quit (GMainLoop *loop);
extern
GMainLoop *g_main_loop_ref (GMainLoop *loop);
extern
void g_main_loop_unref (GMainLoop *loop);
extern
gboolean g_main_loop_is_running (GMainLoop *loop);
extern
GMainContext *g_main_loop_get_context (GMainLoop *loop);
extern
GSource *g_source_new (GSourceFuncs *source_funcs,
                                   guint struct_size);
extern
GSource *g_source_ref (GSource *source);
extern
void g_source_unref (GSource *source);
extern
guint g_source_attach (GSource *source,
                                   GMainContext *context);
extern
void g_source_destroy (GSource *source);
extern
void g_source_set_priority (GSource *source,
                                   gint priority);
extern
gint g_source_get_priority (GSource *source);
extern
void g_source_set_can_recurse (GSource *source,
                                   gboolean can_recurse);
extern
gboolean g_source_get_can_recurse (GSource *source);
extern
guint g_source_get_id (GSource *source);
extern
GMainContext *g_source_get_context (GSource *source);
extern
void g_source_set_callback (GSource *source,
                                   GSourceFunc func,
                                   gpointer data,
                                   GDestroyNotify notify);
extern
void g_source_set_funcs (GSource *source,
                                   GSourceFuncs *funcs);
extern
gboolean g_source_is_destroyed (GSource *source);
extern
void g_source_set_name (GSource *source,
                                              const char *name);
extern
const char * g_source_get_name (GSource *source);
extern
void g_source_set_name_by_id (guint tag,
                                              const char *name);
extern
void g_source_set_ready_time (GSource *source,
                                              gint64 ready_time);
extern
gint64 g_source_get_ready_time (GSource *source);
extern
gpointer g_source_add_unix_fd (GSource *source,
                                              gint fd,
                                              GIOCondition events);
extern
void g_source_modify_unix_fd (GSource *source,
                                              gpointer tag,
                                              GIOCondition new_events);
extern
void g_source_remove_unix_fd (GSource *source,
                                              gpointer tag);
extern
GIOCondition g_source_query_unix_fd (GSource *source,
                                              gpointer tag);
extern
void g_source_set_callback_indirect (GSource *source,
                                     gpointer callback_data,
                                     GSourceCallbackFuncs *callback_funcs);
extern
void g_source_add_poll (GSource *source,
           GPollFD *fd);
extern
void g_source_remove_poll (GSource *source,
           GPollFD *fd);
extern
void g_source_add_child_source (GSource *source,
           GSource *child_source);
extern
void g_source_remove_child_source (GSource *source,
           GSource *child_source);
extern
void g_source_get_current_time (GSource *source,
                                    GTimeVal *timeval);
extern
gint64 g_source_get_time (GSource *source);
extern
GSource *g_idle_source_new (void);
extern
GSource *g_child_watch_source_new (GPid pid);
extern
GSource *g_timeout_source_new (guint interval);
extern
GSource *g_timeout_source_new_seconds (guint interval);
extern
void g_get_current_time (GTimeVal *result);
extern
gint64 g_get_monotonic_time (void);
extern
gint64 g_get_real_time (void);
extern
gboolean g_source_remove (guint tag);
extern
gboolean g_source_remove_by_user_data (gpointer user_data);
extern
gboolean g_source_remove_by_funcs_user_data (GSourceFuncs *funcs,
                                              gpointer user_data);
extern
guint g_timeout_add_full (gint priority,
                                     guint interval,
                                     GSourceFunc function,
                                     gpointer data,
                                     GDestroyNotify notify);
extern
guint g_timeout_add (guint interval,
                                     GSourceFunc function,
                                     gpointer data);
extern
guint g_timeout_add_seconds_full (gint priority,
                                     guint interval,
                                     GSourceFunc function,
                                     gpointer data,
                                     GDestroyNotify notify);
extern
guint g_timeout_add_seconds (guint interval,
                                     GSourceFunc function,
                                     gpointer data);
extern
guint g_child_watch_add_full (gint priority,
                                     GPid pid,
                                     GChildWatchFunc function,
                                     gpointer data,
                                     GDestroyNotify notify);
extern
guint g_child_watch_add (GPid pid,
                                     GChildWatchFunc function,
                                     gpointer data);
extern
guint g_idle_add (GSourceFunc function,
                                     gpointer data);
extern
guint g_idle_add_full (gint priority,
                                     GSourceFunc function,
                                     gpointer data,
                                     GDestroyNotify notify);
extern
gboolean g_idle_remove_by_data (gpointer data);
extern
void g_main_context_invoke_full (GMainContext *context,
                                     gint priority,
                                     GSourceFunc function,
                                     gpointer data,
                                     GDestroyNotify notify);
extern
void g_main_context_invoke (GMainContext *context,
                                     GSourceFunc function,
                                     gpointer data);
extern GSourceFuncs g_timeout_funcs;
extern GSourceFuncs g_child_watch_funcs;
extern GSourceFuncs g_idle_funcs;
extern GSourceFuncs g_unix_signal_funcs;
extern GSourceFuncs g_unix_fd_source_funcs;
typedef guint32 gunichar;
typedef guint16 gunichar2;
typedef enum
{
  G_UNICODE_CONTROL,
  G_UNICODE_FORMAT,
  G_UNICODE_UNASSIGNED,
  G_UNICODE_PRIVATE_USE,
  G_UNICODE_SURROGATE,
  G_UNICODE_LOWERCASE_LETTER,
  G_UNICODE_MODIFIER_LETTER,
  G_UNICODE_OTHER_LETTER,
  G_UNICODE_TITLECASE_LETTER,
  G_UNICODE_UPPERCASE_LETTER,
  G_UNICODE_SPACING_MARK,
  G_UNICODE_ENCLOSING_MARK,
  G_UNICODE_NON_SPACING_MARK,
  G_UNICODE_DECIMAL_NUMBER,
  G_UNICODE_LETTER_NUMBER,
  G_UNICODE_OTHER_NUMBER,
  G_UNICODE_CONNECT_PUNCTUATION,
  G_UNICODE_DASH_PUNCTUATION,
  G_UNICODE_CLOSE_PUNCTUATION,
  G_UNICODE_FINAL_PUNCTUATION,
  G_UNICODE_INITIAL_PUNCTUATION,
  G_UNICODE_OTHER_PUNCTUATION,
  G_UNICODE_OPEN_PUNCTUATION,
  G_UNICODE_CURRENCY_SYMBOL,
  G_UNICODE_MODIFIER_SYMBOL,
  G_UNICODE_MATH_SYMBOL,
  G_UNICODE_OTHER_SYMBOL,
  G_UNICODE_LINE_SEPARATOR,
  G_UNICODE_PARAGRAPH_SEPARATOR,
  G_UNICODE_SPACE_SEPARATOR
} GUnicodeType;
typedef enum
{
  G_UNICODE_BREAK_MANDATORY,
  G_UNICODE_BREAK_CARRIAGE_RETURN,
  G_UNICODE_BREAK_LINE_FEED,
  G_UNICODE_BREAK_COMBINING_MARK,
  G_UNICODE_BREAK_SURROGATE,
  G_UNICODE_BREAK_ZERO_WIDTH_SPACE,
  G_UNICODE_BREAK_INSEPARABLE,
  G_UNICODE_BREAK_NON_BREAKING_GLUE,
  G_UNICODE_BREAK_CONTINGENT,
  G_UNICODE_BREAK_SPACE,
  G_UNICODE_BREAK_AFTER,
  G_UNICODE_BREAK_BEFORE,
  G_UNICODE_BREAK_BEFORE_AND_AFTER,
  G_UNICODE_BREAK_HYPHEN,
  G_UNICODE_BREAK_NON_STARTER,
  G_UNICODE_BREAK_OPEN_PUNCTUATION,
  G_UNICODE_BREAK_CLOSE_PUNCTUATION,
  G_UNICODE_BREAK_QUOTATION,
  G_UNICODE_BREAK_EXCLAMATION,
  G_UNICODE_BREAK_IDEOGRAPHIC,
  G_UNICODE_BREAK_NUMERIC,
  G_UNICODE_BREAK_INFIX_SEPARATOR,
  G_UNICODE_BREAK_SYMBOL,
  G_UNICODE_BREAK_ALPHABETIC,
  G_UNICODE_BREAK_PREFIX,
  G_UNICODE_BREAK_POSTFIX,
  G_UNICODE_BREAK_COMPLEX_CONTEXT,
  G_UNICODE_BREAK_AMBIGUOUS,
  G_UNICODE_BREAK_UNKNOWN,
  G_UNICODE_BREAK_NEXT_LINE,
  G_UNICODE_BREAK_WORD_JOINER,
  G_UNICODE_BREAK_HANGUL_L_JAMO,
  G_UNICODE_BREAK_HANGUL_V_JAMO,
  G_UNICODE_BREAK_HANGUL_T_JAMO,
  G_UNICODE_BREAK_HANGUL_LV_SYLLABLE,
  G_UNICODE_BREAK_HANGUL_LVT_SYLLABLE,
  G_UNICODE_BREAK_CLOSE_PARANTHESIS,
  G_UNICODE_BREAK_CONDITIONAL_JAPANESE_STARTER,
  G_UNICODE_BREAK_HEBREW_LETTER,
  G_UNICODE_BREAK_REGIONAL_INDICATOR
} GUnicodeBreakType;
typedef enum
{
  G_UNICODE_SCRIPT_INVALID_CODE = -1,
  G_UNICODE_SCRIPT_COMMON = 0,
  G_UNICODE_SCRIPT_INHERITED,
  G_UNICODE_SCRIPT_ARABIC,
  G_UNICODE_SCRIPT_ARMENIAN,
  G_UNICODE_SCRIPT_BENGALI,
  G_UNICODE_SCRIPT_BOPOMOFO,
  G_UNICODE_SCRIPT_CHEROKEE,
  G_UNICODE_SCRIPT_COPTIC,
  G_UNICODE_SCRIPT_CYRILLIC,
  G_UNICODE_SCRIPT_DESERET,
  G_UNICODE_SCRIPT_DEVANAGARI,
  G_UNICODE_SCRIPT_ETHIOPIC,
  G_UNICODE_SCRIPT_GEORGIAN,
  G_UNICODE_SCRIPT_GOTHIC,
  G_UNICODE_SCRIPT_GREEK,
  G_UNICODE_SCRIPT_GUJARATI,
  G_UNICODE_SCRIPT_GURMUKHI,
  G_UNICODE_SCRIPT_HAN,
  G_UNICODE_SCRIPT_HANGUL,
  G_UNICODE_SCRIPT_HEBREW,
  G_UNICODE_SCRIPT_HIRAGANA,
  G_UNICODE_SCRIPT_KANNADA,
  G_UNICODE_SCRIPT_KATAKANA,
  G_UNICODE_SCRIPT_KHMER,
  G_UNICODE_SCRIPT_LAO,
  G_UNICODE_SCRIPT_LATIN,
  G_UNICODE_SCRIPT_MALAYALAM,
  G_UNICODE_SCRIPT_MONGOLIAN,
  G_UNICODE_SCRIPT_MYANMAR,
  G_UNICODE_SCRIPT_OGHAM,
  G_UNICODE_SCRIPT_OLD_ITALIC,
  G_UNICODE_SCRIPT_ORIYA,
  G_UNICODE_SCRIPT_RUNIC,
  G_UNICODE_SCRIPT_SINHALA,
  G_UNICODE_SCRIPT_SYRIAC,
  G_UNICODE_SCRIPT_TAMIL,
  G_UNICODE_SCRIPT_TELUGU,
  G_UNICODE_SCRIPT_THAANA,
  G_UNICODE_SCRIPT_THAI,
  G_UNICODE_SCRIPT_TIBETAN,
  G_UNICODE_SCRIPT_CANADIAN_ABORIGINAL,
  G_UNICODE_SCRIPT_YI,
  G_UNICODE_SCRIPT_TAGALOG,
  G_UNICODE_SCRIPT_HANUNOO,
  G_UNICODE_SCRIPT_BUHID,
  G_UNICODE_SCRIPT_TAGBANWA,
  G_UNICODE_SCRIPT_BRAILLE,
  G_UNICODE_SCRIPT_CYPRIOT,
  G_UNICODE_SCRIPT_LIMBU,
  G_UNICODE_SCRIPT_OSMANYA,
  G_UNICODE_SCRIPT_SHAVIAN,
  G_UNICODE_SCRIPT_LINEAR_B,
  G_UNICODE_SCRIPT_TAI_LE,
  G_UNICODE_SCRIPT_UGARITIC,
  G_UNICODE_SCRIPT_NEW_TAI_LUE,
  G_UNICODE_SCRIPT_BUGINESE,
  G_UNICODE_SCRIPT_GLAGOLITIC,
  G_UNICODE_SCRIPT_TIFINAGH,
  G_UNICODE_SCRIPT_SYLOTI_NAGRI,
  G_UNICODE_SCRIPT_OLD_PERSIAN,
  G_UNICODE_SCRIPT_KHAROSHTHI,
  G_UNICODE_SCRIPT_UNKNOWN,
  G_UNICODE_SCRIPT_BALINESE,
  G_UNICODE_SCRIPT_CUNEIFORM,
  G_UNICODE_SCRIPT_PHOENICIAN,
  G_UNICODE_SCRIPT_PHAGS_PA,
  G_UNICODE_SCRIPT_NKO,
  G_UNICODE_SCRIPT_KAYAH_LI,
  G_UNICODE_SCRIPT_LEPCHA,
  G_UNICODE_SCRIPT_REJANG,
  G_UNICODE_SCRIPT_SUNDANESE,
  G_UNICODE_SCRIPT_SAURASHTRA,
  G_UNICODE_SCRIPT_CHAM,
  G_UNICODE_SCRIPT_OL_CHIKI,
  G_UNICODE_SCRIPT_VAI,
  G_UNICODE_SCRIPT_CARIAN,
  G_UNICODE_SCRIPT_LYCIAN,
  G_UNICODE_SCRIPT_LYDIAN,
  G_UNICODE_SCRIPT_AVESTAN,
  G_UNICODE_SCRIPT_BAMUM,
  G_UNICODE_SCRIPT_EGYPTIAN_HIEROGLYPHS,
  G_UNICODE_SCRIPT_IMPERIAL_ARAMAIC,
  G_UNICODE_SCRIPT_INSCRIPTIONAL_PAHLAVI,
  G_UNICODE_SCRIPT_INSCRIPTIONAL_PARTHIAN,
  G_UNICODE_SCRIPT_JAVANESE,
  G_UNICODE_SCRIPT_KAITHI,
  G_UNICODE_SCRIPT_LISU,
  G_UNICODE_SCRIPT_MEETEI_MAYEK,
  G_UNICODE_SCRIPT_OLD_SOUTH_ARABIAN,
  G_UNICODE_SCRIPT_OLD_TURKIC,
  G_UNICODE_SCRIPT_SAMARITAN,
  G_UNICODE_SCRIPT_TAI_THAM,
  G_UNICODE_SCRIPT_TAI_VIET,
  G_UNICODE_SCRIPT_BATAK,
  G_UNICODE_SCRIPT_BRAHMI,
  G_UNICODE_SCRIPT_MANDAIC,
  G_UNICODE_SCRIPT_CHAKMA,
  G_UNICODE_SCRIPT_MEROITIC_CURSIVE,
  G_UNICODE_SCRIPT_MEROITIC_HIEROGLYPHS,
  G_UNICODE_SCRIPT_MIAO,
  G_UNICODE_SCRIPT_SHARADA,
  G_UNICODE_SCRIPT_SORA_SOMPENG,
  G_UNICODE_SCRIPT_TAKRI,
  G_UNICODE_SCRIPT_BASSA_VAH,
  G_UNICODE_SCRIPT_CAUCASIAN_ALBANIAN,
  G_UNICODE_SCRIPT_DUPLOYAN,
  G_UNICODE_SCRIPT_ELBASAN,
  G_UNICODE_SCRIPT_GRANTHA,
  G_UNICODE_SCRIPT_KHOJKI,
  G_UNICODE_SCRIPT_KHUDAWADI,
  G_UNICODE_SCRIPT_LINEAR_A,
  G_UNICODE_SCRIPT_MAHAJANI,
  G_UNICODE_SCRIPT_MANICHAEAN,
  G_UNICODE_SCRIPT_MENDE_KIKAKUI,
  G_UNICODE_SCRIPT_MODI,
  G_UNICODE_SCRIPT_MRO,
  G_UNICODE_SCRIPT_NABATAEAN,
  G_UNICODE_SCRIPT_OLD_NORTH_ARABIAN,
  G_UNICODE_SCRIPT_OLD_PERMIC,
  G_UNICODE_SCRIPT_PAHAWH_HMONG,
  G_UNICODE_SCRIPT_PALMYRENE,
  G_UNICODE_SCRIPT_PAU_CIN_HAU,
  G_UNICODE_SCRIPT_PSALTER_PAHLAVI,
  G_UNICODE_SCRIPT_SIDDHAM,
  G_UNICODE_SCRIPT_TIRHUTA,
  G_UNICODE_SCRIPT_WARANG_CITI,
  G_UNICODE_SCRIPT_AHOM,
  G_UNICODE_SCRIPT_ANATOLIAN_HIEROGLYPHS,
  G_UNICODE_SCRIPT_HATRAN,
  G_UNICODE_SCRIPT_MULTANI,
  G_UNICODE_SCRIPT_OLD_HUNGARIAN,
  G_UNICODE_SCRIPT_SIGNWRITING
} GUnicodeScript;
extern
guint32 g_unicode_script_to_iso15924 (GUnicodeScript script);
extern
GUnicodeScript g_unicode_script_from_iso15924 (guint32 iso15924);
extern
gboolean g_unichar_isalnum (gunichar c) __attribute__((__const__));
extern
gboolean g_unichar_isalpha (gunichar c) __attribute__((__const__));
extern
gboolean g_unichar_iscntrl (gunichar c) __attribute__((__const__));
extern
gboolean g_unichar_isdigit (gunichar c) __attribute__((__const__));
extern
gboolean g_unichar_isgraph (gunichar c) __attribute__((__const__));
extern
gboolean g_unichar_islower (gunichar c) __attribute__((__const__));
extern
gboolean g_unichar_isprint (gunichar c) __attribute__((__const__));
extern
gboolean g_unichar_ispunct (gunichar c) __attribute__((__const__));
extern
gboolean g_unichar_isspace (gunichar c) __attribute__((__const__));
extern
gboolean g_unichar_isupper (gunichar c) __attribute__((__const__));
extern
gboolean g_unichar_isxdigit (gunichar c) __attribute__((__const__));
extern
gboolean g_unichar_istitle (gunichar c) __attribute__((__const__));
extern
gboolean g_unichar_isdefined (gunichar c) __attribute__((__const__));
extern
gboolean g_unichar_iswide (gunichar c) __attribute__((__const__));
extern
gboolean g_unichar_iswide_cjk(gunichar c) __attribute__((__const__));
extern
gboolean g_unichar_iszerowidth(gunichar c) __attribute__((__const__));
extern
gboolean g_unichar_ismark (gunichar c) __attribute__((__const__));
extern
gunichar g_unichar_toupper (gunichar c) __attribute__((__const__));
extern
gunichar g_unichar_tolower (gunichar c) __attribute__((__const__));
extern
gunichar g_unichar_totitle (gunichar c) __attribute__((__const__));
extern
gint g_unichar_digit_value (gunichar c) __attribute__((__const__));
extern
gint g_unichar_xdigit_value (gunichar c) __attribute__((__const__));
extern
GUnicodeType g_unichar_type (gunichar c) __attribute__((__const__));
extern
GUnicodeBreakType g_unichar_break_type (gunichar c) __attribute__((__const__));
extern
gint g_unichar_combining_class (gunichar uc) __attribute__((__const__));
extern
gboolean g_unichar_get_mirror_char (gunichar ch,
                                    gunichar *mirrored_ch);
extern
GUnicodeScript g_unichar_get_script (gunichar ch) __attribute__((__const__));
extern
gboolean g_unichar_validate (gunichar ch) __attribute__((__const__));
extern
gboolean g_unichar_compose (gunichar a,
                            gunichar b,
                            gunichar *ch);
extern
gboolean g_unichar_decompose (gunichar ch,
                              gunichar *a,
                              gunichar *b);
extern
gsize g_unichar_fully_decompose (gunichar ch,
                                 gboolean compat,
                                 gunichar *result,
                                 gsize result_len);
extern
void g_unicode_canonical_ordering (gunichar *string,
                                   gsize len);
extern
gunichar *g_unicode_canonical_decomposition (gunichar ch,
                                             gsize *result_len) __attribute__((__malloc__));
extern const gchar * const g_utf8_skip;
extern
gunichar g_utf8_get_char (const gchar *p) __attribute__((__pure__));
extern
gunichar g_utf8_get_char_validated (const gchar *p,
                                    gssize max_len) __attribute__((__pure__));
extern
gchar* g_utf8_offset_to_pointer (const gchar *str,
                                   glong offset) __attribute__((__pure__));
extern
glong g_utf8_pointer_to_offset (const gchar *str,
                                   const gchar *pos) __attribute__((__pure__));
extern
gchar* g_utf8_prev_char (const gchar *p) __attribute__((__pure__));
extern
gchar* g_utf8_find_next_char (const gchar *p,
                                   const gchar *end) __attribute__((__pure__));
extern
gchar* g_utf8_find_prev_char (const gchar *str,
                                   const gchar *p) __attribute__((__pure__));
extern
glong g_utf8_strlen (const gchar *p,
                                   gssize max) __attribute__((__pure__));
extern
gchar *g_utf8_substring (const gchar *str,
                                   glong start_pos,
                                   glong end_pos) __attribute__((__malloc__));
extern
gchar *g_utf8_strncpy (gchar *dest,
                                   const gchar *src,
                                   gsize n);
extern
gchar* g_utf8_strchr (const gchar *p,
                       gssize len,
                       gunichar c);
extern
gchar* g_utf8_strrchr (const gchar *p,
                       gssize len,
                       gunichar c);
extern
gchar* g_utf8_strreverse (const gchar *str,
                          gssize len);
extern
gunichar2 *g_utf8_to_utf16 (const gchar *str,
                                glong len,
                                glong *items_read,
                                glong *items_written,
                                GError **error) __attribute__((__malloc__));
extern
gunichar * g_utf8_to_ucs4 (const gchar *str,
                                glong len,
                                glong *items_read,
                                glong *items_written,
                                GError **error) __attribute__((__malloc__));
extern
gunichar * g_utf8_to_ucs4_fast (const gchar *str,
                                glong len,
                                glong *items_written) __attribute__((__malloc__));
extern
gunichar * g_utf16_to_ucs4 (const gunichar2 *str,
                                glong len,
                                glong *items_read,
                                glong *items_written,
                                GError **error) __attribute__((__malloc__));
extern
gchar* g_utf16_to_utf8 (const gunichar2 *str,
                                glong len,
                                glong *items_read,
                                glong *items_written,
                                GError **error) __attribute__((__malloc__));
extern
gunichar2 *g_ucs4_to_utf16 (const gunichar *str,
                                glong len,
                                glong *items_read,
                                glong *items_written,
                                GError **error) __attribute__((__malloc__));
extern
gchar* g_ucs4_to_utf8 (const gunichar *str,
                                glong len,
                                glong *items_read,
                                glong *items_written,
                                GError **error) __attribute__((__malloc__));
extern
gint g_unichar_to_utf8 (gunichar c,
                             gchar *outbuf);
extern
gboolean g_utf8_validate (const gchar *str,
                          gssize max_len,
                          const gchar **end);
extern
gchar *g_utf8_strup (const gchar *str,
                       gssize len) __attribute__((__malloc__));
extern
gchar *g_utf8_strdown (const gchar *str,
                       gssize len) __attribute__((__malloc__));
extern
gchar *g_utf8_casefold (const gchar *str,
                        gssize len) __attribute__((__malloc__));
typedef enum {
  G_NORMALIZE_DEFAULT,
  G_NORMALIZE_NFD = G_NORMALIZE_DEFAULT,
  G_NORMALIZE_DEFAULT_COMPOSE,
  G_NORMALIZE_NFC = G_NORMALIZE_DEFAULT_COMPOSE,
  G_NORMALIZE_ALL,
  G_NORMALIZE_NFKD = G_NORMALIZE_ALL,
  G_NORMALIZE_ALL_COMPOSE,
  G_NORMALIZE_NFKC = G_NORMALIZE_ALL_COMPOSE
} GNormalizeMode;
extern
gchar *g_utf8_normalize (const gchar *str,
                         gssize len,
                         GNormalizeMode mode) __attribute__((__malloc__));
extern
gint g_utf8_collate (const gchar *str1,
                           const gchar *str2) __attribute__((__pure__));
extern
gchar *g_utf8_collate_key (const gchar *str,
                           gssize len) __attribute__((__malloc__));
extern
gchar *g_utf8_collate_key_for_filename (const gchar *str,
                                        gssize len) __attribute__((__malloc__));
gchar *_g_utf8_make_valid (const gchar *name);
typedef struct _GString GString;
struct _GString
{
  gchar *str;
  gsize len;
  gsize allocated_len;
};
extern
GString* g_string_new (const gchar *init);
extern
GString* g_string_new_len (const gchar *init,
                                         gssize len);
extern
GString* g_string_sized_new (gsize dfl_size);
extern
gchar* g_string_free (GString *string,
                                         gboolean free_segment);
extern
GBytes* g_string_free_to_bytes (GString *string);
extern
gboolean g_string_equal (const GString *v,
                                         const GString *v2);
extern
guint g_string_hash (const GString *str);
extern
GString* g_string_assign (GString *string,
                                         const gchar *rval);
extern
GString* g_string_truncate (GString *string,
                                         gsize len);
extern
GString* g_string_set_size (GString *string,
                                         gsize len);
extern
GString* g_string_insert_len (GString *string,
                                         gssize pos,
                                         const gchar *val,
                                         gssize len);
extern
GString* g_string_append (GString *string,
                                         const gchar *val);
extern
GString* g_string_append_len (GString *string,
                                         const gchar *val,
                                         gssize len);
extern
GString* g_string_append_c (GString *string,
                                         gchar c);
extern
GString* g_string_append_unichar (GString *string,
                                         gunichar wc);
extern
GString* g_string_prepend (GString *string,
                                         const gchar *val);
extern
GString* g_string_prepend_c (GString *string,
                                         gchar c);
extern
GString* g_string_prepend_unichar (GString *string,
                                         gunichar wc);
extern
GString* g_string_prepend_len (GString *string,
                                         const gchar *val,
                                         gssize len);
extern
GString* g_string_insert (GString *string,
                                         gssize pos,
                                         const gchar *val);
extern
GString* g_string_insert_c (GString *string,
                                         gssize pos,
                                         gchar c);
extern
GString* g_string_insert_unichar (GString *string,
                                         gssize pos,
                                         gunichar wc);
extern
GString* g_string_overwrite (GString *string,
                                         gsize pos,
                                         const gchar *val);
extern
GString* g_string_overwrite_len (GString *string,
                                         gsize pos,
                                         const gchar *val,
                                         gssize len);
extern
GString* g_string_erase (GString *string,
                                         gssize pos,
                                         gssize len);
extern
GString* g_string_ascii_down (GString *string);
extern
GString* g_string_ascii_up (GString *string);
extern
void g_string_vprintf (GString *string,
                                         const gchar *format,
                                         va_list args)
                                         __attribute__((__format__ (__printf__, 2, 0)));
extern
void g_string_printf (GString *string,
                                         const gchar *format,
                                         ...) __attribute__((__format__ (__printf__, 2, 3)));
extern
void g_string_append_vprintf (GString *string,
                                         const gchar *format,
                                         va_list args)
                                         __attribute__((__format__ (__printf__, 2, 0)));
extern
void g_string_append_printf (GString *string,
                                         const gchar *format,
                                         ...) __attribute__((__format__ (__printf__, 2, 3)));
extern
GString* g_string_append_uri_escaped (GString *string,
                                          const gchar *unescaped,
                                          const gchar *reserved_chars_allowed,
                                          gboolean allow_utf8);
static inline GString*
g_string_append_c_inline (GString *gstring,
                          gchar c)
{
  if (gstring->len + 1 < gstring->allocated_len)
    {
      gstring->str[gstring->len++] = c;
      gstring->str[gstring->len] = 0;
    }
  else
    g_string_insert_c (gstring, -1, c);
  return gstring;
}
extern
GString *g_string_down (GString *string);
extern
GString *g_string_up (GString *string);
typedef struct _GIOChannel GIOChannel;
typedef struct _GIOFuncs GIOFuncs;
typedef enum
{
  G_IO_ERROR_NONE,
  G_IO_ERROR_AGAIN,
  G_IO_ERROR_INVAL,
  G_IO_ERROR_UNKNOWN
} GIOError;
typedef enum
{
  G_IO_CHANNEL_ERROR_FBIG,
  G_IO_CHANNEL_ERROR_INVAL,
  G_IO_CHANNEL_ERROR_IO,
  G_IO_CHANNEL_ERROR_ISDIR,
  G_IO_CHANNEL_ERROR_NOSPC,
  G_IO_CHANNEL_ERROR_NXIO,
  G_IO_CHANNEL_ERROR_OVERFLOW,
  G_IO_CHANNEL_ERROR_PIPE,
  G_IO_CHANNEL_ERROR_FAILED
} GIOChannelError;
typedef enum
{
  G_IO_STATUS_ERROR,
  G_IO_STATUS_NORMAL,
  G_IO_STATUS_EOF,
  G_IO_STATUS_AGAIN
} GIOStatus;
typedef enum
{
  G_SEEK_CUR,
  G_SEEK_SET,
  G_SEEK_END
} GSeekType;
typedef enum
{
  G_IO_FLAG_APPEND = 1 << 0,
  G_IO_FLAG_NONBLOCK = 1 << 1,
  G_IO_FLAG_IS_READABLE = 1 << 2,
  G_IO_FLAG_IS_WRITABLE = 1 << 3,
  G_IO_FLAG_IS_WRITEABLE = 1 << 3,
  G_IO_FLAG_IS_SEEKABLE = 1 << 4,
  G_IO_FLAG_MASK = (1 << 5) - 1,
  G_IO_FLAG_GET_MASK = G_IO_FLAG_MASK,
  G_IO_FLAG_SET_MASK = G_IO_FLAG_APPEND | G_IO_FLAG_NONBLOCK
} GIOFlags;
struct _GIOChannel
{
  gint ref_count;
  GIOFuncs *funcs;
  gchar *encoding;
  GIConv read_cd;
  GIConv write_cd;
  gchar *line_term;
  guint line_term_len;
  gsize buf_size;
  GString *read_buf;
  GString *encoded_read_buf;
  GString *write_buf;
  gchar partial_write_buf[6];
  guint use_buffer : 1;
  guint do_encode : 1;
  guint close_on_unref : 1;
  guint is_readable : 1;
  guint is_writeable : 1;
  guint is_seekable : 1;
  gpointer reserved1;
  gpointer reserved2;
};
typedef gboolean (*GIOFunc) (GIOChannel *source,
        GIOCondition condition,
        gpointer data);
struct _GIOFuncs
{
  GIOStatus (*io_read) (GIOChannel *channel,
             gchar *buf,
      gsize count,
      gsize *bytes_read,
      GError **err);
  GIOStatus (*io_write) (GIOChannel *channel,
      const gchar *buf,
      gsize count,
      gsize *bytes_written,
      GError **err);
  GIOStatus (*io_seek) (GIOChannel *channel,
      gint64 offset,
      GSeekType type,
      GError **err);
  GIOStatus (*io_close) (GIOChannel *channel,
      GError **err);
  GSource* (*io_create_watch) (GIOChannel *channel,
      GIOCondition condition);
  void (*io_free) (GIOChannel *channel);
  GIOStatus (*io_set_flags) (GIOChannel *channel,
                                  GIOFlags flags,
      GError **err);
  GIOFlags (*io_get_flags) (GIOChannel *channel);
};
extern
void g_io_channel_init (GIOChannel *channel);
extern
GIOChannel *g_io_channel_ref (GIOChannel *channel);
extern
void g_io_channel_unref (GIOChannel *channel);
extern
GIOError g_io_channel_read (GIOChannel *channel,
                                 gchar *buf,
                                 gsize count,
                                 gsize *bytes_read);
extern
GIOError g_io_channel_write (GIOChannel *channel,
                                 const gchar *buf,
                                 gsize count,
                                 gsize *bytes_written);
extern
GIOError g_io_channel_seek (GIOChannel *channel,
                                 gint64 offset,
                                 GSeekType type);
extern
void g_io_channel_close (GIOChannel *channel);
extern
GIOStatus g_io_channel_shutdown (GIOChannel *channel,
     gboolean flush,
     GError **err);
extern
guint g_io_add_watch_full (GIOChannel *channel,
     gint priority,
     GIOCondition condition,
     GIOFunc func,
     gpointer user_data,
     GDestroyNotify notify);
extern
GSource * g_io_create_watch (GIOChannel *channel,
     GIOCondition condition);
extern
guint g_io_add_watch (GIOChannel *channel,
     GIOCondition condition,
     GIOFunc func,
     gpointer user_data);
extern
void g_io_channel_set_buffer_size (GIOChannel *channel,
        gsize size);
extern
gsize g_io_channel_get_buffer_size (GIOChannel *channel);
extern
GIOCondition g_io_channel_get_buffer_condition (GIOChannel *channel);
extern
GIOStatus g_io_channel_set_flags (GIOChannel *channel,
        GIOFlags flags,
        GError **error);
extern
GIOFlags g_io_channel_get_flags (GIOChannel *channel);
extern
void g_io_channel_set_line_term (GIOChannel *channel,
        const gchar *line_term,
        gint length);
extern
const gchar * g_io_channel_get_line_term (GIOChannel *channel,
        gint *length);
extern
void g_io_channel_set_buffered (GIOChannel *channel,
        gboolean buffered);
extern
gboolean g_io_channel_get_buffered (GIOChannel *channel);
extern
GIOStatus g_io_channel_set_encoding (GIOChannel *channel,
        const gchar *encoding,
        GError **error);
extern
const gchar * g_io_channel_get_encoding (GIOChannel *channel);
extern
void g_io_channel_set_close_on_unref (GIOChannel *channel,
        gboolean do_close);
extern
gboolean g_io_channel_get_close_on_unref (GIOChannel *channel);
extern
GIOStatus g_io_channel_flush (GIOChannel *channel,
        GError **error);
extern
GIOStatus g_io_channel_read_line (GIOChannel *channel,
        gchar **str_return,
        gsize *length,
        gsize *terminator_pos,
        GError **error);
extern
GIOStatus g_io_channel_read_line_string (GIOChannel *channel,
        GString *buffer,
        gsize *terminator_pos,
        GError **error);
extern
GIOStatus g_io_channel_read_to_end (GIOChannel *channel,
        gchar **str_return,
        gsize *length,
        GError **error);
extern
GIOStatus g_io_channel_read_chars (GIOChannel *channel,
        gchar *buf,
        gsize count,
        gsize *bytes_read,
        GError **error);
extern
GIOStatus g_io_channel_read_unichar (GIOChannel *channel,
        gunichar *thechar,
        GError **error);
extern
GIOStatus g_io_channel_write_chars (GIOChannel *channel,
        const gchar *buf,
        gssize count,
        gsize *bytes_written,
        GError **error);
extern
GIOStatus g_io_channel_write_unichar (GIOChannel *channel,
        gunichar thechar,
        GError **error);
extern
GIOStatus g_io_channel_seek_position (GIOChannel *channel,
        gint64 offset,
        GSeekType type,
        GError **error);
extern
GIOChannel* g_io_channel_new_file (const gchar *filename,
        const gchar *mode,
        GError **error);
extern
GQuark g_io_channel_error_quark (void);
extern
GIOChannelError g_io_channel_error_from_errno (gint en);
extern
GIOChannel* g_io_channel_unix_new (int fd);
extern
gint g_io_channel_unix_get_fd (GIOChannel *channel);
extern GSourceFuncs g_io_watch_funcs;
typedef enum
{
  G_KEY_FILE_ERROR_UNKNOWN_ENCODING,
  G_KEY_FILE_ERROR_PARSE,
  G_KEY_FILE_ERROR_NOT_FOUND,
  G_KEY_FILE_ERROR_KEY_NOT_FOUND,
  G_KEY_FILE_ERROR_GROUP_NOT_FOUND,
  G_KEY_FILE_ERROR_INVALID_VALUE
} GKeyFileError;
extern
GQuark g_key_file_error_quark (void);
typedef struct _GKeyFile GKeyFile;
typedef enum
{
  G_KEY_FILE_NONE = 0,
  G_KEY_FILE_KEEP_COMMENTS = 1 << 0,
  G_KEY_FILE_KEEP_TRANSLATIONS = 1 << 1
} GKeyFileFlags;
extern
GKeyFile *g_key_file_new (void);
extern
GKeyFile *g_key_file_ref (GKeyFile *key_file);
extern
void g_key_file_unref (GKeyFile *key_file);
extern
void g_key_file_free (GKeyFile *key_file);
extern
void g_key_file_set_list_separator (GKeyFile *key_file,
          gchar separator);
extern
gboolean g_key_file_load_from_file (GKeyFile *key_file,
          const gchar *file,
          GKeyFileFlags flags,
          GError **error);
extern
gboolean g_key_file_load_from_data (GKeyFile *key_file,
          const gchar *data,
          gsize length,
          GKeyFileFlags flags,
          GError **error);
extern
gboolean g_key_file_load_from_dirs (GKeyFile *key_file,
          const gchar *file,
          const gchar **search_dirs,
          gchar **full_path,
          GKeyFileFlags flags,
          GError **error);
extern
gboolean g_key_file_load_from_data_dirs (GKeyFile *key_file,
          const gchar *file,
          gchar **full_path,
          GKeyFileFlags flags,
          GError **error);
extern
gchar *g_key_file_to_data (GKeyFile *key_file,
          gsize *length,
          GError **error) __attribute__((__malloc__));
extern
gboolean g_key_file_save_to_file (GKeyFile *key_file,
                                             const gchar *filename,
                                             GError **error);
extern
gchar *g_key_file_get_start_group (GKeyFile *key_file) __attribute__((__malloc__));
extern
gchar **g_key_file_get_groups (GKeyFile *key_file,
          gsize *length) __attribute__((__malloc__));
extern
gchar **g_key_file_get_keys (GKeyFile *key_file,
          const gchar *group_name,
          gsize *length,
          GError **error) __attribute__((__malloc__));
extern
gboolean g_key_file_has_group (GKeyFile *key_file,
          const gchar *group_name);
extern
gboolean g_key_file_has_key (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          GError **error);
extern
gchar *g_key_file_get_value (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          GError **error) __attribute__((__malloc__));
extern
void g_key_file_set_value (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          const gchar *value);
extern
gchar *g_key_file_get_string (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          GError **error) __attribute__((__malloc__));
extern
void g_key_file_set_string (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          const gchar *string);
extern
gchar *g_key_file_get_locale_string (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          const gchar *locale,
          GError **error) __attribute__((__malloc__));
extern
void g_key_file_set_locale_string (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          const gchar *locale,
          const gchar *string);
extern
gboolean g_key_file_get_boolean (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          GError **error);
extern
void g_key_file_set_boolean (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          gboolean value);
extern
gint g_key_file_get_integer (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          GError **error);
extern
void g_key_file_set_integer (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          gint value);
extern
gint64 g_key_file_get_int64 (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          GError **error);
extern
void g_key_file_set_int64 (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          gint64 value);
extern
guint64 g_key_file_get_uint64 (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          GError **error);
extern
void g_key_file_set_uint64 (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          guint64 value);
extern
gdouble g_key_file_get_double (GKeyFile *key_file,
                                             const gchar *group_name,
                                             const gchar *key,
                                             GError **error);
extern
void g_key_file_set_double (GKeyFile *key_file,
                                             const gchar *group_name,
                                             const gchar *key,
                                             gdouble value);
extern
gchar **g_key_file_get_string_list (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          gsize *length,
          GError **error) __attribute__((__malloc__));
extern
void g_key_file_set_string_list (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          const gchar * const list[],
          gsize length);
extern
gchar **g_key_file_get_locale_string_list (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          const gchar *locale,
          gsize *length,
          GError **error) __attribute__((__malloc__));
extern
void g_key_file_set_locale_string_list (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          const gchar *locale,
          const gchar * const list[],
          gsize length);
extern
gboolean *g_key_file_get_boolean_list (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          gsize *length,
          GError **error) __attribute__((__malloc__));
extern
void g_key_file_set_boolean_list (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          gboolean list[],
          gsize length);
extern
gint *g_key_file_get_integer_list (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          gsize *length,
          GError **error) __attribute__((__malloc__));
extern
void g_key_file_set_double_list (GKeyFile *key_file,
                                             const gchar *group_name,
                                             const gchar *key,
                                             gdouble list[],
                                             gsize length);
extern
gdouble *g_key_file_get_double_list (GKeyFile *key_file,
                                             const gchar *group_name,
                                             const gchar *key,
                                             gsize *length,
                                             GError **error) __attribute__((__malloc__));
extern
void g_key_file_set_integer_list (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          gint list[],
          gsize length);
extern
gboolean g_key_file_set_comment (GKeyFile *key_file,
                                             const gchar *group_name,
                                             const gchar *key,
                                             const gchar *comment,
                                             GError **error);
extern
gchar *g_key_file_get_comment (GKeyFile *key_file,
                                             const gchar *group_name,
                                             const gchar *key,
                                             GError **error) __attribute__((__malloc__));
extern
gboolean g_key_file_remove_comment (GKeyFile *key_file,
                                             const gchar *group_name,
                                             const gchar *key,
          GError **error);
extern
gboolean g_key_file_remove_key (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          GError **error);
extern
gboolean g_key_file_remove_group (GKeyFile *key_file,
          const gchar *group_name,
          GError **error);
typedef struct _GMappedFile GMappedFile;
extern
GMappedFile *g_mapped_file_new (const gchar *filename,
             gboolean writable,
             GError **error) __attribute__((__malloc__));
extern
GMappedFile *g_mapped_file_new_from_fd (gint fd,
      gboolean writable,
      GError **error) __attribute__((__malloc__));
extern
gsize g_mapped_file_get_length (GMappedFile *file);
extern
gchar *g_mapped_file_get_contents (GMappedFile *file);
extern
GBytes * g_mapped_file_get_bytes (GMappedFile *file);
extern
GMappedFile *g_mapped_file_ref (GMappedFile *file);
extern
void g_mapped_file_unref (GMappedFile *file);
extern
void g_mapped_file_free (GMappedFile *file);
typedef enum
{
  G_MARKUP_ERROR_BAD_UTF8,
  G_MARKUP_ERROR_EMPTY,
  G_MARKUP_ERROR_PARSE,
  G_MARKUP_ERROR_UNKNOWN_ELEMENT,
  G_MARKUP_ERROR_UNKNOWN_ATTRIBUTE,
  G_MARKUP_ERROR_INVALID_CONTENT,
  G_MARKUP_ERROR_MISSING_ATTRIBUTE
} GMarkupError;
extern
GQuark g_markup_error_quark (void);
typedef enum
{
  G_MARKUP_DO_NOT_USE_THIS_UNSUPPORTED_FLAG = 1 << 0,
  G_MARKUP_TREAT_CDATA_AS_TEXT = 1 << 1,
  G_MARKUP_PREFIX_ERROR_POSITION = 1 << 2,
  G_MARKUP_IGNORE_QUALIFIED = 1 << 3
} GMarkupParseFlags;
typedef struct _GMarkupParseContext GMarkupParseContext;
typedef struct _GMarkupParser GMarkupParser;
struct _GMarkupParser
{
  void (*start_element) (GMarkupParseContext *context,
                          const gchar *element_name,
                          const gchar **attribute_names,
                          const gchar **attribute_values,
                          gpointer user_data,
                          GError **error);
  void (*end_element) (GMarkupParseContext *context,
                          const gchar *element_name,
                          gpointer user_data,
                          GError **error);
  void (*text) (GMarkupParseContext *context,
                          const gchar *text,
                          gsize text_len,
                          gpointer user_data,
                          GError **error);
  void (*passthrough) (GMarkupParseContext *context,
                          const gchar *passthrough_text,
                          gsize text_len,
                          gpointer user_data,
                          GError **error);
  void (*error) (GMarkupParseContext *context,
                          GError *error,
                          gpointer user_data);
};
extern
GMarkupParseContext *g_markup_parse_context_new (const GMarkupParser *parser,
                                                   GMarkupParseFlags flags,
                                                   gpointer user_data,
                                                   GDestroyNotify user_data_dnotify);
extern
GMarkupParseContext *g_markup_parse_context_ref (GMarkupParseContext *context);
extern
void g_markup_parse_context_unref (GMarkupParseContext *context);
extern
void g_markup_parse_context_free (GMarkupParseContext *context);
extern
gboolean g_markup_parse_context_parse (GMarkupParseContext *context,
                                                   const gchar *text,
                                                   gssize text_len,
                                                   GError **error);
extern
void g_markup_parse_context_push (GMarkupParseContext *context,
                                                   const GMarkupParser *parser,
                                                   gpointer user_data);
extern
gpointer g_markup_parse_context_pop (GMarkupParseContext *context);
extern
gboolean g_markup_parse_context_end_parse (GMarkupParseContext *context,
                                                       GError **error);
extern
const gchar * g_markup_parse_context_get_element (GMarkupParseContext *context);
extern
const GSList * g_markup_parse_context_get_element_stack (GMarkupParseContext *context);
extern
void g_markup_parse_context_get_position (GMarkupParseContext *context,
                                                          gint *line_number,
                                                          gint *char_number);
extern
gpointer g_markup_parse_context_get_user_data (GMarkupParseContext *context);
extern
gchar* g_markup_escape_text (const gchar *text,
                             gssize length);
extern
gchar *g_markup_printf_escaped (const char *format,
    ...) __attribute__((__format__ (__printf__, 1, 2)));
extern
gchar *g_markup_vprintf_escaped (const char *format,
     va_list args) __attribute__((__format__ (__printf__, 1, 0)));
typedef enum
{
  G_MARKUP_COLLECT_INVALID,
  G_MARKUP_COLLECT_STRING,
  G_MARKUP_COLLECT_STRDUP,
  G_MARKUP_COLLECT_BOOLEAN,
  G_MARKUP_COLLECT_TRISTATE,
  G_MARKUP_COLLECT_OPTIONAL = (1 << 16)
} GMarkupCollectType;
extern
gboolean g_markup_collect_attributes (const gchar *element_name,
                                        const gchar **attribute_names,
                                        const gchar **attribute_values,
                                        GError **error,
                                        GMarkupCollectType first_type,
                                        const gchar *first_attr,
                                        ...);
extern
gsize g_printf_string_upper_bound (const gchar* format,
         va_list args) __attribute__((__format__ (__printf__, 1, 0)));
typedef enum
{
  G_LOG_FLAG_RECURSION = 1 << 0,
  G_LOG_FLAG_FATAL = 1 << 1,
  G_LOG_LEVEL_ERROR = 1 << 2,
  G_LOG_LEVEL_CRITICAL = 1 << 3,
  G_LOG_LEVEL_WARNING = 1 << 4,
  G_LOG_LEVEL_MESSAGE = 1 << 5,
  G_LOG_LEVEL_INFO = 1 << 6,
  G_LOG_LEVEL_DEBUG = 1 << 7,
  G_LOG_LEVEL_MASK = ~(G_LOG_FLAG_RECURSION | G_LOG_FLAG_FATAL)
} GLogLevelFlags;
typedef void (*GLogFunc) (const gchar *log_domain,
                                                 GLogLevelFlags log_level,
                                                 const gchar *message,
                                                 gpointer user_data);
extern
guint g_log_set_handler (const gchar *log_domain,
                                         GLogLevelFlags log_levels,
                                         GLogFunc log_func,
                                         gpointer user_data);
extern
guint g_log_set_handler_full (const gchar *log_domain,
                                         GLogLevelFlags log_levels,
                                         GLogFunc log_func,
                                         gpointer user_data,
                                         GDestroyNotify destroy);
extern
void g_log_remove_handler (const gchar *log_domain,
                                         guint handler_id);
extern
void g_log_default_handler (const gchar *log_domain,
                                         GLogLevelFlags log_level,
                                         const gchar *message,
                                         gpointer unused_data);
extern
GLogFunc g_log_set_default_handler (GLogFunc log_func,
        gpointer user_data);
extern
void g_log (const gchar *log_domain,
                                         GLogLevelFlags log_level,
                                         const gchar *format,
                                         ...) __attribute__((__format__ (__printf__, 3, 4)));
extern
void g_logv (const gchar *log_domain,
                                         GLogLevelFlags log_level,
                                         const gchar *format,
                                         va_list args) __attribute__((__format__ (__printf__, 3, 0)));
extern
GLogLevelFlags g_log_set_fatal_mask (const gchar *log_domain,
                                         GLogLevelFlags fatal_mask);
extern
GLogLevelFlags g_log_set_always_fatal (GLogLevelFlags fatal_mask);
void _g_log_fallback_handler (const gchar *log_domain,
       GLogLevelFlags log_level,
       const gchar *message,
       gpointer unused_data);
extern
void g_return_if_fail_warning (const char *log_domain,
          const char *pretty_function,
          const char *expression) ;
extern
void g_warn_message (const char *domain,
                               const char *file,
                               int line,
                               const char *func,
                               const char *warnexpr) ;
extern
void g_assert_warning (const char *log_domain,
          const char *file,
          const int line,
                 const char *pretty_function,
                 const char *expression) __attribute__((__noreturn__));
typedef void (*GPrintFunc) (const gchar *string);
extern
void g_print (const gchar *format,
                                         ...) __attribute__((__format__ (__printf__, 1, 2)));
extern
GPrintFunc g_set_print_handler (GPrintFunc func);
extern
void g_printerr (const gchar *format,
                                         ...) __attribute__((__format__ (__printf__, 1, 2)));
extern
GPrintFunc g_set_printerr_handler (GPrintFunc func);
typedef struct _GOptionContext GOptionContext;
typedef struct _GOptionGroup GOptionGroup;
typedef struct _GOptionEntry GOptionEntry;
typedef enum
{
  G_OPTION_FLAG_NONE = 0,
  G_OPTION_FLAG_HIDDEN = 1 << 0,
  G_OPTION_FLAG_IN_MAIN = 1 << 1,
  G_OPTION_FLAG_REVERSE = 1 << 2,
  G_OPTION_FLAG_NO_ARG = 1 << 3,
  G_OPTION_FLAG_FILENAME = 1 << 4,
  G_OPTION_FLAG_OPTIONAL_ARG = 1 << 5,
  G_OPTION_FLAG_NOALIAS = 1 << 6
} GOptionFlags;
typedef enum
{
  G_OPTION_ARG_NONE,
  G_OPTION_ARG_STRING,
  G_OPTION_ARG_INT,
  G_OPTION_ARG_CALLBACK,
  G_OPTION_ARG_FILENAME,
  G_OPTION_ARG_STRING_ARRAY,
  G_OPTION_ARG_FILENAME_ARRAY,
  G_OPTION_ARG_DOUBLE,
  G_OPTION_ARG_INT64
} GOptionArg;
typedef gboolean (*GOptionArgFunc) (const gchar *option_name,
        const gchar *value,
        gpointer data,
        GError **error);
typedef gboolean (*GOptionParseFunc) (GOptionContext *context,
          GOptionGroup *group,
          gpointer data,
          GError **error);
typedef void (*GOptionErrorFunc) (GOptionContext *context,
      GOptionGroup *group,
      gpointer data,
      GError **error);
typedef enum
{
  G_OPTION_ERROR_UNKNOWN_OPTION,
  G_OPTION_ERROR_BAD_VALUE,
  G_OPTION_ERROR_FAILED
} GOptionError;
extern
GQuark g_option_error_quark (void);
struct _GOptionEntry
{
  const gchar *long_name;
  gchar short_name;
  gint flags;
  GOptionArg arg;
  gpointer arg_data;
  const gchar *description;
  const gchar *arg_description;
};
extern
GOptionContext *g_option_context_new (const gchar *parameter_string);
extern
void g_option_context_set_summary (GOptionContext *context,
                                                   const gchar *summary);
extern
const gchar * g_option_context_get_summary (GOptionContext *context);
extern
void g_option_context_set_description (GOptionContext *context,
                                                   const gchar *description);
extern
const gchar * g_option_context_get_description (GOptionContext *context);
extern
void g_option_context_free (GOptionContext *context);
extern
void g_option_context_set_help_enabled (GOptionContext *context,
         gboolean help_enabled);
extern
gboolean g_option_context_get_help_enabled (GOptionContext *context);
extern
void g_option_context_set_ignore_unknown_options (GOptionContext *context,
            gboolean ignore_unknown);
extern
gboolean g_option_context_get_ignore_unknown_options (GOptionContext *context);
extern
void g_option_context_set_strict_posix (GOptionContext *context,
                                                             gboolean strict_posix);
extern
gboolean g_option_context_get_strict_posix (GOptionContext *context);
extern
void g_option_context_add_main_entries (GOptionContext *context,
         const GOptionEntry *entries,
         const gchar *translation_domain);
extern
gboolean g_option_context_parse (GOptionContext *context,
         gint *argc,
         gchar ***argv,
         GError **error);
extern
gboolean g_option_context_parse_strv (GOptionContext *context,
                                                   gchar ***arguments,
                                                   GError **error);
extern
void g_option_context_set_translate_func (GOptionContext *context,
           GTranslateFunc func,
           gpointer data,
           GDestroyNotify destroy_notify);
extern
void g_option_context_set_translation_domain (GOptionContext *context,
        const gchar *domain);
extern
void g_option_context_add_group (GOptionContext *context,
       GOptionGroup *group);
extern
void g_option_context_set_main_group (GOptionContext *context,
            GOptionGroup *group);
extern
GOptionGroup *g_option_context_get_main_group (GOptionContext *context);
extern
gchar *g_option_context_get_help (GOptionContext *context,
                                               gboolean main_help,
                                               GOptionGroup *group);
extern
GOptionGroup *g_option_group_new (const gchar *name,
           const gchar *description,
           const gchar *help_description,
           gpointer user_data,
           GDestroyNotify destroy);
extern
void g_option_group_set_parse_hooks (GOptionGroup *group,
           GOptionParseFunc pre_parse_func,
           GOptionParseFunc post_parse_func);
extern
void g_option_group_set_error_hook (GOptionGroup *group,
           GOptionErrorFunc error_func);
extern
void g_option_group_free (GOptionGroup *group);
extern
GOptionGroup *g_option_group_ref (GOptionGroup *group);
extern
void g_option_group_unref (GOptionGroup *group);
extern
void g_option_group_add_entries (GOptionGroup *group,
           const GOptionEntry *entries);
extern
void g_option_group_set_translate_func (GOptionGroup *group,
           GTranslateFunc func,
           gpointer data,
           GDestroyNotify destroy_notify);
extern
void g_option_group_set_translation_domain (GOptionGroup *group,
           const gchar *domain);
typedef struct _GPatternSpec GPatternSpec;
extern
GPatternSpec* g_pattern_spec_new (const gchar *pattern);
extern
void g_pattern_spec_free (GPatternSpec *pspec);
extern
gboolean g_pattern_spec_equal (GPatternSpec *pspec1,
     GPatternSpec *pspec2);
extern
gboolean g_pattern_match (GPatternSpec *pspec,
     guint string_length,
     const gchar *string,
     const gchar *string_reversed);
extern
gboolean g_pattern_match_string (GPatternSpec *pspec,
     const gchar *string);
extern
gboolean g_pattern_match_simple (const gchar *pattern,
     const gchar *string);
extern
guint g_spaced_primes_closest (guint num) __attribute__((__const__));
extern
void g_qsort_with_data (gconstpointer pbase,
   gint total_elems,
   gsize size,
   GCompareDataFunc compare_func,
   gpointer user_data);
typedef struct _GQueue GQueue;
struct _GQueue
{
  GList *head;
  GList *tail;
  guint length;
};
extern
GQueue* g_queue_new (void);
extern
void g_queue_free (GQueue *queue);
extern
void g_queue_free_full (GQueue *queue,
    GDestroyNotify free_func);
extern
void g_queue_init (GQueue *queue);
extern
void g_queue_clear (GQueue *queue);
extern
gboolean g_queue_is_empty (GQueue *queue);
extern
guint g_queue_get_length (GQueue *queue);
extern
void g_queue_reverse (GQueue *queue);
extern
GQueue * g_queue_copy (GQueue *queue);
extern
void g_queue_foreach (GQueue *queue,
                                 GFunc func,
                                 gpointer user_data);
extern
GList * g_queue_find (GQueue *queue,
                                 gconstpointer data);
extern
GList * g_queue_find_custom (GQueue *queue,
                                 gconstpointer data,
                                 GCompareFunc func);
extern
void g_queue_sort (GQueue *queue,
                                 GCompareDataFunc compare_func,
                                 gpointer user_data);
extern
void g_queue_push_head (GQueue *queue,
                                 gpointer data);
extern
void g_queue_push_tail (GQueue *queue,
                                 gpointer data);
extern
void g_queue_push_nth (GQueue *queue,
                                 gpointer data,
                                 gint n);
extern
gpointer g_queue_pop_head (GQueue *queue);
extern
gpointer g_queue_pop_tail (GQueue *queue);
extern
gpointer g_queue_pop_nth (GQueue *queue,
                                 guint n);
extern
gpointer g_queue_peek_head (GQueue *queue);
extern
gpointer g_queue_peek_tail (GQueue *queue);
extern
gpointer g_queue_peek_nth (GQueue *queue,
                                 guint n);
extern
gint g_queue_index (GQueue *queue,
                                 gconstpointer data);
extern
gboolean g_queue_remove (GQueue *queue,
                                 gconstpointer data);
extern
guint g_queue_remove_all (GQueue *queue,
                                 gconstpointer data);
extern
void g_queue_insert_before (GQueue *queue,
                                 GList *sibling,
                                 gpointer data);
extern
void g_queue_insert_after (GQueue *queue,
                                 GList *sibling,
                                 gpointer data);
extern
void g_queue_insert_sorted (GQueue *queue,
                                 gpointer data,
                                 GCompareDataFunc func,
                                 gpointer user_data);
extern
void g_queue_push_head_link (GQueue *queue,
                                 GList *link_);
extern
void g_queue_push_tail_link (GQueue *queue,
                                 GList *link_);
extern
void g_queue_push_nth_link (GQueue *queue,
                                 gint n,
                                 GList *link_);
extern
GList* g_queue_pop_head_link (GQueue *queue);
extern
GList* g_queue_pop_tail_link (GQueue *queue);
extern
GList* g_queue_pop_nth_link (GQueue *queue,
                                 guint n);
extern
GList* g_queue_peek_head_link (GQueue *queue);
extern
GList* g_queue_peek_tail_link (GQueue *queue);
extern
GList* g_queue_peek_nth_link (GQueue *queue,
                                 guint n);
extern
gint g_queue_link_index (GQueue *queue,
                                 GList *link_);
extern
void g_queue_unlink (GQueue *queue,
                                 GList *link_);
extern
void g_queue_delete_link (GQueue *queue,
                                 GList *link_);
typedef struct _GRand GRand;
extern
GRand* g_rand_new_with_seed (guint32 seed);
extern
GRand* g_rand_new_with_seed_array (const guint32 *seed,
        guint seed_length);
extern
GRand* g_rand_new (void);
extern
void g_rand_free (GRand *rand_);
extern
GRand* g_rand_copy (GRand *rand_);
extern
void g_rand_set_seed (GRand *rand_,
          guint32 seed);
extern
void g_rand_set_seed_array (GRand *rand_,
          const guint32 *seed,
          guint seed_length);
extern
guint32 g_rand_int (GRand *rand_);
extern
gint32 g_rand_int_range (GRand *rand_,
          gint32 begin,
          gint32 end);
extern
gdouble g_rand_double (GRand *rand_);
extern
gdouble g_rand_double_range (GRand *rand_,
          gdouble begin,
          gdouble end);
extern
void g_random_set_seed (guint32 seed);
extern
guint32 g_random_int (void);
extern
gint32 g_random_int_range (gint32 begin,
          gint32 end);
extern
gdouble g_random_double (void);
extern
gdouble g_random_double_range (gdouble begin,
          gdouble end);
typedef enum
{
  G_REGEX_ERROR_COMPILE,
  G_REGEX_ERROR_OPTIMIZE,
  G_REGEX_ERROR_REPLACE,
  G_REGEX_ERROR_MATCH,
  G_REGEX_ERROR_INTERNAL,
  G_REGEX_ERROR_STRAY_BACKSLASH = 101,
  G_REGEX_ERROR_MISSING_CONTROL_CHAR = 102,
  G_REGEX_ERROR_UNRECOGNIZED_ESCAPE = 103,
  G_REGEX_ERROR_QUANTIFIERS_OUT_OF_ORDER = 104,
  G_REGEX_ERROR_QUANTIFIER_TOO_BIG = 105,
  G_REGEX_ERROR_UNTERMINATED_CHARACTER_CLASS = 106,
  G_REGEX_ERROR_INVALID_ESCAPE_IN_CHARACTER_CLASS = 107,
  G_REGEX_ERROR_RANGE_OUT_OF_ORDER = 108,
  G_REGEX_ERROR_NOTHING_TO_REPEAT = 109,
  G_REGEX_ERROR_UNRECOGNIZED_CHARACTER = 112,
  G_REGEX_ERROR_POSIX_NAMED_CLASS_OUTSIDE_CLASS = 113,
  G_REGEX_ERROR_UNMATCHED_PARENTHESIS = 114,
  G_REGEX_ERROR_INEXISTENT_SUBPATTERN_REFERENCE = 115,
  G_REGEX_ERROR_UNTERMINATED_COMMENT = 118,
  G_REGEX_ERROR_EXPRESSION_TOO_LARGE = 120,
  G_REGEX_ERROR_MEMORY_ERROR = 121,
  G_REGEX_ERROR_VARIABLE_LENGTH_LOOKBEHIND = 125,
  G_REGEX_ERROR_MALFORMED_CONDITION = 126,
  G_REGEX_ERROR_TOO_MANY_CONDITIONAL_BRANCHES = 127,
  G_REGEX_ERROR_ASSERTION_EXPECTED = 128,
  G_REGEX_ERROR_UNKNOWN_POSIX_CLASS_NAME = 130,
  G_REGEX_ERROR_POSIX_COLLATING_ELEMENTS_NOT_SUPPORTED = 131,
  G_REGEX_ERROR_HEX_CODE_TOO_LARGE = 134,
  G_REGEX_ERROR_INVALID_CONDITION = 135,
  G_REGEX_ERROR_SINGLE_BYTE_MATCH_IN_LOOKBEHIND = 136,
  G_REGEX_ERROR_INFINITE_LOOP = 140,
  G_REGEX_ERROR_MISSING_SUBPATTERN_NAME_TERMINATOR = 142,
  G_REGEX_ERROR_DUPLICATE_SUBPATTERN_NAME = 143,
  G_REGEX_ERROR_MALFORMED_PROPERTY = 146,
  G_REGEX_ERROR_UNKNOWN_PROPERTY = 147,
  G_REGEX_ERROR_SUBPATTERN_NAME_TOO_LONG = 148,
  G_REGEX_ERROR_TOO_MANY_SUBPATTERNS = 149,
  G_REGEX_ERROR_INVALID_OCTAL_VALUE = 151,
  G_REGEX_ERROR_TOO_MANY_BRANCHES_IN_DEFINE = 154,
  G_REGEX_ERROR_DEFINE_REPETION = 155,
  G_REGEX_ERROR_INCONSISTENT_NEWLINE_OPTIONS = 156,
  G_REGEX_ERROR_MISSING_BACK_REFERENCE = 157,
  G_REGEX_ERROR_INVALID_RELATIVE_REFERENCE = 158,
  G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_FORBIDDEN = 159,
  G_REGEX_ERROR_UNKNOWN_BACKTRACKING_CONTROL_VERB = 160,
  G_REGEX_ERROR_NUMBER_TOO_BIG = 161,
  G_REGEX_ERROR_MISSING_SUBPATTERN_NAME = 162,
  G_REGEX_ERROR_MISSING_DIGIT = 163,
  G_REGEX_ERROR_INVALID_DATA_CHARACTER = 164,
  G_REGEX_ERROR_EXTRA_SUBPATTERN_NAME = 165,
  G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_REQUIRED = 166,
  G_REGEX_ERROR_INVALID_CONTROL_CHAR = 168,
  G_REGEX_ERROR_MISSING_NAME = 169,
  G_REGEX_ERROR_NOT_SUPPORTED_IN_CLASS = 171,
  G_REGEX_ERROR_TOO_MANY_FORWARD_REFERENCES = 172,
  G_REGEX_ERROR_NAME_TOO_LONG = 175,
  G_REGEX_ERROR_CHARACTER_VALUE_TOO_LARGE = 176
} GRegexError;
extern
GQuark g_regex_error_quark (void);
typedef enum
{
  G_REGEX_CASELESS = 1 << 0,
  G_REGEX_MULTILINE = 1 << 1,
  G_REGEX_DOTALL = 1 << 2,
  G_REGEX_EXTENDED = 1 << 3,
  G_REGEX_ANCHORED = 1 << 4,
  G_REGEX_DOLLAR_ENDONLY = 1 << 5,
  G_REGEX_UNGREEDY = 1 << 9,
  G_REGEX_RAW = 1 << 11,
  G_REGEX_NO_AUTO_CAPTURE = 1 << 12,
  G_REGEX_OPTIMIZE = 1 << 13,
  G_REGEX_FIRSTLINE = 1 << 18,
  G_REGEX_DUPNAMES = 1 << 19,
  G_REGEX_NEWLINE_CR = 1 << 20,
  G_REGEX_NEWLINE_LF = 1 << 21,
  G_REGEX_NEWLINE_CRLF = G_REGEX_NEWLINE_CR | G_REGEX_NEWLINE_LF,
  G_REGEX_NEWLINE_ANYCRLF = G_REGEX_NEWLINE_CR | 1 << 22,
  G_REGEX_BSR_ANYCRLF = 1 << 23,
  G_REGEX_JAVASCRIPT_COMPAT = 1 << 25
} GRegexCompileFlags;
typedef enum
{
  G_REGEX_MATCH_ANCHORED = 1 << 4,
  G_REGEX_MATCH_NOTBOL = 1 << 7,
  G_REGEX_MATCH_NOTEOL = 1 << 8,
  G_REGEX_MATCH_NOTEMPTY = 1 << 10,
  G_REGEX_MATCH_PARTIAL = 1 << 15,
  G_REGEX_MATCH_NEWLINE_CR = 1 << 20,
  G_REGEX_MATCH_NEWLINE_LF = 1 << 21,
  G_REGEX_MATCH_NEWLINE_CRLF = G_REGEX_MATCH_NEWLINE_CR | G_REGEX_MATCH_NEWLINE_LF,
  G_REGEX_MATCH_NEWLINE_ANY = 1 << 22,
  G_REGEX_MATCH_NEWLINE_ANYCRLF = G_REGEX_MATCH_NEWLINE_CR | G_REGEX_MATCH_NEWLINE_ANY,
  G_REGEX_MATCH_BSR_ANYCRLF = 1 << 23,
  G_REGEX_MATCH_BSR_ANY = 1 << 24,
  G_REGEX_MATCH_PARTIAL_SOFT = G_REGEX_MATCH_PARTIAL,
  G_REGEX_MATCH_PARTIAL_HARD = 1 << 27,
  G_REGEX_MATCH_NOTEMPTY_ATSTART = 1 << 28
} GRegexMatchFlags;
typedef struct _GRegex GRegex;
typedef struct _GMatchInfo GMatchInfo;
typedef gboolean (*GRegexEvalCallback) (const GMatchInfo *match_info,
       GString *result,
       gpointer user_data);
extern
GRegex *g_regex_new (const gchar *pattern,
       GRegexCompileFlags compile_options,
       GRegexMatchFlags match_options,
       GError **error);
extern
GRegex *g_regex_ref (GRegex *regex);
extern
void g_regex_unref (GRegex *regex);
extern
const gchar *g_regex_get_pattern (const GRegex *regex);
extern
gint g_regex_get_max_backref (const GRegex *regex);
extern
gint g_regex_get_capture_count (const GRegex *regex);
extern
gboolean g_regex_get_has_cr_or_lf (const GRegex *regex);
extern
gint g_regex_get_max_lookbehind (const GRegex *regex);
extern
gint g_regex_get_string_number (const GRegex *regex,
       const gchar *name);
extern
gchar *g_regex_escape_string (const gchar *string,
       gint length);
extern
gchar *g_regex_escape_nul (const gchar *string,
       gint length);
extern
GRegexCompileFlags g_regex_get_compile_flags (const GRegex *regex);
extern
GRegexMatchFlags g_regex_get_match_flags (const GRegex *regex);
extern
gboolean g_regex_match_simple (const gchar *pattern,
       const gchar *string,
       GRegexCompileFlags compile_options,
       GRegexMatchFlags match_options);
extern
gboolean g_regex_match (const GRegex *regex,
       const gchar *string,
       GRegexMatchFlags match_options,
       GMatchInfo **match_info);
extern
gboolean g_regex_match_full (const GRegex *regex,
       const gchar *string,
       gssize string_len,
       gint start_position,
       GRegexMatchFlags match_options,
       GMatchInfo **match_info,
       GError **error);
extern
gboolean g_regex_match_all (const GRegex *regex,
       const gchar *string,
       GRegexMatchFlags match_options,
       GMatchInfo **match_info);
extern
gboolean g_regex_match_all_full (const GRegex *regex,
       const gchar *string,
       gssize string_len,
       gint start_position,
       GRegexMatchFlags match_options,
       GMatchInfo **match_info,
       GError **error);
extern
gchar **g_regex_split_simple (const gchar *pattern,
       const gchar *string,
       GRegexCompileFlags compile_options,
       GRegexMatchFlags match_options);
extern
gchar **g_regex_split (const GRegex *regex,
       const gchar *string,
       GRegexMatchFlags match_options);
extern
gchar **g_regex_split_full (const GRegex *regex,
       const gchar *string,
       gssize string_len,
       gint start_position,
       GRegexMatchFlags match_options,
       gint max_tokens,
       GError **error);
extern
gchar *g_regex_replace (const GRegex *regex,
       const gchar *string,
       gssize string_len,
       gint start_position,
       const gchar *replacement,
       GRegexMatchFlags match_options,
       GError **error);
extern
gchar *g_regex_replace_literal (const GRegex *regex,
       const gchar *string,
       gssize string_len,
       gint start_position,
       const gchar *replacement,
       GRegexMatchFlags match_options,
       GError **error);
extern
gchar *g_regex_replace_eval (const GRegex *regex,
       const gchar *string,
       gssize string_len,
       gint start_position,
       GRegexMatchFlags match_options,
       GRegexEvalCallback eval,
       gpointer user_data,
       GError **error);
extern
gboolean g_regex_check_replacement (const gchar *replacement,
       gboolean *has_references,
       GError **error);
extern
GRegex *g_match_info_get_regex (const GMatchInfo *match_info);
extern
const gchar *g_match_info_get_string (const GMatchInfo *match_info);
extern
GMatchInfo *g_match_info_ref (GMatchInfo *match_info);
extern
void g_match_info_unref (GMatchInfo *match_info);
extern
void g_match_info_free (GMatchInfo *match_info);
extern
gboolean g_match_info_next (GMatchInfo *match_info,
       GError **error);
extern
gboolean g_match_info_matches (const GMatchInfo *match_info);
extern
gint g_match_info_get_match_count (const GMatchInfo *match_info);
extern
gboolean g_match_info_is_partial_match (const GMatchInfo *match_info);
extern
gchar *g_match_info_expand_references(const GMatchInfo *match_info,
       const gchar *string_to_expand,
       GError **error);
extern
gchar *g_match_info_fetch (const GMatchInfo *match_info,
       gint match_num);
extern
gboolean g_match_info_fetch_pos (const GMatchInfo *match_info,
       gint match_num,
       gint *start_pos,
       gint *end_pos);
extern
gchar *g_match_info_fetch_named (const GMatchInfo *match_info,
       const gchar *name);
extern
gboolean g_match_info_fetch_named_pos (const GMatchInfo *match_info,
       const gchar *name,
       gint *start_pos,
       gint *end_pos);
extern
gchar **g_match_info_fetch_all (const GMatchInfo *match_info);
typedef struct _GScanner GScanner;
typedef struct _GScannerConfig GScannerConfig;
typedef union _GTokenValue GTokenValue;
typedef void (*GScannerMsgFunc) (GScanner *scanner,
       gchar *message,
       gboolean error);
typedef enum
{
  G_ERR_UNKNOWN,
  G_ERR_UNEXP_EOF,
  G_ERR_UNEXP_EOF_IN_STRING,
  G_ERR_UNEXP_EOF_IN_COMMENT,
  G_ERR_NON_DIGIT_IN_CONST,
  G_ERR_DIGIT_RADIX,
  G_ERR_FLOAT_RADIX,
  G_ERR_FLOAT_MALFORMED
} GErrorType;
typedef enum
{
  G_TOKEN_EOF = 0,
  G_TOKEN_LEFT_PAREN = '(',
  G_TOKEN_RIGHT_PAREN = ')',
  G_TOKEN_LEFT_CURLY = '{',
  G_TOKEN_RIGHT_CURLY = '}',
  G_TOKEN_LEFT_BRACE = '[',
  G_TOKEN_RIGHT_BRACE = ']',
  G_TOKEN_EQUAL_SIGN = '=',
  G_TOKEN_COMMA = ',',
  G_TOKEN_NONE = 256,
  G_TOKEN_ERROR,
  G_TOKEN_CHAR,
  G_TOKEN_BINARY,
  G_TOKEN_OCTAL,
  G_TOKEN_INT,
  G_TOKEN_HEX,
  G_TOKEN_FLOAT,
  G_TOKEN_STRING,
  G_TOKEN_SYMBOL,
  G_TOKEN_IDENTIFIER,
  G_TOKEN_IDENTIFIER_NULL,
  G_TOKEN_COMMENT_SINGLE,
  G_TOKEN_COMMENT_MULTI,
  G_TOKEN_LAST
} GTokenType;
union _GTokenValue
{
  gpointer v_symbol;
  gchar *v_identifier;
  gulong v_binary;
  gulong v_octal;
  gulong v_int;
  guint64 v_int64;
  gdouble v_float;
  gulong v_hex;
  gchar *v_string;
  gchar *v_comment;
  guchar v_char;
  guint v_error;
};
struct _GScannerConfig
{
  gchar *cset_skip_characters;
  gchar *cset_identifier_first;
  gchar *cset_identifier_nth;
  gchar *cpair_comment_single;
  guint case_sensitive : 1;
  guint skip_comment_multi : 1;
  guint skip_comment_single : 1;
  guint scan_comment_multi : 1;
  guint scan_identifier : 1;
  guint scan_identifier_1char : 1;
  guint scan_identifier_NULL : 1;
  guint scan_symbols : 1;
  guint scan_binary : 1;
  guint scan_octal : 1;
  guint scan_float : 1;
  guint scan_hex : 1;
  guint scan_hex_dollar : 1;
  guint scan_string_sq : 1;
  guint scan_string_dq : 1;
  guint numbers_2_int : 1;
  guint int_2_float : 1;
  guint identifier_2_string : 1;
  guint char_2_token : 1;
  guint symbol_2_token : 1;
  guint scope_0_fallback : 1;
  guint store_int64 : 1;
  guint padding_dummy;
};
struct _GScanner
{
  gpointer user_data;
  guint max_parse_errors;
  guint parse_errors;
  const gchar *input_name;
  GData *qdata;
  GScannerConfig *config;
  GTokenType token;
  GTokenValue value;
  guint line;
  guint position;
  GTokenType next_token;
  GTokenValue next_value;
  guint next_line;
  guint next_position;
  GHashTable *symbol_table;
  gint input_fd;
  const gchar *text;
  const gchar *text_end;
  gchar *buffer;
  guint scope_id;
  GScannerMsgFunc msg_handler;
};
extern
GScanner* g_scanner_new (const GScannerConfig *config_templ);
extern
void g_scanner_destroy (GScanner *scanner);
extern
void g_scanner_input_file (GScanner *scanner,
       gint input_fd);
extern
void g_scanner_sync_file_offset (GScanner *scanner);
extern
void g_scanner_input_text (GScanner *scanner,
       const gchar *text,
       guint text_len);
extern
GTokenType g_scanner_get_next_token (GScanner *scanner);
extern
GTokenType g_scanner_peek_next_token (GScanner *scanner);
extern
GTokenType g_scanner_cur_token (GScanner *scanner);
extern
GTokenValue g_scanner_cur_value (GScanner *scanner);
extern
guint g_scanner_cur_line (GScanner *scanner);
extern
guint g_scanner_cur_position (GScanner *scanner);
extern
gboolean g_scanner_eof (GScanner *scanner);
extern
guint g_scanner_set_scope (GScanner *scanner,
       guint scope_id);
extern
void g_scanner_scope_add_symbol (GScanner *scanner,
       guint scope_id,
       const gchar *symbol,
       gpointer value);
extern
void g_scanner_scope_remove_symbol (GScanner *scanner,
       guint scope_id,
       const gchar *symbol);
extern
gpointer g_scanner_scope_lookup_symbol (GScanner *scanner,
       guint scope_id,
       const gchar *symbol);
extern
void g_scanner_scope_foreach_symbol (GScanner *scanner,
       guint scope_id,
       GHFunc func,
       gpointer user_data);
extern
gpointer g_scanner_lookup_symbol (GScanner *scanner,
       const gchar *symbol);
extern
void g_scanner_unexp_token (GScanner *scanner,
       GTokenType expected_token,
       const gchar *identifier_spec,
       const gchar *symbol_spec,
       const gchar *symbol_name,
       const gchar *message,
       gint is_error);
extern
void g_scanner_error (GScanner *scanner,
       const gchar *format,
       ...) __attribute__((__format__ (__printf__, 2, 3)));
extern
void g_scanner_warn (GScanner *scanner,
       const gchar *format,
       ...) __attribute__((__format__ (__printf__, 2, 3)));
typedef struct _GSequence GSequence;
typedef struct _GSequenceNode GSequenceIter;
typedef gint (* GSequenceIterCompareFunc) (GSequenceIter *a,
                                           GSequenceIter *b,
                                           gpointer data);
extern
GSequence * g_sequence_new (GDestroyNotify data_destroy);
extern
void g_sequence_free (GSequence *seq);
extern
gint g_sequence_get_length (GSequence *seq);
extern
void g_sequence_foreach (GSequence *seq,
                                              GFunc func,
                                              gpointer user_data);
extern
void g_sequence_foreach_range (GSequenceIter *begin,
                                              GSequenceIter *end,
                                              GFunc func,
                                              gpointer user_data);
extern
void g_sequence_sort (GSequence *seq,
                                              GCompareDataFunc cmp_func,
                                              gpointer cmp_data);
extern
void g_sequence_sort_iter (GSequence *seq,
                                              GSequenceIterCompareFunc cmp_func,
                                              gpointer cmp_data);
extern
gboolean g_sequence_is_empty (GSequence *seq);
extern
GSequenceIter *g_sequence_get_begin_iter (GSequence *seq);
extern
GSequenceIter *g_sequence_get_end_iter (GSequence *seq);
extern
GSequenceIter *g_sequence_get_iter_at_pos (GSequence *seq,
                                              gint pos);
extern
GSequenceIter *g_sequence_append (GSequence *seq,
                                              gpointer data);
extern
GSequenceIter *g_sequence_prepend (GSequence *seq,
                                              gpointer data);
extern
GSequenceIter *g_sequence_insert_before (GSequenceIter *iter,
                                              gpointer data);
extern
void g_sequence_move (GSequenceIter *src,
                                              GSequenceIter *dest);
extern
void g_sequence_swap (GSequenceIter *a,
                                              GSequenceIter *b);
extern
GSequenceIter *g_sequence_insert_sorted (GSequence *seq,
                                              gpointer data,
                                              GCompareDataFunc cmp_func,
                                              gpointer cmp_data);
extern
GSequenceIter *g_sequence_insert_sorted_iter (GSequence *seq,
                                              gpointer data,
                                              GSequenceIterCompareFunc iter_cmp,
                                              gpointer cmp_data);
extern
void g_sequence_sort_changed (GSequenceIter *iter,
                                              GCompareDataFunc cmp_func,
                                              gpointer cmp_data);
extern
void g_sequence_sort_changed_iter (GSequenceIter *iter,
                                              GSequenceIterCompareFunc iter_cmp,
                                              gpointer cmp_data);
extern
void g_sequence_remove (GSequenceIter *iter);
extern
void g_sequence_remove_range (GSequenceIter *begin,
                                              GSequenceIter *end);
extern
void g_sequence_move_range (GSequenceIter *dest,
                                              GSequenceIter *begin,
                                              GSequenceIter *end);
extern
GSequenceIter *g_sequence_search (GSequence *seq,
                                              gpointer data,
                                              GCompareDataFunc cmp_func,
                                              gpointer cmp_data);
extern
GSequenceIter *g_sequence_search_iter (GSequence *seq,
                                              gpointer data,
                                              GSequenceIterCompareFunc iter_cmp,
                                              gpointer cmp_data);
extern
GSequenceIter *g_sequence_lookup (GSequence *seq,
                                              gpointer data,
                                              GCompareDataFunc cmp_func,
                                              gpointer cmp_data);
extern
GSequenceIter *g_sequence_lookup_iter (GSequence *seq,
                                              gpointer data,
                                              GSequenceIterCompareFunc iter_cmp,
                                              gpointer cmp_data);
extern
gpointer g_sequence_get (GSequenceIter *iter);
extern
void g_sequence_set (GSequenceIter *iter,
                                              gpointer data);
extern
gboolean g_sequence_iter_is_begin (GSequenceIter *iter);
extern
gboolean g_sequence_iter_is_end (GSequenceIter *iter);
extern
GSequenceIter *g_sequence_iter_next (GSequenceIter *iter);
extern
GSequenceIter *g_sequence_iter_prev (GSequenceIter *iter);
extern
gint g_sequence_iter_get_position (GSequenceIter *iter);
extern
GSequenceIter *g_sequence_iter_move (GSequenceIter *iter,
                                              gint delta);
extern
GSequence * g_sequence_iter_get_sequence (GSequenceIter *iter);
extern
gint g_sequence_iter_compare (GSequenceIter *a,
                                              GSequenceIter *b);
extern
GSequenceIter *g_sequence_range_get_midpoint (GSequenceIter *begin,
                                              GSequenceIter *end);
typedef enum
{
  G_SHELL_ERROR_BAD_QUOTING,
  G_SHELL_ERROR_EMPTY_STRING,
  G_SHELL_ERROR_FAILED
} GShellError;
extern
GQuark g_shell_error_quark (void);
extern
gchar* g_shell_quote (const gchar *unquoted_string);
extern
gchar* g_shell_unquote (const gchar *quoted_string,
                             GError **error);
extern
gboolean g_shell_parse_argv (const gchar *command_line,
                             gint *argcp,
                             gchar ***argvp,
                             GError **error);
extern
gpointer g_slice_alloc (gsize block_size) __attribute__((__malloc__)) __attribute__((__alloc_size__(1)));
extern
gpointer g_slice_alloc0 (gsize block_size) __attribute__((__malloc__)) __attribute__((__alloc_size__(1)));
extern
gpointer g_slice_copy (gsize block_size,
                                         gconstpointer mem_block) __attribute__((__malloc__)) __attribute__((__alloc_size__(1)));
extern
void g_slice_free1 (gsize block_size,
      gpointer mem_block);
extern
void g_slice_free_chain_with_offset (gsize block_size,
      gpointer mem_chain,
      gsize next_offset);
typedef enum {
  G_SLICE_CONFIG_ALWAYS_MALLOC = 1,
  G_SLICE_CONFIG_BYPASS_MAGAZINES,
  G_SLICE_CONFIG_WORKING_SET_MSECS,
  G_SLICE_CONFIG_COLOR_INCREMENT,
  G_SLICE_CONFIG_CHUNK_SIZES,
  G_SLICE_CONFIG_CONTENTION_COUNTER
} GSliceConfig;
extern
void g_slice_set_config (GSliceConfig ckey, gint64 value);
extern
gint64 g_slice_get_config (GSliceConfig ckey);
extern
gint64* g_slice_get_config_state (GSliceConfig ckey, gint64 address, guint *n_values);
typedef enum
{
  G_SPAWN_ERROR_FORK,
  G_SPAWN_ERROR_READ,
  G_SPAWN_ERROR_CHDIR,
  G_SPAWN_ERROR_ACCES,
  G_SPAWN_ERROR_PERM,
  G_SPAWN_ERROR_TOO_BIG,
  G_SPAWN_ERROR_2BIG = G_SPAWN_ERROR_TOO_BIG,
  G_SPAWN_ERROR_NOEXEC,
  G_SPAWN_ERROR_NAMETOOLONG,
  G_SPAWN_ERROR_NOENT,
  G_SPAWN_ERROR_NOMEM,
  G_SPAWN_ERROR_NOTDIR,
  G_SPAWN_ERROR_LOOP,
  G_SPAWN_ERROR_TXTBUSY,
  G_SPAWN_ERROR_IO,
  G_SPAWN_ERROR_NFILE,
  G_SPAWN_ERROR_MFILE,
  G_SPAWN_ERROR_INVAL,
  G_SPAWN_ERROR_ISDIR,
  G_SPAWN_ERROR_LIBBAD,
  G_SPAWN_ERROR_FAILED
} GSpawnError;
typedef void (* GSpawnChildSetupFunc) (gpointer user_data);
typedef enum
{
  G_SPAWN_DEFAULT = 0,
  G_SPAWN_LEAVE_DESCRIPTORS_OPEN = 1 << 0,
  G_SPAWN_DO_NOT_REAP_CHILD = 1 << 1,
  G_SPAWN_SEARCH_PATH = 1 << 2,
  G_SPAWN_STDOUT_TO_DEV_NULL = 1 << 3,
  G_SPAWN_STDERR_TO_DEV_NULL = 1 << 4,
  G_SPAWN_CHILD_INHERITS_STDIN = 1 << 5,
  G_SPAWN_FILE_AND_ARGV_ZERO = 1 << 6,
  G_SPAWN_SEARCH_PATH_FROM_ENVP = 1 << 7,
  G_SPAWN_CLOEXEC_PIPES = 1 << 8
} GSpawnFlags;
extern
GQuark g_spawn_error_quark (void);
extern
GQuark g_spawn_exit_error_quark (void);
extern
gboolean g_spawn_async (const gchar *working_directory,
                        gchar **argv,
                        gchar **envp,
                        GSpawnFlags flags,
                        GSpawnChildSetupFunc child_setup,
                        gpointer user_data,
                        GPid *child_pid,
                        GError **error);
extern
gboolean g_spawn_async_with_pipes (const gchar *working_directory,
                                   gchar **argv,
                                   gchar **envp,
                                   GSpawnFlags flags,
                                   GSpawnChildSetupFunc child_setup,
                                   gpointer user_data,
                                   GPid *child_pid,
                                   gint *standard_input,
                                   gint *standard_output,
                                   gint *standard_error,
                                   GError **error);
extern
gboolean g_spawn_sync (const gchar *working_directory,
                               gchar **argv,
                               gchar **envp,
                               GSpawnFlags flags,
                               GSpawnChildSetupFunc child_setup,
                               gpointer user_data,
                               gchar **standard_output,
                               gchar **standard_error,
                               gint *exit_status,
                               GError **error);
extern
gboolean g_spawn_command_line_sync (const gchar *command_line,
                                     gchar **standard_output,
                                     gchar **standard_error,
                                     gint *exit_status,
                                     GError **error);
extern
gboolean g_spawn_command_line_async (const gchar *command_line,
                                     GError **error);
extern
gboolean g_spawn_check_exit_status (gint exit_status,
        GError **error);
extern
void g_spawn_close_pid (GPid pid);
typedef enum {
  G_ASCII_ALNUM = 1 << 0,
  G_ASCII_ALPHA = 1 << 1,
  G_ASCII_CNTRL = 1 << 2,
  G_ASCII_DIGIT = 1 << 3,
  G_ASCII_GRAPH = 1 << 4,
  G_ASCII_LOWER = 1 << 5,
  G_ASCII_PRINT = 1 << 6,
  G_ASCII_PUNCT = 1 << 7,
  G_ASCII_SPACE = 1 << 8,
  G_ASCII_UPPER = 1 << 9,
  G_ASCII_XDIGIT = 1 << 10
} GAsciiType;
extern const guint16 * const g_ascii_table;
extern
gchar g_ascii_tolower (gchar c) __attribute__((__const__));
extern
gchar g_ascii_toupper (gchar c) __attribute__((__const__));
extern
gint g_ascii_digit_value (gchar c) __attribute__((__const__));
extern
gint g_ascii_xdigit_value (gchar c) __attribute__((__const__));
extern
gchar* g_strdelimit (gchar *string,
     const gchar *delimiters,
     gchar new_delimiter);
extern
gchar* g_strcanon (gchar *string,
     const gchar *valid_chars,
     gchar substitutor);
extern
const gchar * g_strerror (gint errnum) __attribute__((__const__));
extern
const gchar * g_strsignal (gint signum) __attribute__((__const__));
extern
gchar * g_strreverse (gchar *string);
extern
gsize g_strlcpy (gchar *dest,
     const gchar *src,
     gsize dest_size);
extern
gsize g_strlcat (gchar *dest,
     const gchar *src,
     gsize dest_size);
extern
gchar * g_strstr_len (const gchar *haystack,
     gssize haystack_len,
     const gchar *needle);
extern
gchar * g_strrstr (const gchar *haystack,
     const gchar *needle);
extern
gchar * g_strrstr_len (const gchar *haystack,
     gssize haystack_len,
     const gchar *needle);
extern
gboolean g_str_has_suffix (const gchar *str,
     const gchar *suffix);
extern
gboolean g_str_has_prefix (const gchar *str,
     const gchar *prefix);
extern
gdouble g_strtod (const gchar *nptr,
     gchar **endptr);
extern
gdouble g_ascii_strtod (const gchar *nptr,
     gchar **endptr);
extern
guint64 g_ascii_strtoull (const gchar *nptr,
     gchar **endptr,
     guint base);
extern
gint64 g_ascii_strtoll (const gchar *nptr,
     gchar **endptr,
     guint base);
extern
gchar * g_ascii_dtostr (gchar *buffer,
     gint buf_len,
     gdouble d);
extern
gchar * g_ascii_formatd (gchar *buffer,
     gint buf_len,
     const gchar *format,
     gdouble d);
extern
gchar* g_strchug (gchar *string);
extern
gchar* g_strchomp (gchar *string);
extern
gint g_ascii_strcasecmp (const gchar *s1,
        const gchar *s2);
extern
gint g_ascii_strncasecmp (const gchar *s1,
        const gchar *s2,
        gsize n);
extern
gchar* g_ascii_strdown (const gchar *str,
        gssize len) __attribute__((__malloc__));
extern
gchar* g_ascii_strup (const gchar *str,
        gssize len) __attribute__((__malloc__));
extern
gboolean g_str_is_ascii (const gchar *str);
extern
gint g_strcasecmp (const gchar *s1,
                                        const gchar *s2);
extern
gint g_strncasecmp (const gchar *s1,
                                        const gchar *s2,
                                        guint n);
extern
gchar* g_strdown (gchar *string);
extern
gchar* g_strup (gchar *string);
extern
gchar* g_strdup (const gchar *str) __attribute__((__malloc__));
extern
gchar* g_strdup_printf (const gchar *format,
     ...) __attribute__((__format__ (__printf__, 1, 2))) __attribute__((__malloc__));
extern
gchar* g_strdup_vprintf (const gchar *format,
     va_list args) __attribute__((__format__ (__printf__, 1, 0))) __attribute__((__malloc__));
extern
gchar* g_strndup (const gchar *str,
     gsize n) __attribute__((__malloc__));
extern
gchar* g_strnfill (gsize length,
     gchar fill_char) __attribute__((__malloc__));
extern
gchar* g_strconcat (const gchar *string1,
     ...) __attribute__((__malloc__)) __attribute__((__sentinel__));
extern
gchar* g_strjoin (const gchar *separator,
     ...) __attribute__((__malloc__)) __attribute__((__sentinel__));
extern
gchar* g_strcompress (const gchar *source) __attribute__((__malloc__));
extern
gchar* g_strescape (const gchar *source,
     const gchar *exceptions) __attribute__((__malloc__));
extern
gpointer g_memdup (gconstpointer mem,
     guint byte_size) __attribute__((__malloc__)) __attribute__((__alloc_size__(2)));
typedef gchar** GStrv;
extern
gchar** g_strsplit (const gchar *string,
     const gchar *delimiter,
     gint max_tokens) __attribute__((__malloc__));
extern
gchar ** g_strsplit_set (const gchar *string,
     const gchar *delimiters,
     gint max_tokens) __attribute__((__malloc__));
extern
gchar* g_strjoinv (const gchar *separator,
     gchar **str_array) __attribute__((__malloc__));
extern
void g_strfreev (gchar **str_array);
extern
gchar** g_strdupv (gchar **str_array) __attribute__((__malloc__));
extern
guint g_strv_length (gchar **str_array);
extern
gchar* g_stpcpy (gchar *dest,
                                        const char *src);
extern
gchar * g_str_to_ascii (const gchar *str,
                                                                         const gchar *from_locale);
extern
gchar ** g_str_tokenize_and_fold (const gchar *string,
                                                                         const gchar *translit_locale,
                                                                         gchar ***ascii_alternates);
extern
gboolean g_str_match_string (const gchar *search_term,
                                                                         const gchar *potential_hit,
                                                                         gboolean accept_alternates);
extern
gboolean g_strv_contains (const gchar * const *strv,
                                        const gchar *str);
typedef struct _GStringChunk GStringChunk;
extern
GStringChunk* g_string_chunk_new (gsize size);
extern
void g_string_chunk_free (GStringChunk *chunk);
extern
void g_string_chunk_clear (GStringChunk *chunk);
extern
gchar* g_string_chunk_insert (GStringChunk *chunk,
                                           const gchar *string);
extern
gchar* g_string_chunk_insert_len (GStringChunk *chunk,
                                           const gchar *string,
                                           gssize len);
extern
gchar* g_string_chunk_insert_const (GStringChunk *chunk,
                                           const gchar *string);
typedef struct GTestCase GTestCase;
typedef struct GTestSuite GTestSuite;
typedef void (*GTestFunc) (void);
typedef void (*GTestDataFunc) (gconstpointer user_data);
typedef void (*GTestFixtureFunc) (gpointer fixture,
                                  gconstpointer user_data);
extern
int g_strcmp0 (const char *str1,
                                         const char *str2);
extern
void g_test_minimized_result (double minimized_quantity,
                                         const char *format,
                                         ...) __attribute__((__format__ (__printf__, 2, 3)));
extern
void g_test_maximized_result (double maximized_quantity,
                                         const char *format,
                                         ...) __attribute__((__format__ (__printf__, 2, 3)));
extern
void g_test_init (int *argc,
                                         char ***argv,
                                         ...) __attribute__((__sentinel__));
extern
gboolean g_test_subprocess (void);
extern
int g_test_run (void);
extern
void g_test_add_func (const char *testpath,
                                         GTestFunc test_func);
extern
void g_test_add_data_func (const char *testpath,
                                         gconstpointer test_data,
                                         GTestDataFunc test_func);
extern
void g_test_add_data_func_full (const char *testpath,
                                         gpointer test_data,
                                         GTestDataFunc test_func,
                                         GDestroyNotify data_free_func);
extern
void g_test_fail (void);
extern
void g_test_incomplete (const gchar *msg);
extern
void g_test_skip (const gchar *msg);
extern
gboolean g_test_failed (void);
extern
void g_test_set_nonfatal_assertions (void);
extern
void g_test_message (const char *format,
                                         ...) __attribute__((__format__ (__printf__, 1, 2)));
extern
void g_test_bug_base (const char *uri_pattern);
extern
void g_test_bug (const char *bug_uri_snippet);
extern
void g_test_timer_start (void);
extern
double g_test_timer_elapsed (void);
extern
double g_test_timer_last (void);
extern
void g_test_queue_free (gpointer gfree_pointer);
extern
void g_test_queue_destroy (GDestroyNotify destroy_func,
                                         gpointer destroy_data);
typedef enum {
  G_TEST_TRAP_SILENCE_STDOUT = 1 << 7,
  G_TEST_TRAP_SILENCE_STDERR = 1 << 8,
  G_TEST_TRAP_INHERIT_STDIN = 1 << 9
} GTestTrapFlags;
extern
gboolean g_test_trap_fork (guint64 usec_timeout,
                                         GTestTrapFlags test_trap_flags);
typedef enum {
  G_TEST_SUBPROCESS_INHERIT_STDIN = 1 << 0,
  G_TEST_SUBPROCESS_INHERIT_STDOUT = 1 << 1,
  G_TEST_SUBPROCESS_INHERIT_STDERR = 1 << 2
} GTestSubprocessFlags;
extern
void g_test_trap_subprocess (const char *test_path,
                                         guint64 usec_timeout,
                                         GTestSubprocessFlags test_flags);
extern
gboolean g_test_trap_has_passed (void);
extern
gboolean g_test_trap_reached_timeout (void);
extern
gint32 g_test_rand_int (void);
extern
gint32 g_test_rand_int_range (gint32 begin,
                                         gint32 end);
extern
double g_test_rand_double (void);
extern
double g_test_rand_double_range (double range_start,
                                         double range_end);
extern
GTestCase* g_test_create_case (const char *test_name,
                                         gsize data_size,
                                         gconstpointer test_data,
                                         GTestFixtureFunc data_setup,
                                         GTestFixtureFunc data_test,
                                         GTestFixtureFunc data_teardown);
extern
GTestSuite* g_test_create_suite (const char *suite_name);
extern
GTestSuite* g_test_get_root (void);
extern
void g_test_suite_add (GTestSuite *suite,
                                         GTestCase *test_case);
extern
void g_test_suite_add_suite (GTestSuite *suite,
                                         GTestSuite *nestedsuite);
extern
int g_test_run_suite (GTestSuite *suite);
extern
void g_test_trap_assertions (const char *domain,
                                         const char *file,
                                         int line,
                                         const char *func,
                                         guint64 assertion_flags,
                                         const char *pattern);
extern
void g_assertion_message (const char *domain,
                                         const char *file,
                                         int line,
                                         const char *func,
                                         const char *message);
extern
void g_assertion_message_expr (const char *domain,
                                         const char *file,
                                         int line,
                                         const char *func,
                                         const char *expr) __attribute__((__noreturn__));
extern
void g_assertion_message_cmpstr (const char *domain,
                                         const char *file,
                                         int line,
                                         const char *func,
                                         const char *expr,
                                         const char *arg1,
                                         const char *cmp,
                                         const char *arg2);
extern
void g_assertion_message_cmpnum (const char *domain,
                                         const char *file,
                                         int line,
                                         const char *func,
                                         const char *expr,
                                         long double arg1,
                                         const char *cmp,
                                         long double arg2,
                                         char numtype);
extern
void g_assertion_message_error (const char *domain,
                                         const char *file,
                                         int line,
                                         const char *func,
                                         const char *expr,
                                         const GError *error,
                                         GQuark error_domain,
                                         int error_code);
extern
void g_test_add_vtable (const char *testpath,
                                         gsize data_size,
                                         gconstpointer test_data,
                                         GTestFixtureFunc data_setup,
                                         GTestFixtureFunc data_test,
                                         GTestFixtureFunc data_teardown);
typedef struct {
  gboolean test_initialized;
  gboolean test_quick;
  gboolean test_perf;
  gboolean test_verbose;
  gboolean test_quiet;
  gboolean test_undefined;
} GTestConfig;
extern const GTestConfig * const g_test_config_vars;
typedef enum {
  G_TEST_LOG_NONE,
  G_TEST_LOG_ERROR,
  G_TEST_LOG_START_BINARY,
  G_TEST_LOG_LIST_CASE,
  G_TEST_LOG_SKIP_CASE,
  G_TEST_LOG_START_CASE,
  G_TEST_LOG_STOP_CASE,
  G_TEST_LOG_MIN_RESULT,
  G_TEST_LOG_MAX_RESULT,
  G_TEST_LOG_MESSAGE,
  G_TEST_LOG_START_SUITE,
  G_TEST_LOG_STOP_SUITE
} GTestLogType;
typedef struct {
  GTestLogType log_type;
  guint n_strings;
  gchar **strings;
  guint n_nums;
  long double *nums;
} GTestLogMsg;
typedef struct {
  GString *data;
  GSList *msgs;
} GTestLogBuffer;
extern
const char* g_test_log_type_name (GTestLogType log_type);
extern
GTestLogBuffer* g_test_log_buffer_new (void);
extern
void g_test_log_buffer_free (GTestLogBuffer *tbuffer);
extern
void g_test_log_buffer_push (GTestLogBuffer *tbuffer,
                                         guint n_bytes,
                                         const guint8 *bytes);
extern
GTestLogMsg* g_test_log_buffer_pop (GTestLogBuffer *tbuffer);
extern
void g_test_log_msg_free (GTestLogMsg *tmsg);
typedef gboolean (*GTestLogFatalFunc) (const gchar *log_domain,
                                                 GLogLevelFlags log_level,
                                                 const gchar *message,
                                                 gpointer user_data);
extern
void
g_test_log_set_fatal_handler (GTestLogFatalFunc log_func,
                                         gpointer user_data);
extern
void g_test_expect_message (const gchar *log_domain,
                                                  GLogLevelFlags log_level,
                                                  const gchar *pattern);
extern
void g_test_assert_expected_messages_internal (const char *domain,
                                                  const char *file,
                                                  int line,
                                                  const char *func);
typedef enum
{
  G_TEST_DIST,
  G_TEST_BUILT
} GTestFileType;
extern
gchar * g_test_build_filename (GTestFileType file_type,
                                                  const gchar *first_path,
                                                  ...) __attribute__((__sentinel__));
extern
const gchar *g_test_get_dir (GTestFileType file_type);
extern
const gchar *g_test_get_filename (GTestFileType file_type,
                                                  const gchar *first_path,
                                                  ...) __attribute__((__sentinel__));
typedef struct _GThreadPool GThreadPool;
struct _GThreadPool
{
  GFunc func;
  gpointer user_data;
  gboolean exclusive;
};
extern
GThreadPool * g_thread_pool_new (GFunc func,
                                                 gpointer user_data,
                                                 gint max_threads,
                                                 gboolean exclusive,
                                                 GError **error);
extern
void g_thread_pool_free (GThreadPool *pool,
                                                 gboolean immediate,
                                                 gboolean wait_);
extern
gboolean g_thread_pool_push (GThreadPool *pool,
                                                 gpointer data,
                                                 GError **error);
extern
guint g_thread_pool_unprocessed (GThreadPool *pool);
extern
void g_thread_pool_set_sort_function (GThreadPool *pool,
                                                 GCompareDataFunc func,
                                                 gpointer user_data);
extern
gboolean g_thread_pool_move_to_front (GThreadPool *pool,
                                                 gpointer data);
extern
gboolean g_thread_pool_set_max_threads (GThreadPool *pool,
                                                 gint max_threads,
                                                 GError **error);
extern
gint g_thread_pool_get_max_threads (GThreadPool *pool);
extern
guint g_thread_pool_get_num_threads (GThreadPool *pool);
extern
void g_thread_pool_set_max_unused_threads (gint max_threads);
extern
gint g_thread_pool_get_max_unused_threads (void);
extern
guint g_thread_pool_get_num_unused_threads (void);
extern
void g_thread_pool_stop_unused_threads (void);
extern
void g_thread_pool_set_max_idle_time (guint interval);
extern
guint g_thread_pool_get_max_idle_time (void);
typedef struct _GTimer GTimer;
extern
GTimer* g_timer_new (void);
extern
void g_timer_destroy (GTimer *timer);
extern
void g_timer_start (GTimer *timer);
extern
void g_timer_stop (GTimer *timer);
extern
void g_timer_reset (GTimer *timer);
extern
void g_timer_continue (GTimer *timer);
extern
gdouble g_timer_elapsed (GTimer *timer,
      gulong *microseconds);
extern
void g_usleep (gulong microseconds);
extern
void g_time_val_add (GTimeVal *time_,
                                  glong microseconds);
extern
gboolean g_time_val_from_iso8601 (const gchar *iso_date,
      GTimeVal *time_);
extern
gchar* g_time_val_to_iso8601 (GTimeVal *time_) __attribute__((__malloc__));
typedef struct _GTrashStack GTrashStack;
struct _GTrashStack
{
  GTrashStack *next;
};
extern
void g_trash_stack_push (GTrashStack **stack_p,
                                gpointer data_p);
extern
gpointer g_trash_stack_pop (GTrashStack **stack_p);
extern
gpointer g_trash_stack_peek (GTrashStack **stack_p);
extern
guint g_trash_stack_height (GTrashStack **stack_p);
typedef struct _GTree GTree;
typedef gboolean (*GTraverseFunc) (gpointer key,
                                   gpointer value,
                                   gpointer data);
extern
GTree* g_tree_new (GCompareFunc key_compare_func);
extern
GTree* g_tree_new_with_data (GCompareDataFunc key_compare_func,
                                 gpointer key_compare_data);
extern
GTree* g_tree_new_full (GCompareDataFunc key_compare_func,
                                 gpointer key_compare_data,
                                 GDestroyNotify key_destroy_func,
                                 GDestroyNotify value_destroy_func);
extern
GTree* g_tree_ref (GTree *tree);
extern
void g_tree_unref (GTree *tree);
extern
void g_tree_destroy (GTree *tree);
extern
void g_tree_insert (GTree *tree,
                                 gpointer key,
                                 gpointer value);
extern
void g_tree_replace (GTree *tree,
                                 gpointer key,
                                 gpointer value);
extern
gboolean g_tree_remove (GTree *tree,
                                 gconstpointer key);
extern
gboolean g_tree_steal (GTree *tree,
                                 gconstpointer key);
extern
gpointer g_tree_lookup (GTree *tree,
                                 gconstpointer key);
extern
gboolean g_tree_lookup_extended (GTree *tree,
                                 gconstpointer lookup_key,
                                 gpointer *orig_key,
                                 gpointer *value);
extern
void g_tree_foreach (GTree *tree,
                                 GTraverseFunc func,
                                 gpointer user_data);
extern
void g_tree_traverse (GTree *tree,
                                 GTraverseFunc traverse_func,
                                 GTraverseType traverse_type,
                                 gpointer user_data);
extern
gpointer g_tree_search (GTree *tree,
                                 GCompareFunc search_func,
                                 gconstpointer user_data);
extern
gint g_tree_height (GTree *tree);
extern
gint g_tree_nnodes (GTree *tree);
extern
char * g_uri_unescape_string (const char *escaped_string,
          const char *illegal_characters);
extern
char * g_uri_unescape_segment (const char *escaped_string,
          const char *escaped_string_end,
          const char *illegal_characters);
extern
char * g_uri_parse_scheme (const char *uri);
extern
char * g_uri_escape_string (const char *unescaped,
          const char *reserved_chars_allowed,
          gboolean allow_utf8);
typedef struct _GVariantType GVariantType;
extern
gboolean g_variant_type_string_is_valid (const gchar *type_string);
extern
gboolean g_variant_type_string_scan (const gchar *string,
                                                                         const gchar *limit,
                                                                         const gchar **endptr);
extern
void g_variant_type_free (GVariantType *type);
extern
GVariantType * g_variant_type_copy (const GVariantType *type);
extern
GVariantType * g_variant_type_new (const gchar *type_string);
extern
gsize g_variant_type_get_string_length (const GVariantType *type);
extern
const gchar * g_variant_type_peek_string (const GVariantType *type);
extern
gchar * g_variant_type_dup_string (const GVariantType *type);
extern
gboolean g_variant_type_is_definite (const GVariantType *type);
extern
gboolean g_variant_type_is_container (const GVariantType *type);
extern
gboolean g_variant_type_is_basic (const GVariantType *type);
extern
gboolean g_variant_type_is_maybe (const GVariantType *type);
extern
gboolean g_variant_type_is_array (const GVariantType *type);
extern
gboolean g_variant_type_is_tuple (const GVariantType *type);
extern
gboolean g_variant_type_is_dict_entry (const GVariantType *type);
extern
gboolean g_variant_type_is_variant (const GVariantType *type);
extern
guint g_variant_type_hash (gconstpointer type);
extern
gboolean g_variant_type_equal (gconstpointer type1,
                                                                         gconstpointer type2);
extern
gboolean g_variant_type_is_subtype_of (const GVariantType *type,
                                                                         const GVariantType *supertype);
extern
const GVariantType * g_variant_type_element (const GVariantType *type);
extern
const GVariantType * g_variant_type_first (const GVariantType *type);
extern
const GVariantType * g_variant_type_next (const GVariantType *type);
extern
gsize g_variant_type_n_items (const GVariantType *type);
extern
const GVariantType * g_variant_type_key (const GVariantType *type);
extern
const GVariantType * g_variant_type_value (const GVariantType *type);
extern
GVariantType * g_variant_type_new_array (const GVariantType *element);
extern
GVariantType * g_variant_type_new_maybe (const GVariantType *element);
extern
GVariantType * g_variant_type_new_tuple (const GVariantType * const *items,
                                                                         gint length);
extern
GVariantType * g_variant_type_new_dict_entry (const GVariantType *key,
                                                                         const GVariantType *value);
extern
const GVariantType * g_variant_type_checked_ (const gchar *);
typedef struct _GVariant GVariant;
typedef enum
{
  G_VARIANT_CLASS_BOOLEAN = 'b',
  G_VARIANT_CLASS_BYTE = 'y',
  G_VARIANT_CLASS_INT16 = 'n',
  G_VARIANT_CLASS_UINT16 = 'q',
  G_VARIANT_CLASS_INT32 = 'i',
  G_VARIANT_CLASS_UINT32 = 'u',
  G_VARIANT_CLASS_INT64 = 'x',
  G_VARIANT_CLASS_UINT64 = 't',
  G_VARIANT_CLASS_HANDLE = 'h',
  G_VARIANT_CLASS_DOUBLE = 'd',
  G_VARIANT_CLASS_STRING = 's',
  G_VARIANT_CLASS_OBJECT_PATH = 'o',
  G_VARIANT_CLASS_SIGNATURE = 'g',
  G_VARIANT_CLASS_VARIANT = 'v',
  G_VARIANT_CLASS_MAYBE = 'm',
  G_VARIANT_CLASS_ARRAY = 'a',
  G_VARIANT_CLASS_TUPLE = '(',
  G_VARIANT_CLASS_DICT_ENTRY = '{'
} GVariantClass;
extern
void g_variant_unref (GVariant *value);
extern
GVariant * g_variant_ref (GVariant *value);
extern
GVariant * g_variant_ref_sink (GVariant *value);
extern
gboolean g_variant_is_floating (GVariant *value);
extern
GVariant * g_variant_take_ref (GVariant *value);
extern
const GVariantType * g_variant_get_type (GVariant *value);
extern
const gchar * g_variant_get_type_string (GVariant *value);
extern
gboolean g_variant_is_of_type (GVariant *value,
                                                                         const GVariantType *type);
extern
gboolean g_variant_is_container (GVariant *value);
extern
GVariantClass g_variant_classify (GVariant *value);
extern
GVariant * g_variant_new_boolean (gboolean value);
extern
GVariant * g_variant_new_byte (guchar value);
extern
GVariant * g_variant_new_int16 (gint16 value);
extern
GVariant * g_variant_new_uint16 (guint16 value);
extern
GVariant * g_variant_new_int32 (gint32 value);
extern
GVariant * g_variant_new_uint32 (guint32 value);
extern
GVariant * g_variant_new_int64 (gint64 value);
extern
GVariant * g_variant_new_uint64 (guint64 value);
extern
GVariant * g_variant_new_handle (gint32 value);
extern
GVariant * g_variant_new_double (gdouble value);
extern
GVariant * g_variant_new_string (const gchar *string);
extern
GVariant * g_variant_new_take_string (gchar *string);
extern
GVariant * g_variant_new_printf (const gchar *format_string,
                                                                         ...) __attribute__((__format__ (__printf__, 1, 2)));
extern
GVariant * g_variant_new_object_path (const gchar *object_path);
extern
gboolean g_variant_is_object_path (const gchar *string);
extern
GVariant * g_variant_new_signature (const gchar *signature);
extern
gboolean g_variant_is_signature (const gchar *string);
extern
GVariant * g_variant_new_variant (GVariant *value);
extern
GVariant * g_variant_new_strv (const gchar * const *strv,
                                                                         gssize length);
extern
GVariant * g_variant_new_objv (const gchar * const *strv,
                                                                         gssize length);
extern
GVariant * g_variant_new_bytestring (const gchar *string);
extern
GVariant * g_variant_new_bytestring_array (const gchar * const *strv,
                                                                         gssize length);
extern
GVariant * g_variant_new_fixed_array (const GVariantType *element_type,
                                                                         gconstpointer elements,
                                                                         gsize n_elements,
                                                                         gsize element_size);
extern
gboolean g_variant_get_boolean (GVariant *value);
extern
guchar g_variant_get_byte (GVariant *value);
extern
gint16 g_variant_get_int16 (GVariant *value);
extern
guint16 g_variant_get_uint16 (GVariant *value);
extern
gint32 g_variant_get_int32 (GVariant *value);
extern
guint32 g_variant_get_uint32 (GVariant *value);
extern
gint64 g_variant_get_int64 (GVariant *value);
extern
guint64 g_variant_get_uint64 (GVariant *value);
extern
gint32 g_variant_get_handle (GVariant *value);
extern
gdouble g_variant_get_double (GVariant *value);
extern
GVariant * g_variant_get_variant (GVariant *value);
extern
const gchar * g_variant_get_string (GVariant *value,
                                                                         gsize *length);
extern
gchar * g_variant_dup_string (GVariant *value,
                                                                         gsize *length);
extern
const gchar ** g_variant_get_strv (GVariant *value,
                                                                         gsize *length);
extern
gchar ** g_variant_dup_strv (GVariant *value,
                                                                         gsize *length);
extern
const gchar ** g_variant_get_objv (GVariant *value,
                                                                         gsize *length);
extern
gchar ** g_variant_dup_objv (GVariant *value,
                                                                         gsize *length);
extern
const gchar * g_variant_get_bytestring (GVariant *value);
extern
gchar * g_variant_dup_bytestring (GVariant *value,
                                                                         gsize *length);
extern
const gchar ** g_variant_get_bytestring_array (GVariant *value,
                                                                         gsize *length);
extern
gchar ** g_variant_dup_bytestring_array (GVariant *value,
                                                                         gsize *length);
extern
GVariant * g_variant_new_maybe (const GVariantType *child_type,
                                                                         GVariant *child);
extern
GVariant * g_variant_new_array (const GVariantType *child_type,
                                                                         GVariant * const *children,
                                                                         gsize n_children);
extern
GVariant * g_variant_new_tuple (GVariant * const *children,
                                                                         gsize n_children);
extern
GVariant * g_variant_new_dict_entry (GVariant *key,
                                                                         GVariant *value);
extern
GVariant * g_variant_get_maybe (GVariant *value);
extern
gsize g_variant_n_children (GVariant *value);
extern
void g_variant_get_child (GVariant *value,
                                                                         gsize index_,
                                                                         const gchar *format_string,
                                                                         ...);
extern
GVariant * g_variant_get_child_value (GVariant *value,
                                                                         gsize index_);
extern
gboolean g_variant_lookup (GVariant *dictionary,
                                                                         const gchar *key,
                                                                         const gchar *format_string,
                                                                         ...);
extern
GVariant * g_variant_lookup_value (GVariant *dictionary,
                                                                         const gchar *key,
                                                                         const GVariantType *expected_type);
extern
gconstpointer g_variant_get_fixed_array (GVariant *value,
                                                                         gsize *n_elements,
                                                                         gsize element_size);
extern
gsize g_variant_get_size (GVariant *value);
extern
gconstpointer g_variant_get_data (GVariant *value);
extern
GBytes * g_variant_get_data_as_bytes (GVariant *value);
extern
void g_variant_store (GVariant *value,
                                                                         gpointer data);
extern
gchar * g_variant_print (GVariant *value,
                                                                         gboolean type_annotate);
extern
GString * g_variant_print_string (GVariant *value,
                                                                         GString *string,
                                                                         gboolean type_annotate);
extern
guint g_variant_hash (gconstpointer value);
extern
gboolean g_variant_equal (gconstpointer one,
                                                                         gconstpointer two);
extern
GVariant * g_variant_get_normal_form (GVariant *value);
extern
gboolean g_variant_is_normal_form (GVariant *value);
extern
GVariant * g_variant_byteswap (GVariant *value);
extern
GVariant * g_variant_new_from_bytes (const GVariantType *type,
                                                                         GBytes *bytes,
                                                                         gboolean trusted);
extern
GVariant * g_variant_new_from_data (const GVariantType *type,
                                                                         gconstpointer data,
                                                                         gsize size,
                                                                         gboolean trusted,
                                                                         GDestroyNotify notify,
                                                                         gpointer user_data);
typedef struct _GVariantIter GVariantIter;
struct _GVariantIter {
  gsize x[16];
};
extern
GVariantIter * g_variant_iter_new (GVariant *value);
extern
gsize g_variant_iter_init (GVariantIter *iter,
                                                                         GVariant *value);
extern
GVariantIter * g_variant_iter_copy (GVariantIter *iter);
extern
gsize g_variant_iter_n_children (GVariantIter *iter);
extern
void g_variant_iter_free (GVariantIter *iter);
extern
GVariant * g_variant_iter_next_value (GVariantIter *iter);
extern
gboolean g_variant_iter_next (GVariantIter *iter,
                                                                         const gchar *format_string,
                                                                         ...);
extern
gboolean g_variant_iter_loop (GVariantIter *iter,
                                                                         const gchar *format_string,
                                                                         ...);
typedef struct _GVariantBuilder GVariantBuilder;
struct _GVariantBuilder {
  gsize x[16];
};
typedef enum
{
  G_VARIANT_PARSE_ERROR_FAILED,
  G_VARIANT_PARSE_ERROR_BASIC_TYPE_EXPECTED,
  G_VARIANT_PARSE_ERROR_CANNOT_INFER_TYPE,
  G_VARIANT_PARSE_ERROR_DEFINITE_TYPE_EXPECTED,
  G_VARIANT_PARSE_ERROR_INPUT_NOT_AT_END,
  G_VARIANT_PARSE_ERROR_INVALID_CHARACTER,
  G_VARIANT_PARSE_ERROR_INVALID_FORMAT_STRING,
  G_VARIANT_PARSE_ERROR_INVALID_OBJECT_PATH,
  G_VARIANT_PARSE_ERROR_INVALID_SIGNATURE,
  G_VARIANT_PARSE_ERROR_INVALID_TYPE_STRING,
  G_VARIANT_PARSE_ERROR_NO_COMMON_TYPE,
  G_VARIANT_PARSE_ERROR_NUMBER_OUT_OF_RANGE,
  G_VARIANT_PARSE_ERROR_NUMBER_TOO_BIG,
  G_VARIANT_PARSE_ERROR_TYPE_ERROR,
  G_VARIANT_PARSE_ERROR_UNEXPECTED_TOKEN,
  G_VARIANT_PARSE_ERROR_UNKNOWN_KEYWORD,
  G_VARIANT_PARSE_ERROR_UNTERMINATED_STRING_CONSTANT,
  G_VARIANT_PARSE_ERROR_VALUE_EXPECTED
} GVariantParseError;
extern
GQuark g_variant_parser_get_error_quark (void);
extern
GQuark g_variant_parse_error_quark (void);
extern
GVariantBuilder * g_variant_builder_new (const GVariantType *type);
extern
void g_variant_builder_unref (GVariantBuilder *builder);
extern
GVariantBuilder * g_variant_builder_ref (GVariantBuilder *builder);
extern
void g_variant_builder_init (GVariantBuilder *builder,
                                                                         const GVariantType *type);
extern
GVariant * g_variant_builder_end (GVariantBuilder *builder);
extern
void g_variant_builder_clear (GVariantBuilder *builder);
extern
void g_variant_builder_open (GVariantBuilder *builder,
                                                                         const GVariantType *type);
extern
void g_variant_builder_close (GVariantBuilder *builder);
extern
void g_variant_builder_add_value (GVariantBuilder *builder,
                                                                         GVariant *value);
extern
void g_variant_builder_add (GVariantBuilder *builder,
                                                                         const gchar *format_string,
                                                                         ...);
extern
void g_variant_builder_add_parsed (GVariantBuilder *builder,
                                                                         const gchar *format,
                                                                         ...);
extern
GVariant * g_variant_new (const gchar *format_string,
                                                                         ...);
extern
void g_variant_get (GVariant *value,
                                                                         const gchar *format_string,
                                                                         ...);
extern
GVariant * g_variant_new_va (const gchar *format_string,
                                                                         const gchar **endptr,
                                                                         va_list *app);
extern
void g_variant_get_va (GVariant *value,
                                                                         const gchar *format_string,
                                                                         const gchar **endptr,
                                                                         va_list *app);
extern
gboolean g_variant_check_format_string (GVariant *value,
                                                                         const gchar *format_string,
                                                                         gboolean copy_only);
extern
GVariant * g_variant_parse (const GVariantType *type,
                                                                         const gchar *text,
                                                                         const gchar *limit,
                                                                         const gchar **endptr,
                                                                         GError **error);
extern
GVariant * g_variant_new_parsed (const gchar *format,
                                                                         ...);
extern
GVariant * g_variant_new_parsed_va (const gchar *format,
                                                                         va_list *app);
extern
gchar * g_variant_parse_error_print_context (GError *error,
                                                                         const gchar *source_str);
extern
gint g_variant_compare (gconstpointer one,
                                                                         gconstpointer two);
typedef struct _GVariantDict GVariantDict;
struct _GVariantDict {
  gsize x[16];
};
extern
GVariantDict * g_variant_dict_new (GVariant *from_asv);
extern
void g_variant_dict_init (GVariantDict *dict,
                                                                         GVariant *from_asv);
extern
gboolean g_variant_dict_lookup (GVariantDict *dict,
                                                                         const gchar *key,
                                                                         const gchar *format_string,
                                                                         ...);
extern
GVariant * g_variant_dict_lookup_value (GVariantDict *dict,
                                                                         const gchar *key,
                                                                         const GVariantType *expected_type);
extern
gboolean g_variant_dict_contains (GVariantDict *dict,
                                                                         const gchar *key);
extern
void g_variant_dict_insert (GVariantDict *dict,
                                                                         const gchar *key,
                                                                         const gchar *format_string,
                                                                         ...);
extern
void g_variant_dict_insert_value (GVariantDict *dict,
                                                                         const gchar *key,
                                                                         GVariant *value);
extern
gboolean g_variant_dict_remove (GVariantDict *dict,
                                                                         const gchar *key);
extern
void g_variant_dict_clear (GVariantDict *dict);
extern
GVariant * g_variant_dict_end (GVariantDict *dict);
extern
GVariantDict * g_variant_dict_ref (GVariantDict *dict);
extern
void g_variant_dict_unref (GVariantDict *dict);
extern const guint glib_major_version;
extern const guint glib_minor_version;
extern const guint glib_micro_version;
extern const guint glib_interface_age;
extern const guint glib_binary_age;
extern
const gchar * glib_check_version (guint required_major,
                                  guint required_minor,
                                  guint required_micro);
typedef struct _GAllocator GAllocator;
typedef struct _GMemChunk GMemChunk;
extern
GMemChunk * g_mem_chunk_new (const gchar *name,
                                         gint atom_size,
                                         gsize area_size,
                                         gint type);
extern
void g_mem_chunk_destroy (GMemChunk *mem_chunk);
extern
gpointer g_mem_chunk_alloc (GMemChunk *mem_chunk);
extern
gpointer g_mem_chunk_alloc0 (GMemChunk *mem_chunk);
extern
void g_mem_chunk_free (GMemChunk *mem_chunk,
                                         gpointer mem);
extern
void g_mem_chunk_clean (GMemChunk *mem_chunk);
extern
void g_mem_chunk_reset (GMemChunk *mem_chunk);
extern
void g_mem_chunk_print (GMemChunk *mem_chunk);
extern
void g_mem_chunk_info (void);
extern
void g_blow_chunks (void);
extern
GAllocator * g_allocator_new (const gchar *name,
                                         guint n_preallocs);
extern
void g_allocator_free (GAllocator *allocator);
extern
void g_list_push_allocator (GAllocator *allocator);
extern
void g_list_pop_allocator (void);
extern
void g_slist_push_allocator (GAllocator *allocator);
extern
void g_slist_pop_allocator (void);
extern
void g_node_push_allocator (GAllocator *allocator);
extern
void g_node_pop_allocator (void);
typedef struct _GCache GCache;
typedef gpointer (*GCacheNewFunc) (gpointer key);
typedef gpointer (*GCacheDupFunc) (gpointer value);
typedef void (*GCacheDestroyFunc) (gpointer value);
extern
GCache* g_cache_new (GCacheNewFunc value_new_func,
                                GCacheDestroyFunc value_destroy_func,
                                GCacheDupFunc key_dup_func,
                                GCacheDestroyFunc key_destroy_func,
                                GHashFunc hash_key_func,
                                GHashFunc hash_value_func,
                                GEqualFunc key_equal_func);
extern
void g_cache_destroy (GCache *cache);
extern
gpointer g_cache_insert (GCache *cache,
                                gpointer key);
extern
void g_cache_remove (GCache *cache,
                                gconstpointer value);
extern
void g_cache_key_foreach (GCache *cache,
                                GHFunc func,
                                gpointer user_data);
extern
void g_cache_value_foreach (GCache *cache,
                                GHFunc func,
                                gpointer user_data);
typedef struct _GCompletion GCompletion;
typedef gchar* (*GCompletionFunc) (gpointer);
typedef gint (*GCompletionStrncmpFunc) (const gchar *s1,
                                        const gchar *s2,
                                        gsize n);
struct _GCompletion
{
  GList* items;
  GCompletionFunc func;
  gchar* prefix;
  GList* cache;
  GCompletionStrncmpFunc strncmp_func;
};
extern
GCompletion* g_completion_new (GCompletionFunc func);
extern
void g_completion_add_items (GCompletion* cmp,
                                         GList* items);
extern
void g_completion_remove_items (GCompletion* cmp,
                                         GList* items);
extern
void g_completion_clear_items (GCompletion* cmp);
extern
GList* g_completion_complete (GCompletion* cmp,
                                         const gchar* prefix,
                                         gchar** new_prefix);
extern
GList* g_completion_complete_utf8 (GCompletion *cmp,
                                         const gchar* prefix,
                                         gchar** new_prefix);
extern
void g_completion_set_compare (GCompletion *cmp,
                                         GCompletionStrncmpFunc strncmp_func);
extern
void g_completion_free (GCompletion* cmp);
typedef struct _GRelation GRelation;
typedef struct _GTuples GTuples;
struct _GTuples
{
  guint len;
};
extern
GRelation* g_relation_new (gint fields);
extern
void g_relation_destroy (GRelation *relation);
extern
void g_relation_index (GRelation *relation,
                               gint field,
                               GHashFunc hash_func,
                               GEqualFunc key_equal_func);
extern
void g_relation_insert (GRelation *relation,
                               ...);
extern
gint g_relation_delete (GRelation *relation,
                               gconstpointer key,
                               gint field);
extern
GTuples* g_relation_select (GRelation *relation,
                               gconstpointer key,
                               gint field);
extern
gint g_relation_count (GRelation *relation,
                               gconstpointer key,
                               gint field);
extern
gboolean g_relation_exists (GRelation *relation,
                               ...);
extern
void g_relation_print (GRelation *relation);
extern
void g_tuples_destroy (GTuples *tuples);
extern
gpointer g_tuples_index (GTuples *tuples,
                               gint index_,
                               gint field);
typedef enum
{
  G_THREAD_PRIORITY_LOW,
  G_THREAD_PRIORITY_NORMAL,
  G_THREAD_PRIORITY_HIGH,
  G_THREAD_PRIORITY_URGENT
} GThreadPriority;
struct _GThread
{
  GThreadFunc func;
  gpointer data;
  gboolean joinable;
  GThreadPriority priority;
};
typedef struct _GThreadFunctions GThreadFunctions;
struct _GThreadFunctions
{
  GMutex* (*mutex_new) (void);
  void (*mutex_lock) (GMutex *mutex);
  gboolean (*mutex_trylock) (GMutex *mutex);
  void (*mutex_unlock) (GMutex *mutex);
  void (*mutex_free) (GMutex *mutex);
  GCond* (*cond_new) (void);
  void (*cond_signal) (GCond *cond);
  void (*cond_broadcast) (GCond *cond);
  void (*cond_wait) (GCond *cond,
                                   GMutex *mutex);
  gboolean (*cond_timed_wait) (GCond *cond,
                                   GMutex *mutex,
                                   GTimeVal *end_time);
  void (*cond_free) (GCond *cond);
  GPrivate* (*private_new) (GDestroyNotify destructor);
  gpointer (*private_get) (GPrivate *private_key);
  void (*private_set) (GPrivate *private_key,
                                   gpointer data);
  void (*thread_create) (GThreadFunc func,
                                   gpointer data,
                                   gulong stack_size,
                                   gboolean joinable,
                                   gboolean bound,
                                   GThreadPriority priority,
                                   gpointer thread,
                                   GError **error);
  void (*thread_yield) (void);
  void (*thread_join) (gpointer thread);
  void (*thread_exit) (void);
  void (*thread_set_priority)(gpointer thread,
                                   GThreadPriority priority);
  void (*thread_self) (gpointer thread);
  gboolean (*thread_equal) (gpointer thread1,
                                   gpointer thread2);
};
extern GThreadFunctions g_thread_functions_for_glib_use;
extern gboolean g_thread_use_default_impl;
extern guint64 (*g_thread_gettime) (void);
extern
GThread *g_thread_create (GThreadFunc func,
                                gpointer data,
                                gboolean joinable,
                                GError **error);
extern
GThread *g_thread_create_full (GThreadFunc func,
                                gpointer data,
                                gulong stack_size,
                                gboolean joinable,
                                gboolean bound,
                                GThreadPriority priority,
                                GError **error);
extern
void g_thread_set_priority (GThread *thread,
                                GThreadPriority priority);
extern
void g_thread_foreach (GFunc thread_func,
                                gpointer user_data);
typedef struct
{
  GMutex *mutex;
  pthread_mutex_t unused;
} GStaticMutex;
extern
void g_static_mutex_init (GStaticMutex *mutex);
extern
void g_static_mutex_free (GStaticMutex *mutex);
extern
GMutex *g_static_mutex_get_mutex_impl (GStaticMutex *mutex);
typedef struct _GStaticRecMutex GStaticRecMutex;
struct _GStaticRecMutex
{
  GStaticMutex mutex;
  guint depth;
  union {
    pthread_t owner;
    gdouble dummy;
  } unused;
};
extern
void g_static_rec_mutex_init (GStaticRecMutex *mutex);
extern
void g_static_rec_mutex_lock (GStaticRecMutex *mutex);
extern
gboolean g_static_rec_mutex_trylock (GStaticRecMutex *mutex);
extern
void g_static_rec_mutex_unlock (GStaticRecMutex *mutex);
extern
void g_static_rec_mutex_lock_full (GStaticRecMutex *mutex,
                                         guint depth);
extern
guint g_static_rec_mutex_unlock_full (GStaticRecMutex *mutex);
extern
void g_static_rec_mutex_free (GStaticRecMutex *mutex);
typedef struct _GStaticRWLock GStaticRWLock;
struct _GStaticRWLock
{
  GStaticMutex mutex;
  GCond *read_cond;
  GCond *write_cond;
  guint read_counter;
  gboolean have_writer;
  guint want_to_read;
  guint want_to_write;
};
extern
void g_static_rw_lock_init (GStaticRWLock *lock);
extern
void g_static_rw_lock_reader_lock (GStaticRWLock *lock);
extern
gboolean g_static_rw_lock_reader_trylock (GStaticRWLock *lock);
extern
void g_static_rw_lock_reader_unlock (GStaticRWLock *lock);
extern
void g_static_rw_lock_writer_lock (GStaticRWLock *lock);
extern
gboolean g_static_rw_lock_writer_trylock (GStaticRWLock *lock);
extern
void g_static_rw_lock_writer_unlock (GStaticRWLock *lock);
extern
void g_static_rw_lock_free (GStaticRWLock *lock);
extern
GPrivate * g_private_new (GDestroyNotify notify);
typedef struct _GStaticPrivate GStaticPrivate;
struct _GStaticPrivate
{
  guint index;
};
extern
void g_static_private_init (GStaticPrivate *private_key);
extern
gpointer g_static_private_get (GStaticPrivate *private_key);
extern
void g_static_private_set (GStaticPrivate *private_key,
                                          gpointer data,
                                          GDestroyNotify notify);
extern
void g_static_private_free (GStaticPrivate *private_key);
extern
gboolean g_once_init_enter_impl (volatile gsize *location);
extern
void g_thread_init (gpointer vtable);
extern
void g_thread_init_with_errorcheck_mutexes (gpointer vtable);
extern
gboolean g_thread_get_initialized (void);
extern gboolean g_threads_got_initialized;
extern
GMutex * g_mutex_new (void);
extern
void g_mutex_free (GMutex *mutex);
extern
GCond * g_cond_new (void);
extern
void g_cond_free (GCond *cond);
extern
gboolean g_cond_timed_wait (GCond *cond,
                                         GMutex *mutex,
                                         GTimeVal *timeval);
static inline void
g_autoptr_cleanup_generic_gfree (void *p)
{
  void **pp = (void**)p;
  g_free (*pp);
}
static inline void
g_autoptr_cleanup_gstring_free (GString *string)
{
  if (string)
    g_string_free (string, (!(0)));
}
typedef GAsyncQueue *GAsyncQueue_autoptr;
 static inline void glib_autoptr_cleanup_GAsyncQueue (GAsyncQueue **_ptr) { if (*_ptr) (g_async_queue_unref) (*_ptr); }
typedef GBookmarkFile *GBookmarkFile_autoptr;
 static inline void glib_autoptr_cleanup_GBookmarkFile (GBookmarkFile **_ptr) { if (*_ptr) (g_bookmark_file_free) (*_ptr); }
typedef GBytes *GBytes_autoptr;
 static inline void glib_autoptr_cleanup_GBytes (GBytes **_ptr) { if (*_ptr) (g_bytes_unref) (*_ptr); }
typedef GChecksum *GChecksum_autoptr;
 static inline void glib_autoptr_cleanup_GChecksum (GChecksum **_ptr) { if (*_ptr) (g_checksum_free) (*_ptr); }
typedef GDateTime *GDateTime_autoptr;
 static inline void glib_autoptr_cleanup_GDateTime (GDateTime **_ptr) { if (*_ptr) (g_date_time_unref) (*_ptr); }
typedef GDir *GDir_autoptr;
 static inline void glib_autoptr_cleanup_GDir (GDir **_ptr) { if (*_ptr) (g_dir_close) (*_ptr); }
typedef GError *GError_autoptr;
 static inline void glib_autoptr_cleanup_GError (GError **_ptr) { if (*_ptr) (g_error_free) (*_ptr); }
typedef GHashTable *GHashTable_autoptr;
 static inline void glib_autoptr_cleanup_GHashTable (GHashTable **_ptr) { if (*_ptr) (g_hash_table_unref) (*_ptr); }
typedef GHmac *GHmac_autoptr;
 static inline void glib_autoptr_cleanup_GHmac (GHmac **_ptr) { if (*_ptr) (g_hmac_unref) (*_ptr); }
typedef GIOChannel *GIOChannel_autoptr;
 static inline void glib_autoptr_cleanup_GIOChannel (GIOChannel **_ptr) { if (*_ptr) (g_io_channel_unref) (*_ptr); }
typedef GKeyFile *GKeyFile_autoptr;
 static inline void glib_autoptr_cleanup_GKeyFile (GKeyFile **_ptr) { if (*_ptr) (g_key_file_unref) (*_ptr); }
typedef GList *GList_autoptr;
 static inline void glib_autoptr_cleanup_GList (GList **_ptr) { if (*_ptr) (g_list_free) (*_ptr); }
typedef GArray *GArray_autoptr;
 static inline void glib_autoptr_cleanup_GArray (GArray **_ptr) { if (*_ptr) (g_array_unref) (*_ptr); }
typedef GPtrArray *GPtrArray_autoptr;
 static inline void glib_autoptr_cleanup_GPtrArray (GPtrArray **_ptr) { if (*_ptr) (g_ptr_array_unref) (*_ptr); }
typedef GByteArray *GByteArray_autoptr;
 static inline void glib_autoptr_cleanup_GByteArray (GByteArray **_ptr) { if (*_ptr) (g_byte_array_unref) (*_ptr); }
typedef GMainContext *GMainContext_autoptr;
 static inline void glib_autoptr_cleanup_GMainContext (GMainContext **_ptr) { if (*_ptr) (g_main_context_unref) (*_ptr); }
typedef GMainLoop *GMainLoop_autoptr;
 static inline void glib_autoptr_cleanup_GMainLoop (GMainLoop **_ptr) { if (*_ptr) (g_main_loop_unref) (*_ptr); }
typedef GSource *GSource_autoptr;
 static inline void glib_autoptr_cleanup_GSource (GSource **_ptr) { if (*_ptr) (g_source_unref) (*_ptr); }
typedef GMappedFile *GMappedFile_autoptr;
 static inline void glib_autoptr_cleanup_GMappedFile (GMappedFile **_ptr) { if (*_ptr) (g_mapped_file_unref) (*_ptr); }
typedef GMarkupParseContext *GMarkupParseContext_autoptr;
 static inline void glib_autoptr_cleanup_GMarkupParseContext (GMarkupParseContext **_ptr) { if (*_ptr) (g_markup_parse_context_unref) (*_ptr); }
typedef GNode *GNode_autoptr;
 static inline void glib_autoptr_cleanup_GNode (GNode **_ptr) { if (*_ptr) (g_node_destroy) (*_ptr); }
typedef GOptionContext *GOptionContext_autoptr;
 static inline void glib_autoptr_cleanup_GOptionContext (GOptionContext **_ptr) { if (*_ptr) (g_option_context_free) (*_ptr); }
typedef GOptionGroup *GOptionGroup_autoptr;
 static inline void glib_autoptr_cleanup_GOptionGroup (GOptionGroup **_ptr) { if (*_ptr) (g_option_group_unref) (*_ptr); }
typedef GPatternSpec *GPatternSpec_autoptr;
 static inline void glib_autoptr_cleanup_GPatternSpec (GPatternSpec **_ptr) { if (*_ptr) (g_pattern_spec_free) (*_ptr); }
typedef GQueue *GQueue_autoptr;
 static inline void glib_autoptr_cleanup_GQueue (GQueue **_ptr) { if (*_ptr) (g_queue_free) (*_ptr); }
 static inline void glib_auto_cleanup_GQueue (GQueue *_ptr) { (g_queue_clear) (_ptr); }
typedef GRand *GRand_autoptr;
 static inline void glib_autoptr_cleanup_GRand (GRand **_ptr) { if (*_ptr) (g_rand_free) (*_ptr); }
typedef GRegex *GRegex_autoptr;
 static inline void glib_autoptr_cleanup_GRegex (GRegex **_ptr) { if (*_ptr) (g_regex_unref) (*_ptr); }
typedef GMatchInfo *GMatchInfo_autoptr;
 static inline void glib_autoptr_cleanup_GMatchInfo (GMatchInfo **_ptr) { if (*_ptr) (g_match_info_unref) (*_ptr); }
typedef GScanner *GScanner_autoptr;
 static inline void glib_autoptr_cleanup_GScanner (GScanner **_ptr) { if (*_ptr) (g_scanner_destroy) (*_ptr); }
typedef GSequence *GSequence_autoptr;
 static inline void glib_autoptr_cleanup_GSequence (GSequence **_ptr) { if (*_ptr) (g_sequence_free) (*_ptr); }
typedef GSList *GSList_autoptr;
 static inline void glib_autoptr_cleanup_GSList (GSList **_ptr) { if (*_ptr) (g_slist_free) (*_ptr); }
typedef GString *GString_autoptr;
 static inline void glib_autoptr_cleanup_GString (GString **_ptr) { if (*_ptr) (g_autoptr_cleanup_gstring_free) (*_ptr); }
typedef GStringChunk *GStringChunk_autoptr;
 static inline void glib_autoptr_cleanup_GStringChunk (GStringChunk **_ptr) { if (*_ptr) (g_string_chunk_free) (*_ptr); }
typedef GThread *GThread_autoptr;
 static inline void glib_autoptr_cleanup_GThread (GThread **_ptr) { if (*_ptr) (g_thread_unref) (*_ptr); }
 static inline void glib_auto_cleanup_GMutex (GMutex *_ptr) { (g_mutex_clear) (_ptr); }
typedef GMutexLocker *GMutexLocker_autoptr;
 static inline void glib_autoptr_cleanup_GMutexLocker (GMutexLocker **_ptr) { if (*_ptr) (g_mutex_locker_free) (*_ptr); }
 static inline void glib_auto_cleanup_GCond (GCond *_ptr) { (g_cond_clear) (_ptr); }
typedef GTimer *GTimer_autoptr;
 static inline void glib_autoptr_cleanup_GTimer (GTimer **_ptr) { if (*_ptr) (g_timer_destroy) (*_ptr); }
typedef GTimeZone *GTimeZone_autoptr;
 static inline void glib_autoptr_cleanup_GTimeZone (GTimeZone **_ptr) { if (*_ptr) (g_time_zone_unref) (*_ptr); }
typedef GTree *GTree_autoptr;
 static inline void glib_autoptr_cleanup_GTree (GTree **_ptr) { if (*_ptr) (g_tree_unref) (*_ptr); }
typedef GVariant *GVariant_autoptr;
 static inline void glib_autoptr_cleanup_GVariant (GVariant **_ptr) { if (*_ptr) (g_variant_unref) (*_ptr); }
typedef GVariantBuilder *GVariantBuilder_autoptr;
 static inline void glib_autoptr_cleanup_GVariantBuilder (GVariantBuilder **_ptr) { if (*_ptr) (g_variant_builder_unref) (*_ptr); }
 static inline void glib_auto_cleanup_GVariantBuilder (GVariantBuilder *_ptr) { (g_variant_builder_clear) (_ptr); }
typedef GVariantIter *GVariantIter_autoptr;
 static inline void glib_autoptr_cleanup_GVariantIter (GVariantIter **_ptr) { if (*_ptr) (g_variant_iter_free) (*_ptr); }
typedef GVariantDict *GVariantDict_autoptr;
 static inline void glib_autoptr_cleanup_GVariantDict (GVariantDict **_ptr) { if (*_ptr) (g_variant_dict_unref) (*_ptr); }
 static inline void glib_auto_cleanup_GVariantDict (GVariantDict *_ptr) { (g_variant_dict_clear) (_ptr); }
typedef GVariantType *GVariantType_autoptr;
 static inline void glib_autoptr_cleanup_GVariantType (GVariantType **_ptr) { if (*_ptr) (g_variant_type_free) (*_ptr); }
 static inline void glib_auto_cleanup_GStrv (GStrv *_ptr) { if (*_ptr != ((void *)0)) (g_strfreev) (*_ptr); }
typedef gsize GType;
typedef struct _GValue GValue;
typedef union _GTypeCValue GTypeCValue;
typedef struct _GTypePlugin GTypePlugin;
typedef struct _GTypeClass GTypeClass;
typedef struct _GTypeInterface GTypeInterface;
typedef struct _GTypeInstance GTypeInstance;
typedef struct _GTypeInfo GTypeInfo;
typedef struct _GTypeFundamentalInfo GTypeFundamentalInfo;
typedef struct _GInterfaceInfo GInterfaceInfo;
typedef struct _GTypeValueTable GTypeValueTable;
typedef struct _GTypeQuery GTypeQuery;
struct _GTypeClass
{
  GType g_type;
};
struct _GTypeInstance
{
  GTypeClass *g_class;
};
struct _GTypeInterface
{
  GType g_type;
  GType g_instance_type;
};
struct _GTypeQuery
{
  GType type;
  const gchar *type_name;
  guint class_size;
  guint instance_size;
};
typedef enum
{
  G_TYPE_DEBUG_NONE = 0,
  G_TYPE_DEBUG_OBJECTS = 1 << 0,
  G_TYPE_DEBUG_SIGNALS = 1 << 1,
  G_TYPE_DEBUG_INSTANCE_COUNT = 1 << 2,
  G_TYPE_DEBUG_MASK = 0x07
} GTypeDebugFlags;
extern
void g_type_init (void);
extern
void g_type_init_with_debug_flags (GTypeDebugFlags debug_flags);
extern
const gchar * g_type_name (GType type);
extern
GQuark g_type_qname (GType type);
extern
GType g_type_from_name (const gchar *name);
extern
GType g_type_parent (GType type);
extern
guint g_type_depth (GType type);
extern
GType g_type_next_base (GType leaf_type,
            GType root_type);
extern
gboolean g_type_is_a (GType type,
            GType is_a_type);
extern
gpointer g_type_class_ref (GType type);
extern
gpointer g_type_class_peek (GType type);
extern
gpointer g_type_class_peek_static (GType type);
extern
void g_type_class_unref (gpointer g_class);
extern
gpointer g_type_class_peek_parent (gpointer g_class);
extern
gpointer g_type_interface_peek (gpointer instance_class,
            GType iface_type);
extern
gpointer g_type_interface_peek_parent (gpointer g_iface);
extern
gpointer g_type_default_interface_ref (GType g_type);
extern
gpointer g_type_default_interface_peek (GType g_type);
extern
void g_type_default_interface_unref (gpointer g_iface);
extern
GType* g_type_children (GType type,
            guint *n_children);
extern
GType* g_type_interfaces (GType type,
            guint *n_interfaces);
extern
void g_type_set_qdata (GType type,
            GQuark quark,
            gpointer data);
extern
gpointer g_type_get_qdata (GType type,
            GQuark quark);
extern
void g_type_query (GType type,
            GTypeQuery *query);
extern
int g_type_get_instance_count (GType type);
typedef void (*GBaseInitFunc) (gpointer g_class);
typedef void (*GBaseFinalizeFunc) (gpointer g_class);
typedef void (*GClassInitFunc) (gpointer g_class,
           gpointer class_data);
typedef void (*GClassFinalizeFunc) (gpointer g_class,
           gpointer class_data);
typedef void (*GInstanceInitFunc) (GTypeInstance *instance,
           gpointer g_class);
typedef void (*GInterfaceInitFunc) (gpointer g_iface,
           gpointer iface_data);
typedef void (*GInterfaceFinalizeFunc) (gpointer g_iface,
           gpointer iface_data);
typedef gboolean (*GTypeClassCacheFunc) (gpointer cache_data,
           GTypeClass *g_class);
typedef void (*GTypeInterfaceCheckFunc) (gpointer check_data,
           gpointer g_iface);
typedef enum
{
  G_TYPE_FLAG_CLASSED = (1 << 0),
  G_TYPE_FLAG_INSTANTIATABLE = (1 << 1),
  G_TYPE_FLAG_DERIVABLE = (1 << 2),
  G_TYPE_FLAG_DEEP_DERIVABLE = (1 << 3)
} GTypeFundamentalFlags;
typedef enum
{
  G_TYPE_FLAG_ABSTRACT = (1 << 4),
  G_TYPE_FLAG_VALUE_ABSTRACT = (1 << 5)
} GTypeFlags;
struct _GTypeInfo
{
  guint16 class_size;
  GBaseInitFunc base_init;
  GBaseFinalizeFunc base_finalize;
  GClassInitFunc class_init;
  GClassFinalizeFunc class_finalize;
  gconstpointer class_data;
  guint16 instance_size;
  guint16 n_preallocs;
  GInstanceInitFunc instance_init;
  const GTypeValueTable *value_table;
};
struct _GTypeFundamentalInfo
{
  GTypeFundamentalFlags type_flags;
};
struct _GInterfaceInfo
{
  GInterfaceInitFunc interface_init;
  GInterfaceFinalizeFunc interface_finalize;
  gpointer interface_data;
};
struct _GTypeValueTable
{
  void (*value_init) (GValue *value);
  void (*value_free) (GValue *value);
  void (*value_copy) (const GValue *src_value,
      GValue *dest_value);
  gpointer (*value_peek_pointer) (const GValue *value);
  const gchar *collect_format;
  gchar* (*collect_value) (GValue *value,
      guint n_collect_values,
      GTypeCValue *collect_values,
      guint collect_flags);
  const gchar *lcopy_format;
  gchar* (*lcopy_value) (const GValue *value,
      guint n_collect_values,
      GTypeCValue *collect_values,
      guint collect_flags);
};
extern
GType g_type_register_static (GType parent_type,
      const gchar *type_name,
      const GTypeInfo *info,
      GTypeFlags flags);
extern
GType g_type_register_static_simple (GType parent_type,
      const gchar *type_name,
      guint class_size,
      GClassInitFunc class_init,
      guint instance_size,
      GInstanceInitFunc instance_init,
      GTypeFlags flags);
extern
GType g_type_register_dynamic (GType parent_type,
      const gchar *type_name,
      GTypePlugin *plugin,
      GTypeFlags flags);
extern
GType g_type_register_fundamental (GType type_id,
      const gchar *type_name,
      const GTypeInfo *info,
      const GTypeFundamentalInfo *finfo,
      GTypeFlags flags);
extern
void g_type_add_interface_static (GType instance_type,
      GType interface_type,
      const GInterfaceInfo *info);
extern
void g_type_add_interface_dynamic (GType instance_type,
      GType interface_type,
      GTypePlugin *plugin);
extern
void g_type_interface_add_prerequisite (GType interface_type,
      GType prerequisite_type);
extern
GType*g_type_interface_prerequisites (GType interface_type,
      guint *n_prerequisites);
extern
void g_type_class_add_private (gpointer g_class,
                                         gsize private_size);
extern
gint g_type_add_instance_private (GType class_type,
                                         gsize private_size);
extern
gpointer g_type_instance_get_private (GTypeInstance *instance,
                                         GType private_type);
extern
void g_type_class_adjust_private_offset (gpointer g_class,
                                             gint *private_size_or_offset);
extern
void g_type_add_class_private (GType class_type,
      gsize private_size);
extern
gpointer g_type_class_get_private (GTypeClass *klass,
      GType private_type);
extern
gint g_type_class_get_instance_private_offset (gpointer g_class);
extern
void g_type_ensure (GType type);
extern
guint g_type_get_type_registration_serial (void);
extern
GTypePlugin* g_type_get_plugin (GType type);
extern
GTypePlugin* g_type_interface_get_plugin (GType instance_type,
       GType interface_type);
extern
GType g_type_fundamental_next (void);
extern
GType g_type_fundamental (GType type_id);
extern
GTypeInstance* g_type_create_instance (GType type);
extern
void g_type_free_instance (GTypeInstance *instance);
extern
void g_type_add_class_cache_func (gpointer cache_data,
       GTypeClassCacheFunc cache_func);
extern
void g_type_remove_class_cache_func (gpointer cache_data,
       GTypeClassCacheFunc cache_func);
extern
void g_type_class_unref_uncached (gpointer g_class);
extern
void g_type_add_interface_check (gpointer check_data,
       GTypeInterfaceCheckFunc check_func);
extern
void g_type_remove_interface_check (gpointer check_data,
       GTypeInterfaceCheckFunc check_func);
extern
GTypeValueTable* g_type_value_table_peek (GType type);
extern
gboolean g_type_check_instance (GTypeInstance *instance) __attribute__((__pure__));
extern
GTypeInstance* g_type_check_instance_cast (GTypeInstance *instance,
       GType iface_type);
extern
gboolean g_type_check_instance_is_a (GTypeInstance *instance,
       GType iface_type) __attribute__((__pure__));
extern
gboolean g_type_check_instance_is_fundamentally_a (GTypeInstance *instance,
                                                           GType fundamental_type) __attribute__((__pure__));
extern
GTypeClass* g_type_check_class_cast (GTypeClass *g_class,
       GType is_a_type);
extern
gboolean g_type_check_class_is_a (GTypeClass *g_class,
       GType is_a_type) __attribute__((__pure__));
extern
gboolean g_type_check_is_value_type (GType type) __attribute__((__const__));
extern
gboolean g_type_check_value (GValue *value) __attribute__((__pure__));
extern
gboolean g_type_check_value_holds (GValue *value,
       GType type) __attribute__((__pure__));
extern
gboolean g_type_test_flags (GType type,
       guint flags) __attribute__((__const__));
extern
const gchar * g_type_name_from_instance (GTypeInstance *instance);
extern
const gchar * g_type_name_from_class (GTypeClass *g_class);
typedef void (*GValueTransform) (const GValue *src_value,
     GValue *dest_value);
struct _GValue
{
  GType g_type;
  union {
    gint v_int;
    guint v_uint;
    glong v_long;
    gulong v_ulong;
    gint64 v_int64;
    guint64 v_uint64;
    gfloat v_float;
    gdouble v_double;
    gpointer v_pointer;
  } data[2];
};
extern
GValue* g_value_init (GValue *value,
      GType g_type);
extern
void g_value_copy (const GValue *src_value,
      GValue *dest_value);
extern
GValue* g_value_reset (GValue *value);
extern
void g_value_unset (GValue *value);
extern
void g_value_set_instance (GValue *value,
      gpointer instance);
extern
void g_value_init_from_instance (GValue *value,
                                              gpointer instance);
extern
gboolean g_value_fits_pointer (const GValue *value);
extern
gpointer g_value_peek_pointer (const GValue *value);
extern
gboolean g_value_type_compatible (GType src_type,
      GType dest_type);
extern
gboolean g_value_type_transformable (GType src_type,
      GType dest_type);
extern
gboolean g_value_transform (const GValue *src_value,
      GValue *dest_value);
extern
void g_value_register_transform_func (GType src_type,
      GType dest_type,
      GValueTransform transform_func);
typedef enum
{
  G_PARAM_READABLE = 1 << 0,
  G_PARAM_WRITABLE = 1 << 1,
  G_PARAM_READWRITE = (G_PARAM_READABLE | G_PARAM_WRITABLE),
  G_PARAM_CONSTRUCT = 1 << 2,
  G_PARAM_CONSTRUCT_ONLY = 1 << 3,
  G_PARAM_LAX_VALIDATION = 1 << 4,
  G_PARAM_STATIC_NAME = 1 << 5,
  G_PARAM_PRIVATE = G_PARAM_STATIC_NAME,
  G_PARAM_STATIC_NICK = 1 << 6,
  G_PARAM_STATIC_BLURB = 1 << 7,
  G_PARAM_EXPLICIT_NOTIFY = 1 << 30,
  G_PARAM_DEPRECATED = 1 << 31
} GParamFlags;
typedef struct _GParamSpec GParamSpec;
typedef struct _GParamSpecClass GParamSpecClass;
typedef struct _GParameter GParameter;
typedef struct _GParamSpecPool GParamSpecPool;
struct _GParamSpec
{
  GTypeInstance g_type_instance;
  const gchar *name;
  GParamFlags flags;
  GType value_type;
  GType owner_type;
  gchar *_nick;
  gchar *_blurb;
  GData *qdata;
  guint ref_count;
  guint param_id;
};
struct _GParamSpecClass
{
  GTypeClass g_type_class;
  GType value_type;
  void (*finalize) (GParamSpec *pspec);
  void (*value_set_default) (GParamSpec *pspec,
      GValue *value);
  gboolean (*value_validate) (GParamSpec *pspec,
      GValue *value);
  gint (*values_cmp) (GParamSpec *pspec,
      const GValue *value1,
      const GValue *value2);
  gpointer dummy[4];
};
struct _GParameter
{
  const gchar *name;
  GValue value;
};
extern
GParamSpec* g_param_spec_ref (GParamSpec *pspec);
extern
void g_param_spec_unref (GParamSpec *pspec);
extern
void g_param_spec_sink (GParamSpec *pspec);
extern
GParamSpec* g_param_spec_ref_sink (GParamSpec *pspec);
extern
gpointer g_param_spec_get_qdata (GParamSpec *pspec,
       GQuark quark);
extern
void g_param_spec_set_qdata (GParamSpec *pspec,
       GQuark quark,
       gpointer data);
extern
void g_param_spec_set_qdata_full (GParamSpec *pspec,
       GQuark quark,
       gpointer data,
       GDestroyNotify destroy);
extern
gpointer g_param_spec_steal_qdata (GParamSpec *pspec,
       GQuark quark);
extern
GParamSpec* g_param_spec_get_redirect_target (GParamSpec *pspec);
extern
void g_param_value_set_default (GParamSpec *pspec,
       GValue *value);
extern
gboolean g_param_value_defaults (GParamSpec *pspec,
       GValue *value);
extern
gboolean g_param_value_validate (GParamSpec *pspec,
       GValue *value);
extern
gboolean g_param_value_convert (GParamSpec *pspec,
       const GValue *src_value,
       GValue *dest_value,
       gboolean strict_validation);
extern
gint g_param_values_cmp (GParamSpec *pspec,
       const GValue *value1,
       const GValue *value2);
extern
const gchar * g_param_spec_get_name (GParamSpec *pspec);
extern
const gchar * g_param_spec_get_nick (GParamSpec *pspec);
extern
const gchar * g_param_spec_get_blurb (GParamSpec *pspec);
extern
void g_value_set_param (GValue *value,
       GParamSpec *param);
extern
GParamSpec* g_value_get_param (const GValue *value);
extern
GParamSpec* g_value_dup_param (const GValue *value);
extern
void g_value_take_param (GValue *value,
              GParamSpec *param);
extern
void g_value_set_param_take_ownership (GValue *value,
                                                 GParamSpec *param);
extern
const GValue * g_param_spec_get_default_value (GParamSpec *pspec);
extern
GQuark g_param_spec_get_name_quark (GParamSpec *pspec);
typedef struct _GParamSpecTypeInfo GParamSpecTypeInfo;
struct _GParamSpecTypeInfo
{
  guint16 instance_size;
  guint16 n_preallocs;
  void (*instance_init) (GParamSpec *pspec);
  GType value_type;
  void (*finalize) (GParamSpec *pspec);
  void (*value_set_default) (GParamSpec *pspec,
      GValue *value);
  gboolean (*value_validate) (GParamSpec *pspec,
      GValue *value);
  gint (*values_cmp) (GParamSpec *pspec,
      const GValue *value1,
      const GValue *value2);
};
extern
GType g_param_type_register_static (const gchar *name,
      const GParamSpecTypeInfo *pspec_info);
GType _g_param_type_register_static_constant (const gchar *name,
            const GParamSpecTypeInfo *pspec_info,
            GType opt_type);
extern
gpointer g_param_spec_internal (GType param_type,
       const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       GParamFlags flags);
extern
GParamSpecPool* g_param_spec_pool_new (gboolean type_prefixing);
extern
void g_param_spec_pool_insert (GParamSpecPool *pool,
       GParamSpec *pspec,
       GType owner_type);
extern
void g_param_spec_pool_remove (GParamSpecPool *pool,
       GParamSpec *pspec);
extern
GParamSpec* g_param_spec_pool_lookup (GParamSpecPool *pool,
       const gchar *param_name,
       GType owner_type,
       gboolean walk_ancestors);
extern
GList* g_param_spec_pool_list_owned (GParamSpecPool *pool,
       GType owner_type);
extern
GParamSpec** g_param_spec_pool_list (GParamSpecPool *pool,
       GType owner_type,
       guint *n_pspecs_p);
typedef struct _GClosure GClosure;
typedef struct _GClosureNotifyData GClosureNotifyData;
typedef void (*GCallback) (void);
typedef void (*GClosureNotify) (gpointer data,
      GClosure *closure);
typedef void (*GClosureMarshal) (GClosure *closure,
      GValue *return_value,
      guint n_param_values,
      const GValue *param_values,
      gpointer invocation_hint,
      gpointer marshal_data);
typedef void (* GVaClosureMarshal) (GClosure *closure,
        GValue *return_value,
        gpointer instance,
        va_list args,
        gpointer marshal_data,
        int n_params,
        GType *param_types);
typedef struct _GCClosure GCClosure;
struct _GClosureNotifyData
{
  gpointer data;
  GClosureNotify notify;
};
struct _GClosure
{
  volatile guint ref_count : 15;
  volatile guint meta_marshal_nouse : 1;
  volatile guint n_guards : 1;
  volatile guint n_fnotifiers : 2;
  volatile guint n_inotifiers : 8;
  volatile guint in_inotify : 1;
  volatile guint floating : 1;
  volatile guint derivative_flag : 1;
  volatile guint in_marshal : 1;
  volatile guint is_invalid : 1;
                  void (*marshal) (GClosure *closure,
         GValue *return_value,
         guint n_param_values,
         const GValue *param_values,
         gpointer invocation_hint,
         gpointer marshal_data);
                    gpointer data;
                  GClosureNotifyData *notifiers;
};
struct _GCClosure
{
  GClosure closure;
  gpointer callback;
};
extern
GClosure* g_cclosure_new (GCallback callback_func,
       gpointer user_data,
       GClosureNotify destroy_data);
extern
GClosure* g_cclosure_new_swap (GCallback callback_func,
       gpointer user_data,
       GClosureNotify destroy_data);
extern
GClosure* g_signal_type_cclosure_new (GType itype,
       guint struct_offset);
extern
GClosure* g_closure_ref (GClosure *closure);
extern
void g_closure_sink (GClosure *closure);
extern
void g_closure_unref (GClosure *closure);
extern
GClosure* g_closure_new_simple (guint sizeof_closure,
       gpointer data);
extern
void g_closure_add_finalize_notifier (GClosure *closure,
       gpointer notify_data,
       GClosureNotify notify_func);
extern
void g_closure_remove_finalize_notifier (GClosure *closure,
       gpointer notify_data,
       GClosureNotify notify_func);
extern
void g_closure_add_invalidate_notifier (GClosure *closure,
       gpointer notify_data,
       GClosureNotify notify_func);
extern
void g_closure_remove_invalidate_notifier (GClosure *closure,
       gpointer notify_data,
       GClosureNotify notify_func);
extern
void g_closure_add_marshal_guards (GClosure *closure,
       gpointer pre_marshal_data,
       GClosureNotify pre_marshal_notify,
       gpointer post_marshal_data,
       GClosureNotify post_marshal_notify);
extern
void g_closure_set_marshal (GClosure *closure,
       GClosureMarshal marshal);
extern
void g_closure_set_meta_marshal (GClosure *closure,
       gpointer marshal_data,
       GClosureMarshal meta_marshal);
extern
void g_closure_invalidate (GClosure *closure);
extern
void g_closure_invoke (GClosure *closure,
       GValue *return_value,
       guint n_param_values,
       const GValue *param_values,
       gpointer invocation_hint);
extern
void g_cclosure_marshal_generic (GClosure *closure,
                                 GValue *return_gvalue,
                                 guint n_param_values,
                                 const GValue *param_values,
                                 gpointer invocation_hint,
                                 gpointer marshal_data);
extern
void g_cclosure_marshal_generic_va (GClosure *closure,
        GValue *return_value,
        gpointer instance,
        va_list args_list,
        gpointer marshal_data,
        int n_params,
        GType *param_types);
extern
void g_cclosure_marshal_VOID__VOID (GClosure *closure,
                                    GValue *return_value,
                                    guint n_param_values,
                                    const GValue *param_values,
                                    gpointer invocation_hint,
                                    gpointer marshal_data);
extern
void g_cclosure_marshal_VOID__VOIDv (GClosure *closure,
                                     GValue *return_value,
                                     gpointer instance,
                                     va_list args,
                                     gpointer marshal_data,
                                     int n_params,
                                     GType *param_types);
extern
void g_cclosure_marshal_VOID__BOOLEAN (GClosure *closure,
                                       GValue *return_value,
                                       guint n_param_values,
                                       const GValue *param_values,
                                       gpointer invocation_hint,
                                       gpointer marshal_data);
extern
void g_cclosure_marshal_VOID__BOOLEANv (GClosure *closure,
                                        GValue *return_value,
                                        gpointer instance,
                                        va_list args,
                                        gpointer marshal_data,
                                        int n_params,
                                        GType *param_types);
extern
void g_cclosure_marshal_VOID__CHAR (GClosure *closure,
                                    GValue *return_value,
                                    guint n_param_values,
                                    const GValue *param_values,
                                    gpointer invocation_hint,
                                    gpointer marshal_data);
extern
void g_cclosure_marshal_VOID__CHARv (GClosure *closure,
                                     GValue *return_value,
                                     gpointer instance,
                                     va_list args,
                                     gpointer marshal_data,
                                     int n_params,
                                     GType *param_types);
extern
void g_cclosure_marshal_VOID__UCHAR (GClosure *closure,
                                     GValue *return_value,
                                     guint n_param_values,
                                     const GValue *param_values,
                                     gpointer invocation_hint,
                                     gpointer marshal_data);
extern
void g_cclosure_marshal_VOID__UCHARv (GClosure *closure,
                                      GValue *return_value,
                                      gpointer instance,
                                      va_list args,
                                      gpointer marshal_data,
                                      int n_params,
                                      GType *param_types);
extern
void g_cclosure_marshal_VOID__INT (GClosure *closure,
                                   GValue *return_value,
                                   guint n_param_values,
                                   const GValue *param_values,
                                   gpointer invocation_hint,
                                   gpointer marshal_data);
extern
void g_cclosure_marshal_VOID__INTv (GClosure *closure,
                                    GValue *return_value,
                                    gpointer instance,
                                    va_list args,
                                    gpointer marshal_data,
                                    int n_params,
                                    GType *param_types);
extern
void g_cclosure_marshal_VOID__UINT (GClosure *closure,
                                    GValue *return_value,
                                    guint n_param_values,
                                    const GValue *param_values,
                                    gpointer invocation_hint,
                                    gpointer marshal_data);
extern
void g_cclosure_marshal_VOID__UINTv (GClosure *closure,
                                     GValue *return_value,
                                     gpointer instance,
                                     va_list args,
                                     gpointer marshal_data,
                                     int n_params,
                                     GType *param_types);
extern
void g_cclosure_marshal_VOID__LONG (GClosure *closure,
                                    GValue *return_value,
                                    guint n_param_values,
                                    const GValue *param_values,
                                    gpointer invocation_hint,
                                    gpointer marshal_data);
extern
void g_cclosure_marshal_VOID__LONGv (GClosure *closure,
                                     GValue *return_value,
                                     gpointer instance,
                                     va_list args,
                                     gpointer marshal_data,
                                     int n_params,
                                     GType *param_types);
extern
void g_cclosure_marshal_VOID__ULONG (GClosure *closure,
                                     GValue *return_value,
                                     guint n_param_values,
                                     const GValue *param_values,
                                     gpointer invocation_hint,
                                     gpointer marshal_data);
extern
void g_cclosure_marshal_VOID__ULONGv (GClosure *closure,
                                      GValue *return_value,
                                      gpointer instance,
                                      va_list args,
                                      gpointer marshal_data,
                                      int n_params,
                                      GType *param_types);
extern
void g_cclosure_marshal_VOID__ENUM (GClosure *closure,
                                    GValue *return_value,
                                    guint n_param_values,
                                    const GValue *param_values,
                                    gpointer invocation_hint,
                                    gpointer marshal_data);
extern
void g_cclosure_marshal_VOID__ENUMv (GClosure *closure,
                                     GValue *return_value,
                                     gpointer instance,
                                     va_list args,
                                     gpointer marshal_data,
                                     int n_params,
                                     GType *param_types);
extern
void g_cclosure_marshal_VOID__FLAGS (GClosure *closure,
                                     GValue *return_value,
                                     guint n_param_values,
                                     const GValue *param_values,
                                     gpointer invocation_hint,
                                     gpointer marshal_data);
extern
void g_cclosure_marshal_VOID__FLAGSv (GClosure *closure,
                                      GValue *return_value,
                                      gpointer instance,
                                      va_list args,
                                      gpointer marshal_data,
                                      int n_params,
                                      GType *param_types);
extern
void g_cclosure_marshal_VOID__FLOAT (GClosure *closure,
                                     GValue *return_value,
                                     guint n_param_values,
                                     const GValue *param_values,
                                     gpointer invocation_hint,
                                     gpointer marshal_data);
extern
void g_cclosure_marshal_VOID__FLOATv (GClosure *closure,
                                      GValue *return_value,
                                      gpointer instance,
                                      va_list args,
                                      gpointer marshal_data,
                                      int n_params,
                                      GType *param_types);
extern
void g_cclosure_marshal_VOID__DOUBLE (GClosure *closure,
                                      GValue *return_value,
                                      guint n_param_values,
                                      const GValue *param_values,
                                      gpointer invocation_hint,
                                      gpointer marshal_data);
extern
void g_cclosure_marshal_VOID__DOUBLEv (GClosure *closure,
                                       GValue *return_value,
                                       gpointer instance,
                                       va_list args,
                                       gpointer marshal_data,
                                       int n_params,
                                       GType *param_types);
extern
void g_cclosure_marshal_VOID__STRING (GClosure *closure,
                                      GValue *return_value,
                                      guint n_param_values,
                                      const GValue *param_values,
                                      gpointer invocation_hint,
                                      gpointer marshal_data);
extern
void g_cclosure_marshal_VOID__STRINGv (GClosure *closure,
                                       GValue *return_value,
                                       gpointer instance,
                                       va_list args,
                                       gpointer marshal_data,
                                       int n_params,
                                       GType *param_types);
extern
void g_cclosure_marshal_VOID__PARAM (GClosure *closure,
                                     GValue *return_value,
                                     guint n_param_values,
                                     const GValue *param_values,
                                     gpointer invocation_hint,
                                     gpointer marshal_data);
extern
void g_cclosure_marshal_VOID__PARAMv (GClosure *closure,
                                      GValue *return_value,
                                      gpointer instance,
                                      va_list args,
                                      gpointer marshal_data,
                                      int n_params,
                                      GType *param_types);
extern
void g_cclosure_marshal_VOID__BOXED (GClosure *closure,
                                     GValue *return_value,
                                     guint n_param_values,
                                     const GValue *param_values,
                                     gpointer invocation_hint,
                                     gpointer marshal_data);
extern
void g_cclosure_marshal_VOID__BOXEDv (GClosure *closure,
                                      GValue *return_value,
                                      gpointer instance,
                                      va_list args,
                                      gpointer marshal_data,
                                      int n_params,
                                      GType *param_types);
extern
void g_cclosure_marshal_VOID__POINTER (GClosure *closure,
                                       GValue *return_value,
                                       guint n_param_values,
                                       const GValue *param_values,
                                       gpointer invocation_hint,
                                       gpointer marshal_data);
extern
void g_cclosure_marshal_VOID__POINTERv (GClosure *closure,
                                        GValue *return_value,
                                        gpointer instance,
                                        va_list args,
                                        gpointer marshal_data,
                                        int n_params,
                                        GType *param_types);
extern
void g_cclosure_marshal_VOID__OBJECT (GClosure *closure,
                                      GValue *return_value,
                                      guint n_param_values,
                                      const GValue *param_values,
                                      gpointer invocation_hint,
                                      gpointer marshal_data);
extern
void g_cclosure_marshal_VOID__OBJECTv (GClosure *closure,
                                       GValue *return_value,
                                       gpointer instance,
                                       va_list args,
                                       gpointer marshal_data,
                                       int n_params,
                                       GType *param_types);
extern
void g_cclosure_marshal_VOID__VARIANT (GClosure *closure,
                                       GValue *return_value,
                                       guint n_param_values,
                                       const GValue *param_values,
                                       gpointer invocation_hint,
                                       gpointer marshal_data);
extern
void g_cclosure_marshal_VOID__VARIANTv (GClosure *closure,
                                        GValue *return_value,
                                        gpointer instance,
                                        va_list args,
                                        gpointer marshal_data,
                                        int n_params,
                                        GType *param_types);
extern
void g_cclosure_marshal_VOID__UINT_POINTER (GClosure *closure,
                                            GValue *return_value,
                                            guint n_param_values,
                                            const GValue *param_values,
                                            gpointer invocation_hint,
                                            gpointer marshal_data);
extern
void g_cclosure_marshal_VOID__UINT_POINTERv (GClosure *closure,
                                             GValue *return_value,
                                             gpointer instance,
                                             va_list args,
                                             gpointer marshal_data,
                                             int n_params,
                                             GType *param_types);
extern
void g_cclosure_marshal_BOOLEAN__FLAGS (GClosure *closure,
                                        GValue *return_value,
                                        guint n_param_values,
                                        const GValue *param_values,
                                        gpointer invocation_hint,
                                        gpointer marshal_data);
extern
void g_cclosure_marshal_BOOLEAN__FLAGSv (GClosure *closure,
                                         GValue *return_value,
                                         gpointer instance,
                                         va_list args,
                                         gpointer marshal_data,
                                         int n_params,
                                         GType *param_types);
extern
void g_cclosure_marshal_STRING__OBJECT_POINTER (GClosure *closure,
                                                GValue *return_value,
                                                guint n_param_values,
                                                const GValue *param_values,
                                                gpointer invocation_hint,
                                                gpointer marshal_data);
extern
void g_cclosure_marshal_STRING__OBJECT_POINTERv (GClosure *closure,
                                                 GValue *return_value,
                                                 gpointer instance,
                                                 va_list args,
                                                 gpointer marshal_data,
                                                 int n_params,
                                                 GType *param_types);
extern
void g_cclosure_marshal_BOOLEAN__BOXED_BOXED (GClosure *closure,
                                              GValue *return_value,
                                              guint n_param_values,
                                              const GValue *param_values,
                                              gpointer invocation_hint,
                                              gpointer marshal_data);
extern
void g_cclosure_marshal_BOOLEAN__BOXED_BOXEDv (GClosure *closure,
                                               GValue *return_value,
                                               gpointer instance,
                                               va_list args,
                                               gpointer marshal_data,
                                               int n_params,
                                               GType *param_types);
typedef struct _GSignalQuery GSignalQuery;
typedef struct _GSignalInvocationHint GSignalInvocationHint;
typedef GClosureMarshal GSignalCMarshaller;
typedef GVaClosureMarshal GSignalCVaMarshaller;
typedef gboolean (*GSignalEmissionHook) (GSignalInvocationHint *ihint,
      guint n_param_values,
      const GValue *param_values,
      gpointer data);
typedef gboolean (*GSignalAccumulator) (GSignalInvocationHint *ihint,
      GValue *return_accu,
      const GValue *handler_return,
      gpointer data);
typedef enum
{
  G_SIGNAL_RUN_FIRST = 1 << 0,
  G_SIGNAL_RUN_LAST = 1 << 1,
  G_SIGNAL_RUN_CLEANUP = 1 << 2,
  G_SIGNAL_NO_RECURSE = 1 << 3,
  G_SIGNAL_DETAILED = 1 << 4,
  G_SIGNAL_ACTION = 1 << 5,
  G_SIGNAL_NO_HOOKS = 1 << 6,
  G_SIGNAL_MUST_COLLECT = 1 << 7,
  G_SIGNAL_DEPRECATED = 1 << 8
} GSignalFlags;
typedef enum
{
  G_CONNECT_AFTER = 1 << 0,
  G_CONNECT_SWAPPED = 1 << 1
} GConnectFlags;
typedef enum
{
  G_SIGNAL_MATCH_ID = 1 << 0,
  G_SIGNAL_MATCH_DETAIL = 1 << 1,
  G_SIGNAL_MATCH_CLOSURE = 1 << 2,
  G_SIGNAL_MATCH_FUNC = 1 << 3,
  G_SIGNAL_MATCH_DATA = 1 << 4,
  G_SIGNAL_MATCH_UNBLOCKED = 1 << 5
} GSignalMatchType;
struct _GSignalInvocationHint
{
  guint signal_id;
  GQuark detail;
  GSignalFlags run_type;
};
struct _GSignalQuery
{
  guint signal_id;
  const gchar *signal_name;
  GType itype;
  GSignalFlags signal_flags;
  GType return_type;
  guint n_params;
  const GType *param_types;
};
extern
guint g_signal_newv (const gchar *signal_name,
          GType itype,
          GSignalFlags signal_flags,
          GClosure *class_closure,
          GSignalAccumulator accumulator,
          gpointer accu_data,
          GSignalCMarshaller c_marshaller,
          GType return_type,
          guint n_params,
          GType *param_types);
extern
guint g_signal_new_valist (const gchar *signal_name,
          GType itype,
          GSignalFlags signal_flags,
          GClosure *class_closure,
          GSignalAccumulator accumulator,
          gpointer accu_data,
          GSignalCMarshaller c_marshaller,
          GType return_type,
          guint n_params,
          va_list args);
extern
guint g_signal_new (const gchar *signal_name,
          GType itype,
          GSignalFlags signal_flags,
          guint class_offset,
          GSignalAccumulator accumulator,
          gpointer accu_data,
          GSignalCMarshaller c_marshaller,
          GType return_type,
          guint n_params,
          ...);
extern
guint g_signal_new_class_handler (const gchar *signal_name,
                                             GType itype,
                                             GSignalFlags signal_flags,
                                             GCallback class_handler,
                                             GSignalAccumulator accumulator,
                                             gpointer accu_data,
                                             GSignalCMarshaller c_marshaller,
                                             GType return_type,
                                             guint n_params,
                                             ...);
extern
void g_signal_set_va_marshaller (guint signal_id,
          GType instance_type,
          GSignalCVaMarshaller va_marshaller);
extern
void g_signal_emitv (const GValue *instance_and_params,
          guint signal_id,
          GQuark detail,
          GValue *return_value);
extern
void g_signal_emit_valist (gpointer instance,
          guint signal_id,
          GQuark detail,
          va_list var_args);
extern
void g_signal_emit (gpointer instance,
          guint signal_id,
          GQuark detail,
          ...);
extern
void g_signal_emit_by_name (gpointer instance,
          const gchar *detailed_signal,
          ...);
extern
guint g_signal_lookup (const gchar *name,
          GType itype);
extern
const gchar * g_signal_name (guint signal_id);
extern
void g_signal_query (guint signal_id,
          GSignalQuery *query);
extern
guint* g_signal_list_ids (GType itype,
          guint *n_ids);
extern
gboolean g_signal_parse_name (const gchar *detailed_signal,
          GType itype,
          guint *signal_id_p,
          GQuark *detail_p,
          gboolean force_detail_quark);
extern
GSignalInvocationHint* g_signal_get_invocation_hint (gpointer instance);
extern
void g_signal_stop_emission (gpointer instance,
          guint signal_id,
          GQuark detail);
extern
void g_signal_stop_emission_by_name (gpointer instance,
          const gchar *detailed_signal);
extern
gulong g_signal_add_emission_hook (guint signal_id,
          GQuark detail,
          GSignalEmissionHook hook_func,
          gpointer hook_data,
          GDestroyNotify data_destroy);
extern
void g_signal_remove_emission_hook (guint signal_id,
          gulong hook_id);
extern
gboolean g_signal_has_handler_pending (gpointer instance,
            guint signal_id,
            GQuark detail,
            gboolean may_be_blocked);
extern
gulong g_signal_connect_closure_by_id (gpointer instance,
            guint signal_id,
            GQuark detail,
            GClosure *closure,
            gboolean after);
extern
gulong g_signal_connect_closure (gpointer instance,
            const gchar *detailed_signal,
            GClosure *closure,
            gboolean after);
extern
gulong g_signal_connect_data (gpointer instance,
            const gchar *detailed_signal,
            GCallback c_handler,
            gpointer data,
            GClosureNotify destroy_data,
            GConnectFlags connect_flags);
extern
void g_signal_handler_block (gpointer instance,
            gulong handler_id);
extern
void g_signal_handler_unblock (gpointer instance,
            gulong handler_id);
extern
void g_signal_handler_disconnect (gpointer instance,
            gulong handler_id);
extern
gboolean g_signal_handler_is_connected (gpointer instance,
            gulong handler_id);
extern
gulong g_signal_handler_find (gpointer instance,
            GSignalMatchType mask,
            guint signal_id,
            GQuark detail,
            GClosure *closure,
            gpointer func,
            gpointer data);
extern
guint g_signal_handlers_block_matched (gpointer instance,
            GSignalMatchType mask,
            guint signal_id,
            GQuark detail,
            GClosure *closure,
            gpointer func,
            gpointer data);
extern
guint g_signal_handlers_unblock_matched (gpointer instance,
            GSignalMatchType mask,
            guint signal_id,
            GQuark detail,
            GClosure *closure,
            gpointer func,
            gpointer data);
extern
guint g_signal_handlers_disconnect_matched (gpointer instance,
            GSignalMatchType mask,
            guint signal_id,
            GQuark detail,
            GClosure *closure,
            gpointer func,
            gpointer data);
extern
void g_signal_override_class_closure (guint signal_id,
                                               GType instance_type,
                                               GClosure *class_closure);
extern
void g_signal_override_class_handler (const gchar *signal_name,
                                               GType instance_type,
                                               GCallback class_handler);
extern
void g_signal_chain_from_overridden (const GValue *instance_and_params,
                                               GValue *return_value);
extern
void g_signal_chain_from_overridden_handler (gpointer instance,
                                               ...);
extern
gboolean g_signal_accumulator_true_handled (GSignalInvocationHint *ihint,
         GValue *return_accu,
         const GValue *handler_return,
         gpointer dummy);
extern
gboolean g_signal_accumulator_first_wins (GSignalInvocationHint *ihint,
                                            GValue *return_accu,
                                            const GValue *handler_return,
                                            gpointer dummy);
extern
void g_signal_handlers_destroy (gpointer instance);
void _g_signals_destroy (GType itype);
extern
GType g_date_get_type (void) __attribute__((__const__));
extern
GType g_strv_get_type (void) __attribute__((__const__));
extern
GType g_gstring_get_type (void) __attribute__((__const__));
extern
GType g_hash_table_get_type (void) __attribute__((__const__));
extern
GType g_array_get_type (void) __attribute__((__const__));
extern
GType g_byte_array_get_type (void) __attribute__((__const__));
extern
GType g_ptr_array_get_type (void) __attribute__((__const__));
extern
GType g_bytes_get_type (void) __attribute__((__const__));
extern
GType g_variant_type_get_gtype (void) __attribute__((__const__));
extern
GType g_regex_get_type (void) __attribute__((__const__));
extern
GType g_match_info_get_type (void) __attribute__((__const__));
extern
GType g_error_get_type (void) __attribute__((__const__));
extern
GType g_date_time_get_type (void) __attribute__((__const__));
extern
GType g_time_zone_get_type (void) __attribute__((__const__));
extern
GType g_io_channel_get_type (void) __attribute__((__const__));
extern
GType g_io_condition_get_type (void) __attribute__((__const__));
extern
GType g_variant_builder_get_type (void) __attribute__((__const__));
extern
GType g_variant_dict_get_type (void) __attribute__((__const__));
extern
GType g_key_file_get_type (void) __attribute__((__const__));
extern
GType g_main_loop_get_type (void) __attribute__((__const__));
extern
GType g_main_context_get_type (void) __attribute__((__const__));
extern
GType g_source_get_type (void) __attribute__((__const__));
extern
GType g_pollfd_get_type (void) __attribute__((__const__));
extern
GType g_thread_get_type (void) __attribute__((__const__));
extern
GType g_checksum_get_type (void) __attribute__((__const__));
extern
GType g_markup_parse_context_get_type (void) __attribute__((__const__));
extern
GType g_mapped_file_get_type (void) __attribute__((__const__));
extern
GType g_option_group_get_type (void) __attribute__((__const__));
extern
GType g_variant_get_gtype (void) __attribute__((__const__));
typedef gpointer (*GBoxedCopyFunc) (gpointer boxed);
typedef void (*GBoxedFreeFunc) (gpointer boxed);
extern
gpointer g_boxed_copy (GType boxed_type,
                                           gconstpointer src_boxed);
extern
void g_boxed_free (GType boxed_type,
                                           gpointer boxed);
extern
void g_value_set_boxed (GValue *value,
                                           gconstpointer v_boxed);
extern
void g_value_set_static_boxed (GValue *value,
                                           gconstpointer v_boxed);
extern
void g_value_take_boxed (GValue *value,
                                           gconstpointer v_boxed);
extern
void g_value_set_boxed_take_ownership (GValue *value,
                                           gconstpointer v_boxed);
extern
gpointer g_value_get_boxed (const GValue *value);
extern
gpointer g_value_dup_boxed (const GValue *value);
extern
GType g_boxed_type_register_static (const gchar *name,
                                           GBoxedCopyFunc boxed_copy,
                                           GBoxedFreeFunc boxed_free);
extern
GType g_closure_get_type (void) __attribute__((__const__));
extern
GType g_value_get_type (void) __attribute__((__const__));
typedef struct _GObject GObject;
typedef struct _GObjectClass GObjectClass;
typedef struct _GObject GInitiallyUnowned;
typedef struct _GObjectClass GInitiallyUnownedClass;
typedef struct _GObjectConstructParam GObjectConstructParam;
typedef void (*GObjectGetPropertyFunc) (GObject *object,
                                         guint property_id,
                                         GValue *value,
                                         GParamSpec *pspec);
typedef void (*GObjectSetPropertyFunc) (GObject *object,
                                         guint property_id,
                                         const GValue *value,
                                         GParamSpec *pspec);
typedef void (*GObjectFinalizeFunc) (GObject *object);
typedef void (*GWeakNotify) (gpointer data,
      GObject *where_the_object_was);
struct _GObject
{
  GTypeInstance g_type_instance;
  volatile guint ref_count;
  GData *qdata;
};
struct _GObjectClass
{
  GTypeClass g_type_class;
  GSList *construct_properties;
  GObject* (*constructor) (GType type,
                                 guint n_construct_properties,
                                 GObjectConstructParam *construct_properties);
  void (*set_property) (GObject *object,
                                         guint property_id,
                                         const GValue *value,
                                         GParamSpec *pspec);
  void (*get_property) (GObject *object,
                                         guint property_id,
                                         GValue *value,
                                         GParamSpec *pspec);
  void (*dispose) (GObject *object);
  void (*finalize) (GObject *object);
  void (*dispatch_properties_changed) (GObject *object,
          guint n_pspecs,
          GParamSpec **pspecs);
  void (*notify) (GObject *object,
      GParamSpec *pspec);
  void (*constructed) (GObject *object);
  gsize flags;
  gpointer pdummy[6];
};
struct _GObjectConstructParam
{
  GParamSpec *pspec;
  GValue *value;
};
extern
GType g_initially_unowned_get_type (void);
extern
void g_object_class_install_property (GObjectClass *oclass,
            guint property_id,
            GParamSpec *pspec);
extern
GParamSpec* g_object_class_find_property (GObjectClass *oclass,
            const gchar *property_name);
extern
GParamSpec**g_object_class_list_properties (GObjectClass *oclass,
            guint *n_properties);
extern
void g_object_class_override_property (GObjectClass *oclass,
            guint property_id,
            const gchar *name);
extern
void g_object_class_install_properties (GObjectClass *oclass,
                                               guint n_pspecs,
                                               GParamSpec **pspecs);
extern
void g_object_interface_install_property (gpointer g_iface,
       GParamSpec *pspec);
extern
GParamSpec* g_object_interface_find_property (gpointer g_iface,
       const gchar *property_name);
extern
GParamSpec**g_object_interface_list_properties (gpointer g_iface,
       guint *n_properties_p);
extern
GType g_object_get_type (void) __attribute__((__const__));
extern
gpointer g_object_new (GType object_type,
            const gchar *first_property_name,
            ...);
extern
gpointer g_object_newv (GType object_type,
            guint n_parameters,
            GParameter *parameters);
extern
GObject* g_object_new_valist (GType object_type,
            const gchar *first_property_name,
            va_list var_args);
extern
void g_object_set (gpointer object,
            const gchar *first_property_name,
            ...) __attribute__((__sentinel__));
extern
void g_object_get (gpointer object,
            const gchar *first_property_name,
            ...) __attribute__((__sentinel__));
extern
gpointer g_object_connect (gpointer object,
            const gchar *signal_spec,
            ...) __attribute__((__sentinel__));
extern
void g_object_disconnect (gpointer object,
            const gchar *signal_spec,
            ...) __attribute__((__sentinel__));
extern
void g_object_set_valist (GObject *object,
            const gchar *first_property_name,
            va_list var_args);
extern
void g_object_get_valist (GObject *object,
            const gchar *first_property_name,
            va_list var_args);
extern
void g_object_set_property (GObject *object,
            const gchar *property_name,
            const GValue *value);
extern
void g_object_get_property (GObject *object,
            const gchar *property_name,
            GValue *value);
extern
void g_object_freeze_notify (GObject *object);
extern
void g_object_notify (GObject *object,
            const gchar *property_name);
extern
void g_object_notify_by_pspec (GObject *object,
            GParamSpec *pspec);
extern
void g_object_thaw_notify (GObject *object);
extern
gboolean g_object_is_floating (gpointer object);
extern
gpointer g_object_ref_sink (gpointer object);
extern
gpointer g_object_ref (gpointer object);
extern
void g_object_unref (gpointer object);
extern
void g_object_weak_ref (GObject *object,
            GWeakNotify notify,
            gpointer data);
extern
void g_object_weak_unref (GObject *object,
            GWeakNotify notify,
            gpointer data);
extern
void g_object_add_weak_pointer (GObject *object,
                                               gpointer *weak_pointer_location);
extern
void g_object_remove_weak_pointer (GObject *object,
                                               gpointer *weak_pointer_location);
typedef void (*GToggleNotify) (gpointer data,
          GObject *object,
          gboolean is_last_ref);
extern
void g_object_add_toggle_ref (GObject *object,
     GToggleNotify notify,
     gpointer data);
extern
void g_object_remove_toggle_ref (GObject *object,
     GToggleNotify notify,
     gpointer data);
extern
gpointer g_object_get_qdata (GObject *object,
            GQuark quark);
extern
void g_object_set_qdata (GObject *object,
            GQuark quark,
            gpointer data);
extern
void g_object_set_qdata_full (GObject *object,
            GQuark quark,
            gpointer data,
            GDestroyNotify destroy);
extern
gpointer g_object_steal_qdata (GObject *object,
            GQuark quark);
extern
gpointer g_object_dup_qdata (GObject *object,
                                               GQuark quark,
                                               GDuplicateFunc dup_func,
            gpointer user_data);
extern
gboolean g_object_replace_qdata (GObject *object,
                                               GQuark quark,
                                               gpointer oldval,
                                               gpointer newval,
                                               GDestroyNotify destroy,
            GDestroyNotify *old_destroy);
extern
gpointer g_object_get_data (GObject *object,
            const gchar *key);
extern
void g_object_set_data (GObject *object,
            const gchar *key,
            gpointer data);
extern
void g_object_set_data_full (GObject *object,
            const gchar *key,
            gpointer data,
            GDestroyNotify destroy);
extern
gpointer g_object_steal_data (GObject *object,
            const gchar *key);
extern
gpointer g_object_dup_data (GObject *object,
                                               const gchar *key,
                                               GDuplicateFunc dup_func,
            gpointer user_data);
extern
gboolean g_object_replace_data (GObject *object,
                                               const gchar *key,
                                               gpointer oldval,
                                               gpointer newval,
                                               GDestroyNotify destroy,
            GDestroyNotify *old_destroy);
extern
void g_object_watch_closure (GObject *object,
            GClosure *closure);
extern
GClosure* g_cclosure_new_object (GCallback callback_func,
            GObject *object);
extern
GClosure* g_cclosure_new_object_swap (GCallback callback_func,
            GObject *object);
extern
GClosure* g_closure_new_object (guint sizeof_closure,
            GObject *object);
extern
void g_value_set_object (GValue *value,
            gpointer v_object);
extern
gpointer g_value_get_object (const GValue *value);
extern
gpointer g_value_dup_object (const GValue *value);
extern
gulong g_signal_connect_object (gpointer instance,
            const gchar *detailed_signal,
            GCallback c_handler,
            gpointer gobject,
            GConnectFlags connect_flags);
extern
void g_object_force_floating (GObject *object);
extern
void g_object_run_dispose (GObject *object);
extern
void g_value_take_object (GValue *value,
            gpointer v_object);
extern
void g_value_set_object_take_ownership (GValue *value,
                                               gpointer v_object);
extern
gsize g_object_compat_control (gsize what,
            gpointer data);
extern
void g_clear_object (volatile GObject **object_ptr);
static inline gboolean
(g_set_object) (GObject **object_ptr,
                GObject *new_object)
{
  GObject *old_object = *object_ptr;
  if (old_object == new_object)
    return (0);
  if (new_object != ((void *)0))
    g_object_ref (new_object);
  *object_ptr = new_object;
  if (old_object != ((void *)0))
    g_object_unref (old_object);
  return (!(0));
}
typedef struct {
    union { gpointer p; } priv;
} GWeakRef;
extern
void g_weak_ref_init (GWeakRef *weak_ref,
                                gpointer object);
extern
void g_weak_ref_clear (GWeakRef *weak_ref);
extern
gpointer g_weak_ref_get (GWeakRef *weak_ref);
extern
void g_weak_ref_set (GWeakRef *weak_ref,
                                gpointer object);
typedef struct _GBinding GBinding;
typedef gboolean (* GBindingTransformFunc) (GBinding *binding,
                                            const GValue *from_value,
                                            GValue *to_value,
                                            gpointer user_data);
typedef enum {
  G_BINDING_DEFAULT = 0,
  G_BINDING_BIDIRECTIONAL = 1 << 0,
  G_BINDING_SYNC_CREATE = 1 << 1,
  G_BINDING_INVERT_BOOLEAN = 1 << 2
} GBindingFlags;
extern
GType g_binding_flags_get_type (void) __attribute__((__const__));
extern
GType g_binding_get_type (void) __attribute__((__const__));
extern
GBindingFlags g_binding_get_flags (GBinding *binding);
extern
GObject * g_binding_get_source (GBinding *binding);
extern
GObject * g_binding_get_target (GBinding *binding);
extern
const gchar * g_binding_get_source_property (GBinding *binding);
extern
const gchar * g_binding_get_target_property (GBinding *binding);
extern
void g_binding_unbind (GBinding *binding);
extern
GBinding *g_object_bind_property (gpointer source,
                                                const gchar *source_property,
                                                gpointer target,
                                                const gchar *target_property,
                                                GBindingFlags flags);
extern
GBinding *g_object_bind_property_full (gpointer source,
                                                const gchar *source_property,
                                                gpointer target,
                                                const gchar *target_property,
                                                GBindingFlags flags,
                                                GBindingTransformFunc transform_to,
                                                GBindingTransformFunc transform_from,
                                                gpointer user_data,
                                                GDestroyNotify notify);
extern
GBinding *g_object_bind_property_with_closures (gpointer source,
                                                const gchar *source_property,
                                                gpointer target,
                                                const gchar *target_property,
                                                GBindingFlags flags,
                                                GClosure *transform_to,
                                                GClosure *transform_from);
typedef struct _GEnumClass GEnumClass;
typedef struct _GFlagsClass GFlagsClass;
typedef struct _GEnumValue GEnumValue;
typedef struct _GFlagsValue GFlagsValue;
struct _GEnumClass
{
  GTypeClass g_type_class;
  gint minimum;
  gint maximum;
  guint n_values;
  GEnumValue *values;
};
struct _GFlagsClass
{
  GTypeClass g_type_class;
  guint mask;
  guint n_values;
  GFlagsValue *values;
};
struct _GEnumValue
{
  gint value;
  const gchar *value_name;
  const gchar *value_nick;
};
struct _GFlagsValue
{
  guint value;
  const gchar *value_name;
  const gchar *value_nick;
};
extern
GEnumValue* g_enum_get_value (GEnumClass *enum_class,
       gint value);
extern
GEnumValue* g_enum_get_value_by_name (GEnumClass *enum_class,
       const gchar *name);
extern
GEnumValue* g_enum_get_value_by_nick (GEnumClass *enum_class,
       const gchar *nick);
extern
GFlagsValue* g_flags_get_first_value (GFlagsClass *flags_class,
       guint value);
extern
GFlagsValue* g_flags_get_value_by_name (GFlagsClass *flags_class,
       const gchar *name);
extern
GFlagsValue* g_flags_get_value_by_nick (GFlagsClass *flags_class,
       const gchar *nick);
extern
void g_value_set_enum (GValue *value,
       gint v_enum);
extern
gint g_value_get_enum (const GValue *value);
extern
void g_value_set_flags (GValue *value,
       guint v_flags);
extern
guint g_value_get_flags (const GValue *value);
extern
GType g_enum_register_static (const gchar *name,
        const GEnumValue *const_static_values);
extern
GType g_flags_register_static (const gchar *name,
        const GFlagsValue *const_static_values);
extern
void g_enum_complete_type_info (GType g_enum_type,
        GTypeInfo *info,
        const GEnumValue *const_values);
extern
void g_flags_complete_type_info (GType g_flags_type,
        GTypeInfo *info,
        const GFlagsValue *const_values);
typedef struct _GParamSpecChar GParamSpecChar;
typedef struct _GParamSpecUChar GParamSpecUChar;
typedef struct _GParamSpecBoolean GParamSpecBoolean;
typedef struct _GParamSpecInt GParamSpecInt;
typedef struct _GParamSpecUInt GParamSpecUInt;
typedef struct _GParamSpecLong GParamSpecLong;
typedef struct _GParamSpecULong GParamSpecULong;
typedef struct _GParamSpecInt64 GParamSpecInt64;
typedef struct _GParamSpecUInt64 GParamSpecUInt64;
typedef struct _GParamSpecUnichar GParamSpecUnichar;
typedef struct _GParamSpecEnum GParamSpecEnum;
typedef struct _GParamSpecFlags GParamSpecFlags;
typedef struct _GParamSpecFloat GParamSpecFloat;
typedef struct _GParamSpecDouble GParamSpecDouble;
typedef struct _GParamSpecString GParamSpecString;
typedef struct _GParamSpecParam GParamSpecParam;
typedef struct _GParamSpecBoxed GParamSpecBoxed;
typedef struct _GParamSpecPointer GParamSpecPointer;
typedef struct _GParamSpecValueArray GParamSpecValueArray;
typedef struct _GParamSpecObject GParamSpecObject;
typedef struct _GParamSpecOverride GParamSpecOverride;
typedef struct _GParamSpecGType GParamSpecGType;
typedef struct _GParamSpecVariant GParamSpecVariant;
struct _GParamSpecChar
{
  GParamSpec parent_instance;
  gint8 minimum;
  gint8 maximum;
  gint8 default_value;
};
struct _GParamSpecUChar
{
  GParamSpec parent_instance;
  guint8 minimum;
  guint8 maximum;
  guint8 default_value;
};
struct _GParamSpecBoolean
{
  GParamSpec parent_instance;
  gboolean default_value;
};
struct _GParamSpecInt
{
  GParamSpec parent_instance;
  gint minimum;
  gint maximum;
  gint default_value;
};
struct _GParamSpecUInt
{
  GParamSpec parent_instance;
  guint minimum;
  guint maximum;
  guint default_value;
};
struct _GParamSpecLong
{
  GParamSpec parent_instance;
  glong minimum;
  glong maximum;
  glong default_value;
};
struct _GParamSpecULong
{
  GParamSpec parent_instance;
  gulong minimum;
  gulong maximum;
  gulong default_value;
};
struct _GParamSpecInt64
{
  GParamSpec parent_instance;
  gint64 minimum;
  gint64 maximum;
  gint64 default_value;
};
struct _GParamSpecUInt64
{
  GParamSpec parent_instance;
  guint64 minimum;
  guint64 maximum;
  guint64 default_value;
};
struct _GParamSpecUnichar
{
  GParamSpec parent_instance;
  gunichar default_value;
};
struct _GParamSpecEnum
{
  GParamSpec parent_instance;
  GEnumClass *enum_class;
  gint default_value;
};
struct _GParamSpecFlags
{
  GParamSpec parent_instance;
  GFlagsClass *flags_class;
  guint default_value;
};
struct _GParamSpecFloat
{
  GParamSpec parent_instance;
  gfloat minimum;
  gfloat maximum;
  gfloat default_value;
  gfloat epsilon;
};
struct _GParamSpecDouble
{
  GParamSpec parent_instance;
  gdouble minimum;
  gdouble maximum;
  gdouble default_value;
  gdouble epsilon;
};
struct _GParamSpecString
{
  GParamSpec parent_instance;
  gchar *default_value;
  gchar *cset_first;
  gchar *cset_nth;
  gchar substitutor;
  guint null_fold_if_empty : 1;
  guint ensure_non_null : 1;
};
struct _GParamSpecParam
{
  GParamSpec parent_instance;
};
struct _GParamSpecBoxed
{
  GParamSpec parent_instance;
};
struct _GParamSpecPointer
{
  GParamSpec parent_instance;
};
struct _GParamSpecValueArray
{
  GParamSpec parent_instance;
  GParamSpec *element_spec;
  guint fixed_n_elements;
};
struct _GParamSpecObject
{
  GParamSpec parent_instance;
};
struct _GParamSpecOverride
{
  GParamSpec parent_instance;
  GParamSpec *overridden;
};
struct _GParamSpecGType
{
  GParamSpec parent_instance;
  GType is_a_type;
};
struct _GParamSpecVariant
{
  GParamSpec parent_instance;
  GVariantType *type;
  GVariant *default_value;
  gpointer padding[4];
};
extern
GParamSpec* g_param_spec_char (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       gint8 minimum,
       gint8 maximum,
       gint8 default_value,
       GParamFlags flags);
extern
GParamSpec* g_param_spec_uchar (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       guint8 minimum,
       guint8 maximum,
       guint8 default_value,
       GParamFlags flags);
extern
GParamSpec* g_param_spec_boolean (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       gboolean default_value,
       GParamFlags flags);
extern
GParamSpec* g_param_spec_int (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       gint minimum,
       gint maximum,
       gint default_value,
       GParamFlags flags);
extern
GParamSpec* g_param_spec_uint (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       guint minimum,
       guint maximum,
       guint default_value,
       GParamFlags flags);
extern
GParamSpec* g_param_spec_long (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       glong minimum,
       glong maximum,
       glong default_value,
       GParamFlags flags);
extern
GParamSpec* g_param_spec_ulong (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       gulong minimum,
       gulong maximum,
       gulong default_value,
       GParamFlags flags);
extern
GParamSpec* g_param_spec_int64 (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       gint64 minimum,
       gint64 maximum,
       gint64 default_value,
       GParamFlags flags);
extern
GParamSpec* g_param_spec_uint64 (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       guint64 minimum,
       guint64 maximum,
       guint64 default_value,
       GParamFlags flags);
extern
GParamSpec* g_param_spec_unichar (const gchar *name,
              const gchar *nick,
              const gchar *blurb,
              gunichar default_value,
              GParamFlags flags);
extern
GParamSpec* g_param_spec_enum (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       GType enum_type,
       gint default_value,
       GParamFlags flags);
extern
GParamSpec* g_param_spec_flags (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       GType flags_type,
       guint default_value,
       GParamFlags flags);
extern
GParamSpec* g_param_spec_float (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       gfloat minimum,
       gfloat maximum,
       gfloat default_value,
       GParamFlags flags);
extern
GParamSpec* g_param_spec_double (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       gdouble minimum,
       gdouble maximum,
       gdouble default_value,
       GParamFlags flags);
extern
GParamSpec* g_param_spec_string (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       const gchar *default_value,
       GParamFlags flags);
extern
GParamSpec* g_param_spec_param (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       GType param_type,
       GParamFlags flags);
extern
GParamSpec* g_param_spec_boxed (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       GType boxed_type,
       GParamFlags flags);
extern
GParamSpec* g_param_spec_pointer (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       GParamFlags flags);
extern
GParamSpec* g_param_spec_value_array (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       GParamSpec *element_spec,
       GParamFlags flags);
extern
GParamSpec* g_param_spec_object (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       GType object_type,
       GParamFlags flags);
extern
GParamSpec* g_param_spec_override (const gchar *name,
       GParamSpec *overridden);
extern
GParamSpec* g_param_spec_gtype (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       GType is_a_type,
       GParamFlags flags);
extern
GParamSpec* g_param_spec_variant (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       const GVariantType *type,
       GVariant *default_value,
       GParamFlags flags);
extern GType *g_param_spec_types;
extern
void g_source_set_closure (GSource *source,
      GClosure *closure);
extern
void g_source_set_dummy_callback (GSource *source);
typedef struct _GTypeModule GTypeModule;
typedef struct _GTypeModuleClass GTypeModuleClass;
struct _GTypeModule
{
  GObject parent_instance;
  guint use_count;
  GSList *type_infos;
  GSList *interface_infos;
  gchar *name;
};
struct _GTypeModuleClass
{
  GObjectClass parent_class;
  gboolean (* load) (GTypeModule *module);
  void (* unload) (GTypeModule *module);
  void (*reserved1) (void);
  void (*reserved2) (void);
  void (*reserved3) (void);
  void (*reserved4) (void);
};
extern
GType g_type_module_get_type (void) __attribute__((__const__));
extern
gboolean g_type_module_use (GTypeModule *module);
extern
void g_type_module_unuse (GTypeModule *module);
extern
void g_type_module_set_name (GTypeModule *module,
                                       const gchar *name);
extern
GType g_type_module_register_type (GTypeModule *module,
                                       GType parent_type,
                                       const gchar *type_name,
                                       const GTypeInfo *type_info,
                                       GTypeFlags flags);
extern
void g_type_module_add_interface (GTypeModule *module,
                                       GType instance_type,
                                       GType interface_type,
                                       const GInterfaceInfo *interface_info);
extern
GType g_type_module_register_enum (GTypeModule *module,
                                       const gchar *name,
                                       const GEnumValue *const_static_values);
extern
GType g_type_module_register_flags (GTypeModule *module,
                                       const gchar *name,
                                       const GFlagsValue *const_static_values);
typedef struct _GTypePluginClass GTypePluginClass;
typedef void (*GTypePluginUse) (GTypePlugin *plugin);
typedef void (*GTypePluginUnuse) (GTypePlugin *plugin);
typedef void (*GTypePluginCompleteTypeInfo) (GTypePlugin *plugin,
         GType g_type,
         GTypeInfo *info,
         GTypeValueTable *value_table);
typedef void (*GTypePluginCompleteInterfaceInfo) (GTypePlugin *plugin,
         GType instance_type,
         GType interface_type,
         GInterfaceInfo *info);
struct _GTypePluginClass
{
  GTypeInterface base_iface;
  GTypePluginUse use_plugin;
  GTypePluginUnuse unuse_plugin;
  GTypePluginCompleteTypeInfo complete_type_info;
  GTypePluginCompleteInterfaceInfo complete_interface_info;
};
extern
GType g_type_plugin_get_type (void) __attribute__((__const__));
extern
void g_type_plugin_use (GTypePlugin *plugin);
extern
void g_type_plugin_unuse (GTypePlugin *plugin);
extern
void g_type_plugin_complete_type_info (GTypePlugin *plugin,
       GType g_type,
       GTypeInfo *info,
       GTypeValueTable *value_table);
extern
void g_type_plugin_complete_interface_info (GTypePlugin *plugin,
       GType instance_type,
       GType interface_type,
       GInterfaceInfo *info);
typedef struct _GValueArray GValueArray;
struct _GValueArray
{
  guint n_values;
  GValue *values;
  guint n_prealloced;
};
extern
GType g_value_array_get_type (void) __attribute__((__const__));
extern
GValue* g_value_array_get_nth (GValueArray *value_array,
           guint index_);
extern
GValueArray* g_value_array_new (guint n_prealloced);
extern
void g_value_array_free (GValueArray *value_array);
extern
GValueArray* g_value_array_copy (const GValueArray *value_array);
extern
GValueArray* g_value_array_prepend (GValueArray *value_array,
           const GValue *value);
extern
GValueArray* g_value_array_append (GValueArray *value_array,
           const GValue *value);
extern
GValueArray* g_value_array_insert (GValueArray *value_array,
           guint index_,
           const GValue *value);
extern
GValueArray* g_value_array_remove (GValueArray *value_array,
           guint index_);
extern
GValueArray* g_value_array_sort (GValueArray *value_array,
           GCompareFunc compare_func);
extern
GValueArray* g_value_array_sort_with_data (GValueArray *value_array,
           GCompareDataFunc compare_func,
           gpointer user_data);
extern
void g_value_set_char (GValue *value,
                                                 gchar v_char);
extern
gchar g_value_get_char (const GValue *value);
extern
void g_value_set_schar (GValue *value,
       gint8 v_char);
extern
gint8 g_value_get_schar (const GValue *value);
extern
void g_value_set_uchar (GValue *value,
       guchar v_uchar);
extern
guchar g_value_get_uchar (const GValue *value);
extern
void g_value_set_boolean (GValue *value,
       gboolean v_boolean);
extern
gboolean g_value_get_boolean (const GValue *value);
extern
void g_value_set_int (GValue *value,
       gint v_int);
extern
gint g_value_get_int (const GValue *value);
extern
void g_value_set_uint (GValue *value,
       guint v_uint);
extern
guint g_value_get_uint (const GValue *value);
extern
void g_value_set_long (GValue *value,
       glong v_long);
extern
glong g_value_get_long (const GValue *value);
extern
void g_value_set_ulong (GValue *value,
       gulong v_ulong);
extern
gulong g_value_get_ulong (const GValue *value);
extern
void g_value_set_int64 (GValue *value,
       gint64 v_int64);
extern
gint64 g_value_get_int64 (const GValue *value);
extern
void g_value_set_uint64 (GValue *value,
       guint64 v_uint64);
extern
guint64 g_value_get_uint64 (const GValue *value);
extern
void g_value_set_float (GValue *value,
       gfloat v_float);
extern
gfloat g_value_get_float (const GValue *value);
extern
void g_value_set_double (GValue *value,
       gdouble v_double);
extern
gdouble g_value_get_double (const GValue *value);
extern
void g_value_set_string (GValue *value,
       const gchar *v_string);
extern
void g_value_set_static_string (GValue *value,
       const gchar *v_string);
extern
const gchar * g_value_get_string (const GValue *value);
extern
gchar* g_value_dup_string (const GValue *value);
extern
void g_value_set_pointer (GValue *value,
       gpointer v_pointer);
extern
gpointer g_value_get_pointer (const GValue *value);
extern
GType g_gtype_get_type (void);
extern
void g_value_set_gtype (GValue *value,
       GType v_gtype);
extern
GType g_value_get_gtype (const GValue *value);
extern
void g_value_set_variant (GValue *value,
       GVariant *variant);
extern
void g_value_take_variant (GValue *value,
       GVariant *variant);
extern
GVariant* g_value_get_variant (const GValue *value);
extern
GVariant* g_value_dup_variant (const GValue *value);
extern
GType g_pointer_type_register_static (const gchar *name);
extern
gchar* g_strdup_value_contents (const GValue *value);
extern
void g_value_take_string (GValue *value,
       gchar *v_string);
extern
void g_value_set_string_take_ownership (GValue *value,
                                                 gchar *v_string);
typedef gchar* gchararray;
typedef GObject *GObject_autoptr;
 static inline void glib_autoptr_cleanup_GObject (GObject **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GInitiallyUnowned *GInitiallyUnowned_autoptr;
 static inline void glib_autoptr_cleanup_GInitiallyUnowned (GInitiallyUnowned **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
 static inline void glib_auto_cleanup_GValue (GValue *_ptr) { (g_value_unset) (_ptr); }
typedef enum {
  G_APP_INFO_CREATE_NONE = 0,
  G_APP_INFO_CREATE_NEEDS_TERMINAL = (1 << 0),
  G_APP_INFO_CREATE_SUPPORTS_URIS = (1 << 1),
  G_APP_INFO_CREATE_SUPPORTS_STARTUP_NOTIFICATION = (1 << 2)
} GAppInfoCreateFlags;
typedef enum {
  G_CONVERTER_NO_FLAGS = 0,
  G_CONVERTER_INPUT_AT_END = (1 << 0),
  G_CONVERTER_FLUSH = (1 << 1)
} GConverterFlags;
typedef enum {
  G_CONVERTER_ERROR = 0,
  G_CONVERTER_CONVERTED = 1,
  G_CONVERTER_FINISHED = 2,
  G_CONVERTER_FLUSHED = 3
} GConverterResult;
typedef enum {
  G_DATA_STREAM_BYTE_ORDER_BIG_ENDIAN,
  G_DATA_STREAM_BYTE_ORDER_LITTLE_ENDIAN,
  G_DATA_STREAM_BYTE_ORDER_HOST_ENDIAN
} GDataStreamByteOrder;
typedef enum {
  G_DATA_STREAM_NEWLINE_TYPE_LF,
  G_DATA_STREAM_NEWLINE_TYPE_CR,
  G_DATA_STREAM_NEWLINE_TYPE_CR_LF,
  G_DATA_STREAM_NEWLINE_TYPE_ANY
} GDataStreamNewlineType;
typedef enum {
  G_FILE_ATTRIBUTE_TYPE_INVALID = 0,
  G_FILE_ATTRIBUTE_TYPE_STRING,
  G_FILE_ATTRIBUTE_TYPE_BYTE_STRING,
  G_FILE_ATTRIBUTE_TYPE_BOOLEAN,
  G_FILE_ATTRIBUTE_TYPE_UINT32,
  G_FILE_ATTRIBUTE_TYPE_INT32,
  G_FILE_ATTRIBUTE_TYPE_UINT64,
  G_FILE_ATTRIBUTE_TYPE_INT64,
  G_FILE_ATTRIBUTE_TYPE_OBJECT,
  G_FILE_ATTRIBUTE_TYPE_STRINGV
} GFileAttributeType;
typedef enum {
  G_FILE_ATTRIBUTE_INFO_NONE = 0,
  G_FILE_ATTRIBUTE_INFO_COPY_WITH_FILE = (1 << 0),
  G_FILE_ATTRIBUTE_INFO_COPY_WHEN_MOVED = (1 << 1)
} GFileAttributeInfoFlags;
typedef enum {
  G_FILE_ATTRIBUTE_STATUS_UNSET = 0,
  G_FILE_ATTRIBUTE_STATUS_SET,
  G_FILE_ATTRIBUTE_STATUS_ERROR_SETTING
} GFileAttributeStatus;
typedef enum {
  G_FILE_QUERY_INFO_NONE = 0,
  G_FILE_QUERY_INFO_NOFOLLOW_SYMLINKS = (1 << 0)
} GFileQueryInfoFlags;
typedef enum {
  G_FILE_CREATE_NONE = 0,
  G_FILE_CREATE_PRIVATE = (1 << 0),
  G_FILE_CREATE_REPLACE_DESTINATION = (1 << 1)
} GFileCreateFlags;
typedef enum {
  G_FILE_MEASURE_NONE = 0,
  G_FILE_MEASURE_REPORT_ANY_ERROR = (1 << 1),
  G_FILE_MEASURE_APPARENT_SIZE = (1 << 2),
  G_FILE_MEASURE_NO_XDEV = (1 << 3)
} GFileMeasureFlags;
typedef enum {
  G_MOUNT_MOUNT_NONE = 0
} GMountMountFlags;
typedef enum {
  G_MOUNT_UNMOUNT_NONE = 0,
  G_MOUNT_UNMOUNT_FORCE = (1 << 0)
} GMountUnmountFlags;
typedef enum {
  G_DRIVE_START_NONE = 0
} GDriveStartFlags;
typedef enum {
  G_DRIVE_START_STOP_TYPE_UNKNOWN,
  G_DRIVE_START_STOP_TYPE_SHUTDOWN,
  G_DRIVE_START_STOP_TYPE_NETWORK,
  G_DRIVE_START_STOP_TYPE_MULTIDISK,
  G_DRIVE_START_STOP_TYPE_PASSWORD
} GDriveStartStopType;
typedef enum {
  G_FILE_COPY_NONE = 0,
  G_FILE_COPY_OVERWRITE = (1 << 0),
  G_FILE_COPY_BACKUP = (1 << 1),
  G_FILE_COPY_NOFOLLOW_SYMLINKS = (1 << 2),
  G_FILE_COPY_ALL_METADATA = (1 << 3),
  G_FILE_COPY_NO_FALLBACK_FOR_MOVE = (1 << 4),
  G_FILE_COPY_TARGET_DEFAULT_PERMS = (1 << 5)
} GFileCopyFlags;
typedef enum {
  G_FILE_MONITOR_NONE = 0,
  G_FILE_MONITOR_WATCH_MOUNTS = (1 << 0),
  G_FILE_MONITOR_SEND_MOVED = (1 << 1),
  G_FILE_MONITOR_WATCH_HARD_LINKS = (1 << 2),
  G_FILE_MONITOR_WATCH_MOVES = (1 << 3)
} GFileMonitorFlags;
typedef enum {
  G_FILE_TYPE_UNKNOWN = 0,
  G_FILE_TYPE_REGULAR,
  G_FILE_TYPE_DIRECTORY,
  G_FILE_TYPE_SYMBOLIC_LINK,
  G_FILE_TYPE_SPECIAL,
  G_FILE_TYPE_SHORTCUT,
  G_FILE_TYPE_MOUNTABLE
} GFileType;
typedef enum {
  G_FILESYSTEM_PREVIEW_TYPE_IF_ALWAYS = 0,
  G_FILESYSTEM_PREVIEW_TYPE_IF_LOCAL,
  G_FILESYSTEM_PREVIEW_TYPE_NEVER
} GFilesystemPreviewType;
typedef enum {
  G_FILE_MONITOR_EVENT_CHANGED,
  G_FILE_MONITOR_EVENT_CHANGES_DONE_HINT,
  G_FILE_MONITOR_EVENT_DELETED,
  G_FILE_MONITOR_EVENT_CREATED,
  G_FILE_MONITOR_EVENT_ATTRIBUTE_CHANGED,
  G_FILE_MONITOR_EVENT_PRE_UNMOUNT,
  G_FILE_MONITOR_EVENT_UNMOUNTED,
  G_FILE_MONITOR_EVENT_MOVED,
  G_FILE_MONITOR_EVENT_RENAMED,
  G_FILE_MONITOR_EVENT_MOVED_IN,
  G_FILE_MONITOR_EVENT_MOVED_OUT
} GFileMonitorEvent;
typedef enum {
  G_IO_ERROR_FAILED,
  G_IO_ERROR_NOT_FOUND,
  G_IO_ERROR_EXISTS,
  G_IO_ERROR_IS_DIRECTORY,
  G_IO_ERROR_NOT_DIRECTORY,
  G_IO_ERROR_NOT_EMPTY,
  G_IO_ERROR_NOT_REGULAR_FILE,
  G_IO_ERROR_NOT_SYMBOLIC_LINK,
  G_IO_ERROR_NOT_MOUNTABLE_FILE,
  G_IO_ERROR_FILENAME_TOO_LONG,
  G_IO_ERROR_INVALID_FILENAME,
  G_IO_ERROR_TOO_MANY_LINKS,
  G_IO_ERROR_NO_SPACE,
  G_IO_ERROR_INVALID_ARGUMENT,
  G_IO_ERROR_PERMISSION_DENIED,
  G_IO_ERROR_NOT_SUPPORTED,
  G_IO_ERROR_NOT_MOUNTED,
  G_IO_ERROR_ALREADY_MOUNTED,
  G_IO_ERROR_CLOSED,
  G_IO_ERROR_CANCELLED,
  G_IO_ERROR_PENDING,
  G_IO_ERROR_READ_ONLY,
  G_IO_ERROR_CANT_CREATE_BACKUP,
  G_IO_ERROR_WRONG_ETAG,
  G_IO_ERROR_TIMED_OUT,
  G_IO_ERROR_WOULD_RECURSE,
  G_IO_ERROR_BUSY,
  G_IO_ERROR_WOULD_BLOCK,
  G_IO_ERROR_HOST_NOT_FOUND,
  G_IO_ERROR_WOULD_MERGE,
  G_IO_ERROR_FAILED_HANDLED,
  G_IO_ERROR_TOO_MANY_OPEN_FILES,
  G_IO_ERROR_NOT_INITIALIZED,
  G_IO_ERROR_ADDRESS_IN_USE,
  G_IO_ERROR_PARTIAL_INPUT,
  G_IO_ERROR_INVALID_DATA,
  G_IO_ERROR_DBUS_ERROR,
  G_IO_ERROR_HOST_UNREACHABLE,
  G_IO_ERROR_NETWORK_UNREACHABLE,
  G_IO_ERROR_CONNECTION_REFUSED,
  G_IO_ERROR_PROXY_FAILED,
  G_IO_ERROR_PROXY_AUTH_FAILED,
  G_IO_ERROR_PROXY_NEED_AUTH,
  G_IO_ERROR_PROXY_NOT_ALLOWED,
  G_IO_ERROR_BROKEN_PIPE,
  G_IO_ERROR_CONNECTION_CLOSED = G_IO_ERROR_BROKEN_PIPE,
  G_IO_ERROR_NOT_CONNECTED,
  G_IO_ERROR_MESSAGE_TOO_LARGE
} GIOErrorEnum;
typedef enum {
  G_ASK_PASSWORD_NEED_PASSWORD = (1 << 0),
  G_ASK_PASSWORD_NEED_USERNAME = (1 << 1),
  G_ASK_PASSWORD_NEED_DOMAIN = (1 << 2),
  G_ASK_PASSWORD_SAVING_SUPPORTED = (1 << 3),
  G_ASK_PASSWORD_ANONYMOUS_SUPPORTED = (1 << 4)
} GAskPasswordFlags;
typedef enum {
  G_PASSWORD_SAVE_NEVER,
  G_PASSWORD_SAVE_FOR_SESSION,
  G_PASSWORD_SAVE_PERMANENTLY
} GPasswordSave;
typedef enum {
  G_MOUNT_OPERATION_HANDLED,
  G_MOUNT_OPERATION_ABORTED,
  G_MOUNT_OPERATION_UNHANDLED
} GMountOperationResult;
typedef enum {
  G_OUTPUT_STREAM_SPLICE_NONE = 0,
  G_OUTPUT_STREAM_SPLICE_CLOSE_SOURCE = (1 << 0),
  G_OUTPUT_STREAM_SPLICE_CLOSE_TARGET = (1 << 1)
} GOutputStreamSpliceFlags;
typedef enum {
  G_IO_STREAM_SPLICE_NONE = 0,
  G_IO_STREAM_SPLICE_CLOSE_STREAM1 = (1 << 0),
  G_IO_STREAM_SPLICE_CLOSE_STREAM2 = (1 << 1),
  G_IO_STREAM_SPLICE_WAIT_FOR_BOTH = (1 << 2)
} GIOStreamSpliceFlags;
typedef enum {
  G_EMBLEM_ORIGIN_UNKNOWN,
  G_EMBLEM_ORIGIN_DEVICE,
  G_EMBLEM_ORIGIN_LIVEMETADATA,
  G_EMBLEM_ORIGIN_TAG
} GEmblemOrigin;
typedef enum {
  G_RESOLVER_ERROR_NOT_FOUND,
  G_RESOLVER_ERROR_TEMPORARY_FAILURE,
  G_RESOLVER_ERROR_INTERNAL
} GResolverError;
typedef enum {
  G_RESOLVER_RECORD_SRV = 1,
  G_RESOLVER_RECORD_MX,
  G_RESOLVER_RECORD_TXT,
  G_RESOLVER_RECORD_SOA,
  G_RESOLVER_RECORD_NS
} GResolverRecordType;
typedef enum {
  G_RESOURCE_ERROR_NOT_FOUND,
  G_RESOURCE_ERROR_INTERNAL
} GResourceError;
typedef enum {
  G_RESOURCE_FLAGS_NONE = 0,
  G_RESOURCE_FLAGS_COMPRESSED = (1<<0)
} GResourceFlags;
typedef enum {
  G_RESOURCE_LOOKUP_FLAGS_NONE = 0
} GResourceLookupFlags;
typedef enum {
  G_SOCKET_FAMILY_INVALID,
  G_SOCKET_FAMILY_UNIX = 1,
  G_SOCKET_FAMILY_IPV4 = 2,
  G_SOCKET_FAMILY_IPV6 = 10
} GSocketFamily;
typedef enum
{
  G_SOCKET_TYPE_INVALID,
  G_SOCKET_TYPE_STREAM,
  G_SOCKET_TYPE_DATAGRAM,
  G_SOCKET_TYPE_SEQPACKET
} GSocketType;
typedef enum
{
  G_SOCKET_MSG_NONE,
  G_SOCKET_MSG_OOB = 1,
  G_SOCKET_MSG_PEEK = 2,
  G_SOCKET_MSG_DONTROUTE = 4
} GSocketMsgFlags;
typedef enum {
  G_SOCKET_PROTOCOL_UNKNOWN = -1,
  G_SOCKET_PROTOCOL_DEFAULT = 0,
  G_SOCKET_PROTOCOL_TCP = 6,
  G_SOCKET_PROTOCOL_UDP = 17,
  G_SOCKET_PROTOCOL_SCTP = 132
} GSocketProtocol;
typedef enum {
  G_ZLIB_COMPRESSOR_FORMAT_ZLIB,
  G_ZLIB_COMPRESSOR_FORMAT_GZIP,
  G_ZLIB_COMPRESSOR_FORMAT_RAW
} GZlibCompressorFormat;
typedef enum {
  G_UNIX_SOCKET_ADDRESS_INVALID,
  G_UNIX_SOCKET_ADDRESS_ANONYMOUS,
  G_UNIX_SOCKET_ADDRESS_PATH,
  G_UNIX_SOCKET_ADDRESS_ABSTRACT,
  G_UNIX_SOCKET_ADDRESS_ABSTRACT_PADDED
} GUnixSocketAddressType;
typedef enum
{
  G_BUS_TYPE_STARTER = -1,
  G_BUS_TYPE_NONE = 0,
  G_BUS_TYPE_SYSTEM = 1,
  G_BUS_TYPE_SESSION = 2
} GBusType;
typedef enum
{
  G_BUS_NAME_OWNER_FLAGS_NONE = 0,
  G_BUS_NAME_OWNER_FLAGS_ALLOW_REPLACEMENT = (1<<0),
  G_BUS_NAME_OWNER_FLAGS_REPLACE = (1<<1)
} GBusNameOwnerFlags;
typedef enum
{
  G_BUS_NAME_WATCHER_FLAGS_NONE = 0,
  G_BUS_NAME_WATCHER_FLAGS_AUTO_START = (1<<0)
} GBusNameWatcherFlags;
typedef enum
{
  G_DBUS_PROXY_FLAGS_NONE = 0,
  G_DBUS_PROXY_FLAGS_DO_NOT_LOAD_PROPERTIES = (1<<0),
  G_DBUS_PROXY_FLAGS_DO_NOT_CONNECT_SIGNALS = (1<<1),
  G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START = (1<<2),
  G_DBUS_PROXY_FLAGS_GET_INVALIDATED_PROPERTIES = (1<<3),
  G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START_AT_CONSTRUCTION = (1<<4)
} GDBusProxyFlags;
typedef enum
{
  G_DBUS_ERROR_FAILED,
  G_DBUS_ERROR_NO_MEMORY,
  G_DBUS_ERROR_SERVICE_UNKNOWN,
  G_DBUS_ERROR_NAME_HAS_NO_OWNER,
  G_DBUS_ERROR_NO_REPLY,
  G_DBUS_ERROR_IO_ERROR,
  G_DBUS_ERROR_BAD_ADDRESS,
  G_DBUS_ERROR_NOT_SUPPORTED,
  G_DBUS_ERROR_LIMITS_EXCEEDED,
  G_DBUS_ERROR_ACCESS_DENIED,
  G_DBUS_ERROR_AUTH_FAILED,
  G_DBUS_ERROR_NO_SERVER,
  G_DBUS_ERROR_TIMEOUT,
  G_DBUS_ERROR_NO_NETWORK,
  G_DBUS_ERROR_ADDRESS_IN_USE,
  G_DBUS_ERROR_DISCONNECTED,
  G_DBUS_ERROR_INVALID_ARGS,
  G_DBUS_ERROR_FILE_NOT_FOUND,
  G_DBUS_ERROR_FILE_EXISTS,
  G_DBUS_ERROR_UNKNOWN_METHOD,
  G_DBUS_ERROR_TIMED_OUT,
  G_DBUS_ERROR_MATCH_RULE_NOT_FOUND,
  G_DBUS_ERROR_MATCH_RULE_INVALID,
  G_DBUS_ERROR_SPAWN_EXEC_FAILED,
  G_DBUS_ERROR_SPAWN_FORK_FAILED,
  G_DBUS_ERROR_SPAWN_CHILD_EXITED,
  G_DBUS_ERROR_SPAWN_CHILD_SIGNALED,
  G_DBUS_ERROR_SPAWN_FAILED,
  G_DBUS_ERROR_SPAWN_SETUP_FAILED,
  G_DBUS_ERROR_SPAWN_CONFIG_INVALID,
  G_DBUS_ERROR_SPAWN_SERVICE_INVALID,
  G_DBUS_ERROR_SPAWN_SERVICE_NOT_FOUND,
  G_DBUS_ERROR_SPAWN_PERMISSIONS_INVALID,
  G_DBUS_ERROR_SPAWN_FILE_INVALID,
  G_DBUS_ERROR_SPAWN_NO_MEMORY,
  G_DBUS_ERROR_UNIX_PROCESS_ID_UNKNOWN,
  G_DBUS_ERROR_INVALID_SIGNATURE,
  G_DBUS_ERROR_INVALID_FILE_CONTENT,
  G_DBUS_ERROR_SELINUX_SECURITY_CONTEXT_UNKNOWN,
  G_DBUS_ERROR_ADT_AUDIT_DATA_UNKNOWN,
  G_DBUS_ERROR_OBJECT_PATH_IN_USE,
  G_DBUS_ERROR_UNKNOWN_OBJECT,
  G_DBUS_ERROR_UNKNOWN_INTERFACE,
  G_DBUS_ERROR_UNKNOWN_PROPERTY,
  G_DBUS_ERROR_PROPERTY_READ_ONLY
} GDBusError;
typedef enum {
  G_DBUS_CONNECTION_FLAGS_NONE = 0,
  G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_CLIENT = (1<<0),
  G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_SERVER = (1<<1),
  G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS = (1<<2),
  G_DBUS_CONNECTION_FLAGS_MESSAGE_BUS_CONNECTION = (1<<3),
  G_DBUS_CONNECTION_FLAGS_DELAY_MESSAGE_PROCESSING = (1<<4)
} GDBusConnectionFlags;
typedef enum {
  G_DBUS_CAPABILITY_FLAGS_NONE = 0,
  G_DBUS_CAPABILITY_FLAGS_UNIX_FD_PASSING = (1<<0)
} GDBusCapabilityFlags;
typedef enum {
  G_DBUS_CALL_FLAGS_NONE = 0,
  G_DBUS_CALL_FLAGS_NO_AUTO_START = (1<<0),
  G_DBUS_CALL_FLAGS_ALLOW_INTERACTIVE_AUTHORIZATION = (1<<1)
} GDBusCallFlags;
typedef enum {
  G_DBUS_MESSAGE_TYPE_INVALID,
  G_DBUS_MESSAGE_TYPE_METHOD_CALL,
  G_DBUS_MESSAGE_TYPE_METHOD_RETURN,
  G_DBUS_MESSAGE_TYPE_ERROR,
  G_DBUS_MESSAGE_TYPE_SIGNAL
} GDBusMessageType;
typedef enum {
  G_DBUS_MESSAGE_FLAGS_NONE = 0,
  G_DBUS_MESSAGE_FLAGS_NO_REPLY_EXPECTED = (1<<0),
  G_DBUS_MESSAGE_FLAGS_NO_AUTO_START = (1<<1),
  G_DBUS_MESSAGE_FLAGS_ALLOW_INTERACTIVE_AUTHORIZATION = (1<<2)
} GDBusMessageFlags;
typedef enum {
  G_DBUS_MESSAGE_HEADER_FIELD_INVALID,
  G_DBUS_MESSAGE_HEADER_FIELD_PATH,
  G_DBUS_MESSAGE_HEADER_FIELD_INTERFACE,
  G_DBUS_MESSAGE_HEADER_FIELD_MEMBER,
  G_DBUS_MESSAGE_HEADER_FIELD_ERROR_NAME,
  G_DBUS_MESSAGE_HEADER_FIELD_REPLY_SERIAL,
  G_DBUS_MESSAGE_HEADER_FIELD_DESTINATION,
  G_DBUS_MESSAGE_HEADER_FIELD_SENDER,
  G_DBUS_MESSAGE_HEADER_FIELD_SIGNATURE,
  G_DBUS_MESSAGE_HEADER_FIELD_NUM_UNIX_FDS
} GDBusMessageHeaderField;
typedef enum
{
  G_DBUS_PROPERTY_INFO_FLAGS_NONE = 0,
  G_DBUS_PROPERTY_INFO_FLAGS_READABLE = (1<<0),
  G_DBUS_PROPERTY_INFO_FLAGS_WRITABLE = (1<<1)
} GDBusPropertyInfoFlags;
typedef enum
{
  G_DBUS_SUBTREE_FLAGS_NONE = 0,
  G_DBUS_SUBTREE_FLAGS_DISPATCH_TO_UNENUMERATED_NODES = (1<<0)
} GDBusSubtreeFlags;
typedef enum
{
  G_DBUS_SERVER_FLAGS_NONE = 0,
  G_DBUS_SERVER_FLAGS_RUN_IN_THREAD = (1<<0),
  G_DBUS_SERVER_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS = (1<<1)
} GDBusServerFlags;
typedef enum
{
  G_DBUS_SIGNAL_FLAGS_NONE = 0,
  G_DBUS_SIGNAL_FLAGS_NO_MATCH_RULE = (1<<0),
  G_DBUS_SIGNAL_FLAGS_MATCH_ARG0_NAMESPACE = (1<<1),
  G_DBUS_SIGNAL_FLAGS_MATCH_ARG0_PATH = (1<<2)
} GDBusSignalFlags;
typedef enum
{
  G_DBUS_SEND_MESSAGE_FLAGS_NONE = 0,
  G_DBUS_SEND_MESSAGE_FLAGS_PRESERVE_SERIAL = (1<<0)
} GDBusSendMessageFlags;
typedef enum
{
  G_CREDENTIALS_TYPE_INVALID,
  G_CREDENTIALS_TYPE_LINUX_UCRED,
  G_CREDENTIALS_TYPE_FREEBSD_CMSGCRED,
  G_CREDENTIALS_TYPE_OPENBSD_SOCKPEERCRED,
  G_CREDENTIALS_TYPE_SOLARIS_UCRED,
  G_CREDENTIALS_TYPE_NETBSD_UNPCBID
} GCredentialsType;
typedef enum
{
  G_DBUS_MESSAGE_BYTE_ORDER_BIG_ENDIAN = 'B',
  G_DBUS_MESSAGE_BYTE_ORDER_LITTLE_ENDIAN = 'l'
} GDBusMessageByteOrder;
typedef enum
{
  G_APPLICATION_FLAGS_NONE,
  G_APPLICATION_IS_SERVICE = (1 << 0),
  G_APPLICATION_IS_LAUNCHER = (1 << 1),
  G_APPLICATION_HANDLES_OPEN = (1 << 2),
  G_APPLICATION_HANDLES_COMMAND_LINE = (1 << 3),
  G_APPLICATION_SEND_ENVIRONMENT = (1 << 4),
  G_APPLICATION_NON_UNIQUE = (1 << 5),
  G_APPLICATION_CAN_OVERRIDE_APP_ID = (1 << 6)
} GApplicationFlags;
typedef enum {
  G_TLS_ERROR_UNAVAILABLE,
  G_TLS_ERROR_MISC,
  G_TLS_ERROR_BAD_CERTIFICATE,
  G_TLS_ERROR_NOT_TLS,
  G_TLS_ERROR_HANDSHAKE,
  G_TLS_ERROR_CERTIFICATE_REQUIRED,
  G_TLS_ERROR_EOF
} GTlsError;
typedef enum {
  G_TLS_CERTIFICATE_UNKNOWN_CA = (1 << 0),
  G_TLS_CERTIFICATE_BAD_IDENTITY = (1 << 1),
  G_TLS_CERTIFICATE_NOT_ACTIVATED = (1 << 2),
  G_TLS_CERTIFICATE_EXPIRED = (1 << 3),
  G_TLS_CERTIFICATE_REVOKED = (1 << 4),
  G_TLS_CERTIFICATE_INSECURE = (1 << 5),
  G_TLS_CERTIFICATE_GENERIC_ERROR = (1 << 6),
  G_TLS_CERTIFICATE_VALIDATE_ALL = 0x007f
} GTlsCertificateFlags;
typedef enum {
  G_TLS_AUTHENTICATION_NONE,
  G_TLS_AUTHENTICATION_REQUESTED,
  G_TLS_AUTHENTICATION_REQUIRED
} GTlsAuthenticationMode;
typedef enum {
  G_TLS_REHANDSHAKE_NEVER,
  G_TLS_REHANDSHAKE_SAFELY,
  G_TLS_REHANDSHAKE_UNSAFELY
} GTlsRehandshakeMode;
typedef enum _GTlsPasswordFlags
{
  G_TLS_PASSWORD_NONE = 0,
  G_TLS_PASSWORD_RETRY = 1 << 1,
  G_TLS_PASSWORD_MANY_TRIES = 1 << 2,
  G_TLS_PASSWORD_FINAL_TRY = 1 << 3
} GTlsPasswordFlags;
typedef enum {
  G_TLS_INTERACTION_UNHANDLED,
  G_TLS_INTERACTION_HANDLED,
  G_TLS_INTERACTION_FAILED
} GTlsInteractionResult;
typedef enum
{
  G_DBUS_INTERFACE_SKELETON_FLAGS_NONE = 0,
  G_DBUS_INTERFACE_SKELETON_FLAGS_HANDLE_METHOD_INVOCATIONS_IN_THREAD = (1<<0)
} GDBusInterfaceSkeletonFlags;
typedef enum
{
  G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_NONE = 0,
  G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_DO_NOT_AUTO_START = (1<<0)
} GDBusObjectManagerClientFlags;
typedef enum {
  G_TLS_DATABASE_VERIFY_NONE = 0
} GTlsDatabaseVerifyFlags;
typedef enum {
  G_TLS_DATABASE_LOOKUP_NONE = 0,
  G_TLS_DATABASE_LOOKUP_KEYPAIR = 1
} GTlsDatabaseLookupFlags;
typedef enum {
  G_TLS_CERTIFICATE_REQUEST_NONE = 0
} GTlsCertificateRequestFlags;
typedef enum {
  G_IO_MODULE_SCOPE_NONE,
  G_IO_MODULE_SCOPE_BLOCK_DUPLICATES
} GIOModuleScopeFlags;
typedef enum {
  G_SOCKET_CLIENT_RESOLVING,
  G_SOCKET_CLIENT_RESOLVED,
  G_SOCKET_CLIENT_CONNECTING,
  G_SOCKET_CLIENT_CONNECTED,
  G_SOCKET_CLIENT_PROXY_NEGOTIATING,
  G_SOCKET_CLIENT_PROXY_NEGOTIATED,
  G_SOCKET_CLIENT_TLS_HANDSHAKING,
  G_SOCKET_CLIENT_TLS_HANDSHAKED,
  G_SOCKET_CLIENT_COMPLETE
} GSocketClientEvent;
typedef enum {
  G_SOCKET_LISTENER_BINDING,
  G_SOCKET_LISTENER_BOUND,
  G_SOCKET_LISTENER_LISTENING,
  G_SOCKET_LISTENER_LISTENED
} GSocketListenerEvent;
typedef enum {
  G_TEST_DBUS_NONE = 0
} GTestDBusFlags;
typedef enum {
  G_SUBPROCESS_FLAGS_NONE = 0,
  G_SUBPROCESS_FLAGS_STDIN_PIPE = (1u << 0),
  G_SUBPROCESS_FLAGS_STDIN_INHERIT = (1u << 1),
  G_SUBPROCESS_FLAGS_STDOUT_PIPE = (1u << 2),
  G_SUBPROCESS_FLAGS_STDOUT_SILENCE = (1u << 3),
  G_SUBPROCESS_FLAGS_STDERR_PIPE = (1u << 4),
  G_SUBPROCESS_FLAGS_STDERR_SILENCE = (1u << 5),
  G_SUBPROCESS_FLAGS_STDERR_MERGE = (1u << 6),
  G_SUBPROCESS_FLAGS_INHERIT_FDS = (1u << 7)
} GSubprocessFlags;
typedef enum {
  G_NOTIFICATION_PRIORITY_NORMAL,
  G_NOTIFICATION_PRIORITY_LOW,
  G_NOTIFICATION_PRIORITY_HIGH,
  G_NOTIFICATION_PRIORITY_URGENT
} GNotificationPriority;
typedef enum {
  G_NETWORK_CONNECTIVITY_LOCAL = 1,
  G_NETWORK_CONNECTIVITY_LIMITED = 2,
  G_NETWORK_CONNECTIVITY_PORTAL = 3,
  G_NETWORK_CONNECTIVITY_FULL = 4
} GNetworkConnectivity;
typedef struct _GAppLaunchContext GAppLaunchContext;
typedef struct _GAppInfo GAppInfo;
typedef struct _GAsyncResult GAsyncResult;
typedef struct _GAsyncInitable GAsyncInitable;
typedef struct _GBufferedInputStream GBufferedInputStream;
typedef struct _GBufferedOutputStream GBufferedOutputStream;
typedef struct _GCancellable GCancellable;
typedef struct _GCharsetConverter GCharsetConverter;
typedef struct _GConverter GConverter;
typedef struct _GConverterInputStream GConverterInputStream;
typedef struct _GConverterOutputStream GConverterOutputStream;
typedef struct _GDatagramBased GDatagramBased;
typedef struct _GDataInputStream GDataInputStream;
typedef struct _GSimplePermission GSimplePermission;
typedef struct _GZlibCompressor GZlibCompressor;
typedef struct _GZlibDecompressor GZlibDecompressor;
typedef struct _GSimpleActionGroup GSimpleActionGroup;
typedef struct _GRemoteActionGroup GRemoteActionGroup;
typedef struct _GDBusActionGroup GDBusActionGroup;
typedef struct _GActionMap GActionMap;
typedef struct _GActionGroup GActionGroup;
typedef struct _GPropertyAction GPropertyAction;
typedef struct _GSimpleAction GSimpleAction;
typedef struct _GAction GAction;
typedef struct _GApplication GApplication;
typedef struct _GApplicationCommandLine GApplicationCommandLine;
typedef struct _GSettingsBackend GSettingsBackend;
typedef struct _GSettings GSettings;
typedef struct _GPermission GPermission;
typedef struct _GMenuModel GMenuModel;
typedef struct _GNotification GNotification;
typedef struct _GDrive GDrive;
typedef struct _GFileEnumerator GFileEnumerator;
typedef struct _GFileMonitor GFileMonitor;
typedef struct _GFilterInputStream GFilterInputStream;
typedef struct _GFilterOutputStream GFilterOutputStream;
typedef struct _GFile GFile;
typedef struct _GFileInfo GFileInfo;
typedef struct _GFileAttributeMatcher GFileAttributeMatcher;
typedef struct _GFileAttributeInfo GFileAttributeInfo;
typedef struct _GFileAttributeInfoList GFileAttributeInfoList;
typedef struct _GFileDescriptorBased GFileDescriptorBased;
typedef struct _GFileInputStream GFileInputStream;
typedef struct _GFileOutputStream GFileOutputStream;
typedef struct _GFileIOStream GFileIOStream;
typedef struct _GFileIcon GFileIcon;
typedef struct _GFilenameCompleter GFilenameCompleter;
typedef struct _GIcon GIcon;
typedef struct _GInetAddress GInetAddress;
typedef struct _GInetAddressMask GInetAddressMask;
typedef struct _GInetSocketAddress GInetSocketAddress;
typedef struct _GNativeSocketAddress GNativeSocketAddress;
typedef struct _GInputStream GInputStream;
typedef struct _GInitable GInitable;
typedef struct _GIOModule GIOModule;
typedef struct _GIOExtensionPoint GIOExtensionPoint;
typedef struct _GIOExtension GIOExtension;
typedef struct _GIOSchedulerJob GIOSchedulerJob;
typedef struct _GIOStreamAdapter GIOStreamAdapter;
typedef struct _GLoadableIcon GLoadableIcon;
typedef struct _GBytesIcon GBytesIcon;
typedef struct _GMemoryInputStream GMemoryInputStream;
typedef struct _GMemoryOutputStream GMemoryOutputStream;
typedef struct _GMount GMount;
typedef struct _GMountOperation GMountOperation;
typedef struct _GNetworkAddress GNetworkAddress;
typedef struct _GNetworkMonitor GNetworkMonitor;
typedef struct _GNetworkService GNetworkService;
typedef struct _GOutputStream GOutputStream;
typedef struct _GIOStream GIOStream;
typedef struct _GSimpleIOStream GSimpleIOStream;
typedef struct _GPollableInputStream GPollableInputStream;
typedef struct _GPollableOutputStream GPollableOutputStream;
typedef struct _GResolver GResolver;
typedef struct _GResource GResource;
typedef struct _GSeekable GSeekable;
typedef struct _GSimpleAsyncResult GSimpleAsyncResult;
typedef struct _GSocket GSocket;
typedef struct _GSocketControlMessage GSocketControlMessage;
typedef struct _GSocketClient GSocketClient;
typedef struct _GSocketConnection GSocketConnection;
typedef struct _GSocketListener GSocketListener;
typedef struct _GSocketService GSocketService;
typedef struct _GSocketAddress GSocketAddress;
typedef struct _GSocketAddressEnumerator GSocketAddressEnumerator;
typedef struct _GSocketConnectable GSocketConnectable;
typedef struct _GSrvTarget GSrvTarget;
typedef struct _GTask GTask;
typedef struct _GTcpConnection GTcpConnection;
typedef struct _GTcpWrapperConnection GTcpWrapperConnection;
typedef struct _GThreadedSocketService GThreadedSocketService;
typedef struct _GDtlsConnection GDtlsConnection;
typedef struct _GDtlsClientConnection GDtlsClientConnection;
typedef struct _GDtlsServerConnection GDtlsServerConnection;
typedef struct _GThemedIcon GThemedIcon;
typedef struct _GTlsCertificate GTlsCertificate;
typedef struct _GTlsClientConnection GTlsClientConnection;
typedef struct _GTlsConnection GTlsConnection;
typedef struct _GTlsDatabase GTlsDatabase;
typedef struct _GTlsFileDatabase GTlsFileDatabase;
typedef struct _GTlsInteraction GTlsInteraction;
typedef struct _GTlsPassword GTlsPassword;
typedef struct _GTlsServerConnection GTlsServerConnection;
typedef struct _GVfs GVfs;
typedef struct _GProxyResolver GProxyResolver;
typedef struct _GProxy GProxy;
typedef struct _GProxyAddress GProxyAddress;
typedef struct _GProxyAddressEnumerator GProxyAddressEnumerator;
typedef struct _GVolume GVolume;
typedef struct _GVolumeMonitor GVolumeMonitor;
typedef void (*GAsyncReadyCallback) (GObject *source_object,
         GAsyncResult *res,
         gpointer user_data);
typedef void (*GFileProgressCallback) (goffset current_num_bytes,
                                       goffset total_num_bytes,
                                       gpointer user_data);
typedef gboolean (* GFileReadMoreCallback) (const char *file_contents,
                                            goffset file_size,
                                            gpointer callback_data);
typedef void (* GFileMeasureProgressCallback) (gboolean reporting,
                                               guint64 current_size,
                                               guint64 num_dirs,
                                               guint64 num_files,
                                               gpointer user_data);
typedef gboolean (*GIOSchedulerJobFunc) (GIOSchedulerJob *job,
      GCancellable *cancellable,
      gpointer user_data);
typedef void (*GSimpleAsyncThreadFunc) (GSimpleAsyncResult *res,
                                        GObject *object,
                                        GCancellable *cancellable);
typedef gboolean (*GSocketSourceFunc) (GSocket *socket,
           GIOCondition condition,
           gpointer user_data);
typedef gboolean (*GDatagramBasedSourceFunc) (GDatagramBased *datagram_based,
                                              GIOCondition condition,
                                              gpointer user_data);
typedef struct _GInputVector GInputVector;
struct _GInputVector {
  gpointer buffer;
  gsize size;
};
typedef struct _GInputMessage GInputMessage;
struct _GInputMessage {
  GSocketAddress **address;
  GInputVector *vectors;
  guint num_vectors;
  gsize bytes_received;
  gint flags;
  GSocketControlMessage ***control_messages;
  guint *num_control_messages;
};
typedef struct _GOutputVector GOutputVector;
struct _GOutputVector {
  gconstpointer buffer;
  gsize size;
};
typedef struct _GOutputMessage GOutputMessage;
struct _GOutputMessage {
  GSocketAddress *address;
  GOutputVector *vectors;
  guint num_vectors;
  guint bytes_sent;
  GSocketControlMessage **control_messages;
  guint num_control_messages;
};
typedef struct _GCredentials GCredentials;
typedef struct _GUnixCredentialsMessage GUnixCredentialsMessage;
typedef struct _GUnixFDList GUnixFDList;
typedef struct _GDBusMessage GDBusMessage;
typedef struct _GDBusConnection GDBusConnection;
typedef struct _GDBusProxy GDBusProxy;
typedef struct _GDBusMethodInvocation GDBusMethodInvocation;
typedef struct _GDBusServer GDBusServer;
typedef struct _GDBusAuthObserver GDBusAuthObserver;
typedef struct _GDBusErrorEntry GDBusErrorEntry;
typedef struct _GDBusInterfaceVTable GDBusInterfaceVTable;
typedef struct _GDBusSubtreeVTable GDBusSubtreeVTable;
typedef struct _GDBusAnnotationInfo GDBusAnnotationInfo;
typedef struct _GDBusArgInfo GDBusArgInfo;
typedef struct _GDBusMethodInfo GDBusMethodInfo;
typedef struct _GDBusSignalInfo GDBusSignalInfo;
typedef struct _GDBusPropertyInfo GDBusPropertyInfo;
typedef struct _GDBusInterfaceInfo GDBusInterfaceInfo;
typedef struct _GDBusNodeInfo GDBusNodeInfo;
typedef gboolean (*GCancellableSourceFunc) (GCancellable *cancellable,
         gpointer user_data);
typedef gboolean (*GPollableSourceFunc) (GObject *pollable_stream,
      gpointer user_data);
typedef struct _GDBusInterface GDBusInterface;
typedef struct _GDBusInterfaceSkeleton GDBusInterfaceSkeleton;
typedef struct _GDBusObject GDBusObject;
typedef struct _GDBusObjectSkeleton GDBusObjectSkeleton;
typedef struct _GDBusObjectProxy GDBusObjectProxy;
typedef struct _GDBusObjectManager GDBusObjectManager;
typedef struct _GDBusObjectManagerClient GDBusObjectManagerClient;
typedef struct _GDBusObjectManagerServer GDBusObjectManagerServer;
typedef GType (*GDBusProxyTypeFunc) (GDBusObjectManagerClient *manager,
                                     const gchar *object_path,
                                     const gchar *interface_name,
                                     gpointer user_data);
typedef struct _GTestDBus GTestDBus;
typedef struct _GSubprocess GSubprocess;
typedef struct _GSubprocessLauncher GSubprocessLauncher;
typedef struct _GActionInterface GActionInterface;
struct _GActionInterface
{
  GTypeInterface g_iface;
  const gchar * (* get_name) (GAction *action);
  const GVariantType * (* get_parameter_type) (GAction *action);
  const GVariantType * (* get_state_type) (GAction *action);
  GVariant * (* get_state_hint) (GAction *action);
  gboolean (* get_enabled) (GAction *action);
  GVariant * (* get_state) (GAction *action);
  void (* change_state) (GAction *action,
                                                 GVariant *value);
  void (* activate) (GAction *action,
                                                 GVariant *parameter);
};
extern
GType g_action_get_type (void) __attribute__((__const__));
extern
const gchar * g_action_get_name (GAction *action);
extern
const GVariantType * g_action_get_parameter_type (GAction *action);
extern
const GVariantType * g_action_get_state_type (GAction *action);
extern
GVariant * g_action_get_state_hint (GAction *action);
extern
gboolean g_action_get_enabled (GAction *action);
extern
GVariant * g_action_get_state (GAction *action);
extern
void g_action_change_state (GAction *action,
                                                                         GVariant *value);
extern
void g_action_activate (GAction *action,
                                                                         GVariant *parameter);
extern
gboolean g_action_name_is_valid (const gchar *action_name);
extern
gboolean g_action_parse_detailed_name (const gchar *detailed_name,
                                                                         gchar **action_name,
                                                                         GVariant **target_value,
                                                                         GError **error);
extern
gchar * g_action_print_detailed_name (const gchar *action_name,
                                                                         GVariant *target_value);
typedef struct _GActionGroupInterface GActionGroupInterface;
struct _GActionGroupInterface
{
  GTypeInterface g_iface;
  gboolean (* has_action) (GActionGroup *action_group,
                                                        const gchar *action_name);
  gchar ** (* list_actions) (GActionGroup *action_group);
  gboolean (* get_action_enabled) (GActionGroup *action_group,
                                                        const gchar *action_name);
  const GVariantType * (* get_action_parameter_type) (GActionGroup *action_group,
                                                        const gchar *action_name);
  const GVariantType * (* get_action_state_type) (GActionGroup *action_group,
                                                        const gchar *action_name);
  GVariant * (* get_action_state_hint) (GActionGroup *action_group,
                                                        const gchar *action_name);
  GVariant * (* get_action_state) (GActionGroup *action_group,
                                                        const gchar *action_name);
  void (* change_action_state) (GActionGroup *action_group,
                                                        const gchar *action_name,
                                                        GVariant *value);
  void (* activate_action) (GActionGroup *action_group,
                                                        const gchar *action_name,
                                                        GVariant *parameter);
  void (* action_added) (GActionGroup *action_group,
                                                        const gchar *action_name);
  void (* action_removed) (GActionGroup *action_group,
                                                        const gchar *action_name);
  void (* action_enabled_changed) (GActionGroup *action_group,
                                                        const gchar *action_name,
                                                        gboolean enabled);
  void (* action_state_changed) (GActionGroup *action_group,
                                                        const gchar *action_name,
                                                        GVariant *state);
  gboolean (* query_action) (GActionGroup *action_group,
                                                        const gchar *action_name,
                                                        gboolean *enabled,
                                                        const GVariantType **parameter_type,
                                                        const GVariantType **state_type,
                                                        GVariant **state_hint,
                                                        GVariant **state);
};
extern
GType g_action_group_get_type (void) __attribute__((__const__));
extern
gboolean g_action_group_has_action (GActionGroup *action_group,
                                                                         const gchar *action_name);
extern
gchar ** g_action_group_list_actions (GActionGroup *action_group);
extern
const GVariantType * g_action_group_get_action_parameter_type (GActionGroup *action_group,
                                                                         const gchar *action_name);
extern
const GVariantType * g_action_group_get_action_state_type (GActionGroup *action_group,
                                                                         const gchar *action_name);
extern
GVariant * g_action_group_get_action_state_hint (GActionGroup *action_group,
                                                                         const gchar *action_name);
extern
gboolean g_action_group_get_action_enabled (GActionGroup *action_group,
                                                                         const gchar *action_name);
extern
GVariant * g_action_group_get_action_state (GActionGroup *action_group,
                                                                         const gchar *action_name);
extern
void g_action_group_change_action_state (GActionGroup *action_group,
                                                                         const gchar *action_name,
                                                                         GVariant *value);
extern
void g_action_group_activate_action (GActionGroup *action_group,
                                                                         const gchar *action_name,
                                                                         GVariant *parameter);
extern
void g_action_group_action_added (GActionGroup *action_group,
                                                                         const gchar *action_name);
extern
void g_action_group_action_removed (GActionGroup *action_group,
                                                                         const gchar *action_name);
extern
void g_action_group_action_enabled_changed (GActionGroup *action_group,
                                                                         const gchar *action_name,
                                                                         gboolean enabled);
extern
void g_action_group_action_state_changed (GActionGroup *action_group,
                                                                         const gchar *action_name,
                                                                         GVariant *state);
extern
gboolean g_action_group_query_action (GActionGroup *action_group,
                                                                         const gchar *action_name,
                                                                         gboolean *enabled,
                                                                         const GVariantType **parameter_type,
                                                                         const GVariantType **state_type,
                                                                         GVariant **state_hint,
                                                                         GVariant **state);
extern
guint g_dbus_connection_export_action_group (GDBusConnection *connection,
                                                                         const gchar *object_path,
                                                                         GActionGroup *action_group,
                                                                         GError **error);
extern
void g_dbus_connection_unexport_action_group (GDBusConnection *connection,
                                                                         guint export_id);
typedef struct _GActionMapInterface GActionMapInterface;
typedef struct _GActionEntry GActionEntry;
struct _GActionMapInterface
{
  GTypeInterface g_iface;
  GAction * (* lookup_action) (GActionMap *action_map,
                               const gchar *action_name);
  void (* add_action) (GActionMap *action_map,
                               GAction *action);
  void (* remove_action) (GActionMap *action_map,
                               const gchar *action_name);
};
struct _GActionEntry
{
  const gchar *name;
  void (* activate) (GSimpleAction *action,
                     GVariant *parameter,
                     gpointer user_data);
  const gchar *parameter_type;
  const gchar *state;
  void (* change_state) (GSimpleAction *action,
                         GVariant *value,
                         gpointer user_data);
  gsize padding[3];
};
extern
GType g_action_map_get_type (void) __attribute__((__const__));
extern
GAction * g_action_map_lookup_action (GActionMap *action_map,
                                                                         const gchar *action_name);
extern
void g_action_map_add_action (GActionMap *action_map,
                                                                         GAction *action);
extern
void g_action_map_remove_action (GActionMap *action_map,
                                                                         const gchar *action_name);
extern
void g_action_map_add_action_entries (GActionMap *action_map,
                                                                         const GActionEntry *entries,
                                                                         gint n_entries,
                                                                         gpointer user_data);
typedef struct _GAppLaunchContextClass GAppLaunchContextClass;
typedef struct _GAppLaunchContextPrivate GAppLaunchContextPrivate;
typedef struct _GAppInfoIface GAppInfoIface;
struct _GAppInfoIface
{
  GTypeInterface g_iface;
  GAppInfo * (* dup) (GAppInfo *appinfo);
  gboolean (* equal) (GAppInfo *appinfo1,
                                                 GAppInfo *appinfo2);
  const char * (* get_id) (GAppInfo *appinfo);
  const char * (* get_name) (GAppInfo *appinfo);
  const char * (* get_description) (GAppInfo *appinfo);
  const char * (* get_executable) (GAppInfo *appinfo);
  GIcon * (* get_icon) (GAppInfo *appinfo);
  gboolean (* launch) (GAppInfo *appinfo,
                                                 GList *files,
                                                 GAppLaunchContext *launch_context,
                                                 GError **error);
  gboolean (* supports_uris) (GAppInfo *appinfo);
  gboolean (* supports_files) (GAppInfo *appinfo);
  gboolean (* launch_uris) (GAppInfo *appinfo,
                                                 GList *uris,
                                                 GAppLaunchContext *launch_context,
                                                 GError **error);
  gboolean (* should_show) (GAppInfo *appinfo);
  gboolean (* set_as_default_for_type) (GAppInfo *appinfo,
                                                 const char *content_type,
                                                 GError **error);
  gboolean (* set_as_default_for_extension) (GAppInfo *appinfo,
                                                 const char *extension,
                                                 GError **error);
  gboolean (* add_supports_type) (GAppInfo *appinfo,
                                                 const char *content_type,
                                                 GError **error);
  gboolean (* can_remove_supports_type) (GAppInfo *appinfo);
  gboolean (* remove_supports_type) (GAppInfo *appinfo,
                                                 const char *content_type,
                                                 GError **error);
  gboolean (* can_delete) (GAppInfo *appinfo);
  gboolean (* do_delete) (GAppInfo *appinfo);
  const char * (* get_commandline) (GAppInfo *appinfo);
  const char * (* get_display_name) (GAppInfo *appinfo);
  gboolean (* set_as_last_used_for_type) (GAppInfo *appinfo,
                                                 const char *content_type,
                                                 GError **error);
  const char ** (* get_supported_types) (GAppInfo *appinfo);
};
extern
GType g_app_info_get_type (void) __attribute__((__const__));
extern
GAppInfo * g_app_info_create_from_commandline (const char *commandline,
                                                     const char *application_name,
                                                     GAppInfoCreateFlags flags,
                                                     GError **error);
extern
GAppInfo * g_app_info_dup (GAppInfo *appinfo);
extern
gboolean g_app_info_equal (GAppInfo *appinfo1,
                                                     GAppInfo *appinfo2);
extern
const char *g_app_info_get_id (GAppInfo *appinfo);
extern
const char *g_app_info_get_name (GAppInfo *appinfo);
extern
const char *g_app_info_get_display_name (GAppInfo *appinfo);
extern
const char *g_app_info_get_description (GAppInfo *appinfo);
extern
const char *g_app_info_get_executable (GAppInfo *appinfo);
extern
const char *g_app_info_get_commandline (GAppInfo *appinfo);
extern
GIcon * g_app_info_get_icon (GAppInfo *appinfo);
extern
gboolean g_app_info_launch (GAppInfo *appinfo,
                                                     GList *files,
                                                     GAppLaunchContext *launch_context,
                                                     GError **error);
extern
gboolean g_app_info_supports_uris (GAppInfo *appinfo);
extern
gboolean g_app_info_supports_files (GAppInfo *appinfo);
extern
gboolean g_app_info_launch_uris (GAppInfo *appinfo,
                                                     GList *uris,
                                                     GAppLaunchContext *launch_context,
                                                     GError **error);
extern
gboolean g_app_info_should_show (GAppInfo *appinfo);
extern
gboolean g_app_info_set_as_default_for_type (GAppInfo *appinfo,
                                                     const char *content_type,
                                                     GError **error);
extern
gboolean g_app_info_set_as_default_for_extension (GAppInfo *appinfo,
                                                     const char *extension,
                                                     GError **error);
extern
gboolean g_app_info_add_supports_type (GAppInfo *appinfo,
                                                     const char *content_type,
                                                     GError **error);
extern
gboolean g_app_info_can_remove_supports_type (GAppInfo *appinfo);
extern
gboolean g_app_info_remove_supports_type (GAppInfo *appinfo,
                                                     const char *content_type,
                                                     GError **error);
extern
const char **g_app_info_get_supported_types (GAppInfo *appinfo);
extern
gboolean g_app_info_can_delete (GAppInfo *appinfo);
extern
gboolean g_app_info_delete (GAppInfo *appinfo);
extern
gboolean g_app_info_set_as_last_used_for_type (GAppInfo *appinfo,
                                                     const char *content_type,
                                                     GError **error);
extern
GList * g_app_info_get_all (void);
extern
GList * g_app_info_get_all_for_type (const char *content_type);
extern
GList * g_app_info_get_recommended_for_type (const gchar *content_type);
extern
GList * g_app_info_get_fallback_for_type (const gchar *content_type);
extern
void g_app_info_reset_type_associations (const char *content_type);
extern
GAppInfo *g_app_info_get_default_for_type (const char *content_type,
                                                  gboolean must_support_uris);
extern
GAppInfo *g_app_info_get_default_for_uri_scheme (const char *uri_scheme);
extern
gboolean g_app_info_launch_default_for_uri (const char *uri,
                                                  GAppLaunchContext *launch_context,
                                                  GError **error);
struct _GAppLaunchContext
{
  GObject parent_instance;
  GAppLaunchContextPrivate *priv;
};
struct _GAppLaunchContextClass
{
  GObjectClass parent_class;
  char * (* get_display) (GAppLaunchContext *context,
                                    GAppInfo *info,
                                    GList *files);
  char * (* get_startup_notify_id) (GAppLaunchContext *context,
                                    GAppInfo *info,
                                    GList *files);
  void (* launch_failed) (GAppLaunchContext *context,
                                    const char *startup_notify_id);
  void (* launched) (GAppLaunchContext *context,
                                    GAppInfo *info,
                                    GVariant *platform_data);
  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
};
extern
GType g_app_launch_context_get_type (void) __attribute__((__const__));
extern
GAppLaunchContext *g_app_launch_context_new (void);
extern
void g_app_launch_context_setenv (GAppLaunchContext *context,
                                                               const char *variable,
                                                               const char *value);
extern
void g_app_launch_context_unsetenv (GAppLaunchContext *context,
                                                               const char *variable);
extern
char ** g_app_launch_context_get_environment (GAppLaunchContext *context);
extern
char * g_app_launch_context_get_display (GAppLaunchContext *context,
                                                               GAppInfo *info,
                                                               GList *files);
extern
char * g_app_launch_context_get_startup_notify_id (GAppLaunchContext *context,
                                                               GAppInfo *info,
                                                               GList *files);
extern
void g_app_launch_context_launch_failed (GAppLaunchContext *context,
                                                               const char * startup_notify_id);
typedef struct _GAppInfoMonitor GAppInfoMonitor;
extern
GType g_app_info_monitor_get_type (void);
extern
GAppInfoMonitor * g_app_info_monitor_get (void);
typedef struct _GApplicationPrivate GApplicationPrivate;
typedef struct _GApplicationClass GApplicationClass;
struct _GApplication
{
  GObject parent_instance;
  GApplicationPrivate *priv;
};
struct _GApplicationClass
{
  GObjectClass parent_class;
  void (* startup) (GApplication *application);
  void (* activate) (GApplication *application);
  void (* open) (GApplication *application,
                                                     GFile **files,
                                                     gint n_files,
                                                     const gchar *hint);
  int (* command_line) (GApplication *application,
                                                     GApplicationCommandLine *command_line);
  gboolean (* local_command_line) (GApplication *application,
                                                     gchar ***arguments,
                                                     int *exit_status);
  void (* before_emit) (GApplication *application,
                                                     GVariant *platform_data);
  void (* after_emit) (GApplication *application,
                                                     GVariant *platform_data);
  void (* add_platform_data) (GApplication *application,
                                                     GVariantBuilder *builder);
  void (* quit_mainloop) (GApplication *application);
  void (* run_mainloop) (GApplication *application);
  void (* shutdown) (GApplication *application);
  gboolean (* dbus_register) (GApplication *application,
                                                     GDBusConnection *connection,
                                                     const gchar *object_path,
                                                     GError **error);
  void (* dbus_unregister) (GApplication *application,
                                                     GDBusConnection *connection,
                                                     const gchar *object_path);
  gint (* handle_local_options)(GApplication *application,
                                                     GVariantDict *options);
  gpointer padding[8];
};
extern
GType g_application_get_type (void) __attribute__((__const__));
extern
gboolean g_application_id_is_valid (const gchar *application_id);
extern
GApplication * g_application_new (const gchar *application_id,
                                                                         GApplicationFlags flags);
extern
const gchar * g_application_get_application_id (GApplication *application);
extern
void g_application_set_application_id (GApplication *application,
                                                                         const gchar *application_id);
extern
GDBusConnection * g_application_get_dbus_connection (GApplication *application);
extern
const gchar * g_application_get_dbus_object_path (GApplication *application);
extern
guint g_application_get_inactivity_timeout (GApplication *application);
extern
void g_application_set_inactivity_timeout (GApplication *application,
                                                                         guint inactivity_timeout);
extern
GApplicationFlags g_application_get_flags (GApplication *application);
extern
void g_application_set_flags (GApplication *application,
                                                                         GApplicationFlags flags);
extern
const gchar * g_application_get_resource_base_path (GApplication *application);
extern
void g_application_set_resource_base_path (GApplication *application,
                                                                         const gchar *resource_path);
extern
void g_application_set_action_group (GApplication *application,
                                                                         GActionGroup *action_group);
extern
void g_application_add_main_option_entries (GApplication *application,
                                                                         const GOptionEntry *entries);
extern
void g_application_add_main_option (GApplication *application,
                                                                         const char *long_name,
                                                                         char short_name,
                                                                         GOptionFlags flags,
                                                                         GOptionArg arg,
                                                                         const char *description,
                                                                         const char *arg_description);
extern
void g_application_add_option_group (GApplication *application,
                                                                         GOptionGroup *group);
extern
gboolean g_application_get_is_registered (GApplication *application);
extern
gboolean g_application_get_is_remote (GApplication *application);
extern
gboolean g_application_register (GApplication *application,
                                                                         GCancellable *cancellable,
                                                                         GError **error);
extern
void g_application_hold (GApplication *application);
extern
void g_application_release (GApplication *application);
extern
void g_application_activate (GApplication *application);
extern
void g_application_open (GApplication *application,
                                                                         GFile **files,
                                                                         gint n_files,
                                                                         const gchar *hint);
extern
int g_application_run (GApplication *application,
                                                                         int argc,
                                                                         char **argv);
extern
void g_application_quit (GApplication *application);
extern
GApplication * g_application_get_default (void);
extern
void g_application_set_default (GApplication *application);
extern
void g_application_mark_busy (GApplication *application);
extern
void g_application_unmark_busy (GApplication *application);
extern
gboolean g_application_get_is_busy (GApplication *application);
extern
void g_application_send_notification (GApplication *application,
                                                                         const gchar *id,
                                                                         GNotification *notification);
extern
void g_application_withdraw_notification (GApplication *application,
                                                                         const gchar *id);
extern
void g_application_bind_busy_property (GApplication *application,
                                                                         gpointer object,
                                                                         const gchar *property);
extern
void g_application_unbind_busy_property (GApplication *application,
                                                                         gpointer object,
                                                                         const gchar *property);
typedef struct _GApplicationCommandLinePrivate GApplicationCommandLinePrivate;
typedef struct _GApplicationCommandLineClass GApplicationCommandLineClass;
struct _GApplicationCommandLine
{
  GObject parent_instance;
  GApplicationCommandLinePrivate *priv;
};
struct _GApplicationCommandLineClass
{
  GObjectClass parent_class;
  void (* print_literal) (GApplicationCommandLine *cmdline,
                                                 const gchar *message);
  void (* printerr_literal) (GApplicationCommandLine *cmdline,
                                                 const gchar *message);
  GInputStream * (* get_stdin) (GApplicationCommandLine *cmdline);
  gpointer padding[11];
};
extern
GType g_application_command_line_get_type (void) __attribute__((__const__));
extern
gchar ** g_application_command_line_get_arguments (GApplicationCommandLine *cmdline,
                                                                         int *argc);
extern
GVariantDict * g_application_command_line_get_options_dict (GApplicationCommandLine *cmdline);
extern
GInputStream * g_application_command_line_get_stdin (GApplicationCommandLine *cmdline);
extern
const gchar * const * g_application_command_line_get_environ (GApplicationCommandLine *cmdline);
extern
const gchar * g_application_command_line_getenv (GApplicationCommandLine *cmdline,
                                                                         const gchar *name);
extern
const gchar * g_application_command_line_get_cwd (GApplicationCommandLine *cmdline);
extern
gboolean g_application_command_line_get_is_remote (GApplicationCommandLine *cmdline);
extern
void g_application_command_line_print (GApplicationCommandLine *cmdline,
                                                                         const gchar *format,
                                                                         ...) __attribute__((__format__ (__printf__, 2, 3)));
extern
void g_application_command_line_printerr (GApplicationCommandLine *cmdline,
                                                                         const gchar *format,
                                                                         ...) __attribute__((__format__ (__printf__, 2, 3)));
extern
int g_application_command_line_get_exit_status (GApplicationCommandLine *cmdline);
extern
void g_application_command_line_set_exit_status (GApplicationCommandLine *cmdline,
                                                                         int exit_status);
extern
GVariant * g_application_command_line_get_platform_data (GApplicationCommandLine *cmdline);
extern
GFile * g_application_command_line_create_file_for_arg (GApplicationCommandLine *cmdline,
                                                                         const gchar *arg);
typedef struct _GInitableIface GInitableIface;
struct _GInitableIface
{
  GTypeInterface g_iface;
  gboolean (* init) (GInitable *initable,
   GCancellable *cancellable,
   GError **error);
};
extern
GType g_initable_get_type (void) __attribute__((__const__));
extern
gboolean g_initable_init (GInitable *initable,
    GCancellable *cancellable,
    GError **error);
extern
gpointer g_initable_new (GType object_type,
    GCancellable *cancellable,
    GError **error,
    const gchar *first_property_name,
    ...);
extern
gpointer g_initable_newv (GType object_type,
    guint n_parameters,
    GParameter *parameters,
    GCancellable *cancellable,
    GError **error);
extern
GObject* g_initable_new_valist (GType object_type,
    const gchar *first_property_name,
    va_list var_args,
    GCancellable *cancellable,
    GError **error);
typedef struct _GAsyncInitableIface GAsyncInitableIface;
struct _GAsyncInitableIface
{
  GTypeInterface g_iface;
  void (* init_async) (GAsyncInitable *initable,
       int io_priority,
       GCancellable *cancellable,
       GAsyncReadyCallback callback,
       gpointer user_data);
  gboolean (* init_finish) (GAsyncInitable *initable,
       GAsyncResult *res,
       GError **error);
};
extern
GType g_async_initable_get_type (void) __attribute__((__const__));
extern
void g_async_initable_init_async (GAsyncInitable *initable,
         int io_priority,
         GCancellable *cancellable,
         GAsyncReadyCallback callback,
         gpointer user_data);
extern
gboolean g_async_initable_init_finish (GAsyncInitable *initable,
         GAsyncResult *res,
         GError **error);
extern
void g_async_initable_new_async (GType object_type,
         int io_priority,
         GCancellable *cancellable,
         GAsyncReadyCallback callback,
         gpointer user_data,
         const gchar *first_property_name,
         ...);
extern
void g_async_initable_newv_async (GType object_type,
         guint n_parameters,
         GParameter *parameters,
         int io_priority,
         GCancellable *cancellable,
         GAsyncReadyCallback callback,
         gpointer user_data);
extern
void g_async_initable_new_valist_async (GType object_type,
         const gchar *first_property_name,
         va_list var_args,
         int io_priority,
         GCancellable *cancellable,
         GAsyncReadyCallback callback,
         gpointer user_data);
extern
GObject *g_async_initable_new_finish (GAsyncInitable *initable,
         GAsyncResult *res,
         GError **error);
typedef struct _GAsyncResultIface GAsyncResultIface;
struct _GAsyncResultIface
{
  GTypeInterface g_iface;
  gpointer (* get_user_data) (GAsyncResult *res);
  GObject * (* get_source_object) (GAsyncResult *res);
  gboolean (* is_tagged) (GAsyncResult *res,
       gpointer source_tag);
};
extern
GType g_async_result_get_type (void) __attribute__((__const__));
extern
gpointer g_async_result_get_user_data (GAsyncResult *res);
extern
GObject *g_async_result_get_source_object (GAsyncResult *res);
extern
gboolean g_async_result_legacy_propagate_error (GAsyncResult *res,
      GError **error);
extern
gboolean g_async_result_is_tagged (GAsyncResult *res,
      gpointer source_tag);
typedef struct _GInputStreamClass GInputStreamClass;
typedef struct _GInputStreamPrivate GInputStreamPrivate;
struct _GInputStream
{
  GObject parent_instance;
  GInputStreamPrivate *priv;
};
struct _GInputStreamClass
{
  GObjectClass parent_class;
  gssize (* read_fn) (GInputStream *stream,
                             void *buffer,
                             gsize count,
                             GCancellable *cancellable,
                             GError **error);
  gssize (* skip) (GInputStream *stream,
                             gsize count,
                             GCancellable *cancellable,
                             GError **error);
  gboolean (* close_fn) (GInputStream *stream,
                             GCancellable *cancellable,
                             GError **error);
  void (* read_async) (GInputStream *stream,
                             void *buffer,
                             gsize count,
                             int io_priority,
                             GCancellable *cancellable,
                             GAsyncReadyCallback callback,
                             gpointer user_data);
  gssize (* read_finish) (GInputStream *stream,
                             GAsyncResult *result,
                             GError **error);
  void (* skip_async) (GInputStream *stream,
                             gsize count,
                             int io_priority,
                             GCancellable *cancellable,
                             GAsyncReadyCallback callback,
                             gpointer user_data);
  gssize (* skip_finish) (GInputStream *stream,
                             GAsyncResult *result,
                             GError **error);
  void (* close_async) (GInputStream *stream,
                             int io_priority,
                             GCancellable *cancellable,
                             GAsyncReadyCallback callback,
                             gpointer user_data);
  gboolean (* close_finish) (GInputStream *stream,
                             GAsyncResult *result,
                             GError **error);
  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};
extern
GType g_input_stream_get_type (void) __attribute__((__const__));
extern
gssize g_input_stream_read (GInputStream *stream,
           void *buffer,
           gsize count,
           GCancellable *cancellable,
           GError **error);
extern
gboolean g_input_stream_read_all (GInputStream *stream,
           void *buffer,
           gsize count,
           gsize *bytes_read,
           GCancellable *cancellable,
           GError **error);
extern
GBytes *g_input_stream_read_bytes (GInputStream *stream,
           gsize count,
           GCancellable *cancellable,
           GError **error);
extern
gssize g_input_stream_skip (GInputStream *stream,
           gsize count,
           GCancellable *cancellable,
           GError **error);
extern
gboolean g_input_stream_close (GInputStream *stream,
           GCancellable *cancellable,
           GError **error);
extern
void g_input_stream_read_async (GInputStream *stream,
           void *buffer,
           gsize count,
           int io_priority,
           GCancellable *cancellable,
           GAsyncReadyCallback callback,
           gpointer user_data);
extern
gssize g_input_stream_read_finish (GInputStream *stream,
           GAsyncResult *result,
           GError **error);
extern
void g_input_stream_read_all_async (GInputStream *stream,
                                           void *buffer,
                                           gsize count,
                                           int io_priority,
                                           GCancellable *cancellable,
                                           GAsyncReadyCallback callback,
                                           gpointer user_data);
extern
gboolean g_input_stream_read_all_finish (GInputStream *stream,
                                           GAsyncResult *result,
                                           gsize *bytes_read,
                                           GError **error);
extern
void g_input_stream_read_bytes_async (GInputStream *stream,
        gsize count,
        int io_priority,
        GCancellable *cancellable,
        GAsyncReadyCallback callback,
        gpointer user_data);
extern
GBytes *g_input_stream_read_bytes_finish (GInputStream *stream,
        GAsyncResult *result,
        GError **error);
extern
void g_input_stream_skip_async (GInputStream *stream,
           gsize count,
           int io_priority,
           GCancellable *cancellable,
           GAsyncReadyCallback callback,
           gpointer user_data);
extern
gssize g_input_stream_skip_finish (GInputStream *stream,
           GAsyncResult *result,
           GError **error);
extern
void g_input_stream_close_async (GInputStream *stream,
           int io_priority,
           GCancellable *cancellable,
           GAsyncReadyCallback callback,
           gpointer user_data);
extern
gboolean g_input_stream_close_finish (GInputStream *stream,
           GAsyncResult *result,
           GError **error);
extern
gboolean g_input_stream_is_closed (GInputStream *stream);
extern
gboolean g_input_stream_has_pending (GInputStream *stream);
extern
gboolean g_input_stream_set_pending (GInputStream *stream,
           GError **error);
extern
void g_input_stream_clear_pending (GInputStream *stream);
typedef struct _GFilterInputStreamClass GFilterInputStreamClass;
struct _GFilterInputStream
{
  GInputStream parent_instance;
  GInputStream *base_stream;
};
struct _GFilterInputStreamClass
{
  GInputStreamClass parent_class;
  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
};
extern
GType g_filter_input_stream_get_type (void) __attribute__((__const__));
extern
GInputStream * g_filter_input_stream_get_base_stream (GFilterInputStream *stream);
extern
gboolean g_filter_input_stream_get_close_base_stream (GFilterInputStream *stream);
extern
void g_filter_input_stream_set_close_base_stream (GFilterInputStream *stream,
                                                            gboolean close_base);
typedef struct _GBufferedInputStreamClass GBufferedInputStreamClass;
typedef struct _GBufferedInputStreamPrivate GBufferedInputStreamPrivate;
struct _GBufferedInputStream
{
  GFilterInputStream parent_instance;
  GBufferedInputStreamPrivate *priv;
};
struct _GBufferedInputStreamClass
{
  GFilterInputStreamClass parent_class;
  gssize (* fill) (GBufferedInputStream *stream,
       gssize count,
       GCancellable *cancellable,
       GError **error);
  void (* fill_async) (GBufferedInputStream *stream,
       gssize count,
       int io_priority,
       GCancellable *cancellable,
       GAsyncReadyCallback callback,
       gpointer user_data);
  gssize (* fill_finish) (GBufferedInputStream *stream,
       GAsyncResult *result,
       GError **error);
  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};
extern
GType g_buffered_input_stream_get_type (void) __attribute__((__const__));
extern
GInputStream* g_buffered_input_stream_new (GInputStream *base_stream);
extern
GInputStream* g_buffered_input_stream_new_sized (GInputStream *base_stream,
             gsize size);
extern
gsize g_buffered_input_stream_get_buffer_size (GBufferedInputStream *stream);
extern
void g_buffered_input_stream_set_buffer_size (GBufferedInputStream *stream,
             gsize size);
extern
gsize g_buffered_input_stream_get_available (GBufferedInputStream *stream);
extern
gsize g_buffered_input_stream_peek (GBufferedInputStream *stream,
             void *buffer,
             gsize offset,
             gsize count);
extern
const void* g_buffered_input_stream_peek_buffer (GBufferedInputStream *stream,
             gsize *count);
extern
gssize g_buffered_input_stream_fill (GBufferedInputStream *stream,
             gssize count,
             GCancellable *cancellable,
             GError **error);
extern
void g_buffered_input_stream_fill_async (GBufferedInputStream *stream,
             gssize count,
             int io_priority,
             GCancellable *cancellable,
             GAsyncReadyCallback callback,
             gpointer user_data);
extern
gssize g_buffered_input_stream_fill_finish (GBufferedInputStream *stream,
             GAsyncResult *result,
             GError **error);
extern
int g_buffered_input_stream_read_byte (GBufferedInputStream *stream,
             GCancellable *cancellable,
             GError **error);
typedef struct _GOutputStreamClass GOutputStreamClass;
typedef struct _GOutputStreamPrivate GOutputStreamPrivate;
struct _GOutputStream
{
  GObject parent_instance;
  GOutputStreamPrivate *priv;
};
struct _GOutputStreamClass
{
  GObjectClass parent_class;
  gssize (* write_fn) (GOutputStream *stream,
                                 const void *buffer,
                                 gsize count,
                                 GCancellable *cancellable,
                                 GError **error);
  gssize (* splice) (GOutputStream *stream,
                                 GInputStream *source,
                                 GOutputStreamSpliceFlags flags,
                                 GCancellable *cancellable,
                                 GError **error);
  gboolean (* flush) (GOutputStream *stream,
                                 GCancellable *cancellable,
                                 GError **error);
  gboolean (* close_fn) (GOutputStream *stream,
                                 GCancellable *cancellable,
                                 GError **error);
  void (* write_async) (GOutputStream *stream,
                                 const void *buffer,
                                 gsize count,
                                 int io_priority,
                                 GCancellable *cancellable,
                                 GAsyncReadyCallback callback,
                                 gpointer user_data);
  gssize (* write_finish) (GOutputStream *stream,
                                 GAsyncResult *result,
                                 GError **error);
  void (* splice_async) (GOutputStream *stream,
                                 GInputStream *source,
                                 GOutputStreamSpliceFlags flags,
                                 int io_priority,
                                 GCancellable *cancellable,
                                 GAsyncReadyCallback callback,
                                 gpointer user_data);
  gssize (* splice_finish) (GOutputStream *stream,
                                 GAsyncResult *result,
                                 GError **error);
  void (* flush_async) (GOutputStream *stream,
                                 int io_priority,
                                 GCancellable *cancellable,
                                 GAsyncReadyCallback callback,
                                 gpointer user_data);
  gboolean (* flush_finish) (GOutputStream *stream,
                                 GAsyncResult *result,
                                 GError **error);
  void (* close_async) (GOutputStream *stream,
                                 int io_priority,
                                 GCancellable *cancellable,
                                 GAsyncReadyCallback callback,
                                 gpointer user_data);
  gboolean (* close_finish) (GOutputStream *stream,
                                 GAsyncResult *result,
                                 GError **error);
  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
  void (*_g_reserved6) (void);
  void (*_g_reserved7) (void);
  void (*_g_reserved8) (void);
};
extern
GType g_output_stream_get_type (void) __attribute__((__const__));
extern
gssize g_output_stream_write (GOutputStream *stream,
     const void *buffer,
     gsize count,
     GCancellable *cancellable,
     GError **error);
extern
gboolean g_output_stream_write_all (GOutputStream *stream,
     const void *buffer,
     gsize count,
     gsize *bytes_written,
     GCancellable *cancellable,
     GError **error);
extern
gboolean g_output_stream_printf (GOutputStream *stream,
                                        gsize *bytes_written,
                                        GCancellable *cancellable,
                                        GError **error,
                                        const gchar *format,
                                        ...) __attribute__((__format__ (__printf__, 5, 6)));
extern
gboolean g_output_stream_vprintf (GOutputStream *stream,
                                        gsize *bytes_written,
                                        GCancellable *cancellable,
                                        GError **error,
                                        const gchar *format,
                                        va_list args) __attribute__((__format__ (__printf__, 5, 0)));
extern
gssize g_output_stream_write_bytes (GOutputStream *stream,
     GBytes *bytes,
     GCancellable *cancellable,
     GError **error);
extern
gssize g_output_stream_splice (GOutputStream *stream,
     GInputStream *source,
     GOutputStreamSpliceFlags flags,
     GCancellable *cancellable,
     GError **error);
extern
gboolean g_output_stream_flush (GOutputStream *stream,
     GCancellable *cancellable,
     GError **error);
extern
gboolean g_output_stream_close (GOutputStream *stream,
     GCancellable *cancellable,
     GError **error);
extern
void g_output_stream_write_async (GOutputStream *stream,
     const void *buffer,
     gsize count,
     int io_priority,
     GCancellable *cancellable,
     GAsyncReadyCallback callback,
     gpointer user_data);
extern
gssize g_output_stream_write_finish (GOutputStream *stream,
     GAsyncResult *result,
     GError **error);
extern
void g_output_stream_write_all_async (GOutputStream *stream,
                                          const void *buffer,
                                          gsize count,
                                          int io_priority,
                                          GCancellable *cancellable,
                                          GAsyncReadyCallback callback,
                                          gpointer user_data);
extern
gboolean g_output_stream_write_all_finish (GOutputStream *stream,
                                           GAsyncResult *result,
                                           gsize *bytes_written,
                                           GError **error);
extern
void g_output_stream_write_bytes_async (GOutputStream *stream,
          GBytes *bytes,
          int io_priority,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
extern
gssize g_output_stream_write_bytes_finish (GOutputStream *stream,
          GAsyncResult *result,
          GError **error);
extern
void g_output_stream_splice_async (GOutputStream *stream,
     GInputStream *source,
     GOutputStreamSpliceFlags flags,
     int io_priority,
     GCancellable *cancellable,
     GAsyncReadyCallback callback,
     gpointer user_data);
extern
gssize g_output_stream_splice_finish (GOutputStream *stream,
     GAsyncResult *result,
     GError **error);
extern
void g_output_stream_flush_async (GOutputStream *stream,
     int io_priority,
     GCancellable *cancellable,
     GAsyncReadyCallback callback,
     gpointer user_data);
extern
gboolean g_output_stream_flush_finish (GOutputStream *stream,
     GAsyncResult *result,
     GError **error);
extern
void g_output_stream_close_async (GOutputStream *stream,
     int io_priority,
     GCancellable *cancellable,
     GAsyncReadyCallback callback,
     gpointer user_data);
extern
gboolean g_output_stream_close_finish (GOutputStream *stream,
     GAsyncResult *result,
     GError **error);
extern
gboolean g_output_stream_is_closed (GOutputStream *stream);
extern
gboolean g_output_stream_is_closing (GOutputStream *stream);
extern
gboolean g_output_stream_has_pending (GOutputStream *stream);
extern
gboolean g_output_stream_set_pending (GOutputStream *stream,
     GError **error);
extern
void g_output_stream_clear_pending (GOutputStream *stream);
typedef struct _GFilterOutputStreamClass GFilterOutputStreamClass;
struct _GFilterOutputStream
{
  GOutputStream parent_instance;
  GOutputStream *base_stream;
};
struct _GFilterOutputStreamClass
{
  GOutputStreamClass parent_class;
  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
};
extern
GType g_filter_output_stream_get_type (void) __attribute__((__const__));
extern
GOutputStream * g_filter_output_stream_get_base_stream (GFilterOutputStream *stream);
extern
gboolean g_filter_output_stream_get_close_base_stream (GFilterOutputStream *stream);
extern
void g_filter_output_stream_set_close_base_stream (GFilterOutputStream *stream,
                                                              gboolean close_base);
typedef struct _GBufferedOutputStreamClass GBufferedOutputStreamClass;
typedef struct _GBufferedOutputStreamPrivate GBufferedOutputStreamPrivate;
struct _GBufferedOutputStream
{
  GFilterOutputStream parent_instance;
  GBufferedOutputStreamPrivate *priv;
};
struct _GBufferedOutputStreamClass
{
  GFilterOutputStreamClass parent_class;
  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
};
extern
GType g_buffered_output_stream_get_type (void) __attribute__((__const__));
extern
GOutputStream* g_buffered_output_stream_new (GOutputStream *base_stream);
extern
GOutputStream* g_buffered_output_stream_new_sized (GOutputStream *base_stream,
        gsize size);
extern
gsize g_buffered_output_stream_get_buffer_size (GBufferedOutputStream *stream);
extern
void g_buffered_output_stream_set_buffer_size (GBufferedOutputStream *stream,
        gsize size);
extern
gboolean g_buffered_output_stream_get_auto_grow (GBufferedOutputStream *stream);
extern
void g_buffered_output_stream_set_auto_grow (GBufferedOutputStream *stream,
        gboolean auto_grow);
extern
GType g_bytes_icon_get_type (void) __attribute__((__const__));
extern
GIcon * g_bytes_icon_new (GBytes *bytes);
extern
GBytes * g_bytes_icon_get_bytes (GBytesIcon *icon);
typedef struct _GCancellableClass GCancellableClass;
typedef struct _GCancellablePrivate GCancellablePrivate;
struct _GCancellable
{
  GObject parent_instance;
  GCancellablePrivate *priv;
};
struct _GCancellableClass
{
  GObjectClass parent_class;
  void (* cancelled) (GCancellable *cancellable);
  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};
extern
GType g_cancellable_get_type (void) __attribute__((__const__));
extern
GCancellable *g_cancellable_new (void);
extern
gboolean g_cancellable_is_cancelled (GCancellable *cancellable);
extern
gboolean g_cancellable_set_error_if_cancelled (GCancellable *cancellable,
          GError **error);
extern
int g_cancellable_get_fd (GCancellable *cancellable);
extern
gboolean g_cancellable_make_pollfd (GCancellable *cancellable,
          GPollFD *pollfd);
extern
void g_cancellable_release_fd (GCancellable *cancellable);
extern
GSource * g_cancellable_source_new (GCancellable *cancellable);
extern
GCancellable *g_cancellable_get_current (void);
extern
void g_cancellable_push_current (GCancellable *cancellable);
extern
void g_cancellable_pop_current (GCancellable *cancellable);
extern
void g_cancellable_reset (GCancellable *cancellable);
extern
gulong g_cancellable_connect (GCancellable *cancellable,
          GCallback callback,
          gpointer data,
          GDestroyNotify data_destroy_func);
extern
void g_cancellable_disconnect (GCancellable *cancellable,
          gulong handler_id);
extern
void g_cancellable_cancel (GCancellable *cancellable);
typedef struct _GConverterIface GConverterIface;
struct _GConverterIface
{
  GTypeInterface g_iface;
  GConverterResult (* convert) (GConverter *converter,
    const void *inbuf,
    gsize inbuf_size,
    void *outbuf,
    gsize outbuf_size,
    GConverterFlags flags,
    gsize *bytes_read,
    gsize *bytes_written,
    GError **error);
  void (* reset) (GConverter *converter);
};
extern
GType g_converter_get_type (void) __attribute__((__const__));
extern
GConverterResult g_converter_convert (GConverter *converter,
          const void *inbuf,
          gsize inbuf_size,
          void *outbuf,
          gsize outbuf_size,
          GConverterFlags flags,
          gsize *bytes_read,
          gsize *bytes_written,
          GError **error);
extern
void g_converter_reset (GConverter *converter);
typedef struct _GCharsetConverterClass GCharsetConverterClass;
struct _GCharsetConverterClass
{
  GObjectClass parent_class;
};
extern
GType g_charset_converter_get_type (void) __attribute__((__const__));
extern
GCharsetConverter *g_charset_converter_new (const gchar *to_charset,
             const gchar *from_charset,
             GError **error);
extern
void g_charset_converter_set_use_fallback (GCharsetConverter *converter,
        gboolean use_fallback);
extern
gboolean g_charset_converter_get_use_fallback (GCharsetConverter *converter);
extern
guint g_charset_converter_get_num_fallbacks (GCharsetConverter *converter);
extern
gboolean g_content_type_equals (const gchar *type1,
                                           const gchar *type2);
extern
gboolean g_content_type_is_a (const gchar *type,
                                           const gchar *supertype);
extern
gboolean g_content_type_is_unknown (const gchar *type);
extern
gchar * g_content_type_get_description (const gchar *type);
extern
gchar * g_content_type_get_mime_type (const gchar *type);
extern
GIcon * g_content_type_get_icon (const gchar *type);
extern
GIcon * g_content_type_get_symbolic_icon (const gchar *type);
extern
gchar * g_content_type_get_generic_icon_name (const gchar *type);
extern
gboolean g_content_type_can_be_executable (const gchar *type);
extern
gchar * g_content_type_from_mime_type (const gchar *mime_type);
extern
gchar * g_content_type_guess (const gchar *filename,
                                           const guchar *data,
                                           gsize data_size,
                                           gboolean *result_uncertain);
extern
gchar ** g_content_type_guess_for_tree (GFile *root);
extern
GList * g_content_types_get_registered (void);
typedef struct _GConverterInputStreamClass GConverterInputStreamClass;
typedef struct _GConverterInputStreamPrivate GConverterInputStreamPrivate;
struct _GConverterInputStream
{
  GFilterInputStream parent_instance;
  GConverterInputStreamPrivate *priv;
};
struct _GConverterInputStreamClass
{
  GFilterInputStreamClass parent_class;
  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};
extern
GType g_converter_input_stream_get_type (void) __attribute__((__const__));
extern
GInputStream *g_converter_input_stream_new (GInputStream *base_stream,
                                                               GConverter *converter);
extern
GConverter *g_converter_input_stream_get_converter (GConverterInputStream *converter_stream);
typedef struct _GConverterOutputStreamClass GConverterOutputStreamClass;
typedef struct _GConverterOutputStreamPrivate GConverterOutputStreamPrivate;
struct _GConverterOutputStream
{
  GFilterOutputStream parent_instance;
  GConverterOutputStreamPrivate *priv;
};
struct _GConverterOutputStreamClass
{
  GFilterOutputStreamClass parent_class;
  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};
extern
GType g_converter_output_stream_get_type (void) __attribute__((__const__));
extern
GOutputStream *g_converter_output_stream_new (GOutputStream *base_stream,
                                                                 GConverter *converter);
extern
GConverter *g_converter_output_stream_get_converter (GConverterOutputStream *converter_stream);
typedef __socklen_t socklen_t;
extern int access (const char *__name, int __type) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern int euidaccess (const char *__name, int __type)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern int eaccess (const char *__name, int __type)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern int faccessat (int __fd, const char *__file, int __type, int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2))) __attribute__ ((__warn_unused_result__));
extern __off_t lseek (int __fd, __off_t __offset, int __whence) __attribute__ ((__nothrow__ , __leaf__));
extern __off64_t lseek64 (int __fd, __off64_t __offset, int __whence)
     __attribute__ ((__nothrow__ , __leaf__));
extern int close (int __fd);
extern ssize_t read (int __fd, void *__buf, size_t __nbytes) __attribute__ ((__warn_unused_result__));
extern ssize_t write (int __fd, const void *__buf, size_t __n) __attribute__ ((__warn_unused_result__));
extern ssize_t pread (int __fd, void *__buf, size_t __nbytes,
        __off_t __offset) __attribute__ ((__warn_unused_result__));
extern ssize_t pwrite (int __fd, const void *__buf, size_t __n,
         __off_t __offset) __attribute__ ((__warn_unused_result__));
extern ssize_t pread64 (int __fd, void *__buf, size_t __nbytes,
   __off64_t __offset) __attribute__ ((__warn_unused_result__));
extern ssize_t pwrite64 (int __fd, const void *__buf, size_t __n,
    __off64_t __offset) __attribute__ ((__warn_unused_result__));
extern int pipe (int __pipedes[2]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
extern int pipe2 (int __pipedes[2], int __flags) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
extern unsigned int alarm (unsigned int __seconds) __attribute__ ((__nothrow__ , __leaf__));
extern unsigned int sleep (unsigned int __seconds);
extern __useconds_t ualarm (__useconds_t __value, __useconds_t __interval)
     __attribute__ ((__nothrow__ , __leaf__));
extern int usleep (__useconds_t __useconds);
extern int pause (void);
extern int chown (const char *__file, __uid_t __owner, __gid_t __group)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
extern int fchown (int __fd, __uid_t __owner, __gid_t __group) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
extern int lchown (const char *__file, __uid_t __owner, __gid_t __group)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
extern int fchownat (int __fd, const char *__file, __uid_t __owner,
       __gid_t __group, int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2))) __attribute__ ((__warn_unused_result__));
extern int chdir (const char *__path) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
extern int fchdir (int __fd) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
extern char *getcwd (char *__buf, size_t __size) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
extern char *get_current_dir_name (void) __attribute__ ((__nothrow__ , __leaf__));
extern char *getwd (char *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__)) __attribute__ ((__warn_unused_result__));
extern int dup (int __fd) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
extern int dup2 (int __fd, int __fd2) __attribute__ ((__nothrow__ , __leaf__));
extern int dup3 (int __fd, int __fd2, int __flags) __attribute__ ((__nothrow__ , __leaf__));
extern char **__environ;
extern char **environ;
extern int execve (const char *__path, char *const __argv[],
     char *const __envp[]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int fexecve (int __fd, char *const __argv[], char *const __envp[])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));
extern int execv (const char *__path, char *const __argv[])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int execle (const char *__path, const char *__arg, ...)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int execl (const char *__path, const char *__arg, ...)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int execvp (const char *__file, char *const __argv[])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int execlp (const char *__file, const char *__arg, ...)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int execvpe (const char *__file, char *const __argv[],
      char *const __envp[])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int nice (int __inc) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
extern void _exit (int __status) __attribute__ ((__noreturn__));
enum
  {
    _PC_LINK_MAX,
    _PC_MAX_CANON,
    _PC_MAX_INPUT,
    _PC_NAME_MAX,
    _PC_PATH_MAX,
    _PC_PIPE_BUF,
    _PC_CHOWN_RESTRICTED,
    _PC_NO_TRUNC,
    _PC_VDISABLE,
    _PC_SYNC_IO,
    _PC_ASYNC_IO,
    _PC_PRIO_IO,
    _PC_SOCK_MAXBUF,
    _PC_FILESIZEBITS,
    _PC_REC_INCR_XFER_SIZE,
    _PC_REC_MAX_XFER_SIZE,
    _PC_REC_MIN_XFER_SIZE,
    _PC_REC_XFER_ALIGN,
    _PC_ALLOC_SIZE_MIN,
    _PC_SYMLINK_MAX,
    _PC_2_SYMLINKS
  };
enum
  {
    _SC_ARG_MAX,
    _SC_CHILD_MAX,
    _SC_CLK_TCK,
    _SC_NGROUPS_MAX,
    _SC_OPEN_MAX,
    _SC_STREAM_MAX,
    _SC_TZNAME_MAX,
    _SC_JOB_CONTROL,
    _SC_SAVED_IDS,
    _SC_REALTIME_SIGNALS,
    _SC_PRIORITY_SCHEDULING,
    _SC_TIMERS,
    _SC_ASYNCHRONOUS_IO,
    _SC_PRIORITIZED_IO,
    _SC_SYNCHRONIZED_IO,
    _SC_FSYNC,
    _SC_MAPPED_FILES,
    _SC_MEMLOCK,
    _SC_MEMLOCK_RANGE,
    _SC_MEMORY_PROTECTION,
    _SC_MESSAGE_PASSING,
    _SC_SEMAPHORES,
    _SC_SHARED_MEMORY_OBJECTS,
    _SC_AIO_LISTIO_MAX,
    _SC_AIO_MAX,
    _SC_AIO_PRIO_DELTA_MAX,
    _SC_DELAYTIMER_MAX,
    _SC_MQ_OPEN_MAX,
    _SC_MQ_PRIO_MAX,
    _SC_VERSION,
    _SC_PAGESIZE,
    _SC_RTSIG_MAX,
    _SC_SEM_NSEMS_MAX,
    _SC_SEM_VALUE_MAX,
    _SC_SIGQUEUE_MAX,
    _SC_TIMER_MAX,
    _SC_BC_BASE_MAX,
    _SC_BC_DIM_MAX,
    _SC_BC_SCALE_MAX,
    _SC_BC_STRING_MAX,
    _SC_COLL_WEIGHTS_MAX,
    _SC_EQUIV_CLASS_MAX,
    _SC_EXPR_NEST_MAX,
    _SC_LINE_MAX,
    _SC_RE_DUP_MAX,
    _SC_CHARCLASS_NAME_MAX,
    _SC_2_VERSION,
    _SC_2_C_BIND,
    _SC_2_C_DEV,
    _SC_2_FORT_DEV,
    _SC_2_FORT_RUN,
    _SC_2_SW_DEV,
    _SC_2_LOCALEDEF,
    _SC_PII,
    _SC_PII_XTI,
    _SC_PII_SOCKET,
    _SC_PII_INTERNET,
    _SC_PII_OSI,
    _SC_POLL,
    _SC_SELECT,
    _SC_UIO_MAXIOV,
    _SC_IOV_MAX = _SC_UIO_MAXIOV,
    _SC_PII_INTERNET_STREAM,
    _SC_PII_INTERNET_DGRAM,
    _SC_PII_OSI_COTS,
    _SC_PII_OSI_CLTS,
    _SC_PII_OSI_M,
    _SC_T_IOV_MAX,
    _SC_THREADS,
    _SC_THREAD_SAFE_FUNCTIONS,
    _SC_GETGR_R_SIZE_MAX,
    _SC_GETPW_R_SIZE_MAX,
    _SC_LOGIN_NAME_MAX,
    _SC_TTY_NAME_MAX,
    _SC_THREAD_DESTRUCTOR_ITERATIONS,
    _SC_THREAD_KEYS_MAX,
    _SC_THREAD_STACK_MIN,
    _SC_THREAD_THREADS_MAX,
    _SC_THREAD_ATTR_STACKADDR,
    _SC_THREAD_ATTR_STACKSIZE,
    _SC_THREAD_PRIORITY_SCHEDULING,
    _SC_THREAD_PRIO_INHERIT,
    _SC_THREAD_PRIO_PROTECT,
    _SC_THREAD_PROCESS_SHARED,
    _SC_NPROCESSORS_CONF,
    _SC_NPROCESSORS_ONLN,
    _SC_PHYS_PAGES,
    _SC_AVPHYS_PAGES,
    _SC_ATEXIT_MAX,
    _SC_PASS_MAX,
    _SC_XOPEN_VERSION,
    _SC_XOPEN_XCU_VERSION,
    _SC_XOPEN_UNIX,
    _SC_XOPEN_CRYPT,
    _SC_XOPEN_ENH_I18N,
    _SC_XOPEN_SHM,
    _SC_2_CHAR_TERM,
    _SC_2_C_VERSION,
    _SC_2_UPE,
    _SC_XOPEN_XPG2,
    _SC_XOPEN_XPG3,
    _SC_XOPEN_XPG4,
    _SC_CHAR_BIT,
    _SC_CHAR_MAX,
    _SC_CHAR_MIN,
    _SC_INT_MAX,
    _SC_INT_MIN,
    _SC_LONG_BIT,
    _SC_WORD_BIT,
    _SC_MB_LEN_MAX,
    _SC_NZERO,
    _SC_SSIZE_MAX,
    _SC_SCHAR_MAX,
    _SC_SCHAR_MIN,
    _SC_SHRT_MAX,
    _SC_SHRT_MIN,
    _SC_UCHAR_MAX,
    _SC_UINT_MAX,
    _SC_ULONG_MAX,
    _SC_USHRT_MAX,
    _SC_NL_ARGMAX,
    _SC_NL_LANGMAX,
    _SC_NL_MSGMAX,
    _SC_NL_NMAX,
    _SC_NL_SETMAX,
    _SC_NL_TEXTMAX,
    _SC_XBS5_ILP32_OFF32,
    _SC_XBS5_ILP32_OFFBIG,
    _SC_XBS5_LP64_OFF64,
    _SC_XBS5_LPBIG_OFFBIG,
    _SC_XOPEN_LEGACY,
    _SC_XOPEN_REALTIME,
    _SC_XOPEN_REALTIME_THREADS,
    _SC_ADVISORY_INFO,
    _SC_BARRIERS,
    _SC_BASE,
    _SC_C_LANG_SUPPORT,
    _SC_C_LANG_SUPPORT_R,
    _SC_CLOCK_SELECTION,
    _SC_CPUTIME,
    _SC_THREAD_CPUTIME,
    _SC_DEVICE_IO,
    _SC_DEVICE_SPECIFIC,
    _SC_DEVICE_SPECIFIC_R,
    _SC_FD_MGMT,
    _SC_FIFO,
    _SC_PIPE,
    _SC_FILE_ATTRIBUTES,
    _SC_FILE_LOCKING,
    _SC_FILE_SYSTEM,
    _SC_MONOTONIC_CLOCK,
    _SC_MULTI_PROCESS,
    _SC_SINGLE_PROCESS,
    _SC_NETWORKING,
    _SC_READER_WRITER_LOCKS,
    _SC_SPIN_LOCKS,
    _SC_REGEXP,
    _SC_REGEX_VERSION,
    _SC_SHELL,
    _SC_SIGNALS,
    _SC_SPAWN,
    _SC_SPORADIC_SERVER,
    _SC_THREAD_SPORADIC_SERVER,
    _SC_SYSTEM_DATABASE,
    _SC_SYSTEM_DATABASE_R,
    _SC_TIMEOUTS,
    _SC_TYPED_MEMORY_OBJECTS,
    _SC_USER_GROUPS,
    _SC_USER_GROUPS_R,
    _SC_2_PBS,
    _SC_2_PBS_ACCOUNTING,
    _SC_2_PBS_LOCATE,
    _SC_2_PBS_MESSAGE,
    _SC_2_PBS_TRACK,
    _SC_SYMLOOP_MAX,
    _SC_STREAMS,
    _SC_2_PBS_CHECKPOINT,
    _SC_V6_ILP32_OFF32,
    _SC_V6_ILP32_OFFBIG,
    _SC_V6_LP64_OFF64,
    _SC_V6_LPBIG_OFFBIG,
    _SC_HOST_NAME_MAX,
    _SC_TRACE,
    _SC_TRACE_EVENT_FILTER,
    _SC_TRACE_INHERIT,
    _SC_TRACE_LOG,
    _SC_LEVEL1_ICACHE_SIZE,
    _SC_LEVEL1_ICACHE_ASSOC,
    _SC_LEVEL1_ICACHE_LINESIZE,
    _SC_LEVEL1_DCACHE_SIZE,
    _SC_LEVEL1_DCACHE_ASSOC,
    _SC_LEVEL1_DCACHE_LINESIZE,
    _SC_LEVEL2_CACHE_SIZE,
    _SC_LEVEL2_CACHE_ASSOC,
    _SC_LEVEL2_CACHE_LINESIZE,
    _SC_LEVEL3_CACHE_SIZE,
    _SC_LEVEL3_CACHE_ASSOC,
    _SC_LEVEL3_CACHE_LINESIZE,
    _SC_LEVEL4_CACHE_SIZE,
    _SC_LEVEL4_CACHE_ASSOC,
    _SC_LEVEL4_CACHE_LINESIZE,
    _SC_IPV6 = _SC_LEVEL1_ICACHE_SIZE + 50,
    _SC_RAW_SOCKETS,
    _SC_V7_ILP32_OFF32,
    _SC_V7_ILP32_OFFBIG,
    _SC_V7_LP64_OFF64,
    _SC_V7_LPBIG_OFFBIG,
    _SC_SS_REPL_MAX,
    _SC_TRACE_EVENT_NAME_MAX,
    _SC_TRACE_NAME_MAX,
    _SC_TRACE_SYS_MAX,
    _SC_TRACE_USER_EVENT_MAX,
    _SC_XOPEN_STREAMS,
    _SC_THREAD_ROBUST_PRIO_INHERIT,
    _SC_THREAD_ROBUST_PRIO_PROTECT
  };
enum
  {
    _CS_PATH,
    _CS_V6_WIDTH_RESTRICTED_ENVS,
    _CS_GNU_LIBC_VERSION,
    _CS_GNU_LIBPTHREAD_VERSION,
    _CS_V5_WIDTH_RESTRICTED_ENVS,
    _CS_V7_WIDTH_RESTRICTED_ENVS,
    _CS_LFS_CFLAGS = 1000,
    _CS_LFS_LDFLAGS,
    _CS_LFS_LIBS,
    _CS_LFS_LINTFLAGS,
    _CS_LFS64_CFLAGS,
    _CS_LFS64_LDFLAGS,
    _CS_LFS64_LIBS,
    _CS_LFS64_LINTFLAGS,
    _CS_XBS5_ILP32_OFF32_CFLAGS = 1100,
    _CS_XBS5_ILP32_OFF32_LDFLAGS,
    _CS_XBS5_ILP32_OFF32_LIBS,
    _CS_XBS5_ILP32_OFF32_LINTFLAGS,
    _CS_XBS5_ILP32_OFFBIG_CFLAGS,
    _CS_XBS5_ILP32_OFFBIG_LDFLAGS,
    _CS_XBS5_ILP32_OFFBIG_LIBS,
    _CS_XBS5_ILP32_OFFBIG_LINTFLAGS,
    _CS_XBS5_LP64_OFF64_CFLAGS,
    _CS_XBS5_LP64_OFF64_LDFLAGS,
    _CS_XBS5_LP64_OFF64_LIBS,
    _CS_XBS5_LP64_OFF64_LINTFLAGS,
    _CS_XBS5_LPBIG_OFFBIG_CFLAGS,
    _CS_XBS5_LPBIG_OFFBIG_LDFLAGS,
    _CS_XBS5_LPBIG_OFFBIG_LIBS,
    _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS,
    _CS_POSIX_V6_ILP32_OFF32_CFLAGS,
    _CS_POSIX_V6_ILP32_OFF32_LDFLAGS,
    _CS_POSIX_V6_ILP32_OFF32_LIBS,
    _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS,
    _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS,
    _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS,
    _CS_POSIX_V6_ILP32_OFFBIG_LIBS,
    _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS,
    _CS_POSIX_V6_LP64_OFF64_CFLAGS,
    _CS_POSIX_V6_LP64_OFF64_LDFLAGS,
    _CS_POSIX_V6_LP64_OFF64_LIBS,
    _CS_POSIX_V6_LP64_OFF64_LINTFLAGS,
    _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS,
    _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS,
    _CS_POSIX_V6_LPBIG_OFFBIG_LIBS,
    _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS,
    _CS_POSIX_V7_ILP32_OFF32_CFLAGS,
    _CS_POSIX_V7_ILP32_OFF32_LDFLAGS,
    _CS_POSIX_V7_ILP32_OFF32_LIBS,
    _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS,
    _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS,
    _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS,
    _CS_POSIX_V7_ILP32_OFFBIG_LIBS,
    _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS,
    _CS_POSIX_V7_LP64_OFF64_CFLAGS,
    _CS_POSIX_V7_LP64_OFF64_LDFLAGS,
    _CS_POSIX_V7_LP64_OFF64_LIBS,
    _CS_POSIX_V7_LP64_OFF64_LINTFLAGS,
    _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS,
    _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS,
    _CS_POSIX_V7_LPBIG_OFFBIG_LIBS,
    _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS,
    _CS_V6_ENV,
    _CS_V7_ENV
  };
extern long int pathconf (const char *__path, int __name)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern long int fpathconf (int __fd, int __name) __attribute__ ((__nothrow__ , __leaf__));
extern long int sysconf (int __name) __attribute__ ((__nothrow__ , __leaf__));
extern size_t confstr (int __name, char *__buf, size_t __len) __attribute__ ((__nothrow__ , __leaf__));
extern __pid_t getpid (void) __attribute__ ((__nothrow__ , __leaf__));
extern __pid_t getppid (void) __attribute__ ((__nothrow__ , __leaf__));
extern __pid_t getpgrp (void) __attribute__ ((__nothrow__ , __leaf__));
extern __pid_t __getpgid (__pid_t __pid) __attribute__ ((__nothrow__ , __leaf__));
extern __pid_t getpgid (__pid_t __pid) __attribute__ ((__nothrow__ , __leaf__));
extern int setpgid (__pid_t __pid, __pid_t __pgid) __attribute__ ((__nothrow__ , __leaf__));
extern int setpgrp (void) __attribute__ ((__nothrow__ , __leaf__));
extern __pid_t setsid (void) __attribute__ ((__nothrow__ , __leaf__));
extern __pid_t getsid (__pid_t __pid) __attribute__ ((__nothrow__ , __leaf__));
extern __uid_t getuid (void) __attribute__ ((__nothrow__ , __leaf__));
extern __uid_t geteuid (void) __attribute__ ((__nothrow__ , __leaf__));
extern __gid_t getgid (void) __attribute__ ((__nothrow__ , __leaf__));
extern __gid_t getegid (void) __attribute__ ((__nothrow__ , __leaf__));
extern int getgroups (int __size, __gid_t __list[]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
extern int group_member (__gid_t __gid) __attribute__ ((__nothrow__ , __leaf__));
extern int setuid (__uid_t __uid) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
extern int setreuid (__uid_t __ruid, __uid_t __euid) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
extern int seteuid (__uid_t __uid) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
extern int setgid (__gid_t __gid) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
extern int setregid (__gid_t __rgid, __gid_t __egid) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
extern int setegid (__gid_t __gid) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
extern int getresuid (__uid_t *__ruid, __uid_t *__euid, __uid_t *__suid)
     __attribute__ ((__nothrow__ , __leaf__));
extern int getresgid (__gid_t *__rgid, __gid_t *__egid, __gid_t *__sgid)
     __attribute__ ((__nothrow__ , __leaf__));
extern int setresuid (__uid_t __ruid, __uid_t __euid, __uid_t __suid)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
extern int setresgid (__gid_t __rgid, __gid_t __egid, __gid_t __sgid)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
extern __pid_t fork (void) __attribute__ ((__nothrow__));
extern __pid_t vfork (void) __attribute__ ((__nothrow__ , __leaf__));
extern char *ttyname (int __fd) __attribute__ ((__nothrow__ , __leaf__));
extern int ttyname_r (int __fd, char *__buf, size_t __buflen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2))) __attribute__ ((__warn_unused_result__));
extern int isatty (int __fd) __attribute__ ((__nothrow__ , __leaf__));
extern int ttyslot (void) __attribute__ ((__nothrow__ , __leaf__));
extern int link (const char *__from, const char *__to)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__warn_unused_result__));
extern int linkat (int __fromfd, const char *__from, int __tofd,
     const char *__to, int __flags)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4))) __attribute__ ((__warn_unused_result__));
extern int symlink (const char *__from, const char *__to)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__warn_unused_result__));
extern ssize_t readlink (const char *__restrict __path,
    char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__warn_unused_result__));
extern int symlinkat (const char *__from, int __tofd,
        const char *__to) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3))) __attribute__ ((__warn_unused_result__));
extern ssize_t readlinkat (int __fd, const char *__restrict __path,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3))) __attribute__ ((__warn_unused_result__));
extern int unlink (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern int unlinkat (int __fd, const char *__name, int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));
extern int rmdir (const char *__path) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern __pid_t tcgetpgrp (int __fd) __attribute__ ((__nothrow__ , __leaf__));
extern int tcsetpgrp (int __fd, __pid_t __pgrp_id) __attribute__ ((__nothrow__ , __leaf__));
extern char *getlogin (void);
extern int getlogin_r (char *__name, size_t __name_len) __attribute__ ((__nonnull__ (1)));
extern int setlogin (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern char *optarg;
extern int optind;
extern int opterr;
extern int optopt;
extern int getopt (int ___argc, char *const *___argv, const char *__shortopts)
       __attribute__ ((__nothrow__ , __leaf__));
extern int gethostname (char *__name, size_t __len) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern int sethostname (const char *__name, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
extern int sethostid (long int __id) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
extern int getdomainname (char *__name, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
extern int setdomainname (const char *__name, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
extern int vhangup (void) __attribute__ ((__nothrow__ , __leaf__));
extern int revoke (const char *__file) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
extern int profil (unsigned short int *__sample_buffer, size_t __size,
     size_t __offset, unsigned int __scale)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern int acct (const char *__name) __attribute__ ((__nothrow__ , __leaf__));
extern char *getusershell (void) __attribute__ ((__nothrow__ , __leaf__));
extern void endusershell (void) __attribute__ ((__nothrow__ , __leaf__));
extern void setusershell (void) __attribute__ ((__nothrow__ , __leaf__));
extern int daemon (int __nochdir, int __noclose) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
extern int chroot (const char *__path) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
extern char *getpass (const char *__prompt) __attribute__ ((__nonnull__ (1)));
extern int fsync (int __fd);
extern int syncfs (int __fd) __attribute__ ((__nothrow__ , __leaf__));
extern long int gethostid (void);
extern void sync (void) __attribute__ ((__nothrow__ , __leaf__));
extern int getpagesize (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
extern int getdtablesize (void) __attribute__ ((__nothrow__ , __leaf__));
extern int truncate (const char *__file, __off_t __length)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
extern int truncate64 (const char *__file, __off64_t __length)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
extern int ftruncate (int __fd, __off_t __length) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
extern int ftruncate64 (int __fd, __off64_t __length) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
extern int brk (void *__addr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
extern void *sbrk (intptr_t __delta) __attribute__ ((__nothrow__ , __leaf__));
extern long int syscall (long int __sysno, ...) __attribute__ ((__nothrow__ , __leaf__));
extern int lockf (int __fd, int __cmd, __off_t __len) __attribute__ ((__warn_unused_result__));
extern int lockf64 (int __fd, int __cmd, __off64_t __len) __attribute__ ((__warn_unused_result__));
extern int fdatasync (int __fildes);
extern char *crypt (const char *__key, const char *__salt)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern void encrypt (char *__glibc_block, int __edflag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern void swab (const void *__restrict __from, void *__restrict __to,
    ssize_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern ssize_t __read_chk (int __fd, void *__buf, size_t __nbytes,
      size_t __buflen) __attribute__ ((__warn_unused_result__));
extern ssize_t __read_alias (int __fd, void *__buf, size_t __nbytes) __asm__ ("" "read")
                               __attribute__ ((__warn_unused_result__));
extern ssize_t __read_chk_warn (int __fd, void *__buf, size_t __nbytes, size_t __buflen) __asm__ ("" "__read_chk")
     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("read called with bigger length than size of " "the destination buffer")))
                                  ;
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) ssize_t
read (int __fd, void *__buf, size_t __nbytes)
{
  if (__builtin_object_size (__buf, 0) != (size_t) -1)
    {
      if (!__builtin_constant_p (__nbytes))
 return __read_chk (__fd, __buf, __nbytes, __builtin_object_size (__buf, 0));
      if (__nbytes > __builtin_object_size (__buf, 0))
 return __read_chk_warn (__fd, __buf, __nbytes, __builtin_object_size (__buf, 0));
    }
  return __read_alias (__fd, __buf, __nbytes);
}
extern ssize_t __pread_chk (int __fd, void *__buf, size_t __nbytes,
       __off_t __offset, size_t __bufsize) __attribute__ ((__warn_unused_result__));
extern ssize_t __pread64_chk (int __fd, void *__buf, size_t __nbytes,
         __off64_t __offset, size_t __bufsize) __attribute__ ((__warn_unused_result__));
extern ssize_t __pread_alias (int __fd, void *__buf, size_t __nbytes, __off_t __offset) __asm__ ("" "pread")
                                 __attribute__ ((__warn_unused_result__));
extern ssize_t __pread64_alias (int __fd, void *__buf, size_t __nbytes, __off64_t __offset) __asm__ ("" "pread64")
                                     __attribute__ ((__warn_unused_result__));
extern ssize_t __pread_chk_warn (int __fd, void *__buf, size_t __nbytes, __off_t __offset, size_t __bufsize) __asm__ ("" "__pread_chk")
     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("pread called with bigger length than size of " "the destination buffer")))
                                  ;
extern ssize_t __pread64_chk_warn (int __fd, void *__buf, size_t __nbytes, __off64_t __offset, size_t __bufsize) __asm__ ("" "__pread64_chk")
     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("pread64 called with bigger length than size of " "the destination buffer")))
                                  ;
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) ssize_t
pread (int __fd, void *__buf, size_t __nbytes, __off_t __offset)
{
  if (__builtin_object_size (__buf, 0) != (size_t) -1)
    {
      if (!__builtin_constant_p (__nbytes))
 return __pread_chk (__fd, __buf, __nbytes, __offset, __builtin_object_size (__buf, 0));
      if ( __nbytes > __builtin_object_size (__buf, 0))
 return __pread_chk_warn (__fd, __buf, __nbytes, __offset,
     __builtin_object_size (__buf, 0));
    }
  return __pread_alias (__fd, __buf, __nbytes, __offset);
}
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) ssize_t
pread64 (int __fd, void *__buf, size_t __nbytes, __off64_t __offset)
{
  if (__builtin_object_size (__buf, 0) != (size_t) -1)
    {
      if (!__builtin_constant_p (__nbytes))
 return __pread64_chk (__fd, __buf, __nbytes, __offset, __builtin_object_size (__buf, 0));
      if ( __nbytes > __builtin_object_size (__buf, 0))
 return __pread64_chk_warn (__fd, __buf, __nbytes, __offset,
       __builtin_object_size (__buf, 0));
    }
  return __pread64_alias (__fd, __buf, __nbytes, __offset);
}
extern ssize_t __readlink_chk (const char *__restrict __path,
          char *__restrict __buf, size_t __len,
          size_t __buflen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__warn_unused_result__));
extern ssize_t __readlink_alias (const char *__restrict __path, char *__restrict __buf, size_t __len) __asm__ ("" "readlink") __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__warn_unused_result__));
extern ssize_t __readlink_chk_warn (const char *__restrict __path, char *__restrict __buf, size_t __len, size_t __buflen) __asm__ ("" "__readlink_chk") __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("readlink called with bigger length " "than size of destination buffer")))
                                         ;
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__warn_unused_result__)) ssize_t
__attribute__ ((__nothrow__ , __leaf__)) readlink (const char *__restrict __path, char *__restrict __buf, size_t __len)
{
  if (__builtin_object_size (__buf, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__len))
 return __readlink_chk (__path, __buf, __len, __builtin_object_size (__buf, 2 > 1));
      if ( __len > __builtin_object_size (__buf, 2 > 1))
 return __readlink_chk_warn (__path, __buf, __len, __builtin_object_size (__buf, 2 > 1));
    }
  return __readlink_alias (__path, __buf, __len);
}
extern ssize_t __readlinkat_chk (int __fd, const char *__restrict __path,
     char *__restrict __buf, size_t __len,
     size_t __buflen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3))) __attribute__ ((__warn_unused_result__));
extern ssize_t __readlinkat_alias (int __fd, const char *__restrict __path, char *__restrict __buf, size_t __len) __asm__ ("" "readlinkat") __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__nonnull__ (2, 3))) __attribute__ ((__warn_unused_result__));
extern ssize_t __readlinkat_chk_warn (int __fd, const char *__restrict __path, char *__restrict __buf, size_t __len, size_t __buflen) __asm__ ("" "__readlinkat_chk") __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__nonnull__ (2, 3))) __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("readlinkat called with bigger " "length than size of destination " "buffer")))
                ;
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__nonnull__ (2, 3))) __attribute__ ((__warn_unused_result__)) ssize_t
__attribute__ ((__nothrow__ , __leaf__)) readlinkat (int __fd, const char *__restrict __path, char *__restrict __buf, size_t __len)
{
  if (__builtin_object_size (__buf, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__len))
 return __readlinkat_chk (__fd, __path, __buf, __len, __builtin_object_size (__buf, 2 > 1));
      if (__len > __builtin_object_size (__buf, 2 > 1))
 return __readlinkat_chk_warn (__fd, __path, __buf, __len,
          __builtin_object_size (__buf, 2 > 1));
    }
  return __readlinkat_alias (__fd, __path, __buf, __len);
}
extern char *__getcwd_chk (char *__buf, size_t __size, size_t __buflen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
extern char *__getcwd_alias (char *__buf, size_t __size) __asm__ ("" "getcwd") __attribute__ ((__nothrow__ , __leaf__))
                                              __attribute__ ((__warn_unused_result__));
extern char *__getcwd_chk_warn (char *__buf, size_t __size, size_t __buflen) __asm__ ("" "__getcwd_chk") __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("getcwd caller with bigger length than size of " "destination buffer")))
                              ;
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) char *
__attribute__ ((__nothrow__ , __leaf__)) getcwd (char *__buf, size_t __size)
{
  if (__builtin_object_size (__buf, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__size))
 return __getcwd_chk (__buf, __size, __builtin_object_size (__buf, 2 > 1));
      if (__size > __builtin_object_size (__buf, 2 > 1))
 return __getcwd_chk_warn (__buf, __size, __builtin_object_size (__buf, 2 > 1));
    }
  return __getcwd_alias (__buf, __size);
}
extern char *__getwd_chk (char *__buf, size_t buflen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
extern char *__getwd_warn (char *__buf) __asm__ ("" "getwd") __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("please use getcwd instead, as getwd " "doesn't specify buffer size")))
                                         ;
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__)) __attribute__ ((__warn_unused_result__)) char *
__attribute__ ((__nothrow__ , __leaf__)) getwd (char *__buf)
{
  if (__builtin_object_size (__buf, 2 > 1) != (size_t) -1)
    return __getwd_chk (__buf, __builtin_object_size (__buf, 2 > 1));
  return __getwd_warn (__buf);
}
extern size_t __confstr_chk (int __name, char *__buf, size_t __len,
        size_t __buflen) __attribute__ ((__nothrow__ , __leaf__));
extern size_t __confstr_alias (int __name, char *__buf, size_t __len) __asm__ ("" "confstr") __attribute__ ((__nothrow__ , __leaf__))
                             ;
extern size_t __confstr_chk_warn (int __name, char *__buf, size_t __len, size_t __buflen) __asm__ ("" "__confstr_chk") __attribute__ ((__nothrow__ , __leaf__))
     __attribute__((__warning__ ("confstr called with bigger length than size of destination " "buffer")))
            ;
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) size_t
__attribute__ ((__nothrow__ , __leaf__)) confstr (int __name, char *__buf, size_t __len)
{
  if (__builtin_object_size (__buf, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__len))
 return __confstr_chk (__name, __buf, __len, __builtin_object_size (__buf, 2 > 1));
      if (__builtin_object_size (__buf, 2 > 1) < __len)
 return __confstr_chk_warn (__name, __buf, __len, __builtin_object_size (__buf, 2 > 1));
    }
  return __confstr_alias (__name, __buf, __len);
}
extern int __getgroups_chk (int __size, __gid_t __list[], size_t __listlen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
extern int __getgroups_alias (int __size, __gid_t __list[]) __asm__ ("" "getgroups") __attribute__ ((__nothrow__ , __leaf__))
                 __attribute__ ((__warn_unused_result__));
extern int __getgroups_chk_warn (int __size, __gid_t __list[], size_t __listlen) __asm__ ("" "__getgroups_chk") __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("getgroups called with bigger group count than what " "can fit into destination buffer")))
                                           ;
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__nothrow__ , __leaf__)) getgroups (int __size, __gid_t __list[])
{
  if (__builtin_object_size (__list, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__size) || __size < 0)
 return __getgroups_chk (__size, __list, __builtin_object_size (__list, 2 > 1));
      if (__size * sizeof (__gid_t) > __builtin_object_size (__list, 2 > 1))
 return __getgroups_chk_warn (__size, __list, __builtin_object_size (__list, 2 > 1));
    }
  return __getgroups_alias (__size, __list);
}
extern int __ttyname_r_chk (int __fd, char *__buf, size_t __buflen,
       size_t __nreal) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));
extern int __ttyname_r_alias (int __fd, char *__buf, size_t __buflen) __asm__ ("" "ttyname_r") __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__nonnull__ (2)));
extern int __ttyname_r_chk_warn (int __fd, char *__buf, size_t __buflen, size_t __nreal) __asm__ ("" "__ttyname_r_chk") __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__nonnull__ (2))) __attribute__((__warning__ ("ttyname_r called with bigger buflen than " "size of destination buffer")))
                                  ;
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__nothrow__ , __leaf__)) ttyname_r (int __fd, char *__buf, size_t __buflen)
{
  if (__builtin_object_size (__buf, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__buflen))
 return __ttyname_r_chk (__fd, __buf, __buflen, __builtin_object_size (__buf, 2 > 1));
      if (__buflen > __builtin_object_size (__buf, 2 > 1))
 return __ttyname_r_chk_warn (__fd, __buf, __buflen, __builtin_object_size (__buf, 2 > 1));
    }
  return __ttyname_r_alias (__fd, __buf, __buflen);
}
extern int __getlogin_r_chk (char *__buf, size_t __buflen, size_t __nreal)
     __attribute__ ((__nonnull__ (1)));
extern int __getlogin_r_alias (char *__buf, size_t __buflen) __asm__ ("" "getlogin_r")
                     __attribute__ ((__nonnull__ (1)));
extern int __getlogin_r_chk_warn (char *__buf, size_t __buflen, size_t __nreal) __asm__ ("" "__getlogin_r_chk")
     __attribute__ ((__nonnull__ (1))) __attribute__((__warning__ ("getlogin_r called with bigger buflen than " "size of destination buffer")))
                                  ;
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
getlogin_r (char *__buf, size_t __buflen)
{
  if (__builtin_object_size (__buf, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__buflen))
 return __getlogin_r_chk (__buf, __buflen, __builtin_object_size (__buf, 2 > 1));
      if (__buflen > __builtin_object_size (__buf, 2 > 1))
 return __getlogin_r_chk_warn (__buf, __buflen, __builtin_object_size (__buf, 2 > 1));
    }
  return __getlogin_r_alias (__buf, __buflen);
}
extern int __gethostname_chk (char *__buf, size_t __buflen, size_t __nreal)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern int __gethostname_alias (char *__buf, size_t __buflen) __asm__ ("" "gethostname") __attribute__ ((__nothrow__ , __leaf__))
                   __attribute__ ((__nonnull__ (1)));
extern int __gethostname_chk_warn (char *__buf, size_t __buflen, size_t __nreal) __asm__ ("" "__gethostname_chk") __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__nonnull__ (1))) __attribute__((__warning__ ("gethostname called with bigger buflen than " "size of destination buffer")))
                                  ;
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__nothrow__ , __leaf__)) gethostname (char *__buf, size_t __buflen)
{
  if (__builtin_object_size (__buf, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__buflen))
 return __gethostname_chk (__buf, __buflen, __builtin_object_size (__buf, 2 > 1));
      if (__buflen > __builtin_object_size (__buf, 2 > 1))
 return __gethostname_chk_warn (__buf, __buflen, __builtin_object_size (__buf, 2 > 1));
    }
  return __gethostname_alias (__buf, __buflen);
}
extern int __getdomainname_chk (char *__buf, size_t __buflen, size_t __nreal)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
extern int __getdomainname_alias (char *__buf, size_t __buflen) __asm__ ("" "getdomainname") __attribute__ ((__nothrow__ , __leaf__))
                     __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
extern int __getdomainname_chk_warn (char *__buf, size_t __buflen, size_t __nreal) __asm__ ("" "__getdomainname_chk") __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("getdomainname called with bigger " "buflen than size of destination " "buffer")))
                    ;
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__nothrow__ , __leaf__)) getdomainname (char *__buf, size_t __buflen)
{
  if (__builtin_object_size (__buf, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__buflen))
 return __getdomainname_chk (__buf, __buflen, __builtin_object_size (__buf, 2 > 1));
      if (__buflen > __builtin_object_size (__buf, 2 > 1))
 return __getdomainname_chk_warn (__buf, __buflen, __builtin_object_size (__buf, 2 > 1));
    }
  return __getdomainname_alias (__buf, __buflen);
}
extern int _gl_cxxalias_dummy;
extern int _gl_cxxalias_dummy;
extern int _gl_cxxalias_dummy
                                                                 ;
extern int _gl_cxxalias_dummy;
extern int _gl_cxxalias_dummy;
extern int _gl_cxxalias_dummy;
extern int _gl_cxxalias_dummy;
extern int _gl_cxxalias_dummy;
extern int _gl_cxxalias_dummy;
extern int _gl_cxxalias_dummy;
extern int rpl_pipe2 (int fd[2], int flags) __attribute__ ((__nonnull__ (1)));
extern int _gl_cxxalias_dummy;
extern int _gl_cxxalias_dummy;
extern int _gl_cxxalias_dummy
                                                                ;
extern int _gl_cxxalias_dummy;
extern int _gl_cxxalias_dummy
                                                                    ;
extern int _gl_cxxalias_dummy;
extern int _gl_cxxalias_dummy;
extern int _gl_cxxalias_dummy;
typedef struct _GCredentialsClass GCredentialsClass;
extern
GType g_credentials_get_type (void) __attribute__((__const__));
extern
GCredentials *g_credentials_new (void);
extern
gchar *g_credentials_to_string (GCredentials *credentials);
extern
gpointer g_credentials_get_native (GCredentials *credentials,
                                                   GCredentialsType native_type);
extern
void g_credentials_set_native (GCredentials *credentials,
                                                   GCredentialsType native_type,
                                                   gpointer native);
extern
gboolean g_credentials_is_same_user (GCredentials *credentials,
                                                   GCredentials *other_credentials,
                                                   GError **error);
extern
pid_t g_credentials_get_unix_pid (GCredentials *credentials,
                                                   GError **error);
extern
uid_t g_credentials_get_unix_user (GCredentials *credentials,
                                                   GError **error);
extern
gboolean g_credentials_set_unix_user (GCredentials *credentials,
                                                   uid_t uid,
                                                   GError **error);
typedef struct _GDatagramBasedInterface GDatagramBasedInterface;
struct _GDatagramBasedInterface
{
  GTypeInterface g_iface;
  gint (*receive_messages) (GDatagramBased *datagram_based,
                                         GInputMessage *messages,
                                         guint num_messages,
                                         gint flags,
                                         gint64 timeout,
                                         GCancellable *cancellable,
                                         GError **error);
  gint (*send_messages) (GDatagramBased *datagram_based,
                                         GOutputMessage *messages,
                                         guint num_messages,
                                         gint flags,
                                         gint64 timeout,
                                         GCancellable *cancellable,
                                         GError **error);
  GSource *(*create_source) (GDatagramBased *datagram_based,
                                         GIOCondition condition,
                                         GCancellable *cancellable);
  GIOCondition (*condition_check) (GDatagramBased *datagram_based,
                                         GIOCondition condition);
  gboolean (*condition_wait) (GDatagramBased *datagram_based,
                                         GIOCondition condition,
                                         gint64 timeout,
                                         GCancellable *cancellable,
                                         GError **error);
};
extern
GType
g_datagram_based_get_type (void);
extern
gint
g_datagram_based_receive_messages (GDatagramBased *datagram_based,
                                       GInputMessage *messages,
                                       guint num_messages,
                                       gint flags,
                                       gint64 timeout,
                                       GCancellable *cancellable,
                                       GError **error);
extern
gint
g_datagram_based_send_messages (GDatagramBased *datagram_based,
                                       GOutputMessage *messages,
                                       guint num_messages,
                                       gint flags,
                                       gint64 timeout,
                                       GCancellable *cancellable,
                                       GError **error);
extern
GSource *
g_datagram_based_create_source (GDatagramBased *datagram_based,
                                       GIOCondition condition,
                                       GCancellable *cancellable);
extern
GIOCondition
g_datagram_based_condition_check (GDatagramBased *datagram_based,
                                       GIOCondition condition);
extern
gboolean
g_datagram_based_condition_wait (GDatagramBased *datagram_based,
                                       GIOCondition condition,
                                       gint64 timeout,
                                       GCancellable *cancellable,
                                       GError **error);
typedef struct _GDataInputStreamClass GDataInputStreamClass;
typedef struct _GDataInputStreamPrivate GDataInputStreamPrivate;
struct _GDataInputStream
{
  GBufferedInputStream parent_instance;
  GDataInputStreamPrivate *priv;
};
struct _GDataInputStreamClass
{
  GBufferedInputStreamClass parent_class;
  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};
extern
GType g_data_input_stream_get_type (void) __attribute__((__const__));
extern
GDataInputStream * g_data_input_stream_new (GInputStream *base_stream);
extern
void g_data_input_stream_set_byte_order (GDataInputStream *stream,
                                                                 GDataStreamByteOrder order);
extern
GDataStreamByteOrder g_data_input_stream_get_byte_order (GDataInputStream *stream);
extern
void g_data_input_stream_set_newline_type (GDataInputStream *stream,
                                                                 GDataStreamNewlineType type);
extern
GDataStreamNewlineType g_data_input_stream_get_newline_type (GDataInputStream *stream);
extern
guchar g_data_input_stream_read_byte (GDataInputStream *stream,
                                                                 GCancellable *cancellable,
                                                                 GError **error);
extern
gint16 g_data_input_stream_read_int16 (GDataInputStream *stream,
                                                                 GCancellable *cancellable,
                                                                 GError **error);
extern
guint16 g_data_input_stream_read_uint16 (GDataInputStream *stream,
                                                                 GCancellable *cancellable,
                                                                 GError **error);
extern
gint32 g_data_input_stream_read_int32 (GDataInputStream *stream,
                                                                 GCancellable *cancellable,
                                                                 GError **error);
extern
guint32 g_data_input_stream_read_uint32 (GDataInputStream *stream,
                                                                 GCancellable *cancellable,
                                                                 GError **error);
extern
gint64 g_data_input_stream_read_int64 (GDataInputStream *stream,
                                                                 GCancellable *cancellable,
                                                                 GError **error);
extern
guint64 g_data_input_stream_read_uint64 (GDataInputStream *stream,
                                                                 GCancellable *cancellable,
                                                                 GError **error);
extern
char * g_data_input_stream_read_line (GDataInputStream *stream,
                                                                 gsize *length,
                                                                 GCancellable *cancellable,
                                                                 GError **error);
extern
char * g_data_input_stream_read_line_utf8 (GDataInputStream *stream,
         gsize *length,
         GCancellable *cancellable,
         GError **error);
extern
void g_data_input_stream_read_line_async (GDataInputStream *stream,
                                                                 gint io_priority,
                                                                 GCancellable *cancellable,
                                                                 GAsyncReadyCallback callback,
                                                                 gpointer user_data);
extern
char * g_data_input_stream_read_line_finish (GDataInputStream *stream,
                                                                 GAsyncResult *result,
                                                                 gsize *length,
                                                                 GError **error);
extern
char * g_data_input_stream_read_line_finish_utf8(GDataInputStream *stream,
                                                                 GAsyncResult *result,
                                                                 gsize *length,
                                                                 GError **error);
extern
char * g_data_input_stream_read_until (GDataInputStream *stream,
                                                                 const gchar *stop_chars,
                                                                 gsize *length,
                                                                 GCancellable *cancellable,
                                                                 GError **error);
extern
void g_data_input_stream_read_until_async (GDataInputStream *stream,
                                                                 const gchar *stop_chars,
                                                                 gint io_priority,
                                                                 GCancellable *cancellable,
                                                                 GAsyncReadyCallback callback,
                                                                 gpointer user_data);
extern
char * g_data_input_stream_read_until_finish (GDataInputStream *stream,
                                                                 GAsyncResult *result,
                                                                 gsize *length,
                                                                 GError **error);
extern
char * g_data_input_stream_read_upto (GDataInputStream *stream,
                                                                 const gchar *stop_chars,
                                                                 gssize stop_chars_len,
                                                                 gsize *length,
                                                                 GCancellable *cancellable,
                                                                 GError **error);
extern
void g_data_input_stream_read_upto_async (GDataInputStream *stream,
                                                                 const gchar *stop_chars,
                                                                 gssize stop_chars_len,
                                                                 gint io_priority,
                                                                 GCancellable *cancellable,
                                                                 GAsyncReadyCallback callback,
                                                                 gpointer user_data);
extern
char * g_data_input_stream_read_upto_finish (GDataInputStream *stream,
                                                                 GAsyncResult *result,
                                                                 gsize *length,
                                                                 GError **error);
typedef struct _GDataOutputStream GDataOutputStream;
typedef struct _GDataOutputStreamClass GDataOutputStreamClass;
typedef struct _GDataOutputStreamPrivate GDataOutputStreamPrivate;
struct _GDataOutputStream
{
  GFilterOutputStream parent_instance;
  GDataOutputStreamPrivate *priv;
};
struct _GDataOutputStreamClass
{
  GFilterOutputStreamClass parent_class;
  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};
extern
GType g_data_output_stream_get_type (void) __attribute__((__const__));
extern
GDataOutputStream * g_data_output_stream_new (GOutputStream *base_stream);
extern
void g_data_output_stream_set_byte_order (GDataOutputStream *stream,
         GDataStreamByteOrder order);
extern
GDataStreamByteOrder g_data_output_stream_get_byte_order (GDataOutputStream *stream);
extern
gboolean g_data_output_stream_put_byte (GDataOutputStream *stream,
         guchar data,
         GCancellable *cancellable,
         GError **error);
extern
gboolean g_data_output_stream_put_int16 (GDataOutputStream *stream,
         gint16 data,
         GCancellable *cancellable,
         GError **error);
extern
gboolean g_data_output_stream_put_uint16 (GDataOutputStream *stream,
         guint16 data,
         GCancellable *cancellable,
         GError **error);
extern
gboolean g_data_output_stream_put_int32 (GDataOutputStream *stream,
         gint32 data,
         GCancellable *cancellable,
         GError **error);
extern
gboolean g_data_output_stream_put_uint32 (GDataOutputStream *stream,
         guint32 data,
         GCancellable *cancellable,
         GError **error);
extern
gboolean g_data_output_stream_put_int64 (GDataOutputStream *stream,
         gint64 data,
         GCancellable *cancellable,
         GError **error);
extern
gboolean g_data_output_stream_put_uint64 (GDataOutputStream *stream,
         guint64 data,
         GCancellable *cancellable,
         GError **error);
extern
gboolean g_data_output_stream_put_string (GDataOutputStream *stream,
         const char *str,
         GCancellable *cancellable,
         GError **error);
extern
gchar *g_dbus_address_escape_value (const gchar *string);
extern
gboolean g_dbus_is_address (const gchar *string);
extern
gboolean g_dbus_is_supported_address (const gchar *string,
                                      GError **error);
extern
void g_dbus_address_get_stream (const gchar *address,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
extern
GIOStream *g_dbus_address_get_stream_finish (GAsyncResult *res,
                                                       gchar **out_guid,
                                                       GError **error);
extern
GIOStream *g_dbus_address_get_stream_sync (const gchar *address,
                                                       gchar **out_guid,
                                                       GCancellable *cancellable,
                                                       GError **error);
extern
gchar *g_dbus_address_get_for_bus_sync (GBusType bus_type,
                                                       GCancellable *cancellable,
                                                       GError **error);
extern
GType g_dbus_auth_observer_get_type (void) __attribute__((__const__));
extern
GDBusAuthObserver *g_dbus_auth_observer_new (void);
extern
gboolean g_dbus_auth_observer_authorize_authenticated_peer (GDBusAuthObserver *observer,
                                                                      GIOStream *stream,
                                                                      GCredentials *credentials);
extern
gboolean g_dbus_auth_observer_allow_mechanism (GDBusAuthObserver *observer,
                                                         const gchar *mechanism);
extern
GType g_dbus_connection_get_type (void) __attribute__((__const__));
extern
void g_bus_get (GBusType bus_type,
                                                GCancellable *cancellable,
                                                GAsyncReadyCallback callback,
                                                gpointer user_data);
extern
GDBusConnection *g_bus_get_finish (GAsyncResult *res,
                                                GError **error);
extern
GDBusConnection *g_bus_get_sync (GBusType bus_type,
                                                GCancellable *cancellable,
                                                GError **error);
extern
void g_dbus_connection_new (GIOStream *stream,
                                                               const gchar *guid,
                                                               GDBusConnectionFlags flags,
                                                               GDBusAuthObserver *observer,
                                                               GCancellable *cancellable,
                                                               GAsyncReadyCallback callback,
                                                               gpointer user_data);
extern
GDBusConnection *g_dbus_connection_new_finish (GAsyncResult *res,
                                                               GError **error);
extern
GDBusConnection *g_dbus_connection_new_sync (GIOStream *stream,
                                                               const gchar *guid,
                                                               GDBusConnectionFlags flags,
                                                               GDBusAuthObserver *observer,
                                                               GCancellable *cancellable,
                                                               GError **error);
extern
void g_dbus_connection_new_for_address (const gchar *address,
                                                               GDBusConnectionFlags flags,
                                                               GDBusAuthObserver *observer,
                                                               GCancellable *cancellable,
                                                               GAsyncReadyCallback callback,
                                                               gpointer user_data);
extern
GDBusConnection *g_dbus_connection_new_for_address_finish (GAsyncResult *res,
                                                               GError **error);
extern
GDBusConnection *g_dbus_connection_new_for_address_sync (const gchar *address,
                                                               GDBusConnectionFlags flags,
                                                               GDBusAuthObserver *observer,
                                                               GCancellable *cancellable,
                                                               GError **error);
extern
void g_dbus_connection_start_message_processing (GDBusConnection *connection);
extern
gboolean g_dbus_connection_is_closed (GDBusConnection *connection);
extern
GIOStream *g_dbus_connection_get_stream (GDBusConnection *connection);
extern
const gchar *g_dbus_connection_get_guid (GDBusConnection *connection);
extern
const gchar *g_dbus_connection_get_unique_name (GDBusConnection *connection);
extern
GCredentials *g_dbus_connection_get_peer_credentials (GDBusConnection *connection);
extern
guint32 g_dbus_connection_get_last_serial (GDBusConnection *connection);
extern
gboolean g_dbus_connection_get_exit_on_close (GDBusConnection *connection);
extern
void g_dbus_connection_set_exit_on_close (GDBusConnection *connection,
                                                               gboolean exit_on_close);
extern
GDBusCapabilityFlags g_dbus_connection_get_capabilities (GDBusConnection *connection);
extern
void g_dbus_connection_close (GDBusConnection *connection,
                                                                   GCancellable *cancellable,
                                                                   GAsyncReadyCallback callback,
                                                                   gpointer user_data);
extern
gboolean g_dbus_connection_close_finish (GDBusConnection *connection,
                                                                   GAsyncResult *res,
                                                                   GError **error);
extern
gboolean g_dbus_connection_close_sync (GDBusConnection *connection,
                                                                   GCancellable *cancellable,
                                                                   GError **error);
extern
void g_dbus_connection_flush (GDBusConnection *connection,
                                                                   GCancellable *cancellable,
                                                                   GAsyncReadyCallback callback,
                                                                   gpointer user_data);
extern
gboolean g_dbus_connection_flush_finish (GDBusConnection *connection,
                                                                   GAsyncResult *res,
                                                                   GError **error);
extern
gboolean g_dbus_connection_flush_sync (GDBusConnection *connection,
                                                                   GCancellable *cancellable,
                                                                   GError **error);
extern
gboolean g_dbus_connection_send_message (GDBusConnection *connection,
                                                                   GDBusMessage *message,
                                                                   GDBusSendMessageFlags flags,
                                                                   volatile guint32 *out_serial,
                                                                   GError **error);
extern
void g_dbus_connection_send_message_with_reply (GDBusConnection *connection,
                                                                   GDBusMessage *message,
                                                                   GDBusSendMessageFlags flags,
                                                                   gint timeout_msec,
                                                                   volatile guint32 *out_serial,
                                                                   GCancellable *cancellable,
                                                                   GAsyncReadyCallback callback,
                                                                   gpointer user_data);
extern
GDBusMessage *g_dbus_connection_send_message_with_reply_finish (GDBusConnection *connection,
                                                                   GAsyncResult *res,
                                                                   GError **error);
extern
GDBusMessage *g_dbus_connection_send_message_with_reply_sync (GDBusConnection *connection,
                                                                   GDBusMessage *message,
                                                                   GDBusSendMessageFlags flags,
                                                                   gint timeout_msec,
                                                                   volatile guint32 *out_serial,
                                                                   GCancellable *cancellable,
                                                                   GError **error);
extern
gboolean g_dbus_connection_emit_signal (GDBusConnection *connection,
                                                               const gchar *destination_bus_name,
                                                               const gchar *object_path,
                                                               const gchar *interface_name,
                                                               const gchar *signal_name,
                                                               GVariant *parameters,
                                                               GError **error);
extern
void g_dbus_connection_call (GDBusConnection *connection,
                                                               const gchar *bus_name,
                                                               const gchar *object_path,
                                                               const gchar *interface_name,
                                                               const gchar *method_name,
                                                               GVariant *parameters,
                                                               const GVariantType *reply_type,
                                                               GDBusCallFlags flags,
                                                               gint timeout_msec,
                                                               GCancellable *cancellable,
                                                               GAsyncReadyCallback callback,
                                                               gpointer user_data);
extern
GVariant *g_dbus_connection_call_finish (GDBusConnection *connection,
                                                               GAsyncResult *res,
                                                               GError **error);
extern
GVariant *g_dbus_connection_call_sync (GDBusConnection *connection,
                                                               const gchar *bus_name,
                                                               const gchar *object_path,
                                                               const gchar *interface_name,
                                                               const gchar *method_name,
                                                               GVariant *parameters,
                                                               const GVariantType *reply_type,
                                                               GDBusCallFlags flags,
                                                               gint timeout_msec,
                                                               GCancellable *cancellable,
                                                               GError **error);
extern
void g_dbus_connection_call_with_unix_fd_list (GDBusConnection *connection,
                                                               const gchar *bus_name,
                                                               const gchar *object_path,
                                                               const gchar *interface_name,
                                                               const gchar *method_name,
                                                               GVariant *parameters,
                                                               const GVariantType *reply_type,
                                                               GDBusCallFlags flags,
                                                               gint timeout_msec,
                                                               GUnixFDList *fd_list,
                                                               GCancellable *cancellable,
                                                               GAsyncReadyCallback callback,
                                                               gpointer user_data);
extern
GVariant *g_dbus_connection_call_with_unix_fd_list_finish (GDBusConnection *connection,
                                                               GUnixFDList **out_fd_list,
                                                               GAsyncResult *res,
                                                               GError **error);
extern
GVariant *g_dbus_connection_call_with_unix_fd_list_sync (GDBusConnection *connection,
                                                               const gchar *bus_name,
                                                               const gchar *object_path,
                                                               const gchar *interface_name,
                                                               const gchar *method_name,
                                                               GVariant *parameters,
                                                               const GVariantType *reply_type,
                                                               GDBusCallFlags flags,
                                                               gint timeout_msec,
                                                               GUnixFDList *fd_list,
                                                               GUnixFDList **out_fd_list,
                                                               GCancellable *cancellable,
                                                               GError **error);
typedef void (*GDBusInterfaceMethodCallFunc) (GDBusConnection *connection,
                                              const gchar *sender,
                                              const gchar *object_path,
                                              const gchar *interface_name,
                                              const gchar *method_name,
                                              GVariant *parameters,
                                              GDBusMethodInvocation *invocation,
                                              gpointer user_data);
typedef GVariant *(*GDBusInterfaceGetPropertyFunc) (GDBusConnection *connection,
                                                    const gchar *sender,
                                                    const gchar *object_path,
                                                    const gchar *interface_name,
                                                    const gchar *property_name,
                                                    GError **error,
                                                    gpointer user_data);
typedef gboolean (*GDBusInterfaceSetPropertyFunc) (GDBusConnection *connection,
                                                    const gchar *sender,
                                                    const gchar *object_path,
                                                    const gchar *interface_name,
                                                    const gchar *property_name,
                                                    GVariant *value,
                                                    GError **error,
                                                    gpointer user_data);
struct _GDBusInterfaceVTable
{
  GDBusInterfaceMethodCallFunc method_call;
  GDBusInterfaceGetPropertyFunc get_property;
  GDBusInterfaceSetPropertyFunc set_property;
  gpointer padding[8];
};
extern
guint g_dbus_connection_register_object (GDBusConnection *connection,
                                                               const gchar *object_path,
                                                               GDBusInterfaceInfo *interface_info,
                                                               const GDBusInterfaceVTable *vtable,
                                                               gpointer user_data,
                                                               GDestroyNotify user_data_free_func,
                                                               GError **error);
extern
guint g_dbus_connection_register_object_with_closures (GDBusConnection *connection,
                                                                  const gchar *object_path,
                                                                  GDBusInterfaceInfo *interface_info,
                                                                  GClosure *method_call_closure,
                                                                  GClosure *get_property_closure,
                                                                  GClosure *set_property_closure,
                                                                  GError **error);
extern
gboolean g_dbus_connection_unregister_object (GDBusConnection *connection,
                                                               guint registration_id);
typedef gchar** (*GDBusSubtreeEnumerateFunc) (GDBusConnection *connection,
                                              const gchar *sender,
                                              const gchar *object_path,
                                              gpointer user_data);
typedef GDBusInterfaceInfo ** (*GDBusSubtreeIntrospectFunc) (GDBusConnection *connection,
                                                             const gchar *sender,
                                                             const gchar *object_path,
                                                             const gchar *node,
                                                             gpointer user_data);
typedef const GDBusInterfaceVTable * (*GDBusSubtreeDispatchFunc) (GDBusConnection *connection,
                                                                  const gchar *sender,
                                                                  const gchar *object_path,
                                                                  const gchar *interface_name,
                                                                  const gchar *node,
                                                                  gpointer *out_user_data,
                                                                  gpointer user_data);
struct _GDBusSubtreeVTable
{
  GDBusSubtreeEnumerateFunc enumerate;
  GDBusSubtreeIntrospectFunc introspect;
  GDBusSubtreeDispatchFunc dispatch;
  gpointer padding[8];
};
extern
guint g_dbus_connection_register_subtree (GDBusConnection *connection,
                                                               const gchar *object_path,
                                                               const GDBusSubtreeVTable *vtable,
                                                               GDBusSubtreeFlags flags,
                                                               gpointer user_data,
                                                               GDestroyNotify user_data_free_func,
                                                               GError **error);
extern
gboolean g_dbus_connection_unregister_subtree (GDBusConnection *connection,
                                                               guint registration_id);
typedef void (*GDBusSignalCallback) (GDBusConnection *connection,
                                     const gchar *sender_name,
                                     const gchar *object_path,
                                     const gchar *interface_name,
                                     const gchar *signal_name,
                                     GVariant *parameters,
                                     gpointer user_data);
extern
guint g_dbus_connection_signal_subscribe (GDBusConnection *connection,
                                                               const gchar *sender,
                                                               const gchar *interface_name,
                                                               const gchar *member,
                                                               const gchar *object_path,
                                                               const gchar *arg0,
                                                               GDBusSignalFlags flags,
                                                               GDBusSignalCallback callback,
                                                               gpointer user_data,
                                                               GDestroyNotify user_data_free_func);
extern
void g_dbus_connection_signal_unsubscribe (GDBusConnection *connection,
                                                               guint subscription_id);
typedef GDBusMessage *(*GDBusMessageFilterFunction) (GDBusConnection *connection,
                                                     GDBusMessage *message,
                                                     gboolean incoming,
                                                     gpointer user_data);
extern
guint g_dbus_connection_add_filter (GDBusConnection *connection,
                                    GDBusMessageFilterFunction filter_function,
                                    gpointer user_data,
                                    GDestroyNotify user_data_free_func);
extern
void g_dbus_connection_remove_filter (GDBusConnection *connection,
                                       guint filter_id);
extern
GQuark g_dbus_error_quark (void);
extern
gboolean g_dbus_error_is_remote_error (const GError *error);
extern
gchar *g_dbus_error_get_remote_error (const GError *error);
extern
gboolean g_dbus_error_strip_remote_error (GError *error);
struct _GDBusErrorEntry
{
  gint error_code;
  const gchar *dbus_error_name;
};
extern
gboolean g_dbus_error_register_error (GQuark error_domain,
                                             gint error_code,
                                             const gchar *dbus_error_name);
extern
gboolean g_dbus_error_unregister_error (GQuark error_domain,
                                             gint error_code,
                                             const gchar *dbus_error_name);
extern
void g_dbus_error_register_error_domain (const gchar *error_domain_quark_name,
                                             volatile gsize *quark_volatile,
                                             const GDBusErrorEntry *entries,
                                             guint num_entries);
extern
GError *g_dbus_error_new_for_dbus_error (const gchar *dbus_error_name,
                                             const gchar *dbus_error_message);
extern
void g_dbus_error_set_dbus_error (GError **error,
                                             const gchar *dbus_error_name,
                                             const gchar *dbus_error_message,
                                             const gchar *format,
                                             ...) __attribute__((__format__ (__printf__, 4, 5)));
extern
void g_dbus_error_set_dbus_error_valist (GError **error,
                                             const gchar *dbus_error_name,
                                             const gchar *dbus_error_message,
                                             const gchar *format,
                                             va_list var_args) __attribute__((__format__ (__printf__, 4, 0)));
extern
gchar *g_dbus_error_encode_gerror (const GError *error);
struct _GDBusAnnotationInfo
{
  volatile gint ref_count;
  gchar *key;
  gchar *value;
  GDBusAnnotationInfo **annotations;
};
struct _GDBusArgInfo
{
  volatile gint ref_count;
  gchar *name;
  gchar *signature;
  GDBusAnnotationInfo **annotations;
};
struct _GDBusMethodInfo
{
  volatile gint ref_count;
  gchar *name;
  GDBusArgInfo **in_args;
  GDBusArgInfo **out_args;
  GDBusAnnotationInfo **annotations;
};
struct _GDBusSignalInfo
{
  volatile gint ref_count;
  gchar *name;
  GDBusArgInfo **args;
  GDBusAnnotationInfo **annotations;
};
struct _GDBusPropertyInfo
{
  volatile gint ref_count;
  gchar *name;
  gchar *signature;
  GDBusPropertyInfoFlags flags;
  GDBusAnnotationInfo **annotations;
};
struct _GDBusInterfaceInfo
{
  volatile gint ref_count;
  gchar *name;
  GDBusMethodInfo **methods;
  GDBusSignalInfo **signals;
  GDBusPropertyInfo **properties;
  GDBusAnnotationInfo **annotations;
};
struct _GDBusNodeInfo
{
  volatile gint ref_count;
  gchar *path;
  GDBusInterfaceInfo **interfaces;
  GDBusNodeInfo **nodes;
  GDBusAnnotationInfo **annotations;
};
extern
const gchar *g_dbus_annotation_info_lookup (GDBusAnnotationInfo **annotations,
                                                            const gchar *name);
extern
GDBusMethodInfo *g_dbus_interface_info_lookup_method (GDBusInterfaceInfo *info,
                                                            const gchar *name);
extern
GDBusSignalInfo *g_dbus_interface_info_lookup_signal (GDBusInterfaceInfo *info,
                                                            const gchar *name);
extern
GDBusPropertyInfo *g_dbus_interface_info_lookup_property (GDBusInterfaceInfo *info,
                                                            const gchar *name);
extern
void g_dbus_interface_info_cache_build (GDBusInterfaceInfo *info);
extern
void g_dbus_interface_info_cache_release (GDBusInterfaceInfo *info);
extern
void g_dbus_interface_info_generate_xml (GDBusInterfaceInfo *info,
                                                            guint indent,
                                                            GString *string_builder);
extern
GDBusNodeInfo *g_dbus_node_info_new_for_xml (const gchar *xml_data,
                                                            GError **error);
extern
GDBusInterfaceInfo *g_dbus_node_info_lookup_interface (GDBusNodeInfo *info,
                                                            const gchar *name);
extern
void g_dbus_node_info_generate_xml (GDBusNodeInfo *info,
                                                            guint indent,
                                                            GString *string_builder);
extern
GDBusNodeInfo *g_dbus_node_info_ref (GDBusNodeInfo *info);
extern
GDBusInterfaceInfo *g_dbus_interface_info_ref (GDBusInterfaceInfo *info);
extern
GDBusMethodInfo *g_dbus_method_info_ref (GDBusMethodInfo *info);
extern
GDBusSignalInfo *g_dbus_signal_info_ref (GDBusSignalInfo *info);
extern
GDBusPropertyInfo *g_dbus_property_info_ref (GDBusPropertyInfo *info);
extern
GDBusArgInfo *g_dbus_arg_info_ref (GDBusArgInfo *info);
extern
GDBusAnnotationInfo *g_dbus_annotation_info_ref (GDBusAnnotationInfo *info);
extern
void g_dbus_node_info_unref (GDBusNodeInfo *info);
extern
void g_dbus_interface_info_unref (GDBusInterfaceInfo *info);
extern
void g_dbus_method_info_unref (GDBusMethodInfo *info);
extern
void g_dbus_signal_info_unref (GDBusSignalInfo *info);
extern
void g_dbus_property_info_unref (GDBusPropertyInfo *info);
extern
void g_dbus_arg_info_unref (GDBusArgInfo *info);
extern
void g_dbus_annotation_info_unref (GDBusAnnotationInfo *info);
extern
GType g_dbus_node_info_get_type (void) __attribute__((__const__));
extern
GType g_dbus_interface_info_get_type (void) __attribute__((__const__));
extern
GType g_dbus_method_info_get_type (void) __attribute__((__const__));
extern
GType g_dbus_signal_info_get_type (void) __attribute__((__const__));
extern
GType g_dbus_property_info_get_type (void) __attribute__((__const__));
extern
GType g_dbus_arg_info_get_type (void) __attribute__((__const__));
extern
GType g_dbus_annotation_info_get_type (void) __attribute__((__const__));
extern
GType g_dbus_message_get_type (void) __attribute__((__const__));
extern
GDBusMessage *g_dbus_message_new (void);
extern
GDBusMessage *g_dbus_message_new_signal (const gchar *path,
                                                             const gchar *interface_,
                                                             const gchar *signal);
extern
GDBusMessage *g_dbus_message_new_method_call (const gchar *name,
                                                             const gchar *path,
                                                             const gchar *interface_,
                                                             const gchar *method);
extern
GDBusMessage *g_dbus_message_new_method_reply (GDBusMessage *method_call_message);
extern
GDBusMessage *g_dbus_message_new_method_error (GDBusMessage *method_call_message,
                                                             const gchar *error_name,
                                                             const gchar *error_message_format,
                                                             ...);
extern
GDBusMessage *g_dbus_message_new_method_error_valist (GDBusMessage *method_call_message,
                                                                  const gchar *error_name,
                                                                  const gchar *error_message_format,
                                                                  va_list var_args);
extern
GDBusMessage *g_dbus_message_new_method_error_literal (GDBusMessage *method_call_message,
                                                                   const gchar *error_name,
                                                                   const gchar *error_message);
extern
gchar *g_dbus_message_print (GDBusMessage *message,
                                                             guint indent);
extern
gboolean g_dbus_message_get_locked (GDBusMessage *message);
extern
void g_dbus_message_lock (GDBusMessage *message);
extern
GDBusMessage *g_dbus_message_copy (GDBusMessage *message,
                                                             GError **error);
extern
GDBusMessageByteOrder g_dbus_message_get_byte_order (GDBusMessage *message);
extern
void g_dbus_message_set_byte_order (GDBusMessage *message,
                                                             GDBusMessageByteOrder byte_order);
extern
GDBusMessageType g_dbus_message_get_message_type (GDBusMessage *message);
extern
void g_dbus_message_set_message_type (GDBusMessage *message,
                                                             GDBusMessageType type);
extern
GDBusMessageFlags g_dbus_message_get_flags (GDBusMessage *message);
extern
void g_dbus_message_set_flags (GDBusMessage *message,
                                                             GDBusMessageFlags flags);
extern
guint32 g_dbus_message_get_serial (GDBusMessage *message);
extern
void g_dbus_message_set_serial (GDBusMessage *message,
                                                             guint32 serial);
extern
GVariant *g_dbus_message_get_header (GDBusMessage *message,
                                                             GDBusMessageHeaderField header_field);
extern
void g_dbus_message_set_header (GDBusMessage *message,
                                                             GDBusMessageHeaderField header_field,
                                                             GVariant *value);
extern
guchar *g_dbus_message_get_header_fields (GDBusMessage *message);
extern
GVariant *g_dbus_message_get_body (GDBusMessage *message);
extern
void g_dbus_message_set_body (GDBusMessage *message,
                                                             GVariant *body);
extern
GUnixFDList *g_dbus_message_get_unix_fd_list (GDBusMessage *message);
extern
void g_dbus_message_set_unix_fd_list (GDBusMessage *message,
                                                             GUnixFDList *fd_list);
extern
guint32 g_dbus_message_get_reply_serial (GDBusMessage *message);
extern
void g_dbus_message_set_reply_serial (GDBusMessage *message,
                                                             guint32 value);
extern
const gchar *g_dbus_message_get_interface (GDBusMessage *message);
extern
void g_dbus_message_set_interface (GDBusMessage *message,
                                                             const gchar *value);
extern
const gchar *g_dbus_message_get_member (GDBusMessage *message);
extern
void g_dbus_message_set_member (GDBusMessage *message,
                                                             const gchar *value);
extern
const gchar *g_dbus_message_get_path (GDBusMessage *message);
extern
void g_dbus_message_set_path (GDBusMessage *message,
                                                             const gchar *value);
extern
const gchar *g_dbus_message_get_sender (GDBusMessage *message);
extern
void g_dbus_message_set_sender (GDBusMessage *message,
                                                             const gchar *value);
extern
const gchar *g_dbus_message_get_destination (GDBusMessage *message);
extern
void g_dbus_message_set_destination (GDBusMessage *message,
                                                             const gchar *value);
extern
const gchar *g_dbus_message_get_error_name (GDBusMessage *message);
extern
void g_dbus_message_set_error_name (GDBusMessage *message,
                                                             const gchar *value);
extern
const gchar *g_dbus_message_get_signature (GDBusMessage *message);
extern
void g_dbus_message_set_signature (GDBusMessage *message,
                                                             const gchar *value);
extern
guint32 g_dbus_message_get_num_unix_fds (GDBusMessage *message);
extern
void g_dbus_message_set_num_unix_fds (GDBusMessage *message,
                                                             guint32 value);
extern
const gchar *g_dbus_message_get_arg0 (GDBusMessage *message);
extern
GDBusMessage *g_dbus_message_new_from_blob (guchar *blob,
                                                             gsize blob_len,
                                                             GDBusCapabilityFlags capabilities,
                                                             GError **error);
extern
gssize g_dbus_message_bytes_needed (guchar *blob,
                                                             gsize blob_len,
                                                             GError **error);
extern
guchar *g_dbus_message_to_blob (GDBusMessage *message,
                                                             gsize *out_size,
                                                             GDBusCapabilityFlags capabilities,
                                                             GError **error);
extern
gboolean g_dbus_message_to_gerror (GDBusMessage *message,
                                                             GError **error);
extern
GType g_dbus_method_invocation_get_type (void) __attribute__((__const__));
extern
const gchar *g_dbus_method_invocation_get_sender (GDBusMethodInvocation *invocation);
extern
const gchar *g_dbus_method_invocation_get_object_path (GDBusMethodInvocation *invocation);
extern
const gchar *g_dbus_method_invocation_get_interface_name (GDBusMethodInvocation *invocation);
extern
const gchar *g_dbus_method_invocation_get_method_name (GDBusMethodInvocation *invocation);
extern
const GDBusMethodInfo *g_dbus_method_invocation_get_method_info (GDBusMethodInvocation *invocation);
extern
const GDBusPropertyInfo *g_dbus_method_invocation_get_property_info (GDBusMethodInvocation *invocation);
extern
GDBusConnection *g_dbus_method_invocation_get_connection (GDBusMethodInvocation *invocation);
extern
GDBusMessage *g_dbus_method_invocation_get_message (GDBusMethodInvocation *invocation);
extern
GVariant *g_dbus_method_invocation_get_parameters (GDBusMethodInvocation *invocation);
extern
gpointer g_dbus_method_invocation_get_user_data (GDBusMethodInvocation *invocation);
extern
void g_dbus_method_invocation_return_value (GDBusMethodInvocation *invocation,
                                                                      GVariant *parameters);
extern
void g_dbus_method_invocation_return_value_with_unix_fd_list (GDBusMethodInvocation *invocation,
                                                                                GVariant *parameters,
                                                                                GUnixFDList *fd_list);
extern
void g_dbus_method_invocation_return_error (GDBusMethodInvocation *invocation,
                                                                      GQuark domain,
                                                                      gint code,
                                                                      const gchar *format,
                                                                      ...) __attribute__((__format__ (__printf__, 4, 5)));
extern
void g_dbus_method_invocation_return_error_valist (GDBusMethodInvocation *invocation,
                                                                      GQuark domain,
                                                                      gint code,
                                                                      const gchar *format,
                                                                      va_list var_args)
                                                                      __attribute__((__format__ (__printf__, 4, 0)));
extern
void g_dbus_method_invocation_return_error_literal (GDBusMethodInvocation *invocation,
                                                                      GQuark domain,
                                                                      gint code,
                                                                      const gchar *message);
extern
void g_dbus_method_invocation_return_gerror (GDBusMethodInvocation *invocation,
                                                                      const GError *error);
extern
void g_dbus_method_invocation_take_error (GDBusMethodInvocation *invocation,
                                                                      GError *error);
extern
void g_dbus_method_invocation_return_dbus_error (GDBusMethodInvocation *invocation,
                                                                      const gchar *error_name,
                                                                      const gchar *error_message);
typedef void (*GBusAcquiredCallback) (GDBusConnection *connection,
                                      const gchar *name,
                                      gpointer user_data);
typedef void (*GBusNameAcquiredCallback) (GDBusConnection *connection,
                                          const gchar *name,
                                          gpointer user_data);
typedef void (*GBusNameLostCallback) (GDBusConnection *connection,
                                      const gchar *name,
                                      gpointer user_data);
extern
guint g_bus_own_name (GBusType bus_type,
                                      const gchar *name,
                                      GBusNameOwnerFlags flags,
                                      GBusAcquiredCallback bus_acquired_handler,
                                      GBusNameAcquiredCallback name_acquired_handler,
                                      GBusNameLostCallback name_lost_handler,
                                      gpointer user_data,
                                      GDestroyNotify user_data_free_func);
extern
guint g_bus_own_name_on_connection (GDBusConnection *connection,
                                      const gchar *name,
                                      GBusNameOwnerFlags flags,
                                      GBusNameAcquiredCallback name_acquired_handler,
                                      GBusNameLostCallback name_lost_handler,
                                      gpointer user_data,
                                      GDestroyNotify user_data_free_func);
extern
guint g_bus_own_name_with_closures (GBusType bus_type,
                                      const gchar *name,
                                      GBusNameOwnerFlags flags,
                                      GClosure *bus_acquired_closure,
                                      GClosure *name_acquired_closure,
                                      GClosure *name_lost_closure);
extern
guint g_bus_own_name_on_connection_with_closures (
                                      GDBusConnection *connection,
                                      const gchar *name,
                                      GBusNameOwnerFlags flags,
                                      GClosure *name_acquired_closure,
                                      GClosure *name_lost_closure);
extern
void g_bus_unown_name (guint owner_id);
typedef void (*GBusNameAppearedCallback) (GDBusConnection *connection,
                                          const gchar *name,
                                          const gchar *name_owner,
                                          gpointer user_data);
typedef void (*GBusNameVanishedCallback) (GDBusConnection *connection,
                                          const gchar *name,
                                          gpointer user_data);
extern
guint g_bus_watch_name (GBusType bus_type,
                                      const gchar *name,
                                      GBusNameWatcherFlags flags,
                                      GBusNameAppearedCallback name_appeared_handler,
                                      GBusNameVanishedCallback name_vanished_handler,
                                      gpointer user_data,
                                      GDestroyNotify user_data_free_func);
extern
guint g_bus_watch_name_on_connection (GDBusConnection *connection,
                                      const gchar *name,
                                      GBusNameWatcherFlags flags,
                                      GBusNameAppearedCallback name_appeared_handler,
                                      GBusNameVanishedCallback name_vanished_handler,
                                      gpointer user_data,
                                      GDestroyNotify user_data_free_func);
extern
guint g_bus_watch_name_with_closures (GBusType bus_type,
                                      const gchar *name,
                                      GBusNameWatcherFlags flags,
                                      GClosure *name_appeared_closure,
                                      GClosure *name_vanished_closure);
extern
guint g_bus_watch_name_on_connection_with_closures (
                                      GDBusConnection *connection,
                                      const gchar *name,
                                      GBusNameWatcherFlags flags,
                                      GClosure *name_appeared_closure,
                                      GClosure *name_vanished_closure);
extern
void g_bus_unwatch_name (guint watcher_id);
typedef struct _GDBusProxyClass GDBusProxyClass;
typedef struct _GDBusProxyPrivate GDBusProxyPrivate;
struct _GDBusProxy
{
  GObject parent_instance;
  GDBusProxyPrivate *priv;
};
struct _GDBusProxyClass
{
  GObjectClass parent_class;
  void (*g_properties_changed) (GDBusProxy *proxy,
                                GVariant *changed_properties,
                                const gchar* const *invalidated_properties);
  void (*g_signal) (GDBusProxy *proxy,
                                const gchar *sender_name,
                                const gchar *signal_name,
                                GVariant *parameters);
  gpointer padding[32];
};
extern
GType g_dbus_proxy_get_type (void) __attribute__((__const__));
extern
void g_dbus_proxy_new (GDBusConnection *connection,
                                                         GDBusProxyFlags flags,
                                                         GDBusInterfaceInfo *info,
                                                         const gchar *name,
                                                         const gchar *object_path,
                                                         const gchar *interface_name,
                                                         GCancellable *cancellable,
                                                         GAsyncReadyCallback callback,
                                                         gpointer user_data);
extern
GDBusProxy *g_dbus_proxy_new_finish (GAsyncResult *res,
                                                         GError **error);
extern
GDBusProxy *g_dbus_proxy_new_sync (GDBusConnection *connection,
                                                         GDBusProxyFlags flags,
                                                         GDBusInterfaceInfo *info,
                                                         const gchar *name,
                                                         const gchar *object_path,
                                                         const gchar *interface_name,
                                                         GCancellable *cancellable,
                                                         GError **error);
extern
void g_dbus_proxy_new_for_bus (GBusType bus_type,
                                                         GDBusProxyFlags flags,
                                                         GDBusInterfaceInfo *info,
                                                         const gchar *name,
                                                         const gchar *object_path,
                                                         const gchar *interface_name,
                                                         GCancellable *cancellable,
                                                         GAsyncReadyCallback callback,
                                                         gpointer user_data);
extern
GDBusProxy *g_dbus_proxy_new_for_bus_finish (GAsyncResult *res,
                                                         GError **error);
extern
GDBusProxy *g_dbus_proxy_new_for_bus_sync (GBusType bus_type,
                                                         GDBusProxyFlags flags,
                                                         GDBusInterfaceInfo *info,
                                                         const gchar *name,
                                                         const gchar *object_path,
                                                         const gchar *interface_name,
                                                         GCancellable *cancellable,
                                                         GError **error);
extern
GDBusConnection *g_dbus_proxy_get_connection (GDBusProxy *proxy);
extern
GDBusProxyFlags g_dbus_proxy_get_flags (GDBusProxy *proxy);
extern
const gchar *g_dbus_proxy_get_name (GDBusProxy *proxy);
extern
gchar *g_dbus_proxy_get_name_owner (GDBusProxy *proxy);
extern
const gchar *g_dbus_proxy_get_object_path (GDBusProxy *proxy);
extern
const gchar *g_dbus_proxy_get_interface_name (GDBusProxy *proxy);
extern
gint g_dbus_proxy_get_default_timeout (GDBusProxy *proxy);
extern
void g_dbus_proxy_set_default_timeout (GDBusProxy *proxy,
                                                         gint timeout_msec);
extern
GDBusInterfaceInfo *g_dbus_proxy_get_interface_info (GDBusProxy *proxy);
extern
void g_dbus_proxy_set_interface_info (GDBusProxy *proxy,
                                                         GDBusInterfaceInfo *info);
extern
GVariant *g_dbus_proxy_get_cached_property (GDBusProxy *proxy,
                                                         const gchar *property_name);
extern
void g_dbus_proxy_set_cached_property (GDBusProxy *proxy,
                                                         const gchar *property_name,
                                                         GVariant *value);
extern
gchar **g_dbus_proxy_get_cached_property_names (GDBusProxy *proxy);
extern
void g_dbus_proxy_call (GDBusProxy *proxy,
                                                         const gchar *method_name,
                                                         GVariant *parameters,
                                                         GDBusCallFlags flags,
                                                         gint timeout_msec,
                                                         GCancellable *cancellable,
                                                         GAsyncReadyCallback callback,
                                                         gpointer user_data);
extern
GVariant *g_dbus_proxy_call_finish (GDBusProxy *proxy,
                                                         GAsyncResult *res,
                                                         GError **error);
extern
GVariant *g_dbus_proxy_call_sync (GDBusProxy *proxy,
                                                         const gchar *method_name,
                                                         GVariant *parameters,
                                                         GDBusCallFlags flags,
                                                         gint timeout_msec,
                                                         GCancellable *cancellable,
                                                         GError **error);
extern
void g_dbus_proxy_call_with_unix_fd_list (GDBusProxy *proxy,
                                                             const gchar *method_name,
                                                             GVariant *parameters,
                                                             GDBusCallFlags flags,
                                                             gint timeout_msec,
                                                             GUnixFDList *fd_list,
                                                             GCancellable *cancellable,
                                                             GAsyncReadyCallback callback,
                                                             gpointer user_data);
extern
GVariant *g_dbus_proxy_call_with_unix_fd_list_finish (GDBusProxy *proxy,
                                                             GUnixFDList **out_fd_list,
                                                             GAsyncResult *res,
                                                             GError **error);
extern
GVariant *g_dbus_proxy_call_with_unix_fd_list_sync (GDBusProxy *proxy,
                                                             const gchar *method_name,
                                                             GVariant *parameters,
                                                             GDBusCallFlags flags,
                                                             gint timeout_msec,
                                                             GUnixFDList *fd_list,
                                                             GUnixFDList **out_fd_list,
                                                             GCancellable *cancellable,
                                                             GError **error);
extern
GType g_dbus_server_get_type (void) __attribute__((__const__));
extern
GDBusServer *g_dbus_server_new_sync (const gchar *address,
                                                    GDBusServerFlags flags,
                                                    const gchar *guid,
                                                    GDBusAuthObserver *observer,
                                                    GCancellable *cancellable,
                                                    GError **error);
extern
const gchar *g_dbus_server_get_client_address (GDBusServer *server);
extern
const gchar *g_dbus_server_get_guid (GDBusServer *server);
extern
GDBusServerFlags g_dbus_server_get_flags (GDBusServer *server);
extern
void g_dbus_server_start (GDBusServer *server);
extern
void g_dbus_server_stop (GDBusServer *server);
extern
gboolean g_dbus_server_is_active (GDBusServer *server);
extern
gboolean g_dbus_is_guid (const gchar *string);
extern
gchar *g_dbus_generate_guid (void);
extern
gboolean g_dbus_is_name (const gchar *string);
extern
gboolean g_dbus_is_unique_name (const gchar *string);
extern
gboolean g_dbus_is_member_name (const gchar *string);
extern
gboolean g_dbus_is_interface_name (const gchar *string);
extern
void g_dbus_gvariant_to_gvalue (GVariant *value,
                                GValue *out_gvalue);
extern
GVariant *g_dbus_gvalue_to_gvariant (const GValue *gvalue,
                                     const GVariantType *type);
typedef struct _GDriveIface GDriveIface;
struct _GDriveIface
{
  GTypeInterface g_iface;
  void (* changed) (GDrive *drive);
  void (* disconnected) (GDrive *drive);
  void (* eject_button) (GDrive *drive);
  char * (* get_name) (GDrive *drive);
  GIcon * (* get_icon) (GDrive *drive);
  gboolean (* has_volumes) (GDrive *drive);
  GList * (* get_volumes) (GDrive *drive);
  gboolean (* is_media_removable) (GDrive *drive);
  gboolean (* has_media) (GDrive *drive);
  gboolean (* is_media_check_automatic) (GDrive *drive);
  gboolean (* can_eject) (GDrive *drive);
  gboolean (* can_poll_for_media) (GDrive *drive);
  void (* eject) (GDrive *drive,
                                         GMountUnmountFlags flags,
                                         GCancellable *cancellable,
                                         GAsyncReadyCallback callback,
                                         gpointer user_data);
  gboolean (* eject_finish) (GDrive *drive,
                                         GAsyncResult *result,
                                         GError **error);
  void (* poll_for_media) (GDrive *drive,
                                         GCancellable *cancellable,
                                         GAsyncReadyCallback callback,
                                         gpointer user_data);
  gboolean (* poll_for_media_finish) (GDrive *drive,
                                         GAsyncResult *result,
                                         GError **error);
  char * (* get_identifier) (GDrive *drive,
                                         const char *kind);
  char ** (* enumerate_identifiers) (GDrive *drive);
  GDriveStartStopType (* get_start_stop_type) (GDrive *drive);
  gboolean (* can_start) (GDrive *drive);
  gboolean (* can_start_degraded) (GDrive *drive);
  void (* start) (GDrive *drive,
                                         GDriveStartFlags flags,
                                         GMountOperation *mount_operation,
                                         GCancellable *cancellable,
                                         GAsyncReadyCallback callback,
                                         gpointer user_data);
  gboolean (* start_finish) (GDrive *drive,
                                         GAsyncResult *result,
                                         GError **error);
  gboolean (* can_stop) (GDrive *drive);
  void (* stop) (GDrive *drive,
                                         GMountUnmountFlags flags,
                                         GMountOperation *mount_operation,
                                         GCancellable *cancellable,
                                         GAsyncReadyCallback callback,
                                         gpointer user_data);
  gboolean (* stop_finish) (GDrive *drive,
                                         GAsyncResult *result,
                                         GError **error);
  void (* stop_button) (GDrive *drive);
  void (* eject_with_operation) (GDrive *drive,
                                             GMountUnmountFlags flags,
                                             GMountOperation *mount_operation,
                                             GCancellable *cancellable,
                                             GAsyncReadyCallback callback,
                                             gpointer user_data);
  gboolean (* eject_with_operation_finish) (GDrive *drive,
                                             GAsyncResult *result,
                                             GError **error);
  const gchar * (* get_sort_key) (GDrive *drive);
  GIcon * (* get_symbolic_icon) (GDrive *drive);
};
extern
GType g_drive_get_type (void) __attribute__((__const__));
extern
char * g_drive_get_name (GDrive *drive);
extern
GIcon * g_drive_get_icon (GDrive *drive);
extern
GIcon * g_drive_get_symbolic_icon (GDrive *drive);
extern
gboolean g_drive_has_volumes (GDrive *drive);
extern
GList * g_drive_get_volumes (GDrive *drive);
extern
gboolean g_drive_is_media_removable (GDrive *drive);
extern
gboolean g_drive_has_media (GDrive *drive);
extern
gboolean g_drive_is_media_check_automatic (GDrive *drive);
extern
gboolean g_drive_can_poll_for_media (GDrive *drive);
extern
gboolean g_drive_can_eject (GDrive *drive);
extern
void g_drive_eject (GDrive *drive,
                                           GMountUnmountFlags flags,
                                           GCancellable *cancellable,
                                           GAsyncReadyCallback callback,
                                           gpointer user_data);
extern
gboolean g_drive_eject_finish (GDrive *drive,
                                           GAsyncResult *result,
                                           GError **error);
extern
void g_drive_poll_for_media (GDrive *drive,
                                           GCancellable *cancellable,
                                           GAsyncReadyCallback callback,
                                           gpointer user_data);
extern
gboolean g_drive_poll_for_media_finish (GDrive *drive,
                                           GAsyncResult *result,
                                           GError **error);
extern
char * g_drive_get_identifier (GDrive *drive,
                                           const char *kind);
extern
char ** g_drive_enumerate_identifiers (GDrive *drive);
extern
GDriveStartStopType g_drive_get_start_stop_type (GDrive *drive);
extern
gboolean g_drive_can_start (GDrive *drive);
extern
gboolean g_drive_can_start_degraded (GDrive *drive);
extern
void g_drive_start (GDrive *drive,
                                           GDriveStartFlags flags,
                                           GMountOperation *mount_operation,
                                           GCancellable *cancellable,
                                           GAsyncReadyCallback callback,
                                           gpointer user_data);
extern
gboolean g_drive_start_finish (GDrive *drive,
                                           GAsyncResult *result,
                                           GError **error);
extern
gboolean g_drive_can_stop (GDrive *drive);
extern
void g_drive_stop (GDrive *drive,
                                           GMountUnmountFlags flags,
                                           GMountOperation *mount_operation,
                                           GCancellable *cancellable,
                                           GAsyncReadyCallback callback,
                                           gpointer user_data);
extern
gboolean g_drive_stop_finish (GDrive *drive,
                                           GAsyncResult *result,
                                           GError **error);
extern
void g_drive_eject_with_operation (GDrive *drive,
                                               GMountUnmountFlags flags,
                                               GMountOperation *mount_operation,
                                               GCancellable *cancellable,
                                               GAsyncReadyCallback callback,
                                               gpointer user_data);
extern
gboolean g_drive_eject_with_operation_finish (GDrive *drive,
                                               GAsyncResult *result,
                                               GError **error);
extern
const gchar *g_drive_get_sort_key (GDrive *drive);
typedef struct _GDtlsConnectionInterface GDtlsConnectionInterface;
struct _GDtlsConnectionInterface
{
  GTypeInterface g_iface;
  gboolean (*accept_certificate) (GDtlsConnection *connection,
                                  GTlsCertificate *peer_cert,
                                  GTlsCertificateFlags errors);
  gboolean (*handshake) (GDtlsConnection *conn,
                                  GCancellable *cancellable,
                                  GError **error);
  void (*handshake_async) (GDtlsConnection *conn,
                                  int io_priority,
                                  GCancellable *cancellable,
                                  GAsyncReadyCallback callback,
                                  gpointer user_data);
  gboolean (*handshake_finish) (GDtlsConnection *conn,
                                  GAsyncResult *result,
                                  GError **error);
  gboolean (*shutdown) (GDtlsConnection *conn,
                                  gboolean shutdown_read,
                                  gboolean shutdown_write,
                                  GCancellable *cancellable,
                                  GError **error);
  void (*shutdown_async) (GDtlsConnection *conn,
                                  gboolean shutdown_read,
                                  gboolean shutdown_write,
                                  int io_priority,
                                  GCancellable *cancellable,
                                  GAsyncReadyCallback callback,
                                  gpointer user_data);
  gboolean (*shutdown_finish) (GDtlsConnection *conn,
                                  GAsyncResult *result,
                                  GError **error);
};
extern
GType g_dtls_connection_get_type (void) __attribute__((__const__));
extern
void g_dtls_connection_set_database (GDtlsConnection *conn,
                                                                     GTlsDatabase *database);
extern
GTlsDatabase *g_dtls_connection_get_database (GDtlsConnection *conn);
extern
void g_dtls_connection_set_certificate (GDtlsConnection *conn,
                                                                     GTlsCertificate *certificate);
extern
GTlsCertificate *g_dtls_connection_get_certificate (GDtlsConnection *conn);
extern
void g_dtls_connection_set_interaction (GDtlsConnection *conn,
                                                                     GTlsInteraction *interaction);
extern
GTlsInteraction *g_dtls_connection_get_interaction (GDtlsConnection *conn);
extern
GTlsCertificate *g_dtls_connection_get_peer_certificate (GDtlsConnection *conn);
extern
GTlsCertificateFlags g_dtls_connection_get_peer_certificate_errors (GDtlsConnection *conn);
extern
void g_dtls_connection_set_require_close_notify (GDtlsConnection *conn,
                                                                     gboolean require_close_notify);
extern
gboolean g_dtls_connection_get_require_close_notify (GDtlsConnection *conn);
extern
void g_dtls_connection_set_rehandshake_mode (GDtlsConnection *conn,
                                                                     GTlsRehandshakeMode mode);
extern
GTlsRehandshakeMode g_dtls_connection_get_rehandshake_mode (GDtlsConnection *conn);
extern
gboolean g_dtls_connection_handshake (GDtlsConnection *conn,
                                                                     GCancellable *cancellable,
                                                                     GError **error);
extern
void g_dtls_connection_handshake_async (GDtlsConnection *conn,
                                                                     int io_priority,
                                                                     GCancellable *cancellable,
                                                                     GAsyncReadyCallback callback,
                                                                     gpointer user_data);
extern
gboolean g_dtls_connection_handshake_finish (GDtlsConnection *conn,
                                                                     GAsyncResult *result,
                                                                     GError **error);
extern
gboolean g_dtls_connection_shutdown (GDtlsConnection *conn,
                                                                     gboolean shutdown_read,
                                                                     gboolean shutdown_write,
                                                                     GCancellable *cancellable,
                                                                     GError **error);
extern
void g_dtls_connection_shutdown_async (GDtlsConnection *conn,
                                                                     gboolean shutdown_read,
                                                                     gboolean shutdown_write,
                                                                     int io_priority,
                                                                     GCancellable *cancellable,
                                                                     GAsyncReadyCallback callback,
                                                                     gpointer user_data);
extern
gboolean g_dtls_connection_shutdown_finish (GDtlsConnection *conn,
                                                                     GAsyncResult *result,
                                                                     GError **error);
extern
gboolean g_dtls_connection_close (GDtlsConnection *conn,
                                                                     GCancellable *cancellable,
                                                                     GError **error);
extern
void g_dtls_connection_close_async (GDtlsConnection *conn,
                                                                     int io_priority,
                                                                     GCancellable *cancellable,
                                                                     GAsyncReadyCallback callback,
                                                                     gpointer user_data);
extern
gboolean g_dtls_connection_close_finish (GDtlsConnection *conn,
                                                                     GAsyncResult *result,
                                                                     GError **error);
extern
gboolean g_dtls_connection_emit_accept_certificate (GDtlsConnection *conn,
                                                                     GTlsCertificate *peer_cert,
                                                                     GTlsCertificateFlags errors);
typedef struct _GDtlsClientConnectionInterface GDtlsClientConnectionInterface;
struct _GDtlsClientConnectionInterface
{
  GTypeInterface g_iface;
};
extern
GType g_dtls_client_connection_get_type (void) __attribute__((__const__));
extern
GDatagramBased *g_dtls_client_connection_new (GDatagramBased *base_socket,
                                                                    GSocketConnectable *server_identity,
                                                                    GError **error);
extern
GTlsCertificateFlags g_dtls_client_connection_get_validation_flags (GDtlsClientConnection *conn);
extern
void g_dtls_client_connection_set_validation_flags (GDtlsClientConnection *conn,
                                                                    GTlsCertificateFlags flags);
extern
GSocketConnectable *g_dtls_client_connection_get_server_identity (GDtlsClientConnection *conn);
extern
void g_dtls_client_connection_set_server_identity (GDtlsClientConnection *conn,
                                                                    GSocketConnectable *identity);
extern
GList * g_dtls_client_connection_get_accepted_cas (GDtlsClientConnection *conn);
typedef struct _GDtlsServerConnectionInterface GDtlsServerConnectionInterface;
struct _GDtlsServerConnectionInterface
{
  GTypeInterface g_iface;
};
extern
GType g_dtls_server_connection_get_type (void) __attribute__((__const__));
extern
GDatagramBased *g_dtls_server_connection_new (GDatagramBased *base_socket,
                                                   GTlsCertificate *certificate,
                                                   GError **error);
typedef struct _GIconIface GIconIface;
struct _GIconIface
{
  GTypeInterface g_iface;
  guint (* hash) (GIcon *icon);
  gboolean (* equal) (GIcon *icon1,
                               GIcon *icon2);
  gboolean (* to_tokens) (GIcon *icon,
          GPtrArray *tokens,
                               gint *out_version);
  GIcon * (* from_tokens) (gchar **tokens,
                               gint num_tokens,
                               gint version,
                               GError **error);
  GVariant * (* serialize) (GIcon *icon);
};
extern
GType g_icon_get_type (void) __attribute__((__const__));
extern
guint g_icon_hash (gconstpointer icon);
extern
gboolean g_icon_equal (GIcon *icon1,
                                 GIcon *icon2);
extern
gchar *g_icon_to_string (GIcon *icon);
extern
GIcon *g_icon_new_for_string (const gchar *str,
                                 GError **error);
extern
GVariant * g_icon_serialize (GIcon *icon);
extern
GIcon * g_icon_deserialize (GVariant *value);
typedef struct _GEmblem GEmblem;
typedef struct _GEmblemClass GEmblemClass;
extern
GType g_emblem_get_type (void) __attribute__((__const__));
extern
GEmblem *g_emblem_new (GIcon *icon);
extern
GEmblem *g_emblem_new_with_origin (GIcon *icon,
                                         GEmblemOrigin origin);
extern
GIcon *g_emblem_get_icon (GEmblem *emblem);
extern
GEmblemOrigin g_emblem_get_origin (GEmblem *emblem);
typedef struct _GEmblemedIcon GEmblemedIcon;
typedef struct _GEmblemedIconClass GEmblemedIconClass;
typedef struct _GEmblemedIconPrivate GEmblemedIconPrivate;
struct _GEmblemedIcon
{
  GObject parent_instance;
  GEmblemedIconPrivate *priv;
};
struct _GEmblemedIconClass
{
  GObjectClass parent_class;
};
extern
GType g_emblemed_icon_get_type (void) __attribute__((__const__));
extern
GIcon *g_emblemed_icon_new (GIcon *icon,
                                    GEmblem *emblem);
extern
GIcon *g_emblemed_icon_get_icon (GEmblemedIcon *emblemed);
extern
GList *g_emblemed_icon_get_emblems (GEmblemedIcon *emblemed);
extern
void g_emblemed_icon_add_emblem (GEmblemedIcon *emblemed,
                                    GEmblem *emblem);
extern
void g_emblemed_icon_clear_emblems (GEmblemedIcon *emblemed);
struct _GFileAttributeInfo
{
  char *name;
  GFileAttributeType type;
  GFileAttributeInfoFlags flags;
};
struct _GFileAttributeInfoList
{
  GFileAttributeInfo *infos;
  int n_infos;
};
extern
GType g_file_attribute_info_list_get_type (void);
extern
GFileAttributeInfoList * g_file_attribute_info_list_new (void);
extern
GFileAttributeInfoList * g_file_attribute_info_list_ref (GFileAttributeInfoList *list);
extern
void g_file_attribute_info_list_unref (GFileAttributeInfoList *list);
extern
GFileAttributeInfoList * g_file_attribute_info_list_dup (GFileAttributeInfoList *list);
extern
const GFileAttributeInfo *g_file_attribute_info_list_lookup (GFileAttributeInfoList *list,
            const char *name);
extern
void g_file_attribute_info_list_add (GFileAttributeInfoList *list,
            const char *name,
            GFileAttributeType type,
            GFileAttributeInfoFlags flags);
typedef struct _GFileEnumeratorClass GFileEnumeratorClass;
typedef struct _GFileEnumeratorPrivate GFileEnumeratorPrivate;
struct _GFileEnumerator
{
  GObject parent_instance;
  GFileEnumeratorPrivate *priv;
};
struct _GFileEnumeratorClass
{
  GObjectClass parent_class;
  GFileInfo * (* next_file) (GFileEnumerator *enumerator,
                                     GCancellable *cancellable,
                                     GError **error);
  gboolean (* close_fn) (GFileEnumerator *enumerator,
                                     GCancellable *cancellable,
                                     GError **error);
  void (* next_files_async) (GFileEnumerator *enumerator,
                                     int num_files,
                                     int io_priority,
                                     GCancellable *cancellable,
                                     GAsyncReadyCallback callback,
                                     gpointer user_data);
  GList * (* next_files_finish) (GFileEnumerator *enumerator,
                                     GAsyncResult *result,
                                     GError **error);
  void (* close_async) (GFileEnumerator *enumerator,
                                     int io_priority,
                                     GCancellable *cancellable,
                                     GAsyncReadyCallback callback,
                                     gpointer user_data);
  gboolean (* close_finish) (GFileEnumerator *enumerator,
                                     GAsyncResult *result,
                                     GError **error);
  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
  void (*_g_reserved6) (void);
  void (*_g_reserved7) (void);
};
extern
GType g_file_enumerator_get_type (void) __attribute__((__const__));
extern
GFileInfo *g_file_enumerator_next_file (GFileEnumerator *enumerator,
      GCancellable *cancellable,
      GError **error);
extern
gboolean g_file_enumerator_close (GFileEnumerator *enumerator,
      GCancellable *cancellable,
      GError **error);
extern
void g_file_enumerator_next_files_async (GFileEnumerator *enumerator,
      int num_files,
      int io_priority,
      GCancellable *cancellable,
      GAsyncReadyCallback callback,
      gpointer user_data);
extern
GList * g_file_enumerator_next_files_finish (GFileEnumerator *enumerator,
      GAsyncResult *result,
      GError **error);
extern
void g_file_enumerator_close_async (GFileEnumerator *enumerator,
      int io_priority,
      GCancellable *cancellable,
      GAsyncReadyCallback callback,
      gpointer user_data);
extern
gboolean g_file_enumerator_close_finish (GFileEnumerator *enumerator,
      GAsyncResult *result,
      GError **error);
extern
gboolean g_file_enumerator_is_closed (GFileEnumerator *enumerator);
extern
gboolean g_file_enumerator_has_pending (GFileEnumerator *enumerator);
extern
void g_file_enumerator_set_pending (GFileEnumerator *enumerator,
      gboolean pending);
extern
GFile * g_file_enumerator_get_container (GFileEnumerator *enumerator);
extern
GFile * g_file_enumerator_get_child (GFileEnumerator *enumerator,
                                                GFileInfo *info);
extern
gboolean g_file_enumerator_iterate (GFileEnumerator *direnum,
                                                GFileInfo **out_info,
                                                GFile **out_child,
                                                GCancellable *cancellable,
                                                GError **error);
typedef struct _GFileIface GFileIface;
struct _GFileIface
{
  GTypeInterface g_iface;
  GFile * (* dup) (GFile *file);
  guint (* hash) (GFile *file);
  gboolean (* equal) (GFile *file1,
                                                       GFile *file2);
  gboolean (* is_native) (GFile *file);
  gboolean (* has_uri_scheme) (GFile *file,
                                                       const char *uri_scheme);
  char * (* get_uri_scheme) (GFile *file);
  char * (* get_basename) (GFile *file);
  char * (* get_path) (GFile *file);
  char * (* get_uri) (GFile *file);
  char * (* get_parse_name) (GFile *file);
  GFile * (* get_parent) (GFile *file);
  gboolean (* prefix_matches) (GFile *prefix,
                                                       GFile *file);
  char * (* get_relative_path) (GFile *parent,
                                                       GFile *descendant);
  GFile * (* resolve_relative_path) (GFile *file,
                                                       const char *relative_path);
  GFile * (* get_child_for_display_name) (GFile *file,
                                                       const char *display_name,
                                                       GError **error);
  GFileEnumerator * (* enumerate_children) (GFile *file,
                                                       const char *attributes,
                                                       GFileQueryInfoFlags flags,
                                                       GCancellable *cancellable,
                                                       GError **error);
  void (* enumerate_children_async) (GFile *file,
                                                       const char *attributes,
                                                       GFileQueryInfoFlags flags,
                                                       int io_priority,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  GFileEnumerator * (* enumerate_children_finish) (GFile *file,
                                                       GAsyncResult *res,
                                                       GError **error);
  GFileInfo * (* query_info) (GFile *file,
                                                       const char *attributes,
                                                       GFileQueryInfoFlags flags,
                                                       GCancellable *cancellable,
                                                       GError **error);
  void (* query_info_async) (GFile *file,
                                                       const char *attributes,
                                                       GFileQueryInfoFlags flags,
                                                       int io_priority,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  GFileInfo * (* query_info_finish) (GFile *file,
                                                       GAsyncResult *res,
                                                       GError **error);
  GFileInfo * (* query_filesystem_info) (GFile *file,
                                                       const char *attributes,
                                                       GCancellable *cancellable,
                                                       GError **error);
  void (* query_filesystem_info_async) (GFile *file,
                                                       const char *attributes,
                                                       int io_priority,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  GFileInfo * (* query_filesystem_info_finish)(GFile *file,
                                                       GAsyncResult *res,
                                                       GError **error);
  GMount * (* find_enclosing_mount) (GFile *file,
                                                       GCancellable *cancellable,
                                                       GError **error);
  void (* find_enclosing_mount_async) (GFile *file,
                                                       int io_priority,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  GMount * (* find_enclosing_mount_finish) (GFile *file,
                                                       GAsyncResult *res,
                                                       GError **error);
  GFile * (* set_display_name) (GFile *file,
                                                       const char *display_name,
                                                       GCancellable *cancellable,
                                                       GError **error);
  void (* set_display_name_async) (GFile *file,
                                                       const char *display_name,
                                                       int io_priority,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  GFile * (* set_display_name_finish) (GFile *file,
                                                       GAsyncResult *res,
                                                       GError **error);
  GFileAttributeInfoList * (* query_settable_attributes) (GFile *file,
                                                             GCancellable *cancellable,
                                                             GError **error);
  void (* _query_settable_attributes_async) (void);
  void (* _query_settable_attributes_finish) (void);
  GFileAttributeInfoList * (* query_writable_namespaces) (GFile *file,
                                                             GCancellable *cancellable,
                                                             GError **error);
  void (* _query_writable_namespaces_async) (void);
  void (* _query_writable_namespaces_finish) (void);
  gboolean (* set_attribute) (GFile *file,
                                                       const char *attribute,
                                                       GFileAttributeType type,
                                                       gpointer value_p,
                                                       GFileQueryInfoFlags flags,
                                                       GCancellable *cancellable,
                                                       GError **error);
  gboolean (* set_attributes_from_info) (GFile *file,
                                                       GFileInfo *info,
                                                       GFileQueryInfoFlags flags,
                                                       GCancellable *cancellable,
                                                       GError **error);
  void (* set_attributes_async) (GFile *file,
                                                       GFileInfo *info,
                                                       GFileQueryInfoFlags flags,
                                                       int io_priority,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  gboolean (* set_attributes_finish) (GFile *file,
                                                       GAsyncResult *result,
                                                       GFileInfo **info,
                                                       GError **error);
  GFileInputStream * (* read_fn) (GFile *file,
                                                       GCancellable *cancellable,
                                                       GError **error);
  void (* read_async) (GFile *file,
                                                       int io_priority,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  GFileInputStream * (* read_finish) (GFile *file,
                                                       GAsyncResult *res,
                                                       GError **error);
  GFileOutputStream * (* append_to) (GFile *file,
                                                       GFileCreateFlags flags,
                                                       GCancellable *cancellable,
                                                       GError **error);
  void (* append_to_async) (GFile *file,
                                                       GFileCreateFlags flags,
                                                       int io_priority,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  GFileOutputStream * (* append_to_finish) (GFile *file,
                                                       GAsyncResult *res,
                                                       GError **error);
  GFileOutputStream * (* create) (GFile *file,
                                                       GFileCreateFlags flags,
                                                       GCancellable *cancellable,
                                                       GError **error);
  void (* create_async) (GFile *file,
                                                       GFileCreateFlags flags,
                                                       int io_priority,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  GFileOutputStream * (* create_finish) (GFile *file,
                                                       GAsyncResult *res,
                                                       GError **error);
  GFileOutputStream * (* replace) (GFile *file,
                                                       const char *etag,
                                                       gboolean make_backup,
                                                       GFileCreateFlags flags,
                                                       GCancellable *cancellable,
                                                       GError **error);
  void (* replace_async) (GFile *file,
                                                       const char *etag,
                                                       gboolean make_backup,
                                                       GFileCreateFlags flags,
                                                       int io_priority,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  GFileOutputStream * (* replace_finish) (GFile *file,
                                                       GAsyncResult *res,
                                                       GError **error);
  gboolean (* delete_file) (GFile *file,
                                                       GCancellable *cancellable,
                                                       GError **error);
  void (* delete_file_async) (GFile *file,
             int io_priority,
             GCancellable *cancellable,
             GAsyncReadyCallback callback,
             gpointer user_data);
  gboolean (* delete_file_finish) (GFile *file,
             GAsyncResult *result,
             GError **error);
  gboolean (* trash) (GFile *file,
                                                       GCancellable *cancellable,
                                                       GError **error);
  void (* trash_async) (GFile *file,
             int io_priority,
             GCancellable *cancellable,
             GAsyncReadyCallback callback,
             gpointer user_data);
  gboolean (* trash_finish) (GFile *file,
             GAsyncResult *result,
             GError **error);
  gboolean (* make_directory) (GFile *file,
                                                       GCancellable *cancellable,
                                                       GError **error);
  void (* make_directory_async) (GFile *file,
                                                       int io_priority,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  gboolean (* make_directory_finish) (GFile *file,
                                                       GAsyncResult *result,
                                                       GError **error);
  gboolean (* make_symbolic_link) (GFile *file,
                                                       const char *symlink_value,
                                                       GCancellable *cancellable,
                                                       GError **error);
  void (* _make_symbolic_link_async) (void);
  void (* _make_symbolic_link_finish) (void);
  gboolean (* copy) (GFile *source,
                                                       GFile *destination,
                                                       GFileCopyFlags flags,
                                                       GCancellable *cancellable,
                                                       GFileProgressCallback progress_callback,
                                                       gpointer progress_callback_data,
                                                       GError **error);
  void (* copy_async) (GFile *source,
                                                       GFile *destination,
                                                       GFileCopyFlags flags,
                                                       int io_priority,
                                                       GCancellable *cancellable,
                                                       GFileProgressCallback progress_callback,
                                                       gpointer progress_callback_data,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  gboolean (* copy_finish) (GFile *file,
                                                       GAsyncResult *res,
                                                       GError **error);
  gboolean (* move) (GFile *source,
                                                       GFile *destination,
                                                       GFileCopyFlags flags,
                                                       GCancellable *cancellable,
                                                       GFileProgressCallback progress_callback,
                                                       gpointer progress_callback_data,
                                                       GError **error);
  void (* _move_async) (void);
  void (* _move_finish) (void);
  void (* mount_mountable) (GFile *file,
                                                       GMountMountFlags flags,
                                                       GMountOperation *mount_operation,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  GFile * (* mount_mountable_finish) (GFile *file,
                                                       GAsyncResult *result,
                                                       GError **error);
  void (* unmount_mountable) (GFile *file,
                                                       GMountUnmountFlags flags,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  gboolean (* unmount_mountable_finish) (GFile *file,
                                                       GAsyncResult *result,
                                                       GError **error);
  void (* eject_mountable) (GFile *file,
                                                       GMountUnmountFlags flags,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  gboolean (* eject_mountable_finish) (GFile *file,
                                                       GAsyncResult *result,
                                                       GError **error);
  void (* mount_enclosing_volume) (GFile *location,
                                                       GMountMountFlags flags,
                                                       GMountOperation *mount_operation,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  gboolean (* mount_enclosing_volume_finish) (GFile *location,
                                                       GAsyncResult *result,
                                                       GError **error);
  GFileMonitor * (* monitor_dir) (GFile *file,
                                                       GFileMonitorFlags flags,
                                                       GCancellable *cancellable,
                                                       GError **error);
  GFileMonitor * (* monitor_file) (GFile *file,
                                                       GFileMonitorFlags flags,
                                                       GCancellable *cancellable,
                                                       GError **error);
  GFileIOStream * (* open_readwrite) (GFile *file,
                                                       GCancellable *cancellable,
                                                       GError **error);
  void (* open_readwrite_async) (GFile *file,
                                                       int io_priority,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  GFileIOStream * (* open_readwrite_finish) (GFile *file,
                                                       GAsyncResult *res,
                                                       GError **error);
  GFileIOStream * (* create_readwrite) (GFile *file,
             GFileCreateFlags flags,
                                                       GCancellable *cancellable,
                                                       GError **error);
  void (* create_readwrite_async) (GFile *file,
             GFileCreateFlags flags,
                                                       int io_priority,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  GFileIOStream * (* create_readwrite_finish) (GFile *file,
                                                       GAsyncResult *res,
                                                       GError **error);
  GFileIOStream * (* replace_readwrite) (GFile *file,
                                                       const char *etag,
                                                       gboolean make_backup,
                                                       GFileCreateFlags flags,
                                                       GCancellable *cancellable,
                                                       GError **error);
  void (* replace_readwrite_async) (GFile *file,
                                                       const char *etag,
                                                       gboolean make_backup,
                                                       GFileCreateFlags flags,
                                                       int io_priority,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  GFileIOStream * (* replace_readwrite_finish) (GFile *file,
                                                       GAsyncResult *res,
                                                       GError **error);
  void (* start_mountable) (GFile *file,
                                                       GDriveStartFlags flags,
                                                       GMountOperation *start_operation,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  gboolean (* start_mountable_finish) (GFile *file,
                                                       GAsyncResult *result,
                                                       GError **error);
  void (* stop_mountable) (GFile *file,
                                                       GMountUnmountFlags flags,
                                                       GMountOperation *mount_operation,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  gboolean (* stop_mountable_finish) (GFile *file,
                                                       GAsyncResult *result,
                                                       GError **error);
  gboolean supports_thread_contexts;
  void (* unmount_mountable_with_operation) (GFile *file,
                                                       GMountUnmountFlags flags,
                                                       GMountOperation *mount_operation,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  gboolean (* unmount_mountable_with_operation_finish) (GFile *file,
                                                       GAsyncResult *result,
                                                       GError **error);
  void (* eject_mountable_with_operation) (GFile *file,
                                                       GMountUnmountFlags flags,
                                                       GMountOperation *mount_operation,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  gboolean (* eject_mountable_with_operation_finish) (GFile *file,
                                                       GAsyncResult *result,
                                                       GError **error);
  void (* poll_mountable) (GFile *file,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  gboolean (* poll_mountable_finish) (GFile *file,
                                                       GAsyncResult *result,
                                                       GError **error);
  gboolean (* measure_disk_usage) (GFile *file,
                                                       GFileMeasureFlags flags,
                                                       GCancellable *cancellable,
                                                       GFileMeasureProgressCallback progress_callback,
                                                       gpointer progress_data,
                                                       guint64 *disk_usage,
                                                       guint64 *num_dirs,
                                                       guint64 *num_files,
                                                       GError **error);
  void (* measure_disk_usage_async) (GFile *file,
                                                       GFileMeasureFlags flags,
                                                       gint io_priority,
                                                       GCancellable *cancellable,
                                                       GFileMeasureProgressCallback progress_callback,
                                                       gpointer progress_data,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  gboolean (* measure_disk_usage_finish) (GFile *file,
                                                       GAsyncResult *result,
                                                       guint64 *disk_usage,
                                                       guint64 *num_dirs,
                                                       guint64 *num_files,
                                                       GError **error);
};
extern
GType g_file_get_type (void) __attribute__((__const__));
extern
GFile * g_file_new_for_path (const char *path);
extern
GFile * g_file_new_for_uri (const char *uri);
extern
GFile * g_file_new_for_commandline_arg (const char *arg);
extern
GFile * g_file_new_for_commandline_arg_and_cwd (const gchar *arg,
                                                                const gchar *cwd);
extern
GFile * g_file_new_tmp (const char *tmpl,
                                                           GFileIOStream **iostream,
                                                           GError **error);
extern
GFile * g_file_parse_name (const char *parse_name);
extern
GFile * g_file_dup (GFile *file);
extern
guint g_file_hash (gconstpointer file);
extern
gboolean g_file_equal (GFile *file1,
          GFile *file2);
extern
char * g_file_get_basename (GFile *file);
extern
char * g_file_get_path (GFile *file);
extern
char * g_file_get_uri (GFile *file);
extern
char * g_file_get_parse_name (GFile *file);
extern
GFile * g_file_get_parent (GFile *file);
extern
gboolean g_file_has_parent (GFile *file,
                                                           GFile *parent);
extern
GFile * g_file_get_child (GFile *file,
          const char *name);
extern
GFile * g_file_get_child_for_display_name (GFile *file,
          const char *display_name,
          GError **error);
extern
gboolean g_file_has_prefix (GFile *file,
          GFile *prefix);
extern
char * g_file_get_relative_path (GFile *parent,
          GFile *descendant);
extern
GFile * g_file_resolve_relative_path (GFile *file,
          const char *relative_path);
extern
gboolean g_file_is_native (GFile *file);
extern
gboolean g_file_has_uri_scheme (GFile *file,
          const char *uri_scheme);
extern
char * g_file_get_uri_scheme (GFile *file);
extern
GFileInputStream * g_file_read (GFile *file,
          GCancellable *cancellable,
          GError **error);
extern
void g_file_read_async (GFile *file,
          int io_priority,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
extern
GFileInputStream * g_file_read_finish (GFile *file,
          GAsyncResult *res,
          GError **error);
extern
GFileOutputStream * g_file_append_to (GFile *file,
          GFileCreateFlags flags,
          GCancellable *cancellable,
          GError **error);
extern
GFileOutputStream * g_file_create (GFile *file,
          GFileCreateFlags flags,
          GCancellable *cancellable,
          GError **error);
extern
GFileOutputStream * g_file_replace (GFile *file,
          const char *etag,
          gboolean make_backup,
          GFileCreateFlags flags,
          GCancellable *cancellable,
          GError **error);
extern
void g_file_append_to_async (GFile *file,
          GFileCreateFlags flags,
          int io_priority,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
extern
GFileOutputStream * g_file_append_to_finish (GFile *file,
          GAsyncResult *res,
          GError **error);
extern
void g_file_create_async (GFile *file,
          GFileCreateFlags flags,
          int io_priority,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
extern
GFileOutputStream * g_file_create_finish (GFile *file,
          GAsyncResult *res,
          GError **error);
extern
void g_file_replace_async (GFile *file,
          const char *etag,
          gboolean make_backup,
          GFileCreateFlags flags,
          int io_priority,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
extern
GFileOutputStream * g_file_replace_finish (GFile *file,
          GAsyncResult *res,
          GError **error);
extern
GFileIOStream * g_file_open_readwrite (GFile *file,
          GCancellable *cancellable,
          GError **error);
extern
void g_file_open_readwrite_async (GFile *file,
          int io_priority,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
extern
GFileIOStream * g_file_open_readwrite_finish (GFile *file,
          GAsyncResult *res,
          GError **error);
extern
GFileIOStream * g_file_create_readwrite (GFile *file,
          GFileCreateFlags flags,
          GCancellable *cancellable,
          GError **error);
extern
void g_file_create_readwrite_async (GFile *file,
          GFileCreateFlags flags,
          int io_priority,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
extern
GFileIOStream * g_file_create_readwrite_finish (GFile *file,
          GAsyncResult *res,
          GError **error);
extern
GFileIOStream * g_file_replace_readwrite (GFile *file,
          const char *etag,
          gboolean make_backup,
          GFileCreateFlags flags,
          GCancellable *cancellable,
          GError **error);
extern
void g_file_replace_readwrite_async (GFile *file,
          const char *etag,
          gboolean make_backup,
          GFileCreateFlags flags,
          int io_priority,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
extern
GFileIOStream * g_file_replace_readwrite_finish (GFile *file,
          GAsyncResult *res,
          GError **error);
extern
gboolean g_file_query_exists (GFile *file,
          GCancellable *cancellable);
extern
GFileType g_file_query_file_type (GFile *file,
                                                           GFileQueryInfoFlags flags,
                                                           GCancellable *cancellable);
extern
GFileInfo * g_file_query_info (GFile *file,
          const char *attributes,
          GFileQueryInfoFlags flags,
          GCancellable *cancellable,
          GError **error);
extern
void g_file_query_info_async (GFile *file,
          const char *attributes,
          GFileQueryInfoFlags flags,
          int io_priority,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
extern
GFileInfo * g_file_query_info_finish (GFile *file,
          GAsyncResult *res,
          GError **error);
extern
GFileInfo * g_file_query_filesystem_info (GFile *file,
          const char *attributes,
          GCancellable *cancellable,
          GError **error);
extern
void g_file_query_filesystem_info_async (GFile *file,
          const char *attributes,
          int io_priority,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
extern
GFileInfo * g_file_query_filesystem_info_finish (GFile *file,
                                                           GAsyncResult *res,
          GError **error);
extern
GMount * g_file_find_enclosing_mount (GFile *file,
                                                           GCancellable *cancellable,
                                                           GError **error);
extern
void g_file_find_enclosing_mount_async (GFile *file,
          int io_priority,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
extern
GMount * g_file_find_enclosing_mount_finish (GFile *file,
           GAsyncResult *res,
           GError **error);
extern
GFileEnumerator * g_file_enumerate_children (GFile *file,
          const char *attributes,
          GFileQueryInfoFlags flags,
          GCancellable *cancellable,
          GError **error);
extern
void g_file_enumerate_children_async (GFile *file,
          const char *attributes,
          GFileQueryInfoFlags flags,
          int io_priority,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
extern
GFileEnumerator * g_file_enumerate_children_finish (GFile *file,
          GAsyncResult *res,
          GError **error);
extern
GFile * g_file_set_display_name (GFile *file,
          const char *display_name,
          GCancellable *cancellable,
          GError **error);
extern
void g_file_set_display_name_async (GFile *file,
          const char *display_name,
          int io_priority,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
extern
GFile * g_file_set_display_name_finish (GFile *file,
          GAsyncResult *res,
          GError **error);
extern
gboolean g_file_delete (GFile *file,
          GCancellable *cancellable,
          GError **error);
extern
void g_file_delete_async (GFile *file,
          int io_priority,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
extern
gboolean g_file_delete_finish (GFile *file,
          GAsyncResult *result,
          GError **error);
extern
gboolean g_file_trash (GFile *file,
          GCancellable *cancellable,
          GError **error);
extern
void g_file_trash_async (GFile *file,
          int io_priority,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
extern
gboolean g_file_trash_finish (GFile *file,
          GAsyncResult *result,
          GError **error);
extern
gboolean g_file_copy (GFile *source,
          GFile *destination,
          GFileCopyFlags flags,
          GCancellable *cancellable,
          GFileProgressCallback progress_callback,
          gpointer progress_callback_data,
          GError **error);
extern
void g_file_copy_async (GFile *source,
          GFile *destination,
          GFileCopyFlags flags,
          int io_priority,
          GCancellable *cancellable,
          GFileProgressCallback progress_callback,
          gpointer progress_callback_data,
          GAsyncReadyCallback callback,
          gpointer user_data);
extern
gboolean g_file_copy_finish (GFile *file,
          GAsyncResult *res,
          GError **error);
extern
gboolean g_file_move (GFile *source,
          GFile *destination,
          GFileCopyFlags flags,
          GCancellable *cancellable,
          GFileProgressCallback progress_callback,
          gpointer progress_callback_data,
          GError **error);
extern
gboolean g_file_make_directory (GFile *file,
          GCancellable *cancellable,
          GError **error);
extern
void g_file_make_directory_async (GFile *file,
                                                           int io_priority,
                                                           GCancellable *cancellable,
                                                           GAsyncReadyCallback callback,
                                                           gpointer user_data);
extern
gboolean g_file_make_directory_finish (GFile *file,
                                                           GAsyncResult *result,
                                                           GError **error);
extern
gboolean g_file_make_directory_with_parents (GFile *file,
                                             GCancellable *cancellable,
                                             GError **error);
extern
gboolean g_file_make_symbolic_link (GFile *file,
          const char *symlink_value,
          GCancellable *cancellable,
          GError **error);
extern
GFileAttributeInfoList *g_file_query_settable_attributes (GFile *file,
          GCancellable *cancellable,
          GError **error);
extern
GFileAttributeInfoList *g_file_query_writable_namespaces (GFile *file,
          GCancellable *cancellable,
          GError **error);
extern
gboolean g_file_set_attribute (GFile *file,
          const char *attribute,
          GFileAttributeType type,
          gpointer value_p,
          GFileQueryInfoFlags flags,
          GCancellable *cancellable,
          GError **error);
extern
gboolean g_file_set_attributes_from_info (GFile *file,
          GFileInfo *info,
          GFileQueryInfoFlags flags,
          GCancellable *cancellable,
          GError **error);
extern
void g_file_set_attributes_async (GFile *file,
          GFileInfo *info,
          GFileQueryInfoFlags flags,
          int io_priority,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
extern
gboolean g_file_set_attributes_finish (GFile *file,
          GAsyncResult *result,
          GFileInfo **info,
          GError **error);
extern
gboolean g_file_set_attribute_string (GFile *file,
          const char *attribute,
          const char *value,
          GFileQueryInfoFlags flags,
          GCancellable *cancellable,
          GError **error);
extern
gboolean g_file_set_attribute_byte_string (GFile *file,
          const char *attribute,
          const char *value,
          GFileQueryInfoFlags flags,
          GCancellable *cancellable,
          GError **error);
extern
gboolean g_file_set_attribute_uint32 (GFile *file,
          const char *attribute,
          guint32 value,
          GFileQueryInfoFlags flags,
          GCancellable *cancellable,
          GError **error);
extern
gboolean g_file_set_attribute_int32 (GFile *file,
          const char *attribute,
          gint32 value,
          GFileQueryInfoFlags flags,
          GCancellable *cancellable,
          GError **error);
extern
gboolean g_file_set_attribute_uint64 (GFile *file,
          const char *attribute,
          guint64 value,
          GFileQueryInfoFlags flags,
          GCancellable *cancellable,
          GError **error);
extern
gboolean g_file_set_attribute_int64 (GFile *file,
          const char *attribute,
          gint64 value,
          GFileQueryInfoFlags flags,
          GCancellable *cancellable,
          GError **error);
extern
void g_file_mount_enclosing_volume (GFile *location,
          GMountMountFlags flags,
          GMountOperation *mount_operation,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
extern
gboolean g_file_mount_enclosing_volume_finish (GFile *location,
          GAsyncResult *result,
          GError **error);
extern
void g_file_mount_mountable (GFile *file,
          GMountMountFlags flags,
          GMountOperation *mount_operation,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
extern
GFile * g_file_mount_mountable_finish (GFile *file,
          GAsyncResult *result,
          GError **error);
extern
void g_file_unmount_mountable (GFile *file,
                                                           GMountUnmountFlags flags,
                                                           GCancellable *cancellable,
                                                           GAsyncReadyCallback callback,
                                                           gpointer user_data);
extern
gboolean g_file_unmount_mountable_finish (GFile *file,
                                                           GAsyncResult *result,
                                                           GError **error);
extern
void g_file_unmount_mountable_with_operation (GFile *file,
          GMountUnmountFlags flags,
          GMountOperation *mount_operation,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
extern
gboolean g_file_unmount_mountable_with_operation_finish (GFile *file,
          GAsyncResult *result,
          GError **error);
extern
void g_file_eject_mountable (GFile *file,
                                                           GMountUnmountFlags flags,
                                                           GCancellable *cancellable,
                                                           GAsyncReadyCallback callback,
                                                           gpointer user_data);
extern
gboolean g_file_eject_mountable_finish (GFile *file,
                                                           GAsyncResult *result,
                                                           GError **error);
extern
void g_file_eject_mountable_with_operation (GFile *file,
          GMountUnmountFlags flags,
          GMountOperation *mount_operation,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
extern
gboolean g_file_eject_mountable_with_operation_finish (GFile *file,
          GAsyncResult *result,
          GError **error);
extern
gboolean g_file_copy_attributes (GFile *source,
          GFile *destination,
          GFileCopyFlags flags,
          GCancellable *cancellable,
          GError **error);
extern
GFileMonitor* g_file_monitor_directory (GFile *file,
          GFileMonitorFlags flags,
          GCancellable *cancellable,
          GError **error);
extern
GFileMonitor* g_file_monitor_file (GFile *file,
          GFileMonitorFlags flags,
          GCancellable *cancellable,
          GError **error);
extern
GFileMonitor* g_file_monitor (GFile *file,
          GFileMonitorFlags flags,
          GCancellable *cancellable,
          GError **error);
extern
gboolean g_file_measure_disk_usage (GFile *file,
                                                           GFileMeasureFlags flags,
                                                           GCancellable *cancellable,
                                                           GFileMeasureProgressCallback progress_callback,
                                                           gpointer progress_data,
                                                           guint64 *disk_usage,
                                                           guint64 *num_dirs,
                                                           guint64 *num_files,
                                                           GError **error);
extern
void g_file_measure_disk_usage_async (GFile *file,
                                                           GFileMeasureFlags flags,
                                                           gint io_priority,
                                                           GCancellable *cancellable,
                                                           GFileMeasureProgressCallback progress_callback,
                                                           gpointer progress_data,
                                                           GAsyncReadyCallback callback,
                                                           gpointer user_data);
extern
gboolean g_file_measure_disk_usage_finish (GFile *file,
                                                           GAsyncResult *result,
                                                           guint64 *disk_usage,
                                                           guint64 *num_dirs,
                                                           guint64 *num_files,
                                                           GError **error);
extern
void g_file_start_mountable (GFile *file,
          GDriveStartFlags flags,
          GMountOperation *start_operation,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
extern
gboolean g_file_start_mountable_finish (GFile *file,
          GAsyncResult *result,
          GError **error);
extern
void g_file_stop_mountable (GFile *file,
          GMountUnmountFlags flags,
                                                           GMountOperation *mount_operation,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
extern
gboolean g_file_stop_mountable_finish (GFile *file,
          GAsyncResult *result,
          GError **error);
extern
void g_file_poll_mountable (GFile *file,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
extern
gboolean g_file_poll_mountable_finish (GFile *file,
          GAsyncResult *result,
          GError **error);
extern
GAppInfo *g_file_query_default_handler (GFile *file,
           GCancellable *cancellable,
           GError **error);
extern
gboolean g_file_load_contents (GFile *file,
           GCancellable *cancellable,
           char **contents,
           gsize *length,
           char **etag_out,
           GError **error);
extern
void g_file_load_contents_async (GFile *file,
           GCancellable *cancellable,
           GAsyncReadyCallback callback,
           gpointer user_data);
extern
gboolean g_file_load_contents_finish (GFile *file,
           GAsyncResult *res,
           char **contents,
           gsize *length,
           char **etag_out,
           GError **error);
extern
void g_file_load_partial_contents_async (GFile *file,
           GCancellable *cancellable,
           GFileReadMoreCallback read_more_callback,
           GAsyncReadyCallback callback,
           gpointer user_data);
extern
gboolean g_file_load_partial_contents_finish (GFile *file,
           GAsyncResult *res,
           char **contents,
           gsize *length,
           char **etag_out,
           GError **error);
extern
gboolean g_file_replace_contents (GFile *file,
           const char *contents,
           gsize length,
           const char *etag,
           gboolean make_backup,
           GFileCreateFlags flags,
           char **new_etag,
           GCancellable *cancellable,
           GError **error);
extern
void g_file_replace_contents_async (GFile *file,
           const char *contents,
           gsize length,
           const char *etag,
           gboolean make_backup,
           GFileCreateFlags flags,
           GCancellable *cancellable,
           GAsyncReadyCallback callback,
           gpointer user_data);
extern
void g_file_replace_contents_bytes_async (GFile *file,
           GBytes *contents,
           const char *etag,
           gboolean make_backup,
           GFileCreateFlags flags,
           GCancellable *cancellable,
           GAsyncReadyCallback callback,
           gpointer user_data);
extern
gboolean g_file_replace_contents_finish (GFile *file,
           GAsyncResult *res,
           char **new_etag,
           GError **error);
extern
gboolean g_file_supports_thread_contexts (GFile *file);
typedef struct _GFileIconClass GFileIconClass;
extern
GType g_file_icon_get_type (void) __attribute__((__const__));
extern
GIcon * g_file_icon_new (GFile *file);
extern
GFile * g_file_icon_get_file (GFileIcon *icon);
typedef struct _GFileInfoClass GFileInfoClass;
extern
GType g_file_info_get_type (void) __attribute__((__const__));
extern
GFileInfo * g_file_info_new (void);
extern
GFileInfo * g_file_info_dup (GFileInfo *other);
extern
void g_file_info_copy_into (GFileInfo *src_info,
         GFileInfo *dest_info);
extern
gboolean g_file_info_has_attribute (GFileInfo *info,
         const char *attribute);
extern
gboolean g_file_info_has_namespace (GFileInfo *info,
         const char *name_space);
extern
char ** g_file_info_list_attributes (GFileInfo *info,
         const char *name_space);
extern
gboolean g_file_info_get_attribute_data (GFileInfo *info,
         const char *attribute,
         GFileAttributeType *type,
         gpointer *value_pp,
         GFileAttributeStatus *status);
extern
GFileAttributeType g_file_info_get_attribute_type (GFileInfo *info,
         const char *attribute);
extern
void g_file_info_remove_attribute (GFileInfo *info,
         const char *attribute);
extern
GFileAttributeStatus g_file_info_get_attribute_status (GFileInfo *info,
         const char *attribute);
extern
gboolean g_file_info_set_attribute_status (GFileInfo *info,
         const char *attribute,
         GFileAttributeStatus status);
extern
char * g_file_info_get_attribute_as_string (GFileInfo *info,
         const char *attribute);
extern
const char * g_file_info_get_attribute_string (GFileInfo *info,
         const char *attribute);
extern
const char * g_file_info_get_attribute_byte_string (GFileInfo *info,
         const char *attribute);
extern
gboolean g_file_info_get_attribute_boolean (GFileInfo *info,
         const char *attribute);
extern
guint32 g_file_info_get_attribute_uint32 (GFileInfo *info,
         const char *attribute);
extern
gint32 g_file_info_get_attribute_int32 (GFileInfo *info,
         const char *attribute);
extern
guint64 g_file_info_get_attribute_uint64 (GFileInfo *info,
         const char *attribute);
extern
gint64 g_file_info_get_attribute_int64 (GFileInfo *info,
         const char *attribute);
extern
GObject * g_file_info_get_attribute_object (GFileInfo *info,
         const char *attribute);
extern
char ** g_file_info_get_attribute_stringv (GFileInfo *info,
         const char *attribute);
extern
void g_file_info_set_attribute (GFileInfo *info,
         const char *attribute,
         GFileAttributeType type,
         gpointer value_p);
extern
void g_file_info_set_attribute_string (GFileInfo *info,
         const char *attribute,
         const char *attr_value);
extern
void g_file_info_set_attribute_byte_string (GFileInfo *info,
         const char *attribute,
         const char *attr_value);
extern
void g_file_info_set_attribute_boolean (GFileInfo *info,
         const char *attribute,
         gboolean attr_value);
extern
void g_file_info_set_attribute_uint32 (GFileInfo *info,
         const char *attribute,
         guint32 attr_value);
extern
void g_file_info_set_attribute_int32 (GFileInfo *info,
         const char *attribute,
         gint32 attr_value);
extern
void g_file_info_set_attribute_uint64 (GFileInfo *info,
         const char *attribute,
         guint64 attr_value);
extern
void g_file_info_set_attribute_int64 (GFileInfo *info,
         const char *attribute,
         gint64 attr_value);
extern
void g_file_info_set_attribute_object (GFileInfo *info,
         const char *attribute,
         GObject *attr_value);
extern
void g_file_info_set_attribute_stringv (GFileInfo *info,
         const char *attribute,
         char **attr_value);
extern
void g_file_info_clear_status (GFileInfo *info);
extern
GDateTime * g_file_info_get_deletion_date (GFileInfo *info);
extern
GFileType g_file_info_get_file_type (GFileInfo *info);
extern
gboolean g_file_info_get_is_hidden (GFileInfo *info);
extern
gboolean g_file_info_get_is_backup (GFileInfo *info);
extern
gboolean g_file_info_get_is_symlink (GFileInfo *info);
extern
const char * g_file_info_get_name (GFileInfo *info);
extern
const char * g_file_info_get_display_name (GFileInfo *info);
extern
const char * g_file_info_get_edit_name (GFileInfo *info);
extern
GIcon * g_file_info_get_icon (GFileInfo *info);
extern
GIcon * g_file_info_get_symbolic_icon (GFileInfo *info);
extern
const char * g_file_info_get_content_type (GFileInfo *info);
extern
goffset g_file_info_get_size (GFileInfo *info);
extern
void g_file_info_get_modification_time (GFileInfo *info,
            GTimeVal *result);
extern
const char * g_file_info_get_symlink_target (GFileInfo *info);
extern
const char * g_file_info_get_etag (GFileInfo *info);
extern
gint32 g_file_info_get_sort_order (GFileInfo *info);
extern
void g_file_info_set_attribute_mask (GFileInfo *info,
            GFileAttributeMatcher *mask);
extern
void g_file_info_unset_attribute_mask (GFileInfo *info);
extern
void g_file_info_set_file_type (GFileInfo *info,
            GFileType type);
extern
void g_file_info_set_is_hidden (GFileInfo *info,
            gboolean is_hidden);
extern
void g_file_info_set_is_symlink (GFileInfo *info,
            gboolean is_symlink);
extern
void g_file_info_set_name (GFileInfo *info,
            const char *name);
extern
void g_file_info_set_display_name (GFileInfo *info,
            const char *display_name);
extern
void g_file_info_set_edit_name (GFileInfo *info,
            const char *edit_name);
extern
void g_file_info_set_icon (GFileInfo *info,
            GIcon *icon);
extern
void g_file_info_set_symbolic_icon (GFileInfo *info,
            GIcon *icon);
extern
void g_file_info_set_content_type (GFileInfo *info,
            const char *content_type);
extern
void g_file_info_set_size (GFileInfo *info,
            goffset size);
extern
void g_file_info_set_modification_time (GFileInfo *info,
            GTimeVal *mtime);
extern
void g_file_info_set_symlink_target (GFileInfo *info,
            const char *symlink_target);
extern
void g_file_info_set_sort_order (GFileInfo *info,
            gint32 sort_order);
extern
GType g_file_attribute_matcher_get_type (void) __attribute__((__const__));
extern
GFileAttributeMatcher *g_file_attribute_matcher_new (const char *attributes);
extern
GFileAttributeMatcher *g_file_attribute_matcher_ref (GFileAttributeMatcher *matcher);
extern
void g_file_attribute_matcher_unref (GFileAttributeMatcher *matcher);
extern
GFileAttributeMatcher *g_file_attribute_matcher_subtract (GFileAttributeMatcher *matcher,
                                                                GFileAttributeMatcher *subtract);
extern
gboolean g_file_attribute_matcher_matches (GFileAttributeMatcher *matcher,
        const char *attribute);
extern
gboolean g_file_attribute_matcher_matches_only (GFileAttributeMatcher *matcher,
        const char *attribute);
extern
gboolean g_file_attribute_matcher_enumerate_namespace (GFileAttributeMatcher *matcher,
             const char *ns);
extern
const char * g_file_attribute_matcher_enumerate_next (GFileAttributeMatcher *matcher);
extern
char * g_file_attribute_matcher_to_string (GFileAttributeMatcher *matcher);
typedef struct _GFileInputStreamClass GFileInputStreamClass;
typedef struct _GFileInputStreamPrivate GFileInputStreamPrivate;
struct _GFileInputStream
{
  GInputStream parent_instance;
  GFileInputStreamPrivate *priv;
};
struct _GFileInputStreamClass
{
  GInputStreamClass parent_class;
  goffset (* tell) (GFileInputStream *stream);
  gboolean (* can_seek) (GFileInputStream *stream);
  gboolean (* seek) (GFileInputStream *stream,
                                     goffset offset,
                                     GSeekType type,
                                     GCancellable *cancellable,
                                     GError **error);
  GFileInfo * (* query_info) (GFileInputStream *stream,
                                     const char *attributes,
                                     GCancellable *cancellable,
                                     GError **error);
  void (* query_info_async) (GFileInputStream *stream,
                                     const char *attributes,
                                     int io_priority,
                                     GCancellable *cancellable,
                                     GAsyncReadyCallback callback,
                                     gpointer user_data);
  GFileInfo * (* query_info_finish) (GFileInputStream *stream,
                                     GAsyncResult *result,
                                     GError **error);
  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};
extern
GType g_file_input_stream_get_type (void) __attribute__((__const__));
extern
GFileInfo *g_file_input_stream_query_info (GFileInputStream *stream,
        const char *attributes,
        GCancellable *cancellable,
        GError **error);
extern
void g_file_input_stream_query_info_async (GFileInputStream *stream,
        const char *attributes,
        int io_priority,
        GCancellable *cancellable,
        GAsyncReadyCallback callback,
        gpointer user_data);
extern
GFileInfo *g_file_input_stream_query_info_finish (GFileInputStream *stream,
        GAsyncResult *result,
        GError **error);
extern
GQuark g_io_error_quark (void);
extern
GIOErrorEnum g_io_error_from_errno (gint err_no);
typedef struct _GIOStreamPrivate GIOStreamPrivate;
typedef struct _GIOStreamClass GIOStreamClass;
struct _GIOStream
{
  GObject parent_instance;
  GIOStreamPrivate *priv;
};
struct _GIOStreamClass
{
  GObjectClass parent_class;
  GInputStream * (*get_input_stream) (GIOStream *stream);
  GOutputStream * (*get_output_stream) (GIOStream *stream);
  gboolean (* close_fn) (GIOStream *stream,
                             GCancellable *cancellable,
                             GError **error);
  void (* close_async) (GIOStream *stream,
                             int io_priority,
                             GCancellable *cancellable,
                             GAsyncReadyCallback callback,
                             gpointer user_data);
  gboolean (* close_finish) (GIOStream *stream,
                             GAsyncResult *result,
                             GError **error);
  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
  void (*_g_reserved6) (void);
  void (*_g_reserved7) (void);
  void (*_g_reserved8) (void);
  void (*_g_reserved9) (void);
  void (*_g_reserved10) (void);
};
extern
GType g_io_stream_get_type (void) __attribute__((__const__));
extern
GInputStream * g_io_stream_get_input_stream (GIOStream *stream);
extern
GOutputStream *g_io_stream_get_output_stream (GIOStream *stream);
extern
void g_io_stream_splice_async (GIOStream *stream1,
           GIOStream *stream2,
           GIOStreamSpliceFlags flags,
           int io_priority,
           GCancellable *cancellable,
           GAsyncReadyCallback callback,
           gpointer user_data);
extern
gboolean g_io_stream_splice_finish (GAsyncResult *result,
                                              GError **error);
extern
gboolean g_io_stream_close (GIOStream *stream,
           GCancellable *cancellable,
           GError **error);
extern
void g_io_stream_close_async (GIOStream *stream,
           int io_priority,
           GCancellable *cancellable,
           GAsyncReadyCallback callback,
           gpointer user_data);
extern
gboolean g_io_stream_close_finish (GIOStream *stream,
           GAsyncResult *result,
           GError **error);
extern
gboolean g_io_stream_is_closed (GIOStream *stream);
extern
gboolean g_io_stream_has_pending (GIOStream *stream);
extern
gboolean g_io_stream_set_pending (GIOStream *stream,
           GError **error);
extern
void g_io_stream_clear_pending (GIOStream *stream);
typedef struct _GFileIOStreamClass GFileIOStreamClass;
typedef struct _GFileIOStreamPrivate GFileIOStreamPrivate;
struct _GFileIOStream
{
  GIOStream parent_instance;
  GFileIOStreamPrivate *priv;
};
struct _GFileIOStreamClass
{
  GIOStreamClass parent_class;
  goffset (* tell) (GFileIOStream *stream);
  gboolean (* can_seek) (GFileIOStream *stream);
  gboolean (* seek) (GFileIOStream *stream,
                                     goffset offset,
                                     GSeekType type,
                                     GCancellable *cancellable,
                                     GError **error);
  gboolean (* can_truncate) (GFileIOStream *stream);
  gboolean (* truncate_fn) (GFileIOStream *stream,
                                     goffset size,
                                     GCancellable *cancellable,
                                     GError **error);
  GFileInfo * (* query_info) (GFileIOStream *stream,
                                     const char *attributes,
                                     GCancellable *cancellable,
                                     GError **error);
  void (* query_info_async) (GFileIOStream *stream,
                                     const char *attributes,
                                     int io_priority,
                                     GCancellable *cancellable,
                                     GAsyncReadyCallback callback,
                                     gpointer user_data);
  GFileInfo * (* query_info_finish) (GFileIOStream *stream,
                                     GAsyncResult *result,
                                     GError **error);
  char * (* get_etag) (GFileIOStream *stream);
  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};
extern
GType g_file_io_stream_get_type (void) __attribute__((__const__));
extern
GFileInfo *g_file_io_stream_query_info (GFileIOStream *stream,
            const char *attributes,
            GCancellable *cancellable,
            GError **error);
extern
void g_file_io_stream_query_info_async (GFileIOStream *stream,
            const char *attributes,
            int io_priority,
            GCancellable *cancellable,
            GAsyncReadyCallback callback,
            gpointer user_data);
extern
GFileInfo *g_file_io_stream_query_info_finish (GFileIOStream *stream,
            GAsyncResult *result,
            GError **error);
extern
char * g_file_io_stream_get_etag (GFileIOStream *stream);
typedef struct _GFileMonitorClass GFileMonitorClass;
typedef struct _GFileMonitorPrivate GFileMonitorPrivate;
struct _GFileMonitor
{
  GObject parent_instance;
  GFileMonitorPrivate *priv;
};
struct _GFileMonitorClass
{
  GObjectClass parent_class;
  void (* changed) (GFileMonitor *monitor,
                        GFile *file,
                        GFile *other_file,
                        GFileMonitorEvent event_type);
  gboolean (* cancel) (GFileMonitor *monitor);
  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};
extern
GType g_file_monitor_get_type (void) __attribute__((__const__));
extern
gboolean g_file_monitor_cancel (GFileMonitor *monitor);
extern
gboolean g_file_monitor_is_cancelled (GFileMonitor *monitor);
extern
void g_file_monitor_set_rate_limit (GFileMonitor *monitor,
                                        gint limit_msecs);
extern
void g_file_monitor_emit_event (GFileMonitor *monitor,
                                        GFile *child,
                                        GFile *other_file,
                                        GFileMonitorEvent event_type);
typedef struct _GFilenameCompleterClass GFilenameCompleterClass;
struct _GFilenameCompleterClass
{
  GObjectClass parent_class;
  void (* got_completion_data) (GFilenameCompleter *filename_completer);
  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
};
extern
GType g_filename_completer_get_type (void) __attribute__((__const__));
extern
GFilenameCompleter *g_filename_completer_new (void);
extern
char * g_filename_completer_get_completion_suffix (GFilenameCompleter *completer,
                                                                const char *initial_text);
extern
char ** g_filename_completer_get_completions (GFilenameCompleter *completer,
                                                                const char *initial_text);
extern
void g_filename_completer_set_dirs_only (GFilenameCompleter *completer,
                                                                gboolean dirs_only);
typedef struct _GFileOutputStreamClass GFileOutputStreamClass;
typedef struct _GFileOutputStreamPrivate GFileOutputStreamPrivate;
struct _GFileOutputStream
{
  GOutputStream parent_instance;
  GFileOutputStreamPrivate *priv;
};
struct _GFileOutputStreamClass
{
  GOutputStreamClass parent_class;
  goffset (* tell) (GFileOutputStream *stream);
  gboolean (* can_seek) (GFileOutputStream *stream);
  gboolean (* seek) (GFileOutputStream *stream,
                                     goffset offset,
                                     GSeekType type,
                                     GCancellable *cancellable,
                                     GError **error);
  gboolean (* can_truncate) (GFileOutputStream *stream);
  gboolean (* truncate_fn) (GFileOutputStream *stream,
                                     goffset size,
                                     GCancellable *cancellable,
                                     GError **error);
  GFileInfo * (* query_info) (GFileOutputStream *stream,
                                     const char *attributes,
                                     GCancellable *cancellable,
                                     GError **error);
  void (* query_info_async) (GFileOutputStream *stream,
                                     const char *attributes,
                                     int io_priority,
                                     GCancellable *cancellable,
                                     GAsyncReadyCallback callback,
                                     gpointer user_data);
  GFileInfo * (* query_info_finish) (GFileOutputStream *stream,
                                     GAsyncResult *result,
                                     GError **error);
  char * (* get_etag) (GFileOutputStream *stream);
  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};
extern
GType g_file_output_stream_get_type (void) __attribute__((__const__));
extern
GFileInfo *g_file_output_stream_query_info (GFileOutputStream *stream,
                                                   const char *attributes,
                                                   GCancellable *cancellable,
                                                   GError **error);
extern
void g_file_output_stream_query_info_async (GFileOutputStream *stream,
         const char *attributes,
         int io_priority,
         GCancellable *cancellable,
         GAsyncReadyCallback callback,
         gpointer user_data);
extern
GFileInfo *g_file_output_stream_query_info_finish (GFileOutputStream *stream,
         GAsyncResult *result,
         GError **error);
extern
char * g_file_output_stream_get_etag (GFileOutputStream *stream);
typedef struct _GInetAddressClass GInetAddressClass;
typedef struct _GInetAddressPrivate GInetAddressPrivate;
struct _GInetAddress
{
  GObject parent_instance;
  GInetAddressPrivate *priv;
};
struct _GInetAddressClass
{
  GObjectClass parent_class;
  gchar * (*to_string) (GInetAddress *address);
  const guint8 * (*to_bytes) (GInetAddress *address);
};
extern
GType g_inet_address_get_type (void) __attribute__((__const__));
extern
GInetAddress * g_inet_address_new_from_string (const gchar *string);
extern
GInetAddress * g_inet_address_new_from_bytes (const guint8 *bytes,
          GSocketFamily family);
extern
GInetAddress * g_inet_address_new_loopback (GSocketFamily family);
extern
GInetAddress * g_inet_address_new_any (GSocketFamily family);
extern
gboolean g_inet_address_equal (GInetAddress *address,
                                                           GInetAddress *other_address);
extern
gchar * g_inet_address_to_string (GInetAddress *address);
extern
const guint8 * g_inet_address_to_bytes (GInetAddress *address);
extern
gsize g_inet_address_get_native_size (GInetAddress *address);
extern
GSocketFamily g_inet_address_get_family (GInetAddress *address);
extern
gboolean g_inet_address_get_is_any (GInetAddress *address);
extern
gboolean g_inet_address_get_is_loopback (GInetAddress *address);
extern
gboolean g_inet_address_get_is_link_local (GInetAddress *address);
extern
gboolean g_inet_address_get_is_site_local (GInetAddress *address);
extern
gboolean g_inet_address_get_is_multicast (GInetAddress *address);
extern
gboolean g_inet_address_get_is_mc_global (GInetAddress *address);
extern
gboolean g_inet_address_get_is_mc_link_local (GInetAddress *address);
extern
gboolean g_inet_address_get_is_mc_node_local (GInetAddress *address);
extern
gboolean g_inet_address_get_is_mc_org_local (GInetAddress *address);
extern
gboolean g_inet_address_get_is_mc_site_local (GInetAddress *address);
typedef struct _GInetAddressMaskClass GInetAddressMaskClass;
typedef struct _GInetAddressMaskPrivate GInetAddressMaskPrivate;
struct _GInetAddressMask
{
  GObject parent_instance;
  GInetAddressMaskPrivate *priv;
};
struct _GInetAddressMaskClass
{
  GObjectClass parent_class;
};
extern
GType g_inet_address_mask_get_type (void) __attribute__((__const__));
extern
GInetAddressMask *g_inet_address_mask_new (GInetAddress *addr,
             guint length,
             GError **error);
extern
GInetAddressMask *g_inet_address_mask_new_from_string (const gchar *mask_string,
             GError **error);
extern
gchar *g_inet_address_mask_to_string (GInetAddressMask *mask);
extern
GSocketFamily g_inet_address_mask_get_family (GInetAddressMask *mask);
extern
GInetAddress *g_inet_address_mask_get_address (GInetAddressMask *mask);
extern
guint g_inet_address_mask_get_length (GInetAddressMask *mask);
extern
gboolean g_inet_address_mask_matches (GInetAddressMask *mask,
             GInetAddress *address);
extern
gboolean g_inet_address_mask_equal (GInetAddressMask *mask,
             GInetAddressMask *mask2);
typedef struct _GSocketAddressClass GSocketAddressClass;
struct _GSocketAddress
{
  GObject parent_instance;
};
struct _GSocketAddressClass
{
  GObjectClass parent_class;
  GSocketFamily (*get_family) (GSocketAddress *address);
  gssize (*get_native_size) (GSocketAddress *address);
  gboolean (*to_native) (GSocketAddress *address,
                                     gpointer dest,
                                     gsize destlen,
         GError **error);
};
extern
GType g_socket_address_get_type (void) __attribute__((__const__));
extern
GSocketFamily g_socket_address_get_family (GSocketAddress *address);
extern
GSocketAddress * g_socket_address_new_from_native (gpointer native,
                                                        gsize len);
extern
gboolean g_socket_address_to_native (GSocketAddress *address,
                                                        gpointer dest,
                                                        gsize destlen,
       GError **error);
extern
gssize g_socket_address_get_native_size (GSocketAddress *address);
typedef struct _GInetSocketAddressClass GInetSocketAddressClass;
typedef struct _GInetSocketAddressPrivate GInetSocketAddressPrivate;
struct _GInetSocketAddress
{
  GSocketAddress parent_instance;
  GInetSocketAddressPrivate *priv;
};
struct _GInetSocketAddressClass
{
  GSocketAddressClass parent_class;
};
extern
GType g_inet_socket_address_get_type (void) __attribute__((__const__));
extern
GSocketAddress *g_inet_socket_address_new (GInetAddress *address,
                                                       guint16 port);
extern
GSocketAddress *g_inet_socket_address_new_from_string (const char *address,
                                                       guint port);
extern
GInetAddress * g_inet_socket_address_get_address (GInetSocketAddress *address);
extern
guint16 g_inet_socket_address_get_port (GInetSocketAddress *address);
extern
guint32 g_inet_socket_address_get_flowinfo (GInetSocketAddress *address);
extern
guint32 g_inet_socket_address_get_scope_id (GInetSocketAddress *address);
extern GType g_app_info_create_flags_get_type (void) __attribute__((__const__));
extern GType g_converter_flags_get_type (void) __attribute__((__const__));
extern GType g_converter_result_get_type (void) __attribute__((__const__));
extern GType g_data_stream_byte_order_get_type (void) __attribute__((__const__));
extern GType g_data_stream_newline_type_get_type (void) __attribute__((__const__));
extern GType g_file_attribute_type_get_type (void) __attribute__((__const__));
extern GType g_file_attribute_info_flags_get_type (void) __attribute__((__const__));
extern GType g_file_attribute_status_get_type (void) __attribute__((__const__));
extern GType g_file_query_info_flags_get_type (void) __attribute__((__const__));
extern GType g_file_create_flags_get_type (void) __attribute__((__const__));
extern GType g_file_measure_flags_get_type (void) __attribute__((__const__));
extern GType g_mount_mount_flags_get_type (void) __attribute__((__const__));
extern GType g_mount_unmount_flags_get_type (void) __attribute__((__const__));
extern GType g_drive_start_flags_get_type (void) __attribute__((__const__));
extern GType g_drive_start_stop_type_get_type (void) __attribute__((__const__));
extern GType g_file_copy_flags_get_type (void) __attribute__((__const__));
extern GType g_file_monitor_flags_get_type (void) __attribute__((__const__));
extern GType g_file_type_get_type (void) __attribute__((__const__));
extern GType g_filesystem_preview_type_get_type (void) __attribute__((__const__));
extern GType g_file_monitor_event_get_type (void) __attribute__((__const__));
extern GType g_io_error_enum_get_type (void) __attribute__((__const__));
extern GType g_ask_password_flags_get_type (void) __attribute__((__const__));
extern GType g_password_save_get_type (void) __attribute__((__const__));
extern GType g_mount_operation_result_get_type (void) __attribute__((__const__));
extern GType g_output_stream_splice_flags_get_type (void) __attribute__((__const__));
extern GType g_io_stream_splice_flags_get_type (void) __attribute__((__const__));
extern GType g_emblem_origin_get_type (void) __attribute__((__const__));
extern GType g_resolver_error_get_type (void) __attribute__((__const__));
extern GType g_resolver_record_type_get_type (void) __attribute__((__const__));
extern GType g_resource_error_get_type (void) __attribute__((__const__));
extern GType g_resource_flags_get_type (void) __attribute__((__const__));
extern GType g_resource_lookup_flags_get_type (void) __attribute__((__const__));
extern GType g_socket_family_get_type (void) __attribute__((__const__));
extern GType g_socket_type_get_type (void) __attribute__((__const__));
extern GType g_socket_msg_flags_get_type (void) __attribute__((__const__));
extern GType g_socket_protocol_get_type (void) __attribute__((__const__));
extern GType g_zlib_compressor_format_get_type (void) __attribute__((__const__));
extern GType g_unix_socket_address_type_get_type (void) __attribute__((__const__));
extern GType g_bus_type_get_type (void) __attribute__((__const__));
extern GType g_bus_name_owner_flags_get_type (void) __attribute__((__const__));
extern GType g_bus_name_watcher_flags_get_type (void) __attribute__((__const__));
extern GType g_dbus_proxy_flags_get_type (void) __attribute__((__const__));
extern GType g_dbus_error_get_type (void) __attribute__((__const__));
extern GType g_dbus_connection_flags_get_type (void) __attribute__((__const__));
extern GType g_dbus_capability_flags_get_type (void) __attribute__((__const__));
extern GType g_dbus_call_flags_get_type (void) __attribute__((__const__));
extern GType g_dbus_message_type_get_type (void) __attribute__((__const__));
extern GType g_dbus_message_flags_get_type (void) __attribute__((__const__));
extern GType g_dbus_message_header_field_get_type (void) __attribute__((__const__));
extern GType g_dbus_property_info_flags_get_type (void) __attribute__((__const__));
extern GType g_dbus_subtree_flags_get_type (void) __attribute__((__const__));
extern GType g_dbus_server_flags_get_type (void) __attribute__((__const__));
extern GType g_dbus_signal_flags_get_type (void) __attribute__((__const__));
extern GType g_dbus_send_message_flags_get_type (void) __attribute__((__const__));
extern GType g_credentials_type_get_type (void) __attribute__((__const__));
extern GType g_dbus_message_byte_order_get_type (void) __attribute__((__const__));
extern GType g_application_flags_get_type (void) __attribute__((__const__));
extern GType g_tls_error_get_type (void) __attribute__((__const__));
extern GType g_tls_certificate_flags_get_type (void) __attribute__((__const__));
extern GType g_tls_authentication_mode_get_type (void) __attribute__((__const__));
extern GType g_tls_rehandshake_mode_get_type (void) __attribute__((__const__));
extern GType g_tls_password_flags_get_type (void) __attribute__((__const__));
extern GType g_tls_interaction_result_get_type (void) __attribute__((__const__));
extern GType g_dbus_interface_skeleton_flags_get_type (void) __attribute__((__const__));
extern GType g_dbus_object_manager_client_flags_get_type (void) __attribute__((__const__));
extern GType g_tls_database_verify_flags_get_type (void) __attribute__((__const__));
extern GType g_tls_database_lookup_flags_get_type (void) __attribute__((__const__));
extern GType g_tls_certificate_request_flags_get_type (void) __attribute__((__const__));
extern GType g_io_module_scope_flags_get_type (void) __attribute__((__const__));
extern GType g_socket_client_event_get_type (void) __attribute__((__const__));
extern GType g_socket_listener_event_get_type (void) __attribute__((__const__));
extern GType g_test_dbus_flags_get_type (void) __attribute__((__const__));
extern GType g_subprocess_flags_get_type (void) __attribute__((__const__));
extern GType g_notification_priority_get_type (void) __attribute__((__const__));
extern GType g_network_connectivity_get_type (void) __attribute__((__const__));
extern GType g_settings_bind_flags_get_type (void) __attribute__((__const__));
typedef enum
{
  G_MODULE_BIND_LAZY = 1 << 0,
  G_MODULE_BIND_LOCAL = 1 << 1,
  G_MODULE_BIND_MASK = 0x03
} GModuleFlags;
typedef struct _GModule GModule;
typedef const gchar* (*GModuleCheckInit) (GModule *module);
typedef void (*GModuleUnload) (GModule *module);
extern
gboolean g_module_supported (void) __attribute__((__const__));
extern
GModule* g_module_open (const gchar *file_name,
           GModuleFlags flags);
extern
gboolean g_module_close (GModule *module);
extern
void g_module_make_resident (GModule *module);
extern
const gchar * g_module_error (void);
extern
gboolean g_module_symbol (GModule *module,
           const gchar *symbol_name,
           gpointer *symbol);
extern
const gchar * g_module_name (GModule *module);
extern
gchar* g_module_build_path (const gchar *directory,
           const gchar *module_name);
typedef struct _GIOModuleScope GIOModuleScope;
extern
GIOModuleScope * g_io_module_scope_new (GIOModuleScopeFlags flags);
extern
void g_io_module_scope_free (GIOModuleScope *scope);
extern
void g_io_module_scope_block (GIOModuleScope *scope,
                                              const gchar *basename);
typedef struct _GIOModuleClass GIOModuleClass;
extern
GType g_io_module_get_type (void) __attribute__((__const__));
extern
GIOModule *g_io_module_new (const gchar *filename);
extern
void g_io_modules_scan_all_in_directory (const char *dirname);
extern
GList *g_io_modules_load_all_in_directory (const gchar *dirname);
extern
void g_io_modules_scan_all_in_directory_with_scope (const gchar *dirname,
                                                                    GIOModuleScope *scope);
extern
GList *g_io_modules_load_all_in_directory_with_scope (const gchar *dirname,
                                                                    GIOModuleScope *scope);
extern
GIOExtensionPoint *g_io_extension_point_register (const char *name);
extern
GIOExtensionPoint *g_io_extension_point_lookup (const char *name);
extern
void g_io_extension_point_set_required_type (GIOExtensionPoint *extension_point,
              GType type);
extern
GType g_io_extension_point_get_required_type (GIOExtensionPoint *extension_point);
extern
GList *g_io_extension_point_get_extensions (GIOExtensionPoint *extension_point);
extern
GIOExtension * g_io_extension_point_get_extension_by_name (GIOExtensionPoint *extension_point,
              const char *name);
extern
GIOExtension * g_io_extension_point_implement (const char *extension_point_name,
              GType type,
              const char *extension_name,
              gint priority);
extern
GType g_io_extension_get_type (GIOExtension *extension);
extern
const char * g_io_extension_get_name (GIOExtension *extension);
extern
gint g_io_extension_get_priority (GIOExtension *extension);
extern
GTypeClass* g_io_extension_ref_class (GIOExtension *extension);
extern
void g_io_module_load (GIOModule *module);
extern
void g_io_module_unload (GIOModule *module);
extern
char **g_io_module_query (void);
extern
void g_io_scheduler_push_job (GIOSchedulerJobFunc job_func,
          gpointer user_data,
          GDestroyNotify notify,
          gint io_priority,
          GCancellable *cancellable);
extern
void g_io_scheduler_cancel_all_jobs (void);
extern
gboolean g_io_scheduler_job_send_to_mainloop (GIOSchedulerJob *job,
          GSourceFunc func,
          gpointer user_data,
          GDestroyNotify notify);
extern
void g_io_scheduler_job_send_to_mainloop_async (GIOSchedulerJob *job,
          GSourceFunc func,
          gpointer user_data,
          GDestroyNotify notify);
typedef struct _GLoadableIconIface GLoadableIconIface;
struct _GLoadableIconIface
{
  GTypeInterface g_iface;
  GInputStream * (* load) (GLoadableIcon *icon,
                                  int size,
                                  char **type,
                                  GCancellable *cancellable,
                                  GError **error);
  void (* load_async) (GLoadableIcon *icon,
                                  int size,
                                  GCancellable *cancellable,
                                  GAsyncReadyCallback callback,
                                  gpointer user_data);
  GInputStream * (* load_finish) (GLoadableIcon *icon,
                                  GAsyncResult *res,
                                  char **type,
                                  GError **error);
};
extern
GType g_loadable_icon_get_type (void) __attribute__((__const__));
extern
GInputStream *g_loadable_icon_load (GLoadableIcon *icon,
        int size,
        char **type,
        GCancellable *cancellable,
        GError **error);
extern
void g_loadable_icon_load_async (GLoadableIcon *icon,
        int size,
        GCancellable *cancellable,
        GAsyncReadyCallback callback,
        gpointer user_data);
extern
GInputStream *g_loadable_icon_load_finish (GLoadableIcon *icon,
        GAsyncResult *res,
        char **type,
        GError **error);
typedef struct _GMemoryInputStreamClass GMemoryInputStreamClass;
typedef struct _GMemoryInputStreamPrivate GMemoryInputStreamPrivate;
struct _GMemoryInputStream
{
  GInputStream parent_instance;
  GMemoryInputStreamPrivate *priv;
};
struct _GMemoryInputStreamClass
{
  GInputStreamClass parent_class;
  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};
extern
GType g_memory_input_stream_get_type (void) __attribute__((__const__));
extern
GInputStream * g_memory_input_stream_new (void);
extern
GInputStream * g_memory_input_stream_new_from_data (const void *data,
                                                    gssize len,
                                                    GDestroyNotify destroy);
extern
GInputStream * g_memory_input_stream_new_from_bytes (GBytes *bytes);
extern
void g_memory_input_stream_add_data (GMemoryInputStream *stream,
                                                    const void *data,
                                                    gssize len,
                                                    GDestroyNotify destroy);
extern
void g_memory_input_stream_add_bytes (GMemoryInputStream *stream,
          GBytes *bytes);
typedef struct _GMemoryOutputStreamClass GMemoryOutputStreamClass;
typedef struct _GMemoryOutputStreamPrivate GMemoryOutputStreamPrivate;
struct _GMemoryOutputStream
{
  GOutputStream parent_instance;
  GMemoryOutputStreamPrivate *priv;
};
struct _GMemoryOutputStreamClass
{
  GOutputStreamClass parent_class;
  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};
typedef gpointer (* GReallocFunc) (gpointer data,
                                   gsize size);
extern
GType g_memory_output_stream_get_type (void) __attribute__((__const__));
extern
GOutputStream *g_memory_output_stream_new (gpointer data,
                                                     gsize size,
                                                     GReallocFunc realloc_function,
                                                     GDestroyNotify destroy_function);
extern
GOutputStream *g_memory_output_stream_new_resizable (void);
extern
gpointer g_memory_output_stream_get_data (GMemoryOutputStream *ostream);
extern
gsize g_memory_output_stream_get_size (GMemoryOutputStream *ostream);
extern
gsize g_memory_output_stream_get_data_size (GMemoryOutputStream *ostream);
extern
gpointer g_memory_output_stream_steal_data (GMemoryOutputStream *ostream);
extern
GBytes * g_memory_output_stream_steal_as_bytes (GMemoryOutputStream *ostream);
typedef struct _GMountIface GMountIface;
struct _GMountIface
{
  GTypeInterface g_iface;
  void (* changed) (GMount *mount);
  void (* unmounted) (GMount *mount);
  GFile * (* get_root) (GMount *mount);
  char * (* get_name) (GMount *mount);
  GIcon * (* get_icon) (GMount *mount);
  char * (* get_uuid) (GMount *mount);
  GVolume * (* get_volume) (GMount *mount);
  GDrive * (* get_drive) (GMount *mount);
  gboolean (* can_unmount) (GMount *mount);
  gboolean (* can_eject) (GMount *mount);
  void (* unmount) (GMount *mount,
                                             GMountUnmountFlags flags,
                                             GCancellable *cancellable,
                                             GAsyncReadyCallback callback,
                                             gpointer user_data);
  gboolean (* unmount_finish) (GMount *mount,
                                             GAsyncResult *result,
                                             GError **error);
  void (* eject) (GMount *mount,
                                             GMountUnmountFlags flags,
                                             GCancellable *cancellable,
                                             GAsyncReadyCallback callback,
                                             gpointer user_data);
  gboolean (* eject_finish) (GMount *mount,
                                             GAsyncResult *result,
                                             GError **error);
  void (* remount) (GMount *mount,
                                             GMountMountFlags flags,
                                             GMountOperation *mount_operation,
                                             GCancellable *cancellable,
                                             GAsyncReadyCallback callback,
                                             gpointer user_data);
  gboolean (* remount_finish) (GMount *mount,
                                             GAsyncResult *result,
                                             GError **error);
  void (* guess_content_type) (GMount *mount,
                                             gboolean force_rescan,
                                             GCancellable *cancellable,
                                             GAsyncReadyCallback callback,
                                             gpointer user_data);
  gchar ** (* guess_content_type_finish) (GMount *mount,
                                             GAsyncResult *result,
                                             GError **error);
  gchar ** (* guess_content_type_sync) (GMount *mount,
                                             gboolean force_rescan,
                                             GCancellable *cancellable,
                                             GError **error);
  void (* pre_unmount) (GMount *mount);
  void (* unmount_with_operation) (GMount *mount,
                                             GMountUnmountFlags flags,
                                             GMountOperation *mount_operation,
                                             GCancellable *cancellable,
                                             GAsyncReadyCallback callback,
                                             gpointer user_data);
  gboolean (* unmount_with_operation_finish) (GMount *mount,
                                             GAsyncResult *result,
                                             GError **error);
  void (* eject_with_operation) (GMount *mount,
                                             GMountUnmountFlags flags,
                                             GMountOperation *mount_operation,
                                             GCancellable *cancellable,
                                             GAsyncReadyCallback callback,
                                             gpointer user_data);
  gboolean (* eject_with_operation_finish) (GMount *mount,
                                             GAsyncResult *result,
                                             GError **error);
  GFile * (* get_default_location) (GMount *mount);
  const gchar * (* get_sort_key) (GMount *mount);
  GIcon * (* get_symbolic_icon) (GMount *mount);
};
extern
GType g_mount_get_type (void) __attribute__((__const__));
extern
GFile * g_mount_get_root (GMount *mount);
extern
GFile * g_mount_get_default_location (GMount *mount);
extern
char * g_mount_get_name (GMount *mount);
extern
GIcon * g_mount_get_icon (GMount *mount);
extern
GIcon * g_mount_get_symbolic_icon (GMount *mount);
extern
char * g_mount_get_uuid (GMount *mount);
extern
GVolume * g_mount_get_volume (GMount *mount);
extern
GDrive * g_mount_get_drive (GMount *mount);
extern
gboolean g_mount_can_unmount (GMount *mount);
extern
gboolean g_mount_can_eject (GMount *mount);
extern
void g_mount_unmount (GMount *mount,
                                               GMountUnmountFlags flags,
                                               GCancellable *cancellable,
                                               GAsyncReadyCallback callback,
                                               gpointer user_data);
extern
gboolean g_mount_unmount_finish (GMount *mount,
                                               GAsyncResult *result,
                                               GError **error);
extern
void g_mount_eject (GMount *mount,
                                               GMountUnmountFlags flags,
                                               GCancellable *cancellable,
                                               GAsyncReadyCallback callback,
                                               gpointer user_data);
extern
gboolean g_mount_eject_finish (GMount *mount,
                                               GAsyncResult *result,
                                               GError **error);
extern
void g_mount_remount (GMount *mount,
                                               GMountMountFlags flags,
                                               GMountOperation *mount_operation,
                                               GCancellable *cancellable,
                                               GAsyncReadyCallback callback,
                                               gpointer user_data);
extern
gboolean g_mount_remount_finish (GMount *mount,
                                               GAsyncResult *result,
                                               GError **error);
extern
void g_mount_guess_content_type (GMount *mount,
                                               gboolean force_rescan,
                                               GCancellable *cancellable,
                                               GAsyncReadyCallback callback,
                                               gpointer user_data);
extern
gchar ** g_mount_guess_content_type_finish (GMount *mount,
                                               GAsyncResult *result,
                                               GError **error);
extern
gchar ** g_mount_guess_content_type_sync (GMount *mount,
                                               gboolean force_rescan,
                                               GCancellable *cancellable,
                                               GError **error);
extern
gboolean g_mount_is_shadowed (GMount *mount);
extern
void g_mount_shadow (GMount *mount);
extern
void g_mount_unshadow (GMount *mount);
extern
void g_mount_unmount_with_operation (GMount *mount,
                                               GMountUnmountFlags flags,
                                               GMountOperation *mount_operation,
                                               GCancellable *cancellable,
                                               GAsyncReadyCallback callback,
                                               gpointer user_data);
extern
gboolean g_mount_unmount_with_operation_finish (GMount *mount,
                                               GAsyncResult *result,
                                               GError **error);
extern
void g_mount_eject_with_operation (GMount *mount,
                                               GMountUnmountFlags flags,
                                               GMountOperation *mount_operation,
                                               GCancellable *cancellable,
                                               GAsyncReadyCallback callback,
                                               gpointer user_data);
extern
gboolean g_mount_eject_with_operation_finish (GMount *mount,
                                               GAsyncResult *result,
                                               GError **error);
extern
const gchar *g_mount_get_sort_key (GMount *mount);
typedef struct _GMountOperationClass GMountOperationClass;
typedef struct _GMountOperationPrivate GMountOperationPrivate;
struct _GMountOperation
{
  GObject parent_instance;
  GMountOperationPrivate *priv;
};
struct _GMountOperationClass
{
  GObjectClass parent_class;
  void (* ask_password) (GMountOperation *op,
    const char *message,
    const char *default_user,
    const char *default_domain,
    GAskPasswordFlags flags);
  void (* ask_question) (GMountOperation *op,
    const char *message,
    const char *choices[]);
  void (* reply) (GMountOperation *op,
    GMountOperationResult result);
  void (* aborted) (GMountOperation *op);
  void (* show_processes) (GMountOperation *op,
                           const gchar *message,
                           GArray *processes,
                           const gchar *choices[]);
  void (* show_unmount_progress) (GMountOperation *op,
                                  const gchar *message,
                                  gint64 time_left,
                                  gint64 bytes_left);
  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
  void (*_g_reserved6) (void);
  void (*_g_reserved7) (void);
  void (*_g_reserved8) (void);
  void (*_g_reserved9) (void);
};
extern
GType g_mount_operation_get_type (void) __attribute__((__const__));
extern
GMountOperation * g_mount_operation_new (void);
extern
const char * g_mount_operation_get_username (GMountOperation *op);
extern
void g_mount_operation_set_username (GMountOperation *op,
         const char *username);
extern
const char * g_mount_operation_get_password (GMountOperation *op);
extern
void g_mount_operation_set_password (GMountOperation *op,
         const char *password);
extern
gboolean g_mount_operation_get_anonymous (GMountOperation *op);
extern
void g_mount_operation_set_anonymous (GMountOperation *op,
         gboolean anonymous);
extern
const char * g_mount_operation_get_domain (GMountOperation *op);
extern
void g_mount_operation_set_domain (GMountOperation *op,
         const char *domain);
extern
GPasswordSave g_mount_operation_get_password_save (GMountOperation *op);
extern
void g_mount_operation_set_password_save (GMountOperation *op,
         GPasswordSave save);
extern
int g_mount_operation_get_choice (GMountOperation *op);
extern
void g_mount_operation_set_choice (GMountOperation *op,
         int choice);
extern
void g_mount_operation_reply (GMountOperation *op,
         GMountOperationResult result);
typedef struct _GVolumeMonitorClass GVolumeMonitorClass;
struct _GVolumeMonitor
{
  GObject parent_instance;
  gpointer priv;
};
struct _GVolumeMonitorClass
{
  GObjectClass parent_class;
  void (* volume_added) (GVolumeMonitor *volume_monitor,
                                      GVolume *volume);
  void (* volume_removed) (GVolumeMonitor *volume_monitor,
                                      GVolume *volume);
  void (* volume_changed) (GVolumeMonitor *volume_monitor,
                                      GVolume *volume);
  void (* mount_added) (GVolumeMonitor *volume_monitor,
                                      GMount *mount);
  void (* mount_removed) (GVolumeMonitor *volume_monitor,
                                      GMount *mount);
  void (* mount_pre_unmount) (GVolumeMonitor *volume_monitor,
                                      GMount *mount);
  void (* mount_changed) (GVolumeMonitor *volume_monitor,
                                      GMount *mount);
  void (* drive_connected) (GVolumeMonitor *volume_monitor,
                                      GDrive *drive);
  void (* drive_disconnected) (GVolumeMonitor *volume_monitor,
                                      GDrive *drive);
  void (* drive_changed) (GVolumeMonitor *volume_monitor,
                                      GDrive *drive);
  gboolean (* is_supported) (void);
  GList * (* get_connected_drives) (GVolumeMonitor *volume_monitor);
  GList * (* get_volumes) (GVolumeMonitor *volume_monitor);
  GList * (* get_mounts) (GVolumeMonitor *volume_monitor);
  GVolume * (* get_volume_for_uuid) (GVolumeMonitor *volume_monitor,
                                      const char *uuid);
  GMount * (* get_mount_for_uuid) (GVolumeMonitor *volume_monitor,
                                      const char *uuid);
  GVolume * (* adopt_orphan_mount) (GMount *mount,
                                      GVolumeMonitor *volume_monitor);
  void (* drive_eject_button) (GVolumeMonitor *volume_monitor,
                                      GDrive *drive);
  void (* drive_stop_button) (GVolumeMonitor *volume_monitor,
                                     GDrive *drive);
  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
  void (*_g_reserved6) (void);
};
extern
GType g_volume_monitor_get_type (void) __attribute__((__const__));
extern
GVolumeMonitor *g_volume_monitor_get (void);
extern
GList * g_volume_monitor_get_connected_drives (GVolumeMonitor *volume_monitor);
extern
GList * g_volume_monitor_get_volumes (GVolumeMonitor *volume_monitor);
extern
GList * g_volume_monitor_get_mounts (GVolumeMonitor *volume_monitor);
extern
GVolume * g_volume_monitor_get_volume_for_uuid (GVolumeMonitor *volume_monitor,
                                                       const char *uuid);
extern
GMount * g_volume_monitor_get_mount_for_uuid (GVolumeMonitor *volume_monitor,
                                                       const char *uuid);
extern
GVolume * g_volume_monitor_adopt_orphan_mount (GMount *mount);
typedef struct _GNativeVolumeMonitor GNativeVolumeMonitor;
typedef struct _GNativeVolumeMonitorClass GNativeVolumeMonitorClass;
struct _GNativeVolumeMonitor
{
  GVolumeMonitor parent_instance;
};
struct _GNativeVolumeMonitorClass
{
  GVolumeMonitorClass parent_class;
  GMount * (* get_mount_for_mount_path) (const char *mount_path,
                                         GCancellable *cancellable);
};
extern
GType g_native_volume_monitor_get_type (void) __attribute__((__const__));
typedef struct _GNetworkAddressClass GNetworkAddressClass;
typedef struct _GNetworkAddressPrivate GNetworkAddressPrivate;
struct _GNetworkAddress
{
  GObject parent_instance;
  GNetworkAddressPrivate *priv;
};
struct _GNetworkAddressClass
{
  GObjectClass parent_class;
};
extern
GType g_network_address_get_type (void) __attribute__((__const__));
extern
GSocketConnectable *g_network_address_new (const gchar *hostname,
          guint16 port);
extern
GSocketConnectable *g_network_address_new_loopback (guint16 port);
extern
GSocketConnectable *g_network_address_parse (const gchar *host_and_port,
          guint16 default_port,
          GError **error);
extern
GSocketConnectable *g_network_address_parse_uri (const gchar *uri,
              guint16 default_port,
          GError **error);
extern
const gchar *g_network_address_get_hostname (GNetworkAddress *addr);
extern
guint16 g_network_address_get_port (GNetworkAddress *addr);
extern
const gchar *g_network_address_get_scheme (GNetworkAddress *addr);
typedef struct _GNetworkMonitorInterface GNetworkMonitorInterface;
struct _GNetworkMonitorInterface {
  GTypeInterface g_iface;
  void (*network_changed) (GNetworkMonitor *monitor,
    gboolean available);
  gboolean (*can_reach) (GNetworkMonitor *monitor,
    GSocketConnectable *connectable,
    GCancellable *cancellable,
    GError **error);
  void (*can_reach_async) (GNetworkMonitor *monitor,
    GSocketConnectable *connectable,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);
  gboolean (*can_reach_finish) (GNetworkMonitor *monitor,
    GAsyncResult *result,
    GError **error);
};
extern
GType g_network_monitor_get_type (void) __attribute__((__const__));
extern
GNetworkMonitor *g_network_monitor_get_default (void);
extern
gboolean g_network_monitor_get_network_available (GNetworkMonitor *monitor);
extern
gboolean g_network_monitor_get_network_metered (GNetworkMonitor *monitor);
extern
GNetworkConnectivity g_network_monitor_get_connectivity (GNetworkMonitor *monitor);
extern
gboolean g_network_monitor_can_reach (GNetworkMonitor *monitor,
                                                               GSocketConnectable *connectable,
                                                               GCancellable *cancellable,
                                                               GError **error);
extern
void g_network_monitor_can_reach_async (GNetworkMonitor *monitor,
                                                               GSocketConnectable *connectable,
                                                               GCancellable *cancellable,
                                                               GAsyncReadyCallback callback,
                                                               gpointer user_data);
extern
gboolean g_network_monitor_can_reach_finish (GNetworkMonitor *monitor,
                                                               GAsyncResult *result,
                                                               GError **error);
typedef struct _GNetworkServiceClass GNetworkServiceClass;
typedef struct _GNetworkServicePrivate GNetworkServicePrivate;
struct _GNetworkService
{
  GObject parent_instance;
  GNetworkServicePrivate *priv;
};
struct _GNetworkServiceClass
{
  GObjectClass parent_class;
};
extern
GType g_network_service_get_type (void) __attribute__((__const__));
extern
GSocketConnectable *g_network_service_new (const gchar *service,
            const gchar *protocol,
            const gchar *domain);
extern
const gchar *g_network_service_get_service (GNetworkService *srv);
extern
const gchar *g_network_service_get_protocol (GNetworkService *srv);
extern
const gchar *g_network_service_get_domain (GNetworkService *srv);
extern
const gchar *g_network_service_get_scheme (GNetworkService *srv);
extern
void g_network_service_set_scheme (GNetworkService *srv, const gchar *scheme);
typedef struct _GPermissionPrivate GPermissionPrivate;
typedef struct _GPermissionClass GPermissionClass;
struct _GPermission
{
  GObject parent_instance;
  GPermissionPrivate *priv;
};
struct _GPermissionClass {
  GObjectClass parent_class;
  gboolean (*acquire) (GPermission *permission,
                              GCancellable *cancellable,
                              GError **error);
  void (*acquire_async) (GPermission *permission,
                              GCancellable *cancellable,
                              GAsyncReadyCallback callback,
                              gpointer user_data);
  gboolean (*acquire_finish) (GPermission *permission,
                              GAsyncResult *result,
                              GError **error);
  gboolean (*release) (GPermission *permission,
                              GCancellable *cancellable,
                              GError **error);
  void (*release_async) (GPermission *permission,
                              GCancellable *cancellable,
                              GAsyncReadyCallback callback,
                              gpointer user_data);
  gboolean (*release_finish) (GPermission *permission,
                              GAsyncResult *result,
                              GError **error);
  gpointer reserved[16];
};
extern
GType g_permission_get_type (void);
extern
gboolean g_permission_acquire (GPermission *permission,
                                                 GCancellable *cancellable,
                                                 GError **error);
extern
void g_permission_acquire_async (GPermission *permission,
                                                 GCancellable *cancellable,
                                                 GAsyncReadyCallback callback,
                                                 gpointer user_data);
extern
gboolean g_permission_acquire_finish (GPermission *permission,
                                                 GAsyncResult *result,
                                                 GError **error);
extern
gboolean g_permission_release (GPermission *permission,
                                                 GCancellable *cancellable,
                                                 GError **error);
extern
void g_permission_release_async (GPermission *permission,
                                                 GCancellable *cancellable,
                                                 GAsyncReadyCallback callback,
                                                 gpointer user_data);
extern
gboolean g_permission_release_finish (GPermission *permission,
                                                 GAsyncResult *result,
                                                 GError **error);
extern
gboolean g_permission_get_allowed (GPermission *permission);
extern
gboolean g_permission_get_can_acquire (GPermission *permission);
extern
gboolean g_permission_get_can_release (GPermission *permission);
extern
void g_permission_impl_update (GPermission *permission,
                                                 gboolean allowed,
                                                 gboolean can_acquire,
                                                 gboolean can_release);
typedef struct _GPollableInputStreamInterface GPollableInputStreamInterface;
struct _GPollableInputStreamInterface
{
  GTypeInterface g_iface;
  gboolean (*can_poll) (GPollableInputStream *stream);
  gboolean (*is_readable) (GPollableInputStream *stream);
  GSource * (*create_source) (GPollableInputStream *stream,
        GCancellable *cancellable);
  gssize (*read_nonblocking) (GPollableInputStream *stream,
        void *buffer,
        gsize count,
        GError **error);
};
extern
GType g_pollable_input_stream_get_type (void) __attribute__((__const__));
extern
gboolean g_pollable_input_stream_can_poll (GPollableInputStream *stream);
extern
gboolean g_pollable_input_stream_is_readable (GPollableInputStream *stream);
extern
GSource *g_pollable_input_stream_create_source (GPollableInputStream *stream,
         GCancellable *cancellable);
extern
gssize g_pollable_input_stream_read_nonblocking (GPollableInputStream *stream,
         void *buffer,
         gsize count,
         GCancellable *cancellable,
         GError **error);
typedef struct _GPollableOutputStreamInterface GPollableOutputStreamInterface;
struct _GPollableOutputStreamInterface
{
  GTypeInterface g_iface;
  gboolean (*can_poll) (GPollableOutputStream *stream);
  gboolean (*is_writable) (GPollableOutputStream *stream);
  GSource * (*create_source) (GPollableOutputStream *stream,
         GCancellable *cancellable);
  gssize (*write_nonblocking) (GPollableOutputStream *stream,
         const void *buffer,
         gsize count,
         GError **error);
};
extern
GType g_pollable_output_stream_get_type (void) __attribute__((__const__));
extern
gboolean g_pollable_output_stream_can_poll (GPollableOutputStream *stream);
extern
gboolean g_pollable_output_stream_is_writable (GPollableOutputStream *stream);
extern
GSource *g_pollable_output_stream_create_source (GPollableOutputStream *stream,
           GCancellable *cancellable);
extern
gssize g_pollable_output_stream_write_nonblocking (GPollableOutputStream *stream,
           const void *buffer,
           gsize count,
           GCancellable *cancellable,
           GError **error);
extern
GSource *g_pollable_source_new (GObject *pollable_stream);
extern
GSource *g_pollable_source_new_full (gpointer pollable_stream,
          GSource *child_source,
          GCancellable *cancellable);
extern
gssize g_pollable_stream_read (GInputStream *stream,
          void *buffer,
          gsize count,
          gboolean blocking,
          GCancellable *cancellable,
          GError **error);
extern
gssize g_pollable_stream_write (GOutputStream *stream,
          const void *buffer,
          gsize count,
          gboolean blocking,
          GCancellable *cancellable,
          GError **error);
extern
gboolean g_pollable_stream_write_all (GOutputStream *stream,
          const void *buffer,
          gsize count,
          gboolean blocking,
          gsize *bytes_written,
          GCancellable *cancellable,
          GError **error);
extern
GType g_property_action_get_type (void) __attribute__((__const__));
extern
GPropertyAction * g_property_action_new (const gchar *name,
                                                                         gpointer object,
                                                                         const gchar *property_name);
typedef struct _GProxyInterface GProxyInterface;
struct _GProxyInterface
{
  GTypeInterface g_iface;
  GIOStream * (* connect) (GProxy *proxy,
         GIOStream *connection,
         GProxyAddress *proxy_address,
         GCancellable *cancellable,
         GError **error);
  void (* connect_async) (GProxy *proxy,
         GIOStream *connection,
         GProxyAddress *proxy_address,
         GCancellable *cancellable,
         GAsyncReadyCallback callback,
         gpointer user_data);
  GIOStream * (* connect_finish) (GProxy *proxy,
         GAsyncResult *result,
         GError **error);
  gboolean (* supports_hostname) (GProxy *proxy);
};
extern
GType g_proxy_get_type (void) __attribute__((__const__));
extern
GProxy *g_proxy_get_default_for_protocol (const gchar *protocol);
extern
GIOStream *g_proxy_connect (GProxy *proxy,
          GIOStream *connection,
          GProxyAddress *proxy_address,
          GCancellable *cancellable,
          GError **error);
extern
void g_proxy_connect_async (GProxy *proxy,
          GIOStream *connection,
          GProxyAddress *proxy_address,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
extern
GIOStream *g_proxy_connect_finish (GProxy *proxy,
          GAsyncResult *result,
          GError **error);
extern
gboolean g_proxy_supports_hostname (GProxy *proxy);
typedef struct _GProxyAddressClass GProxyAddressClass;
typedef struct _GProxyAddressPrivate GProxyAddressPrivate;
struct _GProxyAddress
{
  GInetSocketAddress parent_instance;
  GProxyAddressPrivate *priv;
};
struct _GProxyAddressClass
{
  GInetSocketAddressClass parent_class;
};
extern
GType g_proxy_address_get_type (void) __attribute__((__const__));
extern
GSocketAddress *g_proxy_address_new (GInetAddress *inetaddr,
          guint16 port,
          const gchar *protocol,
          const gchar *dest_hostname,
                               guint16 dest_port,
          const gchar *username,
          const gchar *password);
extern
const gchar *g_proxy_address_get_protocol (GProxyAddress *proxy);
extern
const gchar *g_proxy_address_get_destination_protocol (GProxyAddress *proxy);
extern
const gchar *g_proxy_address_get_destination_hostname (GProxyAddress *proxy);
extern
guint16 g_proxy_address_get_destination_port (GProxyAddress *proxy);
extern
const gchar *g_proxy_address_get_username (GProxyAddress *proxy);
extern
const gchar *g_proxy_address_get_password (GProxyAddress *proxy);
extern
const gchar *g_proxy_address_get_uri (GProxyAddress *proxy);
typedef struct _GSocketAddressEnumeratorClass GSocketAddressEnumeratorClass;
struct _GSocketAddressEnumerator
{
  GObject parent_instance;
};
struct _GSocketAddressEnumeratorClass
{
  GObjectClass parent_class;
  GSocketAddress * (* next) (GSocketAddressEnumerator *enumerator,
        GCancellable *cancellable,
        GError **error);
  void (* next_async) (GSocketAddressEnumerator *enumerator,
        GCancellable *cancellable,
        GAsyncReadyCallback callback,
        gpointer user_data);
  GSocketAddress * (* next_finish) (GSocketAddressEnumerator *enumerator,
        GAsyncResult *result,
        GError **error);
};
extern
GType g_socket_address_enumerator_get_type (void) __attribute__((__const__));
extern
GSocketAddress *g_socket_address_enumerator_next (GSocketAddressEnumerator *enumerator,
        GCancellable *cancellable,
        GError **error);
extern
void g_socket_address_enumerator_next_async (GSocketAddressEnumerator *enumerator,
        GCancellable *cancellable,
        GAsyncReadyCallback callback,
        gpointer user_data);
extern
GSocketAddress *g_socket_address_enumerator_next_finish (GSocketAddressEnumerator *enumerator,
        GAsyncResult *result,
        GError **error);
typedef struct _GProxyAddressEnumeratorClass GProxyAddressEnumeratorClass;
typedef struct _GProxyAddressEnumeratorPrivate GProxyAddressEnumeratorPrivate;
struct _GProxyAddressEnumerator
{
  GSocketAddressEnumerator parent_instance;
  GProxyAddressEnumeratorPrivate *priv;
};
struct _GProxyAddressEnumeratorClass
{
  GSocketAddressEnumeratorClass parent_class;
  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
  void (*_g_reserved6) (void);
  void (*_g_reserved7) (void);
};
extern
GType g_proxy_address_enumerator_get_type (void) __attribute__((__const__));
typedef struct _GProxyResolverInterface GProxyResolverInterface;
struct _GProxyResolverInterface {
  GTypeInterface g_iface;
  gboolean (* is_supported) (GProxyResolver *resolver);
  gchar ** (* lookup) (GProxyResolver *resolver,
         const gchar *uri,
         GCancellable *cancellable,
         GError **error);
  void (* lookup_async) (GProxyResolver *resolver,
         const gchar *uri,
         GCancellable *cancellable,
         GAsyncReadyCallback callback,
         gpointer user_data);
  gchar ** (* lookup_finish) (GProxyResolver *resolver,
         GAsyncResult *result,
         GError **error);
};
extern
GType g_proxy_resolver_get_type (void) __attribute__((__const__));
extern
GProxyResolver *g_proxy_resolver_get_default (void);
extern
gboolean g_proxy_resolver_is_supported (GProxyResolver *resolver);
extern
gchar **g_proxy_resolver_lookup (GProxyResolver *resolver,
       const gchar *uri,
       GCancellable *cancellable,
       GError **error);
extern
void g_proxy_resolver_lookup_async (GProxyResolver *resolver,
       const gchar *uri,
       GCancellable *cancellable,
       GAsyncReadyCallback callback,
       gpointer user_data);
extern
gchar **g_proxy_resolver_lookup_finish (GProxyResolver *resolver,
       GAsyncResult *result,
       GError **error);
typedef struct _GResolverPrivate GResolverPrivate;
typedef struct _GResolverClass GResolverClass;
struct _GResolver {
  GObject parent_instance;
  GResolverPrivate *priv;
};
struct _GResolverClass {
  GObjectClass parent_class;
  void ( *reload) (GResolver *resolver);
  GList * ( *lookup_by_name) (GResolver *resolver,
     const gchar *hostname,
     GCancellable *cancellable,
     GError **error);
  void ( *lookup_by_name_async) (GResolver *resolver,
     const gchar *hostname,
     GCancellable *cancellable,
     GAsyncReadyCallback callback,
     gpointer user_data);
  GList * ( *lookup_by_name_finish) (GResolver *resolver,
     GAsyncResult *result,
     GError **error);
  gchar * ( *lookup_by_address) (GResolver *resolver,
     GInetAddress *address,
     GCancellable *cancellable,
     GError **error);
  void ( *lookup_by_address_async) (GResolver *resolver,
     GInetAddress *address,
     GCancellable *cancellable,
     GAsyncReadyCallback callback,
     gpointer user_data);
  gchar * ( *lookup_by_address_finish) (GResolver *resolver,
     GAsyncResult *result,
     GError **error);
  GList * ( *lookup_service) (GResolver *resolver,
     const gchar *rrname,
     GCancellable *cancellable,
     GError **error);
  void ( *lookup_service_async) (GResolver *resolver,
     const gchar *rrname,
     GCancellable *cancellable,
     GAsyncReadyCallback callback,
     gpointer user_data);
  GList * ( *lookup_service_finish) (GResolver *resolver,
     GAsyncResult *result,
     GError **error);
  GList * ( *lookup_records) (GResolver *resolver,
                                        const gchar *rrname,
                                        GResolverRecordType record_type,
                                        GCancellable *cancellable,
                                        GError **error);
  void ( *lookup_records_async) (GResolver *resolver,
                                        const gchar *rrname,
                                        GResolverRecordType record_type,
                                        GCancellable *cancellable,
                                        GAsyncReadyCallback callback,
                                        gpointer user_data);
  GList * ( *lookup_records_finish) (GResolver *resolver,
                                        GAsyncResult *result,
                                        GError **error);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
  void (*_g_reserved6) (void);
};
extern
GType g_resolver_get_type (void) __attribute__((__const__));
extern
GResolver *g_resolver_get_default (void);
extern
void g_resolver_set_default (GResolver *resolver);
extern
GList *g_resolver_lookup_by_name (GResolver *resolver,
       const gchar *hostname,
       GCancellable *cancellable,
       GError **error);
extern
void g_resolver_lookup_by_name_async (GResolver *resolver,
       const gchar *hostname,
       GCancellable *cancellable,
       GAsyncReadyCallback callback,
       gpointer user_data);
extern
GList *g_resolver_lookup_by_name_finish (GResolver *resolver,
       GAsyncResult *result,
       GError **error);
extern
void g_resolver_free_addresses (GList *addresses);
extern
gchar *g_resolver_lookup_by_address (GResolver *resolver,
       GInetAddress *address,
       GCancellable *cancellable,
       GError **error);
extern
void g_resolver_lookup_by_address_async (GResolver *resolver,
       GInetAddress *address,
       GCancellable *cancellable,
       GAsyncReadyCallback callback,
       gpointer user_data);
extern
gchar *g_resolver_lookup_by_address_finish (GResolver *resolver,
       GAsyncResult *result,
       GError **error);
extern
GList *g_resolver_lookup_service (GResolver *resolver,
       const gchar *service,
       const gchar *protocol,
       const gchar *domain,
       GCancellable *cancellable,
       GError **error);
extern
void g_resolver_lookup_service_async (GResolver *resolver,
       const gchar *service,
       const gchar *protocol,
       const gchar *domain,
       GCancellable *cancellable,
       GAsyncReadyCallback callback,
       gpointer user_data);
extern
GList *g_resolver_lookup_service_finish (GResolver *resolver,
       GAsyncResult *result,
       GError **error);
extern
GList *g_resolver_lookup_records (GResolver *resolver,
                                                 const gchar *rrname,
                                                 GResolverRecordType record_type,
                                                 GCancellable *cancellable,
                                                 GError **error);
extern
void g_resolver_lookup_records_async (GResolver *resolver,
                                                 const gchar *rrname,
                                                 GResolverRecordType record_type,
                                                 GCancellable *cancellable,
                                                 GAsyncReadyCallback callback,
                                                 gpointer user_data);
extern
GList *g_resolver_lookup_records_finish (GResolver *resolver,
                                                 GAsyncResult *result,
                                                 GError **error);
extern
void g_resolver_free_targets (GList *targets);
extern
GQuark g_resolver_error_quark (void);
extern
GQuark g_resource_error_quark (void);
typedef struct _GStaticResource GStaticResource;
struct _GStaticResource {
  const guint8 *data;
  gsize data_len;
  GResource *resource;
  GStaticResource *next;
  gpointer padding;
};
extern
GType g_resource_get_type (void) __attribute__((__const__));
extern
GResource * g_resource_new_from_data (GBytes *data,
           GError **error);
extern
GResource * g_resource_ref (GResource *resource);
extern
void g_resource_unref (GResource *resource);
extern
GResource * g_resource_load (const gchar *filename,
           GError **error);
extern
GInputStream *g_resource_open_stream (GResource *resource,
           const char *path,
           GResourceLookupFlags lookup_flags,
           GError **error);
extern
GBytes * g_resource_lookup_data (GResource *resource,
           const char *path,
           GResourceLookupFlags lookup_flags,
           GError **error);
extern
char ** g_resource_enumerate_children (GResource *resource,
           const char *path,
           GResourceLookupFlags lookup_flags,
           GError **error);
extern
gboolean g_resource_get_info (GResource *resource,
           const char *path,
           GResourceLookupFlags lookup_flags,
           gsize *size,
           guint32 *flags,
           GError **error);
extern
void g_resources_register (GResource *resource);
extern
void g_resources_unregister (GResource *resource);
extern
GInputStream *g_resources_open_stream (const char *path,
           GResourceLookupFlags lookup_flags,
           GError **error);
extern
GBytes * g_resources_lookup_data (const char *path,
           GResourceLookupFlags lookup_flags,
           GError **error);
extern
char ** g_resources_enumerate_children (const char *path,
           GResourceLookupFlags lookup_flags,
           GError **error);
extern
gboolean g_resources_get_info (const char *path,
           GResourceLookupFlags lookup_flags,
           gsize *size,
           guint32 *flags,
           GError **error);
extern
void g_static_resource_init (GStaticResource *static_resource);
extern
void g_static_resource_fini (GStaticResource *static_resource);
extern
GResource *g_static_resource_get_resource (GStaticResource *static_resource);
typedef struct _GSeekableIface GSeekableIface;
struct _GSeekableIface
{
  GTypeInterface g_iface;
  goffset (* tell) (GSeekable *seekable);
  gboolean (* can_seek) (GSeekable *seekable);
  gboolean (* seek) (GSeekable *seekable,
      goffset offset,
      GSeekType type,
      GCancellable *cancellable,
      GError **error);
  gboolean (* can_truncate) (GSeekable *seekable);
  gboolean (* truncate_fn) (GSeekable *seekable,
      goffset offset,
      GCancellable *cancellable,
      GError **error);
};
extern
GType g_seekable_get_type (void) __attribute__((__const__));
extern
goffset g_seekable_tell (GSeekable *seekable);
extern
gboolean g_seekable_can_seek (GSeekable *seekable);
extern
gboolean g_seekable_seek (GSeekable *seekable,
      goffset offset,
      GSeekType type,
      GCancellable *cancellable,
      GError **error);
extern
gboolean g_seekable_can_truncate (GSeekable *seekable);
extern
gboolean g_seekable_truncate (GSeekable *seekable,
      goffset offset,
      GCancellable *cancellable,
      GError **error);
typedef struct _GSettingsSchemaSource GSettingsSchemaSource;
typedef struct _GSettingsSchema GSettingsSchema;
typedef struct _GSettingsSchemaKey GSettingsSchemaKey;
extern
GType g_settings_schema_source_get_type (void) __attribute__((__const__));
extern
GSettingsSchemaSource * g_settings_schema_source_get_default (void);
extern
GSettingsSchemaSource * g_settings_schema_source_ref (GSettingsSchemaSource *source);
extern
void g_settings_schema_source_unref (GSettingsSchemaSource *source);
extern
GSettingsSchemaSource * g_settings_schema_source_new_from_directory (const gchar *directory,
                                                                         GSettingsSchemaSource *parent,
                                                                         gboolean trusted,
                                                                         GError **error);
extern
GSettingsSchema * g_settings_schema_source_lookup (GSettingsSchemaSource *source,
                                                                         const gchar *schema_id,
                                                                         gboolean recursive);
extern
void g_settings_schema_source_list_schemas (GSettingsSchemaSource *source,
                                                                         gboolean recursive,
                                                                         gchar ***non_relocatable,
                                                                         gchar ***relocatable);
extern
GType g_settings_schema_get_type (void) __attribute__((__const__));
extern
GSettingsSchema * g_settings_schema_ref (GSettingsSchema *schema);
extern
void g_settings_schema_unref (GSettingsSchema *schema);
extern
const gchar * g_settings_schema_get_id (GSettingsSchema *schema);
extern
const gchar * g_settings_schema_get_path (GSettingsSchema *schema);
extern
GSettingsSchemaKey * g_settings_schema_get_key (GSettingsSchema *schema,
                                                                         const gchar *name);
extern
gboolean g_settings_schema_has_key (GSettingsSchema *schema,
                                                                         const gchar *name);
extern
gchar** g_settings_schema_list_keys (GSettingsSchema *schema);
extern
gchar ** g_settings_schema_list_children (GSettingsSchema *schema);
extern
GType g_settings_schema_key_get_type (void) __attribute__((__const__));
extern
GSettingsSchemaKey * g_settings_schema_key_ref (GSettingsSchemaKey *key);
extern
void g_settings_schema_key_unref (GSettingsSchemaKey *key);
extern
const GVariantType * g_settings_schema_key_get_value_type (GSettingsSchemaKey *key);
extern
GVariant * g_settings_schema_key_get_default_value (GSettingsSchemaKey *key);
extern
GVariant * g_settings_schema_key_get_range (GSettingsSchemaKey *key);
extern
gboolean g_settings_schema_key_range_check (GSettingsSchemaKey *key,
                                                                         GVariant *value);
extern
const gchar * g_settings_schema_key_get_name (GSettingsSchemaKey *key);
extern
const gchar * g_settings_schema_key_get_summary (GSettingsSchemaKey *key);
extern
const gchar * g_settings_schema_key_get_description (GSettingsSchemaKey *key);
typedef struct _GSettingsPrivate GSettingsPrivate;
typedef struct _GSettingsClass GSettingsClass;
struct _GSettingsClass
{
  GObjectClass parent_class;
  void (*writable_changed) (GSettings *settings,
                                        const gchar *key);
  void (*changed) (GSettings *settings,
                                        const gchar *key);
  gboolean (*writable_change_event) (GSettings *settings,
                                        GQuark key);
  gboolean (*change_event) (GSettings *settings,
                                        const GQuark *keys,
                                        gint n_keys);
  gpointer padding[20];
};
struct _GSettings
{
  GObject parent_instance;
  GSettingsPrivate *priv;
};
extern
GType g_settings_get_type (void);
extern
const gchar * const * g_settings_list_schemas (void);
extern
const gchar * const * g_settings_list_relocatable_schemas (void);
extern
GSettings * g_settings_new (const gchar *schema_id);
extern
GSettings * g_settings_new_with_path (const gchar *schema_id,
                                                                         const gchar *path);
extern
GSettings * g_settings_new_with_backend (const gchar *schema_id,
                                                                         GSettingsBackend *backend);
extern
GSettings * g_settings_new_with_backend_and_path (const gchar *schema_id,
                                                                         GSettingsBackend *backend,
                                                                         const gchar *path);
extern
GSettings * g_settings_new_full (GSettingsSchema *schema,
                                                                         GSettingsBackend *backend,
                                                                         const gchar *path);
extern
gchar ** g_settings_list_children (GSettings *settings);
extern
gchar ** g_settings_list_keys (GSettings *settings);
extern
GVariant * g_settings_get_range (GSettings *settings,
                                                                         const gchar *key);
extern
gboolean g_settings_range_check (GSettings *settings,
                                                                         const gchar *key,
                                                                         GVariant *value);
extern
gboolean g_settings_set_value (GSettings *settings,
                                                                         const gchar *key,
                                                                         GVariant *value);
extern
GVariant * g_settings_get_value (GSettings *settings,
                                                                         const gchar *key);
extern
GVariant * g_settings_get_user_value (GSettings *settings,
                                                                         const gchar *key);
extern
GVariant * g_settings_get_default_value (GSettings *settings,
                                                                         const gchar *key);
extern
gboolean g_settings_set (GSettings *settings,
                                                                         const gchar *key,
                                                                         const gchar *format,
                                                                         ...);
extern
void g_settings_get (GSettings *settings,
                                                                         const gchar *key,
                                                                         const gchar *format,
                                                                         ...);
extern
void g_settings_reset (GSettings *settings,
                                                                         const gchar *key);
extern
gint g_settings_get_int (GSettings *settings,
                                                                         const gchar *key);
extern
gboolean g_settings_set_int (GSettings *settings,
                                                                         const gchar *key,
                                                                         gint value);
extern
guint g_settings_get_uint (GSettings *settings,
                                                                         const gchar *key);
extern
gboolean g_settings_set_uint (GSettings *settings,
                                                                         const gchar *key,
                                                                         guint value);
extern
gchar * g_settings_get_string (GSettings *settings,
                                                                         const gchar *key);
extern
gboolean g_settings_set_string (GSettings *settings,
                                                                         const gchar *key,
                                                                         const gchar *value);
extern
gboolean g_settings_get_boolean (GSettings *settings,
                                                                         const gchar *key);
extern
gboolean g_settings_set_boolean (GSettings *settings,
                                                                         const gchar *key,
                                                                         gboolean value);
extern
gdouble g_settings_get_double (GSettings *settings,
                                                                         const gchar *key);
extern
gboolean g_settings_set_double (GSettings *settings,
                                                                         const gchar *key,
                                                                         gdouble value);
extern
gchar ** g_settings_get_strv (GSettings *settings,
                                                                         const gchar *key);
extern
gboolean g_settings_set_strv (GSettings *settings,
                                                                         const gchar *key,
                                                                         const gchar *const *value);
extern
gint g_settings_get_enum (GSettings *settings,
                                                                         const gchar *key);
extern
gboolean g_settings_set_enum (GSettings *settings,
                                                                         const gchar *key,
                                                                         gint value);
extern
guint g_settings_get_flags (GSettings *settings,
                                                                         const gchar *key);
extern
gboolean g_settings_set_flags (GSettings *settings,
                                                                         const gchar *key,
                                                                         guint value);
extern
GSettings * g_settings_get_child (GSettings *settings,
                                                                         const gchar *name);
extern
gboolean g_settings_is_writable (GSettings *settings,
                                                                         const gchar *name);
extern
void g_settings_delay (GSettings *settings);
extern
void g_settings_apply (GSettings *settings);
extern
void g_settings_revert (GSettings *settings);
extern
gboolean g_settings_get_has_unapplied (GSettings *settings);
extern
void g_settings_sync (void);
typedef GVariant * (*GSettingsBindSetMapping) (const GValue *value,
                                                                         const GVariantType *expected_type,
                                                                         gpointer user_data);
typedef gboolean (*GSettingsBindGetMapping) (GValue *value,
                                                                         GVariant *variant,
                                                                         gpointer user_data);
typedef gboolean (*GSettingsGetMapping) (GVariant *value,
                                                                         gpointer *result,
                                                                         gpointer user_data);
typedef enum
{
  G_SETTINGS_BIND_DEFAULT,
  G_SETTINGS_BIND_GET = (1<<0),
  G_SETTINGS_BIND_SET = (1<<1),
  G_SETTINGS_BIND_NO_SENSITIVITY = (1<<2),
  G_SETTINGS_BIND_GET_NO_CHANGES = (1<<3),
  G_SETTINGS_BIND_INVERT_BOOLEAN = (1<<4)
} GSettingsBindFlags;
extern
void g_settings_bind (GSettings *settings,
                                                                         const gchar *key,
                                                                         gpointer object,
                                                                         const gchar *property,
                                                                         GSettingsBindFlags flags);
extern
void g_settings_bind_with_mapping (GSettings *settings,
                                                                         const gchar *key,
                                                                         gpointer object,
                                                                         const gchar *property,
                                                                         GSettingsBindFlags flags,
                                                                         GSettingsBindGetMapping get_mapping,
                                                                         GSettingsBindSetMapping set_mapping,
                                                                         gpointer user_data,
                                                                         GDestroyNotify destroy);
extern
void g_settings_bind_writable (GSettings *settings,
                                                                         const gchar *key,
                                                                         gpointer object,
                                                                         const gchar *property,
                                                                         gboolean inverted);
extern
void g_settings_unbind (gpointer object,
                                                                         const gchar *property);
extern
GAction * g_settings_create_action (GSettings *settings,
                                                                         const gchar *key);
extern
gpointer g_settings_get_mapped (GSettings *settings,
                                                                         const gchar *key,
                                                                         GSettingsGetMapping mapping,
                                                                         gpointer user_data);
extern
GType g_simple_action_get_type (void) __attribute__((__const__));
extern
GSimpleAction * g_simple_action_new (const gchar *name,
                                                                         const GVariantType *parameter_type);
extern
GSimpleAction * g_simple_action_new_stateful (const gchar *name,
                                                                         const GVariantType *parameter_type,
                                                                         GVariant *state);
extern
void g_simple_action_set_enabled (GSimpleAction *simple,
                                                                         gboolean enabled);
extern
void g_simple_action_set_state (GSimpleAction *simple,
                                                                         GVariant *value);
extern
void g_simple_action_set_state_hint (GSimpleAction *simple,
                                                                         GVariant *state_hint);
typedef struct _GSimpleActionGroupPrivate GSimpleActionGroupPrivate;
typedef struct _GSimpleActionGroupClass GSimpleActionGroupClass;
struct _GSimpleActionGroup
{
  GObject parent_instance;
  GSimpleActionGroupPrivate *priv;
};
struct _GSimpleActionGroupClass
{
  GObjectClass parent_class;
  gpointer padding[12];
};
extern
GType g_simple_action_group_get_type (void) __attribute__((__const__));
extern
GSimpleActionGroup * g_simple_action_group_new (void);
extern
GAction * g_simple_action_group_lookup (GSimpleActionGroup *simple,
                                                                         const gchar *action_name);
extern
void g_simple_action_group_insert (GSimpleActionGroup *simple,
                                                                         GAction *action);
extern
void g_simple_action_group_remove (GSimpleActionGroup *simple,
                                                                         const gchar *action_name);
extern
void g_simple_action_group_add_entries (GSimpleActionGroup *simple,
                                                                         const GActionEntry *entries,
                                                                         gint n_entries,
                                                                         gpointer user_data);
typedef struct _GSimpleAsyncResultClass GSimpleAsyncResultClass;
extern
GType g_simple_async_result_get_type (void) __attribute__((__const__));
extern
GSimpleAsyncResult *g_simple_async_result_new (GObject *source_object,
           GAsyncReadyCallback callback,
           gpointer user_data,
           gpointer source_tag);
extern
GSimpleAsyncResult *g_simple_async_result_new_error (GObject *source_object,
           GAsyncReadyCallback callback,
           gpointer user_data,
           GQuark domain,
           gint code,
           const char *format,
           ...) __attribute__((__format__ (__printf__, 6, 7)));
extern
GSimpleAsyncResult *g_simple_async_result_new_from_error (GObject *source_object,
           GAsyncReadyCallback callback,
           gpointer user_data,
           const GError *error);
extern
GSimpleAsyncResult *g_simple_async_result_new_take_error (GObject *source_object,
           GAsyncReadyCallback callback,
           gpointer user_data,
           GError *error);
extern
void g_simple_async_result_set_op_res_gpointer (GSimpleAsyncResult *simple,
                                                               gpointer op_res,
                                                               GDestroyNotify destroy_op_res);
extern
gpointer g_simple_async_result_get_op_res_gpointer (GSimpleAsyncResult *simple);
extern
void g_simple_async_result_set_op_res_gssize (GSimpleAsyncResult *simple,
                                                               gssize op_res);
extern
gssize g_simple_async_result_get_op_res_gssize (GSimpleAsyncResult *simple);
extern
void g_simple_async_result_set_op_res_gboolean (GSimpleAsyncResult *simple,
                                                               gboolean op_res);
extern
gboolean g_simple_async_result_get_op_res_gboolean (GSimpleAsyncResult *simple);
extern
void g_simple_async_result_set_check_cancellable (GSimpleAsyncResult *simple,
                                                                 GCancellable *check_cancellable);
extern
gpointer g_simple_async_result_get_source_tag (GSimpleAsyncResult *simple);
extern
void g_simple_async_result_set_handle_cancellation (GSimpleAsyncResult *simple,
           gboolean handle_cancellation);
extern
void g_simple_async_result_complete (GSimpleAsyncResult *simple);
extern
void g_simple_async_result_complete_in_idle (GSimpleAsyncResult *simple);
extern
void g_simple_async_result_run_in_thread (GSimpleAsyncResult *simple,
           GSimpleAsyncThreadFunc func,
           int io_priority,
           GCancellable *cancellable);
extern
void g_simple_async_result_set_from_error (GSimpleAsyncResult *simple,
           const GError *error);
extern
void g_simple_async_result_take_error (GSimpleAsyncResult *simple,
           GError *error);
extern
gboolean g_simple_async_result_propagate_error (GSimpleAsyncResult *simple,
           GError **dest);
extern
void g_simple_async_result_set_error (GSimpleAsyncResult *simple,
           GQuark domain,
           gint code,
           const char *format,
           ...) __attribute__((__format__ (__printf__, 4, 5)));
extern
void g_simple_async_result_set_error_va (GSimpleAsyncResult *simple,
           GQuark domain,
           gint code,
           const char *format,
           va_list args)
           __attribute__((__format__ (__printf__, 4, 0)));
extern
gboolean g_simple_async_result_is_valid (GAsyncResult *result,
                                                            GObject *source,
                                                            gpointer source_tag);
extern
void g_simple_async_report_error_in_idle (GObject *object,
        GAsyncReadyCallback callback,
        gpointer user_data,
        GQuark domain,
        gint code,
        const char *format,
        ...) __attribute__((__format__ (__printf__, 6, 7)));
extern
void g_simple_async_report_gerror_in_idle (GObject *object,
        GAsyncReadyCallback callback,
        gpointer user_data,
        const GError *error);
extern
void g_simple_async_report_take_gerror_in_idle (GObject *object,
                                                GAsyncReadyCallback callback,
                                                gpointer user_data,
                                                GError *error);
extern
GType g_simple_io_stream_get_type (void) __attribute__((__const__));
extern
GIOStream *g_simple_io_stream_new (GInputStream *input_stream,
                                                          GOutputStream *output_stream);
extern
GType g_simple_permission_get_type (void);
extern
GPermission * g_simple_permission_new (gboolean allowed);
typedef struct _GSocketClientPrivate GSocketClientPrivate;
typedef struct _GSocketClientClass GSocketClientClass;
struct _GSocketClientClass
{
  GObjectClass parent_class;
  void (* event) (GSocketClient *client,
    GSocketClientEvent event,
    GSocketConnectable *connectable,
    GIOStream *connection);
  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
};
struct _GSocketClient
{
  GObject parent_instance;
  GSocketClientPrivate *priv;
};
extern
GType g_socket_client_get_type (void) __attribute__((__const__));
extern
GSocketClient *g_socket_client_new (void);
extern
GSocketFamily g_socket_client_get_family (GSocketClient *client);
extern
void g_socket_client_set_family (GSocketClient *client,
          GSocketFamily family);
extern
GSocketType g_socket_client_get_socket_type (GSocketClient *client);
extern
void g_socket_client_set_socket_type (GSocketClient *client,
          GSocketType type);
extern
GSocketProtocol g_socket_client_get_protocol (GSocketClient *client);
extern
void g_socket_client_set_protocol (GSocketClient *client,
          GSocketProtocol protocol);
extern
GSocketAddress *g_socket_client_get_local_address (GSocketClient *client);
extern
void g_socket_client_set_local_address (GSocketClient *client,
          GSocketAddress *address);
extern
guint g_socket_client_get_timeout (GSocketClient *client);
extern
void g_socket_client_set_timeout (GSocketClient *client,
          guint timeout);
extern
gboolean g_socket_client_get_enable_proxy (GSocketClient *client);
extern
void g_socket_client_set_enable_proxy (GSocketClient *client,
              gboolean enable);
extern
gboolean g_socket_client_get_tls (GSocketClient *client);
extern
void g_socket_client_set_tls (GSocketClient *client,
          gboolean tls);
extern
GTlsCertificateFlags g_socket_client_get_tls_validation_flags (GSocketClient *client);
extern
void g_socket_client_set_tls_validation_flags (GSocketClient *client,
          GTlsCertificateFlags flags);
extern
GProxyResolver *g_socket_client_get_proxy_resolver (GSocketClient *client);
extern
void g_socket_client_set_proxy_resolver (GSocketClient *client,
                                                                         GProxyResolver *proxy_resolver);
extern
GSocketConnection * g_socket_client_connect (GSocketClient *client,
                                                                         GSocketConnectable *connectable,
                                                                         GCancellable *cancellable,
                                                                         GError **error);
extern
GSocketConnection * g_socket_client_connect_to_host (GSocketClient *client,
          const gchar *host_and_port,
          guint16 default_port,
                                                                         GCancellable *cancellable,
                                                                         GError **error);
extern
GSocketConnection * g_socket_client_connect_to_service (GSocketClient *client,
          const gchar *domain,
          const gchar *service,
                                                                         GCancellable *cancellable,
                                                                         GError **error);
extern
GSocketConnection * g_socket_client_connect_to_uri (GSocketClient *client,
          const gchar *uri,
          guint16 default_port,
                                                                         GCancellable *cancellable,
                                                                         GError **error);
extern
void g_socket_client_connect_async (GSocketClient *client,
                                                                         GSocketConnectable *connectable,
                                                                         GCancellable *cancellable,
                                                                         GAsyncReadyCallback callback,
                                                                         gpointer user_data);
extern
GSocketConnection * g_socket_client_connect_finish (GSocketClient *client,
                                                                         GAsyncResult *result,
                                                                         GError **error);
extern
void g_socket_client_connect_to_host_async (GSocketClient *client,
          const gchar *host_and_port,
          guint16 default_port,
                                                                         GCancellable *cancellable,
                                                                         GAsyncReadyCallback callback,
                                                                         gpointer user_data);
extern
GSocketConnection * g_socket_client_connect_to_host_finish (GSocketClient *client,
                                                                         GAsyncResult *result,
                                                                         GError **error);
extern
void g_socket_client_connect_to_service_async (GSocketClient *client,
          const gchar *domain,
          const gchar *service,
                                                                         GCancellable *cancellable,
                                                                         GAsyncReadyCallback callback,
                                                                         gpointer user_data);
extern
GSocketConnection * g_socket_client_connect_to_service_finish (GSocketClient *client,
                                                                         GAsyncResult *result,
                                                                         GError **error);
extern
void g_socket_client_connect_to_uri_async (GSocketClient *client,
          const gchar *uri,
          guint16 default_port,
                                                                         GCancellable *cancellable,
                                                                         GAsyncReadyCallback callback,
                                                                         gpointer user_data);
extern
GSocketConnection * g_socket_client_connect_to_uri_finish (GSocketClient *client,
                                                                         GAsyncResult *result,
                                                                         GError **error);
extern
void g_socket_client_add_application_proxy (GSocketClient *client,
          const gchar *protocol);
typedef struct _GSocketConnectableIface GSocketConnectableIface;
struct _GSocketConnectableIface
{
  GTypeInterface g_iface;
  GSocketAddressEnumerator * (* enumerate) (GSocketConnectable *connectable);
  GSocketAddressEnumerator * (* proxy_enumerate) (GSocketConnectable *connectable);
  gchar * (* to_string) (GSocketConnectable *connectable);
};
extern
GType g_socket_connectable_get_type (void) __attribute__((__const__));
extern
GSocketAddressEnumerator *g_socket_connectable_enumerate (GSocketConnectable *connectable);
extern
GSocketAddressEnumerator *g_socket_connectable_proxy_enumerate (GSocketConnectable *connectable);
extern
gchar *g_socket_connectable_to_string (GSocketConnectable *connectable);
typedef struct _GSocketPrivate GSocketPrivate;
typedef struct _GSocketClass GSocketClass;
struct _GSocketClass
{
  GObjectClass parent_class;
  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
  void (*_g_reserved6) (void);
  void (*_g_reserved7) (void);
  void (*_g_reserved8) (void);
  void (*_g_reserved9) (void);
  void (*_g_reserved10) (void);
};
struct _GSocket
{
  GObject parent_instance;
  GSocketPrivate *priv;
};
extern
GType g_socket_get_type (void) __attribute__((__const__));
extern
GSocket * g_socket_new (GSocketFamily family,
        GSocketType type,
        GSocketProtocol protocol,
        GError **error);
extern
GSocket * g_socket_new_from_fd (gint fd,
        GError **error);
extern
int g_socket_get_fd (GSocket *socket);
extern
GSocketFamily g_socket_get_family (GSocket *socket);
extern
GSocketType g_socket_get_socket_type (GSocket *socket);
extern
GSocketProtocol g_socket_get_protocol (GSocket *socket);
extern
GSocketAddress * g_socket_get_local_address (GSocket *socket,
        GError **error);
extern
GSocketAddress * g_socket_get_remote_address (GSocket *socket,
        GError **error);
extern
void g_socket_set_blocking (GSocket *socket,
        gboolean blocking);
extern
gboolean g_socket_get_blocking (GSocket *socket);
extern
void g_socket_set_keepalive (GSocket *socket,
        gboolean keepalive);
extern
gboolean g_socket_get_keepalive (GSocket *socket);
extern
gint g_socket_get_listen_backlog (GSocket *socket);
extern
void g_socket_set_listen_backlog (GSocket *socket,
        gint backlog);
extern
guint g_socket_get_timeout (GSocket *socket);
extern
void g_socket_set_timeout (GSocket *socket,
        guint timeout);
extern
guint g_socket_get_ttl (GSocket *socket);
extern
void g_socket_set_ttl (GSocket *socket,
                                                         guint ttl);
extern
gboolean g_socket_get_broadcast (GSocket *socket);
extern
void g_socket_set_broadcast (GSocket *socket,
                                                         gboolean broadcast);
extern
gboolean g_socket_get_multicast_loopback (GSocket *socket);
extern
void g_socket_set_multicast_loopback (GSocket *socket,
                                                         gboolean loopback);
extern
guint g_socket_get_multicast_ttl (GSocket *socket);
extern
void g_socket_set_multicast_ttl (GSocket *socket,
                                                         guint ttl);
extern
gboolean g_socket_is_connected (GSocket *socket);
extern
gboolean g_socket_bind (GSocket *socket,
        GSocketAddress *address,
        gboolean allow_reuse,
        GError **error);
extern
gboolean g_socket_join_multicast_group (GSocket *socket,
                                                         GInetAddress *group,
                                                         gboolean source_specific,
                                                         const gchar *iface,
                                                         GError **error);
extern
gboolean g_socket_leave_multicast_group (GSocket *socket,
                                                         GInetAddress *group,
                                                         gboolean source_specific,
                                                         const gchar *iface,
                                                         GError **error);
extern
gboolean g_socket_connect (GSocket *socket,
        GSocketAddress *address,
        GCancellable *cancellable,
        GError **error);
extern
gboolean g_socket_check_connect_result (GSocket *socket,
        GError **error);
extern
gssize g_socket_get_available_bytes (GSocket *socket);
extern
GIOCondition g_socket_condition_check (GSocket *socket,
        GIOCondition condition);
extern
gboolean g_socket_condition_wait (GSocket *socket,
        GIOCondition condition,
        GCancellable *cancellable,
        GError **error);
extern
gboolean g_socket_condition_timed_wait (GSocket *socket,
        GIOCondition condition,
        gint64 timeout,
        GCancellable *cancellable,
        GError **error);
extern
GSocket * g_socket_accept (GSocket *socket,
        GCancellable *cancellable,
        GError **error);
extern
gboolean g_socket_listen (GSocket *socket,
        GError **error);
extern
gssize g_socket_receive (GSocket *socket,
        gchar *buffer,
        gsize size,
        GCancellable *cancellable,
        GError **error);
extern
gssize g_socket_receive_from (GSocket *socket,
        GSocketAddress **address,
        gchar *buffer,
        gsize size,
        GCancellable *cancellable,
        GError **error);
extern
gssize g_socket_send (GSocket *socket,
        const gchar *buffer,
        gsize size,
        GCancellable *cancellable,
        GError **error);
extern
gssize g_socket_send_to (GSocket *socket,
        GSocketAddress *address,
        const gchar *buffer,
        gsize size,
        GCancellable *cancellable,
        GError **error);
extern
gssize g_socket_receive_message (GSocket *socket,
        GSocketAddress **address,
        GInputVector *vectors,
        gint num_vectors,
        GSocketControlMessage ***messages,
        gint *num_messages,
        gint *flags,
        GCancellable *cancellable,
        GError **error);
extern
gssize g_socket_send_message (GSocket *socket,
        GSocketAddress *address,
        GOutputVector *vectors,
        gint num_vectors,
        GSocketControlMessage **messages,
        gint num_messages,
        gint flags,
        GCancellable *cancellable,
        GError **error);
extern
gint g_socket_receive_messages (GSocket *socket,
                                                         GInputMessage *messages,
                                                         guint num_messages,
                                                         gint flags,
                                                         GCancellable *cancellable,
                                                         GError **error);
extern
gint g_socket_send_messages (GSocket *socket,
        GOutputMessage *messages,
        guint num_messages,
        gint flags,
        GCancellable *cancellable,
        GError **error);
extern
gboolean g_socket_close (GSocket *socket,
        GError **error);
extern
gboolean g_socket_shutdown (GSocket *socket,
        gboolean shutdown_read,
        gboolean shutdown_write,
        GError **error);
extern
gboolean g_socket_is_closed (GSocket *socket);
extern
GSource * g_socket_create_source (GSocket *socket,
        GIOCondition condition,
        GCancellable *cancellable);
extern
gboolean g_socket_speaks_ipv4 (GSocket *socket);
extern
GCredentials *g_socket_get_credentials (GSocket *socket,
                                                         GError **error);
extern
gssize g_socket_receive_with_blocking (GSocket *socket,
        gchar *buffer,
        gsize size,
        gboolean blocking,
        GCancellable *cancellable,
        GError **error);
extern
gssize g_socket_send_with_blocking (GSocket *socket,
        const gchar *buffer,
        gsize size,
        gboolean blocking,
        GCancellable *cancellable,
        GError **error);
extern
gboolean g_socket_get_option (GSocket *socket,
        gint level,
        gint optname,
        gint *value,
        GError **error);
extern
gboolean g_socket_set_option (GSocket *socket,
        gint level,
        gint optname,
        gint value,
        GError **error);
typedef struct _GSocketConnectionPrivate GSocketConnectionPrivate;
typedef struct _GSocketConnectionClass GSocketConnectionClass;
struct _GSocketConnectionClass
{
  GIOStreamClass parent_class;
  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
  void (*_g_reserved6) (void);
};
struct _GSocketConnection
{
  GIOStream parent_instance;
  GSocketConnectionPrivate *priv;
};
extern
GType g_socket_connection_get_type (void) __attribute__((__const__));
extern
gboolean g_socket_connection_is_connected (GSocketConnection *connection);
extern
gboolean g_socket_connection_connect (GSocketConnection *connection,
          GSocketAddress *address,
          GCancellable *cancellable,
          GError **error);
extern
void g_socket_connection_connect_async (GSocketConnection *connection,
          GSocketAddress *address,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
extern
gboolean g_socket_connection_connect_finish (GSocketConnection *connection,
          GAsyncResult *result,
          GError **error);
extern
GSocket *g_socket_connection_get_socket (GSocketConnection *connection);
extern
GSocketAddress *g_socket_connection_get_local_address (GSocketConnection *connection,
          GError **error);
extern
GSocketAddress *g_socket_connection_get_remote_address (GSocketConnection *connection,
          GError **error);
extern
void g_socket_connection_factory_register_type (GType g_type,
          GSocketFamily family,
          GSocketType type,
          gint protocol);
extern
GType g_socket_connection_factory_lookup_type (GSocketFamily family,
          GSocketType type,
          gint protocol_id);
extern
GSocketConnection *g_socket_connection_factory_create_connection (GSocket *socket);
typedef struct _GSocketControlMessagePrivate GSocketControlMessagePrivate;
typedef struct _GSocketControlMessageClass GSocketControlMessageClass;
struct _GSocketControlMessageClass
{
  GObjectClass parent_class;
  gsize (* get_size) (GSocketControlMessage *message);
  int (* get_level) (GSocketControlMessage *message);
  int (* get_type) (GSocketControlMessage *message);
  void (* serialize) (GSocketControlMessage *message,
     gpointer data);
  GSocketControlMessage *(* deserialize) (int level,
       int type,
       gsize size,
       gpointer data);
  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};
struct _GSocketControlMessage
{
  GObject parent_instance;
  GSocketControlMessagePrivate *priv;
};
extern
GType g_socket_control_message_get_type (void) __attribute__((__const__));
extern
gsize g_socket_control_message_get_size (GSocketControlMessage *message);
extern
int g_socket_control_message_get_level (GSocketControlMessage *message);
extern
int g_socket_control_message_get_msg_type (GSocketControlMessage *message);
extern
void g_socket_control_message_serialize (GSocketControlMessage *message,
             gpointer data);
extern
GSocketControlMessage *g_socket_control_message_deserialize (int level,
             int type,
             gsize size,
             gpointer data);
typedef struct _GSocketListenerPrivate GSocketListenerPrivate;
typedef struct _GSocketListenerClass GSocketListenerClass;
struct _GSocketListenerClass
{
  GObjectClass parent_class;
  void (* changed) (GSocketListener *listener);
  void (* event) (GSocketListener *listener,
                  GSocketListenerEvent *event,
                  GSocket *socket);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
  void (*_g_reserved6) (void);
};
struct _GSocketListener
{
  GObject parent_instance;
  GSocketListenerPrivate *priv;
};
extern
GType g_socket_listener_get_type (void) __attribute__((__const__));
extern
GSocketListener * g_socket_listener_new (void);
extern
void g_socket_listener_set_backlog (GSocketListener *listener,
          int listen_backlog);
extern
gboolean g_socket_listener_add_socket (GSocketListener *listener,
                                                                         GSocket *socket,
          GObject *source_object,
          GError **error);
extern
gboolean g_socket_listener_add_address (GSocketListener *listener,
                                                                         GSocketAddress *address,
          GSocketType type,
          GSocketProtocol protocol,
          GObject *source_object,
                                                                         GSocketAddress **effective_address,
          GError **error);
extern
gboolean g_socket_listener_add_inet_port (GSocketListener *listener,
                                                                         guint16 port,
          GObject *source_object,
          GError **error);
extern
guint16 g_socket_listener_add_any_inet_port (GSocketListener *listener,
          GObject *source_object,
          GError **error);
extern
GSocket * g_socket_listener_accept_socket (GSocketListener *listener,
          GObject **source_object,
                                                                         GCancellable *cancellable,
                                                                         GError **error);
extern
void g_socket_listener_accept_socket_async (GSocketListener *listener,
                                                                         GCancellable *cancellable,
                                                                         GAsyncReadyCallback callback,
                                                                         gpointer user_data);
extern
GSocket * g_socket_listener_accept_socket_finish (GSocketListener *listener,
                                                                         GAsyncResult *result,
          GObject **source_object,
                                                                         GError **error);
extern
GSocketConnection * g_socket_listener_accept (GSocketListener *listener,
          GObject **source_object,
                                                                         GCancellable *cancellable,
                                                                         GError **error);
extern
void g_socket_listener_accept_async (GSocketListener *listener,
                                                                         GCancellable *cancellable,
                                                                         GAsyncReadyCallback callback,
                                                                         gpointer user_data);
extern
GSocketConnection * g_socket_listener_accept_finish (GSocketListener *listener,
                                                                         GAsyncResult *result,
          GObject **source_object,
                                                                         GError **error);
extern
void g_socket_listener_close (GSocketListener *listener);
typedef struct _GSocketServicePrivate GSocketServicePrivate;
typedef struct _GSocketServiceClass GSocketServiceClass;
struct _GSocketServiceClass
{
  GSocketListenerClass parent_class;
  gboolean (* incoming) (GSocketService *service,
                         GSocketConnection *connection,
    GObject *source_object);
  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
  void (*_g_reserved6) (void);
};
struct _GSocketService
{
  GSocketListener parent_instance;
  GSocketServicePrivate *priv;
};
extern
GType g_socket_service_get_type (void);
extern
GSocketService *g_socket_service_new (void);
extern
void g_socket_service_start (GSocketService *service);
extern
void g_socket_service_stop (GSocketService *service);
extern
gboolean g_socket_service_is_active (GSocketService *service);
extern
GType g_srv_target_get_type (void) __attribute__((__const__));
extern
GSrvTarget *g_srv_target_new (const gchar *hostname,
            guint16 port,
            guint16 priority,
            guint16 weight);
extern
GSrvTarget *g_srv_target_copy (GSrvTarget *target);
extern
void g_srv_target_free (GSrvTarget *target);
extern
const gchar *g_srv_target_get_hostname (GSrvTarget *target);
extern
guint16 g_srv_target_get_port (GSrvTarget *target);
extern
guint16 g_srv_target_get_priority (GSrvTarget *target);
extern
guint16 g_srv_target_get_weight (GSrvTarget *target);
extern
GList *g_srv_target_list_sort (GList *targets);
typedef struct _GSimpleProxyResolver GSimpleProxyResolver;
typedef struct _GSimpleProxyResolverPrivate GSimpleProxyResolverPrivate;
typedef struct _GSimpleProxyResolverClass GSimpleProxyResolverClass;
struct _GSimpleProxyResolver
{
  GObject parent_instance;
  GSimpleProxyResolverPrivate *priv;
};
struct _GSimpleProxyResolverClass
{
  GObjectClass parent_class;
  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};
extern
GType g_simple_proxy_resolver_get_type (void) __attribute__((__const__));
extern
GProxyResolver *g_simple_proxy_resolver_new (const gchar *default_proxy,
                                                           gchar **ignore_hosts);
extern
void g_simple_proxy_resolver_set_default_proxy (GSimpleProxyResolver *resolver,
                                                           const gchar *default_proxy);
extern
void g_simple_proxy_resolver_set_ignore_hosts (GSimpleProxyResolver *resolver,
                                                           gchar **ignore_hosts);
extern
void g_simple_proxy_resolver_set_uri_proxy (GSimpleProxyResolver *resolver,
                                                           const gchar *uri_scheme,
                                                           const gchar *proxy);
typedef struct _GTaskClass GTaskClass;
extern
GType g_task_get_type (void) __attribute__((__const__));
extern
GTask *g_task_new (gpointer source_object,
                                            GCancellable *cancellable,
                                            GAsyncReadyCallback callback,
                                            gpointer callback_data);
extern
void g_task_report_error (gpointer source_object,
                                            GAsyncReadyCallback callback,
                                            gpointer callback_data,
                                            gpointer source_tag,
                                            GError *error);
extern
void g_task_report_new_error (gpointer source_object,
                                            GAsyncReadyCallback callback,
                                            gpointer callback_data,
                                            gpointer source_tag,
                                            GQuark domain,
                                            gint code,
                                            const char *format,
                                            ...) __attribute__((__format__ (__printf__, 7, 8)));
extern
void g_task_set_task_data (GTask *task,
                                            gpointer task_data,
                                            GDestroyNotify task_data_destroy);
extern
void g_task_set_priority (GTask *task,
                                            gint priority);
extern
void g_task_set_check_cancellable (GTask *task,
                                            gboolean check_cancellable);
extern
void g_task_set_source_tag (GTask *task,
                                            gpointer source_tag);
extern
gpointer g_task_get_source_object (GTask *task);
extern
gpointer g_task_get_task_data (GTask *task);
extern
gint g_task_get_priority (GTask *task);
extern
GMainContext *g_task_get_context (GTask *task);
extern
GCancellable *g_task_get_cancellable (GTask *task);
extern
gboolean g_task_get_check_cancellable (GTask *task);
extern
gpointer g_task_get_source_tag (GTask *task);
extern
gboolean g_task_is_valid (gpointer result,
                                            gpointer source_object);
typedef void (*GTaskThreadFunc) (GTask *task,
                                           gpointer source_object,
                                           gpointer task_data,
                                           GCancellable *cancellable);
extern
void g_task_run_in_thread (GTask *task,
                                           GTaskThreadFunc task_func);
extern
void g_task_run_in_thread_sync (GTask *task,
                                           GTaskThreadFunc task_func);
extern
gboolean g_task_set_return_on_cancel (GTask *task,
                                           gboolean return_on_cancel);
extern
gboolean g_task_get_return_on_cancel (GTask *task);
extern
void g_task_attach_source (GTask *task,
                                           GSource *source,
                                           GSourceFunc callback);
extern
void g_task_return_pointer (GTask *task,
                                                gpointer result,
                                                GDestroyNotify result_destroy);
extern
void g_task_return_boolean (GTask *task,
                                                gboolean result);
extern
void g_task_return_int (GTask *task,
                                                gssize result);
extern
void g_task_return_error (GTask *task,
                                                GError *error);
extern
void g_task_return_new_error (GTask *task,
                                                GQuark domain,
                                                gint code,
                                                const char *format,
                                                ...) __attribute__((__format__ (__printf__, 4, 5)));
extern
gboolean g_task_return_error_if_cancelled (GTask *task);
extern
gpointer g_task_propagate_pointer (GTask *task,
                                                GError **error);
extern
gboolean g_task_propagate_boolean (GTask *task,
                                                GError **error);
extern
gssize g_task_propagate_int (GTask *task,
                                                GError **error);
extern
gboolean g_task_had_error (GTask *task);
extern
gboolean g_task_get_completed (GTask *task);
extern
GType g_subprocess_get_type (void) __attribute__((__const__));
extern
GSubprocess * g_subprocess_new (GSubprocessFlags flags,
                                                         GError **error,
                                                         const gchar *argv0,
                                                         ...) __attribute__((__sentinel__));
extern
GSubprocess * g_subprocess_newv (const gchar * const *argv,
                                                         GSubprocessFlags flags,
                                                         GError **error);
extern
GOutputStream * g_subprocess_get_stdin_pipe (GSubprocess *subprocess);
extern
GInputStream * g_subprocess_get_stdout_pipe (GSubprocess *subprocess);
extern
GInputStream * g_subprocess_get_stderr_pipe (GSubprocess *subprocess);
extern
const gchar * g_subprocess_get_identifier (GSubprocess *subprocess);
extern
void g_subprocess_send_signal (GSubprocess *subprocess,
                                                         gint signal_num);
extern
void g_subprocess_force_exit (GSubprocess *subprocess);
extern
gboolean g_subprocess_wait (GSubprocess *subprocess,
                                                         GCancellable *cancellable,
                                                         GError **error);
extern
void g_subprocess_wait_async (GSubprocess *subprocess,
                                                         GCancellable *cancellable,
                                                         GAsyncReadyCallback callback,
                                                         gpointer user_data);
extern
gboolean g_subprocess_wait_finish (GSubprocess *subprocess,
                                                         GAsyncResult *result,
                                                         GError **error);
extern
gboolean g_subprocess_wait_check (GSubprocess *subprocess,
                                                         GCancellable *cancellable,
                                                         GError **error);
extern
void g_subprocess_wait_check_async (GSubprocess *subprocess,
                                                         GCancellable *cancellable,
                                                         GAsyncReadyCallback callback,
                                                         gpointer user_data);
extern
gboolean g_subprocess_wait_check_finish (GSubprocess *subprocess,
                                                         GAsyncResult *result,
                                                         GError **error);
extern
gint g_subprocess_get_status (GSubprocess *subprocess);
extern
gboolean g_subprocess_get_successful (GSubprocess *subprocess);
extern
gboolean g_subprocess_get_if_exited (GSubprocess *subprocess);
extern
gint g_subprocess_get_exit_status (GSubprocess *subprocess);
extern
gboolean g_subprocess_get_if_signaled (GSubprocess *subprocess);
extern
gint g_subprocess_get_term_sig (GSubprocess *subprocess);
extern
gboolean g_subprocess_communicate (GSubprocess *subprocess,
                                                         GBytes *stdin_buf,
                                                         GCancellable *cancellable,
                                                         GBytes **stdout_buf,
                                                         GBytes **stderr_buf,
                                                         GError **error);
extern
void g_subprocess_communicate_async (GSubprocess *subprocess,
                                                         GBytes *stdin_buf,
                                                         GCancellable *cancellable,
                                                         GAsyncReadyCallback callback,
                                                         gpointer user_data);
extern
gboolean g_subprocess_communicate_finish (GSubprocess *subprocess,
                                                         GAsyncResult *result,
                                                         GBytes **stdout_buf,
                                                         GBytes **stderr_buf,
                                                         GError **error);
extern
gboolean g_subprocess_communicate_utf8 (GSubprocess *subprocess,
                                                         const char *stdin_buf,
                                                         GCancellable *cancellable,
                                                         char **stdout_buf,
                                                         char **stderr_buf,
                                                         GError **error);
extern
void g_subprocess_communicate_utf8_async (GSubprocess *subprocess,
                                                         const char *stdin_buf,
                                                         GCancellable *cancellable,
                                                         GAsyncReadyCallback callback,
                                                         gpointer user_data);
extern
gboolean g_subprocess_communicate_utf8_finish (GSubprocess *subprocess,
                                                         GAsyncResult *result,
                                                         char **stdout_buf,
                                                         char **stderr_buf,
                                                         GError **error);
extern
GType g_subprocess_launcher_get_type (void) __attribute__((__const__));
extern
GSubprocessLauncher * g_subprocess_launcher_new (GSubprocessFlags flags);
extern
GSubprocess * g_subprocess_launcher_spawn (GSubprocessLauncher *self,
                                                                         GError **error,
                                                                         const gchar *argv0,
                                                                         ...);
extern
GSubprocess * g_subprocess_launcher_spawnv (GSubprocessLauncher *self,
                                                                         const gchar * const *argv,
                                                                         GError **error);
extern
void g_subprocess_launcher_set_environ (GSubprocessLauncher *self,
                                                                         gchar **env);
extern
void g_subprocess_launcher_setenv (GSubprocessLauncher *self,
                                                                         const gchar *variable,
                                                                         const gchar *value,
                                                                         gboolean overwrite);
extern
void g_subprocess_launcher_unsetenv (GSubprocessLauncher *self,
                                                                         const gchar *variable);
extern
const gchar * g_subprocess_launcher_getenv (GSubprocessLauncher *self,
                                                                         const gchar *variable);
extern
void g_subprocess_launcher_set_cwd (GSubprocessLauncher *self,
                                                                         const gchar *cwd);
extern
void g_subprocess_launcher_set_flags (GSubprocessLauncher *self,
                                                                         GSubprocessFlags flags);
extern
void g_subprocess_launcher_set_stdin_file_path (GSubprocessLauncher *self,
                                                                         const gchar *path);
extern
void g_subprocess_launcher_take_stdin_fd (GSubprocessLauncher *self,
                                                                         gint fd);
extern
void g_subprocess_launcher_set_stdout_file_path (GSubprocessLauncher *self,
                                                                         const gchar *path);
extern
void g_subprocess_launcher_take_stdout_fd (GSubprocessLauncher *self,
                                                                         gint fd);
extern
void g_subprocess_launcher_set_stderr_file_path (GSubprocessLauncher *self,
                                                                         const gchar *path);
extern
void g_subprocess_launcher_take_stderr_fd (GSubprocessLauncher *self,
                                                                         gint fd);
extern
void g_subprocess_launcher_take_fd (GSubprocessLauncher *self,
                                                                         gint source_fd,
                                                                         gint target_fd);
extern
void g_subprocess_launcher_set_child_setup (GSubprocessLauncher *self,
                                                                         GSpawnChildSetupFunc child_setup,
                                                                         gpointer user_data,
                                                                         GDestroyNotify destroy_notify);
typedef struct _GTcpConnectionPrivate GTcpConnectionPrivate;
typedef struct _GTcpConnectionClass GTcpConnectionClass;
struct _GTcpConnectionClass
{
  GSocketConnectionClass parent_class;
};
struct _GTcpConnection
{
  GSocketConnection parent_instance;
  GTcpConnectionPrivate *priv;
};
extern
GType g_tcp_connection_get_type (void) __attribute__((__const__));
extern
void g_tcp_connection_set_graceful_disconnect (GTcpConnection *connection,
         gboolean graceful_disconnect);
extern
gboolean g_tcp_connection_get_graceful_disconnect (GTcpConnection *connection);
typedef struct _GTcpWrapperConnectionPrivate GTcpWrapperConnectionPrivate;
typedef struct _GTcpWrapperConnectionClass GTcpWrapperConnectionClass;
struct _GTcpWrapperConnectionClass
{
  GTcpConnectionClass parent_class;
};
struct _GTcpWrapperConnection
{
  GTcpConnection parent_instance;
  GTcpWrapperConnectionPrivate *priv;
};
extern
GType g_tcp_wrapper_connection_get_type (void) __attribute__((__const__));
extern
GSocketConnection *g_tcp_wrapper_connection_new (GIOStream *base_io_stream,
        GSocket *socket);
extern
GIOStream *g_tcp_wrapper_connection_get_base_io_stream (GTcpWrapperConnection *conn);
extern
GType g_test_dbus_get_type (void) __attribute__((__const__));
extern
GTestDBus * g_test_dbus_new (GTestDBusFlags flags);
extern
GTestDBusFlags g_test_dbus_get_flags (GTestDBus *self);
extern
const gchar * g_test_dbus_get_bus_address (GTestDBus *self);
extern
void g_test_dbus_add_service_dir (GTestDBus *self,
                                            const gchar *path);
extern
void g_test_dbus_up (GTestDBus *self);
extern
void g_test_dbus_stop (GTestDBus *self);
extern
void g_test_dbus_down (GTestDBus *self);
extern
void g_test_dbus_unset (void);
typedef struct _GThemedIconClass GThemedIconClass;
extern
GType g_themed_icon_get_type (void) __attribute__((__const__));
extern
GIcon *g_themed_icon_new (const char *iconname);
extern
GIcon *g_themed_icon_new_with_default_fallbacks (const char *iconname);
extern
GIcon *g_themed_icon_new_from_names (char **iconnames,
                                                 int len);
extern
void g_themed_icon_prepend_name (GThemedIcon *icon,
                                                 const char *iconname);
extern
void g_themed_icon_append_name (GThemedIcon *icon,
                                                 const char *iconname);
extern
const gchar* const * g_themed_icon_get_names (GThemedIcon *icon);
typedef struct _GThreadedSocketServicePrivate GThreadedSocketServicePrivate;
typedef struct _GThreadedSocketServiceClass GThreadedSocketServiceClass;
struct _GThreadedSocketServiceClass
{
  GSocketServiceClass parent_class;
  gboolean (* run) (GThreadedSocketService *service,
                    GSocketConnection *connection,
                    GObject *source_object);
  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};
struct _GThreadedSocketService
{
  GSocketService parent_instance;
  GThreadedSocketServicePrivate *priv;
};
extern
GType g_threaded_socket_service_get_type (void);
extern
GSocketService * g_threaded_socket_service_new (int max_threads);
typedef struct _GTlsBackend GTlsBackend;
typedef struct _GTlsBackendInterface GTlsBackendInterface;
struct _GTlsBackendInterface
{
  GTypeInterface g_iface;
  gboolean ( *supports_tls) (GTlsBackend *backend);
  GType ( *get_certificate_type) (void);
  GType ( *get_client_connection_type) (void);
  GType ( *get_server_connection_type) (void);
  GType ( *get_file_database_type) (void);
  GTlsDatabase * ( *get_default_database) (GTlsBackend *backend);
  gboolean ( *supports_dtls) (GTlsBackend *backend);
  GType ( *get_dtls_client_connection_type) (void);
  GType ( *get_dtls_server_connection_type) (void);
};
extern
GType g_tls_backend_get_type (void) __attribute__((__const__));
extern
GTlsBackend * g_tls_backend_get_default (void);
extern
GTlsDatabase * g_tls_backend_get_default_database (GTlsBackend *backend);
extern
gboolean g_tls_backend_supports_tls (GTlsBackend *backend);
extern
gboolean g_tls_backend_supports_dtls (GTlsBackend *backend);
extern
GType g_tls_backend_get_certificate_type (GTlsBackend *backend);
extern
GType g_tls_backend_get_client_connection_type (GTlsBackend *backend);
extern
GType g_tls_backend_get_server_connection_type (GTlsBackend *backend);
extern
GType g_tls_backend_get_file_database_type (GTlsBackend *backend);
extern
GType g_tls_backend_get_dtls_client_connection_type (GTlsBackend *backend);
extern
GType g_tls_backend_get_dtls_server_connection_type (GTlsBackend *backend);
typedef struct _GTlsCertificateClass GTlsCertificateClass;
typedef struct _GTlsCertificatePrivate GTlsCertificatePrivate;
struct _GTlsCertificate {
  GObject parent_instance;
  GTlsCertificatePrivate *priv;
};
struct _GTlsCertificateClass
{
  GObjectClass parent_class;
  GTlsCertificateFlags (* verify) (GTlsCertificate *cert,
        GSocketConnectable *identity,
        GTlsCertificate *trusted_ca);
  gpointer padding[8];
};
extern
GType g_tls_certificate_get_type (void) __attribute__((__const__));
extern
GTlsCertificate *g_tls_certificate_new_from_pem (const gchar *data,
           gssize length,
           GError **error);
extern
GTlsCertificate *g_tls_certificate_new_from_file (const gchar *file,
           GError **error);
extern
GTlsCertificate *g_tls_certificate_new_from_files (const gchar *cert_file,
           const gchar *key_file,
           GError **error);
extern
GList *g_tls_certificate_list_new_from_file (const gchar *file,
           GError **error);
extern
GTlsCertificate *g_tls_certificate_get_issuer (GTlsCertificate *cert);
extern
GTlsCertificateFlags g_tls_certificate_verify (GTlsCertificate *cert,
           GSocketConnectable *identity,
           GTlsCertificate *trusted_ca);
extern
gboolean g_tls_certificate_is_same (GTlsCertificate *cert_one,
                                                            GTlsCertificate *cert_two);
typedef struct _GTlsConnectionClass GTlsConnectionClass;
typedef struct _GTlsConnectionPrivate GTlsConnectionPrivate;
struct _GTlsConnection {
  GIOStream parent_instance;
  GTlsConnectionPrivate *priv;
};
struct _GTlsConnectionClass
{
  GIOStreamClass parent_class;
  gboolean ( *accept_certificate) (GTlsConnection *connection,
         GTlsCertificate *peer_cert,
         GTlsCertificateFlags errors);
  gboolean ( *handshake ) (GTlsConnection *conn,
      GCancellable *cancellable,
      GError **error);
  void ( *handshake_async ) (GTlsConnection *conn,
      int io_priority,
      GCancellable *cancellable,
      GAsyncReadyCallback callback,
      gpointer user_data);
  gboolean ( *handshake_finish ) (GTlsConnection *conn,
      GAsyncResult *result,
      GError **error);
  gpointer padding[8];
};
extern
GType g_tls_connection_get_type (void) __attribute__((__const__));
extern
void g_tls_connection_set_use_system_certdb (GTlsConnection *conn,
                                                                    gboolean use_system_certdb);
extern
gboolean g_tls_connection_get_use_system_certdb (GTlsConnection *conn);
extern
void g_tls_connection_set_database (GTlsConnection *conn,
            GTlsDatabase *database);
extern
GTlsDatabase * g_tls_connection_get_database (GTlsConnection *conn);
extern
void g_tls_connection_set_certificate (GTlsConnection *conn,
                                                                    GTlsCertificate *certificate);
extern
GTlsCertificate *g_tls_connection_get_certificate (GTlsConnection *conn);
extern
void g_tls_connection_set_interaction (GTlsConnection *conn,
                                                                    GTlsInteraction *interaction);
extern
GTlsInteraction * g_tls_connection_get_interaction (GTlsConnection *conn);
extern
GTlsCertificate *g_tls_connection_get_peer_certificate (GTlsConnection *conn);
extern
GTlsCertificateFlags g_tls_connection_get_peer_certificate_errors (GTlsConnection *conn);
extern
void g_tls_connection_set_require_close_notify (GTlsConnection *conn,
            gboolean require_close_notify);
extern
gboolean g_tls_connection_get_require_close_notify (GTlsConnection *conn);
extern
void g_tls_connection_set_rehandshake_mode (GTlsConnection *conn,
            GTlsRehandshakeMode mode);
extern
GTlsRehandshakeMode g_tls_connection_get_rehandshake_mode (GTlsConnection *conn);
extern
gboolean g_tls_connection_handshake (GTlsConnection *conn,
            GCancellable *cancellable,
            GError **error);
extern
void g_tls_connection_handshake_async (GTlsConnection *conn,
            int io_priority,
            GCancellable *cancellable,
            GAsyncReadyCallback callback,
            gpointer user_data);
extern
gboolean g_tls_connection_handshake_finish (GTlsConnection *conn,
            GAsyncResult *result,
            GError **error);
extern
GQuark g_tls_error_quark (void);
extern
gboolean g_tls_connection_emit_accept_certificate (GTlsConnection *conn,
            GTlsCertificate *peer_cert,
            GTlsCertificateFlags errors);
typedef struct _GTlsClientConnectionInterface GTlsClientConnectionInterface;
struct _GTlsClientConnectionInterface
{
  GTypeInterface g_iface;
  void ( *copy_session_state ) (GTlsClientConnection *conn,
                                        GTlsClientConnection *source);
};
extern
GType g_tls_client_connection_get_type (void) __attribute__((__const__));
extern
GIOStream * g_tls_client_connection_new (GIOStream *base_io_stream,
            GSocketConnectable *server_identity,
            GError **error);
extern
GTlsCertificateFlags g_tls_client_connection_get_validation_flags (GTlsClientConnection *conn);
extern
void g_tls_client_connection_set_validation_flags (GTlsClientConnection *conn,
            GTlsCertificateFlags flags);
extern
GSocketConnectable *g_tls_client_connection_get_server_identity (GTlsClientConnection *conn);
extern
void g_tls_client_connection_set_server_identity (GTlsClientConnection *conn,
            GSocketConnectable *identity);
extern
gboolean g_tls_client_connection_get_use_ssl3 (GTlsClientConnection *conn);
extern
void g_tls_client_connection_set_use_ssl3 (GTlsClientConnection *conn,
            gboolean use_ssl3);
extern
GList * g_tls_client_connection_get_accepted_cas (GTlsClientConnection *conn);
extern
void g_tls_client_connection_copy_session_state (GTlsClientConnection *conn,
                                                                    GTlsClientConnection *source);
typedef struct _GTlsDatabaseClass GTlsDatabaseClass;
typedef struct _GTlsDatabasePrivate GTlsDatabasePrivate;
struct _GTlsDatabase
{
  GObject parent_instance;
  GTlsDatabasePrivate *priv;
};
struct _GTlsDatabaseClass
{
  GObjectClass parent_class;
  GTlsCertificateFlags (*verify_chain) (GTlsDatabase *self,
                                                                 GTlsCertificate *chain,
                                                                 const gchar *purpose,
                                                                 GSocketConnectable *identity,
                                                                 GTlsInteraction *interaction,
                                                                 GTlsDatabaseVerifyFlags flags,
                                                                 GCancellable *cancellable,
                                                                 GError **error);
  void (*verify_chain_async) (GTlsDatabase *self,
                                                                 GTlsCertificate *chain,
                                                                 const gchar *purpose,
                                                                 GSocketConnectable *identity,
                                                                 GTlsInteraction *interaction,
                                                                 GTlsDatabaseVerifyFlags flags,
                                                                 GCancellable *cancellable,
                                                                 GAsyncReadyCallback callback,
                                                                 gpointer user_data);
  GTlsCertificateFlags (*verify_chain_finish) (GTlsDatabase *self,
                                                                 GAsyncResult *result,
                                                                 GError **error);
  gchar* (*create_certificate_handle) (GTlsDatabase *self,
                                                                 GTlsCertificate *certificate);
  GTlsCertificate* (*lookup_certificate_for_handle) (GTlsDatabase *self,
                                                                 const gchar *handle,
                                                                 GTlsInteraction *interaction,
                                                                 GTlsDatabaseLookupFlags flags,
                                                                 GCancellable *cancellable,
                                                                 GError **error);
  void (*lookup_certificate_for_handle_async) (GTlsDatabase *self,
                                                                 const gchar *handle,
                                                                 GTlsInteraction *interaction,
                                                                 GTlsDatabaseLookupFlags flags,
                                                                 GCancellable *cancellable,
                                                                 GAsyncReadyCallback callback,
                                                                 gpointer user_data);
  GTlsCertificate* (*lookup_certificate_for_handle_finish) (GTlsDatabase *self,
                                                                 GAsyncResult *result,
                                                                 GError **error);
  GTlsCertificate* (*lookup_certificate_issuer) (GTlsDatabase *self,
                                                                 GTlsCertificate *certificate,
                                                                 GTlsInteraction *interaction,
                                                                 GTlsDatabaseLookupFlags flags,
                                                                 GCancellable *cancellable,
                                                                 GError **error);
  void (*lookup_certificate_issuer_async) (GTlsDatabase *self,
                                                                 GTlsCertificate *certificate,
                                                                 GTlsInteraction *interaction,
                                                                 GTlsDatabaseLookupFlags flags,
                                                                 GCancellable *cancellable,
                                                                 GAsyncReadyCallback callback,
                                                                 gpointer user_data);
  GTlsCertificate* (*lookup_certificate_issuer_finish) (GTlsDatabase *self,
                                                                 GAsyncResult *result,
                                                                 GError **error);
  GList* (*lookup_certificates_issued_by) (GTlsDatabase *self,
                                                                 GByteArray *issuer_raw_dn,
                                                                 GTlsInteraction *interaction,
                                                                 GTlsDatabaseLookupFlags flags,
                                                                 GCancellable *cancellable,
                                                                 GError **error);
  void (*lookup_certificates_issued_by_async) (GTlsDatabase *self,
                                                                 GByteArray *issuer_raw_dn,
                                                                 GTlsInteraction *interaction,
                                                                 GTlsDatabaseLookupFlags flags,
                                                                 GCancellable *cancellable,
                                                                 GAsyncReadyCallback callback,
                                                                 gpointer user_data);
  GList* (*lookup_certificates_issued_by_finish) (GTlsDatabase *self,
                                                                 GAsyncResult *result,
                                                                 GError **error);
  gpointer padding[16];
};
extern
GType g_tls_database_get_type (void) __attribute__((__const__));
extern
GTlsCertificateFlags g_tls_database_verify_chain (GTlsDatabase *self,
                                                                           GTlsCertificate *chain,
                                                                           const gchar *purpose,
                                                                           GSocketConnectable *identity,
                                                                           GTlsInteraction *interaction,
                                                                           GTlsDatabaseVerifyFlags flags,
                                                                           GCancellable *cancellable,
                                                                           GError **error);
extern
void g_tls_database_verify_chain_async (GTlsDatabase *self,
                                                                           GTlsCertificate *chain,
                                                                           const gchar *purpose,
                                                                           GSocketConnectable *identity,
                                                                           GTlsInteraction *interaction,
                                                                           GTlsDatabaseVerifyFlags flags,
                                                                           GCancellable *cancellable,
                                                                           GAsyncReadyCallback callback,
                                                                           gpointer user_data);
extern
GTlsCertificateFlags g_tls_database_verify_chain_finish (GTlsDatabase *self,
                                                                           GAsyncResult *result,
                                                                           GError **error);
extern
gchar* g_tls_database_create_certificate_handle (GTlsDatabase *self,
                                                                           GTlsCertificate *certificate);
extern
GTlsCertificate* g_tls_database_lookup_certificate_for_handle (GTlsDatabase *self,
                                                                           const gchar *handle,
                                                                           GTlsInteraction *interaction,
                                                                           GTlsDatabaseLookupFlags flags,
                                                                           GCancellable *cancellable,
                                                                           GError **error);
extern
void g_tls_database_lookup_certificate_for_handle_async (GTlsDatabase *self,
                                                                           const gchar *handle,
                                                                           GTlsInteraction *interaction,
                                                                           GTlsDatabaseLookupFlags flags,
                                                                           GCancellable *cancellable,
                                                                           GAsyncReadyCallback callback,
                                                                           gpointer user_data);
extern
GTlsCertificate* g_tls_database_lookup_certificate_for_handle_finish (GTlsDatabase *self,
                                                                           GAsyncResult *result,
                                                                           GError **error);
extern
GTlsCertificate* g_tls_database_lookup_certificate_issuer (GTlsDatabase *self,
                                                                           GTlsCertificate *certificate,
                                                                           GTlsInteraction *interaction,
                                                                           GTlsDatabaseLookupFlags flags,
                                                                           GCancellable *cancellable,
                                                                           GError **error);
extern
void g_tls_database_lookup_certificate_issuer_async (GTlsDatabase *self,
                                                                           GTlsCertificate *certificate,
                                                                           GTlsInteraction *interaction,
                                                                           GTlsDatabaseLookupFlags flags,
                                                                           GCancellable *cancellable,
                                                                           GAsyncReadyCallback callback,
                                                                           gpointer user_data);
extern
GTlsCertificate* g_tls_database_lookup_certificate_issuer_finish (GTlsDatabase *self,
                                                                           GAsyncResult *result,
                                                                           GError **error);
extern
GList* g_tls_database_lookup_certificates_issued_by (GTlsDatabase *self,
                                                                           GByteArray *issuer_raw_dn,
                                                                           GTlsInteraction *interaction,
                                                                           GTlsDatabaseLookupFlags flags,
                                                                           GCancellable *cancellable,
                                                                           GError **error);
extern
void g_tls_database_lookup_certificates_issued_by_async (GTlsDatabase *self,
                                                                            GByteArray *issuer_raw_dn,
                                                                            GTlsInteraction *interaction,
                                                                            GTlsDatabaseLookupFlags flags,
                                                                            GCancellable *cancellable,
                                                                            GAsyncReadyCallback callback,
                                                                            gpointer user_data);
extern
GList* g_tls_database_lookup_certificates_issued_by_finish (GTlsDatabase *self,
                                                                            GAsyncResult *result,
                                                                            GError **error);
typedef struct _GTlsFileDatabaseInterface GTlsFileDatabaseInterface;
struct _GTlsFileDatabaseInterface
{
  GTypeInterface g_iface;
  gpointer padding[8];
};
extern
GType g_tls_file_database_get_type (void) __attribute__((__const__));
extern
GTlsDatabase* g_tls_file_database_new (const gchar *anchors,
                                                                        GError **error);
typedef struct _GTlsInteractionClass GTlsInteractionClass;
typedef struct _GTlsInteractionPrivate GTlsInteractionPrivate;
struct _GTlsInteraction
{
  GObject parent_instance;
  GTlsInteractionPrivate *priv;
};
struct _GTlsInteractionClass
{
  GObjectClass parent_class;
  GTlsInteractionResult (* ask_password) (GTlsInteraction *interaction,
                                                  GTlsPassword *password,
                                                  GCancellable *cancellable,
                                                  GError **error);
  void (* ask_password_async) (GTlsInteraction *interaction,
                                                  GTlsPassword *password,
                                                  GCancellable *cancellable,
                                                  GAsyncReadyCallback callback,
                                                  gpointer user_data);
  GTlsInteractionResult (* ask_password_finish) (GTlsInteraction *interaction,
                                                  GAsyncResult *result,
                                                  GError **error);
  GTlsInteractionResult (* request_certificate) (GTlsInteraction *interaction,
                                                         GTlsConnection *connection,
                                                         GTlsCertificateRequestFlags flags,
                                                         GCancellable *cancellable,
                                                         GError **error);
  void (* request_certificate_async) (GTlsInteraction *interaction,
                                                         GTlsConnection *connection,
                                                         GTlsCertificateRequestFlags flags,
                                                         GCancellable *cancellable,
                                                         GAsyncReadyCallback callback,
                                                         gpointer user_data);
  GTlsInteractionResult (* request_certificate_finish) (GTlsInteraction *interaction,
                                                         GAsyncResult *result,
                                                         GError **error);
  gpointer padding[21];
};
extern
GType g_tls_interaction_get_type (void) __attribute__((__const__));
extern
GTlsInteractionResult g_tls_interaction_invoke_ask_password (GTlsInteraction *interaction,
                                                              GTlsPassword *password,
                                                              GCancellable *cancellable,
                                                              GError **error);
extern
GTlsInteractionResult g_tls_interaction_ask_password (GTlsInteraction *interaction,
                                                              GTlsPassword *password,
                                                              GCancellable *cancellable,
                                                              GError **error);
extern
void g_tls_interaction_ask_password_async (GTlsInteraction *interaction,
                                                              GTlsPassword *password,
                                                              GCancellable *cancellable,
                                                              GAsyncReadyCallback callback,
                                                              gpointer user_data);
extern
GTlsInteractionResult g_tls_interaction_ask_password_finish (GTlsInteraction *interaction,
                                                              GAsyncResult *result,
                                                              GError **error);
extern
GTlsInteractionResult g_tls_interaction_invoke_request_certificate (GTlsInteraction *interaction,
                                                                     GTlsConnection *connection,
                                                                     GTlsCertificateRequestFlags flags,
                                                                     GCancellable *cancellable,
                                                                     GError **error);
extern
GTlsInteractionResult g_tls_interaction_request_certificate (GTlsInteraction *interaction,
                                                                     GTlsConnection *connection,
                                                                     GTlsCertificateRequestFlags flags,
                                                                     GCancellable *cancellable,
                                                                     GError **error);
extern
void g_tls_interaction_request_certificate_async (GTlsInteraction *interaction,
                                                                     GTlsConnection *connection,
                                                                     GTlsCertificateRequestFlags flags,
                                                                     GCancellable *cancellable,
                                                                     GAsyncReadyCallback callback,
                                                                     gpointer user_data);
extern
GTlsInteractionResult g_tls_interaction_request_certificate_finish (GTlsInteraction *interaction,
                                                                     GAsyncResult *result,
                                                                     GError **error);
typedef struct _GTlsServerConnectionInterface GTlsServerConnectionInterface;
struct _GTlsServerConnectionInterface
{
  GTypeInterface g_iface;
};
extern
GType g_tls_server_connection_get_type (void) __attribute__((__const__));
extern
GIOStream * g_tls_server_connection_new (GIOStream *base_io_stream,
         GTlsCertificate *certificate,
         GError **error);
typedef struct _GTlsPasswordClass GTlsPasswordClass;
typedef struct _GTlsPasswordPrivate GTlsPasswordPrivate;
struct _GTlsPassword
{
  GObject parent_instance;
  GTlsPasswordPrivate *priv;
};
struct _GTlsPasswordClass
{
  GObjectClass parent_class;
  const guchar * ( *get_value) (GTlsPassword *password,
                                              gsize *length);
  void ( *set_value) (GTlsPassword *password,
                                              guchar *value,
                                              gssize length,
                                              GDestroyNotify destroy);
  const gchar* ( *get_default_warning) (GTlsPassword *password);
  gpointer padding[4];
};
extern
GType g_tls_password_get_type (void) __attribute__((__const__));
extern
GTlsPassword * g_tls_password_new (GTlsPasswordFlags flags,
                                                      const gchar *description);
extern
const guchar * g_tls_password_get_value (GTlsPassword *password,
                                                      gsize *length);
extern
void g_tls_password_set_value (GTlsPassword *password,
                                                      const guchar *value,
                                                      gssize length);
extern
void g_tls_password_set_value_full (GTlsPassword *password,
                                                      guchar *value,
                                                      gssize length,
                                                      GDestroyNotify destroy);
extern
GTlsPasswordFlags g_tls_password_get_flags (GTlsPassword *password);
extern
void g_tls_password_set_flags (GTlsPassword *password,
                                                      GTlsPasswordFlags flags);
extern
const gchar* g_tls_password_get_description (GTlsPassword *password);
extern
void g_tls_password_set_description (GTlsPassword *password,
                                                      const gchar *description);
extern
const gchar * g_tls_password_get_warning (GTlsPassword *password);
extern
void g_tls_password_set_warning (GTlsPassword *password,
                                                      const gchar *warning);
typedef struct _GVfsClass GVfsClass;
struct _GVfs
{
  GObject parent_instance;
};
struct _GVfsClass
{
  GObjectClass parent_class;
  gboolean (* is_active) (GVfs *vfs);
  GFile * (* get_file_for_path) (GVfs *vfs,
                                                       const char *path);
  GFile * (* get_file_for_uri) (GVfs *vfs,
                                                       const char *uri);
  const gchar * const * (* get_supported_uri_schemes) (GVfs *vfs);
  GFile * (* parse_name) (GVfs *vfs,
                                                       const char *parse_name);
  void (* local_file_add_info) (GVfs *vfs,
             const char *filename,
             guint64 device,
             GFileAttributeMatcher *attribute_matcher,
             GFileInfo *info,
             GCancellable *cancellable,
             gpointer *extra_data,
             GDestroyNotify *free_extra_data);
  void (* add_writable_namespaces) (GVfs *vfs,
             GFileAttributeInfoList *list);
  gboolean (* local_file_set_attributes) (GVfs *vfs,
             const char *filename,
             GFileInfo *info,
                                                       GFileQueryInfoFlags flags,
                                                       GCancellable *cancellable,
             GError **error);
  void (* local_file_removed) (GVfs *vfs,
             const char *filename);
  void (* local_file_moved) (GVfs *vfs,
             const char *source,
             const char *dest);
  GIcon * (* deserialize_icon) (GVfs *vfs,
                                                       GVariant *value);
  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
  void (*_g_reserved6) (void);
};
extern
GType g_vfs_get_type (void) __attribute__((__const__));
extern
gboolean g_vfs_is_active (GVfs *vfs);
extern
GFile * g_vfs_get_file_for_path (GVfs *vfs,
                                                       const char *path);
extern
GFile * g_vfs_get_file_for_uri (GVfs *vfs,
                                                       const char *uri);
extern
const gchar* const * g_vfs_get_supported_uri_schemes (GVfs *vfs);
extern
GFile * g_vfs_parse_name (GVfs *vfs,
                                                       const char *parse_name);
extern
GVfs * g_vfs_get_default (void);
extern
GVfs * g_vfs_get_local (void);
typedef struct _GVolumeIface GVolumeIface;
struct _GVolumeIface
{
  GTypeInterface g_iface;
  void (* changed) (GVolume *volume);
  void (* removed) (GVolume *volume);
  char * (* get_name) (GVolume *volume);
  GIcon * (* get_icon) (GVolume *volume);
  char * (* get_uuid) (GVolume *volume);
  GDrive * (* get_drive) (GVolume *volume);
  GMount * (* get_mount) (GVolume *volume);
  gboolean (* can_mount) (GVolume *volume);
  gboolean (* can_eject) (GVolume *volume);
  void (* mount_fn) (GVolume *volume,
                                         GMountMountFlags flags,
                                         GMountOperation *mount_operation,
                                         GCancellable *cancellable,
                                         GAsyncReadyCallback callback,
                                         gpointer user_data);
  gboolean (* mount_finish) (GVolume *volume,
                                         GAsyncResult *result,
                                         GError **error);
  void (* eject) (GVolume *volume,
                                         GMountUnmountFlags flags,
                                         GCancellable *cancellable,
                                         GAsyncReadyCallback callback,
                                         gpointer user_data);
  gboolean (* eject_finish) (GVolume *volume,
                                         GAsyncResult *result,
                                         GError **error);
  char * (* get_identifier) (GVolume *volume,
                                         const char *kind);
  char ** (* enumerate_identifiers) (GVolume *volume);
  gboolean (* should_automount) (GVolume *volume);
  GFile * (* get_activation_root) (GVolume *volume);
  void (* eject_with_operation) (GVolume *volume,
                                             GMountUnmountFlags flags,
                                             GMountOperation *mount_operation,
                                             GCancellable *cancellable,
                                             GAsyncReadyCallback callback,
                                             gpointer user_data);
  gboolean (* eject_with_operation_finish) (GVolume *volume,
                                             GAsyncResult *result,
                                             GError **error);
  const gchar * (* get_sort_key) (GVolume *volume);
  GIcon * (* get_symbolic_icon) (GVolume *volume);
};
extern
GType g_volume_get_type (void) __attribute__((__const__));
extern
char * g_volume_get_name (GVolume *volume);
extern
GIcon * g_volume_get_icon (GVolume *volume);
extern
GIcon * g_volume_get_symbolic_icon (GVolume *volume);
extern
char * g_volume_get_uuid (GVolume *volume);
extern
GDrive * g_volume_get_drive (GVolume *volume);
extern
GMount * g_volume_get_mount (GVolume *volume);
extern
gboolean g_volume_can_mount (GVolume *volume);
extern
gboolean g_volume_can_eject (GVolume *volume);
extern
gboolean g_volume_should_automount (GVolume *volume);
extern
void g_volume_mount (GVolume *volume,
      GMountMountFlags flags,
      GMountOperation *mount_operation,
      GCancellable *cancellable,
      GAsyncReadyCallback callback,
      gpointer user_data);
extern
gboolean g_volume_mount_finish (GVolume *volume,
      GAsyncResult *result,
      GError **error);
extern
void g_volume_eject (GVolume *volume,
                                         GMountUnmountFlags flags,
                                         GCancellable *cancellable,
                                         GAsyncReadyCallback callback,
                                         gpointer user_data);
extern
gboolean g_volume_eject_finish (GVolume *volume,
                                         GAsyncResult *result,
                                         GError **error);
extern
char * g_volume_get_identifier (GVolume *volume,
      const char *kind);
extern
char ** g_volume_enumerate_identifiers (GVolume *volume);
extern
GFile * g_volume_get_activation_root (GVolume *volume);
extern
void g_volume_eject_with_operation (GVolume *volume,
                                               GMountUnmountFlags flags,
                                               GMountOperation *mount_operation,
                                               GCancellable *cancellable,
                                               GAsyncReadyCallback callback,
                                               gpointer user_data);
extern
gboolean g_volume_eject_with_operation_finish (GVolume *volume,
                                               GAsyncResult *result,
                                               GError **error);
extern
const gchar *g_volume_get_sort_key (GVolume *volume);
typedef struct _GZlibCompressorClass GZlibCompressorClass;
struct _GZlibCompressorClass
{
  GObjectClass parent_class;
};
extern
GType g_zlib_compressor_get_type (void) __attribute__((__const__));
extern
GZlibCompressor *g_zlib_compressor_new (GZlibCompressorFormat format,
     int level);
extern
GFileInfo *g_zlib_compressor_get_file_info (GZlibCompressor *compressor);
extern
void g_zlib_compressor_set_file_info (GZlibCompressor *compressor,
                                                  GFileInfo *file_info);
typedef struct _GZlibDecompressorClass GZlibDecompressorClass;
struct _GZlibDecompressorClass
{
  GObjectClass parent_class;
};
extern
GType g_zlib_decompressor_get_type (void) __attribute__((__const__));
extern
GZlibDecompressor *g_zlib_decompressor_new (GZlibCompressorFormat format);
extern
GFileInfo *g_zlib_decompressor_get_file_info (GZlibDecompressor *decompressor);
typedef struct _GDBusInterfaceIface GDBusInterfaceIface;
struct _GDBusInterfaceIface
{
  GTypeInterface parent_iface;
  GDBusInterfaceInfo *(*get_info) (GDBusInterface *interface_);
  GDBusObject *(*get_object) (GDBusInterface *interface_);
  void (*set_object) (GDBusInterface *interface_,
                                       GDBusObject *object);
  GDBusObject *(*dup_object) (GDBusInterface *interface_);
};
extern
GType g_dbus_interface_get_type (void) __attribute__((__const__));
extern
GDBusInterfaceInfo *g_dbus_interface_get_info (GDBusInterface *interface_);
extern
GDBusObject *g_dbus_interface_get_object (GDBusInterface *interface_);
extern
void g_dbus_interface_set_object (GDBusInterface *interface_,
                                                         GDBusObject *object);
extern
GDBusObject *g_dbus_interface_dup_object (GDBusInterface *interface_);
typedef struct _GDBusInterfaceSkeletonClass GDBusInterfaceSkeletonClass;
typedef struct _GDBusInterfaceSkeletonPrivate GDBusInterfaceSkeletonPrivate;
struct _GDBusInterfaceSkeleton
{
  GObject parent_instance;
  GDBusInterfaceSkeletonPrivate *priv;
};
struct _GDBusInterfaceSkeletonClass
{
  GObjectClass parent_class;
  GDBusInterfaceInfo *(*get_info) (GDBusInterfaceSkeleton *interface_);
  GDBusInterfaceVTable *(*get_vtable) (GDBusInterfaceSkeleton *interface_);
  GVariant *(*get_properties) (GDBusInterfaceSkeleton *interface_);
  void (*flush) (GDBusInterfaceSkeleton *interface_);
  gpointer vfunc_padding[8];
  gboolean (*g_authorize_method) (GDBusInterfaceSkeleton *interface_,
                                  GDBusMethodInvocation *invocation);
  gpointer signal_padding[8];
};
extern
GType g_dbus_interface_skeleton_get_type (void) __attribute__((__const__));
extern
GDBusInterfaceSkeletonFlags g_dbus_interface_skeleton_get_flags (GDBusInterfaceSkeleton *interface_);
extern
void g_dbus_interface_skeleton_set_flags (GDBusInterfaceSkeleton *interface_,
                                                                        GDBusInterfaceSkeletonFlags flags);
extern
GDBusInterfaceInfo *g_dbus_interface_skeleton_get_info (GDBusInterfaceSkeleton *interface_);
extern
GDBusInterfaceVTable *g_dbus_interface_skeleton_get_vtable (GDBusInterfaceSkeleton *interface_);
extern
GVariant *g_dbus_interface_skeleton_get_properties (GDBusInterfaceSkeleton *interface_);
extern
void g_dbus_interface_skeleton_flush (GDBusInterfaceSkeleton *interface_);
extern
gboolean g_dbus_interface_skeleton_export (GDBusInterfaceSkeleton *interface_,
                                                                        GDBusConnection *connection,
                                                                        const gchar *object_path,
                                                                        GError **error);
extern
void g_dbus_interface_skeleton_unexport (GDBusInterfaceSkeleton *interface_);
extern
void g_dbus_interface_skeleton_unexport_from_connection (GDBusInterfaceSkeleton *interface_,
                                                                        GDBusConnection *connection);
extern
GDBusConnection *g_dbus_interface_skeleton_get_connection (GDBusInterfaceSkeleton *interface_);
extern
GList *g_dbus_interface_skeleton_get_connections (GDBusInterfaceSkeleton *interface_);
extern
gboolean g_dbus_interface_skeleton_has_connection (GDBusInterfaceSkeleton *interface_,
                                                                        GDBusConnection *connection);
extern
const gchar *g_dbus_interface_skeleton_get_object_path (GDBusInterfaceSkeleton *interface_);
typedef struct _GDBusObjectIface GDBusObjectIface;
struct _GDBusObjectIface
{
  GTypeInterface parent_iface;
  const gchar *(*get_object_path) (GDBusObject *object);
  GList *(*get_interfaces) (GDBusObject *object);
  GDBusInterface *(*get_interface) (GDBusObject *object,
                                       const gchar *interface_name);
  void (*interface_added) (GDBusObject *object,
                             GDBusInterface *interface_);
  void (*interface_removed) (GDBusObject *object,
                             GDBusInterface *interface_);
};
extern
GType g_dbus_object_get_type (void) __attribute__((__const__));
extern
const gchar *g_dbus_object_get_object_path (GDBusObject *object);
extern
GList *g_dbus_object_get_interfaces (GDBusObject *object);
extern
GDBusInterface *g_dbus_object_get_interface (GDBusObject *object,
                                                const gchar *interface_name);
typedef struct _GDBusObjectSkeletonClass GDBusObjectSkeletonClass;
typedef struct _GDBusObjectSkeletonPrivate GDBusObjectSkeletonPrivate;
struct _GDBusObjectSkeleton
{
  GObject parent_instance;
  GDBusObjectSkeletonPrivate *priv;
};
struct _GDBusObjectSkeletonClass
{
  GObjectClass parent_class;
  gboolean (*authorize_method) (GDBusObjectSkeleton *object,
                                GDBusInterfaceSkeleton *interface_,
                                GDBusMethodInvocation *invocation);
  gpointer padding[8];
};
extern
GType g_dbus_object_skeleton_get_type (void) __attribute__((__const__));
extern
GDBusObjectSkeleton *g_dbus_object_skeleton_new (const gchar *object_path);
extern
void g_dbus_object_skeleton_flush (GDBusObjectSkeleton *object);
extern
void g_dbus_object_skeleton_add_interface (GDBusObjectSkeleton *object,
                                                                       GDBusInterfaceSkeleton *interface_);
extern
void g_dbus_object_skeleton_remove_interface (GDBusObjectSkeleton *object,
                                                                       GDBusInterfaceSkeleton *interface_);
extern
void g_dbus_object_skeleton_remove_interface_by_name (GDBusObjectSkeleton *object,
                                                                       const gchar *interface_name);
extern
void g_dbus_object_skeleton_set_object_path (GDBusObjectSkeleton *object,
                                                                       const gchar *object_path);
typedef struct _GDBusObjectProxyClass GDBusObjectProxyClass;
typedef struct _GDBusObjectProxyPrivate GDBusObjectProxyPrivate;
struct _GDBusObjectProxy
{
  GObject parent_instance;
  GDBusObjectProxyPrivate *priv;
};
struct _GDBusObjectProxyClass
{
  GObjectClass parent_class;
  gpointer padding[8];
};
extern
GType g_dbus_object_proxy_get_type (void) __attribute__((__const__));
extern
GDBusObjectProxy *g_dbus_object_proxy_new (GDBusConnection *connection,
                                                      const gchar *object_path);
extern
GDBusConnection *g_dbus_object_proxy_get_connection (GDBusObjectProxy *proxy);
typedef struct _GDBusObjectManagerIface GDBusObjectManagerIface;
struct _GDBusObjectManagerIface
{
  GTypeInterface parent_iface;
  const gchar *(*get_object_path) (GDBusObjectManager *manager);
  GList *(*get_objects) (GDBusObjectManager *manager);
  GDBusObject *(*get_object) (GDBusObjectManager *manager,
                                       const gchar *object_path);
  GDBusInterface *(*get_interface) (GDBusObjectManager *manager,
                                       const gchar *object_path,
                                       const gchar *interface_name);
  void (*object_added) (GDBusObjectManager *manager,
                                           GDBusObject *object);
  void (*object_removed) (GDBusObjectManager *manager,
                                           GDBusObject *object);
  void (*interface_added) (GDBusObjectManager *manager,
                                           GDBusObject *object,
                                           GDBusInterface *interface_);
  void (*interface_removed) (GDBusObjectManager *manager,
                                           GDBusObject *object,
                                           GDBusInterface *interface_);
};
extern
GType g_dbus_object_manager_get_type (void) __attribute__((__const__));
extern
const gchar *g_dbus_object_manager_get_object_path (GDBusObjectManager *manager);
extern
GList *g_dbus_object_manager_get_objects (GDBusObjectManager *manager);
extern
GDBusObject *g_dbus_object_manager_get_object (GDBusObjectManager *manager,
                                                        const gchar *object_path);
extern
GDBusInterface *g_dbus_object_manager_get_interface (GDBusObjectManager *manager,
                                                        const gchar *object_path,
                                                        const gchar *interface_name);
typedef struct _GDBusObjectManagerClientClass GDBusObjectManagerClientClass;
typedef struct _GDBusObjectManagerClientPrivate GDBusObjectManagerClientPrivate;
struct _GDBusObjectManagerClient
{
  GObject parent_instance;
  GDBusObjectManagerClientPrivate *priv;
};
struct _GDBusObjectManagerClientClass
{
  GObjectClass parent_class;
  void (*interface_proxy_signal) (GDBusObjectManagerClient *manager,
                                                 GDBusObjectProxy *object_proxy,
                                                 GDBusProxy *interface_proxy,
                                                 const gchar *sender_name,
                                                 const gchar *signal_name,
                                                 GVariant *parameters);
  void (*interface_proxy_properties_changed) (GDBusObjectManagerClient *manager,
                                                 GDBusObjectProxy *object_proxy,
                                                 GDBusProxy *interface_proxy,
                                                 GVariant *changed_properties,
                                                 const gchar* const *invalidated_properties);
  gpointer padding[8];
};
extern
GType g_dbus_object_manager_client_get_type (void) __attribute__((__const__));
extern
void g_dbus_object_manager_client_new (GDBusConnection *connection,
                                                                               GDBusObjectManagerClientFlags flags,
                                                                               const gchar *name,
                                                                               const gchar *object_path,
                                                                               GDBusProxyTypeFunc get_proxy_type_func,
                                                                               gpointer get_proxy_type_user_data,
                                                                               GDestroyNotify get_proxy_type_destroy_notify,
                                                                               GCancellable *cancellable,
                                                                               GAsyncReadyCallback callback,
                                                                               gpointer user_data);
extern
GDBusObjectManager *g_dbus_object_manager_client_new_finish (GAsyncResult *res,
                                                                               GError **error);
extern
GDBusObjectManager *g_dbus_object_manager_client_new_sync (GDBusConnection *connection,
                                                                               GDBusObjectManagerClientFlags flags,
                                                                               const gchar *name,
                                                                               const gchar *object_path,
                                                                               GDBusProxyTypeFunc get_proxy_type_func,
                                                                               gpointer get_proxy_type_user_data,
                                                                               GDestroyNotify get_proxy_type_destroy_notify,
                                                                               GCancellable *cancellable,
                                                                               GError **error);
extern
void g_dbus_object_manager_client_new_for_bus (GBusType bus_type,
                                                                               GDBusObjectManagerClientFlags flags,
                                                                               const gchar *name,
                                                                               const gchar *object_path,
                                                                               GDBusProxyTypeFunc get_proxy_type_func,
                                                                               gpointer get_proxy_type_user_data,
                                                                               GDestroyNotify get_proxy_type_destroy_notify,
                                                                               GCancellable *cancellable,
                                                                               GAsyncReadyCallback callback,
                                                                               gpointer user_data);
extern
GDBusObjectManager *g_dbus_object_manager_client_new_for_bus_finish (GAsyncResult *res,
                                                                               GError **error);
extern
GDBusObjectManager *g_dbus_object_manager_client_new_for_bus_sync (GBusType bus_type,
                                                                               GDBusObjectManagerClientFlags flags,
                                                                               const gchar *name,
                                                                               const gchar *object_path,
                                                                               GDBusProxyTypeFunc get_proxy_type_func,
                                                                               gpointer get_proxy_type_user_data,
                                                                               GDestroyNotify get_proxy_type_destroy_notify,
                                                                               GCancellable *cancellable,
                                                                               GError **error);
extern
GDBusConnection *g_dbus_object_manager_client_get_connection (GDBusObjectManagerClient *manager);
extern
GDBusObjectManagerClientFlags g_dbus_object_manager_client_get_flags (GDBusObjectManagerClient *manager);
extern
const gchar *g_dbus_object_manager_client_get_name (GDBusObjectManagerClient *manager);
extern
gchar *g_dbus_object_manager_client_get_name_owner (GDBusObjectManagerClient *manager);
typedef struct _GDBusObjectManagerServerClass GDBusObjectManagerServerClass;
typedef struct _GDBusObjectManagerServerPrivate GDBusObjectManagerServerPrivate;
struct _GDBusObjectManagerServer
{
  GObject parent_instance;
  GDBusObjectManagerServerPrivate *priv;
};
struct _GDBusObjectManagerServerClass
{
  GObjectClass parent_class;
  gpointer padding[8];
};
extern
GType g_dbus_object_manager_server_get_type (void) __attribute__((__const__));
extern
GDBusObjectManagerServer *g_dbus_object_manager_server_new (const gchar *object_path);
extern
GDBusConnection *g_dbus_object_manager_server_get_connection (GDBusObjectManagerServer *manager);
extern
void g_dbus_object_manager_server_set_connection (GDBusObjectManagerServer *manager,
                                                                            GDBusConnection *connection);
extern
void g_dbus_object_manager_server_export (GDBusObjectManagerServer *manager,
                                                                            GDBusObjectSkeleton *object);
extern
void g_dbus_object_manager_server_export_uniquely (GDBusObjectManagerServer *manager,
                                                                            GDBusObjectSkeleton *object);
extern
gboolean g_dbus_object_manager_server_is_exported (GDBusObjectManagerServer *manager,
                                                                            GDBusObjectSkeleton *object);
extern
gboolean g_dbus_object_manager_server_unexport (GDBusObjectManagerServer *manager,
                                                                            const gchar *object_path);
extern
GType g_dbus_action_group_get_type (void) __attribute__((__const__));
extern
GDBusActionGroup * g_dbus_action_group_get (GDBusConnection *connection,
                                                                       const gchar *bus_name,
                                                                       const gchar *object_path);
typedef struct _GRemoteActionGroupInterface GRemoteActionGroupInterface;
struct _GRemoteActionGroupInterface
{
  GTypeInterface g_iface;
  void (* activate_action_full) (GRemoteActionGroup *remote,
                                     const gchar *action_name,
                                     GVariant *parameter,
                                     GVariant *platform_data);
  void (* change_action_state_full) (GRemoteActionGroup *remote,
                                     const gchar *action_name,
                                     GVariant *value,
                                     GVariant *platform_data);
};
extern
GType g_remote_action_group_get_type (void) __attribute__((__const__));
extern
void g_remote_action_group_activate_action_full (GRemoteActionGroup *remote,
                                                                         const gchar *action_name,
                                                                         GVariant *parameter,
                                                                         GVariant *platform_data);
extern
void g_remote_action_group_change_action_state_full (GRemoteActionGroup *remote,
                                                                         const gchar *action_name,
                                                                         GVariant *value,
                                                                         GVariant *platform_data);
typedef struct _GMenuModelPrivate GMenuModelPrivate;
typedef struct _GMenuModelClass GMenuModelClass;
typedef struct _GMenuAttributeIterPrivate GMenuAttributeIterPrivate;
typedef struct _GMenuAttributeIterClass GMenuAttributeIterClass;
typedef struct _GMenuAttributeIter GMenuAttributeIter;
typedef struct _GMenuLinkIterPrivate GMenuLinkIterPrivate;
typedef struct _GMenuLinkIterClass GMenuLinkIterClass;
typedef struct _GMenuLinkIter GMenuLinkIter;
struct _GMenuModel
{
  GObject parent_instance;
  GMenuModelPrivate *priv;
};
struct _GMenuModelClass
{
  GObjectClass parent_class;
  gboolean (*is_mutable) (GMenuModel *model);
  gint (*get_n_items) (GMenuModel *model);
  void (*get_item_attributes) (GMenuModel *model,
                                                             gint item_index,
                                                             GHashTable **attributes);
  GMenuAttributeIter * (*iterate_item_attributes) (GMenuModel *model,
                                                             gint item_index);
  GVariant * (*get_item_attribute_value) (GMenuModel *model,
                                                             gint item_index,
                                                             const gchar *attribute,
                                                             const GVariantType *expected_type);
  void (*get_item_links) (GMenuModel *model,
                                                             gint item_index,
                                                             GHashTable **links);
  GMenuLinkIter * (*iterate_item_links) (GMenuModel *model,
                                                             gint item_index);
  GMenuModel * (*get_item_link) (GMenuModel *model,
                                                             gint item_index,
                                                             const gchar *link);
};
extern
GType g_menu_model_get_type (void) __attribute__((__const__));
extern
gboolean g_menu_model_is_mutable (GMenuModel *model);
extern
gint g_menu_model_get_n_items (GMenuModel *model);
extern
GMenuAttributeIter * g_menu_model_iterate_item_attributes (GMenuModel *model,
                                                                         gint item_index);
extern
GVariant * g_menu_model_get_item_attribute_value (GMenuModel *model,
                                                                         gint item_index,
                                                                         const gchar *attribute,
                                                                         const GVariantType *expected_type);
extern
gboolean g_menu_model_get_item_attribute (GMenuModel *model,
                                                                         gint item_index,
                                                                         const gchar *attribute,
                                                                         const gchar *format_string,
                                                                         ...);
extern
GMenuLinkIter * g_menu_model_iterate_item_links (GMenuModel *model,
                                                                         gint item_index);
extern
GMenuModel * g_menu_model_get_item_link (GMenuModel *model,
                                                                         gint item_index,
                                                                         const gchar *link);
extern
void g_menu_model_items_changed (GMenuModel *model,
                                                                         gint position,
                                                                         gint removed,
                                                                         gint added);
struct _GMenuAttributeIter
{
  GObject parent_instance;
  GMenuAttributeIterPrivate *priv;
};
struct _GMenuAttributeIterClass
{
  GObjectClass parent_class;
  gboolean (*get_next) (GMenuAttributeIter *iter,
                             const gchar **out_name,
                             GVariant **value);
};
extern
GType g_menu_attribute_iter_get_type (void) __attribute__((__const__));
extern
gboolean g_menu_attribute_iter_get_next (GMenuAttributeIter *iter,
                                                                         const gchar **out_name,
                                                                         GVariant **value);
extern
gboolean g_menu_attribute_iter_next (GMenuAttributeIter *iter);
extern
const gchar * g_menu_attribute_iter_get_name (GMenuAttributeIter *iter);
extern
GVariant * g_menu_attribute_iter_get_value (GMenuAttributeIter *iter);
struct _GMenuLinkIter
{
  GObject parent_instance;
  GMenuLinkIterPrivate *priv;
};
struct _GMenuLinkIterClass
{
  GObjectClass parent_class;
  gboolean (*get_next) (GMenuLinkIter *iter,
                             const gchar **out_link,
                             GMenuModel **value);
};
extern
GType g_menu_link_iter_get_type (void) __attribute__((__const__));
extern
gboolean g_menu_link_iter_get_next (GMenuLinkIter *iter,
                                                                         const gchar **out_link,
                                                                         GMenuModel **value);
extern
gboolean g_menu_link_iter_next (GMenuLinkIter *iter);
extern
const gchar * g_menu_link_iter_get_name (GMenuLinkIter *iter);
extern
GMenuModel * g_menu_link_iter_get_value (GMenuLinkIter *iter);
typedef struct _GMenuItem GMenuItem;
typedef struct _GMenu GMenu;
extern
GType g_menu_get_type (void) __attribute__((__const__));
extern
GMenu * g_menu_new (void);
extern
void g_menu_freeze (GMenu *menu);
extern
void g_menu_insert_item (GMenu *menu,
                                                     gint position,
                                                     GMenuItem *item);
extern
void g_menu_prepend_item (GMenu *menu,
                                                     GMenuItem *item);
extern
void g_menu_append_item (GMenu *menu,
                                                     GMenuItem *item);
extern
void g_menu_remove (GMenu *menu,
                                                     gint position);
extern
void g_menu_remove_all (GMenu *menu);
extern
void g_menu_insert (GMenu *menu,
                                                     gint position,
                                                     const gchar *label,
                                                     const gchar *detailed_action);
extern
void g_menu_prepend (GMenu *menu,
                                                     const gchar *label,
                                                     const gchar *detailed_action);
extern
void g_menu_append (GMenu *menu,
                                                     const gchar *label,
                                                     const gchar *detailed_action);
extern
void g_menu_insert_section (GMenu *menu,
                                                     gint position,
                                                     const gchar *label,
                                                     GMenuModel *section);
extern
void g_menu_prepend_section (GMenu *menu,
                                                     const gchar *label,
                                                     GMenuModel *section);
extern
void g_menu_append_section (GMenu *menu,
                                                     const gchar *label,
                                                     GMenuModel *section);
extern
void g_menu_insert_submenu (GMenu *menu,
                                                     gint position,
                                                     const gchar *label,
                                                     GMenuModel *submenu);
extern
void g_menu_prepend_submenu (GMenu *menu,
                                                     const gchar *label,
                                                     GMenuModel *submenu);
extern
void g_menu_append_submenu (GMenu *menu,
                                                     const gchar *label,
                                                     GMenuModel *submenu);
extern
GType g_menu_item_get_type (void) __attribute__((__const__));
extern
GMenuItem * g_menu_item_new (const gchar *label,
                                                     const gchar *detailed_action);
extern
GMenuItem * g_menu_item_new_from_model (GMenuModel *model,
                                                     gint item_index);
extern
GMenuItem * g_menu_item_new_submenu (const gchar *label,
                                                     GMenuModel *submenu);
extern
GMenuItem * g_menu_item_new_section (const gchar *label,
                                                     GMenuModel *section);
extern
GVariant * g_menu_item_get_attribute_value (GMenuItem *menu_item,
                                                     const gchar *attribute,
                                                     const GVariantType *expected_type);
extern
gboolean g_menu_item_get_attribute (GMenuItem *menu_item,
                                                     const gchar *attribute,
                                                     const gchar *format_string,
                                                     ...);
extern
GMenuModel *g_menu_item_get_link (GMenuItem *menu_item,
                                                     const gchar *link);
extern
void g_menu_item_set_attribute_value (GMenuItem *menu_item,
                                                     const gchar *attribute,
                                                     GVariant *value);
extern
void g_menu_item_set_attribute (GMenuItem *menu_item,
                                                     const gchar *attribute,
                                                     const gchar *format_string,
                                                     ...);
extern
void g_menu_item_set_link (GMenuItem *menu_item,
                                                     const gchar *link,
                                                     GMenuModel *model);
extern
void g_menu_item_set_label (GMenuItem *menu_item,
                                                     const gchar *label);
extern
void g_menu_item_set_submenu (GMenuItem *menu_item,
                                                     GMenuModel *submenu);
extern
void g_menu_item_set_section (GMenuItem *menu_item,
                                                     GMenuModel *section);
extern
void g_menu_item_set_action_and_target_value (GMenuItem *menu_item,
                                                     const gchar *action,
                                                     GVariant *target_value);
extern
void g_menu_item_set_action_and_target (GMenuItem *menu_item,
                                                     const gchar *action,
                                                     const gchar *format_string,
                                                     ...);
extern
void g_menu_item_set_detailed_action (GMenuItem *menu_item,
                                                     const gchar *detailed_action);
extern
void g_menu_item_set_icon (GMenuItem *menu_item,
                                                     GIcon *icon);
extern
guint g_dbus_connection_export_menu_model (GDBusConnection *connection,
                                                                         const gchar *object_path,
                                                                         GMenuModel *menu,
                                                                         GError **error);
extern
void g_dbus_connection_unexport_menu_model (GDBusConnection *connection,
                                                                         guint export_id);
typedef struct _GDBusMenuModel GDBusMenuModel;
extern
GType g_dbus_menu_model_get_type (void) __attribute__((__const__));
extern
GDBusMenuModel * g_dbus_menu_model_get (GDBusConnection *connection,
                                                        const gchar *bus_name,
                                                        const gchar *object_path);
extern
GType g_notification_get_type (void) __attribute__((__const__));
extern
GNotification * g_notification_new (const gchar *title);
extern
void g_notification_set_title (GNotification *notification,
                                                                         const gchar *title);
extern
void g_notification_set_body (GNotification *notification,
                                                                         const gchar *body);
extern
void g_notification_set_icon (GNotification *notification,
                                                                         GIcon *icon);
extern
void g_notification_set_urgent (GNotification *notification,
                                                                         gboolean urgent);
extern
void g_notification_set_priority (GNotification *notification,
                                                                         GNotificationPriority priority);
extern
void g_notification_add_button (GNotification *notification,
                                                                         const gchar *label,
                                                                         const gchar *detailed_action);
extern
void g_notification_add_button_with_target (GNotification *notification,
                                                                         const gchar *label,
                                                                         const gchar *action,
                                                                         const gchar *target_format,
                                                                         ...);
extern
void g_notification_add_button_with_target_value (GNotification *notification,
                                                                         const gchar *label,
                                                                         const gchar *action,
                                                                         GVariant *target);
extern
void g_notification_set_default_action (GNotification *notification,
                                                                         const gchar *detailed_action);
extern
void g_notification_set_default_action_and_target (GNotification *notification,
                                                                         const gchar *action,
                                                                         const gchar *target_format,
                                                                         ...);
extern
void g_notification_set_default_action_and_target_value (GNotification *notification,
                                                                         const gchar *action,
                                                                         GVariant *target);
extern
GType g_list_model_get_type (void);
 typedef struct _GListModel GListModel; typedef struct _GListModelInterface GListModelInterface; typedef GListModel *GListModel_autoptr; static inline void glib_autoptr_cleanup_GListModel (GListModel **_ptr) { glib_autoptr_cleanup_GObject ((GObject **) _ptr); } static inline GListModel * G_LIST_MODEL (gpointer ptr) { return (((GListModel*) g_type_check_instance_cast ((GTypeInstance*) (ptr), (g_list_model_get_type ())))); } static inline gboolean G_IS_LIST_MODEL (gpointer ptr) { return ((__extension__ ({ GTypeInstance *__inst = (GTypeInstance*) (ptr); GType __t = (g_list_model_get_type ()); gboolean __r; if (!__inst) __r = (0); else if (__inst->g_class && __inst->g_class->g_type == __t) __r = (!(0)); else __r = g_type_check_instance_is_a (__inst, __t); __r; }))); } static inline GListModelInterface * G_LIST_MODEL_GET_IFACE (gpointer ptr) { return (((GListModelInterface*) g_type_interface_peek (((GTypeInstance*) (ptr))->g_class, (g_list_model_get_type ())))); }
struct _GListModelInterface
{
  GTypeInterface g_iface;
  GType (* get_item_type) (GListModel *list);
  guint (* get_n_items) (GListModel *list);
  gpointer (* get_item) (GListModel *list,
                                 guint position);
};
extern
GType g_list_model_get_item_type (GListModel *list);
extern
guint g_list_model_get_n_items (GListModel *list);
extern
gpointer g_list_model_get_item (GListModel *list,
                                                                         guint position);
extern
GObject * g_list_model_get_object (GListModel *list,
                                                                         guint position);
extern
void g_list_model_items_changed (GListModel *list,
                                                                         guint position,
                                                                         guint removed,
                                                                         guint added);
extern
GType g_list_store_get_type (void);
 typedef struct _GListStore GListStore; typedef struct { GObjectClass parent_class; } GListStoreClass; typedef GListStore *GListStore_autoptr; static inline void glib_autoptr_cleanup_GListStore (GListStore **_ptr) { glib_autoptr_cleanup_GObject ((GObject **) _ptr); } static inline GListStore * G_LIST_STORE (gpointer ptr) { return (((GListStore*) g_type_check_instance_cast ((GTypeInstance*) (ptr), (g_list_store_get_type ())))); } static inline gboolean G_IS_LIST_STORE (gpointer ptr) { return ((__extension__ ({ GTypeInstance *__inst = (GTypeInstance*) (ptr); GType __t = (g_list_store_get_type ()); gboolean __r; if (!__inst) __r = (0); else if (__inst->g_class && __inst->g_class->g_type == __t) __r = (!(0)); else __r = g_type_check_instance_is_a (__inst, __t); __r; }))); }
extern
GListStore * g_list_store_new (GType item_type);
extern
void g_list_store_insert (GListStore *store,
                                                                         guint position,
                                                                         gpointer item);
extern
guint g_list_store_insert_sorted (GListStore *store,
                                                                         gpointer item,
                                                                         GCompareDataFunc compare_func,
                                                                         gpointer user_data);
extern
void g_list_store_sort (GListStore *store,
                                                                         GCompareDataFunc compare_func,
                                                                         gpointer user_data);
extern
void g_list_store_append (GListStore *store,
                                                                         gpointer item);
extern
void g_list_store_remove (GListStore *store,
                                                                         guint position);
extern
void g_list_store_remove_all (GListStore *store);
extern
void g_list_store_splice (GListStore *store,
                                                                         guint position,
                                                                         guint n_removals,
                                                                         gpointer *additions,
                                                                         guint n_additions);
typedef GAction *GAction_autoptr;
 static inline void glib_autoptr_cleanup_GAction (GAction **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GActionMap *GActionMap_autoptr;
 static inline void glib_autoptr_cleanup_GActionMap (GActionMap **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GAppInfo *GAppInfo_autoptr;
 static inline void glib_autoptr_cleanup_GAppInfo (GAppInfo **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GAppLaunchContext *GAppLaunchContext_autoptr;
 static inline void glib_autoptr_cleanup_GAppLaunchContext (GAppLaunchContext **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GAppInfoMonitor *GAppInfoMonitor_autoptr;
 static inline void glib_autoptr_cleanup_GAppInfoMonitor (GAppInfoMonitor **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GApplicationCommandLine *GApplicationCommandLine_autoptr;
 static inline void glib_autoptr_cleanup_GApplicationCommandLine (GApplicationCommandLine **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GApplication *GApplication_autoptr;
 static inline void glib_autoptr_cleanup_GApplication (GApplication **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GAsyncInitable *GAsyncInitable_autoptr;
 static inline void glib_autoptr_cleanup_GAsyncInitable (GAsyncInitable **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GAsyncResult *GAsyncResult_autoptr;
 static inline void glib_autoptr_cleanup_GAsyncResult (GAsyncResult **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GBufferedInputStream *GBufferedInputStream_autoptr;
 static inline void glib_autoptr_cleanup_GBufferedInputStream (GBufferedInputStream **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GBufferedOutputStream *GBufferedOutputStream_autoptr;
 static inline void glib_autoptr_cleanup_GBufferedOutputStream (GBufferedOutputStream **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GBytesIcon *GBytesIcon_autoptr;
 static inline void glib_autoptr_cleanup_GBytesIcon (GBytesIcon **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GCancellable *GCancellable_autoptr;
 static inline void glib_autoptr_cleanup_GCancellable (GCancellable **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GCharsetConverter *GCharsetConverter_autoptr;
 static inline void glib_autoptr_cleanup_GCharsetConverter (GCharsetConverter **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GConverter *GConverter_autoptr;
 static inline void glib_autoptr_cleanup_GConverter (GConverter **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GConverterInputStream *GConverterInputStream_autoptr;
 static inline void glib_autoptr_cleanup_GConverterInputStream (GConverterInputStream **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GConverterOutputStream *GConverterOutputStream_autoptr;
 static inline void glib_autoptr_cleanup_GConverterOutputStream (GConverterOutputStream **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GCredentials *GCredentials_autoptr;
 static inline void glib_autoptr_cleanup_GCredentials (GCredentials **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GDatagramBased *GDatagramBased_autoptr;
 static inline void glib_autoptr_cleanup_GDatagramBased (GDatagramBased **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GDataInputStream *GDataInputStream_autoptr;
 static inline void glib_autoptr_cleanup_GDataInputStream (GDataInputStream **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GDataOutputStream *GDataOutputStream_autoptr;
 static inline void glib_autoptr_cleanup_GDataOutputStream (GDataOutputStream **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GDBusActionGroup *GDBusActionGroup_autoptr;
 static inline void glib_autoptr_cleanup_GDBusActionGroup (GDBusActionGroup **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GDBusAuthObserver *GDBusAuthObserver_autoptr;
 static inline void glib_autoptr_cleanup_GDBusAuthObserver (GDBusAuthObserver **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GDBusConnection *GDBusConnection_autoptr;
 static inline void glib_autoptr_cleanup_GDBusConnection (GDBusConnection **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GDBusInterface *GDBusInterface_autoptr;
 static inline void glib_autoptr_cleanup_GDBusInterface (GDBusInterface **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GDBusInterfaceSkeleton *GDBusInterfaceSkeleton_autoptr;
 static inline void glib_autoptr_cleanup_GDBusInterfaceSkeleton (GDBusInterfaceSkeleton **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GDBusMenuModel *GDBusMenuModel_autoptr;
 static inline void glib_autoptr_cleanup_GDBusMenuModel (GDBusMenuModel **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GDBusMessage *GDBusMessage_autoptr;
 static inline void glib_autoptr_cleanup_GDBusMessage (GDBusMessage **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GDBusMethodInvocation *GDBusMethodInvocation_autoptr;
 static inline void glib_autoptr_cleanup_GDBusMethodInvocation (GDBusMethodInvocation **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GDBusNodeInfo *GDBusNodeInfo_autoptr;
 static inline void glib_autoptr_cleanup_GDBusNodeInfo (GDBusNodeInfo **_ptr) { if (*_ptr) (g_dbus_node_info_unref) (*_ptr); }
typedef GDBusObject *GDBusObject_autoptr;
 static inline void glib_autoptr_cleanup_GDBusObject (GDBusObject **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GDBusObjectManagerClient *GDBusObjectManagerClient_autoptr;
 static inline void glib_autoptr_cleanup_GDBusObjectManagerClient (GDBusObjectManagerClient **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GDBusObjectManager *GDBusObjectManager_autoptr;
 static inline void glib_autoptr_cleanup_GDBusObjectManager (GDBusObjectManager **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GDBusObjectManagerServer *GDBusObjectManagerServer_autoptr;
 static inline void glib_autoptr_cleanup_GDBusObjectManagerServer (GDBusObjectManagerServer **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GDBusObjectProxy *GDBusObjectProxy_autoptr;
 static inline void glib_autoptr_cleanup_GDBusObjectProxy (GDBusObjectProxy **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GDBusObjectSkeleton *GDBusObjectSkeleton_autoptr;
 static inline void glib_autoptr_cleanup_GDBusObjectSkeleton (GDBusObjectSkeleton **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GDBusProxy *GDBusProxy_autoptr;
 static inline void glib_autoptr_cleanup_GDBusProxy (GDBusProxy **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GDBusServer *GDBusServer_autoptr;
 static inline void glib_autoptr_cleanup_GDBusServer (GDBusServer **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GDrive *GDrive_autoptr;
 static inline void glib_autoptr_cleanup_GDrive (GDrive **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GEmblemedIcon *GEmblemedIcon_autoptr;
 static inline void glib_autoptr_cleanup_GEmblemedIcon (GEmblemedIcon **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GEmblem *GEmblem_autoptr;
 static inline void glib_autoptr_cleanup_GEmblem (GEmblem **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GFileEnumerator *GFileEnumerator_autoptr;
 static inline void glib_autoptr_cleanup_GFileEnumerator (GFileEnumerator **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GFile *GFile_autoptr;
 static inline void glib_autoptr_cleanup_GFile (GFile **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GFileAttributeInfoList *GFileAttributeInfoList_autoptr;
 static inline void glib_autoptr_cleanup_GFileAttributeInfoList (GFileAttributeInfoList **_ptr) { if (*_ptr) (g_file_attribute_info_list_unref) (*_ptr); }
typedef GFileIcon *GFileIcon_autoptr;
 static inline void glib_autoptr_cleanup_GFileIcon (GFileIcon **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GFileInfo *GFileInfo_autoptr;
 static inline void glib_autoptr_cleanup_GFileInfo (GFileInfo **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GFileInputStream *GFileInputStream_autoptr;
 static inline void glib_autoptr_cleanup_GFileInputStream (GFileInputStream **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GFileIOStream *GFileIOStream_autoptr;
 static inline void glib_autoptr_cleanup_GFileIOStream (GFileIOStream **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GFileMonitor *GFileMonitor_autoptr;
 static inline void glib_autoptr_cleanup_GFileMonitor (GFileMonitor **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GFilenameCompleter *GFilenameCompleter_autoptr;
 static inline void glib_autoptr_cleanup_GFilenameCompleter (GFilenameCompleter **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GFileOutputStream *GFileOutputStream_autoptr;
 static inline void glib_autoptr_cleanup_GFileOutputStream (GFileOutputStream **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GFilterInputStream *GFilterInputStream_autoptr;
 static inline void glib_autoptr_cleanup_GFilterInputStream (GFilterInputStream **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GFilterOutputStream *GFilterOutputStream_autoptr;
 static inline void glib_autoptr_cleanup_GFilterOutputStream (GFilterOutputStream **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GIcon *GIcon_autoptr;
 static inline void glib_autoptr_cleanup_GIcon (GIcon **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GInetAddress *GInetAddress_autoptr;
 static inline void glib_autoptr_cleanup_GInetAddress (GInetAddress **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GInetAddressMask *GInetAddressMask_autoptr;
 static inline void glib_autoptr_cleanup_GInetAddressMask (GInetAddressMask **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GInetSocketAddress *GInetSocketAddress_autoptr;
 static inline void glib_autoptr_cleanup_GInetSocketAddress (GInetSocketAddress **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GInitable *GInitable_autoptr;
 static inline void glib_autoptr_cleanup_GInitable (GInitable **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GInputStream *GInputStream_autoptr;
 static inline void glib_autoptr_cleanup_GInputStream (GInputStream **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GIOModule *GIOModule_autoptr;
 static inline void glib_autoptr_cleanup_GIOModule (GIOModule **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GIOStream *GIOStream_autoptr;
 static inline void glib_autoptr_cleanup_GIOStream (GIOStream **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GLoadableIcon *GLoadableIcon_autoptr;
 static inline void glib_autoptr_cleanup_GLoadableIcon (GLoadableIcon **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GMemoryInputStream *GMemoryInputStream_autoptr;
 static inline void glib_autoptr_cleanup_GMemoryInputStream (GMemoryInputStream **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GMemoryOutputStream *GMemoryOutputStream_autoptr;
 static inline void glib_autoptr_cleanup_GMemoryOutputStream (GMemoryOutputStream **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GMenu *GMenu_autoptr;
 static inline void glib_autoptr_cleanup_GMenu (GMenu **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GMenuItem *GMenuItem_autoptr;
 static inline void glib_autoptr_cleanup_GMenuItem (GMenuItem **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GMenuModel *GMenuModel_autoptr;
 static inline void glib_autoptr_cleanup_GMenuModel (GMenuModel **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GMenuAttributeIter *GMenuAttributeIter_autoptr;
 static inline void glib_autoptr_cleanup_GMenuAttributeIter (GMenuAttributeIter **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GMenuLinkIter *GMenuLinkIter_autoptr;
 static inline void glib_autoptr_cleanup_GMenuLinkIter (GMenuLinkIter **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GMount *GMount_autoptr;
 static inline void glib_autoptr_cleanup_GMount (GMount **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GMountOperation *GMountOperation_autoptr;
 static inline void glib_autoptr_cleanup_GMountOperation (GMountOperation **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GNativeVolumeMonitor *GNativeVolumeMonitor_autoptr;
 static inline void glib_autoptr_cleanup_GNativeVolumeMonitor (GNativeVolumeMonitor **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GNetworkAddress *GNetworkAddress_autoptr;
 static inline void glib_autoptr_cleanup_GNetworkAddress (GNetworkAddress **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GNetworkMonitor *GNetworkMonitor_autoptr;
 static inline void glib_autoptr_cleanup_GNetworkMonitor (GNetworkMonitor **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GNetworkService *GNetworkService_autoptr;
 static inline void glib_autoptr_cleanup_GNetworkService (GNetworkService **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GNotification *GNotification_autoptr;
 static inline void glib_autoptr_cleanup_GNotification (GNotification **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GOutputStream *GOutputStream_autoptr;
 static inline void glib_autoptr_cleanup_GOutputStream (GOutputStream **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GPermission *GPermission_autoptr;
 static inline void glib_autoptr_cleanup_GPermission (GPermission **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GPollableInputStream *GPollableInputStream_autoptr;
 static inline void glib_autoptr_cleanup_GPollableInputStream (GPollableInputStream **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GPollableOutputStream *GPollableOutputStream_autoptr;
 static inline void glib_autoptr_cleanup_GPollableOutputStream (GPollableOutputStream **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GPropertyAction *GPropertyAction_autoptr;
 static inline void glib_autoptr_cleanup_GPropertyAction (GPropertyAction **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GProxyAddressEnumerator *GProxyAddressEnumerator_autoptr;
 static inline void glib_autoptr_cleanup_GProxyAddressEnumerator (GProxyAddressEnumerator **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GProxyAddress *GProxyAddress_autoptr;
 static inline void glib_autoptr_cleanup_GProxyAddress (GProxyAddress **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GProxy *GProxy_autoptr;
 static inline void glib_autoptr_cleanup_GProxy (GProxy **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GProxyResolver *GProxyResolver_autoptr;
 static inline void glib_autoptr_cleanup_GProxyResolver (GProxyResolver **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GRemoteActionGroup *GRemoteActionGroup_autoptr;
 static inline void glib_autoptr_cleanup_GRemoteActionGroup (GRemoteActionGroup **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GResolver *GResolver_autoptr;
 static inline void glib_autoptr_cleanup_GResolver (GResolver **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GSeekable *GSeekable_autoptr;
 static inline void glib_autoptr_cleanup_GSeekable (GSeekable **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GSettingsBackend *GSettingsBackend_autoptr;
 static inline void glib_autoptr_cleanup_GSettingsBackend (GSettingsBackend **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GSettingsSchema *GSettingsSchema_autoptr;
 static inline void glib_autoptr_cleanup_GSettingsSchema (GSettingsSchema **_ptr) { if (*_ptr) (g_settings_schema_unref) (*_ptr); }
typedef GSettings *GSettings_autoptr;
 static inline void glib_autoptr_cleanup_GSettings (GSettings **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GSimpleActionGroup *GSimpleActionGroup_autoptr;
 static inline void glib_autoptr_cleanup_GSimpleActionGroup (GSimpleActionGroup **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GSimpleAction *GSimpleAction_autoptr;
 static inline void glib_autoptr_cleanup_GSimpleAction (GSimpleAction **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GSimpleAsyncResult *GSimpleAsyncResult_autoptr;
 static inline void glib_autoptr_cleanup_GSimpleAsyncResult (GSimpleAsyncResult **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GSimplePermission *GSimplePermission_autoptr;
 static inline void glib_autoptr_cleanup_GSimplePermission (GSimplePermission **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GSimpleProxyResolver *GSimpleProxyResolver_autoptr;
 static inline void glib_autoptr_cleanup_GSimpleProxyResolver (GSimpleProxyResolver **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GSocketAddressEnumerator *GSocketAddressEnumerator_autoptr;
 static inline void glib_autoptr_cleanup_GSocketAddressEnumerator (GSocketAddressEnumerator **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GSocketAddress *GSocketAddress_autoptr;
 static inline void glib_autoptr_cleanup_GSocketAddress (GSocketAddress **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GSocketClient *GSocketClient_autoptr;
 static inline void glib_autoptr_cleanup_GSocketClient (GSocketClient **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GSocketConnectable *GSocketConnectable_autoptr;
 static inline void glib_autoptr_cleanup_GSocketConnectable (GSocketConnectable **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GSocketConnection *GSocketConnection_autoptr;
 static inline void glib_autoptr_cleanup_GSocketConnection (GSocketConnection **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GSocketControlMessage *GSocketControlMessage_autoptr;
 static inline void glib_autoptr_cleanup_GSocketControlMessage (GSocketControlMessage **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GSocket *GSocket_autoptr;
 static inline void glib_autoptr_cleanup_GSocket (GSocket **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GSocketListener *GSocketListener_autoptr;
 static inline void glib_autoptr_cleanup_GSocketListener (GSocketListener **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GSocketService *GSocketService_autoptr;
 static inline void glib_autoptr_cleanup_GSocketService (GSocketService **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GSubprocess *GSubprocess_autoptr;
 static inline void glib_autoptr_cleanup_GSubprocess (GSubprocess **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GSubprocessLauncher *GSubprocessLauncher_autoptr;
 static inline void glib_autoptr_cleanup_GSubprocessLauncher (GSubprocessLauncher **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GTask *GTask_autoptr;
 static inline void glib_autoptr_cleanup_GTask (GTask **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GTcpConnection *GTcpConnection_autoptr;
 static inline void glib_autoptr_cleanup_GTcpConnection (GTcpConnection **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GTcpWrapperConnection *GTcpWrapperConnection_autoptr;
 static inline void glib_autoptr_cleanup_GTcpWrapperConnection (GTcpWrapperConnection **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GTestDBus *GTestDBus_autoptr;
 static inline void glib_autoptr_cleanup_GTestDBus (GTestDBus **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GThemedIcon *GThemedIcon_autoptr;
 static inline void glib_autoptr_cleanup_GThemedIcon (GThemedIcon **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GThreadedSocketService *GThreadedSocketService_autoptr;
 static inline void glib_autoptr_cleanup_GThreadedSocketService (GThreadedSocketService **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GTlsBackend *GTlsBackend_autoptr;
 static inline void glib_autoptr_cleanup_GTlsBackend (GTlsBackend **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GTlsCertificate *GTlsCertificate_autoptr;
 static inline void glib_autoptr_cleanup_GTlsCertificate (GTlsCertificate **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GTlsClientConnection *GTlsClientConnection_autoptr;
 static inline void glib_autoptr_cleanup_GTlsClientConnection (GTlsClientConnection **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GTlsConnection *GTlsConnection_autoptr;
 static inline void glib_autoptr_cleanup_GTlsConnection (GTlsConnection **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GTlsDatabase *GTlsDatabase_autoptr;
 static inline void glib_autoptr_cleanup_GTlsDatabase (GTlsDatabase **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GTlsFileDatabase *GTlsFileDatabase_autoptr;
 static inline void glib_autoptr_cleanup_GTlsFileDatabase (GTlsFileDatabase **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GTlsInteraction *GTlsInteraction_autoptr;
 static inline void glib_autoptr_cleanup_GTlsInteraction (GTlsInteraction **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GTlsPassword *GTlsPassword_autoptr;
 static inline void glib_autoptr_cleanup_GTlsPassword (GTlsPassword **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GTlsServerConnection *GTlsServerConnection_autoptr;
 static inline void glib_autoptr_cleanup_GTlsServerConnection (GTlsServerConnection **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GVfs *GVfs_autoptr;
 static inline void glib_autoptr_cleanup_GVfs (GVfs **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GVolume *GVolume_autoptr;
 static inline void glib_autoptr_cleanup_GVolume (GVolume **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GVolumeMonitor *GVolumeMonitor_autoptr;
 static inline void glib_autoptr_cleanup_GVolumeMonitor (GVolumeMonitor **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GZlibCompressor *GZlibCompressor_autoptr;
 static inline void glib_autoptr_cleanup_GZlibCompressor (GZlibCompressor **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GZlibDecompressor *GZlibDecompressor_autoptr;
 static inline void glib_autoptr_cleanup_GZlibDecompressor (GZlibDecompressor **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef struct _PangoCoverage PangoCoverage;
typedef enum {
  PANGO_COVERAGE_NONE,
  PANGO_COVERAGE_FALLBACK,
  PANGO_COVERAGE_APPROXIMATE,
  PANGO_COVERAGE_EXACT
} PangoCoverageLevel;
PangoCoverage * pango_coverage_new (void);
PangoCoverage * pango_coverage_ref (PangoCoverage *coverage);
void pango_coverage_unref (PangoCoverage *coverage);
PangoCoverage * pango_coverage_copy (PangoCoverage *coverage);
PangoCoverageLevel pango_coverage_get (PangoCoverage *coverage,
        int index_);
void pango_coverage_set (PangoCoverage *coverage,
        int index_,
        PangoCoverageLevel level);
void pango_coverage_max (PangoCoverage *coverage,
        PangoCoverage *other);
void pango_coverage_to_bytes (PangoCoverage *coverage,
       guchar **bytes,
       int *n_bytes);
PangoCoverage *pango_coverage_from_bytes (guchar *bytes,
       int n_bytes);
typedef struct _PangoLogAttr PangoLogAttr;
typedef struct _PangoEngineLang PangoEngineLang;
typedef struct _PangoEngineShape PangoEngineShape;
typedef struct _PangoFont PangoFont;
typedef struct _PangoFontMap PangoFontMap;
typedef struct _PangoRectangle PangoRectangle;
typedef guint32 PangoGlyph;
int pango_units_from_double (double d) __attribute__((__const__));
double pango_units_to_double (int i) __attribute__((__const__));
struct _PangoRectangle
{
  int x;
  int y;
  int width;
  int height;
};
void pango_extents_to_pixels (PangoRectangle *inclusive,
         PangoRectangle *nearest);
typedef enum {
  PANGO_GRAVITY_SOUTH,
  PANGO_GRAVITY_EAST,
  PANGO_GRAVITY_NORTH,
  PANGO_GRAVITY_WEST,
  PANGO_GRAVITY_AUTO
} PangoGravity;
typedef enum {
  PANGO_GRAVITY_HINT_NATURAL,
  PANGO_GRAVITY_HINT_STRONG,
  PANGO_GRAVITY_HINT_LINE
} PangoGravityHint;
typedef struct _PangoMatrix PangoMatrix;
struct _PangoMatrix
{
  double xx;
  double xy;
  double yx;
  double yy;
  double x0;
  double y0;
};
GType pango_matrix_get_type (void) __attribute__((__const__));
PangoMatrix *pango_matrix_copy (const PangoMatrix *matrix);
void pango_matrix_free (PangoMatrix *matrix);
void pango_matrix_translate (PangoMatrix *matrix,
        double tx,
        double ty);
void pango_matrix_scale (PangoMatrix *matrix,
        double scale_x,
        double scale_y);
void pango_matrix_rotate (PangoMatrix *matrix,
        double degrees);
void pango_matrix_concat (PangoMatrix *matrix,
        const PangoMatrix *new_matrix);
void pango_matrix_transform_point (const PangoMatrix *matrix,
          double *x,
          double *y);
void pango_matrix_transform_distance (const PangoMatrix *matrix,
          double *dx,
          double *dy);
void pango_matrix_transform_rectangle (const PangoMatrix *matrix,
           PangoRectangle *rect);
void pango_matrix_transform_pixel_rectangle (const PangoMatrix *matrix,
          PangoRectangle *rect);
double pango_matrix_get_font_scale_factor (const PangoMatrix *matrix) __attribute__((__pure__));
void pango_matrix_get_font_scale_factors (const PangoMatrix *matrix,
       double *xscale, double *yscale);
typedef struct _PangoScriptIter PangoScriptIter;
typedef enum {
      PANGO_SCRIPT_INVALID_CODE = -1,
      PANGO_SCRIPT_COMMON = 0,
      PANGO_SCRIPT_INHERITED,
      PANGO_SCRIPT_ARABIC,
      PANGO_SCRIPT_ARMENIAN,
      PANGO_SCRIPT_BENGALI,
      PANGO_SCRIPT_BOPOMOFO,
      PANGO_SCRIPT_CHEROKEE,
      PANGO_SCRIPT_COPTIC,
      PANGO_SCRIPT_CYRILLIC,
      PANGO_SCRIPT_DESERET,
      PANGO_SCRIPT_DEVANAGARI,
      PANGO_SCRIPT_ETHIOPIC,
      PANGO_SCRIPT_GEORGIAN,
      PANGO_SCRIPT_GOTHIC,
      PANGO_SCRIPT_GREEK,
      PANGO_SCRIPT_GUJARATI,
      PANGO_SCRIPT_GURMUKHI,
      PANGO_SCRIPT_HAN,
      PANGO_SCRIPT_HANGUL,
      PANGO_SCRIPT_HEBREW,
      PANGO_SCRIPT_HIRAGANA,
      PANGO_SCRIPT_KANNADA,
      PANGO_SCRIPT_KATAKANA,
      PANGO_SCRIPT_KHMER,
      PANGO_SCRIPT_LAO,
      PANGO_SCRIPT_LATIN,
      PANGO_SCRIPT_MALAYALAM,
      PANGO_SCRIPT_MONGOLIAN,
      PANGO_SCRIPT_MYANMAR,
      PANGO_SCRIPT_OGHAM,
      PANGO_SCRIPT_OLD_ITALIC,
      PANGO_SCRIPT_ORIYA,
      PANGO_SCRIPT_RUNIC,
      PANGO_SCRIPT_SINHALA,
      PANGO_SCRIPT_SYRIAC,
      PANGO_SCRIPT_TAMIL,
      PANGO_SCRIPT_TELUGU,
      PANGO_SCRIPT_THAANA,
      PANGO_SCRIPT_THAI,
      PANGO_SCRIPT_TIBETAN,
      PANGO_SCRIPT_CANADIAN_ABORIGINAL,
      PANGO_SCRIPT_YI,
      PANGO_SCRIPT_TAGALOG,
      PANGO_SCRIPT_HANUNOO,
      PANGO_SCRIPT_BUHID,
      PANGO_SCRIPT_TAGBANWA,
      PANGO_SCRIPT_BRAILLE,
      PANGO_SCRIPT_CYPRIOT,
      PANGO_SCRIPT_LIMBU,
      PANGO_SCRIPT_OSMANYA,
      PANGO_SCRIPT_SHAVIAN,
      PANGO_SCRIPT_LINEAR_B,
      PANGO_SCRIPT_TAI_LE,
      PANGO_SCRIPT_UGARITIC,
      PANGO_SCRIPT_NEW_TAI_LUE,
      PANGO_SCRIPT_BUGINESE,
      PANGO_SCRIPT_GLAGOLITIC,
      PANGO_SCRIPT_TIFINAGH,
      PANGO_SCRIPT_SYLOTI_NAGRI,
      PANGO_SCRIPT_OLD_PERSIAN,
      PANGO_SCRIPT_KHAROSHTHI,
      PANGO_SCRIPT_UNKNOWN,
      PANGO_SCRIPT_BALINESE,
      PANGO_SCRIPT_CUNEIFORM,
      PANGO_SCRIPT_PHOENICIAN,
      PANGO_SCRIPT_PHAGS_PA,
      PANGO_SCRIPT_NKO,
      PANGO_SCRIPT_KAYAH_LI,
      PANGO_SCRIPT_LEPCHA,
      PANGO_SCRIPT_REJANG,
      PANGO_SCRIPT_SUNDANESE,
      PANGO_SCRIPT_SAURASHTRA,
      PANGO_SCRIPT_CHAM,
      PANGO_SCRIPT_OL_CHIKI,
      PANGO_SCRIPT_VAI,
      PANGO_SCRIPT_CARIAN,
      PANGO_SCRIPT_LYCIAN,
      PANGO_SCRIPT_LYDIAN,
      PANGO_SCRIPT_BATAK,
      PANGO_SCRIPT_BRAHMI,
      PANGO_SCRIPT_MANDAIC,
      PANGO_SCRIPT_CHAKMA,
      PANGO_SCRIPT_MEROITIC_CURSIVE,
      PANGO_SCRIPT_MEROITIC_HIEROGLYPHS,
      PANGO_SCRIPT_MIAO,
      PANGO_SCRIPT_SHARADA,
      PANGO_SCRIPT_SORA_SOMPENG,
      PANGO_SCRIPT_TAKRI
} PangoScript;
PangoScript pango_script_for_unichar (gunichar ch) __attribute__((__const__));
PangoScriptIter *pango_script_iter_new (const char *text,
           int length);
void pango_script_iter_get_range (PangoScriptIter *iter,
                                              const char **start,
                                              const char **end,
                                              PangoScript *script);
gboolean pango_script_iter_next (PangoScriptIter *iter);
void pango_script_iter_free (PangoScriptIter *iter);
typedef struct _PangoLanguage PangoLanguage;
GType pango_language_get_type (void) __attribute__((__const__));
PangoLanguage *pango_language_from_string (const char *language);
const char *pango_language_to_string (PangoLanguage *language) __attribute__((__const__));
const char *pango_language_get_sample_string (PangoLanguage *language) __attribute__((__const__));
PangoLanguage *pango_language_get_default (void) __attribute__((__const__));
gboolean pango_language_matches (PangoLanguage *language,
           const char *range_list) __attribute__((__pure__));
gboolean pango_language_includes_script (PangoLanguage *language,
           PangoScript script) __attribute__((__pure__));
const PangoScript *pango_language_get_scripts (PangoLanguage *language,
           int *num_scripts);
PangoLanguage *pango_script_get_sample_language (PangoScript script) __attribute__((__pure__));
double pango_gravity_to_rotation (PangoGravity gravity) __attribute__((__const__));
PangoGravity pango_gravity_get_for_matrix (const PangoMatrix *matrix) __attribute__((__pure__));
PangoGravity pango_gravity_get_for_script (PangoScript script,
        PangoGravity base_gravity,
        PangoGravityHint hint) __attribute__((__const__));
PangoGravity pango_gravity_get_for_script_and_width
       (PangoScript script,
        gboolean wide,
        PangoGravity base_gravity,
        PangoGravityHint hint) __attribute__((__const__));
typedef enum {
  PANGO_BIDI_TYPE_L,
  PANGO_BIDI_TYPE_LRE,
  PANGO_BIDI_TYPE_LRO,
  PANGO_BIDI_TYPE_R,
  PANGO_BIDI_TYPE_AL,
  PANGO_BIDI_TYPE_RLE,
  PANGO_BIDI_TYPE_RLO,
  PANGO_BIDI_TYPE_PDF,
  PANGO_BIDI_TYPE_EN,
  PANGO_BIDI_TYPE_ES,
  PANGO_BIDI_TYPE_ET,
  PANGO_BIDI_TYPE_AN,
  PANGO_BIDI_TYPE_CS,
  PANGO_BIDI_TYPE_NSM,
  PANGO_BIDI_TYPE_BN,
  PANGO_BIDI_TYPE_B,
  PANGO_BIDI_TYPE_S,
  PANGO_BIDI_TYPE_WS,
  PANGO_BIDI_TYPE_ON
} PangoBidiType;
PangoBidiType pango_bidi_type_for_unichar (gunichar ch) __attribute__((__const__));
typedef enum {
  PANGO_DIRECTION_LTR,
  PANGO_DIRECTION_RTL,
  PANGO_DIRECTION_TTB_LTR,
  PANGO_DIRECTION_TTB_RTL,
  PANGO_DIRECTION_WEAK_LTR,
  PANGO_DIRECTION_WEAK_RTL,
  PANGO_DIRECTION_NEUTRAL
} PangoDirection;
PangoDirection pango_unichar_direction (gunichar ch) __attribute__((__const__));
PangoDirection pango_find_base_dir (const gchar *text,
          gint length);
__attribute__((__deprecated__("Use '" "g_unichar_get_mirror_char" "' instead")))
gboolean pango_get_mirror_char (gunichar ch,
          gunichar *mirrored_ch);
typedef struct _PangoFontDescription PangoFontDescription;
typedef struct _PangoFontMetrics PangoFontMetrics;
typedef enum {
  PANGO_STYLE_NORMAL,
  PANGO_STYLE_OBLIQUE,
  PANGO_STYLE_ITALIC
} PangoStyle;
typedef enum {
  PANGO_VARIANT_NORMAL,
  PANGO_VARIANT_SMALL_CAPS
} PangoVariant;
typedef enum {
  PANGO_WEIGHT_THIN = 100,
  PANGO_WEIGHT_ULTRALIGHT = 200,
  PANGO_WEIGHT_LIGHT = 300,
  PANGO_WEIGHT_SEMILIGHT = 350,
  PANGO_WEIGHT_BOOK = 380,
  PANGO_WEIGHT_NORMAL = 400,
  PANGO_WEIGHT_MEDIUM = 500,
  PANGO_WEIGHT_SEMIBOLD = 600,
  PANGO_WEIGHT_BOLD = 700,
  PANGO_WEIGHT_ULTRABOLD = 800,
  PANGO_WEIGHT_HEAVY = 900,
  PANGO_WEIGHT_ULTRAHEAVY = 1000
} PangoWeight;
typedef enum {
  PANGO_STRETCH_ULTRA_CONDENSED,
  PANGO_STRETCH_EXTRA_CONDENSED,
  PANGO_STRETCH_CONDENSED,
  PANGO_STRETCH_SEMI_CONDENSED,
  PANGO_STRETCH_NORMAL,
  PANGO_STRETCH_SEMI_EXPANDED,
  PANGO_STRETCH_EXPANDED,
  PANGO_STRETCH_EXTRA_EXPANDED,
  PANGO_STRETCH_ULTRA_EXPANDED
} PangoStretch;
typedef enum {
  PANGO_FONT_MASK_FAMILY = 1 << 0,
  PANGO_FONT_MASK_STYLE = 1 << 1,
  PANGO_FONT_MASK_VARIANT = 1 << 2,
  PANGO_FONT_MASK_WEIGHT = 1 << 3,
  PANGO_FONT_MASK_STRETCH = 1 << 4,
  PANGO_FONT_MASK_SIZE = 1 << 5,
  PANGO_FONT_MASK_GRAVITY = 1 << 6
} PangoFontMask;
GType pango_font_description_get_type (void) __attribute__((__const__));
PangoFontDescription *pango_font_description_new (void);
PangoFontDescription *pango_font_description_copy (const PangoFontDescription *desc);
PangoFontDescription *pango_font_description_copy_static (const PangoFontDescription *desc);
guint pango_font_description_hash (const PangoFontDescription *desc) __attribute__((__pure__));
gboolean pango_font_description_equal (const PangoFontDescription *desc1,
         const PangoFontDescription *desc2) __attribute__((__pure__));
void pango_font_description_free (PangoFontDescription *desc);
void pango_font_descriptions_free (PangoFontDescription **descs,
         int n_descs);
void pango_font_description_set_family (PangoFontDescription *desc,
              const char *family);
void pango_font_description_set_family_static (PangoFontDescription *desc,
              const char *family);
const char *pango_font_description_get_family (const PangoFontDescription *desc) __attribute__((__pure__));
void pango_font_description_set_style (PangoFontDescription *desc,
              PangoStyle style);
PangoStyle pango_font_description_get_style (const PangoFontDescription *desc) __attribute__((__pure__));
void pango_font_description_set_variant (PangoFontDescription *desc,
              PangoVariant variant);
PangoVariant pango_font_description_get_variant (const PangoFontDescription *desc) __attribute__((__pure__));
void pango_font_description_set_weight (PangoFontDescription *desc,
              PangoWeight weight);
PangoWeight pango_font_description_get_weight (const PangoFontDescription *desc) __attribute__((__pure__));
void pango_font_description_set_stretch (PangoFontDescription *desc,
              PangoStretch stretch);
PangoStretch pango_font_description_get_stretch (const PangoFontDescription *desc) __attribute__((__pure__));
void pango_font_description_set_size (PangoFontDescription *desc,
              gint size);
gint pango_font_description_get_size (const PangoFontDescription *desc) __attribute__((__pure__));
void pango_font_description_set_absolute_size (PangoFontDescription *desc,
              double size);
gboolean pango_font_description_get_size_is_absolute (const PangoFontDescription *desc) __attribute__((__pure__));
void pango_font_description_set_gravity (PangoFontDescription *desc,
              PangoGravity gravity);
PangoGravity pango_font_description_get_gravity (const PangoFontDescription *desc) __attribute__((__pure__));
PangoFontMask pango_font_description_get_set_fields (const PangoFontDescription *desc) __attribute__((__pure__));
void pango_font_description_unset_fields (PangoFontDescription *desc,
           PangoFontMask to_unset);
void pango_font_description_merge (PangoFontDescription *desc,
       const PangoFontDescription *desc_to_merge,
       gboolean replace_existing);
void pango_font_description_merge_static (PangoFontDescription *desc,
       const PangoFontDescription *desc_to_merge,
       gboolean replace_existing);
gboolean pango_font_description_better_match (const PangoFontDescription *desc,
           const PangoFontDescription *old_match,
           const PangoFontDescription *new_match) __attribute__((__pure__));
PangoFontDescription *pango_font_description_from_string (const char *str);
char * pango_font_description_to_string (const PangoFontDescription *desc);
char * pango_font_description_to_filename (const PangoFontDescription *desc);
GType pango_font_metrics_get_type (void) __attribute__((__const__));
PangoFontMetrics *pango_font_metrics_ref (PangoFontMetrics *metrics);
void pango_font_metrics_unref (PangoFontMetrics *metrics);
int pango_font_metrics_get_ascent (PangoFontMetrics *metrics) __attribute__((__pure__));
int pango_font_metrics_get_descent (PangoFontMetrics *metrics) __attribute__((__pure__));
int pango_font_metrics_get_approximate_char_width (PangoFontMetrics *metrics) __attribute__((__pure__));
int pango_font_metrics_get_approximate_digit_width (PangoFontMetrics *metrics) __attribute__((__pure__));
int pango_font_metrics_get_underline_position (PangoFontMetrics *metrics) __attribute__((__pure__));
int pango_font_metrics_get_underline_thickness (PangoFontMetrics *metrics) __attribute__((__pure__));
int pango_font_metrics_get_strikethrough_position (PangoFontMetrics *metrics) __attribute__((__pure__));
int pango_font_metrics_get_strikethrough_thickness (PangoFontMetrics *metrics) __attribute__((__pure__));
typedef struct _PangoFontFamily PangoFontFamily;
typedef struct _PangoFontFace PangoFontFace;
GType pango_font_family_get_type (void) __attribute__((__const__));
void pango_font_family_list_faces (PangoFontFamily *family,
         PangoFontFace ***faces,
         int *n_faces);
const char *pango_font_family_get_name (PangoFontFamily *family) __attribute__((__pure__));
gboolean pango_font_family_is_monospace (PangoFontFamily *family) __attribute__((__pure__));
GType pango_font_face_get_type (void) __attribute__((__const__));
PangoFontDescription *pango_font_face_describe (PangoFontFace *face);
const char *pango_font_face_get_face_name (PangoFontFace *face) __attribute__((__pure__));
void pango_font_face_list_sizes (PangoFontFace *face,
            int **sizes,
            int *n_sizes);
gboolean pango_font_face_is_synthesized (PangoFontFace *face) __attribute__((__pure__));
GType pango_font_get_type (void) __attribute__((__const__));
PangoFontDescription *pango_font_describe (PangoFont *font);
PangoFontDescription *pango_font_describe_with_absolute_size (PangoFont *font);
PangoCoverage * pango_font_get_coverage (PangoFont *font,
          PangoLanguage *language);
PangoEngineShape * pango_font_find_shaper (PangoFont *font,
          PangoLanguage *language,
          guint32 ch);
PangoFontMetrics * pango_font_get_metrics (PangoFont *font,
          PangoLanguage *language);
void pango_font_get_glyph_extents (PangoFont *font,
          PangoGlyph glyph,
          PangoRectangle *ink_rect,
          PangoRectangle *logical_rect);
PangoFontMap *pango_font_get_font_map (PangoFont *font);
typedef struct _PangoColor PangoColor;
struct _PangoColor
{
  guint16 red;
  guint16 green;
  guint16 blue;
};
GType pango_color_get_type (void) __attribute__((__const__));
PangoColor *pango_color_copy (const PangoColor *src);
void pango_color_free (PangoColor *color);
gboolean pango_color_parse (PangoColor *color,
      const char *spec);
gchar *pango_color_to_string(const PangoColor *color);
typedef struct _PangoAttribute PangoAttribute;
typedef struct _PangoAttrClass PangoAttrClass;
typedef struct _PangoAttrString PangoAttrString;
typedef struct _PangoAttrLanguage PangoAttrLanguage;
typedef struct _PangoAttrInt PangoAttrInt;
typedef struct _PangoAttrSize PangoAttrSize;
typedef struct _PangoAttrFloat PangoAttrFloat;
typedef struct _PangoAttrColor PangoAttrColor;
typedef struct _PangoAttrFontDesc PangoAttrFontDesc;
typedef struct _PangoAttrShape PangoAttrShape;
typedef struct _PangoAttrFontFeatures PangoAttrFontFeatures;
typedef struct _PangoAttrList PangoAttrList;
typedef struct _PangoAttrIterator PangoAttrIterator;
typedef enum
{
  PANGO_ATTR_INVALID,
  PANGO_ATTR_LANGUAGE,
  PANGO_ATTR_FAMILY,
  PANGO_ATTR_STYLE,
  PANGO_ATTR_WEIGHT,
  PANGO_ATTR_VARIANT,
  PANGO_ATTR_STRETCH,
  PANGO_ATTR_SIZE,
  PANGO_ATTR_FONT_DESC,
  PANGO_ATTR_FOREGROUND,
  PANGO_ATTR_BACKGROUND,
  PANGO_ATTR_UNDERLINE,
  PANGO_ATTR_STRIKETHROUGH,
  PANGO_ATTR_RISE,
  PANGO_ATTR_SHAPE,
  PANGO_ATTR_SCALE,
  PANGO_ATTR_FALLBACK,
  PANGO_ATTR_LETTER_SPACING,
  PANGO_ATTR_UNDERLINE_COLOR,
  PANGO_ATTR_STRIKETHROUGH_COLOR,
  PANGO_ATTR_ABSOLUTE_SIZE,
  PANGO_ATTR_GRAVITY,
  PANGO_ATTR_GRAVITY_HINT,
  PANGO_ATTR_FONT_FEATURES,
  PANGO_ATTR_FOREGROUND_ALPHA,
  PANGO_ATTR_BACKGROUND_ALPHA
} PangoAttrType;
typedef enum {
  PANGO_UNDERLINE_NONE,
  PANGO_UNDERLINE_SINGLE,
  PANGO_UNDERLINE_DOUBLE,
  PANGO_UNDERLINE_LOW,
  PANGO_UNDERLINE_ERROR
} PangoUnderline;
struct _PangoAttribute
{
  const PangoAttrClass *klass;
  guint start_index;
  guint end_index;
};
typedef gboolean (*PangoAttrFilterFunc) (PangoAttribute *attribute,
      gpointer user_data);
typedef gpointer (*PangoAttrDataCopyFunc) (gconstpointer user_data);
struct _PangoAttrClass
{
  PangoAttrType type;
  PangoAttribute * (*copy) (const PangoAttribute *attr);
  void (*destroy) (PangoAttribute *attr);
  gboolean (*equal) (const PangoAttribute *attr1, const PangoAttribute *attr2);
};
struct _PangoAttrString
{
  PangoAttribute attr;
  char *value;
};
struct _PangoAttrLanguage
{
  PangoAttribute attr;
  PangoLanguage *value;
};
struct _PangoAttrInt
{
  PangoAttribute attr;
  int value;
};
struct _PangoAttrFloat
{
  PangoAttribute attr;
  double value;
};
struct _PangoAttrColor
{
  PangoAttribute attr;
  PangoColor color;
};
struct _PangoAttrSize
{
  PangoAttribute attr;
  int size;
  guint absolute : 1;
};
struct _PangoAttrShape
{
  PangoAttribute attr;
  PangoRectangle ink_rect;
  PangoRectangle logical_rect;
  gpointer data;
  PangoAttrDataCopyFunc copy_func;
  GDestroyNotify destroy_func;
};
struct _PangoAttrFontDesc
{
  PangoAttribute attr;
  PangoFontDescription *desc;
};
struct _PangoAttrFontFeatures
{
  PangoAttribute attr;
  gchar *features;
};
PangoAttrType pango_attr_type_register (const gchar *name);
const char * pango_attr_type_get_name (PangoAttrType type) __attribute__((__const__));
void pango_attribute_init (PangoAttribute *attr,
           const PangoAttrClass *klass);
PangoAttribute * pango_attribute_copy (const PangoAttribute *attr);
void pango_attribute_destroy (PangoAttribute *attr);
gboolean pango_attribute_equal (const PangoAttribute *attr1,
           const PangoAttribute *attr2) __attribute__((__pure__));
PangoAttribute *pango_attr_language_new (PangoLanguage *language);
PangoAttribute *pango_attr_family_new (const char *family);
PangoAttribute *pango_attr_foreground_new (guint16 red,
           guint16 green,
           guint16 blue);
PangoAttribute *pango_attr_background_new (guint16 red,
           guint16 green,
           guint16 blue);
PangoAttribute *pango_attr_size_new (int size);
PangoAttribute *pango_attr_size_new_absolute (int size);
PangoAttribute *pango_attr_style_new (PangoStyle style);
PangoAttribute *pango_attr_weight_new (PangoWeight weight);
PangoAttribute *pango_attr_variant_new (PangoVariant variant);
PangoAttribute *pango_attr_stretch_new (PangoStretch stretch);
PangoAttribute *pango_attr_font_desc_new (const PangoFontDescription *desc);
PangoAttribute *pango_attr_underline_new (PangoUnderline underline);
PangoAttribute *pango_attr_underline_color_new (guint16 red,
          guint16 green,
          guint16 blue);
PangoAttribute *pango_attr_strikethrough_new (gboolean strikethrough);
PangoAttribute *pango_attr_strikethrough_color_new (guint16 red,
          guint16 green,
          guint16 blue);
PangoAttribute *pango_attr_rise_new (int rise);
PangoAttribute *pango_attr_scale_new (double scale_factor);
PangoAttribute *pango_attr_fallback_new (gboolean enable_fallback);
PangoAttribute *pango_attr_letter_spacing_new (int letter_spacing);
PangoAttribute *pango_attr_shape_new (const PangoRectangle *ink_rect,
      const PangoRectangle *logical_rect);
PangoAttribute *pango_attr_shape_new_with_data (const PangoRectangle *ink_rect,
      const PangoRectangle *logical_rect,
      gpointer data,
      PangoAttrDataCopyFunc copy_func,
      GDestroyNotify destroy_func);
PangoAttribute *pango_attr_gravity_new (PangoGravity gravity);
PangoAttribute *pango_attr_gravity_hint_new (PangoGravityHint hint);
PangoAttribute *pango_attr_font_features_new (const gchar *features);
PangoAttribute *pango_attr_foreground_alpha_new (guint16 alpha);
PangoAttribute *pango_attr_background_alpha_new (guint16 alpha);
GType pango_attr_list_get_type (void) __attribute__((__const__));
PangoAttrList * pango_attr_list_new (void);
PangoAttrList * pango_attr_list_ref (PangoAttrList *list);
void pango_attr_list_unref (PangoAttrList *list);
PangoAttrList * pango_attr_list_copy (PangoAttrList *list);
void pango_attr_list_insert (PangoAttrList *list,
        PangoAttribute *attr);
void pango_attr_list_insert_before (PangoAttrList *list,
        PangoAttribute *attr);
void pango_attr_list_change (PangoAttrList *list,
        PangoAttribute *attr);
void pango_attr_list_splice (PangoAttrList *list,
        PangoAttrList *other,
        gint pos,
        gint len);
PangoAttrList *pango_attr_list_filter (PangoAttrList *list,
           PangoAttrFilterFunc func,
           gpointer data);
PangoAttrIterator *pango_attr_list_get_iterator (PangoAttrList *list);
void pango_attr_iterator_range (PangoAttrIterator *iterator,
       gint *start,
       gint *end);
gboolean pango_attr_iterator_next (PangoAttrIterator *iterator);
PangoAttrIterator *pango_attr_iterator_copy (PangoAttrIterator *iterator);
void pango_attr_iterator_destroy (PangoAttrIterator *iterator);
PangoAttribute * pango_attr_iterator_get (PangoAttrIterator *iterator,
       PangoAttrType type);
void pango_attr_iterator_get_font (PangoAttrIterator *iterator,
       PangoFontDescription *desc,
       PangoLanguage **language,
       GSList **extra_attrs);
GSList * pango_attr_iterator_get_attrs (PangoAttrIterator *iterator);
gboolean pango_parse_markup (const char *markup_text,
        int length,
        gunichar accel_marker,
        PangoAttrList **attr_list,
        char **text,
        gunichar *accel_char,
        GError **error);
GMarkupParseContext * pango_markup_parser_new (gunichar accel_marker);
gboolean pango_markup_parser_finish (GMarkupParseContext *context,
                                                  PangoAttrList **attr_list,
                                                  char **text,
                                                  gunichar *accel_char,
                                                  GError **error);
typedef struct _PangoAnalysis PangoAnalysis;
typedef struct _PangoItem PangoItem;
struct _PangoAnalysis
{
  PangoEngineShape *shape_engine;
  PangoEngineLang *lang_engine;
  PangoFont *font;
  guint8 level;
  guint8 gravity;
  guint8 flags;
  guint8 script;
  PangoLanguage *language;
  GSList *extra_attrs;
};
struct _PangoItem
{
  gint offset;
  gint length;
  gint num_chars;
  PangoAnalysis analysis;
};
GType pango_item_get_type (void) __attribute__((__const__));
PangoItem *pango_item_new (void);
PangoItem *pango_item_copy (PangoItem *item);
void pango_item_free (PangoItem *item);
PangoItem *pango_item_split (PangoItem *orig,
        int split_index,
        int split_offset);
struct _PangoLogAttr
{
  guint is_line_break : 1;
  guint is_mandatory_break : 1;
  guint is_char_break : 1;
  guint is_white : 1;
  guint is_cursor_position : 1;
  guint is_word_start : 1;
  guint is_word_end : 1;
  guint is_sentence_boundary : 1;
  guint is_sentence_start : 1;
  guint is_sentence_end : 1;
  guint backspace_deletes_character : 1;
  guint is_expandable_space : 1;
  guint is_word_boundary : 1;
};
void pango_break (const gchar *text,
    int length,
    PangoAnalysis *analysis,
    PangoLogAttr *attrs,
    int attrs_len);
void pango_find_paragraph_boundary (const gchar *text,
        gint length,
        gint *paragraph_delimiter_index,
        gint *next_paragraph_start);
void pango_get_log_attrs (const char *text,
     int length,
     int level,
     PangoLanguage *language,
     PangoLogAttr *log_attrs,
     int attrs_len);
GType pango_fontset_get_type (void) __attribute__((__const__));
typedef struct _PangoFontset PangoFontset;
typedef gboolean (*PangoFontsetForeachFunc) (PangoFontset *fontset,
          PangoFont *font,
          gpointer user_data);
PangoFont * pango_fontset_get_font (PangoFontset *fontset,
          guint wc);
PangoFontMetrics *pango_fontset_get_metrics (PangoFontset *fontset);
void pango_fontset_foreach (PangoFontset *fontset,
          PangoFontsetForeachFunc func,
          gpointer data);
typedef struct _PangoContext PangoContext;
GType pango_font_map_get_type (void) __attribute__((__const__));
PangoContext * pango_font_map_create_context (PangoFontMap *fontmap);
PangoFont * pango_font_map_load_font (PangoFontMap *fontmap,
         PangoContext *context,
         const PangoFontDescription *desc);
PangoFontset *pango_font_map_load_fontset (PangoFontMap *fontmap,
         PangoContext *context,
         const PangoFontDescription *desc,
         PangoLanguage *language);
void pango_font_map_list_families (PangoFontMap *fontmap,
         PangoFontFamily ***families,
         int *n_families);
guint pango_font_map_get_serial (PangoFontMap *fontmap);
void pango_font_map_changed (PangoFontMap *fontmap);
typedef struct _PangoContextClass PangoContextClass;
GType pango_context_get_type (void) __attribute__((__const__));
PangoContext *pango_context_new (void);
void pango_context_changed (PangoContext *context);
void pango_context_set_font_map (PangoContext *context,
        PangoFontMap *font_map);
PangoFontMap *pango_context_get_font_map (PangoContext *context);
guint pango_context_get_serial (PangoContext *context);
void pango_context_list_families (PangoContext *context,
        PangoFontFamily ***families,
        int *n_families);
PangoFont * pango_context_load_font (PangoContext *context,
        const PangoFontDescription *desc);
PangoFontset *pango_context_load_fontset (PangoContext *context,
        const PangoFontDescription *desc,
        PangoLanguage *language);
PangoFontMetrics *pango_context_get_metrics (PangoContext *context,
            const PangoFontDescription *desc,
            PangoLanguage *language);
void pango_context_set_font_description (PangoContext *context,
             const PangoFontDescription *desc);
PangoFontDescription * pango_context_get_font_description (PangoContext *context);
PangoLanguage *pango_context_get_language (PangoContext *context);
void pango_context_set_language (PangoContext *context,
             PangoLanguage *language);
void pango_context_set_base_dir (PangoContext *context,
             PangoDirection direction);
PangoDirection pango_context_get_base_dir (PangoContext *context);
void pango_context_set_base_gravity (PangoContext *context,
             PangoGravity gravity);
PangoGravity pango_context_get_base_gravity (PangoContext *context);
PangoGravity pango_context_get_gravity (PangoContext *context);
void pango_context_set_gravity_hint (PangoContext *context,
             PangoGravityHint hint);
PangoGravityHint pango_context_get_gravity_hint (PangoContext *context);
void pango_context_set_matrix (PangoContext *context,
                    const PangoMatrix *matrix);
const PangoMatrix * pango_context_get_matrix (PangoContext *context);
GList *pango_itemize (PangoContext *context,
         const char *text,
         int start_index,
         int length,
         PangoAttrList *attrs,
         PangoAttrIterator *cached_iter);
GList *pango_itemize_with_base_dir (PangoContext *context,
         PangoDirection base_dir,
         const char *text,
         int start_index,
         int length,
         PangoAttrList *attrs,
         PangoAttrIterator *cached_iter);
typedef struct _PangoGlyphGeometry PangoGlyphGeometry;
typedef struct _PangoGlyphVisAttr PangoGlyphVisAttr;
typedef struct _PangoGlyphInfo PangoGlyphInfo;
typedef struct _PangoGlyphString PangoGlyphString;
typedef gint32 PangoGlyphUnit;
struct _PangoGlyphGeometry
{
  PangoGlyphUnit width;
  PangoGlyphUnit x_offset;
  PangoGlyphUnit y_offset;
};
struct _PangoGlyphVisAttr
{
  guint is_cluster_start : 1;
};
struct _PangoGlyphInfo
{
  PangoGlyph glyph;
  PangoGlyphGeometry geometry;
  PangoGlyphVisAttr attr;
};
struct _PangoGlyphString {
  gint num_glyphs;
  PangoGlyphInfo *glyphs;
  gint *log_clusters;
  gint space;
};
PangoGlyphString *pango_glyph_string_new (void);
void pango_glyph_string_set_size (PangoGlyphString *string,
            gint new_len);
GType pango_glyph_string_get_type (void) __attribute__((__const__));
PangoGlyphString *pango_glyph_string_copy (PangoGlyphString *string);
void pango_glyph_string_free (PangoGlyphString *string);
void pango_glyph_string_extents (PangoGlyphString *glyphs,
            PangoFont *font,
            PangoRectangle *ink_rect,
            PangoRectangle *logical_rect);
int pango_glyph_string_get_width(PangoGlyphString *glyphs);
void pango_glyph_string_extents_range (PangoGlyphString *glyphs,
           int start,
           int end,
           PangoFont *font,
           PangoRectangle *ink_rect,
           PangoRectangle *logical_rect);
void pango_glyph_string_get_logical_widths (PangoGlyphString *glyphs,
         const char *text,
         int length,
         int embedding_level,
         int *logical_widths);
void pango_glyph_string_index_to_x (PangoGlyphString *glyphs,
        char *text,
        int length,
        PangoAnalysis *analysis,
        int index_,
        gboolean trailing,
        int *x_pos);
void pango_glyph_string_x_to_index (PangoGlyphString *glyphs,
        char *text,
        int length,
        PangoAnalysis *analysis,
        int x_pos,
        int *index_,
        int *trailing);
void pango_shape (const gchar *text,
    gint length,
    const PangoAnalysis *analysis,
    PangoGlyphString *glyphs);
void pango_shape_full (const gchar *item_text,
         gint item_length,
         const gchar *paragraph_text,
         gint paragraph_length,
         const PangoAnalysis *analysis,
         PangoGlyphString *glyphs);
GList *pango_reorder_items (GList *logical_items);
GType pango_attr_type_get_type (void) __attribute__((__const__));
GType pango_underline_get_type (void) __attribute__((__const__));
GType pango_bidi_type_get_type (void) __attribute__((__const__));
GType pango_direction_get_type (void) __attribute__((__const__));
GType pango_coverage_level_get_type (void) __attribute__((__const__));
GType pango_style_get_type (void) __attribute__((__const__));
GType pango_variant_get_type (void) __attribute__((__const__));
GType pango_weight_get_type (void) __attribute__((__const__));
GType pango_stretch_get_type (void) __attribute__((__const__));
GType pango_font_mask_get_type (void) __attribute__((__const__));
GType pango_gravity_get_type (void) __attribute__((__const__));
GType pango_gravity_hint_get_type (void) __attribute__((__const__));
GType pango_alignment_get_type (void) __attribute__((__const__));
GType pango_wrap_mode_get_type (void) __attribute__((__const__));
GType pango_ellipsize_mode_get_type (void) __attribute__((__const__));
GType pango_render_part_get_type (void) __attribute__((__const__));
GType pango_script_get_type (void) __attribute__((__const__));
GType pango_tab_align_get_type (void) __attribute__((__const__));
typedef struct _PangoGlyphItem PangoGlyphItem;
struct _PangoGlyphItem
{
  PangoItem *item;
  PangoGlyphString *glyphs;
};
GType pango_glyph_item_get_type (void) __attribute__((__const__));
PangoGlyphItem *pango_glyph_item_split (PangoGlyphItem *orig,
            const char *text,
            int split_index);
PangoGlyphItem *pango_glyph_item_copy (PangoGlyphItem *orig);
void pango_glyph_item_free (PangoGlyphItem *glyph_item);
GSList * pango_glyph_item_apply_attrs (PangoGlyphItem *glyph_item,
            const char *text,
            PangoAttrList *list);
void pango_glyph_item_letter_space (PangoGlyphItem *glyph_item,
            const char *text,
            PangoLogAttr *log_attrs,
            int letter_spacing);
void pango_glyph_item_get_logical_widths (PangoGlyphItem *glyph_item,
            const char *text,
            int *logical_widths);
typedef struct _PangoGlyphItemIter PangoGlyphItemIter;
struct _PangoGlyphItemIter
{
  PangoGlyphItem *glyph_item;
  const gchar *text;
  int start_glyph;
  int start_index;
  int start_char;
  int end_glyph;
  int end_index;
  int end_char;
};
GType pango_glyph_item_iter_get_type (void) __attribute__((__const__));
PangoGlyphItemIter *pango_glyph_item_iter_copy (PangoGlyphItemIter *orig);
void pango_glyph_item_iter_free (PangoGlyphItemIter *iter);
gboolean pango_glyph_item_iter_init_start (PangoGlyphItemIter *iter,
          PangoGlyphItem *glyph_item,
          const char *text);
gboolean pango_glyph_item_iter_init_end (PangoGlyphItemIter *iter,
          PangoGlyphItem *glyph_item,
          const char *text);
gboolean pango_glyph_item_iter_next_cluster (PangoGlyphItemIter *iter);
gboolean pango_glyph_item_iter_prev_cluster (PangoGlyphItemIter *iter);
typedef struct _PangoTabArray PangoTabArray;
typedef enum
{
  PANGO_TAB_LEFT
} PangoTabAlign;
PangoTabArray *pango_tab_array_new (gint initial_size,
           gboolean positions_in_pixels);
PangoTabArray *pango_tab_array_new_with_positions (gint size,
           gboolean positions_in_pixels,
           PangoTabAlign first_alignment,
           gint first_position,
           ...);
GType pango_tab_array_get_type (void) __attribute__((__const__));
PangoTabArray *pango_tab_array_copy (PangoTabArray *src);
void pango_tab_array_free (PangoTabArray *tab_array);
gint pango_tab_array_get_size (PangoTabArray *tab_array);
void pango_tab_array_resize (PangoTabArray *tab_array,
           gint new_size);
void pango_tab_array_set_tab (PangoTabArray *tab_array,
           gint tab_index,
           PangoTabAlign alignment,
           gint location);
void pango_tab_array_get_tab (PangoTabArray *tab_array,
           gint tab_index,
           PangoTabAlign *alignment,
           gint *location);
void pango_tab_array_get_tabs (PangoTabArray *tab_array,
           PangoTabAlign **alignments,
           gint **locations);
gboolean pango_tab_array_get_positions_in_pixels (PangoTabArray *tab_array);
typedef struct _PangoLayout PangoLayout;
typedef struct _PangoLayoutClass PangoLayoutClass;
typedef struct _PangoLayoutLine PangoLayoutLine;
typedef PangoGlyphItem PangoLayoutRun;
typedef enum {
  PANGO_ALIGN_LEFT,
  PANGO_ALIGN_CENTER,
  PANGO_ALIGN_RIGHT
} PangoAlignment;
typedef enum {
  PANGO_WRAP_WORD,
  PANGO_WRAP_CHAR,
  PANGO_WRAP_WORD_CHAR
} PangoWrapMode;
typedef enum {
  PANGO_ELLIPSIZE_NONE,
  PANGO_ELLIPSIZE_START,
  PANGO_ELLIPSIZE_MIDDLE,
  PANGO_ELLIPSIZE_END
} PangoEllipsizeMode;
struct _PangoLayoutLine
{
  PangoLayout *layout;
  gint start_index;
  gint length;
  GSList *runs;
  guint is_paragraph_start : 1;
  guint resolved_dir : 3;
};
GType pango_layout_get_type (void) __attribute__((__const__));
PangoLayout *pango_layout_new (PangoContext *context);
PangoLayout *pango_layout_copy (PangoLayout *src);
PangoContext *pango_layout_get_context (PangoLayout *layout);
void pango_layout_set_attributes (PangoLayout *layout,
         PangoAttrList *attrs);
PangoAttrList *pango_layout_get_attributes (PangoLayout *layout);
void pango_layout_set_text (PangoLayout *layout,
         const char *text,
         int length);
const char *pango_layout_get_text (PangoLayout *layout);
gint pango_layout_get_character_count (PangoLayout *layout);
void pango_layout_set_markup (PangoLayout *layout,
         const char *markup,
         int length);
void pango_layout_set_markup_with_accel (PangoLayout *layout,
         const char *markup,
         int length,
         gunichar accel_marker,
         gunichar *accel_char);
void pango_layout_set_font_description (PangoLayout *layout,
        const PangoFontDescription *desc);
const PangoFontDescription *pango_layout_get_font_description (PangoLayout *layout);
void pango_layout_set_width (PangoLayout *layout,
        int width);
int pango_layout_get_width (PangoLayout *layout);
void pango_layout_set_height (PangoLayout *layout,
        int height);
int pango_layout_get_height (PangoLayout *layout);
void pango_layout_set_wrap (PangoLayout *layout,
        PangoWrapMode wrap);
PangoWrapMode pango_layout_get_wrap (PangoLayout *layout);
gboolean pango_layout_is_wrapped (PangoLayout *layout);
void pango_layout_set_indent (PangoLayout *layout,
        int indent);
int pango_layout_get_indent (PangoLayout *layout);
void pango_layout_set_spacing (PangoLayout *layout,
        int spacing);
int pango_layout_get_spacing (PangoLayout *layout);
void pango_layout_set_justify (PangoLayout *layout,
        gboolean justify);
gboolean pango_layout_get_justify (PangoLayout *layout);
void pango_layout_set_auto_dir (PangoLayout *layout,
        gboolean auto_dir);
gboolean pango_layout_get_auto_dir (PangoLayout *layout);
void pango_layout_set_alignment (PangoLayout *layout,
        PangoAlignment alignment);
PangoAlignment pango_layout_get_alignment (PangoLayout *layout);
void pango_layout_set_tabs (PangoLayout *layout,
        PangoTabArray *tabs);
PangoTabArray* pango_layout_get_tabs (PangoLayout *layout);
void pango_layout_set_single_paragraph_mode (PangoLayout *layout,
             gboolean setting);
gboolean pango_layout_get_single_paragraph_mode (PangoLayout *layout);
void pango_layout_set_ellipsize (PangoLayout *layout,
            PangoEllipsizeMode ellipsize);
PangoEllipsizeMode pango_layout_get_ellipsize (PangoLayout *layout);
gboolean pango_layout_is_ellipsized (PangoLayout *layout);
int pango_layout_get_unknown_glyphs_count (PangoLayout *layout);
void pango_layout_context_changed (PangoLayout *layout);
guint pango_layout_get_serial (PangoLayout *layout);
void pango_layout_get_log_attrs (PangoLayout *layout,
         PangoLogAttr **attrs,
         gint *n_attrs);
const PangoLogAttr *pango_layout_get_log_attrs_readonly (PangoLayout *layout,
        gint *n_attrs);
void pango_layout_index_to_pos (PangoLayout *layout,
         int index_,
         PangoRectangle *pos);
void pango_layout_index_to_line_x (PangoLayout *layout,
         int index_,
         gboolean trailing,
         int *line,
         int *x_pos);
void pango_layout_get_cursor_pos (PangoLayout *layout,
         int index_,
         PangoRectangle *strong_pos,
         PangoRectangle *weak_pos);
void pango_layout_move_cursor_visually (PangoLayout *layout,
         gboolean strong,
         int old_index,
         int old_trailing,
         int direction,
         int *new_index,
         int *new_trailing);
gboolean pango_layout_xy_to_index (PangoLayout *layout,
         int x,
         int y,
         int *index_,
         int *trailing);
void pango_layout_get_extents (PangoLayout *layout,
         PangoRectangle *ink_rect,
         PangoRectangle *logical_rect);
void pango_layout_get_pixel_extents (PangoLayout *layout,
         PangoRectangle *ink_rect,
         PangoRectangle *logical_rect);
void pango_layout_get_size (PangoLayout *layout,
         int *width,
         int *height);
void pango_layout_get_pixel_size (PangoLayout *layout,
         int *width,
         int *height);
int pango_layout_get_baseline (PangoLayout *layout);
int pango_layout_get_line_count (PangoLayout *layout);
PangoLayoutLine *pango_layout_get_line (PangoLayout *layout,
          int line);
PangoLayoutLine *pango_layout_get_line_readonly (PangoLayout *layout,
          int line);
GSList * pango_layout_get_lines (PangoLayout *layout);
GSList * pango_layout_get_lines_readonly (PangoLayout *layout);
GType pango_layout_line_get_type (void) __attribute__((__const__));
PangoLayoutLine *pango_layout_line_ref (PangoLayoutLine *line);
void pango_layout_line_unref (PangoLayoutLine *line);
gboolean pango_layout_line_x_to_index (PangoLayoutLine *line,
      int x_pos,
      int *index_,
      int *trailing);
void pango_layout_line_index_to_x (PangoLayoutLine *line,
      int index_,
      gboolean trailing,
      int *x_pos);
void pango_layout_line_get_x_ranges (PangoLayoutLine *line,
      int start_index,
      int end_index,
      int **ranges,
      int *n_ranges);
void pango_layout_line_get_extents (PangoLayoutLine *line,
      PangoRectangle *ink_rect,
      PangoRectangle *logical_rect);
void pango_layout_line_get_pixel_extents (PangoLayoutLine *layout_line,
           PangoRectangle *ink_rect,
           PangoRectangle *logical_rect);
typedef struct _PangoLayoutIter PangoLayoutIter;
GType pango_layout_iter_get_type (void) __attribute__((__const__));
PangoLayoutIter *pango_layout_get_iter (PangoLayout *layout);
PangoLayoutIter *pango_layout_iter_copy (PangoLayoutIter *iter);
void pango_layout_iter_free (PangoLayoutIter *iter);
int pango_layout_iter_get_index (PangoLayoutIter *iter);
PangoLayoutRun *pango_layout_iter_get_run (PangoLayoutIter *iter);
PangoLayoutRun *pango_layout_iter_get_run_readonly (PangoLayoutIter *iter);
PangoLayoutLine *pango_layout_iter_get_line (PangoLayoutIter *iter);
PangoLayoutLine *pango_layout_iter_get_line_readonly (PangoLayoutIter *iter);
gboolean pango_layout_iter_at_last_line (PangoLayoutIter *iter);
PangoLayout *pango_layout_iter_get_layout (PangoLayoutIter *iter);
gboolean pango_layout_iter_next_char (PangoLayoutIter *iter);
gboolean pango_layout_iter_next_cluster (PangoLayoutIter *iter);
gboolean pango_layout_iter_next_run (PangoLayoutIter *iter);
gboolean pango_layout_iter_next_line (PangoLayoutIter *iter);
void pango_layout_iter_get_char_extents (PangoLayoutIter *iter,
         PangoRectangle *logical_rect);
void pango_layout_iter_get_cluster_extents (PangoLayoutIter *iter,
         PangoRectangle *ink_rect,
         PangoRectangle *logical_rect);
void pango_layout_iter_get_run_extents (PangoLayoutIter *iter,
         PangoRectangle *ink_rect,
         PangoRectangle *logical_rect);
void pango_layout_iter_get_line_extents (PangoLayoutIter *iter,
         PangoRectangle *ink_rect,
         PangoRectangle *logical_rect);
void pango_layout_iter_get_line_yrange (PangoLayoutIter *iter,
         int *y0_,
         int *y1_);
void pango_layout_iter_get_layout_extents (PangoLayoutIter *iter,
         PangoRectangle *ink_rect,
         PangoRectangle *logical_rect);
int pango_layout_iter_get_baseline (PangoLayoutIter *iter);
typedef struct _PangoRenderer PangoRenderer;
typedef struct _PangoRendererClass PangoRendererClass;
typedef struct _PangoRendererPrivate PangoRendererPrivate;
typedef enum
{
  PANGO_RENDER_PART_FOREGROUND,
  PANGO_RENDER_PART_BACKGROUND,
  PANGO_RENDER_PART_UNDERLINE,
  PANGO_RENDER_PART_STRIKETHROUGH
} PangoRenderPart;
struct _PangoRenderer
{
  GObject parent_instance;
  PangoUnderline underline;
  gboolean strikethrough;
  int active_count;
  PangoMatrix *matrix;
  PangoRendererPrivate *priv;
};
struct _PangoRendererClass
{
  GObjectClass parent_class;
  void (*draw_glyphs) (PangoRenderer *renderer,
         PangoFont *font,
         PangoGlyphString *glyphs,
         int x,
         int y);
  void (*draw_rectangle) (PangoRenderer *renderer,
     PangoRenderPart part,
     int x,
     int y,
     int width,
     int height);
  void (*draw_error_underline) (PangoRenderer *renderer,
    int x,
    int y,
    int width,
    int height);
  void (*draw_shape) (PangoRenderer *renderer,
        PangoAttrShape *attr,
        int x,
        int y);
  void (*draw_trapezoid) (PangoRenderer *renderer,
     PangoRenderPart part,
     double y1_,
     double x11,
     double x21,
     double y2,
     double x12,
     double x22);
  void (*draw_glyph) (PangoRenderer *renderer,
        PangoFont *font,
        PangoGlyph glyph,
        double x,
        double y);
  void (*part_changed) (PangoRenderer *renderer,
   PangoRenderPart part);
  void (*begin) (PangoRenderer *renderer);
  void (*end) (PangoRenderer *renderer);
  void (*prepare_run) (PangoRenderer *renderer,
         PangoLayoutRun *run);
  void (*draw_glyph_item) (PangoRenderer *renderer,
      const char *text,
      PangoGlyphItem *glyph_item,
      int x,
      int y);
  void (*_pango_reserved2) (void);
  void (*_pango_reserved3) (void);
  void (*_pango_reserved4) (void);
};
GType pango_renderer_get_type (void) __attribute__((__const__));
void pango_renderer_draw_layout (PangoRenderer *renderer,
       PangoLayout *layout,
       int x,
       int y);
void pango_renderer_draw_layout_line (PangoRenderer *renderer,
       PangoLayoutLine *line,
       int x,
       int y);
void pango_renderer_draw_glyphs (PangoRenderer *renderer,
       PangoFont *font,
       PangoGlyphString *glyphs,
       int x,
       int y);
void pango_renderer_draw_glyph_item (PangoRenderer *renderer,
       const char *text,
       PangoGlyphItem *glyph_item,
       int x,
       int y);
void pango_renderer_draw_rectangle (PangoRenderer *renderer,
       PangoRenderPart part,
       int x,
       int y,
       int width,
       int height);
void pango_renderer_draw_error_underline (PangoRenderer *renderer,
       int x,
       int y,
       int width,
       int height);
void pango_renderer_draw_trapezoid (PangoRenderer *renderer,
       PangoRenderPart part,
       double y1_,
       double x11,
       double x21,
       double y2,
       double x12,
       double x22);
void pango_renderer_draw_glyph (PangoRenderer *renderer,
       PangoFont *font,
       PangoGlyph glyph,
       double x,
       double y);
void pango_renderer_activate (PangoRenderer *renderer);
void pango_renderer_deactivate (PangoRenderer *renderer);
void pango_renderer_part_changed (PangoRenderer *renderer,
      PangoRenderPart part);
void pango_renderer_set_color (PangoRenderer *renderer,
          PangoRenderPart part,
          const PangoColor *color);
PangoColor *pango_renderer_get_color (PangoRenderer *renderer,
          PangoRenderPart part);
void pango_renderer_set_alpha (PangoRenderer *renderer,
          PangoRenderPart part,
          guint16 alpha);
guint16 pango_renderer_get_alpha (PangoRenderer *renderer,
          PangoRenderPart part);
void pango_renderer_set_matrix (PangoRenderer *renderer,
             const PangoMatrix *matrix);
const PangoMatrix *pango_renderer_get_matrix (PangoRenderer *renderer);
PangoLayout *pango_renderer_get_layout (PangoRenderer *renderer);
PangoLayoutLine *pango_renderer_get_layout_line (PangoRenderer *renderer);
__attribute__((__deprecated__))
char ** pango_split_file_list (const char *str);
__attribute__((__deprecated__))
char *pango_trim_string (const char *str);
__attribute__((__deprecated__))
gint pango_read_line (FILE *stream,
          GString *str);
__attribute__((__deprecated__))
gboolean pango_skip_space (const char **pos);
__attribute__((__deprecated__))
gboolean pango_scan_word (const char **pos,
          GString *out);
__attribute__((__deprecated__))
gboolean pango_scan_string (const char **pos,
          GString *out);
__attribute__((__deprecated__))
gboolean pango_scan_int (const char **pos,
          int *out);
__attribute__((__deprecated__))
gboolean pango_parse_enum (GType type,
          const char *str,
          int *value,
          gboolean warn,
          char **possible_values);
gboolean pango_parse_style (const char *str,
         PangoStyle *style,
         gboolean warn);
gboolean pango_parse_variant (const char *str,
         PangoVariant *variant,
         gboolean warn);
gboolean pango_parse_weight (const char *str,
         PangoWeight *weight,
         gboolean warn);
gboolean pango_parse_stretch (const char *str,
         PangoStretch *stretch,
         gboolean warn);
void pango_quantize_line_geometry (int *thickness,
       int *position);
guint8 * pango_log2vis_get_embedding_levels (const gchar *text,
          int length,
          PangoDirection *pbase_dir);
gboolean pango_is_zero_width (gunichar ch) __attribute__((__const__));
int pango_version (void) __attribute__((__const__));
const char * pango_version_string (void) __attribute__((__const__));
const char * pango_version_check (int required_major,
                                  int required_minor,
                                  int required_micro) __attribute__((__const__));
 int
cairo_version (void);
 const char*
cairo_version_string (void);
typedef int cairo_bool_t;
typedef struct _cairo cairo_t;
typedef struct _cairo_surface cairo_surface_t;
typedef struct _cairo_device cairo_device_t;
typedef struct _cairo_matrix {
    double xx; double yx;
    double xy; double yy;
    double x0; double y0;
} cairo_matrix_t;
typedef struct _cairo_pattern cairo_pattern_t;
typedef void (*cairo_destroy_func_t) (void *data);
typedef struct _cairo_user_data_key {
    int unused;
} cairo_user_data_key_t;
typedef enum _cairo_status {
    CAIRO_STATUS_SUCCESS = 0,
    CAIRO_STATUS_NO_MEMORY,
    CAIRO_STATUS_INVALID_RESTORE,
    CAIRO_STATUS_INVALID_POP_GROUP,
    CAIRO_STATUS_NO_CURRENT_POINT,
    CAIRO_STATUS_INVALID_MATRIX,
    CAIRO_STATUS_INVALID_STATUS,
    CAIRO_STATUS_NULL_POINTER,
    CAIRO_STATUS_INVALID_STRING,
    CAIRO_STATUS_INVALID_PATH_DATA,
    CAIRO_STATUS_READ_ERROR,
    CAIRO_STATUS_WRITE_ERROR,
    CAIRO_STATUS_SURFACE_FINISHED,
    CAIRO_STATUS_SURFACE_TYPE_MISMATCH,
    CAIRO_STATUS_PATTERN_TYPE_MISMATCH,
    CAIRO_STATUS_INVALID_CONTENT,
    CAIRO_STATUS_INVALID_FORMAT,
    CAIRO_STATUS_INVALID_VISUAL,
    CAIRO_STATUS_FILE_NOT_FOUND,
    CAIRO_STATUS_INVALID_DASH,
    CAIRO_STATUS_INVALID_DSC_COMMENT,
    CAIRO_STATUS_INVALID_INDEX,
    CAIRO_STATUS_CLIP_NOT_REPRESENTABLE,
    CAIRO_STATUS_TEMP_FILE_ERROR,
    CAIRO_STATUS_INVALID_STRIDE,
    CAIRO_STATUS_FONT_TYPE_MISMATCH,
    CAIRO_STATUS_USER_FONT_IMMUTABLE,
    CAIRO_STATUS_USER_FONT_ERROR,
    CAIRO_STATUS_NEGATIVE_COUNT,
    CAIRO_STATUS_INVALID_CLUSTERS,
    CAIRO_STATUS_INVALID_SLANT,
    CAIRO_STATUS_INVALID_WEIGHT,
    CAIRO_STATUS_INVALID_SIZE,
    CAIRO_STATUS_USER_FONT_NOT_IMPLEMENTED,
    CAIRO_STATUS_DEVICE_TYPE_MISMATCH,
    CAIRO_STATUS_DEVICE_ERROR,
    CAIRO_STATUS_INVALID_MESH_CONSTRUCTION,
    CAIRO_STATUS_DEVICE_FINISHED,
    CAIRO_STATUS_JBIG2_GLOBAL_MISSING,
    CAIRO_STATUS_LAST_STATUS
} cairo_status_t;
typedef enum _cairo_content {
    CAIRO_CONTENT_COLOR = 0x1000,
    CAIRO_CONTENT_ALPHA = 0x2000,
    CAIRO_CONTENT_COLOR_ALPHA = 0x3000
} cairo_content_t;
typedef enum _cairo_format {
    CAIRO_FORMAT_INVALID = -1,
    CAIRO_FORMAT_ARGB32 = 0,
    CAIRO_FORMAT_RGB24 = 1,
    CAIRO_FORMAT_A8 = 2,
    CAIRO_FORMAT_A1 = 3,
    CAIRO_FORMAT_RGB16_565 = 4,
    CAIRO_FORMAT_RGB30 = 5
} cairo_format_t;
typedef cairo_status_t (*cairo_write_func_t) (void *closure,
           const unsigned char *data,
           unsigned int length);
typedef cairo_status_t (*cairo_read_func_t) (void *closure,
          unsigned char *data,
          unsigned int length);
typedef struct _cairo_rectangle_int {
    int x, y;
    int width, height;
} cairo_rectangle_int_t;
 cairo_t *
cairo_create (cairo_surface_t *target);
 cairo_t *
cairo_reference (cairo_t *cr);
 void
cairo_destroy (cairo_t *cr);
 unsigned int
cairo_get_reference_count (cairo_t *cr);
 void *
cairo_get_user_data (cairo_t *cr,
       const cairo_user_data_key_t *key);
 cairo_status_t
cairo_set_user_data (cairo_t *cr,
       const cairo_user_data_key_t *key,
       void *user_data,
       cairo_destroy_func_t destroy);
 void
cairo_save (cairo_t *cr);
 void
cairo_restore (cairo_t *cr);
 void
cairo_push_group (cairo_t *cr);
 void
cairo_push_group_with_content (cairo_t *cr, cairo_content_t content);
 cairo_pattern_t *
cairo_pop_group (cairo_t *cr);
 void
cairo_pop_group_to_source (cairo_t *cr);
typedef enum _cairo_operator {
    CAIRO_OPERATOR_CLEAR,
    CAIRO_OPERATOR_SOURCE,
    CAIRO_OPERATOR_OVER,
    CAIRO_OPERATOR_IN,
    CAIRO_OPERATOR_OUT,
    CAIRO_OPERATOR_ATOP,
    CAIRO_OPERATOR_DEST,
    CAIRO_OPERATOR_DEST_OVER,
    CAIRO_OPERATOR_DEST_IN,
    CAIRO_OPERATOR_DEST_OUT,
    CAIRO_OPERATOR_DEST_ATOP,
    CAIRO_OPERATOR_XOR,
    CAIRO_OPERATOR_ADD,
    CAIRO_OPERATOR_SATURATE,
    CAIRO_OPERATOR_MULTIPLY,
    CAIRO_OPERATOR_SCREEN,
    CAIRO_OPERATOR_OVERLAY,
    CAIRO_OPERATOR_DARKEN,
    CAIRO_OPERATOR_LIGHTEN,
    CAIRO_OPERATOR_COLOR_DODGE,
    CAIRO_OPERATOR_COLOR_BURN,
    CAIRO_OPERATOR_HARD_LIGHT,
    CAIRO_OPERATOR_SOFT_LIGHT,
    CAIRO_OPERATOR_DIFFERENCE,
    CAIRO_OPERATOR_EXCLUSION,
    CAIRO_OPERATOR_HSL_HUE,
    CAIRO_OPERATOR_HSL_SATURATION,
    CAIRO_OPERATOR_HSL_COLOR,
    CAIRO_OPERATOR_HSL_LUMINOSITY
} cairo_operator_t;
 void
cairo_set_operator (cairo_t *cr, cairo_operator_t op);
 void
cairo_set_source (cairo_t *cr, cairo_pattern_t *source);
 void
cairo_set_source_rgb (cairo_t *cr, double red, double green, double blue);
 void
cairo_set_source_rgba (cairo_t *cr,
         double red, double green, double blue,
         double alpha);
 void
cairo_set_source_surface (cairo_t *cr,
     cairo_surface_t *surface,
     double x,
     double y);
 void
cairo_set_tolerance (cairo_t *cr, double tolerance);
typedef enum _cairo_antialias {
    CAIRO_ANTIALIAS_DEFAULT,
    CAIRO_ANTIALIAS_NONE,
    CAIRO_ANTIALIAS_GRAY,
    CAIRO_ANTIALIAS_SUBPIXEL,
    CAIRO_ANTIALIAS_FAST,
    CAIRO_ANTIALIAS_GOOD,
    CAIRO_ANTIALIAS_BEST
} cairo_antialias_t;
 void
cairo_set_antialias (cairo_t *cr, cairo_antialias_t antialias);
typedef enum _cairo_fill_rule {
    CAIRO_FILL_RULE_WINDING,
    CAIRO_FILL_RULE_EVEN_ODD
} cairo_fill_rule_t;
 void
cairo_set_fill_rule (cairo_t *cr, cairo_fill_rule_t fill_rule);
 void
cairo_set_line_width (cairo_t *cr, double width);
typedef enum _cairo_line_cap {
    CAIRO_LINE_CAP_BUTT,
    CAIRO_LINE_CAP_ROUND,
    CAIRO_LINE_CAP_SQUARE
} cairo_line_cap_t;
 void
cairo_set_line_cap (cairo_t *cr, cairo_line_cap_t line_cap);
typedef enum _cairo_line_join {
    CAIRO_LINE_JOIN_MITER,
    CAIRO_LINE_JOIN_ROUND,
    CAIRO_LINE_JOIN_BEVEL
} cairo_line_join_t;
 void
cairo_set_line_join (cairo_t *cr, cairo_line_join_t line_join);
 void
cairo_set_dash (cairo_t *cr,
  const double *dashes,
  int num_dashes,
  double offset);
 void
cairo_set_miter_limit (cairo_t *cr, double limit);
 void
cairo_translate (cairo_t *cr, double tx, double ty);
 void
cairo_scale (cairo_t *cr, double sx, double sy);
 void
cairo_rotate (cairo_t *cr, double angle);
 void
cairo_transform (cairo_t *cr,
   const cairo_matrix_t *matrix);
 void
cairo_set_matrix (cairo_t *cr,
    const cairo_matrix_t *matrix);
 void
cairo_identity_matrix (cairo_t *cr);
 void
cairo_user_to_device (cairo_t *cr, double *x, double *y);
 void
cairo_user_to_device_distance (cairo_t *cr, double *dx, double *dy);
 void
cairo_device_to_user (cairo_t *cr, double *x, double *y);
 void
cairo_device_to_user_distance (cairo_t *cr, double *dx, double *dy);
 void
cairo_new_path (cairo_t *cr);
 void
cairo_move_to (cairo_t *cr, double x, double y);
 void
cairo_new_sub_path (cairo_t *cr);
 void
cairo_line_to (cairo_t *cr, double x, double y);
 void
cairo_curve_to (cairo_t *cr,
  double x1, double y1,
  double x2, double y2,
  double x3, double y3);
 void
cairo_arc (cairo_t *cr,
    double xc, double yc,
    double radius,
    double angle1, double angle2);
 void
cairo_arc_negative (cairo_t *cr,
      double xc, double yc,
      double radius,
      double angle1, double angle2);
 void
cairo_rel_move_to (cairo_t *cr, double dx, double dy);
 void
cairo_rel_line_to (cairo_t *cr, double dx, double dy);
 void
cairo_rel_curve_to (cairo_t *cr,
      double dx1, double dy1,
      double dx2, double dy2,
      double dx3, double dy3);
 void
cairo_rectangle (cairo_t *cr,
   double x, double y,
   double width, double height);
 void
cairo_close_path (cairo_t *cr);
 void
cairo_path_extents (cairo_t *cr,
      double *x1, double *y1,
      double *x2, double *y2);
 void
cairo_paint (cairo_t *cr);
 void
cairo_paint_with_alpha (cairo_t *cr,
   double alpha);
 void
cairo_mask (cairo_t *cr,
     cairo_pattern_t *pattern);
 void
cairo_mask_surface (cairo_t *cr,
      cairo_surface_t *surface,
      double surface_x,
      double surface_y);
 void
cairo_stroke (cairo_t *cr);
 void
cairo_stroke_preserve (cairo_t *cr);
 void
cairo_fill (cairo_t *cr);
 void
cairo_fill_preserve (cairo_t *cr);
 void
cairo_copy_page (cairo_t *cr);
 void
cairo_show_page (cairo_t *cr);
 cairo_bool_t
cairo_in_stroke (cairo_t *cr, double x, double y);
 cairo_bool_t
cairo_in_fill (cairo_t *cr, double x, double y);
 cairo_bool_t
cairo_in_clip (cairo_t *cr, double x, double y);
 void
cairo_stroke_extents (cairo_t *cr,
        double *x1, double *y1,
        double *x2, double *y2);
 void
cairo_fill_extents (cairo_t *cr,
      double *x1, double *y1,
      double *x2, double *y2);
 void
cairo_reset_clip (cairo_t *cr);
 void
cairo_clip (cairo_t *cr);
 void
cairo_clip_preserve (cairo_t *cr);
 void
cairo_clip_extents (cairo_t *cr,
      double *x1, double *y1,
      double *x2, double *y2);
typedef struct _cairo_rectangle {
    double x, y, width, height;
} cairo_rectangle_t;
typedef struct _cairo_rectangle_list {
    cairo_status_t status;
    cairo_rectangle_t *rectangles;
    int num_rectangles;
} cairo_rectangle_list_t;
 cairo_rectangle_list_t *
cairo_copy_clip_rectangle_list (cairo_t *cr);
 void
cairo_rectangle_list_destroy (cairo_rectangle_list_t *rectangle_list);
typedef struct _cairo_scaled_font cairo_scaled_font_t;
typedef struct _cairo_font_face cairo_font_face_t;
typedef struct {
    unsigned long index;
    double x;
    double y;
} cairo_glyph_t;
 cairo_glyph_t *
cairo_glyph_allocate (int num_glyphs);
 void
cairo_glyph_free (cairo_glyph_t *glyphs);
typedef struct {
    int num_bytes;
    int num_glyphs;
} cairo_text_cluster_t;
 cairo_text_cluster_t *
cairo_text_cluster_allocate (int num_clusters);
 void
cairo_text_cluster_free (cairo_text_cluster_t *clusters);
typedef enum _cairo_text_cluster_flags {
    CAIRO_TEXT_CLUSTER_FLAG_BACKWARD = 0x00000001
} cairo_text_cluster_flags_t;
typedef struct {
    double x_bearing;
    double y_bearing;
    double width;
    double height;
    double x_advance;
    double y_advance;
} cairo_text_extents_t;
typedef struct {
    double ascent;
    double descent;
    double height;
    double max_x_advance;
    double max_y_advance;
} cairo_font_extents_t;
typedef enum _cairo_font_slant {
    CAIRO_FONT_SLANT_NORMAL,
    CAIRO_FONT_SLANT_ITALIC,
    CAIRO_FONT_SLANT_OBLIQUE
} cairo_font_slant_t;
typedef enum _cairo_font_weight {
    CAIRO_FONT_WEIGHT_NORMAL,
    CAIRO_FONT_WEIGHT_BOLD
} cairo_font_weight_t;
typedef enum _cairo_subpixel_order {
    CAIRO_SUBPIXEL_ORDER_DEFAULT,
    CAIRO_SUBPIXEL_ORDER_RGB,
    CAIRO_SUBPIXEL_ORDER_BGR,
    CAIRO_SUBPIXEL_ORDER_VRGB,
    CAIRO_SUBPIXEL_ORDER_VBGR
} cairo_subpixel_order_t;
typedef enum _cairo_hint_style {
    CAIRO_HINT_STYLE_DEFAULT,
    CAIRO_HINT_STYLE_NONE,
    CAIRO_HINT_STYLE_SLIGHT,
    CAIRO_HINT_STYLE_MEDIUM,
    CAIRO_HINT_STYLE_FULL
} cairo_hint_style_t;
typedef enum _cairo_hint_metrics {
    CAIRO_HINT_METRICS_DEFAULT,
    CAIRO_HINT_METRICS_OFF,
    CAIRO_HINT_METRICS_ON
} cairo_hint_metrics_t;
typedef struct _cairo_font_options cairo_font_options_t;
 cairo_font_options_t *
cairo_font_options_create (void);
 cairo_font_options_t *
cairo_font_options_copy (const cairo_font_options_t *original);
 void
cairo_font_options_destroy (cairo_font_options_t *options);
 cairo_status_t
cairo_font_options_status (cairo_font_options_t *options);
 void
cairo_font_options_merge (cairo_font_options_t *options,
     const cairo_font_options_t *other);
 cairo_bool_t
cairo_font_options_equal (const cairo_font_options_t *options,
     const cairo_font_options_t *other);
 unsigned long
cairo_font_options_hash (const cairo_font_options_t *options);
 void
cairo_font_options_set_antialias (cairo_font_options_t *options,
      cairo_antialias_t antialias);
 cairo_antialias_t
cairo_font_options_get_antialias (const cairo_font_options_t *options);
 void
cairo_font_options_set_subpixel_order (cairo_font_options_t *options,
           cairo_subpixel_order_t subpixel_order);
 cairo_subpixel_order_t
cairo_font_options_get_subpixel_order (const cairo_font_options_t *options);
 void
cairo_font_options_set_hint_style (cairo_font_options_t *options,
       cairo_hint_style_t hint_style);
 cairo_hint_style_t
cairo_font_options_get_hint_style (const cairo_font_options_t *options);
 void
cairo_font_options_set_hint_metrics (cairo_font_options_t *options,
         cairo_hint_metrics_t hint_metrics);
 cairo_hint_metrics_t
cairo_font_options_get_hint_metrics (const cairo_font_options_t *options);
 void
cairo_select_font_face (cairo_t *cr,
   const char *family,
   cairo_font_slant_t slant,
   cairo_font_weight_t weight);
 void
cairo_set_font_size (cairo_t *cr, double size);
 void
cairo_set_font_matrix (cairo_t *cr,
         const cairo_matrix_t *matrix);
 void
cairo_get_font_matrix (cairo_t *cr,
         cairo_matrix_t *matrix);
 void
cairo_set_font_options (cairo_t *cr,
   const cairo_font_options_t *options);
 void
cairo_get_font_options (cairo_t *cr,
   cairo_font_options_t *options);
 void
cairo_set_font_face (cairo_t *cr, cairo_font_face_t *font_face);
 cairo_font_face_t *
cairo_get_font_face (cairo_t *cr);
 void
cairo_set_scaled_font (cairo_t *cr,
         const cairo_scaled_font_t *scaled_font);
 cairo_scaled_font_t *
cairo_get_scaled_font (cairo_t *cr);
 void
cairo_show_text (cairo_t *cr, const char *utf8);
 void
cairo_show_glyphs (cairo_t *cr, const cairo_glyph_t *glyphs, int num_glyphs);
 void
cairo_show_text_glyphs (cairo_t *cr,
   const char *utf8,
   int utf8_len,
   const cairo_glyph_t *glyphs,
   int num_glyphs,
   const cairo_text_cluster_t *clusters,
   int num_clusters,
   cairo_text_cluster_flags_t cluster_flags);
 void
cairo_text_path (cairo_t *cr, const char *utf8);
 void
cairo_glyph_path (cairo_t *cr, const cairo_glyph_t *glyphs, int num_glyphs);
 void
cairo_text_extents (cairo_t *cr,
      const char *utf8,
      cairo_text_extents_t *extents);
 void
cairo_glyph_extents (cairo_t *cr,
       const cairo_glyph_t *glyphs,
       int num_glyphs,
       cairo_text_extents_t *extents);
 void
cairo_font_extents (cairo_t *cr,
      cairo_font_extents_t *extents);
 cairo_font_face_t *
cairo_font_face_reference (cairo_font_face_t *font_face);
 void
cairo_font_face_destroy (cairo_font_face_t *font_face);
 unsigned int
cairo_font_face_get_reference_count (cairo_font_face_t *font_face);
 cairo_status_t
cairo_font_face_status (cairo_font_face_t *font_face);
typedef enum _cairo_font_type {
    CAIRO_FONT_TYPE_TOY,
    CAIRO_FONT_TYPE_FT,
    CAIRO_FONT_TYPE_WIN32,
    CAIRO_FONT_TYPE_QUARTZ,
    CAIRO_FONT_TYPE_USER
} cairo_font_type_t;
 cairo_font_type_t
cairo_font_face_get_type (cairo_font_face_t *font_face);
 void *
cairo_font_face_get_user_data (cairo_font_face_t *font_face,
          const cairo_user_data_key_t *key);
 cairo_status_t
cairo_font_face_set_user_data (cairo_font_face_t *font_face,
          const cairo_user_data_key_t *key,
          void *user_data,
          cairo_destroy_func_t destroy);
 cairo_scaled_font_t *
cairo_scaled_font_create (cairo_font_face_t *font_face,
     const cairo_matrix_t *font_matrix,
     const cairo_matrix_t *ctm,
     const cairo_font_options_t *options);
 cairo_scaled_font_t *
cairo_scaled_font_reference (cairo_scaled_font_t *scaled_font);
 void
cairo_scaled_font_destroy (cairo_scaled_font_t *scaled_font);
 unsigned int
cairo_scaled_font_get_reference_count (cairo_scaled_font_t *scaled_font);
 cairo_status_t
cairo_scaled_font_status (cairo_scaled_font_t *scaled_font);
 cairo_font_type_t
cairo_scaled_font_get_type (cairo_scaled_font_t *scaled_font);
 void *
cairo_scaled_font_get_user_data (cairo_scaled_font_t *scaled_font,
     const cairo_user_data_key_t *key);
 cairo_status_t
cairo_scaled_font_set_user_data (cairo_scaled_font_t *scaled_font,
     const cairo_user_data_key_t *key,
     void *user_data,
     cairo_destroy_func_t destroy);
 void
cairo_scaled_font_extents (cairo_scaled_font_t *scaled_font,
      cairo_font_extents_t *extents);
 void
cairo_scaled_font_text_extents (cairo_scaled_font_t *scaled_font,
    const char *utf8,
    cairo_text_extents_t *extents);
 void
cairo_scaled_font_glyph_extents (cairo_scaled_font_t *scaled_font,
     const cairo_glyph_t *glyphs,
     int num_glyphs,
     cairo_text_extents_t *extents);
 cairo_status_t
cairo_scaled_font_text_to_glyphs (cairo_scaled_font_t *scaled_font,
      double x,
      double y,
      const char *utf8,
      int utf8_len,
      cairo_glyph_t **glyphs,
      int *num_glyphs,
      cairo_text_cluster_t **clusters,
      int *num_clusters,
      cairo_text_cluster_flags_t *cluster_flags);
 cairo_font_face_t *
cairo_scaled_font_get_font_face (cairo_scaled_font_t *scaled_font);
 void
cairo_scaled_font_get_font_matrix (cairo_scaled_font_t *scaled_font,
       cairo_matrix_t *font_matrix);
 void
cairo_scaled_font_get_ctm (cairo_scaled_font_t *scaled_font,
      cairo_matrix_t *ctm);
 void
cairo_scaled_font_get_scale_matrix (cairo_scaled_font_t *scaled_font,
        cairo_matrix_t *scale_matrix);
 void
cairo_scaled_font_get_font_options (cairo_scaled_font_t *scaled_font,
        cairo_font_options_t *options);
 cairo_font_face_t *
cairo_toy_font_face_create (const char *family,
       cairo_font_slant_t slant,
       cairo_font_weight_t weight);
 const char *
cairo_toy_font_face_get_family (cairo_font_face_t *font_face);
 cairo_font_slant_t
cairo_toy_font_face_get_slant (cairo_font_face_t *font_face);
 cairo_font_weight_t
cairo_toy_font_face_get_weight (cairo_font_face_t *font_face);
 cairo_font_face_t *
cairo_user_font_face_create (void);
typedef cairo_status_t (*cairo_user_scaled_font_init_func_t) (cairo_scaled_font_t *scaled_font,
             cairo_t *cr,
             cairo_font_extents_t *extents);
typedef cairo_status_t (*cairo_user_scaled_font_render_glyph_func_t) (cairo_scaled_font_t *scaled_font,
              unsigned long glyph,
              cairo_t *cr,
              cairo_text_extents_t *extents);
typedef cairo_status_t (*cairo_user_scaled_font_text_to_glyphs_func_t) (cairo_scaled_font_t *scaled_font,
         const char *utf8,
         int utf8_len,
         cairo_glyph_t **glyphs,
         int *num_glyphs,
         cairo_text_cluster_t **clusters,
         int *num_clusters,
         cairo_text_cluster_flags_t *cluster_flags);
typedef cairo_status_t (*cairo_user_scaled_font_unicode_to_glyph_func_t) (cairo_scaled_font_t *scaled_font,
           unsigned long unicode,
           unsigned long *glyph_index);
 void
cairo_user_font_face_set_init_func (cairo_font_face_t *font_face,
        cairo_user_scaled_font_init_func_t init_func);
 void
cairo_user_font_face_set_render_glyph_func (cairo_font_face_t *font_face,
         cairo_user_scaled_font_render_glyph_func_t render_glyph_func);
 void
cairo_user_font_face_set_text_to_glyphs_func (cairo_font_face_t *font_face,
           cairo_user_scaled_font_text_to_glyphs_func_t text_to_glyphs_func);
 void
cairo_user_font_face_set_unicode_to_glyph_func (cairo_font_face_t *font_face,
             cairo_user_scaled_font_unicode_to_glyph_func_t unicode_to_glyph_func);
 cairo_user_scaled_font_init_func_t
cairo_user_font_face_get_init_func (cairo_font_face_t *font_face);
 cairo_user_scaled_font_render_glyph_func_t
cairo_user_font_face_get_render_glyph_func (cairo_font_face_t *font_face);
 cairo_user_scaled_font_text_to_glyphs_func_t
cairo_user_font_face_get_text_to_glyphs_func (cairo_font_face_t *font_face);
 cairo_user_scaled_font_unicode_to_glyph_func_t
cairo_user_font_face_get_unicode_to_glyph_func (cairo_font_face_t *font_face);
 cairo_operator_t
cairo_get_operator (cairo_t *cr);
 cairo_pattern_t *
cairo_get_source (cairo_t *cr);
 double
cairo_get_tolerance (cairo_t *cr);
 cairo_antialias_t
cairo_get_antialias (cairo_t *cr);
 cairo_bool_t
cairo_has_current_point (cairo_t *cr);
 void
cairo_get_current_point (cairo_t *cr, double *x, double *y);
 cairo_fill_rule_t
cairo_get_fill_rule (cairo_t *cr);
 double
cairo_get_line_width (cairo_t *cr);
 cairo_line_cap_t
cairo_get_line_cap (cairo_t *cr);
 cairo_line_join_t
cairo_get_line_join (cairo_t *cr);
 double
cairo_get_miter_limit (cairo_t *cr);
 int
cairo_get_dash_count (cairo_t *cr);
 void
cairo_get_dash (cairo_t *cr, double *dashes, double *offset);
 void
cairo_get_matrix (cairo_t *cr, cairo_matrix_t *matrix);
 cairo_surface_t *
cairo_get_target (cairo_t *cr);
 cairo_surface_t *
cairo_get_group_target (cairo_t *cr);
typedef enum _cairo_path_data_type {
    CAIRO_PATH_MOVE_TO,
    CAIRO_PATH_LINE_TO,
    CAIRO_PATH_CURVE_TO,
    CAIRO_PATH_CLOSE_PATH
} cairo_path_data_type_t;
typedef union _cairo_path_data_t cairo_path_data_t;
union _cairo_path_data_t {
    struct {
 cairo_path_data_type_t type;
 int length;
    } header;
    struct {
 double x, y;
    } point;
};
typedef struct cairo_path {
    cairo_status_t status;
    cairo_path_data_t *data;
    int num_data;
} cairo_path_t;
 cairo_path_t *
cairo_copy_path (cairo_t *cr);
 cairo_path_t *
cairo_copy_path_flat (cairo_t *cr);
 void
cairo_append_path (cairo_t *cr,
     const cairo_path_t *path);
 void
cairo_path_destroy (cairo_path_t *path);
 cairo_status_t
cairo_status (cairo_t *cr);
 const char *
cairo_status_to_string (cairo_status_t status);
 cairo_device_t *
cairo_device_reference (cairo_device_t *device);
typedef enum _cairo_device_type {
    CAIRO_DEVICE_TYPE_DRM,
    CAIRO_DEVICE_TYPE_GL,
    CAIRO_DEVICE_TYPE_SCRIPT,
    CAIRO_DEVICE_TYPE_XCB,
    CAIRO_DEVICE_TYPE_XLIB,
    CAIRO_DEVICE_TYPE_XML,
    CAIRO_DEVICE_TYPE_COGL,
    CAIRO_DEVICE_TYPE_WIN32,
    CAIRO_DEVICE_TYPE_INVALID = -1
} cairo_device_type_t;
 cairo_device_type_t
cairo_device_get_type (cairo_device_t *device);
 cairo_status_t
cairo_device_status (cairo_device_t *device);
 cairo_status_t
cairo_device_acquire (cairo_device_t *device);
 void
cairo_device_release (cairo_device_t *device);
 void
cairo_device_flush (cairo_device_t *device);
 void
cairo_device_finish (cairo_device_t *device);
 void
cairo_device_destroy (cairo_device_t *device);
 unsigned int
cairo_device_get_reference_count (cairo_device_t *device);
 void *
cairo_device_get_user_data (cairo_device_t *device,
       const cairo_user_data_key_t *key);
 cairo_status_t
cairo_device_set_user_data (cairo_device_t *device,
       const cairo_user_data_key_t *key,
       void *user_data,
       cairo_destroy_func_t destroy);
 cairo_surface_t *
cairo_surface_create_similar (cairo_surface_t *other,
         cairo_content_t content,
         int width,
         int height);
 cairo_surface_t *
cairo_surface_create_similar_image (cairo_surface_t *other,
        cairo_format_t format,
        int width,
        int height);
 cairo_surface_t *
cairo_surface_map_to_image (cairo_surface_t *surface,
       const cairo_rectangle_int_t *extents);
 void
cairo_surface_unmap_image (cairo_surface_t *surface,
      cairo_surface_t *image);
 cairo_surface_t *
cairo_surface_create_for_rectangle (cairo_surface_t *target,
                                    double x,
                                    double y,
                                    double width,
                                    double height);
typedef enum {
 CAIRO_SURFACE_OBSERVER_NORMAL = 0,
 CAIRO_SURFACE_OBSERVER_RECORD_OPERATIONS = 0x1
} cairo_surface_observer_mode_t;
 cairo_surface_t *
cairo_surface_create_observer (cairo_surface_t *target,
          cairo_surface_observer_mode_t mode);
typedef void (*cairo_surface_observer_callback_t) (cairo_surface_t *observer,
         cairo_surface_t *target,
         void *data);
 cairo_status_t
cairo_surface_observer_add_paint_callback (cairo_surface_t *abstract_surface,
        cairo_surface_observer_callback_t func,
        void *data);
 cairo_status_t
cairo_surface_observer_add_mask_callback (cairo_surface_t *abstract_surface,
       cairo_surface_observer_callback_t func,
       void *data);
 cairo_status_t
cairo_surface_observer_add_fill_callback (cairo_surface_t *abstract_surface,
       cairo_surface_observer_callback_t func,
       void *data);
 cairo_status_t
cairo_surface_observer_add_stroke_callback (cairo_surface_t *abstract_surface,
         cairo_surface_observer_callback_t func,
         void *data);
 cairo_status_t
cairo_surface_observer_add_glyphs_callback (cairo_surface_t *abstract_surface,
         cairo_surface_observer_callback_t func,
         void *data);
 cairo_status_t
cairo_surface_observer_add_flush_callback (cairo_surface_t *abstract_surface,
        cairo_surface_observer_callback_t func,
        void *data);
 cairo_status_t
cairo_surface_observer_add_finish_callback (cairo_surface_t *abstract_surface,
         cairo_surface_observer_callback_t func,
         void *data);
 cairo_status_t
cairo_surface_observer_print (cairo_surface_t *surface,
         cairo_write_func_t write_func,
         void *closure);
 double
cairo_surface_observer_elapsed (cairo_surface_t *surface);
 cairo_status_t
cairo_device_observer_print (cairo_device_t *device,
        cairo_write_func_t write_func,
        void *closure);
 double
cairo_device_observer_elapsed (cairo_device_t *device);
 double
cairo_device_observer_paint_elapsed (cairo_device_t *device);
 double
cairo_device_observer_mask_elapsed (cairo_device_t *device);
 double
cairo_device_observer_fill_elapsed (cairo_device_t *device);
 double
cairo_device_observer_stroke_elapsed (cairo_device_t *device);
 double
cairo_device_observer_glyphs_elapsed (cairo_device_t *device);
 cairo_surface_t *
cairo_surface_reference (cairo_surface_t *surface);
 void
cairo_surface_finish (cairo_surface_t *surface);
 void
cairo_surface_destroy (cairo_surface_t *surface);
 cairo_device_t *
cairo_surface_get_device (cairo_surface_t *surface);
 unsigned int
cairo_surface_get_reference_count (cairo_surface_t *surface);
 cairo_status_t
cairo_surface_status (cairo_surface_t *surface);
typedef enum _cairo_surface_type {
    CAIRO_SURFACE_TYPE_IMAGE,
    CAIRO_SURFACE_TYPE_PDF,
    CAIRO_SURFACE_TYPE_PS,
    CAIRO_SURFACE_TYPE_XLIB,
    CAIRO_SURFACE_TYPE_XCB,
    CAIRO_SURFACE_TYPE_GLITZ,
    CAIRO_SURFACE_TYPE_QUARTZ,
    CAIRO_SURFACE_TYPE_WIN32,
    CAIRO_SURFACE_TYPE_BEOS,
    CAIRO_SURFACE_TYPE_DIRECTFB,
    CAIRO_SURFACE_TYPE_SVG,
    CAIRO_SURFACE_TYPE_OS2,
    CAIRO_SURFACE_TYPE_WIN32_PRINTING,
    CAIRO_SURFACE_TYPE_QUARTZ_IMAGE,
    CAIRO_SURFACE_TYPE_SCRIPT,
    CAIRO_SURFACE_TYPE_QT,
    CAIRO_SURFACE_TYPE_RECORDING,
    CAIRO_SURFACE_TYPE_VG,
    CAIRO_SURFACE_TYPE_GL,
    CAIRO_SURFACE_TYPE_DRM,
    CAIRO_SURFACE_TYPE_TEE,
    CAIRO_SURFACE_TYPE_XML,
    CAIRO_SURFACE_TYPE_SKIA,
    CAIRO_SURFACE_TYPE_SUBSURFACE,
    CAIRO_SURFACE_TYPE_COGL
} cairo_surface_type_t;
 cairo_surface_type_t
cairo_surface_get_type (cairo_surface_t *surface);
 cairo_content_t
cairo_surface_get_content (cairo_surface_t *surface);
 cairo_status_t
cairo_surface_write_to_png (cairo_surface_t *surface,
       const char *filename);
 cairo_status_t
cairo_surface_write_to_png_stream (cairo_surface_t *surface,
       cairo_write_func_t write_func,
       void *closure);
 void *
cairo_surface_get_user_data (cairo_surface_t *surface,
        const cairo_user_data_key_t *key);
 cairo_status_t
cairo_surface_set_user_data (cairo_surface_t *surface,
        const cairo_user_data_key_t *key,
        void *user_data,
        cairo_destroy_func_t destroy);
 void
cairo_surface_get_mime_data (cairo_surface_t *surface,
                             const char *mime_type,
                             const unsigned char **data,
                             unsigned long *length);
 cairo_status_t
cairo_surface_set_mime_data (cairo_surface_t *surface,
                             const char *mime_type,
                             const unsigned char *data,
                             unsigned long length,
        cairo_destroy_func_t destroy,
        void *closure);
 cairo_bool_t
cairo_surface_supports_mime_type (cairo_surface_t *surface,
      const char *mime_type);
 void
cairo_surface_get_font_options (cairo_surface_t *surface,
    cairo_font_options_t *options);
 void
cairo_surface_flush (cairo_surface_t *surface);
 void
cairo_surface_mark_dirty (cairo_surface_t *surface);
 void
cairo_surface_mark_dirty_rectangle (cairo_surface_t *surface,
        int x,
        int y,
        int width,
        int height);
 void
cairo_surface_set_device_scale (cairo_surface_t *surface,
    double x_scale,
    double y_scale);
 void
cairo_surface_get_device_scale (cairo_surface_t *surface,
    double *x_scale,
    double *y_scale);
 void
cairo_surface_set_device_offset (cairo_surface_t *surface,
     double x_offset,
     double y_offset);
 void
cairo_surface_get_device_offset (cairo_surface_t *surface,
     double *x_offset,
     double *y_offset);
 void
cairo_surface_set_fallback_resolution (cairo_surface_t *surface,
           double x_pixels_per_inch,
           double y_pixels_per_inch);
 void
cairo_surface_get_fallback_resolution (cairo_surface_t *surface,
           double *x_pixels_per_inch,
           double *y_pixels_per_inch);
 void
cairo_surface_copy_page (cairo_surface_t *surface);
 void
cairo_surface_show_page (cairo_surface_t *surface);
 cairo_bool_t
cairo_surface_has_show_text_glyphs (cairo_surface_t *surface);
 cairo_surface_t *
cairo_image_surface_create (cairo_format_t format,
       int width,
       int height);
 int
cairo_format_stride_for_width (cairo_format_t format,
          int width);
 cairo_surface_t *
cairo_image_surface_create_for_data (unsigned char *data,
         cairo_format_t format,
         int width,
         int height,
         int stride);
 unsigned char *
cairo_image_surface_get_data (cairo_surface_t *surface);
 cairo_format_t
cairo_image_surface_get_format (cairo_surface_t *surface);
 int
cairo_image_surface_get_width (cairo_surface_t *surface);
 int
cairo_image_surface_get_height (cairo_surface_t *surface);
 int
cairo_image_surface_get_stride (cairo_surface_t *surface);
 cairo_surface_t *
cairo_image_surface_create_from_png (const char *filename);
 cairo_surface_t *
cairo_image_surface_create_from_png_stream (cairo_read_func_t read_func,
         void *closure);
 cairo_surface_t *
cairo_recording_surface_create (cairo_content_t content,
                                const cairo_rectangle_t *extents);
 void
cairo_recording_surface_ink_extents (cairo_surface_t *surface,
                                     double *x0,
                                     double *y0,
                                     double *width,
                                     double *height);
 cairo_bool_t
cairo_recording_surface_get_extents (cairo_surface_t *surface,
         cairo_rectangle_t *extents);
typedef cairo_surface_t *
(*cairo_raster_source_acquire_func_t) (cairo_pattern_t *pattern,
           void *callback_data,
           cairo_surface_t *target,
           const cairo_rectangle_int_t *extents);
typedef void
(*cairo_raster_source_release_func_t) (cairo_pattern_t *pattern,
           void *callback_data,
           cairo_surface_t *surface);
typedef cairo_status_t
(*cairo_raster_source_snapshot_func_t) (cairo_pattern_t *pattern,
     void *callback_data);
typedef cairo_status_t
(*cairo_raster_source_copy_func_t) (cairo_pattern_t *pattern,
        void *callback_data,
        const cairo_pattern_t *other);
typedef void
(*cairo_raster_source_finish_func_t) (cairo_pattern_t *pattern,
          void *callback_data);
 cairo_pattern_t *
cairo_pattern_create_raster_source (void *user_data,
        cairo_content_t content,
        int width, int height);
 void
cairo_raster_source_pattern_set_callback_data (cairo_pattern_t *pattern,
            void *data);
 void *
cairo_raster_source_pattern_get_callback_data (cairo_pattern_t *pattern);
 void
cairo_raster_source_pattern_set_acquire (cairo_pattern_t *pattern,
      cairo_raster_source_acquire_func_t acquire,
      cairo_raster_source_release_func_t release);
 void
cairo_raster_source_pattern_get_acquire (cairo_pattern_t *pattern,
      cairo_raster_source_acquire_func_t *acquire,
      cairo_raster_source_release_func_t *release);
 void
cairo_raster_source_pattern_set_snapshot (cairo_pattern_t *pattern,
       cairo_raster_source_snapshot_func_t snapshot);
 cairo_raster_source_snapshot_func_t
cairo_raster_source_pattern_get_snapshot (cairo_pattern_t *pattern);
 void
cairo_raster_source_pattern_set_copy (cairo_pattern_t *pattern,
          cairo_raster_source_copy_func_t copy);
 cairo_raster_source_copy_func_t
cairo_raster_source_pattern_get_copy (cairo_pattern_t *pattern);
 void
cairo_raster_source_pattern_set_finish (cairo_pattern_t *pattern,
     cairo_raster_source_finish_func_t finish);
 cairo_raster_source_finish_func_t
cairo_raster_source_pattern_get_finish (cairo_pattern_t *pattern);
 cairo_pattern_t *
cairo_pattern_create_rgb (double red, double green, double blue);
 cairo_pattern_t *
cairo_pattern_create_rgba (double red, double green, double blue,
      double alpha);
 cairo_pattern_t *
cairo_pattern_create_for_surface (cairo_surface_t *surface);
 cairo_pattern_t *
cairo_pattern_create_linear (double x0, double y0,
        double x1, double y1);
 cairo_pattern_t *
cairo_pattern_create_radial (double cx0, double cy0, double radius0,
        double cx1, double cy1, double radius1);
 cairo_pattern_t *
cairo_pattern_create_mesh (void);
 cairo_pattern_t *
cairo_pattern_reference (cairo_pattern_t *pattern);
 void
cairo_pattern_destroy (cairo_pattern_t *pattern);
 unsigned int
cairo_pattern_get_reference_count (cairo_pattern_t *pattern);
 cairo_status_t
cairo_pattern_status (cairo_pattern_t *pattern);
 void *
cairo_pattern_get_user_data (cairo_pattern_t *pattern,
        const cairo_user_data_key_t *key);
 cairo_status_t
cairo_pattern_set_user_data (cairo_pattern_t *pattern,
        const cairo_user_data_key_t *key,
        void *user_data,
        cairo_destroy_func_t destroy);
typedef enum _cairo_pattern_type {
    CAIRO_PATTERN_TYPE_SOLID,
    CAIRO_PATTERN_TYPE_SURFACE,
    CAIRO_PATTERN_TYPE_LINEAR,
    CAIRO_PATTERN_TYPE_RADIAL,
    CAIRO_PATTERN_TYPE_MESH,
    CAIRO_PATTERN_TYPE_RASTER_SOURCE
} cairo_pattern_type_t;
 cairo_pattern_type_t
cairo_pattern_get_type (cairo_pattern_t *pattern);
 void
cairo_pattern_add_color_stop_rgb (cairo_pattern_t *pattern,
      double offset,
      double red, double green, double blue);
 void
cairo_pattern_add_color_stop_rgba (cairo_pattern_t *pattern,
       double offset,
       double red, double green, double blue,
       double alpha);
 void
cairo_mesh_pattern_begin_patch (cairo_pattern_t *pattern);
 void
cairo_mesh_pattern_end_patch (cairo_pattern_t *pattern);
 void
cairo_mesh_pattern_curve_to (cairo_pattern_t *pattern,
        double x1, double y1,
        double x2, double y2,
        double x3, double y3);
 void
cairo_mesh_pattern_line_to (cairo_pattern_t *pattern,
       double x, double y);
 void
cairo_mesh_pattern_move_to (cairo_pattern_t *pattern,
       double x, double y);
 void
cairo_mesh_pattern_set_control_point (cairo_pattern_t *pattern,
          unsigned int point_num,
          double x, double y);
 void
cairo_mesh_pattern_set_corner_color_rgb (cairo_pattern_t *pattern,
      unsigned int corner_num,
      double red, double green, double blue);
 void
cairo_mesh_pattern_set_corner_color_rgba (cairo_pattern_t *pattern,
       unsigned int corner_num,
       double red, double green, double blue,
       double alpha);
 void
cairo_pattern_set_matrix (cairo_pattern_t *pattern,
     const cairo_matrix_t *matrix);
 void
cairo_pattern_get_matrix (cairo_pattern_t *pattern,
     cairo_matrix_t *matrix);
typedef enum _cairo_extend {
    CAIRO_EXTEND_NONE,
    CAIRO_EXTEND_REPEAT,
    CAIRO_EXTEND_REFLECT,
    CAIRO_EXTEND_PAD
} cairo_extend_t;
 void
cairo_pattern_set_extend (cairo_pattern_t *pattern, cairo_extend_t extend);
 cairo_extend_t
cairo_pattern_get_extend (cairo_pattern_t *pattern);
typedef enum _cairo_filter {
    CAIRO_FILTER_FAST,
    CAIRO_FILTER_GOOD,
    CAIRO_FILTER_BEST,
    CAIRO_FILTER_NEAREST,
    CAIRO_FILTER_BILINEAR,
    CAIRO_FILTER_GAUSSIAN
} cairo_filter_t;
 void
cairo_pattern_set_filter (cairo_pattern_t *pattern, cairo_filter_t filter);
 cairo_filter_t
cairo_pattern_get_filter (cairo_pattern_t *pattern);
 cairo_status_t
cairo_pattern_get_rgba (cairo_pattern_t *pattern,
   double *red, double *green,
   double *blue, double *alpha);
 cairo_status_t
cairo_pattern_get_surface (cairo_pattern_t *pattern,
      cairo_surface_t **surface);
 cairo_status_t
cairo_pattern_get_color_stop_rgba (cairo_pattern_t *pattern,
       int index, double *offset,
       double *red, double *green,
       double *blue, double *alpha);
 cairo_status_t
cairo_pattern_get_color_stop_count (cairo_pattern_t *pattern,
        int *count);
 cairo_status_t
cairo_pattern_get_linear_points (cairo_pattern_t *pattern,
     double *x0, double *y0,
     double *x1, double *y1);
 cairo_status_t
cairo_pattern_get_radial_circles (cairo_pattern_t *pattern,
      double *x0, double *y0, double *r0,
      double *x1, double *y1, double *r1);
 cairo_status_t
cairo_mesh_pattern_get_patch_count (cairo_pattern_t *pattern,
        unsigned int *count);
 cairo_path_t *
cairo_mesh_pattern_get_path (cairo_pattern_t *pattern,
        unsigned int patch_num);
 cairo_status_t
cairo_mesh_pattern_get_corner_color_rgba (cairo_pattern_t *pattern,
       unsigned int patch_num,
       unsigned int corner_num,
       double *red, double *green,
       double *blue, double *alpha);
 cairo_status_t
cairo_mesh_pattern_get_control_point (cairo_pattern_t *pattern,
          unsigned int patch_num,
          unsigned int point_num,
          double *x, double *y);
 void
cairo_matrix_init (cairo_matrix_t *matrix,
     double xx, double yx,
     double xy, double yy,
     double x0, double y0);
 void
cairo_matrix_init_identity (cairo_matrix_t *matrix);
 void
cairo_matrix_init_translate (cairo_matrix_t *matrix,
        double tx, double ty);
 void
cairo_matrix_init_scale (cairo_matrix_t *matrix,
    double sx, double sy);
 void
cairo_matrix_init_rotate (cairo_matrix_t *matrix,
     double radians);
 void
cairo_matrix_translate (cairo_matrix_t *matrix, double tx, double ty);
 void
cairo_matrix_scale (cairo_matrix_t *matrix, double sx, double sy);
 void
cairo_matrix_rotate (cairo_matrix_t *matrix, double radians);
 cairo_status_t
cairo_matrix_invert (cairo_matrix_t *matrix);
 void
cairo_matrix_multiply (cairo_matrix_t *result,
         const cairo_matrix_t *a,
         const cairo_matrix_t *b);
 void
cairo_matrix_transform_distance (const cairo_matrix_t *matrix,
     double *dx, double *dy);
 void
cairo_matrix_transform_point (const cairo_matrix_t *matrix,
         double *x, double *y);
typedef struct _cairo_region cairo_region_t;
typedef enum _cairo_region_overlap {
    CAIRO_REGION_OVERLAP_IN,
    CAIRO_REGION_OVERLAP_OUT,
    CAIRO_REGION_OVERLAP_PART
} cairo_region_overlap_t;
 cairo_region_t *
cairo_region_create (void);
 cairo_region_t *
cairo_region_create_rectangle (const cairo_rectangle_int_t *rectangle);
 cairo_region_t *
cairo_region_create_rectangles (const cairo_rectangle_int_t *rects,
    int count);
 cairo_region_t *
cairo_region_copy (const cairo_region_t *original);
 cairo_region_t *
cairo_region_reference (cairo_region_t *region);
 void
cairo_region_destroy (cairo_region_t *region);
 cairo_bool_t
cairo_region_equal (const cairo_region_t *a, const cairo_region_t *b);
 cairo_status_t
cairo_region_status (const cairo_region_t *region);
 void
cairo_region_get_extents (const cairo_region_t *region,
     cairo_rectangle_int_t *extents);
 int
cairo_region_num_rectangles (const cairo_region_t *region);
 void
cairo_region_get_rectangle (const cairo_region_t *region,
       int nth,
       cairo_rectangle_int_t *rectangle);
 cairo_bool_t
cairo_region_is_empty (const cairo_region_t *region);
 cairo_region_overlap_t
cairo_region_contains_rectangle (const cairo_region_t *region,
     const cairo_rectangle_int_t *rectangle);
 cairo_bool_t
cairo_region_contains_point (const cairo_region_t *region, int x, int y);
 void
cairo_region_translate (cairo_region_t *region, int dx, int dy);
 cairo_status_t
cairo_region_subtract (cairo_region_t *dst, const cairo_region_t *other);
 cairo_status_t
cairo_region_subtract_rectangle (cairo_region_t *dst,
     const cairo_rectangle_int_t *rectangle);
 cairo_status_t
cairo_region_intersect (cairo_region_t *dst, const cairo_region_t *other);
 cairo_status_t
cairo_region_intersect_rectangle (cairo_region_t *dst,
      const cairo_rectangle_int_t *rectangle);
 cairo_status_t
cairo_region_union (cairo_region_t *dst, const cairo_region_t *other);
 cairo_status_t
cairo_region_union_rectangle (cairo_region_t *dst,
         const cairo_rectangle_int_t *rectangle);
 cairo_status_t
cairo_region_xor (cairo_region_t *dst, const cairo_region_t *other);
 cairo_status_t
cairo_region_xor_rectangle (cairo_region_t *dst,
       const cairo_rectangle_int_t *rectangle);
 void
cairo_debug_reset_static_data (void);
typedef struct _GdkPoint GdkPoint;
typedef cairo_rectangle_int_t GdkRectangle;
typedef struct _GdkAtom *GdkAtom;
typedef struct _GdkColor GdkColor;
typedef struct _GdkRGBA GdkRGBA;
typedef struct _GdkCursor GdkCursor;
typedef struct _GdkVisual GdkVisual;
typedef struct _GdkDevice GdkDevice;
typedef struct _GdkDragContext GdkDragContext;
typedef struct _GdkDisplayManager GdkDisplayManager;
typedef struct _GdkDeviceManager GdkDeviceManager;
typedef struct _GdkDisplay GdkDisplay;
typedef struct _GdkScreen GdkScreen;
typedef struct _GdkWindow GdkWindow;
typedef struct _GdkKeymap GdkKeymap;
typedef struct _GdkAppLaunchContext GdkAppLaunchContext;
typedef struct _GdkGLContext GdkGLContext;
typedef enum
{
  GDK_LSB_FIRST,
  GDK_MSB_FIRST
} GdkByteOrder;
typedef enum
{
  GDK_SHIFT_MASK = 1 << 0,
  GDK_LOCK_MASK = 1 << 1,
  GDK_CONTROL_MASK = 1 << 2,
  GDK_MOD1_MASK = 1 << 3,
  GDK_MOD2_MASK = 1 << 4,
  GDK_MOD3_MASK = 1 << 5,
  GDK_MOD4_MASK = 1 << 6,
  GDK_MOD5_MASK = 1 << 7,
  GDK_BUTTON1_MASK = 1 << 8,
  GDK_BUTTON2_MASK = 1 << 9,
  GDK_BUTTON3_MASK = 1 << 10,
  GDK_BUTTON4_MASK = 1 << 11,
  GDK_BUTTON5_MASK = 1 << 12,
  GDK_MODIFIER_RESERVED_13_MASK = 1 << 13,
  GDK_MODIFIER_RESERVED_14_MASK = 1 << 14,
  GDK_MODIFIER_RESERVED_15_MASK = 1 << 15,
  GDK_MODIFIER_RESERVED_16_MASK = 1 << 16,
  GDK_MODIFIER_RESERVED_17_MASK = 1 << 17,
  GDK_MODIFIER_RESERVED_18_MASK = 1 << 18,
  GDK_MODIFIER_RESERVED_19_MASK = 1 << 19,
  GDK_MODIFIER_RESERVED_20_MASK = 1 << 20,
  GDK_MODIFIER_RESERVED_21_MASK = 1 << 21,
  GDK_MODIFIER_RESERVED_22_MASK = 1 << 22,
  GDK_MODIFIER_RESERVED_23_MASK = 1 << 23,
  GDK_MODIFIER_RESERVED_24_MASK = 1 << 24,
  GDK_MODIFIER_RESERVED_25_MASK = 1 << 25,
  GDK_SUPER_MASK = 1 << 26,
  GDK_HYPER_MASK = 1 << 27,
  GDK_META_MASK = 1 << 28,
  GDK_MODIFIER_RESERVED_29_MASK = 1 << 29,
  GDK_RELEASE_MASK = 1 << 30,
  GDK_MODIFIER_MASK = 0x5c001fff
} GdkModifierType;
typedef enum
{
  GDK_MODIFIER_INTENT_PRIMARY_ACCELERATOR,
  GDK_MODIFIER_INTENT_CONTEXT_MENU,
  GDK_MODIFIER_INTENT_EXTEND_SELECTION,
  GDK_MODIFIER_INTENT_MODIFY_SELECTION,
  GDK_MODIFIER_INTENT_NO_TEXT_INPUT,
  GDK_MODIFIER_INTENT_SHIFT_GROUP,
  GDK_MODIFIER_INTENT_DEFAULT_MOD_MASK,
} GdkModifierIntent;
typedef enum
{
  GDK_OK = 0,
  GDK_ERROR = -1,
  GDK_ERROR_PARAM = -2,
  GDK_ERROR_FILE = -3,
  GDK_ERROR_MEM = -4
} GdkStatus;
typedef enum
{
  GDK_GRAB_SUCCESS = 0,
  GDK_GRAB_ALREADY_GRABBED = 1,
  GDK_GRAB_INVALID_TIME = 2,
  GDK_GRAB_NOT_VIEWABLE = 3,
  GDK_GRAB_FROZEN = 4,
  GDK_GRAB_FAILED = 5
} GdkGrabStatus;
typedef enum
{
  GDK_OWNERSHIP_NONE,
  GDK_OWNERSHIP_WINDOW,
  GDK_OWNERSHIP_APPLICATION
} GdkGrabOwnership;
typedef enum
{
  GDK_EXPOSURE_MASK = 1 << 1,
  GDK_POINTER_MOTION_MASK = 1 << 2,
  GDK_POINTER_MOTION_HINT_MASK = 1 << 3,
  GDK_BUTTON_MOTION_MASK = 1 << 4,
  GDK_BUTTON1_MOTION_MASK = 1 << 5,
  GDK_BUTTON2_MOTION_MASK = 1 << 6,
  GDK_BUTTON3_MOTION_MASK = 1 << 7,
  GDK_BUTTON_PRESS_MASK = 1 << 8,
  GDK_BUTTON_RELEASE_MASK = 1 << 9,
  GDK_KEY_PRESS_MASK = 1 << 10,
  GDK_KEY_RELEASE_MASK = 1 << 11,
  GDK_ENTER_NOTIFY_MASK = 1 << 12,
  GDK_LEAVE_NOTIFY_MASK = 1 << 13,
  GDK_FOCUS_CHANGE_MASK = 1 << 14,
  GDK_STRUCTURE_MASK = 1 << 15,
  GDK_PROPERTY_CHANGE_MASK = 1 << 16,
  GDK_VISIBILITY_NOTIFY_MASK = 1 << 17,
  GDK_PROXIMITY_IN_MASK = 1 << 18,
  GDK_PROXIMITY_OUT_MASK = 1 << 19,
  GDK_SUBSTRUCTURE_MASK = 1 << 20,
  GDK_SCROLL_MASK = 1 << 21,
  GDK_TOUCH_MASK = 1 << 22,
  GDK_SMOOTH_SCROLL_MASK = 1 << 23,
  GDK_TOUCHPAD_GESTURE_MASK = 1 << 24,
  GDK_ALL_EVENTS_MASK = 0xFFFFFE
} GdkEventMask;
struct _GdkPoint
{
  gint x;
  gint y;
};
typedef enum {
  GDK_GL_ERROR_NOT_AVAILABLE,
  GDK_GL_ERROR_UNSUPPORTED_FORMAT,
  GDK_GL_ERROR_UNSUPPORTED_PROFILE
} GdkGLError;
typedef struct _GdkTimeCoord GdkTimeCoord;
typedef enum
{
  GDK_SOURCE_MOUSE,
  GDK_SOURCE_PEN,
  GDK_SOURCE_ERASER,
  GDK_SOURCE_CURSOR,
  GDK_SOURCE_KEYBOARD,
  GDK_SOURCE_TOUCHSCREEN,
  GDK_SOURCE_TOUCHPAD
} GdkInputSource;
typedef enum
{
  GDK_MODE_DISABLED,
  GDK_MODE_SCREEN,
  GDK_MODE_WINDOW
} GdkInputMode;
typedef enum
{
  GDK_AXIS_IGNORE,
  GDK_AXIS_X,
  GDK_AXIS_Y,
  GDK_AXIS_PRESSURE,
  GDK_AXIS_XTILT,
  GDK_AXIS_YTILT,
  GDK_AXIS_WHEEL,
  GDK_AXIS_LAST
} GdkAxisUse;
typedef enum {
  GDK_DEVICE_TYPE_MASTER,
  GDK_DEVICE_TYPE_SLAVE,
  GDK_DEVICE_TYPE_FLOATING
} GdkDeviceType;
struct _GdkTimeCoord
{
  guint32 time;
  gdouble axes[128];
};
extern
GType gdk_device_get_type (void) __attribute__((__const__));
extern
const gchar * gdk_device_get_name (GdkDevice *device);
extern
gboolean gdk_device_get_has_cursor (GdkDevice *device);
extern
GdkInputSource gdk_device_get_source (GdkDevice *device);
extern
GdkInputMode gdk_device_get_mode (GdkDevice *device);
extern
gboolean gdk_device_set_mode (GdkDevice *device,
                                         GdkInputMode mode);
extern
gint gdk_device_get_n_keys (GdkDevice *device);
extern
gboolean gdk_device_get_key (GdkDevice *device,
                                         guint index_,
                                         guint *keyval,
                                         GdkModifierType *modifiers);
extern
void gdk_device_set_key (GdkDevice *device,
                                         guint index_,
                                         guint keyval,
                                         GdkModifierType modifiers);
extern
GdkAxisUse gdk_device_get_axis_use (GdkDevice *device,
                                         guint index_);
extern
void gdk_device_set_axis_use (GdkDevice *device,
                                         guint index_,
                                         GdkAxisUse use);
extern
void gdk_device_get_state (GdkDevice *device,
                                  GdkWindow *window,
                                  gdouble *axes,
                                  GdkModifierType *mask);
extern
void gdk_device_get_position (GdkDevice *device,
                                  GdkScreen **screen,
                                  gint *x,
                                  gint *y);
extern
GdkWindow *
         gdk_device_get_window_at_position
                                 (GdkDevice *device,
                                  gint *win_x,
                                  gint *win_y);
extern
void gdk_device_get_position_double (GdkDevice *device,
                                         GdkScreen **screen,
                                         gdouble *x,
                                         gdouble *y);
extern
GdkWindow *
         gdk_device_get_window_at_position_double
                                 (GdkDevice *device,
                                  gdouble *win_x,
                                  gdouble *win_y);
extern
gboolean gdk_device_get_history (GdkDevice *device,
                                  GdkWindow *window,
                                  guint32 start,
                                  guint32 stop,
                                  GdkTimeCoord ***events,
                                  gint *n_events);
extern
void gdk_device_free_history (GdkTimeCoord **events,
                                  gint n_events);
extern
gint gdk_device_get_n_axes (GdkDevice *device);
extern
GList * gdk_device_list_axes (GdkDevice *device);
extern
gboolean gdk_device_get_axis_value (GdkDevice *device,
                                    gdouble *axes,
                                    GdkAtom axis_label,
                                    gdouble *value);
extern
gboolean gdk_device_get_axis (GdkDevice *device,
                                  gdouble *axes,
                                  GdkAxisUse use,
                                  gdouble *value);
extern
GdkDisplay * gdk_device_get_display (GdkDevice *device);
extern
GdkDevice * gdk_device_get_associated_device (GdkDevice *device);
extern
GList * gdk_device_list_slave_devices (GdkDevice *device);
extern
GdkDeviceType gdk_device_get_device_type (GdkDevice *device);
extern
GdkGrabStatus gdk_device_grab (GdkDevice *device,
                                      GdkWindow *window,
                                      GdkGrabOwnership grab_ownership,
                                      gboolean owner_events,
                                      GdkEventMask event_mask,
                                      GdkCursor *cursor,
                                      guint32 time_);
extern
void gdk_device_ungrab (GdkDevice *device,
                                      guint32 time_);
extern
void gdk_device_warp (GdkDevice *device,
                                      GdkScreen *screen,
                                      gint x,
                                      gint y);
extern
gboolean gdk_device_grab_info_libgtk_only (GdkDisplay *display,
                                           GdkDevice *device,
                                           GdkWindow **grab_window,
                                           gboolean *owner_events);
extern
GdkWindow *gdk_device_get_last_event_window (GdkDevice *device);
extern
const gchar *gdk_device_get_vendor_id (GdkDevice *device);
extern
const gchar *gdk_device_get_product_id (GdkDevice *device);
typedef enum
{
  GDK_ACTION_DEFAULT = 1 << 0,
  GDK_ACTION_COPY = 1 << 1,
  GDK_ACTION_MOVE = 1 << 2,
  GDK_ACTION_LINK = 1 << 3,
  GDK_ACTION_PRIVATE = 1 << 4,
  GDK_ACTION_ASK = 1 << 5
} GdkDragAction;
typedef enum
{
  GDK_DRAG_PROTO_NONE = 0,
  GDK_DRAG_PROTO_MOTIF,
  GDK_DRAG_PROTO_XDND,
  GDK_DRAG_PROTO_ROOTWIN,
  GDK_DRAG_PROTO_WIN32_DROPFILES,
  GDK_DRAG_PROTO_OLE2,
  GDK_DRAG_PROTO_LOCAL,
  GDK_DRAG_PROTO_WAYLAND
} GdkDragProtocol;
extern
GType gdk_drag_context_get_type (void) __attribute__((__const__));
extern
void gdk_drag_context_set_device (GdkDragContext *context,
                                                        GdkDevice *device);
extern
GdkDevice * gdk_drag_context_get_device (GdkDragContext *context);
extern
GList *gdk_drag_context_list_targets (GdkDragContext *context);
extern
GdkDragAction gdk_drag_context_get_actions (GdkDragContext *context);
extern
GdkDragAction gdk_drag_context_get_suggested_action (GdkDragContext *context);
extern
GdkDragAction gdk_drag_context_get_selected_action (GdkDragContext *context);
extern
GdkWindow *gdk_drag_context_get_source_window (GdkDragContext *context);
extern
GdkWindow *gdk_drag_context_get_dest_window (GdkDragContext *context);
extern
GdkDragProtocol gdk_drag_context_get_protocol (GdkDragContext *context);
extern
void gdk_drag_status (GdkDragContext *context,
                                         GdkDragAction action,
                                         guint32 time_);
extern
void gdk_drop_reply (GdkDragContext *context,
                                         gboolean accepted,
                                         guint32 time_);
extern
void gdk_drop_finish (GdkDragContext *context,
                                         gboolean success,
                                         guint32 time_);
extern
GdkAtom gdk_drag_get_selection (GdkDragContext *context);
extern
GdkDragContext * gdk_drag_begin (GdkWindow *window,
                                            GList *targets);
extern
GdkDragContext * gdk_drag_begin_for_device (GdkWindow *window,
                                            GdkDevice *device,
                                            GList *targets);
extern
void gdk_drag_find_window_for_screen (GdkDragContext *context,
                                           GdkWindow *drag_window,
                                           GdkScreen *screen,
                                           gint x_root,
                                           gint y_root,
                                           GdkWindow **dest_window,
                                           GdkDragProtocol *protocol);
extern
gboolean gdk_drag_motion (GdkDragContext *context,
                                      GdkWindow *dest_window,
                                      GdkDragProtocol protocol,
                                      gint x_root,
                                      gint y_root,
                                      GdkDragAction suggested_action,
                                      GdkDragAction possible_actions,
                                      guint32 time_);
extern
void gdk_drag_drop (GdkDragContext *context,
                                      guint32 time_);
extern
void gdk_drag_abort (GdkDragContext *context,
                                      guint32 time_);
extern
gboolean gdk_drag_drop_succeeded (GdkDragContext *context);
typedef struct _GdkEventAny GdkEventAny;
typedef struct _GdkEventExpose GdkEventExpose;
typedef struct _GdkEventVisibility GdkEventVisibility;
typedef struct _GdkEventMotion GdkEventMotion;
typedef struct _GdkEventButton GdkEventButton;
typedef struct _GdkEventTouch GdkEventTouch;
typedef struct _GdkEventScroll GdkEventScroll;
typedef struct _GdkEventKey GdkEventKey;
typedef struct _GdkEventFocus GdkEventFocus;
typedef struct _GdkEventCrossing GdkEventCrossing;
typedef struct _GdkEventConfigure GdkEventConfigure;
typedef struct _GdkEventProperty GdkEventProperty;
typedef struct _GdkEventSelection GdkEventSelection;
typedef struct _GdkEventOwnerChange GdkEventOwnerChange;
typedef struct _GdkEventProximity GdkEventProximity;
typedef struct _GdkEventDND GdkEventDND;
typedef struct _GdkEventWindowState GdkEventWindowState;
typedef struct _GdkEventSetting GdkEventSetting;
typedef struct _GdkEventGrabBroken GdkEventGrabBroken;
typedef struct _GdkEventTouchpadSwipe GdkEventTouchpadSwipe;
typedef struct _GdkEventTouchpadPinch GdkEventTouchpadPinch;
typedef struct _GdkEventSequence GdkEventSequence;
typedef union _GdkEvent GdkEvent;
typedef void (*GdkEventFunc) (GdkEvent *event,
         gpointer data);
typedef void GdkXEvent;
typedef enum {
  GDK_FILTER_CONTINUE,
  GDK_FILTER_TRANSLATE,
  GDK_FILTER_REMOVE
} GdkFilterReturn;
typedef GdkFilterReturn (*GdkFilterFunc) (GdkXEvent *xevent,
       GdkEvent *event,
       gpointer data);
typedef enum
{
  GDK_NOTHING = -1,
  GDK_DELETE = 0,
  GDK_DESTROY = 1,
  GDK_EXPOSE = 2,
  GDK_MOTION_NOTIFY = 3,
  GDK_BUTTON_PRESS = 4,
  GDK_2BUTTON_PRESS = 5,
  GDK_DOUBLE_BUTTON_PRESS = GDK_2BUTTON_PRESS,
  GDK_3BUTTON_PRESS = 6,
  GDK_TRIPLE_BUTTON_PRESS = GDK_3BUTTON_PRESS,
  GDK_BUTTON_RELEASE = 7,
  GDK_KEY_PRESS = 8,
  GDK_KEY_RELEASE = 9,
  GDK_ENTER_NOTIFY = 10,
  GDK_LEAVE_NOTIFY = 11,
  GDK_FOCUS_CHANGE = 12,
  GDK_CONFIGURE = 13,
  GDK_MAP = 14,
  GDK_UNMAP = 15,
  GDK_PROPERTY_NOTIFY = 16,
  GDK_SELECTION_CLEAR = 17,
  GDK_SELECTION_REQUEST = 18,
  GDK_SELECTION_NOTIFY = 19,
  GDK_PROXIMITY_IN = 20,
  GDK_PROXIMITY_OUT = 21,
  GDK_DRAG_ENTER = 22,
  GDK_DRAG_LEAVE = 23,
  GDK_DRAG_MOTION = 24,
  GDK_DRAG_STATUS = 25,
  GDK_DROP_START = 26,
  GDK_DROP_FINISHED = 27,
  GDK_CLIENT_EVENT = 28,
  GDK_VISIBILITY_NOTIFY = 29,
  GDK_SCROLL = 31,
  GDK_WINDOW_STATE = 32,
  GDK_SETTING = 33,
  GDK_OWNER_CHANGE = 34,
  GDK_GRAB_BROKEN = 35,
  GDK_DAMAGE = 36,
  GDK_TOUCH_BEGIN = 37,
  GDK_TOUCH_UPDATE = 38,
  GDK_TOUCH_END = 39,
  GDK_TOUCH_CANCEL = 40,
  GDK_TOUCHPAD_SWIPE = 41,
  GDK_TOUCHPAD_PINCH = 42,
  GDK_EVENT_LAST
} GdkEventType;
typedef enum
{
  GDK_VISIBILITY_UNOBSCURED,
  GDK_VISIBILITY_PARTIAL,
  GDK_VISIBILITY_FULLY_OBSCURED
} GdkVisibilityState;
typedef enum
{
  GDK_TOUCHPAD_GESTURE_PHASE_BEGIN,
  GDK_TOUCHPAD_GESTURE_PHASE_UPDATE,
  GDK_TOUCHPAD_GESTURE_PHASE_END,
  GDK_TOUCHPAD_GESTURE_PHASE_CANCEL
} GdkTouchpadGesturePhase;
typedef enum
{
  GDK_SCROLL_UP,
  GDK_SCROLL_DOWN,
  GDK_SCROLL_LEFT,
  GDK_SCROLL_RIGHT,
  GDK_SCROLL_SMOOTH
} GdkScrollDirection;
typedef enum
{
  GDK_NOTIFY_ANCESTOR = 0,
  GDK_NOTIFY_VIRTUAL = 1,
  GDK_NOTIFY_INFERIOR = 2,
  GDK_NOTIFY_NONLINEAR = 3,
  GDK_NOTIFY_NONLINEAR_VIRTUAL = 4,
  GDK_NOTIFY_UNKNOWN = 5
} GdkNotifyType;
typedef enum
{
  GDK_CROSSING_NORMAL,
  GDK_CROSSING_GRAB,
  GDK_CROSSING_UNGRAB,
  GDK_CROSSING_GTK_GRAB,
  GDK_CROSSING_GTK_UNGRAB,
  GDK_CROSSING_STATE_CHANGED,
  GDK_CROSSING_TOUCH_BEGIN,
  GDK_CROSSING_TOUCH_END,
  GDK_CROSSING_DEVICE_SWITCH
} GdkCrossingMode;
typedef enum
{
  GDK_PROPERTY_NEW_VALUE,
  GDK_PROPERTY_DELETE
} GdkPropertyState;
typedef enum
{
  GDK_WINDOW_STATE_WITHDRAWN = 1 << 0,
  GDK_WINDOW_STATE_ICONIFIED = 1 << 1,
  GDK_WINDOW_STATE_MAXIMIZED = 1 << 2,
  GDK_WINDOW_STATE_STICKY = 1 << 3,
  GDK_WINDOW_STATE_FULLSCREEN = 1 << 4,
  GDK_WINDOW_STATE_ABOVE = 1 << 5,
  GDK_WINDOW_STATE_BELOW = 1 << 6,
  GDK_WINDOW_STATE_FOCUSED = 1 << 7,
  GDK_WINDOW_STATE_TILED = 1 << 8
} GdkWindowState;
typedef enum
{
  GDK_SETTING_ACTION_NEW,
  GDK_SETTING_ACTION_CHANGED,
  GDK_SETTING_ACTION_DELETED
} GdkSettingAction;
typedef enum
{
  GDK_OWNER_CHANGE_NEW_OWNER,
  GDK_OWNER_CHANGE_DESTROY,
  GDK_OWNER_CHANGE_CLOSE
} GdkOwnerChange;
struct _GdkEventAny
{
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
};
struct _GdkEventExpose
{
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  GdkRectangle area;
  cairo_region_t *region;
  gint count;
};
struct _GdkEventVisibility
{
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  GdkVisibilityState state;
};
struct _GdkEventMotion
{
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  guint32 time;
  gdouble x;
  gdouble y;
  gdouble *axes;
  guint state;
  gint16 is_hint;
  GdkDevice *device;
  gdouble x_root, y_root;
};
struct _GdkEventButton
{
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  guint32 time;
  gdouble x;
  gdouble y;
  gdouble *axes;
  guint state;
  guint button;
  GdkDevice *device;
  gdouble x_root, y_root;
};
struct _GdkEventTouch
{
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  guint32 time;
  gdouble x;
  gdouble y;
  gdouble *axes;
  guint state;
  GdkEventSequence *sequence;
  gboolean emulating_pointer;
  GdkDevice *device;
  gdouble x_root, y_root;
};
struct _GdkEventScroll
{
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  guint32 time;
  gdouble x;
  gdouble y;
  guint state;
  GdkScrollDirection direction;
  GdkDevice *device;
  gdouble x_root, y_root;
  gdouble delta_x;
  gdouble delta_y;
};
struct _GdkEventKey
{
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  guint32 time;
  guint state;
  guint keyval;
  gint length;
  gchar *string;
  guint16 hardware_keycode;
  guint8 group;
  guint is_modifier : 1;
};
struct _GdkEventCrossing
{
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  GdkWindow *subwindow;
  guint32 time;
  gdouble x;
  gdouble y;
  gdouble x_root;
  gdouble y_root;
  GdkCrossingMode mode;
  GdkNotifyType detail;
  gboolean focus;
  guint state;
};
struct _GdkEventFocus
{
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  gint16 in;
};
struct _GdkEventConfigure
{
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  gint x, y;
  gint width;
  gint height;
};
struct _GdkEventProperty
{
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  GdkAtom atom;
  guint32 time;
  guint state;
};
struct _GdkEventSelection
{
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  GdkAtom selection;
  GdkAtom target;
  GdkAtom property;
  guint32 time;
  GdkWindow *requestor;
};
struct _GdkEventOwnerChange
{
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  GdkWindow *owner;
  GdkOwnerChange reason;
  GdkAtom selection;
  guint32 time;
  guint32 selection_time;
};
struct _GdkEventProximity
{
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  guint32 time;
  GdkDevice *device;
};
struct _GdkEventSetting
{
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  GdkSettingAction action;
  char *name;
};
struct _GdkEventWindowState
{
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  GdkWindowState changed_mask;
  GdkWindowState new_window_state;
};
struct _GdkEventGrabBroken {
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  gboolean keyboard;
  gboolean implicit;
  GdkWindow *grab_window;
};
struct _GdkEventDND {
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  GdkDragContext *context;
  guint32 time;
  gshort x_root, y_root;
};
struct _GdkEventTouchpadSwipe {
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  gint8 phase;
  gint8 n_fingers;
  guint32 time;
  gdouble x;
  gdouble y;
  gdouble dx;
  gdouble dy;
  gdouble x_root, y_root;
  guint state;
};
struct _GdkEventTouchpadPinch {
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  gint8 phase;
  gint8 n_fingers;
  guint32 time;
  gdouble x;
  gdouble y;
  gdouble dx;
  gdouble dy;
  gdouble angle_delta;
  gdouble scale;
  gdouble x_root, y_root;
  guint state;
};
union _GdkEvent
{
  GdkEventType type;
  GdkEventAny any;
  GdkEventExpose expose;
  GdkEventVisibility visibility;
  GdkEventMotion motion;
  GdkEventButton button;
  GdkEventTouch touch;
  GdkEventScroll scroll;
  GdkEventKey key;
  GdkEventCrossing crossing;
  GdkEventFocus focus_change;
  GdkEventConfigure configure;
  GdkEventProperty property;
  GdkEventSelection selection;
  GdkEventOwnerChange owner_change;
  GdkEventProximity proximity;
  GdkEventDND dnd;
  GdkEventWindowState window_state;
  GdkEventSetting setting;
  GdkEventGrabBroken grab_broken;
  GdkEventTouchpadSwipe touchpad_swipe;
  GdkEventTouchpadPinch touchpad_pinch;
};
extern
GType gdk_event_get_type (void) __attribute__((__const__));
extern
GType gdk_event_sequence_get_type (void) __attribute__((__const__));
extern
gboolean gdk_events_pending (void);
extern
GdkEvent* gdk_event_get (void);
extern
GdkEvent* gdk_event_peek (void);
extern
void gdk_event_put (const GdkEvent *event);
extern
GdkEvent* gdk_event_new (GdkEventType type);
extern
GdkEvent* gdk_event_copy (const GdkEvent *event);
extern
void gdk_event_free (GdkEvent *event);
extern
GdkWindow *gdk_event_get_window (const GdkEvent *event);
extern
guint32 gdk_event_get_time (const GdkEvent *event);
extern
gboolean gdk_event_get_state (const GdkEvent *event,
                                         GdkModifierType *state);
extern
gboolean gdk_event_get_coords (const GdkEvent *event,
      gdouble *x_win,
      gdouble *y_win);
extern
gboolean gdk_event_get_root_coords (const GdkEvent *event,
      gdouble *x_root,
      gdouble *y_root);
extern
gboolean gdk_event_get_button (const GdkEvent *event,
                                         guint *button);
extern
gboolean gdk_event_get_click_count (const GdkEvent *event,
                                         guint *click_count);
extern
gboolean gdk_event_get_keyval (const GdkEvent *event,
                                         guint *keyval);
extern
gboolean gdk_event_get_keycode (const GdkEvent *event,
                                         guint16 *keycode);
extern
gboolean gdk_event_get_scroll_direction (const GdkEvent *event,
                                         GdkScrollDirection *direction);
extern
gboolean gdk_event_get_scroll_deltas (const GdkEvent *event,
                                         gdouble *delta_x,
                                         gdouble *delta_y);
extern
gboolean gdk_event_get_axis (const GdkEvent *event,
                                         GdkAxisUse axis_use,
                                         gdouble *value);
extern
void gdk_event_set_device (GdkEvent *event,
                                         GdkDevice *device);
extern
GdkDevice* gdk_event_get_device (const GdkEvent *event);
extern
void gdk_event_set_source_device (GdkEvent *event,
                                         GdkDevice *device);
extern
GdkDevice* gdk_event_get_source_device (const GdkEvent *event);
extern
void gdk_event_request_motions (const GdkEventMotion *event);
extern
gboolean gdk_event_triggers_context_menu (const GdkEvent *event);
extern
gboolean gdk_events_get_distance (GdkEvent *event1,
                                         GdkEvent *event2,
                                         gdouble *distance);
extern
gboolean gdk_events_get_angle (GdkEvent *event1,
                                         GdkEvent *event2,
                                         gdouble *angle);
extern
gboolean gdk_events_get_center (GdkEvent *event1,
                                         GdkEvent *event2,
                                         gdouble *x,
                                         gdouble *y);
extern
void gdk_event_handler_set (GdkEventFunc func,
      gpointer data,
      GDestroyNotify notify);
extern
void gdk_event_set_screen (GdkEvent *event,
                                         GdkScreen *screen);
extern
GdkScreen *gdk_event_get_screen (const GdkEvent *event);
extern
GdkEventSequence *gdk_event_get_event_sequence (const GdkEvent *event);
extern
GdkEventType gdk_event_get_event_type (const GdkEvent *event);
extern
void gdk_set_show_events (gboolean show_events);
extern
gboolean gdk_get_show_events (void);
extern
gboolean gdk_setting_get (const gchar *name,
                                         GValue *value);
extern
GType gdk_device_manager_get_type (void) __attribute__((__const__));
extern
GdkDisplay * gdk_device_manager_get_display (GdkDeviceManager *device_manager);
extern
GList * gdk_device_manager_list_devices (GdkDeviceManager *device_manager,
                                                    GdkDeviceType type);
extern
GdkDevice * gdk_device_manager_get_client_pointer (GdkDeviceManager *device_manager);
extern
GType gdk_display_get_type (void) __attribute__((__const__));
extern
GdkDisplay *gdk_display_open (const gchar *display_name);
extern
const gchar * gdk_display_get_name (GdkDisplay *display);
extern
gint gdk_display_get_n_screens (GdkDisplay *display);
extern
GdkScreen * gdk_display_get_screen (GdkDisplay *display,
                                            gint screen_num);
extern
GdkScreen * gdk_display_get_default_screen (GdkDisplay *display);
extern
void gdk_display_pointer_ungrab (GdkDisplay *display,
                                            guint32 time_);
extern
void gdk_display_keyboard_ungrab (GdkDisplay *display,
                                            guint32 time_);
extern
gboolean gdk_display_pointer_is_grabbed (GdkDisplay *display);
extern
gboolean gdk_display_device_is_grabbed (GdkDisplay *display,
                                            GdkDevice *device);
extern
void gdk_display_beep (GdkDisplay *display);
extern
void gdk_display_sync (GdkDisplay *display);
extern
void gdk_display_flush (GdkDisplay *display);
extern
void gdk_display_close (GdkDisplay *display);
extern
gboolean gdk_display_is_closed (GdkDisplay *display);
extern
GList * gdk_display_list_devices (GdkDisplay *display);
extern
GdkEvent* gdk_display_get_event (GdkDisplay *display);
extern
GdkEvent* gdk_display_peek_event (GdkDisplay *display);
extern
void gdk_display_put_event (GdkDisplay *display,
                                  const GdkEvent *event);
extern
gboolean gdk_display_has_pending (GdkDisplay *display);
extern
void gdk_display_set_double_click_time (GdkDisplay *display,
                                            guint msec);
extern
void gdk_display_set_double_click_distance (GdkDisplay *display,
                                            guint distance);
extern
GdkDisplay *gdk_display_get_default (void);
extern
void gdk_display_get_pointer (GdkDisplay *display,
                                                    GdkScreen **screen,
                                                    gint *x,
                                                    gint *y,
                                                    GdkModifierType *mask);
extern
GdkWindow * gdk_display_get_window_at_pointer (GdkDisplay *display,
                                                    gint *win_x,
                                                    gint *win_y);
extern
void gdk_display_warp_pointer (GdkDisplay *display,
                                                    GdkScreen *screen,
                                                    gint x,
                                                    gint y);
extern
GdkDisplay *gdk_display_open_default_libgtk_only (void);
extern
gboolean gdk_display_supports_cursor_alpha (GdkDisplay *display);
extern
gboolean gdk_display_supports_cursor_color (GdkDisplay *display);
extern
guint gdk_display_get_default_cursor_size (GdkDisplay *display);
extern
void gdk_display_get_maximal_cursor_size (GdkDisplay *display,
                                                guint *width,
                                                guint *height);
extern
GdkWindow *gdk_display_get_default_group (GdkDisplay *display);
extern
gboolean gdk_display_supports_selection_notification (GdkDisplay *display);
extern
gboolean gdk_display_request_selection_notification (GdkDisplay *display,
                                                      GdkAtom selection);
extern
gboolean gdk_display_supports_clipboard_persistence (GdkDisplay *display);
extern
void gdk_display_store_clipboard (GdkDisplay *display,
                                                     GdkWindow *clipboard_window,
                                                     guint32 time_,
                                                     const GdkAtom *targets,
                                                     gint n_targets);
extern
gboolean gdk_display_supports_shapes (GdkDisplay *display);
extern
gboolean gdk_display_supports_input_shapes (GdkDisplay *display);
extern
gboolean gdk_display_supports_composite (GdkDisplay *display);
extern
void gdk_display_notify_startup_complete (GdkDisplay *display,
                                                const gchar *startup_id);
extern
GdkDeviceManager * gdk_display_get_device_manager (GdkDisplay *display);
extern
GdkAppLaunchContext *gdk_display_get_app_launch_context (GdkDisplay *display);
extern
GType gdk_screen_get_type (void) __attribute__((__const__));
extern
GdkVisual * gdk_screen_get_system_visual (GdkScreen *screen);
extern
GdkVisual * gdk_screen_get_rgba_visual (GdkScreen *screen);
extern
gboolean gdk_screen_is_composited (GdkScreen *screen);
extern
GdkWindow * gdk_screen_get_root_window (GdkScreen *screen);
extern
GdkDisplay * gdk_screen_get_display (GdkScreen *screen);
extern
gint gdk_screen_get_number (GdkScreen *screen);
extern
gint gdk_screen_get_width (GdkScreen *screen);
extern
gint gdk_screen_get_height (GdkScreen *screen);
extern
gint gdk_screen_get_width_mm (GdkScreen *screen);
extern
gint gdk_screen_get_height_mm (GdkScreen *screen);
extern
GList * gdk_screen_list_visuals (GdkScreen *screen);
extern
GList * gdk_screen_get_toplevel_windows (GdkScreen *screen);
extern
gchar * gdk_screen_make_display_name (GdkScreen *screen);
extern
gint gdk_screen_get_n_monitors (GdkScreen *screen);
extern
gint gdk_screen_get_primary_monitor (GdkScreen *screen);
extern
void gdk_screen_get_monitor_geometry (GdkScreen *screen,
                                               gint monitor_num,
                                               GdkRectangle *dest);
extern
void gdk_screen_get_monitor_workarea (GdkScreen *screen,
                                               gint monitor_num,
                                               GdkRectangle *dest);
extern
gint gdk_screen_get_monitor_at_point (GdkScreen *screen,
                                                gint x,
                                                gint y);
extern
gint gdk_screen_get_monitor_at_window (GdkScreen *screen,
                                                GdkWindow *window);
extern
gint gdk_screen_get_monitor_width_mm (GdkScreen *screen,
                                                gint monitor_num);
extern
gint gdk_screen_get_monitor_height_mm (GdkScreen *screen,
                                                gint monitor_num);
extern
gchar * gdk_screen_get_monitor_plug_name (GdkScreen *screen,
                                                gint monitor_num);
extern
gint gdk_screen_get_monitor_scale_factor (GdkScreen *screen,
                                                   gint monitor_num);
extern
GdkScreen *gdk_screen_get_default (void);
extern
gboolean gdk_screen_get_setting (GdkScreen *screen,
                                   const gchar *name,
                                   GValue *value);
extern
void gdk_screen_set_font_options (GdkScreen *screen,
                                                         const cairo_font_options_t *options);
extern
const cairo_font_options_t *gdk_screen_get_font_options (GdkScreen *screen);
extern
void gdk_screen_set_resolution (GdkScreen *screen,
                                   gdouble dpi);
extern
gdouble gdk_screen_get_resolution (GdkScreen *screen);
extern
GdkWindow *gdk_screen_get_active_window (GdkScreen *screen);
extern
GList *gdk_screen_get_window_stack (GdkScreen *screen);
extern
GType gdk_app_launch_context_get_type (void);
extern
GdkAppLaunchContext *gdk_app_launch_context_new (void);
extern
void gdk_app_launch_context_set_display (GdkAppLaunchContext *context,
                                                           GdkDisplay *display);
extern
void gdk_app_launch_context_set_screen (GdkAppLaunchContext *context,
                                                           GdkScreen *screen);
extern
void gdk_app_launch_context_set_desktop (GdkAppLaunchContext *context,
                                                           gint desktop);
extern
void gdk_app_launch_context_set_timestamp (GdkAppLaunchContext *context,
                                                           guint32 timestamp);
extern
void gdk_app_launch_context_set_icon (GdkAppLaunchContext *context,
                                                           GIcon *icon);
extern
void gdk_app_launch_context_set_icon_name (GdkAppLaunchContext *context,
                                                           const char *icon_name);
struct _GdkColor
{
  guint32 pixel;
  guint16 red;
  guint16 green;
  guint16 blue;
};
extern
GType gdk_color_get_type (void) __attribute__((__const__));
extern
GdkColor *gdk_color_copy (const GdkColor *color);
extern
void gdk_color_free (GdkColor *color);
extern
guint gdk_color_hash (const GdkColor *color);
extern
gboolean gdk_color_equal (const GdkColor *colora,
                               const GdkColor *colorb);
extern
gboolean gdk_color_parse (const gchar *spec,
                               GdkColor *color);
extern
gchar * gdk_color_to_string (const GdkColor *color);
struct _GdkRGBA
{
  gdouble red;
  gdouble green;
  gdouble blue;
  gdouble alpha;
};
extern
GType gdk_rgba_get_type (void) __attribute__((__const__));
extern
GdkRGBA * gdk_rgba_copy (const GdkRGBA *rgba);
extern
void gdk_rgba_free (GdkRGBA *rgba);
extern
guint gdk_rgba_hash (gconstpointer p);
extern
gboolean gdk_rgba_equal (gconstpointer p1,
                              gconstpointer p2);
extern
gboolean gdk_rgba_parse (GdkRGBA *rgba,
                              const gchar *spec);
extern
gchar * gdk_rgba_to_string (const GdkRGBA *rgba);
extern const guint gdk_pixbuf_major_version;
extern const guint gdk_pixbuf_minor_version;
extern const guint gdk_pixbuf_micro_version;
extern const char *gdk_pixbuf_version;
typedef enum
{
        GDK_PIXBUF_ALPHA_BILEVEL,
        GDK_PIXBUF_ALPHA_FULL
} GdkPixbufAlphaMode;
typedef enum {
 GDK_COLORSPACE_RGB
} GdkColorspace;
typedef struct _GdkPixbuf GdkPixbuf;
typedef void (* GdkPixbufDestroyNotify) (guchar *pixels, gpointer data);
typedef enum {
        GDK_PIXBUF_ERROR_CORRUPT_IMAGE,
        GDK_PIXBUF_ERROR_INSUFFICIENT_MEMORY,
        GDK_PIXBUF_ERROR_BAD_OPTION,
        GDK_PIXBUF_ERROR_UNKNOWN_TYPE,
        GDK_PIXBUF_ERROR_UNSUPPORTED_OPERATION,
        GDK_PIXBUF_ERROR_FAILED
} GdkPixbufError;
GQuark gdk_pixbuf_error_quark (void);
GType gdk_pixbuf_get_type (void) __attribute__((__const__));
__attribute__((__deprecated__("Use '" "g_object_ref" "' instead")))
GdkPixbuf *gdk_pixbuf_ref (GdkPixbuf *pixbuf);
__attribute__((__deprecated__("Use '" "g_object_unref" "' instead")))
void gdk_pixbuf_unref (GdkPixbuf *pixbuf);
GdkColorspace gdk_pixbuf_get_colorspace (const GdkPixbuf *pixbuf);
int gdk_pixbuf_get_n_channels (const GdkPixbuf *pixbuf);
gboolean gdk_pixbuf_get_has_alpha (const GdkPixbuf *pixbuf);
int gdk_pixbuf_get_bits_per_sample (const GdkPixbuf *pixbuf);
guchar *gdk_pixbuf_get_pixels (const GdkPixbuf *pixbuf);
int gdk_pixbuf_get_width (const GdkPixbuf *pixbuf);
int gdk_pixbuf_get_height (const GdkPixbuf *pixbuf);
int gdk_pixbuf_get_rowstride (const GdkPixbuf *pixbuf);
gsize gdk_pixbuf_get_byte_length (const GdkPixbuf *pixbuf);
guchar *gdk_pixbuf_get_pixels_with_length (const GdkPixbuf *pixbuf,
                                                 guint *length);
const guint8* gdk_pixbuf_read_pixels (const GdkPixbuf *pixbuf);
GBytes * gdk_pixbuf_read_pixel_bytes (const GdkPixbuf *pixbuf);
GdkPixbuf *gdk_pixbuf_new (GdkColorspace colorspace, gboolean has_alpha, int bits_per_sample,
      int width, int height);
GdkPixbuf *gdk_pixbuf_copy (const GdkPixbuf *pixbuf);
GdkPixbuf *gdk_pixbuf_new_subpixbuf (GdkPixbuf *src_pixbuf,
                                     int src_x,
                                     int src_y,
                                     int width,
                                     int height);
GdkPixbuf *gdk_pixbuf_new_from_file (const char *filename,
                                     GError **error);
GdkPixbuf *gdk_pixbuf_new_from_file_at_size (const char *filename,
          int width,
          int height,
          GError **error);
GdkPixbuf *gdk_pixbuf_new_from_file_at_scale (const char *filename,
           int width,
           int height,
           gboolean preserve_aspect_ratio,
           GError **error);
GdkPixbuf *gdk_pixbuf_new_from_resource (const char *resource_path,
      GError **error);
GdkPixbuf *gdk_pixbuf_new_from_resource_at_scale (const char *resource_path,
        int width,
        int height,
        gboolean preserve_aspect_ratio,
        GError **error);
GdkPixbuf *gdk_pixbuf_new_from_data (const guchar *data,
         GdkColorspace colorspace,
         gboolean has_alpha,
         int bits_per_sample,
         int width, int height,
         int rowstride,
         GdkPixbufDestroyNotify destroy_fn,
         gpointer destroy_fn_data);
GdkPixbuf *gdk_pixbuf_new_from_bytes (GBytes *data,
          GdkColorspace colorspace,
          gboolean has_alpha,
          int bits_per_sample,
          int width, int height,
          int rowstride);
GdkPixbuf *gdk_pixbuf_new_from_xpm_data (const char **data);
__attribute__((__deprecated__))
GdkPixbuf* gdk_pixbuf_new_from_inline (gint data_length,
      const guint8 *data,
      gboolean copy_pixels,
      GError **error);
void gdk_pixbuf_fill (GdkPixbuf *pixbuf,
                                         guint32 pixel);
gboolean gdk_pixbuf_save (GdkPixbuf *pixbuf,
                                    const char *filename,
                                    const char *type,
                                    GError **error,
                                    ...) __attribute__((__sentinel__));
gboolean gdk_pixbuf_savev (GdkPixbuf *pixbuf,
                                    const char *filename,
                                    const char *type,
                                    char **option_keys,
                                    char **option_values,
                                    GError **error);
typedef gboolean (*GdkPixbufSaveFunc) (const gchar *buf,
      gsize count,
      GError **error,
      gpointer data);
gboolean gdk_pixbuf_save_to_callback (GdkPixbuf *pixbuf,
      GdkPixbufSaveFunc save_func,
      gpointer user_data,
      const char *type,
      GError **error,
      ...) __attribute__((__sentinel__));
gboolean gdk_pixbuf_save_to_callbackv (GdkPixbuf *pixbuf,
      GdkPixbufSaveFunc save_func,
      gpointer user_data,
      const char *type,
      char **option_keys,
      char **option_values,
      GError **error);
gboolean gdk_pixbuf_save_to_buffer (GdkPixbuf *pixbuf,
      gchar **buffer,
      gsize *buffer_size,
      const char *type,
      GError **error,
      ...) __attribute__((__sentinel__));
gboolean gdk_pixbuf_save_to_bufferv (GdkPixbuf *pixbuf,
      gchar **buffer,
      gsize *buffer_size,
      const char *type,
      char **option_keys,
      char **option_values,
      GError **error);
GdkPixbuf *gdk_pixbuf_new_from_stream (GInputStream *stream,
      GCancellable *cancellable,
                                         GError **error);
void gdk_pixbuf_new_from_stream_async (GInputStream *stream,
           GCancellable *cancellable,
           GAsyncReadyCallback callback,
           gpointer user_data);
GdkPixbuf *gdk_pixbuf_new_from_stream_finish (GAsyncResult *async_result,
           GError **error);
GdkPixbuf *gdk_pixbuf_new_from_stream_at_scale (GInputStream *stream,
                                                  gint width,
                                                  gint height,
                                                  gboolean preserve_aspect_ratio,
        GCancellable *cancellable,
                                                  GError **error);
void gdk_pixbuf_new_from_stream_at_scale_async (GInputStream *stream,
      gint width,
      gint height,
      gboolean preserve_aspect_ratio,
      GCancellable *cancellable,
      GAsyncReadyCallback callback,
      gpointer user_data);
gboolean gdk_pixbuf_save_to_stream (GdkPixbuf *pixbuf,
                                         GOutputStream *stream,
                                         const char *type,
      GCancellable *cancellable,
                                         GError **error,
                                         ...);
void gdk_pixbuf_save_to_stream_async (GdkPixbuf *pixbuf,
          GOutputStream *stream,
          const gchar *type,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data,
          ...);
gboolean gdk_pixbuf_save_to_stream_finish (GAsyncResult *async_result,
        GError **error);
GdkPixbuf *gdk_pixbuf_add_alpha (const GdkPixbuf *pixbuf, gboolean substitute_color,
     guchar r, guchar g, guchar b);
void gdk_pixbuf_copy_area (const GdkPixbuf *src_pixbuf,
      int src_x, int src_y,
      int width, int height,
      GdkPixbuf *dest_pixbuf,
      int dest_x, int dest_y);
void gdk_pixbuf_saturate_and_pixelate (const GdkPixbuf *src,
                                       GdkPixbuf *dest,
                                       gfloat saturation,
                                       gboolean pixelate);
GdkPixbuf *gdk_pixbuf_apply_embedded_orientation (GdkPixbuf *src);
const gchar * gdk_pixbuf_get_option (GdkPixbuf *pixbuf,
                                              const gchar *key);
GHashTable * gdk_pixbuf_get_options (GdkPixbuf *pixbuf);
typedef enum {
 GDK_INTERP_NEAREST,
 GDK_INTERP_TILES,
 GDK_INTERP_BILINEAR,
 GDK_INTERP_HYPER
} GdkInterpType;
typedef enum {
 GDK_PIXBUF_ROTATE_NONE = 0,
 GDK_PIXBUF_ROTATE_COUNTERCLOCKWISE = 90,
 GDK_PIXBUF_ROTATE_UPSIDEDOWN = 180,
 GDK_PIXBUF_ROTATE_CLOCKWISE = 270
} GdkPixbufRotation;
void gdk_pixbuf_scale (const GdkPixbuf *src,
     GdkPixbuf *dest,
     int dest_x,
     int dest_y,
     int dest_width,
     int dest_height,
     double offset_x,
     double offset_y,
     double scale_x,
     double scale_y,
     GdkInterpType interp_type);
void gdk_pixbuf_composite (const GdkPixbuf *src,
     GdkPixbuf *dest,
     int dest_x,
     int dest_y,
     int dest_width,
     int dest_height,
     double offset_x,
     double offset_y,
     double scale_x,
     double scale_y,
     GdkInterpType interp_type,
     int overall_alpha);
void gdk_pixbuf_composite_color (const GdkPixbuf *src,
     GdkPixbuf *dest,
     int dest_x,
     int dest_y,
     int dest_width,
     int dest_height,
     double offset_x,
     double offset_y,
     double scale_x,
     double scale_y,
     GdkInterpType interp_type,
     int overall_alpha,
     int check_x,
     int check_y,
     int check_size,
     guint32 color1,
     guint32 color2);
GdkPixbuf *gdk_pixbuf_scale_simple (const GdkPixbuf *src,
           int dest_width,
           int dest_height,
           GdkInterpType interp_type);
GdkPixbuf *gdk_pixbuf_composite_color_simple (const GdkPixbuf *src,
           int dest_width,
           int dest_height,
           GdkInterpType interp_type,
           int overall_alpha,
           int check_size,
           guint32 color1,
           guint32 color2);
GdkPixbuf *gdk_pixbuf_rotate_simple (const GdkPixbuf *src,
                  GdkPixbufRotation angle);
GdkPixbuf *gdk_pixbuf_flip (const GdkPixbuf *src,
                  gboolean horizontal);
typedef struct _GdkPixbufAnimation GdkPixbufAnimation;
typedef struct _GdkPixbufAnimationIter GdkPixbufAnimationIter;
GType gdk_pixbuf_animation_get_type (void) __attribute__((__const__));
GdkPixbufAnimation *gdk_pixbuf_animation_new_from_file (const char *filename,
                                                          GError **error);
GdkPixbufAnimation *gdk_pixbuf_animation_new_from_stream (GInputStream *stream,
                                                          GCancellable *cancellable,
                                                          GError **error);
void gdk_pixbuf_animation_new_from_stream_async (GInputStream *stream,
                                                          GCancellable *cancellable,
                                                          GAsyncReadyCallback callback,
                                                          gpointer user_data);
GdkPixbufAnimation *gdk_pixbuf_animation_new_from_stream_finish (GAsyncResult*async_result,
                                                          GError **error);
GdkPixbufAnimation *gdk_pixbuf_animation_new_from_resource(const char *resource_path,
                                                          GError **error);
__attribute__((__deprecated__("Use '" "g_object_ref" "' instead")))
GdkPixbufAnimation *gdk_pixbuf_animation_ref (GdkPixbufAnimation *animation);
__attribute__((__deprecated__("Use '" "g_object_unref" "' instead")))
void gdk_pixbuf_animation_unref (GdkPixbufAnimation *animation);
int gdk_pixbuf_animation_get_width (GdkPixbufAnimation *animation);
int gdk_pixbuf_animation_get_height (GdkPixbufAnimation *animation);
gboolean gdk_pixbuf_animation_is_static_image (GdkPixbufAnimation *animation);
GdkPixbuf *gdk_pixbuf_animation_get_static_image (GdkPixbufAnimation *animation);
GdkPixbufAnimationIter *gdk_pixbuf_animation_get_iter (GdkPixbufAnimation *animation,
                                                                              const GTimeVal *start_time);
GType gdk_pixbuf_animation_iter_get_type (void) __attribute__((__const__));
int gdk_pixbuf_animation_iter_get_delay_time (GdkPixbufAnimationIter *iter);
GdkPixbuf *gdk_pixbuf_animation_iter_get_pixbuf (GdkPixbufAnimationIter *iter);
gboolean gdk_pixbuf_animation_iter_on_currently_loading_frame (GdkPixbufAnimationIter *iter);
gboolean gdk_pixbuf_animation_iter_advance (GdkPixbufAnimationIter *iter,
                                                                              const GTimeVal *current_time);
typedef struct _GdkPixbufSimpleAnim GdkPixbufSimpleAnim;
typedef struct _GdkPixbufSimpleAnimClass GdkPixbufSimpleAnimClass;
GType gdk_pixbuf_simple_anim_get_type (void) __attribute__((__const__));
GType gdk_pixbuf_simple_anim_iter_get_type (void) __attribute__((__const__));
GdkPixbufSimpleAnim *gdk_pixbuf_simple_anim_new (gint width,
                                                           gint height,
                                                           gfloat rate);
void gdk_pixbuf_simple_anim_add_frame (GdkPixbufSimpleAnim *animation,
                                                           GdkPixbuf *pixbuf);
void gdk_pixbuf_simple_anim_set_loop (GdkPixbufSimpleAnim *animation,
                                                           gboolean loop);
gboolean gdk_pixbuf_simple_anim_get_loop (GdkPixbufSimpleAnim *animation);
typedef struct _GdkPixbufFormat GdkPixbufFormat;
GType gdk_pixbuf_format_get_type (void) __attribute__((__const__));
GSList *gdk_pixbuf_get_formats (void);
gchar *gdk_pixbuf_format_get_name (GdkPixbufFormat *format);
gchar *gdk_pixbuf_format_get_description (GdkPixbufFormat *format);
gchar **gdk_pixbuf_format_get_mime_types (GdkPixbufFormat *format);
gchar **gdk_pixbuf_format_get_extensions (GdkPixbufFormat *format);
gboolean gdk_pixbuf_format_is_writable (GdkPixbufFormat *format);
gboolean gdk_pixbuf_format_is_scalable (GdkPixbufFormat *format);
gboolean gdk_pixbuf_format_is_disabled (GdkPixbufFormat *format);
void gdk_pixbuf_format_set_disabled (GdkPixbufFormat *format,
           gboolean disabled);
gchar *gdk_pixbuf_format_get_license (GdkPixbufFormat *format);
GdkPixbufFormat *gdk_pixbuf_get_file_info (const gchar *filename,
           gint *width,
           gint *height);
void gdk_pixbuf_get_file_info_async (const gchar *filename,
        GCancellable *cancellable,
        GAsyncReadyCallback callback,
        gpointer user_data);
GdkPixbufFormat *gdk_pixbuf_get_file_info_finish (GAsyncResult *async_result,
        gint *width,
        gint *height,
        GError **error);
GdkPixbufFormat *gdk_pixbuf_format_copy (const GdkPixbufFormat *format);
void gdk_pixbuf_format_free (GdkPixbufFormat *format);
typedef struct _GdkPixbufLoader GdkPixbufLoader;
struct _GdkPixbufLoader
{
  GObject parent_instance;
  gpointer priv;
};
typedef struct _GdkPixbufLoaderClass GdkPixbufLoaderClass;
struct _GdkPixbufLoaderClass
{
  GObjectClass parent_class;
  void (*size_prepared) (GdkPixbufLoader *loader,
         int width,
         int height);
  void (*area_prepared) (GdkPixbufLoader *loader);
  void (*area_updated) (GdkPixbufLoader *loader,
                              int x,
                              int y,
         int width,
         int height);
  void (*closed) (GdkPixbufLoader *loader);
};
GType gdk_pixbuf_loader_get_type (void) __attribute__((__const__));
GdkPixbufLoader * gdk_pixbuf_loader_new (void);
GdkPixbufLoader * gdk_pixbuf_loader_new_with_type (const char *image_type,
                                                      GError **error);
GdkPixbufLoader * gdk_pixbuf_loader_new_with_mime_type (const char *mime_type,
          GError **error);
void gdk_pixbuf_loader_set_size (GdkPixbufLoader *loader,
                                                 int width,
       int height);
gboolean gdk_pixbuf_loader_write (GdkPixbufLoader *loader,
            const guchar *buf,
            gsize count,
                                                      GError **error);
gboolean gdk_pixbuf_loader_write_bytes (GdkPixbufLoader *loader,
                                                      GBytes *buffer,
                                                      GError **error);
GdkPixbuf * gdk_pixbuf_loader_get_pixbuf (GdkPixbufLoader *loader);
GdkPixbufAnimation * gdk_pixbuf_loader_get_animation (GdkPixbufLoader *loader);
gboolean gdk_pixbuf_loader_close (GdkPixbufLoader *loader,
                                                      GError **error);
GdkPixbufFormat *gdk_pixbuf_loader_get_format (GdkPixbufLoader *loader);
GType gdk_pixbuf_alpha_mode_get_type (void) __attribute__((__const__));
GType gdk_colorspace_get_type (void) __attribute__((__const__));
GType gdk_pixbuf_error_get_type (void) __attribute__((__const__));
GType gdk_interp_type_get_type (void) __attribute__((__const__));
GType gdk_pixbuf_rotation_get_type (void) __attribute__((__const__));
typedef GdkPixbuf *GdkPixbuf_autoptr;
 static inline void glib_autoptr_cleanup_GdkPixbuf (GdkPixbuf **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GdkPixbufAnimation *GdkPixbufAnimation_autoptr;
 static inline void glib_autoptr_cleanup_GdkPixbufAnimation (GdkPixbufAnimation **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GdkPixbufAnimationIter *GdkPixbufAnimationIter_autoptr;
 static inline void glib_autoptr_cleanup_GdkPixbufAnimationIter (GdkPixbufAnimationIter **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GdkPixbufLoader *GdkPixbufLoader_autoptr;
 static inline void glib_autoptr_cleanup_GdkPixbufLoader (GdkPixbufLoader **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GdkPixbufSimpleAnim *GdkPixbufSimpleAnim_autoptr;
 static inline void glib_autoptr_cleanup_GdkPixbufSimpleAnim (GdkPixbufSimpleAnim **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
extern
GdkPixbuf *gdk_pixbuf_get_from_window (GdkWindow *window,
                                        gint src_x,
                                        gint src_y,
                                        gint width,
                                        gint height);
extern
GdkPixbuf *gdk_pixbuf_get_from_surface (cairo_surface_t *surface,
                                        gint src_x,
                                        gint src_y,
                                        gint width,
                                        gint height);
typedef struct _PangoCairoFont PangoCairoFont;
typedef struct _PangoCairoFontMap PangoCairoFontMap;
typedef void (* PangoCairoShapeRendererFunc) (cairo_t *cr,
           PangoAttrShape *attr,
           gboolean do_path,
           gpointer data);
GType pango_cairo_font_map_get_type (void) __attribute__((__const__));
PangoFontMap *pango_cairo_font_map_new (void);
PangoFontMap *pango_cairo_font_map_new_for_font_type (cairo_font_type_t fonttype);
PangoFontMap *pango_cairo_font_map_get_default (void);
void pango_cairo_font_map_set_default (PangoCairoFontMap *fontmap);
cairo_font_type_t pango_cairo_font_map_get_font_type (PangoCairoFontMap *fontmap);
void pango_cairo_font_map_set_resolution (PangoCairoFontMap *fontmap,
         double dpi);
double pango_cairo_font_map_get_resolution (PangoCairoFontMap *fontmap);
__attribute__((__deprecated__("Use '" "pango_font_map_create_context" "' instead")))
PangoContext *pango_cairo_font_map_create_context (PangoCairoFontMap *fontmap);
GType pango_cairo_font_get_type (void) __attribute__((__const__));
cairo_scaled_font_t *pango_cairo_font_get_scaled_font (PangoCairoFont *font);
void pango_cairo_update_context (cairo_t *cr,
      PangoContext *context);
void pango_cairo_context_set_font_options (PangoContext *context,
          const cairo_font_options_t *options);
const cairo_font_options_t *pango_cairo_context_get_font_options (PangoContext *context);
void pango_cairo_context_set_resolution (PangoContext *context,
          double dpi);
double pango_cairo_context_get_resolution (PangoContext *context);
void pango_cairo_context_set_shape_renderer (PangoContext *context,
            PangoCairoShapeRendererFunc func,
            gpointer data,
            GDestroyNotify dnotify);
PangoCairoShapeRendererFunc pango_cairo_context_get_shape_renderer (PangoContext *context,
            gpointer *data);
PangoContext *pango_cairo_create_context (cairo_t *cr);
PangoLayout *pango_cairo_create_layout (cairo_t *cr);
void pango_cairo_update_layout (cairo_t *cr,
     PangoLayout *layout);
void pango_cairo_show_glyph_string (cairo_t *cr,
        PangoFont *font,
        PangoGlyphString *glyphs);
void pango_cairo_show_glyph_item (cairo_t *cr,
        const char *text,
        PangoGlyphItem *glyph_item);
void pango_cairo_show_layout_line (cairo_t *cr,
        PangoLayoutLine *line);
void pango_cairo_show_layout (cairo_t *cr,
        PangoLayout *layout);
void pango_cairo_show_error_underline (cairo_t *cr,
           double x,
           double y,
           double width,
           double height);
void pango_cairo_glyph_string_path (cairo_t *cr,
        PangoFont *font,
        PangoGlyphString *glyphs);
void pango_cairo_layout_line_path (cairo_t *cr,
        PangoLayoutLine *line);
void pango_cairo_layout_path (cairo_t *cr,
        PangoLayout *layout);
void pango_cairo_error_underline_path (cairo_t *cr,
           double x,
           double y,
           double width,
           double height);
extern
cairo_t * gdk_cairo_create (GdkWindow *window);
extern
gboolean gdk_cairo_get_clip_rectangle (cairo_t *cr,
                                         GdkRectangle *rect);
extern
void gdk_cairo_set_source_rgba (cairo_t *cr,
                                         const GdkRGBA *rgba);
extern
void gdk_cairo_set_source_pixbuf (cairo_t *cr,
                                         const GdkPixbuf *pixbuf,
                                         gdouble pixbuf_x,
                                         gdouble pixbuf_y);
extern
void gdk_cairo_set_source_window (cairo_t *cr,
                                         GdkWindow *window,
                                         gdouble x,
                                         gdouble y);
extern
void gdk_cairo_rectangle (cairo_t *cr,
                                         const GdkRectangle *rectangle);
extern
void gdk_cairo_region (cairo_t *cr,
                                         const cairo_region_t *region);
extern
cairo_region_t *
           gdk_cairo_region_create_from_surface
                                        (cairo_surface_t *surface);
extern
void gdk_cairo_set_source_color (cairo_t *cr,
                                         const GdkColor *color);
extern
cairo_surface_t * gdk_cairo_surface_create_from_pixbuf (const GdkPixbuf *pixbuf,
                                                             int scale,
                                                             GdkWindow *for_window);
extern
void gdk_cairo_draw_from_gl (cairo_t *cr,
                                   GdkWindow *window,
                                   int source,
                                   int source_type,
                                   int buffer_scale,
                                   int x,
                                   int y,
                                   int width,
                                   int height);
typedef enum
{
  GDK_X_CURSOR = 0,
  GDK_ARROW = 2,
  GDK_BASED_ARROW_DOWN = 4,
  GDK_BASED_ARROW_UP = 6,
  GDK_BOAT = 8,
  GDK_BOGOSITY = 10,
  GDK_BOTTOM_LEFT_CORNER = 12,
  GDK_BOTTOM_RIGHT_CORNER = 14,
  GDK_BOTTOM_SIDE = 16,
  GDK_BOTTOM_TEE = 18,
  GDK_BOX_SPIRAL = 20,
  GDK_CENTER_PTR = 22,
  GDK_CIRCLE = 24,
  GDK_CLOCK = 26,
  GDK_COFFEE_MUG = 28,
  GDK_CROSS = 30,
  GDK_CROSS_REVERSE = 32,
  GDK_CROSSHAIR = 34,
  GDK_DIAMOND_CROSS = 36,
  GDK_DOT = 38,
  GDK_DOTBOX = 40,
  GDK_DOUBLE_ARROW = 42,
  GDK_DRAFT_LARGE = 44,
  GDK_DRAFT_SMALL = 46,
  GDK_DRAPED_BOX = 48,
  GDK_EXCHANGE = 50,
  GDK_FLEUR = 52,
  GDK_GOBBLER = 54,
  GDK_GUMBY = 56,
  GDK_HAND1 = 58,
  GDK_HAND2 = 60,
  GDK_HEART = 62,
  GDK_ICON = 64,
  GDK_IRON_CROSS = 66,
  GDK_LEFT_PTR = 68,
  GDK_LEFT_SIDE = 70,
  GDK_LEFT_TEE = 72,
  GDK_LEFTBUTTON = 74,
  GDK_LL_ANGLE = 76,
  GDK_LR_ANGLE = 78,
  GDK_MAN = 80,
  GDK_MIDDLEBUTTON = 82,
  GDK_MOUSE = 84,
  GDK_PENCIL = 86,
  GDK_PIRATE = 88,
  GDK_PLUS = 90,
  GDK_QUESTION_ARROW = 92,
  GDK_RIGHT_PTR = 94,
  GDK_RIGHT_SIDE = 96,
  GDK_RIGHT_TEE = 98,
  GDK_RIGHTBUTTON = 100,
  GDK_RTL_LOGO = 102,
  GDK_SAILBOAT = 104,
  GDK_SB_DOWN_ARROW = 106,
  GDK_SB_H_DOUBLE_ARROW = 108,
  GDK_SB_LEFT_ARROW = 110,
  GDK_SB_RIGHT_ARROW = 112,
  GDK_SB_UP_ARROW = 114,
  GDK_SB_V_DOUBLE_ARROW = 116,
  GDK_SHUTTLE = 118,
  GDK_SIZING = 120,
  GDK_SPIDER = 122,
  GDK_SPRAYCAN = 124,
  GDK_STAR = 126,
  GDK_TARGET = 128,
  GDK_TCROSS = 130,
  GDK_TOP_LEFT_ARROW = 132,
  GDK_TOP_LEFT_CORNER = 134,
  GDK_TOP_RIGHT_CORNER = 136,
  GDK_TOP_SIDE = 138,
  GDK_TOP_TEE = 140,
  GDK_TREK = 142,
  GDK_UL_ANGLE = 144,
  GDK_UMBRELLA = 146,
  GDK_UR_ANGLE = 148,
  GDK_WATCH = 150,
  GDK_XTERM = 152,
  GDK_LAST_CURSOR,
  GDK_BLANK_CURSOR = -2,
  GDK_CURSOR_IS_PIXMAP = -1
} GdkCursorType;
extern
GType gdk_cursor_get_type (void) __attribute__((__const__));
extern
GdkCursor* gdk_cursor_new_for_display (GdkDisplay *display,
       GdkCursorType cursor_type);
extern
GdkCursor* gdk_cursor_new (GdkCursorType cursor_type);
extern
GdkCursor* gdk_cursor_new_from_pixbuf (GdkDisplay *display,
       GdkPixbuf *pixbuf,
       gint x,
       gint y);
extern
GdkCursor* gdk_cursor_new_from_surface (GdkDisplay *display,
       cairo_surface_t *surface,
       gdouble x,
       gdouble y);
extern
GdkCursor* gdk_cursor_new_from_name (GdkDisplay *display,
       const gchar *name);
extern
GdkDisplay* gdk_cursor_get_display (GdkCursor *cursor);
extern
GdkCursor * gdk_cursor_ref (GdkCursor *cursor);
extern
void gdk_cursor_unref (GdkCursor *cursor);
extern
GdkPixbuf* gdk_cursor_get_image (GdkCursor *cursor);
extern
cairo_surface_t *gdk_cursor_get_surface (GdkCursor *cursor,
       gdouble *x_hot,
       gdouble *y_hot);
extern
GdkCursorType gdk_cursor_get_cursor_type (GdkCursor *cursor);
extern
GType gdk_display_manager_get_type (void) __attribute__((__const__));
extern
GdkDisplayManager *gdk_display_manager_get (void);
extern
GdkDisplay * gdk_display_manager_get_default_display (GdkDisplayManager *manager);
extern
void gdk_display_manager_set_default_display (GdkDisplayManager *manager,
                                                            GdkDisplay *display);
extern
GSList * gdk_display_manager_list_displays (GdkDisplayManager *manager);
extern
GdkDisplay * gdk_display_manager_open_display (GdkDisplayManager *manager,
                                                            const gchar *name);
extern GType gdk_cursor_type_get_type (void) __attribute__((__const__));
extern GType gdk_input_source_get_type (void) __attribute__((__const__));
extern GType gdk_input_mode_get_type (void) __attribute__((__const__));
extern GType gdk_axis_use_get_type (void) __attribute__((__const__));
extern GType gdk_device_type_get_type (void) __attribute__((__const__));
extern GType gdk_drag_action_get_type (void) __attribute__((__const__));
extern GType gdk_drag_protocol_get_type (void) __attribute__((__const__));
extern GType gdk_filter_return_get_type (void) __attribute__((__const__));
extern GType gdk_event_type_get_type (void) __attribute__((__const__));
extern GType gdk_visibility_state_get_type (void) __attribute__((__const__));
extern GType gdk_touchpad_gesture_phase_get_type (void) __attribute__((__const__));
extern GType gdk_scroll_direction_get_type (void) __attribute__((__const__));
extern GType gdk_notify_type_get_type (void) __attribute__((__const__));
extern GType gdk_crossing_mode_get_type (void) __attribute__((__const__));
extern GType gdk_property_state_get_type (void) __attribute__((__const__));
extern GType gdk_window_state_get_type (void) __attribute__((__const__));
extern GType gdk_setting_action_get_type (void) __attribute__((__const__));
extern GType gdk_owner_change_get_type (void) __attribute__((__const__));
extern GType gdk_frame_clock_phase_get_type (void) __attribute__((__const__));
extern GType gdk_prop_mode_get_type (void) __attribute__((__const__));
extern GType gdk_byte_order_get_type (void) __attribute__((__const__));
extern GType gdk_modifier_type_get_type (void) __attribute__((__const__));
extern GType gdk_modifier_intent_get_type (void) __attribute__((__const__));
extern GType gdk_status_get_type (void) __attribute__((__const__));
extern GType gdk_grab_status_get_type (void) __attribute__((__const__));
extern GType gdk_grab_ownership_get_type (void) __attribute__((__const__));
extern GType gdk_event_mask_get_type (void) __attribute__((__const__));
extern GType gdk_gl_error_get_type (void) __attribute__((__const__));
extern GType gdk_visual_type_get_type (void) __attribute__((__const__));
extern GType gdk_window_window_class_get_type (void) __attribute__((__const__));
extern GType gdk_window_type_get_type (void) __attribute__((__const__));
extern GType gdk_window_attributes_type_get_type (void) __attribute__((__const__));
extern GType gdk_window_hints_get_type (void) __attribute__((__const__));
extern GType gdk_window_type_hint_get_type (void) __attribute__((__const__));
extern GType gdk_wm_decoration_get_type (void) __attribute__((__const__));
extern GType gdk_wm_function_get_type (void) __attribute__((__const__));
extern GType gdk_gravity_get_type (void) __attribute__((__const__));
extern GType gdk_window_edge_get_type (void) __attribute__((__const__));
extern GType gdk_fullscreen_mode_get_type (void) __attribute__((__const__));
typedef struct _GdkFrameTimings GdkFrameTimings;
extern
GType gdk_frame_timings_get_type (void) __attribute__((__const__));
extern
GdkFrameTimings *gdk_frame_timings_ref (GdkFrameTimings *timings);
extern
void gdk_frame_timings_unref (GdkFrameTimings *timings);
extern
gint64 gdk_frame_timings_get_frame_counter (GdkFrameTimings *timings);
extern
gboolean gdk_frame_timings_get_complete (GdkFrameTimings *timings);
extern
gint64 gdk_frame_timings_get_frame_time (GdkFrameTimings *timings);
extern
gint64 gdk_frame_timings_get_presentation_time (GdkFrameTimings *timings);
extern
gint64 gdk_frame_timings_get_refresh_interval (GdkFrameTimings *timings);
extern
gint64 gdk_frame_timings_get_predicted_presentation_time (GdkFrameTimings *timings);
typedef struct _GdkFrameClock GdkFrameClock;
typedef struct _GdkFrameClockPrivate GdkFrameClockPrivate;
typedef struct _GdkFrameClockClass GdkFrameClockClass;
typedef enum {
  GDK_FRAME_CLOCK_PHASE_NONE = 0,
  GDK_FRAME_CLOCK_PHASE_FLUSH_EVENTS = 1 << 0,
  GDK_FRAME_CLOCK_PHASE_BEFORE_PAINT = 1 << 1,
  GDK_FRAME_CLOCK_PHASE_UPDATE = 1 << 2,
  GDK_FRAME_CLOCK_PHASE_LAYOUT = 1 << 3,
  GDK_FRAME_CLOCK_PHASE_PAINT = 1 << 4,
  GDK_FRAME_CLOCK_PHASE_RESUME_EVENTS = 1 << 5,
  GDK_FRAME_CLOCK_PHASE_AFTER_PAINT = 1 << 6
} GdkFrameClockPhase;
extern
GType gdk_frame_clock_get_type (void) __attribute__((__const__));
extern
gint64 gdk_frame_clock_get_frame_time (GdkFrameClock *frame_clock);
extern
void gdk_frame_clock_request_phase (GdkFrameClock *frame_clock,
                                                  GdkFrameClockPhase phase);
extern
void gdk_frame_clock_begin_updating (GdkFrameClock *frame_clock);
extern
void gdk_frame_clock_end_updating (GdkFrameClock *frame_clock);
extern
gint64 gdk_frame_clock_get_frame_counter (GdkFrameClock *frame_clock);
extern
gint64 gdk_frame_clock_get_history_start (GdkFrameClock *frame_clock);
extern
GdkFrameTimings *gdk_frame_clock_get_timings (GdkFrameClock *frame_clock,
                                                    gint64 frame_counter);
extern
GdkFrameTimings *gdk_frame_clock_get_current_timings (GdkFrameClock *frame_clock);
extern
void gdk_frame_clock_get_refresh_info (GdkFrameClock *frame_clock,
                                       gint64 base_time,
                                       gint64 *refresh_interval_return,
                                       gint64 *presentation_time_return);
extern
GQuark gdk_gl_error_quark (void);
extern
GType gdk_gl_context_get_type (void) __attribute__((__const__));
extern
GdkDisplay * gdk_gl_context_get_display (GdkGLContext *context);
extern
GdkWindow * gdk_gl_context_get_window (GdkGLContext *context);
extern
GdkGLContext * gdk_gl_context_get_shared_context (GdkGLContext *context);
extern
void gdk_gl_context_get_version (GdkGLContext *context,
                                                                 int *major,
                                                                 int *minor);
extern
void gdk_gl_context_set_required_version (GdkGLContext *context,
                                                                 int major,
                                                                 int minor);
extern
void gdk_gl_context_get_required_version (GdkGLContext *context,
                                                                 int *major,
                                                                 int *minor);
extern
void gdk_gl_context_set_debug_enabled (GdkGLContext *context,
                                                                 gboolean enabled);
extern
gboolean gdk_gl_context_get_debug_enabled (GdkGLContext *context);
extern
void gdk_gl_context_set_forward_compatible (GdkGLContext *context,
                                                                 gboolean compatible);
extern
gboolean gdk_gl_context_get_forward_compatible (GdkGLContext *context);
extern
gboolean gdk_gl_context_realize (GdkGLContext *context,
                                                                 GError **error);
extern
void gdk_gl_context_make_current (GdkGLContext *context);
extern
GdkGLContext * gdk_gl_context_get_current (void);
extern
void gdk_gl_context_clear_current (void);
typedef struct _GdkKeymapKey GdkKeymapKey;
struct _GdkKeymapKey
{
  guint keycode;
  gint group;
  gint level;
};
extern
GType gdk_keymap_get_type (void) __attribute__((__const__));
extern
GdkKeymap* gdk_keymap_get_default (void);
extern
GdkKeymap* gdk_keymap_get_for_display (GdkDisplay *display);
extern
guint gdk_keymap_lookup_key (GdkKeymap *keymap,
          const GdkKeymapKey *key);
extern
gboolean gdk_keymap_translate_keyboard_state (GdkKeymap *keymap,
          guint hardware_keycode,
          GdkModifierType state,
          gint group,
          guint *keyval,
          gint *effective_group,
          gint *level,
          GdkModifierType *consumed_modifiers);
extern
gboolean gdk_keymap_get_entries_for_keyval (GdkKeymap *keymap,
          guint keyval,
          GdkKeymapKey **keys,
          gint *n_keys);
extern
gboolean gdk_keymap_get_entries_for_keycode (GdkKeymap *keymap,
          guint hardware_keycode,
          GdkKeymapKey **keys,
          guint **keyvals,
          gint *n_entries);
extern
PangoDirection gdk_keymap_get_direction (GdkKeymap *keymap);
extern
gboolean gdk_keymap_have_bidi_layouts (GdkKeymap *keymap);
extern
gboolean gdk_keymap_get_caps_lock_state (GdkKeymap *keymap);
extern
gboolean gdk_keymap_get_num_lock_state (GdkKeymap *keymap);
extern
gboolean gdk_keymap_get_scroll_lock_state (GdkKeymap *keymap);
extern
guint gdk_keymap_get_modifier_state (GdkKeymap *keymap);
extern
void gdk_keymap_add_virtual_modifiers (GdkKeymap *keymap,
                                                    GdkModifierType *state);
extern
gboolean gdk_keymap_map_virtual_modifiers (GdkKeymap *keymap,
                                                    GdkModifierType *state);
extern
GdkModifierType gdk_keymap_get_modifier_mask (GdkKeymap *keymap,
                                                    GdkModifierIntent intent);
extern
gchar* gdk_keyval_name (guint keyval) __attribute__((__const__));
extern
guint gdk_keyval_from_name (const gchar *keyval_name);
extern
void gdk_keyval_convert_case (guint symbol,
      guint *lower,
      guint *upper);
extern
guint gdk_keyval_to_upper (guint keyval) __attribute__((__const__));
extern
guint gdk_keyval_to_lower (guint keyval) __attribute__((__const__));
extern
gboolean gdk_keyval_is_upper (guint keyval) __attribute__((__const__));
extern
gboolean gdk_keyval_is_lower (guint keyval) __attribute__((__const__));
extern
guint32 gdk_keyval_to_unicode (guint keyval) __attribute__((__const__));
extern
guint gdk_unicode_to_keyval (guint32 wc) __attribute__((__const__));
extern
void gdk_parse_args (gint *argc,
                                                           gchar ***argv);
extern
void gdk_init (gint *argc,
                                                           gchar ***argv);
extern
gboolean gdk_init_check (gint *argc,
                                                           gchar ***argv);
extern
void gdk_add_option_entries_libgtk_only (GOptionGroup *group);
extern
void gdk_pre_parse_libgtk_only (void);
extern
const gchar * gdk_get_program_class (void);
extern
void gdk_set_program_class (const gchar *program_class);
extern
void gdk_notify_startup_complete (void);
extern
void gdk_notify_startup_complete_with_id (const gchar* startup_id);
extern
void gdk_error_trap_push (void);
extern
__attribute__((warn_unused_result)) gint gdk_error_trap_pop (void);
extern
void gdk_error_trap_pop_ignored (void);
extern
const gchar * gdk_get_display_arg_name (void);
extern
gchar* gdk_get_display (void);
extern
GdkGrabStatus gdk_pointer_grab (GdkWindow *window,
                                      gboolean owner_events,
                                      GdkEventMask event_mask,
                                      GdkWindow *confine_to,
                                      GdkCursor *cursor,
                                      guint32 time_);
extern
GdkGrabStatus gdk_keyboard_grab (GdkWindow *window,
                                      gboolean owner_events,
                                      guint32 time_);
extern
void gdk_pointer_ungrab (guint32 time_);
extern
void gdk_keyboard_ungrab (guint32 time_);
extern
gboolean gdk_pointer_is_grabbed (void);
extern
gint gdk_screen_width (void) __attribute__((__const__));
extern
gint gdk_screen_height (void) __attribute__((__const__));
extern
gint gdk_screen_width_mm (void) __attribute__((__const__));
extern
gint gdk_screen_height_mm (void) __attribute__((__const__));
extern
void gdk_set_double_click_time (guint msec);
extern
void gdk_beep (void);
extern
void gdk_flush (void);
extern
void gdk_disable_multidevice (void);
extern
void gdk_set_allowed_backends (const gchar *backends);
extern
PangoContext *gdk_pango_context_get_for_screen (GdkScreen *screen);
extern
PangoContext *gdk_pango_context_get (void);
extern
cairo_region_t *gdk_pango_layout_line_get_clip_region (PangoLayoutLine *line,
                                                     gint x_origin,
                                                     gint y_origin,
                                                     const gint *index_ranges,
                                                     gint n_ranges);
extern
cairo_region_t *gdk_pango_layout_get_clip_region (PangoLayout *layout,
                                                     gint x_origin,
                                                     gint y_origin,
                                                     const gint *index_ranges,
                                                     gint n_ranges);
typedef enum
{
  GDK_PROP_MODE_REPLACE,
  GDK_PROP_MODE_PREPEND,
  GDK_PROP_MODE_APPEND
} GdkPropMode;
extern
GdkAtom gdk_atom_intern (const gchar *atom_name,
                         gboolean only_if_exists);
extern
GdkAtom gdk_atom_intern_static_string (const gchar *atom_name);
extern
gchar* gdk_atom_name (GdkAtom atom);
extern
gboolean gdk_property_get (GdkWindow *window,
                              GdkAtom property,
                              GdkAtom type,
                              gulong offset,
                              gulong length,
                              gint pdelete,
                              GdkAtom *actual_property_type,
                              gint *actual_format,
                              gint *actual_length,
                              guchar **data);
extern
void gdk_property_change (GdkWindow *window,
                              GdkAtom property,
                              GdkAtom type,
                              gint format,
                              GdkPropMode mode,
                              const guchar *data,
                              gint nelements);
extern
void gdk_property_delete (GdkWindow *window,
                              GdkAtom property);
extern
gint gdk_text_property_to_utf8_list_for_display (GdkDisplay *display,
                                                   GdkAtom encoding,
                                                   gint format,
                                                   const guchar *text,
                                                   gint length,
                                                   gchar ***list);
extern
gchar *gdk_utf8_to_string_target (const gchar *str);
extern
gboolean gdk_rectangle_intersect (const GdkRectangle *src1,
                                  const GdkRectangle *src2,
                                  GdkRectangle *dest);
extern
void gdk_rectangle_union (const GdkRectangle *src1,
                                  const GdkRectangle *src2,
                                  GdkRectangle *dest);
extern
GType gdk_rectangle_get_type (void) __attribute__((__const__));
extern
gboolean gdk_selection_owner_set (GdkWindow *owner,
        GdkAtom selection,
        guint32 time_,
        gboolean send_event);
extern
GdkWindow* gdk_selection_owner_get (GdkAtom selection);
extern
gboolean gdk_selection_owner_set_for_display (GdkDisplay *display,
      GdkWindow *owner,
      GdkAtom selection,
      guint32 time_,
      gboolean send_event);
extern
GdkWindow *gdk_selection_owner_get_for_display (GdkDisplay *display,
      GdkAtom selection);
extern
void gdk_selection_convert (GdkWindow *requestor,
        GdkAtom selection,
        GdkAtom target,
        guint32 time_);
extern
gint gdk_selection_property_get (GdkWindow *requestor,
           guchar **data,
           GdkAtom *prop_type,
           gint *prop_format);
extern
void gdk_selection_send_notify (GdkWindow *requestor,
          GdkAtom selection,
          GdkAtom target,
          GdkAtom property,
          guint32 time_);
extern
void gdk_selection_send_notify_for_display (GdkDisplay *display,
        GdkWindow *requestor,
        GdkAtom selection,
        GdkAtom target,
        GdkAtom property,
        guint32 time_);
typedef struct _GdkGeometry GdkGeometry;
typedef struct _GdkWindowAttr GdkWindowAttr;
typedef struct _GdkWindowRedirect GdkWindowRedirect;
typedef enum
{
  GDK_INPUT_OUTPUT,
  GDK_INPUT_ONLY
} GdkWindowWindowClass;
typedef enum
{
  GDK_WINDOW_ROOT,
  GDK_WINDOW_TOPLEVEL,
  GDK_WINDOW_CHILD,
  GDK_WINDOW_TEMP,
  GDK_WINDOW_FOREIGN,
  GDK_WINDOW_OFFSCREEN,
  GDK_WINDOW_SUBSURFACE
} GdkWindowType;
typedef enum
{
  GDK_WA_TITLE = 1 << 1,
  GDK_WA_X = 1 << 2,
  GDK_WA_Y = 1 << 3,
  GDK_WA_CURSOR = 1 << 4,
  GDK_WA_VISUAL = 1 << 5,
  GDK_WA_WMCLASS = 1 << 6,
  GDK_WA_NOREDIR = 1 << 7,
  GDK_WA_TYPE_HINT = 1 << 8
} GdkWindowAttributesType;
typedef enum
{
  GDK_HINT_POS = 1 << 0,
  GDK_HINT_MIN_SIZE = 1 << 1,
  GDK_HINT_MAX_SIZE = 1 << 2,
  GDK_HINT_BASE_SIZE = 1 << 3,
  GDK_HINT_ASPECT = 1 << 4,
  GDK_HINT_RESIZE_INC = 1 << 5,
  GDK_HINT_WIN_GRAVITY = 1 << 6,
  GDK_HINT_USER_POS = 1 << 7,
  GDK_HINT_USER_SIZE = 1 << 8
} GdkWindowHints;
typedef enum
{
  GDK_WINDOW_TYPE_HINT_NORMAL,
  GDK_WINDOW_TYPE_HINT_DIALOG,
  GDK_WINDOW_TYPE_HINT_MENU,
  GDK_WINDOW_TYPE_HINT_TOOLBAR,
  GDK_WINDOW_TYPE_HINT_SPLASHSCREEN,
  GDK_WINDOW_TYPE_HINT_UTILITY,
  GDK_WINDOW_TYPE_HINT_DOCK,
  GDK_WINDOW_TYPE_HINT_DESKTOP,
  GDK_WINDOW_TYPE_HINT_DROPDOWN_MENU,
  GDK_WINDOW_TYPE_HINT_POPUP_MENU,
  GDK_WINDOW_TYPE_HINT_TOOLTIP,
  GDK_WINDOW_TYPE_HINT_NOTIFICATION,
  GDK_WINDOW_TYPE_HINT_COMBO,
  GDK_WINDOW_TYPE_HINT_DND
} GdkWindowTypeHint;
typedef enum
{
  GDK_DECOR_ALL = 1 << 0,
  GDK_DECOR_BORDER = 1 << 1,
  GDK_DECOR_RESIZEH = 1 << 2,
  GDK_DECOR_TITLE = 1 << 3,
  GDK_DECOR_MENU = 1 << 4,
  GDK_DECOR_MINIMIZE = 1 << 5,
  GDK_DECOR_MAXIMIZE = 1 << 6
} GdkWMDecoration;
typedef enum
{
  GDK_FUNC_ALL = 1 << 0,
  GDK_FUNC_RESIZE = 1 << 1,
  GDK_FUNC_MOVE = 1 << 2,
  GDK_FUNC_MINIMIZE = 1 << 3,
  GDK_FUNC_MAXIMIZE = 1 << 4,
  GDK_FUNC_CLOSE = 1 << 5
} GdkWMFunction;
typedef enum
{
  GDK_GRAVITY_NORTH_WEST = 1,
  GDK_GRAVITY_NORTH,
  GDK_GRAVITY_NORTH_EAST,
  GDK_GRAVITY_WEST,
  GDK_GRAVITY_CENTER,
  GDK_GRAVITY_EAST,
  GDK_GRAVITY_SOUTH_WEST,
  GDK_GRAVITY_SOUTH,
  GDK_GRAVITY_SOUTH_EAST,
  GDK_GRAVITY_STATIC
} GdkGravity;
typedef enum
{
  GDK_WINDOW_EDGE_NORTH_WEST,
  GDK_WINDOW_EDGE_NORTH,
  GDK_WINDOW_EDGE_NORTH_EAST,
  GDK_WINDOW_EDGE_WEST,
  GDK_WINDOW_EDGE_EAST,
  GDK_WINDOW_EDGE_SOUTH_WEST,
  GDK_WINDOW_EDGE_SOUTH,
  GDK_WINDOW_EDGE_SOUTH_EAST
} GdkWindowEdge;
typedef enum
{
  GDK_FULLSCREEN_ON_CURRENT_MONITOR,
  GDK_FULLSCREEN_ON_ALL_MONITORS
} GdkFullscreenMode;
struct _GdkWindowAttr
{
  gchar *title;
  gint event_mask;
  gint x, y;
  gint width;
  gint height;
  GdkWindowWindowClass wclass;
  GdkVisual *visual;
  GdkWindowType window_type;
  GdkCursor *cursor;
  gchar *wmclass_name;
  gchar *wmclass_class;
  gboolean override_redirect;
  GdkWindowTypeHint type_hint;
};
struct _GdkGeometry
{
  gint min_width;
  gint min_height;
  gint max_width;
  gint max_height;
  gint base_width;
  gint base_height;
  gint width_inc;
  gint height_inc;
  gdouble min_aspect;
  gdouble max_aspect;
  GdkGravity win_gravity;
};
typedef struct _GdkWindowClass GdkWindowClass;
struct _GdkWindowClass
{
  GObjectClass parent_class;
  GdkWindow * (* pick_embedded_child) (GdkWindow *window,
                                             gdouble x,
                                             gdouble y);
  void (* to_embedder) (GdkWindow *window,
                                             gdouble offscreen_x,
                                             gdouble offscreen_y,
                                             gdouble *embedder_x,
                                             gdouble *embedder_y);
  void (* from_embedder) (GdkWindow *window,
                                             gdouble embedder_x,
                                             gdouble embedder_y,
                                             gdouble *offscreen_x,
                                             gdouble *offscreen_y);
  cairo_surface_t * (* create_surface) (GdkWindow *window,
                                             gint width,
                                             gint height);
  void (*_gdk_reserved1) (void);
  void (*_gdk_reserved2) (void);
  void (*_gdk_reserved3) (void);
  void (*_gdk_reserved4) (void);
  void (*_gdk_reserved5) (void);
  void (*_gdk_reserved6) (void);
  void (*_gdk_reserved7) (void);
  void (*_gdk_reserved8) (void);
};
extern
GType gdk_window_get_type (void) __attribute__((__const__));
extern
GdkWindow* gdk_window_new (GdkWindow *parent,
                                                GdkWindowAttr *attributes,
                                                gint attributes_mask);
extern
void gdk_window_destroy (GdkWindow *window);
extern
GdkWindowType gdk_window_get_window_type (GdkWindow *window);
extern
gboolean gdk_window_is_destroyed (GdkWindow *window);
extern
GdkVisual * gdk_window_get_visual (GdkWindow *window);
extern
GdkScreen * gdk_window_get_screen (GdkWindow *window);
extern
GdkDisplay * gdk_window_get_display (GdkWindow *window);
extern
GdkWindow* gdk_window_at_pointer (gint *win_x,
                                                gint *win_y);
extern
void gdk_window_show (GdkWindow *window);
extern
void gdk_window_hide (GdkWindow *window);
extern
void gdk_window_withdraw (GdkWindow *window);
extern
void gdk_window_show_unraised (GdkWindow *window);
extern
void gdk_window_move (GdkWindow *window,
                                                gint x,
                                                gint y);
extern
void gdk_window_resize (GdkWindow *window,
                                                gint width,
                                                gint height);
extern
void gdk_window_move_resize (GdkWindow *window,
                                                gint x,
                                                gint y,
                                                gint width,
                                                gint height);
extern
void gdk_window_reparent (GdkWindow *window,
                                                GdkWindow *new_parent,
                                                gint x,
                                                gint y);
extern
void gdk_window_raise (GdkWindow *window);
extern
void gdk_window_lower (GdkWindow *window);
extern
void gdk_window_restack (GdkWindow *window,
      GdkWindow *sibling,
      gboolean above);
extern
void gdk_window_focus (GdkWindow *window,
                                                guint32 timestamp);
extern
void gdk_window_set_user_data (GdkWindow *window,
                                                gpointer user_data);
extern
void gdk_window_set_override_redirect (GdkWindow *window,
                                                gboolean override_redirect);
extern
gboolean gdk_window_get_accept_focus (GdkWindow *window);
extern
void gdk_window_set_accept_focus (GdkWindow *window,
             gboolean accept_focus);
extern
gboolean gdk_window_get_focus_on_map (GdkWindow *window);
extern
void gdk_window_set_focus_on_map (GdkWindow *window,
             gboolean focus_on_map);
extern
void gdk_window_add_filter (GdkWindow *window,
                                                GdkFilterFunc function,
                                                gpointer data);
extern
void gdk_window_remove_filter (GdkWindow *window,
                                                GdkFilterFunc function,
                                                gpointer data);
extern
void gdk_window_scroll (GdkWindow *window,
                                                gint dx,
                                                gint dy);
extern
void gdk_window_move_region (GdkWindow *window,
      const cairo_region_t *region,
      gint dx,
      gint dy);
extern
gboolean gdk_window_ensure_native (GdkWindow *window);
extern
void gdk_window_shape_combine_region (GdkWindow *window,
                                      const cairo_region_t *shape_region,
                                      gint offset_x,
                                      gint offset_y);
extern
void gdk_window_set_child_shapes (GdkWindow *window);
extern
gboolean gdk_window_get_composited (GdkWindow *window);
extern
void gdk_window_set_composited (GdkWindow *window,
                                  gboolean composited);
extern
void gdk_window_merge_child_shapes (GdkWindow *window);
extern
void gdk_window_input_shape_combine_region (GdkWindow *window,
                                            const cairo_region_t *shape_region,
                                            gint offset_x,
                                            gint offset_y);
extern
void gdk_window_set_child_input_shapes (GdkWindow *window);
extern
void gdk_window_merge_child_input_shapes (GdkWindow *window);
extern
void gdk_window_set_pass_through (GdkWindow *window,
                                  gboolean pass_through);
extern
gboolean gdk_window_get_pass_through (GdkWindow *window);
extern
gboolean gdk_window_is_visible (GdkWindow *window);
extern
gboolean gdk_window_is_viewable (GdkWindow *window);
extern
gboolean gdk_window_is_input_only (GdkWindow *window);
extern
gboolean gdk_window_is_shaped (GdkWindow *window);
extern
GdkWindowState gdk_window_get_state (GdkWindow *window);
extern
gboolean gdk_window_set_static_gravities (GdkWindow *window,
                                          gboolean use_static);
typedef void (*GdkWindowInvalidateHandlerFunc) (GdkWindow *window,
       cairo_region_t *region);
extern
void gdk_window_set_invalidate_handler (GdkWindow *window,
     GdkWindowInvalidateHandlerFunc handler);
extern
gboolean gdk_window_has_native (GdkWindow *window);
extern
void gdk_window_set_type_hint (GdkWindow *window,
                                            GdkWindowTypeHint hint);
extern
GdkWindowTypeHint gdk_window_get_type_hint (GdkWindow *window);
extern
gboolean gdk_window_get_modal_hint (GdkWindow *window);
extern
void gdk_window_set_modal_hint (GdkWindow *window,
                                           gboolean modal);
extern
void gdk_window_set_skip_taskbar_hint (GdkWindow *window,
                                       gboolean skips_taskbar);
extern
void gdk_window_set_skip_pager_hint (GdkWindow *window,
                                       gboolean skips_pager);
extern
void gdk_window_set_urgency_hint (GdkWindow *window,
           gboolean urgent);
extern
void gdk_window_set_geometry_hints (GdkWindow *window,
          const GdkGeometry *geometry,
          GdkWindowHints geom_mask);
extern
cairo_region_t *gdk_window_get_clip_region (GdkWindow *window);
extern
cairo_region_t *gdk_window_get_visible_region(GdkWindow *window);
extern
void gdk_window_begin_paint_rect (GdkWindow *window,
          const GdkRectangle *rectangle);
extern
void gdk_window_mark_paint_from_clip (GdkWindow *window,
            cairo_t *cr);
extern
void gdk_window_begin_paint_region (GdkWindow *window,
          const cairo_region_t *region);
extern
void gdk_window_end_paint (GdkWindow *window);
extern
void gdk_window_flush (GdkWindow *window);
extern
void gdk_window_set_title (GdkWindow *window,
         const gchar *title);
extern
void gdk_window_set_role (GdkWindow *window,
         const gchar *role);
extern
void gdk_window_set_startup_id (GdkWindow *window,
         const gchar *startup_id);
extern
void gdk_window_set_transient_for (GdkWindow *window,
         GdkWindow *parent);
extern
void gdk_window_set_background (GdkWindow *window,
       const GdkColor *color);
extern
void gdk_window_set_background_rgba (GdkWindow *window,
                                              const GdkRGBA *rgba);
extern
void gdk_window_set_background_pattern (GdkWindow *window,
                                                 cairo_pattern_t *pattern);
extern
cairo_pattern_t *gdk_window_get_background_pattern (GdkWindow *window);
extern
void gdk_window_set_cursor (GdkWindow *window,
       GdkCursor *cursor);
extern
GdkCursor *gdk_window_get_cursor (GdkWindow *window);
extern
void gdk_window_set_device_cursor (GdkWindow *window,
                                            GdkDevice *device,
                                            GdkCursor *cursor);
extern
GdkCursor *gdk_window_get_device_cursor (GdkWindow *window,
                                            GdkDevice *device);
extern
void gdk_window_get_user_data (GdkWindow *window,
       gpointer *data);
extern
void gdk_window_get_geometry (GdkWindow *window,
       gint *x,
       gint *y,
       gint *width,
       gint *height);
extern
int gdk_window_get_width (GdkWindow *window);
extern
int gdk_window_get_height (GdkWindow *window);
extern
void gdk_window_get_position (GdkWindow *window,
       gint *x,
       gint *y);
extern
gint gdk_window_get_origin (GdkWindow *window,
       gint *x,
       gint *y);
extern
void gdk_window_get_root_coords (GdkWindow *window,
       gint x,
       gint y,
       gint *root_x,
       gint *root_y);
extern
void gdk_window_coords_to_parent (GdkWindow *window,
                                          gdouble x,
                                          gdouble y,
                                          gdouble *parent_x,
                                          gdouble *parent_y);
extern
void gdk_window_coords_from_parent (GdkWindow *window,
                                          gdouble parent_x,
                                          gdouble parent_y,
                                          gdouble *x,
                                          gdouble *y);
extern
void gdk_window_get_root_origin (GdkWindow *window,
       gint *x,
       gint *y);
extern
void gdk_window_get_frame_extents (GdkWindow *window,
                                            GdkRectangle *rect);
extern
gint gdk_window_get_scale_factor (GdkWindow *window);
extern
GdkWindow * gdk_window_get_pointer (GdkWindow *window,
                                          gint *x,
                                          gint *y,
                                          GdkModifierType *mask);
extern
GdkWindow * gdk_window_get_device_position (GdkWindow *window,
                                              GdkDevice *device,
                                              gint *x,
                                              gint *y,
                                              GdkModifierType *mask);
extern
GdkWindow * gdk_window_get_device_position_double (GdkWindow *window,
                                                     GdkDevice *device,
                                                     gdouble *x,
                                                     gdouble *y,
                                                     GdkModifierType *mask);
extern
GdkWindow * gdk_window_get_parent (GdkWindow *window);
extern
GdkWindow * gdk_window_get_toplevel (GdkWindow *window);
extern
GdkWindow * gdk_window_get_effective_parent (GdkWindow *window);
extern
GdkWindow * gdk_window_get_effective_toplevel (GdkWindow *window);
extern
GList * gdk_window_get_children (GdkWindow *window);
extern
GList * gdk_window_peek_children (GdkWindow *window);
extern
GList * gdk_window_get_children_with_user_data (GdkWindow *window,
            gpointer user_data);
extern
GdkEventMask gdk_window_get_events (GdkWindow *window);
extern
void gdk_window_set_events (GdkWindow *window,
       GdkEventMask event_mask);
extern
void gdk_window_set_device_events (GdkWindow *window,
                                            GdkDevice *device,
                                            GdkEventMask event_mask);
extern
GdkEventMask gdk_window_get_device_events (GdkWindow *window,
                                            GdkDevice *device);
extern
void gdk_window_set_source_events (GdkWindow *window,
                                            GdkInputSource source,
                                            GdkEventMask event_mask);
extern
GdkEventMask gdk_window_get_source_events (GdkWindow *window,
                                            GdkInputSource source);
extern
void gdk_window_set_icon_list (GdkWindow *window,
       GList *pixbufs);
extern
void gdk_window_set_icon_name (GdkWindow *window,
       const gchar *name);
extern
void gdk_window_set_group (GdkWindow *window,
       GdkWindow *leader);
extern
GdkWindow* gdk_window_get_group (GdkWindow *window);
extern
void gdk_window_set_decorations (GdkWindow *window,
       GdkWMDecoration decorations);
extern
gboolean gdk_window_get_decorations (GdkWindow *window,
       GdkWMDecoration *decorations);
extern
void gdk_window_set_functions (GdkWindow *window,
       GdkWMFunction functions);
extern
cairo_surface_t *
              gdk_window_create_similar_surface (GdkWindow *window,
                                          cairo_content_t content,
                                          int width,
                                          int height);
extern
cairo_surface_t *
              gdk_window_create_similar_image_surface (GdkWindow *window,
             cairo_format_t format,
             int width,
             int height,
             int scale);
extern
void gdk_window_beep (GdkWindow *window);
extern
void gdk_window_iconify (GdkWindow *window);
extern
void gdk_window_deiconify (GdkWindow *window);
extern
void gdk_window_stick (GdkWindow *window);
extern
void gdk_window_unstick (GdkWindow *window);
extern
void gdk_window_maximize (GdkWindow *window);
extern
void gdk_window_unmaximize (GdkWindow *window);
extern
void gdk_window_fullscreen (GdkWindow *window);
extern
void gdk_window_fullscreen_on_monitor (GdkWindow *window,
                                                gint monitor);
extern
void gdk_window_set_fullscreen_mode (GdkWindow *window,
                                          GdkFullscreenMode mode);
extern
GdkFullscreenMode
              gdk_window_get_fullscreen_mode (GdkWindow *window);
extern
void gdk_window_unfullscreen (GdkWindow *window);
extern
void gdk_window_set_keep_above (GdkWindow *window,
                                          gboolean setting);
extern
void gdk_window_set_keep_below (GdkWindow *window,
                                          gboolean setting);
extern
void gdk_window_set_opacity (GdkWindow *window,
                                          gdouble opacity);
extern
void gdk_window_register_dnd (GdkWindow *window);
extern
GdkDragProtocol
              gdk_window_get_drag_protocol(GdkWindow *window,
                                           GdkWindow **target);
extern
void gdk_window_begin_resize_drag (GdkWindow *window,
                                              GdkWindowEdge edge,
                                              gint button,
                                              gint root_x,
                                              gint root_y,
                                              guint32 timestamp);
extern
void gdk_window_begin_resize_drag_for_device (GdkWindow *window,
                                              GdkWindowEdge edge,
                                              GdkDevice *device,
                                              gint button,
                                              gint root_x,
                                              gint root_y,
                                              guint32 timestamp);
extern
void gdk_window_begin_move_drag (GdkWindow *window,
                                              gint button,
                                              gint root_x,
                                              gint root_y,
                                              guint32 timestamp);
extern
void gdk_window_begin_move_drag_for_device (GdkWindow *window,
                                              GdkDevice *device,
                                              gint button,
                                              gint root_x,
                                              gint root_y,
                                              guint32 timestamp);
extern
void gdk_window_invalidate_rect (GdkWindow *window,
              const GdkRectangle *rect,
              gboolean invalidate_children);
extern
void gdk_window_invalidate_region (GdkWindow *window,
              const cairo_region_t *region,
              gboolean invalidate_children);
typedef gboolean (*GdkWindowChildFunc) (GdkWindow *window,
                                                 gpointer user_data);
extern
void gdk_window_invalidate_maybe_recurse (GdkWindow *window,
       const cairo_region_t *region,
       GdkWindowChildFunc child_func,
       gpointer user_data);
extern
cairo_region_t *gdk_window_get_update_area (GdkWindow *window);
extern
void gdk_window_freeze_updates (GdkWindow *window);
extern
void gdk_window_thaw_updates (GdkWindow *window);
extern
void gdk_window_freeze_toplevel_updates_libgtk_only (GdkWindow *window);
extern
void gdk_window_thaw_toplevel_updates_libgtk_only (GdkWindow *window);
extern
void gdk_window_process_all_updates (void);
extern
void gdk_window_process_updates (GdkWindow *window,
        gboolean update_children);
extern
void gdk_window_set_debug_updates (gboolean setting);
extern
void gdk_window_constrain_size (GdkGeometry *geometry,
                                           GdkWindowHints flags,
                                           gint width,
                                           gint height,
                                           gint *new_width,
                                           gint *new_height);
extern
void gdk_window_enable_synchronized_configure (GdkWindow *window);
extern
void gdk_window_configure_finished (GdkWindow *window);
extern
GdkWindow *gdk_get_default_root_window (void);
extern
cairo_surface_t *
           gdk_offscreen_window_get_surface (GdkWindow *window);
extern
void gdk_offscreen_window_set_embedder (GdkWindow *window,
      GdkWindow *embedder);
extern
GdkWindow *gdk_offscreen_window_get_embedder (GdkWindow *window);
extern
void gdk_window_geometry_changed (GdkWindow *window);
extern
void gdk_window_set_support_multidevice (GdkWindow *window,
                                               gboolean support_multidevice);
extern
gboolean gdk_window_get_support_multidevice (GdkWindow *window);
extern
GdkFrameClock* gdk_window_get_frame_clock (GdkWindow *window);
extern
void gdk_window_set_opaque_region (GdkWindow *window,
                                                cairo_region_t *region);
extern
void gdk_window_set_event_compression (GdkWindow *window,
                                                gboolean event_compression);
extern
gboolean gdk_window_get_event_compression (GdkWindow *window);
extern
void gdk_window_set_shadow_width (GdkWindow *window,
                                                gint left,
                                                gint right,
                                                gint top,
                                                gint bottom);
extern
gboolean gdk_window_show_window_menu (GdkWindow *window,
                                                GdkEvent *event);
extern
GdkGLContext * gdk_window_create_gl_context (GdkWindow *window,
                                                GError **error);
extern
void gdk_test_render_sync (GdkWindow *window);
extern
gboolean gdk_test_simulate_key (GdkWindow *window,
                                                 gint x,
                                                 gint y,
                                                 guint keyval,
                                                 GdkModifierType modifiers,
                                                 GdkEventType key_pressrelease);
extern
gboolean gdk_test_simulate_button (GdkWindow *window,
                                                 gint x,
                                                 gint y,
                                                 guint button,
                                                 GdkModifierType modifiers,
                                                 GdkEventType button_pressrelease);
extern
void gdk_threads_init (void);
extern
void gdk_threads_enter (void);
extern
void gdk_threads_leave (void);
extern
void gdk_threads_set_lock_functions (GCallback enter_fn,
                                               GCallback leave_fn);
extern
guint gdk_threads_add_idle_full (gint priority,
                                               GSourceFunc function,
                                               gpointer data,
                                               GDestroyNotify notify);
extern
guint gdk_threads_add_idle (GSourceFunc function,
                                               gpointer data);
extern
guint gdk_threads_add_timeout_full (gint priority,
                                               guint interval,
                                               GSourceFunc function,
                                               gpointer data,
                                               GDestroyNotify notify);
extern
guint gdk_threads_add_timeout (guint interval,
                                               GSourceFunc function,
                                               gpointer data);
extern
guint gdk_threads_add_timeout_seconds_full (gint priority,
                                               guint interval,
                                               GSourceFunc function,
                                               gpointer data,
                                               GDestroyNotify notify);
extern
guint gdk_threads_add_timeout_seconds (guint interval,
                                               GSourceFunc function,
                                               gpointer data);
typedef enum
{
  GDK_VISUAL_STATIC_GRAY,
  GDK_VISUAL_GRAYSCALE,
  GDK_VISUAL_STATIC_COLOR,
  GDK_VISUAL_PSEUDO_COLOR,
  GDK_VISUAL_TRUE_COLOR,
  GDK_VISUAL_DIRECT_COLOR
} GdkVisualType;
extern
GType gdk_visual_get_type (void) __attribute__((__const__));
extern
gint gdk_visual_get_best_depth (void);
extern
GdkVisualType gdk_visual_get_best_type (void);
extern
GdkVisual* gdk_visual_get_system (void);
extern
GdkVisual* gdk_visual_get_best (void);
extern
GdkVisual* gdk_visual_get_best_with_depth (gint depth);
extern
GdkVisual* gdk_visual_get_best_with_type (GdkVisualType visual_type);
extern
GdkVisual* gdk_visual_get_best_with_both (gint depth,
                                              GdkVisualType visual_type);
extern
void gdk_query_depths (gint **depths,
                             gint *count);
extern
void gdk_query_visual_types (GdkVisualType **visual_types,
                             gint *count);
extern
GList* gdk_list_visuals (void);
extern
GdkScreen *gdk_visual_get_screen (GdkVisual *visual);
extern
GdkVisualType gdk_visual_get_visual_type (GdkVisual *visual);
extern
gint gdk_visual_get_depth (GdkVisual *visual);
extern
GdkByteOrder gdk_visual_get_byte_order (GdkVisual *visual);
extern
gint gdk_visual_get_colormap_size (GdkVisual *visual);
extern
gint gdk_visual_get_bits_per_rgb (GdkVisual *visual);
extern
void gdk_visual_get_red_pixel_details (GdkVisual *visual,
                                                  guint32 *mask,
                                                  gint *shift,
                                                  gint *precision);
extern
void gdk_visual_get_green_pixel_details (GdkVisual *visual,
                                                  guint32 *mask,
                                                  gint *shift,
                                                  gint *precision);
extern
void gdk_visual_get_blue_pixel_details (GdkVisual *visual,
                                                  guint32 *mask,
                                                  gint *shift,
                                                  gint *precision);
typedef GdkAppLaunchContext *GdkAppLaunchContext_autoptr;
 static inline void glib_autoptr_cleanup_GdkAppLaunchContext (GdkAppLaunchContext **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GdkCursor *GdkCursor_autoptr;
 static inline void glib_autoptr_cleanup_GdkCursor (GdkCursor **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GdkDevice *GdkDevice_autoptr;
 static inline void glib_autoptr_cleanup_GdkDevice (GdkDevice **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GdkDeviceManager *GdkDeviceManager_autoptr;
 static inline void glib_autoptr_cleanup_GdkDeviceManager (GdkDeviceManager **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GdkDisplay *GdkDisplay_autoptr;
 static inline void glib_autoptr_cleanup_GdkDisplay (GdkDisplay **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GdkDisplayManager *GdkDisplayManager_autoptr;
 static inline void glib_autoptr_cleanup_GdkDisplayManager (GdkDisplayManager **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GdkDragContext *GdkDragContext_autoptr;
 static inline void glib_autoptr_cleanup_GdkDragContext (GdkDragContext **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GdkFrameClock *GdkFrameClock_autoptr;
 static inline void glib_autoptr_cleanup_GdkFrameClock (GdkFrameClock **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GdkGLContext *GdkGLContext_autoptr;
 static inline void glib_autoptr_cleanup_GdkGLContext (GdkGLContext **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GdkKeymap *GdkKeymap_autoptr;
 static inline void glib_autoptr_cleanup_GdkKeymap (GdkKeymap **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GdkScreen *GdkScreen_autoptr;
 static inline void glib_autoptr_cleanup_GdkScreen (GdkScreen **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GdkVisual *GdkVisual_autoptr;
 static inline void glib_autoptr_cleanup_GdkVisual (GdkVisual **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GdkWindow *GdkWindow_autoptr;
 static inline void glib_autoptr_cleanup_GdkWindow (GdkWindow **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GdkEvent *GdkEvent_autoptr;
 static inline void glib_autoptr_cleanup_GdkEvent (GdkEvent **_ptr) { if (*_ptr) (gdk_event_free) (*_ptr); }
typedef GdkFrameTimings *GdkFrameTimings_autoptr;
 static inline void glib_autoptr_cleanup_GdkFrameTimings (GdkFrameTimings **_ptr) { if (*_ptr) (gdk_frame_timings_unref) (*_ptr); }
typedef GdkRGBA *GdkRGBA_autoptr;
 static inline void glib_autoptr_cleanup_GdkRGBA (GdkRGBA **_ptr) { if (*_ptr) (gdk_rgba_free) (*_ptr); }
typedef enum
{
  GTK_ALIGN_FILL,
  GTK_ALIGN_START,
  GTK_ALIGN_END,
  GTK_ALIGN_CENTER,
  GTK_ALIGN_BASELINE
} GtkAlign;
typedef enum
{
  GTK_ARROW_UP,
  GTK_ARROW_DOWN,
  GTK_ARROW_LEFT,
  GTK_ARROW_RIGHT,
  GTK_ARROW_NONE
} GtkArrowType;
typedef enum
{
  GTK_BASELINE_POSITION_TOP,
  GTK_BASELINE_POSITION_CENTER,
  GTK_BASELINE_POSITION_BOTTOM
} GtkBaselinePosition;
typedef enum
{
  GTK_DELETE_CHARS,
  GTK_DELETE_WORD_ENDS,
  GTK_DELETE_WORDS,
  GTK_DELETE_DISPLAY_LINES,
  GTK_DELETE_DISPLAY_LINE_ENDS,
  GTK_DELETE_PARAGRAPH_ENDS,
  GTK_DELETE_PARAGRAPHS,
  GTK_DELETE_WHITESPACE
} GtkDeleteType;
typedef enum
{
  GTK_DIR_TAB_FORWARD,
  GTK_DIR_TAB_BACKWARD,
  GTK_DIR_UP,
  GTK_DIR_DOWN,
  GTK_DIR_LEFT,
  GTK_DIR_RIGHT
} GtkDirectionType;
typedef enum
{
  GTK_ICON_SIZE_INVALID,
  GTK_ICON_SIZE_MENU,
  GTK_ICON_SIZE_SMALL_TOOLBAR,
  GTK_ICON_SIZE_LARGE_TOOLBAR,
  GTK_ICON_SIZE_BUTTON,
  GTK_ICON_SIZE_DND,
  GTK_ICON_SIZE_DIALOG
} GtkIconSize;
typedef enum
{
  GTK_SENSITIVITY_AUTO,
  GTK_SENSITIVITY_ON,
  GTK_SENSITIVITY_OFF
} GtkSensitivityType;
typedef enum
{
  GTK_TEXT_DIR_NONE,
  GTK_TEXT_DIR_LTR,
  GTK_TEXT_DIR_RTL
} GtkTextDirection;
typedef enum
{
  GTK_JUSTIFY_LEFT,
  GTK_JUSTIFY_RIGHT,
  GTK_JUSTIFY_CENTER,
  GTK_JUSTIFY_FILL
} GtkJustification;
typedef enum
{
  GTK_MENU_DIR_PARENT,
  GTK_MENU_DIR_CHILD,
  GTK_MENU_DIR_NEXT,
  GTK_MENU_DIR_PREV
} GtkMenuDirectionType;
typedef enum
{
  GTK_MESSAGE_INFO,
  GTK_MESSAGE_WARNING,
  GTK_MESSAGE_QUESTION,
  GTK_MESSAGE_ERROR,
  GTK_MESSAGE_OTHER
} GtkMessageType;
typedef enum
{
  GTK_MOVEMENT_LOGICAL_POSITIONS,
  GTK_MOVEMENT_VISUAL_POSITIONS,
  GTK_MOVEMENT_WORDS,
  GTK_MOVEMENT_DISPLAY_LINES,
  GTK_MOVEMENT_DISPLAY_LINE_ENDS,
  GTK_MOVEMENT_PARAGRAPHS,
  GTK_MOVEMENT_PARAGRAPH_ENDS,
  GTK_MOVEMENT_PAGES,
  GTK_MOVEMENT_BUFFER_ENDS,
  GTK_MOVEMENT_HORIZONTAL_PAGES
} GtkMovementStep;
typedef enum
{
  GTK_SCROLL_STEPS,
  GTK_SCROLL_PAGES,
  GTK_SCROLL_ENDS,
  GTK_SCROLL_HORIZONTAL_STEPS,
  GTK_SCROLL_HORIZONTAL_PAGES,
  GTK_SCROLL_HORIZONTAL_ENDS
} GtkScrollStep;
typedef enum
{
  GTK_ORIENTATION_HORIZONTAL,
  GTK_ORIENTATION_VERTICAL
} GtkOrientation;
typedef enum
{
  GTK_PACK_START,
  GTK_PACK_END
} GtkPackType;
typedef enum
{
  GTK_POS_LEFT,
  GTK_POS_RIGHT,
  GTK_POS_TOP,
  GTK_POS_BOTTOM
} GtkPositionType;
typedef enum
{
  GTK_RELIEF_NORMAL,
  GTK_RELIEF_HALF,
  GTK_RELIEF_NONE
} GtkReliefStyle;
typedef enum
{
  GTK_SCROLL_NONE,
  GTK_SCROLL_JUMP,
  GTK_SCROLL_STEP_BACKWARD,
  GTK_SCROLL_STEP_FORWARD,
  GTK_SCROLL_PAGE_BACKWARD,
  GTK_SCROLL_PAGE_FORWARD,
  GTK_SCROLL_STEP_UP,
  GTK_SCROLL_STEP_DOWN,
  GTK_SCROLL_PAGE_UP,
  GTK_SCROLL_PAGE_DOWN,
  GTK_SCROLL_STEP_LEFT,
  GTK_SCROLL_STEP_RIGHT,
  GTK_SCROLL_PAGE_LEFT,
  GTK_SCROLL_PAGE_RIGHT,
  GTK_SCROLL_START,
  GTK_SCROLL_END
} GtkScrollType;
typedef enum
{
  GTK_SELECTION_NONE,
  GTK_SELECTION_SINGLE,
  GTK_SELECTION_BROWSE,
  GTK_SELECTION_MULTIPLE
} GtkSelectionMode;
typedef enum
{
  GTK_SHADOW_NONE,
  GTK_SHADOW_IN,
  GTK_SHADOW_OUT,
  GTK_SHADOW_ETCHED_IN,
  GTK_SHADOW_ETCHED_OUT
} GtkShadowType;
typedef enum
{
  GTK_STATE_NORMAL,
  GTK_STATE_ACTIVE,
  GTK_STATE_PRELIGHT,
  GTK_STATE_SELECTED,
  GTK_STATE_INSENSITIVE,
  GTK_STATE_INCONSISTENT,
  GTK_STATE_FOCUSED
} GtkStateType;
typedef enum
{
  GTK_TOOLBAR_ICONS,
  GTK_TOOLBAR_TEXT,
  GTK_TOOLBAR_BOTH,
  GTK_TOOLBAR_BOTH_HORIZ
} GtkToolbarStyle;
typedef enum
{
  GTK_WRAP_NONE,
  GTK_WRAP_CHAR,
  GTK_WRAP_WORD,
  GTK_WRAP_WORD_CHAR
} GtkWrapMode;
typedef enum
{
  GTK_SORT_ASCENDING,
  GTK_SORT_DESCENDING
} GtkSortType;
typedef enum
{
  GTK_IM_PREEDIT_NOTHING,
  GTK_IM_PREEDIT_CALLBACK,
  GTK_IM_PREEDIT_NONE
} GtkIMPreeditStyle;
typedef enum
{
  GTK_IM_STATUS_NOTHING,
  GTK_IM_STATUS_CALLBACK,
  GTK_IM_STATUS_NONE
} GtkIMStatusStyle;
typedef enum
{
  GTK_PACK_DIRECTION_LTR,
  GTK_PACK_DIRECTION_RTL,
  GTK_PACK_DIRECTION_TTB,
  GTK_PACK_DIRECTION_BTT
} GtkPackDirection;
typedef enum
{
  GTK_PRINT_PAGES_ALL,
  GTK_PRINT_PAGES_CURRENT,
  GTK_PRINT_PAGES_RANGES,
  GTK_PRINT_PAGES_SELECTION
} GtkPrintPages;
typedef enum
{
  GTK_PAGE_SET_ALL,
  GTK_PAGE_SET_EVEN,
  GTK_PAGE_SET_ODD
} GtkPageSet;
typedef enum
{
  GTK_NUMBER_UP_LAYOUT_LEFT_TO_RIGHT_TOP_TO_BOTTOM,
  GTK_NUMBER_UP_LAYOUT_LEFT_TO_RIGHT_BOTTOM_TO_TOP,
  GTK_NUMBER_UP_LAYOUT_RIGHT_TO_LEFT_TOP_TO_BOTTOM,
  GTK_NUMBER_UP_LAYOUT_RIGHT_TO_LEFT_BOTTOM_TO_TOP,
  GTK_NUMBER_UP_LAYOUT_TOP_TO_BOTTOM_LEFT_TO_RIGHT,
  GTK_NUMBER_UP_LAYOUT_TOP_TO_BOTTOM_RIGHT_TO_LEFT,
  GTK_NUMBER_UP_LAYOUT_BOTTOM_TO_TOP_LEFT_TO_RIGHT,
  GTK_NUMBER_UP_LAYOUT_BOTTOM_TO_TOP_RIGHT_TO_LEFT
} GtkNumberUpLayout;
typedef enum
{
  GTK_PAGE_ORIENTATION_PORTRAIT,
  GTK_PAGE_ORIENTATION_LANDSCAPE,
  GTK_PAGE_ORIENTATION_REVERSE_PORTRAIT,
  GTK_PAGE_ORIENTATION_REVERSE_LANDSCAPE
} GtkPageOrientation;
typedef enum
{
  GTK_PRINT_QUALITY_LOW,
  GTK_PRINT_QUALITY_NORMAL,
  GTK_PRINT_QUALITY_HIGH,
  GTK_PRINT_QUALITY_DRAFT
} GtkPrintQuality;
typedef enum
{
  GTK_PRINT_DUPLEX_SIMPLEX,
  GTK_PRINT_DUPLEX_HORIZONTAL,
  GTK_PRINT_DUPLEX_VERTICAL
} GtkPrintDuplex;
typedef enum
{
  GTK_UNIT_NONE,
  GTK_UNIT_POINTS,
  GTK_UNIT_INCH,
  GTK_UNIT_MM
} GtkUnit;
typedef enum
{
  GTK_TREE_VIEW_GRID_LINES_NONE,
  GTK_TREE_VIEW_GRID_LINES_HORIZONTAL,
  GTK_TREE_VIEW_GRID_LINES_VERTICAL,
  GTK_TREE_VIEW_GRID_LINES_BOTH
} GtkTreeViewGridLines;
typedef enum
{
  GTK_DRAG_RESULT_SUCCESS,
  GTK_DRAG_RESULT_NO_TARGET,
  GTK_DRAG_RESULT_USER_CANCELLED,
  GTK_DRAG_RESULT_TIMEOUT_EXPIRED,
  GTK_DRAG_RESULT_GRAB_BROKEN,
  GTK_DRAG_RESULT_ERROR
} GtkDragResult;
typedef enum {
  GTK_SIZE_GROUP_NONE,
  GTK_SIZE_GROUP_HORIZONTAL,
  GTK_SIZE_GROUP_VERTICAL,
  GTK_SIZE_GROUP_BOTH
} GtkSizeGroupMode;
typedef enum
{
  GTK_SIZE_REQUEST_HEIGHT_FOR_WIDTH = 0,
  GTK_SIZE_REQUEST_WIDTH_FOR_HEIGHT,
  GTK_SIZE_REQUEST_CONSTANT_SIZE
} GtkSizeRequestMode;
typedef enum
{
  GTK_SCROLL_MINIMUM = 0,
  GTK_SCROLL_NATURAL
} GtkScrollablePolicy;
typedef enum
{
  GTK_STATE_FLAG_NORMAL = 0,
  GTK_STATE_FLAG_ACTIVE = 1 << 0,
  GTK_STATE_FLAG_PRELIGHT = 1 << 1,
  GTK_STATE_FLAG_SELECTED = 1 << 2,
  GTK_STATE_FLAG_INSENSITIVE = 1 << 3,
  GTK_STATE_FLAG_INCONSISTENT = 1 << 4,
  GTK_STATE_FLAG_FOCUSED = 1 << 5,
  GTK_STATE_FLAG_BACKDROP = 1 << 6,
  GTK_STATE_FLAG_DIR_LTR = 1 << 7,
  GTK_STATE_FLAG_DIR_RTL = 1 << 8,
  GTK_STATE_FLAG_LINK = 1 << 9,
  GTK_STATE_FLAG_VISITED = 1 << 10,
  GTK_STATE_FLAG_CHECKED = 1 << 11
} GtkStateFlags;
typedef enum {
  GTK_REGION_EVEN = 1 << 0,
  GTK_REGION_ODD = 1 << 1,
  GTK_REGION_FIRST = 1 << 2,
  GTK_REGION_LAST = 1 << 3,
  GTK_REGION_ONLY = 1 << 4,
  GTK_REGION_SORTED = 1 << 5
} GtkRegionFlags;
typedef enum {
  GTK_JUNCTION_NONE = 0,
  GTK_JUNCTION_CORNER_TOPLEFT = 1 << 0,
  GTK_JUNCTION_CORNER_TOPRIGHT = 1 << 1,
  GTK_JUNCTION_CORNER_BOTTOMLEFT = 1 << 2,
  GTK_JUNCTION_CORNER_BOTTOMRIGHT = 1 << 3,
  GTK_JUNCTION_TOP = (GTK_JUNCTION_CORNER_TOPLEFT | GTK_JUNCTION_CORNER_TOPRIGHT),
  GTK_JUNCTION_BOTTOM = (GTK_JUNCTION_CORNER_BOTTOMLEFT | GTK_JUNCTION_CORNER_BOTTOMRIGHT),
  GTK_JUNCTION_LEFT = (GTK_JUNCTION_CORNER_TOPLEFT | GTK_JUNCTION_CORNER_BOTTOMLEFT),
  GTK_JUNCTION_RIGHT = (GTK_JUNCTION_CORNER_TOPRIGHT | GTK_JUNCTION_CORNER_BOTTOMRIGHT)
} GtkJunctionSides;
typedef enum {
  GTK_BORDER_STYLE_NONE,
  GTK_BORDER_STYLE_SOLID,
  GTK_BORDER_STYLE_INSET,
  GTK_BORDER_STYLE_OUTSET,
  GTK_BORDER_STYLE_HIDDEN,
  GTK_BORDER_STYLE_DOTTED,
  GTK_BORDER_STYLE_DASHED,
  GTK_BORDER_STYLE_DOUBLE,
  GTK_BORDER_STYLE_GROOVE,
  GTK_BORDER_STYLE_RIDGE
} GtkBorderStyle;
typedef enum {
  GTK_LEVEL_BAR_MODE_CONTINUOUS,
  GTK_LEVEL_BAR_MODE_DISCRETE
} GtkLevelBarMode;
typedef enum
{
  GTK_INPUT_PURPOSE_FREE_FORM,
  GTK_INPUT_PURPOSE_ALPHA,
  GTK_INPUT_PURPOSE_DIGITS,
  GTK_INPUT_PURPOSE_NUMBER,
  GTK_INPUT_PURPOSE_PHONE,
  GTK_INPUT_PURPOSE_URL,
  GTK_INPUT_PURPOSE_EMAIL,
  GTK_INPUT_PURPOSE_NAME,
  GTK_INPUT_PURPOSE_PASSWORD,
  GTK_INPUT_PURPOSE_PIN
} GtkInputPurpose;
typedef enum
{
  GTK_INPUT_HINT_NONE = 0,
  GTK_INPUT_HINT_SPELLCHECK = 1 << 0,
  GTK_INPUT_HINT_NO_SPELLCHECK = 1 << 1,
  GTK_INPUT_HINT_WORD_COMPLETION = 1 << 2,
  GTK_INPUT_HINT_LOWERCASE = 1 << 3,
  GTK_INPUT_HINT_UPPERCASE_CHARS = 1 << 4,
  GTK_INPUT_HINT_UPPERCASE_WORDS = 1 << 5,
  GTK_INPUT_HINT_UPPERCASE_SENTENCES = 1 << 6,
  GTK_INPUT_HINT_INHIBIT_OSK = 1 << 7,
  GTK_INPUT_HINT_VERTICAL_WRITING = 1 << 8
} GtkInputHints;
typedef enum
{
  GTK_PHASE_NONE,
  GTK_PHASE_CAPTURE,
  GTK_PHASE_BUBBLE,
  GTK_PHASE_TARGET
} GtkPropagationPhase;
typedef enum
{
  GTK_EVENT_SEQUENCE_NONE,
  GTK_EVENT_SEQUENCE_CLAIMED,
  GTK_EVENT_SEQUENCE_DENIED
} GtkEventSequenceState;
typedef enum
{
  GTK_PAN_DIRECTION_LEFT,
  GTK_PAN_DIRECTION_RIGHT,
  GTK_PAN_DIRECTION_UP,
  GTK_PAN_DIRECTION_DOWN
} GtkPanDirection;
typedef enum
{
  GTK_ACCEL_VISIBLE = 1 << 0,
  GTK_ACCEL_LOCKED = 1 << 1,
  GTK_ACCEL_MASK = 0x07
} GtkAccelFlags;
typedef struct _GtkAccelGroup GtkAccelGroup;
typedef struct _GtkAccelGroupClass GtkAccelGroupClass;
typedef struct _GtkAccelGroupPrivate GtkAccelGroupPrivate;
typedef struct _GtkAccelKey GtkAccelKey;
typedef struct _GtkAccelGroupEntry GtkAccelGroupEntry;
typedef gboolean (*GtkAccelGroupActivate) (GtkAccelGroup *accel_group,
        GObject *acceleratable,
        guint keyval,
        GdkModifierType modifier);
typedef gboolean (*GtkAccelGroupFindFunc) (GtkAccelKey *key,
        GClosure *closure,
        gpointer data);
struct _GtkAccelGroup
{
  GObject parent;
  GtkAccelGroupPrivate *priv;
};
struct _GtkAccelGroupClass
{
  GObjectClass parent_class;
  void (*accel_changed) (GtkAccelGroup *accel_group,
     guint keyval,
     GdkModifierType modifier,
     GClosure *accel_closure);
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
struct _GtkAccelKey
{
  guint accel_key;
  GdkModifierType accel_mods;
  guint accel_flags : 16;
};
extern
GType gtk_accel_group_get_type (void) __attribute__((__const__));
extern
GtkAccelGroup* gtk_accel_group_new (void);
extern
gboolean gtk_accel_group_get_is_locked (GtkAccelGroup *accel_group);
extern
GdkModifierType
               gtk_accel_group_get_modifier_mask (GtkAccelGroup *accel_group);
extern
void gtk_accel_group_lock (GtkAccelGroup *accel_group);
extern
void gtk_accel_group_unlock (GtkAccelGroup *accel_group);
extern
void gtk_accel_group_connect (GtkAccelGroup *accel_group,
         guint accel_key,
         GdkModifierType accel_mods,
         GtkAccelFlags accel_flags,
         GClosure *closure);
extern
void gtk_accel_group_connect_by_path (GtkAccelGroup *accel_group,
         const gchar *accel_path,
         GClosure *closure);
extern
gboolean gtk_accel_group_disconnect (GtkAccelGroup *accel_group,
         GClosure *closure);
extern
gboolean gtk_accel_group_disconnect_key (GtkAccelGroup *accel_group,
         guint accel_key,
         GdkModifierType accel_mods);
extern
gboolean gtk_accel_group_activate (GtkAccelGroup *accel_group,
                                                   GQuark accel_quark,
                                                   GObject *acceleratable,
                                                   guint accel_key,
                                                   GdkModifierType accel_mods);
void _gtk_accel_group_attach (GtkAccelGroup *accel_group,
       GObject *object);
void _gtk_accel_group_detach (GtkAccelGroup *accel_group,
       GObject *object);
extern
gboolean gtk_accel_groups_activate (GObject *object,
       guint accel_key,
       GdkModifierType accel_mods);
extern
GSList* gtk_accel_groups_from_object (GObject *object);
extern
GtkAccelKey* gtk_accel_group_find (GtkAccelGroup *accel_group,
       GtkAccelGroupFindFunc find_func,
       gpointer data);
extern
GtkAccelGroup* gtk_accel_group_from_accel_closure (GClosure *closure);
extern
gboolean gtk_accelerator_valid (guint keyval,
            GdkModifierType modifiers) __attribute__((__const__));
extern
void gtk_accelerator_parse (const gchar *accelerator,
            guint *accelerator_key,
            GdkModifierType *accelerator_mods);
extern
void gtk_accelerator_parse_with_keycode (const gchar *accelerator,
                                               guint *accelerator_key,
                                               guint **accelerator_codes,
                                               GdkModifierType *accelerator_mods);
extern
gchar* gtk_accelerator_name (guint accelerator_key,
            GdkModifierType accelerator_mods);
extern
gchar* gtk_accelerator_name_with_keycode (GdkDisplay *display,
                                               guint accelerator_key,
                                               guint keycode,
                                               GdkModifierType accelerator_mods);
extern
gchar* gtk_accelerator_get_label (guint accelerator_key,
                                               GdkModifierType accelerator_mods);
extern
gchar* gtk_accelerator_get_label_with_keycode (GdkDisplay *display,
                                                 guint accelerator_key,
                                                 guint keycode,
                                                 GdkModifierType accelerator_mods);
extern
void gtk_accelerator_set_default_mod_mask (GdkModifierType default_mod_mask);
extern
GdkModifierType
  gtk_accelerator_get_default_mod_mask (void);
extern
GtkAccelGroupEntry* gtk_accel_group_query (GtkAccelGroup *accel_group,
       guint accel_key,
       GdkModifierType accel_mods,
       guint *n_entries);
struct _GtkAccelGroupEntry
{
  GtkAccelKey key;
  GClosure *closure;
  GQuark accel_path_quark;
};
typedef struct _GtkBorder GtkBorder;
struct _GtkBorder
{
  gint16 left;
  gint16 right;
  gint16 top;
  gint16 bottom;
};
extern
GType gtk_border_get_type (void) __attribute__((__const__));
extern
GtkBorder *gtk_border_new (void) __attribute__((__malloc__));
extern
GtkBorder *gtk_border_copy (const GtkBorder *border_);
extern
void gtk_border_free (GtkBorder *border_);
typedef struct _GtkAdjustment GtkAdjustment;
typedef struct _GtkBuilder GtkBuilder;
typedef struct _GtkClipboard GtkClipboard;
typedef struct _GtkIconSet GtkIconSet;
typedef struct _GtkIconSource GtkIconSource;
typedef struct _GtkRcStyle GtkRcStyle;
typedef struct _GtkRequisition GtkRequisition;
typedef struct _GtkSelectionData GtkSelectionData;
typedef struct _GtkSettings GtkSettings;
typedef struct _GtkStyle GtkStyle;
typedef struct _GtkStyleContext GtkStyleContext;
typedef struct _GtkTooltip GtkTooltip;
typedef struct _GtkWidget GtkWidget;
typedef struct _GtkWidgetPath GtkWidgetPath;
typedef struct _GtkWindow GtkWindow;
typedef gboolean (*GtkRcPropertyParser) (const GParamSpec *pspec,
                                         const GString *rc_string,
                                         GValue *property_value);
typedef void (*GtkBuilderConnectFunc) (GtkBuilder *builder,
           GObject *object,
           const gchar *signal_name,
           const gchar *handler_name,
           GObject *connect_object,
           GConnectFlags flags,
           gpointer user_data);
extern
guint atk_get_major_version (void) __attribute__((__const__));
extern
guint atk_get_minor_version (void) __attribute__((__const__));
extern
guint atk_get_micro_version (void) __attribute__((__const__));
extern
guint atk_get_binary_age (void) __attribute__((__const__));
extern
guint atk_get_interface_age (void) __attribute__((__const__));
typedef enum
{
  ATK_STATE_INVALID,
  ATK_STATE_ACTIVE,
  ATK_STATE_ARMED,
  ATK_STATE_BUSY,
  ATK_STATE_CHECKED,
  ATK_STATE_DEFUNCT,
  ATK_STATE_EDITABLE,
  ATK_STATE_ENABLED,
  ATK_STATE_EXPANDABLE,
  ATK_STATE_EXPANDED,
  ATK_STATE_FOCUSABLE,
  ATK_STATE_FOCUSED,
  ATK_STATE_HORIZONTAL,
  ATK_STATE_ICONIFIED,
  ATK_STATE_MODAL,
  ATK_STATE_MULTI_LINE,
  ATK_STATE_MULTISELECTABLE,
  ATK_STATE_OPAQUE,
  ATK_STATE_PRESSED,
  ATK_STATE_RESIZABLE,
  ATK_STATE_SELECTABLE,
  ATK_STATE_SELECTED,
  ATK_STATE_SENSITIVE,
  ATK_STATE_SHOWING,
  ATK_STATE_SINGLE_LINE,
  ATK_STATE_STALE,
  ATK_STATE_TRANSIENT,
  ATK_STATE_VERTICAL,
  ATK_STATE_VISIBLE,
  ATK_STATE_MANAGES_DESCENDANTS,
  ATK_STATE_INDETERMINATE,
  ATK_STATE_TRUNCATED,
  ATK_STATE_REQUIRED,
  ATK_STATE_INVALID_ENTRY,
  ATK_STATE_SUPPORTS_AUTOCOMPLETION,
  ATK_STATE_SELECTABLE_TEXT,
  ATK_STATE_DEFAULT,
  ATK_STATE_ANIMATED,
  ATK_STATE_VISITED,
  ATK_STATE_CHECKABLE,
  ATK_STATE_HAS_POPUP,
  ATK_STATE_HAS_TOOLTIP,
  ATK_STATE_READ_ONLY,
  ATK_STATE_LAST_DEFINED
} AtkStateType;
typedef guint64 AtkState;
extern
AtkStateType atk_state_type_register (const gchar *name);
extern
const gchar* atk_state_type_get_name (AtkStateType type);
extern
AtkStateType atk_state_type_for_name (const gchar *name);
typedef enum
{
  ATK_RELATION_NULL = 0,
  ATK_RELATION_CONTROLLED_BY,
  ATK_RELATION_CONTROLLER_FOR,
  ATK_RELATION_LABEL_FOR,
  ATK_RELATION_LABELLED_BY,
  ATK_RELATION_MEMBER_OF,
  ATK_RELATION_NODE_CHILD_OF,
  ATK_RELATION_FLOWS_TO,
  ATK_RELATION_FLOWS_FROM,
  ATK_RELATION_SUBWINDOW_OF,
  ATK_RELATION_EMBEDS,
  ATK_RELATION_EMBEDDED_BY,
  ATK_RELATION_POPUP_FOR,
  ATK_RELATION_PARENT_WINDOW_OF,
  ATK_RELATION_DESCRIBED_BY,
  ATK_RELATION_DESCRIPTION_FOR,
  ATK_RELATION_NODE_PARENT_OF,
  ATK_RELATION_LAST_DEFINED
} AtkRelationType;
typedef enum
{
  ATK_ROLE_INVALID = 0,
  ATK_ROLE_ACCEL_LABEL,
  ATK_ROLE_ALERT,
  ATK_ROLE_ANIMATION,
  ATK_ROLE_ARROW,
  ATK_ROLE_CALENDAR,
  ATK_ROLE_CANVAS,
  ATK_ROLE_CHECK_BOX,
  ATK_ROLE_CHECK_MENU_ITEM,
  ATK_ROLE_COLOR_CHOOSER,
  ATK_ROLE_COLUMN_HEADER,
  ATK_ROLE_COMBO_BOX,
  ATK_ROLE_DATE_EDITOR,
  ATK_ROLE_DESKTOP_ICON,
  ATK_ROLE_DESKTOP_FRAME,
  ATK_ROLE_DIAL,
  ATK_ROLE_DIALOG,
  ATK_ROLE_DIRECTORY_PANE,
  ATK_ROLE_DRAWING_AREA,
  ATK_ROLE_FILE_CHOOSER,
  ATK_ROLE_FILLER,
  ATK_ROLE_FONT_CHOOSER,
  ATK_ROLE_FRAME,
  ATK_ROLE_GLASS_PANE,
  ATK_ROLE_HTML_CONTAINER,
  ATK_ROLE_ICON,
  ATK_ROLE_IMAGE,
  ATK_ROLE_INTERNAL_FRAME,
  ATK_ROLE_LABEL,
  ATK_ROLE_LAYERED_PANE,
  ATK_ROLE_LIST,
  ATK_ROLE_LIST_ITEM,
  ATK_ROLE_MENU,
  ATK_ROLE_MENU_BAR,
  ATK_ROLE_MENU_ITEM,
  ATK_ROLE_OPTION_PANE,
  ATK_ROLE_PAGE_TAB,
  ATK_ROLE_PAGE_TAB_LIST,
  ATK_ROLE_PANEL,
  ATK_ROLE_PASSWORD_TEXT,
  ATK_ROLE_POPUP_MENU,
  ATK_ROLE_PROGRESS_BAR,
  ATK_ROLE_PUSH_BUTTON,
  ATK_ROLE_RADIO_BUTTON,
  ATK_ROLE_RADIO_MENU_ITEM,
  ATK_ROLE_ROOT_PANE,
  ATK_ROLE_ROW_HEADER,
  ATK_ROLE_SCROLL_BAR,
  ATK_ROLE_SCROLL_PANE,
  ATK_ROLE_SEPARATOR,
  ATK_ROLE_SLIDER,
  ATK_ROLE_SPLIT_PANE,
  ATK_ROLE_SPIN_BUTTON,
  ATK_ROLE_STATUSBAR,
  ATK_ROLE_TABLE,
  ATK_ROLE_TABLE_CELL,
  ATK_ROLE_TABLE_COLUMN_HEADER,
  ATK_ROLE_TABLE_ROW_HEADER,
  ATK_ROLE_TEAR_OFF_MENU_ITEM,
  ATK_ROLE_TERMINAL,
  ATK_ROLE_TEXT,
  ATK_ROLE_TOGGLE_BUTTON,
  ATK_ROLE_TOOL_BAR,
  ATK_ROLE_TOOL_TIP,
  ATK_ROLE_TREE,
  ATK_ROLE_TREE_TABLE,
  ATK_ROLE_UNKNOWN,
  ATK_ROLE_VIEWPORT,
  ATK_ROLE_WINDOW,
  ATK_ROLE_HEADER,
  ATK_ROLE_FOOTER,
  ATK_ROLE_PARAGRAPH,
  ATK_ROLE_RULER,
  ATK_ROLE_APPLICATION,
  ATK_ROLE_AUTOCOMPLETE,
  ATK_ROLE_EDITBAR,
  ATK_ROLE_EMBEDDED,
  ATK_ROLE_ENTRY,
  ATK_ROLE_CHART,
  ATK_ROLE_CAPTION,
  ATK_ROLE_DOCUMENT_FRAME,
  ATK_ROLE_HEADING,
  ATK_ROLE_PAGE,
  ATK_ROLE_SECTION,
  ATK_ROLE_REDUNDANT_OBJECT,
  ATK_ROLE_FORM,
  ATK_ROLE_LINK,
  ATK_ROLE_INPUT_METHOD_WINDOW,
  ATK_ROLE_TABLE_ROW,
  ATK_ROLE_TREE_ITEM,
  ATK_ROLE_DOCUMENT_SPREADSHEET,
  ATK_ROLE_DOCUMENT_PRESENTATION,
  ATK_ROLE_DOCUMENT_TEXT,
  ATK_ROLE_DOCUMENT_WEB,
  ATK_ROLE_DOCUMENT_EMAIL,
  ATK_ROLE_COMMENT,
  ATK_ROLE_LIST_BOX,
  ATK_ROLE_GROUPING,
  ATK_ROLE_IMAGE_MAP,
  ATK_ROLE_NOTIFICATION,
  ATK_ROLE_INFO_BAR,
  ATK_ROLE_LEVEL_BAR,
  ATK_ROLE_TITLE_BAR,
  ATK_ROLE_BLOCK_QUOTE,
  ATK_ROLE_AUDIO,
  ATK_ROLE_VIDEO,
  ATK_ROLE_DEFINITION,
  ATK_ROLE_ARTICLE,
  ATK_ROLE_LANDMARK,
  ATK_ROLE_LOG,
  ATK_ROLE_MARQUEE,
  ATK_ROLE_MATH,
  ATK_ROLE_RATING,
  ATK_ROLE_TIMER,
  ATK_ROLE_DESCRIPTION_LIST,
  ATK_ROLE_DESCRIPTION_TERM,
  ATK_ROLE_DESCRIPTION_VALUE,
  ATK_ROLE_STATIC,
  ATK_ROLE_MATH_FRACTION,
  ATK_ROLE_MATH_ROOT,
  ATK_ROLE_SUBSCRIPT,
  ATK_ROLE_SUPERSCRIPT,
  ATK_ROLE_LAST_DEFINED
} AtkRole;
typedef enum
{
  ATK_LAYER_INVALID,
  ATK_LAYER_BACKGROUND,
  ATK_LAYER_CANVAS,
  ATK_LAYER_WIDGET,
  ATK_LAYER_MDI,
  ATK_LAYER_POPUP,
  ATK_LAYER_OVERLAY,
  ATK_LAYER_WINDOW
} AtkLayer;
typedef GSList AtkAttributeSet;
typedef struct _AtkAttribute AtkAttribute;
struct _AtkAttribute {
  gchar* name;
  gchar* value;
};
typedef struct _AtkImplementor AtkImplementor;
typedef struct _AtkImplementorIface AtkImplementorIface;
typedef struct _AtkObject AtkObject;
typedef struct _AtkObjectClass AtkObjectClass;
typedef struct _AtkRelationSet AtkRelationSet;
typedef struct _AtkStateSet AtkStateSet;
struct _AtkPropertyValues
{
  const gchar *property_name;
  GValue old_value;
  GValue new_value;
};
typedef struct _AtkPropertyValues AtkPropertyValues;
typedef gboolean (*AtkFunction) (gpointer user_data);
typedef void (*AtkPropertyChangeHandler) (AtkObject* obj, AtkPropertyValues* vals);
struct _AtkObject
{
  GObject parent;
  gchar *description;
  gchar *name;
  AtkObject *accessible_parent;
  AtkRole role;
  AtkRelationSet *relation_set;
  AtkLayer layer;
};
struct _AtkObjectClass
{
  GObjectClass parent;
  const gchar* (* get_name) (AtkObject *accessible);
  const gchar* (* get_description) (AtkObject *accessible);
  AtkObject* (*get_parent) (AtkObject *accessible);
  gint (* get_n_children) (AtkObject *accessible);
  AtkObject* (* ref_child) (AtkObject *accessible,
                                                    gint i);
  gint (* get_index_in_parent) (AtkObject *accessible);
  AtkRelationSet* (* ref_relation_set) (AtkObject *accessible);
  AtkRole (* get_role) (AtkObject *accessible);
  AtkLayer (* get_layer) (AtkObject *accessible);
  gint (* get_mdi_zorder) (AtkObject *accessible);
  AtkStateSet* (* ref_state_set) (AtkObject *accessible);
  void (* set_name) (AtkObject *accessible,
                                                   const gchar *name);
  void (* set_description) (AtkObject *accessible,
                                                   const gchar *description);
  void (* set_parent) (AtkObject *accessible,
                                                   AtkObject *parent);
  void (* set_role) (AtkObject *accessible,
                                                   AtkRole role);
guint (* connect_property_change_handler) (AtkObject
                 *accessible,
                                                                  AtkPropertyChangeHandler *handler);
void (* remove_property_change_handler) (AtkObject
                *accessible,
                                                                  guint
                handler_id);
void (* initialize) (AtkObject *accessible,
                                                                  gpointer data);
  void (* children_changed) (AtkObject *accessible,
                                                   guint change_index,
                                                   gpointer changed_child);
  void (* focus_event) (AtkObject *accessible,
                                                   gboolean focus_in);
  void (* property_change) (AtkObject *accessible,
                                                   AtkPropertyValues *values);
  void (* state_change) (AtkObject *accessible,
                                                   const gchar *name,
                                                   gboolean state_set);
  void (*visible_data_changed) (AtkObject *accessible);
  void (*active_descendant_changed) (AtkObject *accessible,
                                                        gpointer *child);
  AtkAttributeSet* (*get_attributes) (AtkObject *accessible);
  const gchar* (*get_object_locale) (AtkObject *accessible);
  AtkFunction pad1;
};
extern
GType atk_object_get_type (void);
struct _AtkImplementorIface
{
  GTypeInterface parent;
  AtkObject* (*ref_accessible) (AtkImplementor *implementor);
};
extern
GType atk_implementor_get_type (void);
extern
AtkObject* atk_implementor_ref_accessible (AtkImplementor *implementor);
extern
const gchar* atk_object_get_name (AtkObject *accessible);
extern
const gchar* atk_object_get_description (AtkObject *accessible);
extern
AtkObject* atk_object_get_parent (AtkObject *accessible);
extern
AtkObject* atk_object_peek_parent (AtkObject *accessible);
extern
gint atk_object_get_n_accessible_children (AtkObject *accessible);
extern
AtkObject* atk_object_ref_accessible_child (AtkObject *accessible,
                                                                   gint i);
extern
AtkRelationSet* atk_object_ref_relation_set (AtkObject *accessible);
extern
AtkRole atk_object_get_role (AtkObject *accessible);
__attribute__((__deprecated__("Use '" "atk_component_get_layer" "' instead"))) extern
AtkLayer atk_object_get_layer (AtkObject *accessible);
__attribute__((__deprecated__("Use '" "atk_component_get_mdi_zorder" "' instead"))) extern
gint atk_object_get_mdi_zorder (AtkObject *accessible);
extern
AtkAttributeSet* atk_object_get_attributes (AtkObject *accessible);
extern
AtkStateSet* atk_object_ref_state_set (AtkObject *accessible);
extern
gint atk_object_get_index_in_parent (AtkObject *accessible);
extern
void atk_object_set_name (AtkObject *accessible,
                                                                   const gchar *name);
extern
void atk_object_set_description (AtkObject *accessible,
                                                                   const gchar *description);
extern
void atk_object_set_parent (AtkObject *accessible,
                                                                   AtkObject *parent);
extern
void atk_object_set_role (AtkObject *accessible,
                                                                   AtkRole role);
__attribute__((__deprecated__)) extern
guint atk_object_connect_property_change_handler (AtkObject *accessible,
                                                                  AtkPropertyChangeHandler *handler);
__attribute__((__deprecated__)) extern
void atk_object_remove_property_change_handler (AtkObject *accessible,
                                                                  guint handler_id);
extern
void atk_object_notify_state_change (AtkObject *accessible,
                                                                  AtkState state,
                                                                  gboolean value);
extern
void atk_object_initialize (AtkObject *accessible,
                                                                  gpointer data);
extern
const gchar* atk_role_get_name (AtkRole role);
extern
AtkRole atk_role_for_name (const gchar *name);
extern
gboolean atk_object_add_relationship (AtkObject *object,
        AtkRelationType relationship,
        AtkObject *target);
extern
gboolean atk_object_remove_relationship (AtkObject *object,
        AtkRelationType relationship,
        AtkObject *target);
extern
const gchar* atk_role_get_localized_name (AtkRole role);
__attribute__((__deprecated__)) extern
AtkRole atk_role_register (const gchar *name);
extern
const gchar* atk_object_get_object_locale (AtkObject *accessible);
typedef struct _AtkAction AtkAction;
typedef struct _AtkActionIface AtkActionIface;
struct _AtkActionIface
{
  GTypeInterface parent;
  gboolean (*do_action) (AtkAction *action,
                                                gint i);
  gint (*get_n_actions) (AtkAction *action);
  const gchar* (*get_description) (AtkAction *action,
                                                gint i);
  const gchar* (*get_name) (AtkAction *action,
                                                gint i);
  const gchar* (*get_keybinding) (AtkAction *action,
                                                gint i);
  gboolean (*set_description) (AtkAction *action,
                                                gint i,
                                                const gchar *desc);
  const gchar* (*get_localized_name)(AtkAction *action,
      gint i);
};
extern
GType atk_action_get_type (void);
extern
gboolean atk_action_do_action (AtkAction *action,
                                            gint i);
extern
gint atk_action_get_n_actions (AtkAction *action);
extern
const gchar* atk_action_get_description (AtkAction *action,
                                                   gint i);
extern
const gchar* atk_action_get_name (AtkAction *action,
                                                   gint i);
extern
const gchar* atk_action_get_keybinding (AtkAction *action,
                                                   gint i);
extern
gboolean atk_action_set_description (AtkAction *action,
                                                   gint i,
                                                   const gchar *desc);
extern
const gchar* atk_action_get_localized_name (AtkAction *action,
           gint i);
typedef struct _AtkUtil AtkUtil;
typedef struct _AtkUtilClass AtkUtilClass;
typedef struct _AtkKeyEventStruct AtkKeyEventStruct;
typedef void (*AtkEventListener) (AtkObject* obj);
typedef void (*AtkEventListenerInit) (void);
typedef gint (*AtkKeySnoopFunc) (AtkKeyEventStruct *event,
       gpointer user_data);
struct _AtkKeyEventStruct {
  gint type;
  guint state;
  guint keyval;
  gint length;
  gchar *string;
  guint16 keycode;
  guint32 timestamp;
};
typedef enum
{
  ATK_KEY_EVENT_PRESS,
  ATK_KEY_EVENT_RELEASE,
  ATK_KEY_EVENT_LAST_DEFINED
} AtkKeyEventType;
struct _AtkUtil
{
  GObject parent;
};
struct _AtkUtilClass
{
   GObjectClass parent;
   guint (* add_global_event_listener) (GSignalEmissionHook listener,
        const gchar *event_type);
   void (* remove_global_event_listener) (guint listener_id);
   guint (* add_key_event_listener) (AtkKeySnoopFunc listener,
        gpointer data);
   void (* remove_key_event_listener) (guint listener_id);
   AtkObject* (* get_root) (void);
   const gchar* (* get_toolkit_name) (void);
   const gchar* (* get_toolkit_version) (void);
};
extern
GType atk_util_get_type (void);
typedef enum {
  ATK_XY_SCREEN,
  ATK_XY_WINDOW
}AtkCoordType;
__attribute__((__deprecated__)) extern
guint atk_add_focus_tracker (AtkEventListener focus_tracker);
__attribute__((__deprecated__)) extern
void atk_remove_focus_tracker (guint tracker_id);
__attribute__((__deprecated__)) extern
void atk_focus_tracker_init (AtkEventListenerInit init);
__attribute__((__deprecated__)) extern
void atk_focus_tracker_notify (AtkObject *object);
extern
guint atk_add_global_event_listener (GSignalEmissionHook listener,
           const gchar *event_type);
extern
void atk_remove_global_event_listener (guint listener_id);
extern
guint atk_add_key_event_listener (AtkKeySnoopFunc listener, gpointer data);
extern
void atk_remove_key_event_listener (guint listener_id);
extern
AtkObject* atk_get_root(void);
extern
AtkObject* atk_get_focus_object (void);
extern
const gchar *atk_get_toolkit_name (void);
extern
const gchar *atk_get_toolkit_version (void);
extern
const gchar *atk_get_version (void);
typedef struct _AtkComponent AtkComponent;
typedef struct _AtkComponentIface AtkComponentIface;
typedef void (*AtkFocusHandler) (AtkObject* object, gboolean focus_in);
typedef struct _AtkRectangle AtkRectangle;
struct _AtkRectangle
{
  gint x;
  gint y;
  gint width;
  gint height;
};
extern
GType atk_rectangle_get_type (void);
struct _AtkComponentIface
{
  GTypeInterface parent;
  guint (* add_focus_handler) (AtkComponent *component,
                                         AtkFocusHandler handler);
  gboolean (* contains) (AtkComponent *component,
                                         gint x,
                                         gint y,
                                         AtkCoordType coord_type);
  AtkObject* (* ref_accessible_at_point) (AtkComponent *component,
                                         gint x,
                                         gint y,
                                         AtkCoordType coord_type);
  void (* get_extents) (AtkComponent *component,
                                         gint *x,
                                         gint *y,
                                         gint *width,
                                         gint *height,
                                         AtkCoordType coord_type);
  void (* get_position) (AtkComponent *component,
                                                 gint *x,
                                                 gint *y,
                                                 AtkCoordType coord_type);
  void (* get_size) (AtkComponent *component,
                                                         gint *width,
                                                         gint *height);
  gboolean (* grab_focus) (AtkComponent *component);
  void (* remove_focus_handler) (AtkComponent *component,
                                                          guint handler_id);
  gboolean (* set_extents) (AtkComponent *component,
                                                 gint x,
                                                 gint y,
                                                 gint width,
                                                 gint height,
                                                 AtkCoordType coord_type);
  gboolean (* set_position) (AtkComponent *component,
                                                 gint x,
                                                 gint y,
                                                 AtkCoordType coord_type);
  gboolean (* set_size) (AtkComponent *component,
                                                 gint width,
                                                 gint height);
  AtkLayer (* get_layer) (AtkComponent *component);
  gint (* get_mdi_zorder) (AtkComponent *component);
  void (* bounds_changed) (AtkComponent *component,
                                                 AtkRectangle *bounds);
  gdouble (* get_alpha) (AtkComponent *component);
};
extern
GType atk_component_get_type (void);
__attribute__((__deprecated__)) extern
guint atk_component_add_focus_handler (AtkComponent *component,
                                                           AtkFocusHandler handler);
extern
gboolean atk_component_contains (AtkComponent *component,
                                                            gint x,
                                                            gint y,
                                                            AtkCoordType coord_type);
extern
AtkObject* atk_component_ref_accessible_at_point(AtkComponent *component,
                                                            gint x,
                                                            gint y,
                                                            AtkCoordType coord_type);
extern
void atk_component_get_extents (AtkComponent *component,
                                                            gint *x,
                                                            gint *y,
                                                            gint *width,
                                                            gint *height,
                                                            AtkCoordType coord_type);
__attribute__((__deprecated__("Use '" "atk_component_get_extents" "' instead"))) extern
void atk_component_get_position (AtkComponent *component,
                                                            gint *x,
                                                            gint *y,
                                                            AtkCoordType coord_type);
__attribute__((__deprecated__("Use '" "atk_component_get_extents" "' instead"))) extern
void atk_component_get_size (AtkComponent *component,
                                                            gint *width,
                                                            gint *height);
extern
AtkLayer atk_component_get_layer (AtkComponent *component);
extern
gint atk_component_get_mdi_zorder (AtkComponent *component);
extern
gboolean atk_component_grab_focus (AtkComponent *component);
__attribute__((__deprecated__)) extern
void atk_component_remove_focus_handler (AtkComponent *component,
                                                            guint handler_id);
extern
gboolean atk_component_set_extents (AtkComponent *component,
                                                            gint x,
                                                            gint y,
                                                            gint width,
                                                            gint height,
                                                            AtkCoordType coord_type);
extern
gboolean atk_component_set_position (AtkComponent *component,
                                                            gint x,
                                                            gint y,
                                                            AtkCoordType coord_type);
extern
gboolean atk_component_set_size (AtkComponent *component,
                                                            gint width,
                                                            gint height);
extern
gdouble atk_component_get_alpha (AtkComponent *component);
typedef struct _AtkDocument AtkDocument;
typedef struct _AtkDocumentIface AtkDocumentIface;
struct _AtkDocumentIface
{
  GTypeInterface parent;
  const gchar* ( *get_document_type) (AtkDocument *document);
  gpointer ( *get_document) (AtkDocument *document);
  const gchar* ( *get_document_locale) (AtkDocument *document);
  AtkAttributeSet * ( *get_document_attributes) (AtkDocument *document);
  const gchar* ( *get_document_attribute_value) (AtkDocument *document,
                                                          const gchar *attribute_name);
  gboolean ( *set_document_attribute) (AtkDocument *document,
                                                    const gchar *attribute_name,
                                                    const gchar *attribute_value);
  gint ( *get_current_page_number) (AtkDocument *document);
  gint ( *get_page_count) (AtkDocument *document);
};
extern
GType atk_document_get_type (void);
__attribute__((__deprecated__)) extern
const gchar* atk_document_get_document_type (AtkDocument *document);
__attribute__((__deprecated__)) extern
gpointer atk_document_get_document (AtkDocument *document);
__attribute__((__deprecated__("Use '" "atk_object_get_object_locale" "' instead"))) extern
const gchar* atk_document_get_locale (AtkDocument *document);
extern
AtkAttributeSet* atk_document_get_attributes (AtkDocument *document);
extern
const gchar* atk_document_get_attribute_value (AtkDocument *document,
                                                        const gchar *attribute_name);
extern
gboolean atk_document_set_attribute_value (AtkDocument *document,
                                                        const gchar *attribute_name,
                                                        const gchar *attribute_value);
extern
gint atk_document_get_current_page_number (AtkDocument *document);
extern
gint atk_document_get_page_count (AtkDocument *document);
typedef enum
{
  ATK_TEXT_ATTR_INVALID = 0,
  ATK_TEXT_ATTR_LEFT_MARGIN,
  ATK_TEXT_ATTR_RIGHT_MARGIN,
  ATK_TEXT_ATTR_INDENT,
  ATK_TEXT_ATTR_INVISIBLE,
  ATK_TEXT_ATTR_EDITABLE,
  ATK_TEXT_ATTR_PIXELS_ABOVE_LINES,
  ATK_TEXT_ATTR_PIXELS_BELOW_LINES,
  ATK_TEXT_ATTR_PIXELS_INSIDE_WRAP,
  ATK_TEXT_ATTR_BG_FULL_HEIGHT,
  ATK_TEXT_ATTR_RISE,
  ATK_TEXT_ATTR_UNDERLINE,
  ATK_TEXT_ATTR_STRIKETHROUGH,
  ATK_TEXT_ATTR_SIZE,
  ATK_TEXT_ATTR_SCALE,
  ATK_TEXT_ATTR_WEIGHT,
  ATK_TEXT_ATTR_LANGUAGE,
  ATK_TEXT_ATTR_FAMILY_NAME,
  ATK_TEXT_ATTR_BG_COLOR,
  ATK_TEXT_ATTR_FG_COLOR,
  ATK_TEXT_ATTR_BG_STIPPLE,
  ATK_TEXT_ATTR_FG_STIPPLE,
  ATK_TEXT_ATTR_WRAP_MODE,
  ATK_TEXT_ATTR_DIRECTION,
  ATK_TEXT_ATTR_JUSTIFICATION,
  ATK_TEXT_ATTR_STRETCH,
  ATK_TEXT_ATTR_VARIANT,
  ATK_TEXT_ATTR_STYLE,
  ATK_TEXT_ATTR_LAST_DEFINED
} AtkTextAttribute;
extern
AtkTextAttribute atk_text_attribute_register (const gchar *name);
typedef struct _AtkText AtkText;
typedef struct _AtkTextIface AtkTextIface;
typedef enum {
  ATK_TEXT_BOUNDARY_CHAR,
  ATK_TEXT_BOUNDARY_WORD_START,
  ATK_TEXT_BOUNDARY_WORD_END,
  ATK_TEXT_BOUNDARY_SENTENCE_START,
  ATK_TEXT_BOUNDARY_SENTENCE_END,
  ATK_TEXT_BOUNDARY_LINE_START,
  ATK_TEXT_BOUNDARY_LINE_END
} AtkTextBoundary;
typedef enum {
  ATK_TEXT_GRANULARITY_CHAR,
  ATK_TEXT_GRANULARITY_WORD,
  ATK_TEXT_GRANULARITY_SENTENCE,
  ATK_TEXT_GRANULARITY_LINE,
  ATK_TEXT_GRANULARITY_PARAGRAPH
} AtkTextGranularity;
typedef struct _AtkTextRectangle AtkTextRectangle;
struct _AtkTextRectangle {
  gint x;
  gint y;
  gint width;
  gint height;
};
typedef struct _AtkTextRange AtkTextRange;
struct _AtkTextRange {
  AtkTextRectangle bounds;
  gint start_offset;
  gint end_offset;
  gchar* content;
};
extern
GType atk_text_range_get_type (void);
typedef enum {
    ATK_TEXT_CLIP_NONE,
    ATK_TEXT_CLIP_MIN,
    ATK_TEXT_CLIP_MAX,
    ATK_TEXT_CLIP_BOTH
} AtkTextClipType;
struct _AtkTextIface
{
  GTypeInterface parent;
  gchar* (* get_text) (AtkText *text,
                                                   gint start_offset,
                                                   gint end_offset);
  gchar* (* get_text_after_offset) (AtkText *text,
                                                   gint offset,
                                                   AtkTextBoundary boundary_type,
         gint *start_offset,
         gint *end_offset);
  gchar* (* get_text_at_offset) (AtkText *text,
                                                   gint offset,
                                                   AtkTextBoundary boundary_type,
         gint *start_offset,
         gint *end_offset);
  gunichar (* get_character_at_offset) (AtkText *text,
                                                   gint offset);
  gchar* (* get_text_before_offset) (AtkText *text,
                                                   gint offset,
                                                   AtkTextBoundary boundary_type,
          gint *start_offset,
         gint *end_offset);
  gint (* get_caret_offset) (AtkText *text);
  AtkAttributeSet* (* get_run_attributes) (AtkText *text,
         gint offset,
         gint *start_offset,
         gint *end_offset);
  AtkAttributeSet* (* get_default_attributes) (AtkText *text);
  void (* get_character_extents) (AtkText *text,
                                                   gint offset,
                                                   gint *x,
                                                   gint *y,
                                                   gint *width,
                                                   gint *height,
                                                   AtkCoordType coords);
  gint (* get_character_count) (AtkText *text);
  gint (* get_offset_at_point) (AtkText *text,
                                                   gint x,
                                                   gint y,
                                                   AtkCoordType coords);
  gint (* get_n_selections) (AtkText *text);
  gchar* (* get_selection) (AtkText *text,
         gint selection_num,
         gint *start_offset,
         gint *end_offset);
  gboolean (* add_selection) (AtkText *text,
         gint start_offset,
         gint end_offset);
  gboolean (* remove_selection) (AtkText *text,
         gint selection_num);
  gboolean (* set_selection) (AtkText *text,
         gint selection_num,
         gint start_offset,
         gint end_offset);
  gboolean (* set_caret_offset) (AtkText *text,
                                                   gint offset);
  void (* text_changed) (AtkText *text,
                                                   gint position,
                                                   gint length);
  void (* text_caret_moved) (AtkText *text,
                                                   gint location);
  void (* text_selection_changed) (AtkText *text);
  void (* text_attributes_changed) (AtkText *text);
  void (* get_range_extents) (AtkText *text,
                                                   gint start_offset,
                                                   gint end_offset,
                                                   AtkCoordType coord_type,
                                                   AtkTextRectangle *rect);
  AtkTextRange** (* get_bounded_ranges) (AtkText *text,
                                                   AtkTextRectangle *rect,
                                                   AtkCoordType coord_type,
                                                   AtkTextClipType x_clip_type,
                                                   AtkTextClipType y_clip_type);
  gchar* (* get_string_at_offset) (AtkText *text,
                                                   gint offset,
                                                   AtkTextGranularity granularity,
                                                   gint *start_offset,
                                                   gint *end_offset);
};
extern
GType atk_text_get_type (void);
extern
gchar* atk_text_get_text (AtkText *text,
                                                           gint start_offset,
                                                           gint end_offset);
extern
gunichar atk_text_get_character_at_offset (AtkText *text,
                                                           gint offset);
__attribute__((__deprecated__("Use '" "atk_text_get_string_at_offset" "' instead"))) extern
gchar* atk_text_get_text_after_offset (AtkText *text,
                                                           gint offset,
                                                           AtkTextBoundary boundary_type,
          gint *start_offset,
          gint *end_offset);
__attribute__((__deprecated__("Use '" "atk_text_get_string_at_offset" "' instead"))) extern
gchar* atk_text_get_text_at_offset (AtkText *text,
                                                           gint offset,
                                                           AtkTextBoundary boundary_type,
          gint *start_offset,
          gint *end_offset);
__attribute__((__deprecated__("Use '" "atk_text_get_string_at_offset" "' instead"))) extern
gchar* atk_text_get_text_before_offset (AtkText *text,
                                                           gint offset,
                                                           AtkTextBoundary boundary_type,
          gint *start_offset,
          gint *end_offset);
extern
gchar* atk_text_get_string_at_offset (AtkText *text,
                                                           gint offset,
                                                           AtkTextGranularity granularity,
                                                           gint *start_offset,
                                                           gint *end_offset);
extern
gint atk_text_get_caret_offset (AtkText *text);
extern
void atk_text_get_character_extents (AtkText *text,
                                                           gint offset,
                                                           gint *x,
                                                           gint *y,
                                                           gint *width,
                                                           gint *height,
                                                           AtkCoordType coords);
extern
AtkAttributeSet* atk_text_get_run_attributes (AtkText *text,
                 gint offset,
                 gint *start_offset,
                 gint *end_offset);
extern
AtkAttributeSet* atk_text_get_default_attributes (AtkText *text);
extern
gint atk_text_get_character_count (AtkText *text);
extern
gint atk_text_get_offset_at_point (AtkText *text,
                                                           gint x,
                                                           gint y,
                                                           AtkCoordType coords);
extern
gint atk_text_get_n_selections (AtkText *text);
extern
gchar* atk_text_get_selection (AtkText *text,
          gint selection_num,
          gint *start_offset,
          gint *end_offset);
extern
gboolean atk_text_add_selection (AtkText *text,
          gint start_offset,
          gint end_offset);
extern
gboolean atk_text_remove_selection (AtkText *text,
          gint selection_num);
extern
gboolean atk_text_set_selection (AtkText *text,
          gint selection_num,
          gint start_offset,
          gint end_offset);
extern
gboolean atk_text_set_caret_offset (AtkText *text,
                                                           gint offset);
extern
void atk_text_get_range_extents (AtkText *text,
                                                           gint start_offset,
                                                           gint end_offset,
                                                           AtkCoordType coord_type,
                                                           AtkTextRectangle *rect);
extern
AtkTextRange** atk_text_get_bounded_ranges (AtkText *text,
                                                           AtkTextRectangle *rect,
                                                           AtkCoordType coord_type,
                                                           AtkTextClipType x_clip_type,
                                                           AtkTextClipType y_clip_type);
extern
void atk_text_free_ranges (AtkTextRange **ranges);
extern
void atk_attribute_set_free (AtkAttributeSet *attrib_set);
extern
const gchar* atk_text_attribute_get_name (AtkTextAttribute attr);
extern
AtkTextAttribute atk_text_attribute_for_name (const gchar *name);
extern
const gchar* atk_text_attribute_get_value (AtkTextAttribute attr,
                                                           gint index_);
typedef struct _AtkEditableText AtkEditableText;
typedef struct _AtkEditableTextIface AtkEditableTextIface;
struct _AtkEditableTextIface
{
  GTypeInterface parent_interface;
  gboolean (* set_run_attributes) (AtkEditableText *text,
                                   AtkAttributeSet *attrib_set,
                                   gint start_offset,
        gint end_offset);
  void (* set_text_contents) (AtkEditableText *text,
                                   const gchar *string);
  void (* insert_text) (AtkEditableText *text,
                                   const gchar *string,
                                   gint length,
                                   gint *position);
  void (* copy_text) (AtkEditableText *text,
                                   gint start_pos,
                                   gint end_pos);
  void (* cut_text) (AtkEditableText *text,
                                   gint start_pos,
                                   gint end_pos);
  void (* delete_text) (AtkEditableText *text,
                                   gint start_pos,
                                   gint end_pos);
  void (* paste_text) (AtkEditableText *text,
                                   gint position);
};
extern
GType atk_editable_text_get_type (void);
extern
gboolean atk_editable_text_set_run_attributes (AtkEditableText *text,
                                               AtkAttributeSet *attrib_set,
                                               gint start_offset,
             gint end_offset);
extern
void atk_editable_text_set_text_contents (AtkEditableText *text,
                                             const gchar *string);
extern
void atk_editable_text_insert_text (AtkEditableText *text,
                                             const gchar *string,
                                             gint length,
                                             gint *position);
extern
void atk_editable_text_copy_text (AtkEditableText *text,
                                             gint start_pos,
                                             gint end_pos);
extern
void atk_editable_text_cut_text (AtkEditableText *text,
                                             gint start_pos,
                                             gint end_pos);
extern
void atk_editable_text_delete_text (AtkEditableText *text,
                                             gint start_pos,
                                             gint end_pos);
extern
void atk_editable_text_paste_text (AtkEditableText *text,
                                             gint position);
extern
GType atk_hyperlink_state_flags_get_type (void);
extern
GType atk_role_get_type (void);
extern
GType atk_layer_get_type (void);
extern
GType atk_relation_type_get_type (void);
extern
GType atk_state_type_get_type (void);
extern
GType atk_text_attribute_get_type (void);
extern
GType atk_text_boundary_get_type (void);
extern
GType atk_text_granularity_get_type (void);
extern
GType atk_text_clip_type_get_type (void);
extern
GType atk_key_event_type_get_type (void);
extern
GType atk_coord_type_get_type (void);
extern
GType atk_value_type_get_type (void);
typedef struct _AtkGObjectAccessible AtkGObjectAccessible;
typedef struct _AtkGObjectAccessibleClass AtkGObjectAccessibleClass;
struct _AtkGObjectAccessible
{
  AtkObject parent;
};
extern
GType atk_gobject_accessible_get_type (void);
struct _AtkGObjectAccessibleClass
{
  AtkObjectClass parent_class;
  AtkFunction pad1;
  AtkFunction pad2;
};
extern
AtkObject *atk_gobject_accessible_for_object (GObject *obj);
extern
GObject *atk_gobject_accessible_get_object (AtkGObjectAccessible *obj);
typedef enum
{
  ATK_HYPERLINK_IS_INLINE = 1 << 0
} AtkHyperlinkStateFlags;
typedef struct _AtkHyperlink AtkHyperlink;
typedef struct _AtkHyperlinkClass AtkHyperlinkClass;
struct _AtkHyperlink
{
  GObject parent;
};
struct _AtkHyperlinkClass
{
  GObjectClass parent;
  gchar* (* get_uri) (AtkHyperlink *link_,
                                            gint i);
  AtkObject* (* get_object) (AtkHyperlink *link_,
                                            gint i);
  gint (* get_end_index) (AtkHyperlink *link_);
  gint (* get_start_index) (AtkHyperlink *link_);
  gboolean (* is_valid) (AtkHyperlink *link_);
  gint (* get_n_anchors) (AtkHyperlink *link_);
  guint (* link_state) (AtkHyperlink *link_);
  gboolean (* is_selected_link) (AtkHyperlink *link_);
  void ( *link_activated) (AtkHyperlink *link_);
  AtkFunction pad1;
};
extern
GType atk_hyperlink_get_type (void);
extern
gchar* atk_hyperlink_get_uri (AtkHyperlink *link_,
                                                     gint i);
extern
AtkObject* atk_hyperlink_get_object (AtkHyperlink *link_,
                                                     gint i);
extern
gint atk_hyperlink_get_end_index (AtkHyperlink *link_);
extern
gint atk_hyperlink_get_start_index (AtkHyperlink *link_);
extern
gboolean atk_hyperlink_is_valid (AtkHyperlink *link_);
extern
gboolean atk_hyperlink_is_inline (AtkHyperlink *link_);
extern
gint atk_hyperlink_get_n_anchors (AtkHyperlink *link_);
__attribute__((__deprecated__)) extern
gboolean atk_hyperlink_is_selected_link (AtkHyperlink *link_);
typedef struct _AtkHyperlinkImpl AtkHyperlinkImpl;
typedef struct _AtkHyperlinkImplIface AtkHyperlinkImplIface;
struct _AtkHyperlinkImplIface
{
  GTypeInterface parent;
  AtkHyperlink* (* get_hyperlink) (AtkHyperlinkImpl *impl);
};
extern
GType atk_hyperlink_impl_get_type (void);
extern
AtkHyperlink *atk_hyperlink_impl_get_hyperlink (AtkHyperlinkImpl *impl);
typedef struct _AtkHypertext AtkHypertext;
typedef struct _AtkHypertextIface AtkHypertextIface;
struct _AtkHypertextIface
{
  GTypeInterface parent;
  AtkHyperlink*(* get_link) (AtkHypertext *hypertext,
                                             gint link_index);
  gint (* get_n_links) (AtkHypertext *hypertext);
  gint (* get_link_index) (AtkHypertext *hypertext,
                                             gint char_index);
  void (* link_selected) (AtkHypertext *hypertext,
                                             gint link_index);
};
extern
GType atk_hypertext_get_type (void);
extern
AtkHyperlink* atk_hypertext_get_link (AtkHypertext *hypertext,
                                            gint link_index);
extern
gint atk_hypertext_get_n_links (AtkHypertext *hypertext);
extern
gint atk_hypertext_get_link_index (AtkHypertext *hypertext,
                                            gint char_index);
typedef struct _AtkImage AtkImage;
typedef struct _AtkImageIface AtkImageIface;
struct _AtkImageIface
{
  GTypeInterface parent;
  void ( *get_image_position) (AtkImage *image,
                                                   gint *x,
                       gint *y,
                                  AtkCoordType coord_type);
  const gchar* ( *get_image_description) (AtkImage *image);
  void ( *get_image_size) (AtkImage *image,
                                                   gint *width,
                                                   gint *height);
  gboolean ( *set_image_description) (AtkImage *image,
                                                   const gchar *description);
  const gchar* ( *get_image_locale) (AtkImage *image);
};
extern
GType atk_image_get_type (void);
extern
const gchar* atk_image_get_image_description (AtkImage *image);
extern
void atk_image_get_image_size (AtkImage *image,
                                          gint *width,
                                          gint *height);
extern
gboolean atk_image_set_image_description (AtkImage *image,
                                          const gchar *description);
extern
void atk_image_get_image_position (AtkImage *image,
                                          gint *x,
       gint *y,
           AtkCoordType coord_type);
extern
const gchar* atk_image_get_image_locale (AtkImage *image);
typedef struct _AtkNoOpObject AtkNoOpObject;
typedef struct _AtkNoOpObjectClass AtkNoOpObjectClass;
struct _AtkNoOpObject
{
  AtkObject parent;
};
extern
GType atk_no_op_object_get_type (void);
struct _AtkNoOpObjectClass
{
  AtkObjectClass parent_class;
};
extern
AtkObject *atk_no_op_object_new (GObject *obj);
typedef struct _AtkObjectFactory AtkObjectFactory;
typedef struct _AtkObjectFactoryClass AtkObjectFactoryClass;
struct _AtkObjectFactory
{
  GObject parent;
};
struct _AtkObjectFactoryClass
{
  GObjectClass parent_class;
  AtkObject* (* create_accessible) (GObject *obj);
  void (* invalidate) (AtkObjectFactory *factory);
  GType (* get_accessible_type) (void);
  AtkFunction pad1;
  AtkFunction pad2;
};
extern
GType atk_object_factory_get_type(void);
extern
AtkObject* atk_object_factory_create_accessible (AtkObjectFactory *factory, GObject *obj);
extern
void atk_object_factory_invalidate (AtkObjectFactory *factory);
extern
GType atk_object_factory_get_accessible_type (AtkObjectFactory *factory);
typedef struct _AtkNoOpObjectFactory AtkNoOpObjectFactory;
typedef struct _AtkNoOpObjectFactoryClass AtkNoOpObjectFactoryClass;
struct _AtkNoOpObjectFactory
{
  AtkObjectFactory parent;
};
struct _AtkNoOpObjectFactoryClass
{
  AtkObjectFactoryClass parent_class;
};
extern
GType atk_no_op_object_factory_get_type(void);
extern
AtkObjectFactory *atk_no_op_object_factory_new(void);
typedef struct _AtkPlug AtkPlug;
typedef struct _AtkPlugClass AtkPlugClass;
struct _AtkPlug
{
  AtkObject parent;
};
extern
GType atk_plug_get_type (void);
struct _AtkPlugClass
{
  AtkObjectClass parent_class;
  gchar* (* get_object_id) (AtkPlug* obj);
};
extern
AtkObject* atk_plug_new (void);
extern
gchar* atk_plug_get_id (AtkPlug* plug);
typedef struct _AtkRange AtkRange;
extern
GType atk_range_get_type (void);
extern
AtkRange* atk_range_copy (AtkRange *src);
extern
void atk_range_free (AtkRange *range);
extern
gdouble atk_range_get_lower_limit (AtkRange *range);
extern
gdouble atk_range_get_upper_limit (AtkRange *range);
extern
const gchar* atk_range_get_description (AtkRange *range);
extern
AtkRange* atk_range_new (gdouble lower_limit,
                                         gdouble upper_limit,
                                         const gchar *description);
struct _AtkRegistry
{
  GObject parent;
  GHashTable *factory_type_registry;
  GHashTable *factory_singleton_cache;
};
struct _AtkRegistryClass
{
  GObjectClass parent_class;
};
typedef struct _AtkRegistry AtkRegistry;
typedef struct _AtkRegistryClass AtkRegistryClass;
extern
GType atk_registry_get_type (void);
extern
void atk_registry_set_factory_type (AtkRegistry *registry,
                                                 GType type,
                                                 GType factory_type);
extern
GType atk_registry_get_factory_type (AtkRegistry *registry,
       GType type);
extern
AtkObjectFactory* atk_registry_get_factory (AtkRegistry *registry,
                                                 GType type);
extern
AtkRegistry* atk_get_default_registry (void);
typedef struct _AtkRelation AtkRelation;
typedef struct _AtkRelationClass AtkRelationClass;
struct _AtkRelation
{
  GObject parent;
  GPtrArray *target;
  AtkRelationType relationship;
};
struct _AtkRelationClass
{
  GObjectClass parent;
};
extern
GType atk_relation_get_type (void);
extern
AtkRelationType atk_relation_type_register (const gchar *name);
extern
const gchar* atk_relation_type_get_name (AtkRelationType type);
extern
AtkRelationType atk_relation_type_for_name (const gchar *name);
extern
AtkRelation* atk_relation_new (AtkObject **targets,
                                                       gint n_targets,
                                                       AtkRelationType relationship);
extern
AtkRelationType atk_relation_get_relation_type (AtkRelation *relation);
extern
GPtrArray* atk_relation_get_target (AtkRelation *relation);
extern
void atk_relation_add_target (AtkRelation *relation,
                                                       AtkObject *target);
extern
gboolean atk_relation_remove_target (AtkRelation *relation,
                                                       AtkObject *target);
typedef struct _AtkRelationSetClass AtkRelationSetClass;
struct _AtkRelationSet
{
  GObject parent;
  GPtrArray *relations;
};
struct _AtkRelationSetClass
{
  GObjectClass parent;
  AtkFunction pad1;
  AtkFunction pad2;
};
extern
GType atk_relation_set_get_type (void);
extern
AtkRelationSet* atk_relation_set_new (void);
extern
gboolean atk_relation_set_contains (AtkRelationSet *set,
                                                       AtkRelationType relationship);
extern
gboolean atk_relation_set_contains_target (AtkRelationSet *set,
                                                       AtkRelationType relationship,
                                                       AtkObject *target);
extern
void atk_relation_set_remove (AtkRelationSet *set,
                                                       AtkRelation *relation);
extern
void atk_relation_set_add (AtkRelationSet *set,
                                                       AtkRelation *relation);
extern
gint atk_relation_set_get_n_relations (AtkRelationSet *set);
extern
AtkRelation* atk_relation_set_get_relation (AtkRelationSet *set,
                                                       gint i);
extern
AtkRelation* atk_relation_set_get_relation_by_type (AtkRelationSet *set,
                                                       AtkRelationType relationship);
extern
void atk_relation_set_add_relation_by_type (AtkRelationSet *set,
                                                       AtkRelationType relationship,
                                                       AtkObject *target);
typedef struct _AtkSelection AtkSelection;
typedef struct _AtkSelectionIface AtkSelectionIface;
struct _AtkSelectionIface
{
  GTypeInterface parent;
  gboolean (* add_selection) (AtkSelection *selection,
                                         gint i);
  gboolean (* clear_selection) (AtkSelection *selection);
  AtkObject* (* ref_selection) (AtkSelection *selection,
                                         gint i);
  gint (* get_selection_count) (AtkSelection *selection);
  gboolean (* is_child_selected) (AtkSelection *selection,
                                         gint i);
  gboolean (* remove_selection) (AtkSelection *selection,
                                         gint i);
  gboolean (* select_all_selection) (AtkSelection *selection);
  void (*selection_changed) (AtkSelection *selection);
};
extern
GType atk_selection_get_type (void);
extern
gboolean atk_selection_add_selection (AtkSelection *selection,
                                                 gint i);
extern
gboolean atk_selection_clear_selection (AtkSelection *selection);
extern
AtkObject* atk_selection_ref_selection (AtkSelection *selection,
                                                 gint i);
extern
gint atk_selection_get_selection_count (AtkSelection *selection);
extern
gboolean atk_selection_is_child_selected (AtkSelection *selection,
                                                 gint i);
extern
gboolean atk_selection_remove_selection (AtkSelection *selection,
                                                 gint i);
extern
gboolean atk_selection_select_all_selection (AtkSelection *selection);
typedef struct _AtkSocket AtkSocket;
typedef struct _AtkSocketClass AtkSocketClass;
struct _AtkSocket
{
  AtkObject parent;
  gchar* embedded_plug_id;
};
extern
GType atk_socket_get_type (void);
struct _AtkSocketClass
{
  AtkObjectClass parent_class;
  void (* embed) (AtkSocket *obj, gchar* plug_id);
};
extern
AtkObject* atk_socket_new (void);
extern
void atk_socket_embed (AtkSocket* obj, gchar* plug_id);
extern
gboolean atk_socket_is_occupied (AtkSocket* obj);
typedef struct _AtkStateSetClass AtkStateSetClass;
struct _AtkStateSet
{
  GObject parent;
};
struct _AtkStateSetClass
{
  GObjectClass parent;
};
extern
GType atk_state_set_get_type (void);
extern
AtkStateSet* atk_state_set_new (void);
extern
gboolean atk_state_set_is_empty (AtkStateSet *set);
extern
gboolean atk_state_set_add_state (AtkStateSet *set,
                                                 AtkStateType type);
extern
void atk_state_set_add_states (AtkStateSet *set,
                                                 AtkStateType *types,
                                                 gint n_types);
extern
void atk_state_set_clear_states (AtkStateSet *set);
extern
gboolean atk_state_set_contains_state (AtkStateSet *set,
                                                 AtkStateType type);
extern
gboolean atk_state_set_contains_states (AtkStateSet *set,
                                                 AtkStateType *types,
                                                 gint n_types);
extern
gboolean atk_state_set_remove_state (AtkStateSet *set,
                                                 AtkStateType type);
extern
AtkStateSet* atk_state_set_and_sets (AtkStateSet *set,
                                                 AtkStateSet *compare_set);
extern
AtkStateSet* atk_state_set_or_sets (AtkStateSet *set,
                                                 AtkStateSet *compare_set);
extern
AtkStateSet* atk_state_set_xor_sets (AtkStateSet *set,
                                                 AtkStateSet *compare_set);
typedef struct _AtkStreamableContent AtkStreamableContent;
typedef struct _AtkStreamableContentIface AtkStreamableContentIface;
struct _AtkStreamableContentIface
{
  GTypeInterface parent;
  gint (* get_n_mime_types) (AtkStreamableContent *streamable);
  const gchar* (* get_mime_type) (AtkStreamableContent *streamable,
                                                   gint i);
  GIOChannel* (* get_stream) (AtkStreamableContent *streamable,
                                                   const gchar *mime_type);
    const gchar* (* get_uri) (AtkStreamableContent *streamable,
                                                   const gchar *mime_type);
  AtkFunction pad1;
  AtkFunction pad2;
  AtkFunction pad3;
};
extern
GType atk_streamable_content_get_type (void);
extern
gint atk_streamable_content_get_n_mime_types (AtkStreamableContent *streamable);
extern
const gchar* atk_streamable_content_get_mime_type (AtkStreamableContent *streamable,
                                                                gint i);
extern
GIOChannel* atk_streamable_content_get_stream (AtkStreamableContent *streamable,
                                                                 const gchar *mime_type);
extern
const gchar* atk_streamable_content_get_uri (AtkStreamableContent *streamable,
                                                                const gchar *mime_type);
typedef struct _AtkTable AtkTable;
typedef struct _AtkTableIface AtkTableIface;
struct _AtkTableIface
{
  GTypeInterface parent;
  AtkObject* (* ref_at) (AtkTable *table,
                                                  gint row,
                                                  gint column);
  gint (* get_index_at) (AtkTable *table,
                                                  gint row,
                                                  gint column);
  gint (* get_column_at_index) (AtkTable *table,
                                                  gint index_);
  gint (* get_row_at_index) (AtkTable *table,
                                                  gint index_);
  gint (* get_n_columns) (AtkTable *table);
  gint (* get_n_rows) (AtkTable *table);
  gint (* get_column_extent_at) (AtkTable *table,
                                                  gint row,
                                                  gint column);
  gint (* get_row_extent_at) (AtkTable *table,
                                                  gint row,
                                                  gint column);
  AtkObject*
                    (* get_caption) (AtkTable *table);
  const gchar* (* get_column_description) (AtkTable *table,
                                                  gint column);
  AtkObject* (* get_column_header) (AtkTable *table,
        gint column);
  const gchar* (* get_row_description) (AtkTable *table,
                                                  gint row);
  AtkObject* (* get_row_header) (AtkTable *table,
        gint row);
  AtkObject* (* get_summary) (AtkTable *table);
  void (* set_caption) (AtkTable *table,
                                                  AtkObject *caption);
  void (* set_column_description) (AtkTable *table,
                                                  gint column,
                                                  const gchar *description);
  void (* set_column_header) (AtkTable *table,
                                                  gint column,
                                                  AtkObject *header);
  void (* set_row_description) (AtkTable *table,
                                                  gint row,
                                                  const gchar *description);
  void (* set_row_header) (AtkTable *table,
                                                  gint row,
                                                  AtkObject *header);
  void (* set_summary) (AtkTable *table,
                                                  AtkObject *accessible);
  gint (* get_selected_columns) (AtkTable *table,
                                                  gint **selected);
  gint (* get_selected_rows) (AtkTable *table,
                                                  gint **selected);
  gboolean (* is_column_selected) (AtkTable *table,
                                                  gint column);
  gboolean (* is_row_selected) (AtkTable *table,
                                                  gint row);
  gboolean (* is_selected) (AtkTable *table,
                                                  gint row,
                                                  gint column);
  gboolean (* add_row_selection) (AtkTable *table,
                                                  gint row);
  gboolean (* remove_row_selection) (AtkTable *table,
                                                  gint row);
  gboolean (* add_column_selection) (AtkTable *table,
                                                  gint column);
  gboolean (* remove_column_selection) (AtkTable *table,
                                                  gint column);
  void (* row_inserted) (AtkTable *table,
                                                  gint row,
                                                  gint num_inserted);
  void (* column_inserted) (AtkTable *table,
                                                  gint column,
                                                  gint num_inserted);
  void (* row_deleted) (AtkTable *table,
                                                  gint row,
                                                  gint num_deleted);
  void (* column_deleted) (AtkTable *table,
                                                  gint column,
                                                  gint num_deleted);
  void (* row_reordered) (AtkTable *table);
  void (* column_reordered) (AtkTable *table);
  void (* model_changed) (AtkTable *table);
};
extern
GType atk_table_get_type (void);
extern
AtkObject* atk_table_ref_at (AtkTable *table,
                                                  gint row,
                                                  gint column);
__attribute__((__deprecated__("Use '" "atk_table_ref_at" "' instead"))) extern
gint atk_table_get_index_at (AtkTable *table,
                                                  gint row,
                                                  gint column);
__attribute__((__deprecated__)) extern
gint atk_table_get_column_at_index (AtkTable *table,
                                                  gint index_);
__attribute__((__deprecated__)) extern
gint atk_table_get_row_at_index (AtkTable *table,
                                                  gint index_);
extern
gint atk_table_get_n_columns (AtkTable *table);
extern
gint atk_table_get_n_rows (AtkTable *table);
extern
gint atk_table_get_column_extent_at (AtkTable *table,
                                                  gint row,
                                                  gint column);
extern
gint atk_table_get_row_extent_at (AtkTable *table,
                                                  gint row,
                                                  gint column);
extern
AtkObject*
                  atk_table_get_caption (AtkTable *table);
extern
const gchar* atk_table_get_column_description
                                                 (AtkTable *table,
                                                  gint column);
extern
AtkObject* atk_table_get_column_header (AtkTable *table,
        gint column);
extern
const gchar* atk_table_get_row_description (AtkTable *table,
                                                  gint row);
extern
AtkObject* atk_table_get_row_header (AtkTable *table,
        gint row);
extern
AtkObject* atk_table_get_summary (AtkTable *table);
extern
void atk_table_set_caption (AtkTable *table,
                                                  AtkObject *caption);
extern
void atk_table_set_column_description
                                                 (AtkTable *table,
                                                  gint column,
                                                  const gchar *description);
extern
void atk_table_set_column_header (AtkTable *table,
                                                  gint column,
                                                  AtkObject *header);
extern
void atk_table_set_row_description (AtkTable *table,
                                                  gint row,
                                                  const gchar *description);
extern
void atk_table_set_row_header (AtkTable *table,
                                                  gint row,
                                                  AtkObject *header);
extern
void atk_table_set_summary (AtkTable *table,
                                                  AtkObject *accessible);
extern
gint atk_table_get_selected_columns (AtkTable *table,
                                                  gint **selected);
extern
gint atk_table_get_selected_rows (AtkTable *table,
                                                  gint **selected);
extern
gboolean atk_table_is_column_selected (AtkTable *table,
                                                  gint column);
extern
gboolean atk_table_is_row_selected (AtkTable *table,
                                                  gint row);
extern
gboolean atk_table_is_selected (AtkTable *table,
                                                  gint row,
                                                  gint column);
extern
gboolean atk_table_add_row_selection (AtkTable *table,
                                                  gint row);
extern
gboolean atk_table_remove_row_selection (AtkTable *table,
                                                  gint row);
extern
gboolean atk_table_add_column_selection (AtkTable *table,
                                                  gint column);
extern
gboolean atk_table_remove_column_selection
                                                 (AtkTable *table,
                                                  gint column);
typedef struct _AtkTableCell AtkTableCell;
typedef struct _AtkTableCellIface AtkTableCellIface;
struct _AtkTableCellIface
{
  GTypeInterface parent;
  gint (*get_column_span) (AtkTableCell *cell);
  GPtrArray * (*get_column_header_cells) (AtkTableCell *cell);
  gboolean (*get_position) (AtkTableCell *cell,
                                            gint *row,
                                            gint *column);
  gint (*get_row_span) (AtkTableCell *cell);
  GPtrArray * (*get_row_header_cells) (AtkTableCell *cell);
  gboolean (*get_row_column_span) (AtkTableCell *cell,
                                            gint *row,
                                            gint *column,
                                            gint *row_span,
                                            gint *column_span);
  AtkObject * (*get_table) (AtkTableCell *cell);
};
extern
GType atk_table_cell_get_type (void);
extern
gint atk_table_cell_get_column_span (AtkTableCell *cell);
extern
GPtrArray * atk_table_cell_get_column_header_cells (AtkTableCell *cell);
extern
gboolean atk_table_cell_get_position (AtkTableCell *cell,
                                                    gint *row,
                                                    gint *column);
extern
gint atk_table_cell_get_row_span (AtkTableCell *cell);
extern
GPtrArray * atk_table_cell_get_row_header_cells (AtkTableCell *cell);
extern
gboolean atk_table_cell_get_row_column_span (AtkTableCell *cell,
                                                    gint *row,
                                                    gint *column,
                                                    gint *row_span,
                                                    gint *column_span);
extern
AtkObject * atk_table_cell_get_table (AtkTableCell *cell);
typedef struct _AtkMisc AtkMisc;
typedef struct _AtkMiscClass AtkMiscClass;
struct _AtkMisc
{
  GObject parent;
};
extern AtkMisc *atk_misc_instance;
struct _AtkMiscClass
{
   GObjectClass parent;
   void (* threads_enter) (AtkMisc *misc);
   void (* threads_leave) (AtkMisc *misc);
   gpointer vfuncs[32];
};
__attribute__((__deprecated__)) extern
GType atk_misc_get_type (void);
__attribute__((__deprecated__)) extern
void atk_misc_threads_enter (AtkMisc *misc);
__attribute__((__deprecated__)) extern
void atk_misc_threads_leave (AtkMisc *misc);
__attribute__((__deprecated__)) extern
const AtkMisc *atk_misc_get_instance (void);
typedef struct _AtkValue AtkValue;
typedef struct _AtkValueIface AtkValueIface;
typedef enum
{
  ATK_VALUE_VERY_WEAK,
  ATK_VALUE_WEAK,
  ATK_VALUE_ACCEPTABLE,
  ATK_VALUE_STRONG,
  ATK_VALUE_VERY_STRONG,
  ATK_VALUE_VERY_LOW,
  ATK_VALUE_LOW,
  ATK_VALUE_MEDIUM,
  ATK_VALUE_HIGH,
  ATK_VALUE_VERY_HIGH,
  ATK_VALUE_VERY_BAD,
  ATK_VALUE_BAD,
  ATK_VALUE_GOOD,
  ATK_VALUE_VERY_GOOD,
  ATK_VALUE_BEST,
  ATK_VALUE_LAST_DEFINED
}AtkValueType;
struct _AtkValueIface
{
  GTypeInterface parent;
  void (* get_current_value) (AtkValue *obj,
                                  GValue *value);
  void (* get_maximum_value) (AtkValue *obj,
                                  GValue *value);
  void (* get_minimum_value) (AtkValue *obj,
                                  GValue *value);
  gboolean (* set_current_value) (AtkValue *obj,
                                  const GValue *value);
  void (* get_minimum_increment) (AtkValue *obj,
          GValue *value);
  void (* get_value_and_text) (AtkValue *obj,
                                   gdouble *value,
                                   gchar **text);
  AtkRange*(* get_range) (AtkValue *obj);
  gdouble (* get_increment) (AtkValue *obj);
  GSList* (* get_sub_ranges) (AtkValue *obj);
  void (* set_value) (AtkValue *obj,
                                   const gdouble new_value);
};
extern
GType atk_value_get_type (void);
__attribute__((__deprecated__("Use '" "atk_value_get_value_and_text" "' instead"))) extern
void atk_value_get_current_value (AtkValue *obj,
                                       GValue *value);
__attribute__((__deprecated__("Use '" "atk_value_get_range" "' instead"))) extern
void atk_value_get_maximum_value (AtkValue *obj,
                                       GValue *value);
__attribute__((__deprecated__("Use '" "atk_value_get_range" "' instead"))) extern
void atk_value_get_minimum_value (AtkValue *obj,
                                       GValue *value);
__attribute__((__deprecated__("Use '" "atk_value_set_value" "' instead"))) extern
gboolean atk_value_set_current_value (AtkValue *obj,
                                       const GValue *value);
__attribute__((__deprecated__("Use '" "atk_value_get_increment" "' instead"))) extern
void atk_value_get_minimum_increment (AtkValue *obj,
        GValue *value);
extern
void atk_value_get_value_and_text (AtkValue *obj,
                                        gdouble *value,
                                        gchar **text);
extern
AtkRange* atk_value_get_range (AtkValue *obj);
extern
gdouble atk_value_get_increment (AtkValue *obj);
extern
GSList* atk_value_get_sub_ranges (AtkValue *obj);
extern
void atk_value_set_value (AtkValue *obj,
                                        const gdouble new_value);
extern
const gchar* atk_value_type_get_name (AtkValueType value_type);
extern
const gchar* atk_value_type_get_localized_name (AtkValueType value_type);
typedef struct _AtkWindow AtkWindow;
typedef struct _AtkWindowIface AtkWindowIface;
struct _AtkWindowIface
{
  GTypeInterface parent;
};
extern
GType atk_window_get_type (void);
typedef enum
{
  GTK_WIDGET_HELP_TOOLTIP,
  GTK_WIDGET_HELP_WHATS_THIS
} GtkWidgetHelpType;
typedef struct _GtkWidgetPrivate GtkWidgetPrivate;
typedef struct _GtkWidgetClass GtkWidgetClass;
typedef struct _GtkWidgetClassPrivate GtkWidgetClassPrivate;
typedef GdkRectangle GtkAllocation;
typedef void (*GtkCallback) (GtkWidget *widget,
        gpointer data);
typedef gboolean (*GtkTickCallback) (GtkWidget *widget,
                                     GdkFrameClock *frame_clock,
                                     gpointer user_data);
struct _GtkRequisition
{
  gint width;
  gint height;
};
struct _GtkWidget
{
  GInitiallyUnowned parent_instance;
  GtkWidgetPrivate *priv;
};
struct _GtkWidgetClass
{
  GInitiallyUnownedClass parent_class;
  guint activate_signal;
  void (*dispatch_child_properties_changed) (GtkWidget *widget,
          guint n_pspecs,
          GParamSpec **pspecs);
  void (* destroy) (GtkWidget *widget);
  void (* show) (GtkWidget *widget);
  void (* show_all) (GtkWidget *widget);
  void (* hide) (GtkWidget *widget);
  void (* map) (GtkWidget *widget);
  void (* unmap) (GtkWidget *widget);
  void (* realize) (GtkWidget *widget);
  void (* unrealize) (GtkWidget *widget);
  void (* size_allocate) (GtkWidget *widget,
    GtkAllocation *allocation);
  void (* state_changed) (GtkWidget *widget,
    GtkStateType previous_state);
  void (* state_flags_changed) (GtkWidget *widget,
    GtkStateFlags previous_state_flags);
  void (* parent_set) (GtkWidget *widget,
    GtkWidget *previous_parent);
  void (* hierarchy_changed) (GtkWidget *widget,
    GtkWidget *previous_toplevel);
  void (* style_set) (GtkWidget *widget,
    GtkStyle *previous_style);
  void (* direction_changed) (GtkWidget *widget,
    GtkTextDirection previous_direction);
  void (* grab_notify) (GtkWidget *widget,
    gboolean was_grabbed);
  void (* child_notify) (GtkWidget *widget,
    GParamSpec *child_property);
  gboolean (* draw) (GtkWidget *widget,
                                cairo_t *cr);
  GtkSizeRequestMode (* get_request_mode) (GtkWidget *widget);
  void (* get_preferred_height) (GtkWidget *widget,
                                                         gint *minimum_height,
                                                         gint *natural_height);
  void (* get_preferred_width_for_height) (GtkWidget *widget,
                                                         gint height,
                                                         gint *minimum_width,
                                                         gint *natural_width);
  void (* get_preferred_width) (GtkWidget *widget,
                                                         gint *minimum_width,
                                                         gint *natural_width);
  void (* get_preferred_height_for_width) (GtkWidget *widget,
                                                         gint width,
                                                         gint *minimum_height,
                                                         gint *natural_height);
  gboolean (* mnemonic_activate) (GtkWidget *widget,
                                         gboolean group_cycling);
  void (* grab_focus) (GtkWidget *widget);
  gboolean (* focus) (GtkWidget *widget,
                                         GtkDirectionType direction);
  void (* move_focus) (GtkWidget *widget,
                                         GtkDirectionType direction);
  gboolean (* keynav_failed) (GtkWidget *widget,
                                         GtkDirectionType direction);
  gboolean (* event) (GtkWidget *widget,
      GdkEvent *event);
  gboolean (* button_press_event) (GtkWidget *widget,
      GdkEventButton *event);
  gboolean (* button_release_event) (GtkWidget *widget,
      GdkEventButton *event);
  gboolean (* scroll_event) (GtkWidget *widget,
      GdkEventScroll *event);
  gboolean (* motion_notify_event) (GtkWidget *widget,
      GdkEventMotion *event);
  gboolean (* delete_event) (GtkWidget *widget,
      GdkEventAny *event);
  gboolean (* destroy_event) (GtkWidget *widget,
      GdkEventAny *event);
  gboolean (* key_press_event) (GtkWidget *widget,
      GdkEventKey *event);
  gboolean (* key_release_event) (GtkWidget *widget,
      GdkEventKey *event);
  gboolean (* enter_notify_event) (GtkWidget *widget,
      GdkEventCrossing *event);
  gboolean (* leave_notify_event) (GtkWidget *widget,
      GdkEventCrossing *event);
  gboolean (* configure_event) (GtkWidget *widget,
      GdkEventConfigure *event);
  gboolean (* focus_in_event) (GtkWidget *widget,
      GdkEventFocus *event);
  gboolean (* focus_out_event) (GtkWidget *widget,
      GdkEventFocus *event);
  gboolean (* map_event) (GtkWidget *widget,
      GdkEventAny *event);
  gboolean (* unmap_event) (GtkWidget *widget,
      GdkEventAny *event);
  gboolean (* property_notify_event) (GtkWidget *widget,
      GdkEventProperty *event);
  gboolean (* selection_clear_event) (GtkWidget *widget,
      GdkEventSelection *event);
  gboolean (* selection_request_event) (GtkWidget *widget,
      GdkEventSelection *event);
  gboolean (* selection_notify_event) (GtkWidget *widget,
      GdkEventSelection *event);
  gboolean (* proximity_in_event) (GtkWidget *widget,
      GdkEventProximity *event);
  gboolean (* proximity_out_event) (GtkWidget *widget,
      GdkEventProximity *event);
  gboolean (* visibility_notify_event) (GtkWidget *widget,
      GdkEventVisibility *event);
  gboolean (* window_state_event) (GtkWidget *widget,
      GdkEventWindowState *event);
  gboolean (* damage_event) (GtkWidget *widget,
                                         GdkEventExpose *event);
  gboolean (* grab_broken_event) (GtkWidget *widget,
                                         GdkEventGrabBroken *event);
  void (* selection_get) (GtkWidget *widget,
        GtkSelectionData *selection_data,
        guint info,
        guint time_);
  void (* selection_received) (GtkWidget *widget,
        GtkSelectionData *selection_data,
        guint time_);
  void (* drag_begin) (GtkWidget *widget,
        GdkDragContext *context);
  void (* drag_end) (GtkWidget *widget,
        GdkDragContext *context);
  void (* drag_data_get) (GtkWidget *widget,
        GdkDragContext *context,
        GtkSelectionData *selection_data,
        guint info,
        guint time_);
  void (* drag_data_delete) (GtkWidget *widget,
        GdkDragContext *context);
  void (* drag_leave) (GtkWidget *widget,
        GdkDragContext *context,
        guint time_);
  gboolean (* drag_motion) (GtkWidget *widget,
        GdkDragContext *context,
        gint x,
        gint y,
        guint time_);
  gboolean (* drag_drop) (GtkWidget *widget,
        GdkDragContext *context,
        gint x,
        gint y,
        guint time_);
  void (* drag_data_received) (GtkWidget *widget,
        GdkDragContext *context,
        gint x,
        gint y,
        GtkSelectionData *selection_data,
        guint info,
        guint time_);
  gboolean (* drag_failed) (GtkWidget *widget,
                                    GdkDragContext *context,
                                    GtkDragResult result);
  gboolean (* popup_menu) (GtkWidget *widget);
  gboolean (* show_help) (GtkWidget *widget,
                                    GtkWidgetHelpType help_type);
  AtkObject * (* get_accessible) (GtkWidget *widget);
  void (* screen_changed) (GtkWidget *widget,
                                       GdkScreen *previous_screen);
  gboolean (* can_activate_accel) (GtkWidget *widget,
                                       guint signal_id);
  void (* composited_changed) (GtkWidget *widget);
  gboolean (* query_tooltip) (GtkWidget *widget,
           gint x,
           gint y,
           gboolean keyboard_tooltip,
           GtkTooltip *tooltip);
  void (* compute_expand) (GtkWidget *widget,
                                       gboolean *hexpand_p,
                                       gboolean *vexpand_p);
  void (* adjust_size_request) (GtkWidget *widget,
                                           GtkOrientation orientation,
                                           gint *minimum_size,
                                           gint *natural_size);
  void (* adjust_size_allocation) (GtkWidget *widget,
                                           GtkOrientation orientation,
                                           gint *minimum_size,
                                           gint *natural_size,
                                           gint *allocated_pos,
                                           gint *allocated_size);
  void (* style_updated) (GtkWidget *widget);
  gboolean (* touch_event) (GtkWidget *widget,
                                           GdkEventTouch *event);
  void (* get_preferred_height_and_baseline_for_width) (GtkWidget *widget,
         gint width,
         gint *minimum_height,
         gint *natural_height,
         gint *minimum_baseline,
         gint *natural_baseline);
  void (* adjust_baseline_request)(GtkWidget *widget,
                                           gint *minimum_baseline,
                                           gint *natural_baseline);
  void (* adjust_baseline_allocation) (GtkWidget *widget,
            gint *baseline);
  void (*queue_draw_region) (GtkWidget *widget,
            const cairo_region_t *region);
  GtkWidgetClassPrivate *priv;
  void (*_gtk_reserved6) (void);
  void (*_gtk_reserved7) (void);
};
extern
GType gtk_widget_get_type (void) __attribute__((__const__));
extern
GtkWidget* gtk_widget_new (GType type,
        const gchar *first_property_name,
        ...);
extern
void gtk_widget_destroy (GtkWidget *widget);
extern
void gtk_widget_destroyed (GtkWidget *widget,
        GtkWidget **widget_pointer);
extern
void gtk_widget_unparent (GtkWidget *widget);
extern
void gtk_widget_show (GtkWidget *widget);
extern
void gtk_widget_hide (GtkWidget *widget);
extern
void gtk_widget_show_now (GtkWidget *widget);
extern
void gtk_widget_show_all (GtkWidget *widget);
extern
void gtk_widget_set_no_show_all (GtkWidget *widget,
                                           gboolean no_show_all);
extern
gboolean gtk_widget_get_no_show_all (GtkWidget *widget);
extern
void gtk_widget_map (GtkWidget *widget);
extern
void gtk_widget_unmap (GtkWidget *widget);
extern
void gtk_widget_realize (GtkWidget *widget);
extern
void gtk_widget_unrealize (GtkWidget *widget);
extern
void gtk_widget_draw (GtkWidget *widget,
                                           cairo_t *cr);
extern
void gtk_widget_queue_draw (GtkWidget *widget);
extern
void gtk_widget_queue_draw_area (GtkWidget *widget,
        gint x,
        gint y,
        gint width,
        gint height);
extern
void gtk_widget_queue_draw_region (GtkWidget *widget,
                                           const cairo_region_t*region);
extern
void gtk_widget_queue_resize (GtkWidget *widget);
extern
void gtk_widget_queue_resize_no_redraw (GtkWidget *widget);
extern
GdkFrameClock* gtk_widget_get_frame_clock (GtkWidget *widget);
extern
void gtk_widget_size_request (GtkWidget *widget,
                                           GtkRequisition *requisition);
extern
void gtk_widget_size_allocate (GtkWidget *widget,
        GtkAllocation *allocation);
extern
void gtk_widget_size_allocate_with_baseline (GtkWidget *widget,
          GtkAllocation *allocation,
          gint baseline);
extern
GtkSizeRequestMode gtk_widget_get_request_mode (GtkWidget *widget);
extern
void gtk_widget_get_preferred_width (GtkWidget *widget,
                                                               gint *minimum_width,
                                                               gint *natural_width);
extern
void gtk_widget_get_preferred_height_for_width (GtkWidget *widget,
                                                               gint width,
                                                               gint *minimum_height,
                                                               gint *natural_height);
extern
void gtk_widget_get_preferred_height (GtkWidget *widget,
                                                               gint *minimum_height,
                                                               gint *natural_height);
extern
void gtk_widget_get_preferred_width_for_height (GtkWidget *widget,
                                                               gint height,
                                                               gint *minimum_width,
                                                               gint *natural_width);
extern
void gtk_widget_get_preferred_height_and_baseline_for_width (GtkWidget *widget,
              gint width,
              gint *minimum_height,
              gint *natural_height,
              gint *minimum_baseline,
              gint *natural_baseline);
extern
void gtk_widget_get_preferred_size (GtkWidget *widget,
                                                               GtkRequisition *minimum_size,
                                                               GtkRequisition *natural_size);
extern
void gtk_widget_get_child_requisition (GtkWidget *widget,
                                             GtkRequisition *requisition);
extern
void gtk_widget_add_accelerator (GtkWidget *widget,
        const gchar *accel_signal,
        GtkAccelGroup *accel_group,
        guint accel_key,
        GdkModifierType accel_mods,
        GtkAccelFlags accel_flags);
extern
gboolean gtk_widget_remove_accelerator (GtkWidget *widget,
        GtkAccelGroup *accel_group,
        guint accel_key,
        GdkModifierType accel_mods);
extern
void gtk_widget_set_accel_path (GtkWidget *widget,
        const gchar *accel_path,
        GtkAccelGroup *accel_group);
extern
GList* gtk_widget_list_accel_closures (GtkWidget *widget);
extern
gboolean gtk_widget_can_activate_accel (GtkWidget *widget,
                                           guint signal_id);
extern
gboolean gtk_widget_mnemonic_activate (GtkWidget *widget,
        gboolean group_cycling);
extern
gboolean gtk_widget_event (GtkWidget *widget,
        GdkEvent *event);
extern
gint gtk_widget_send_expose (GtkWidget *widget,
        GdkEvent *event);
extern
gboolean gtk_widget_send_focus_change (GtkWidget *widget,
                                           GdkEvent *event);
extern
gboolean gtk_widget_activate (GtkWidget *widget);
extern
void gtk_widget_reparent (GtkWidget *widget,
        GtkWidget *new_parent);
extern
gboolean gtk_widget_intersect (GtkWidget *widget,
        const GdkRectangle *area,
        GdkRectangle *intersection);
extern
cairo_region_t *gtk_widget_region_intersect (GtkWidget *widget,
        const cairo_region_t *region);
extern
void gtk_widget_freeze_child_notify (GtkWidget *widget);
extern
void gtk_widget_child_notify (GtkWidget *widget,
        const gchar *child_property);
extern
void gtk_widget_thaw_child_notify (GtkWidget *widget);
extern
void gtk_widget_set_can_focus (GtkWidget *widget,
                                           gboolean can_focus);
extern
gboolean gtk_widget_get_can_focus (GtkWidget *widget);
extern
gboolean gtk_widget_has_focus (GtkWidget *widget);
extern
gboolean gtk_widget_is_focus (GtkWidget *widget);
extern
gboolean gtk_widget_has_visible_focus (GtkWidget *widget);
extern
void gtk_widget_grab_focus (GtkWidget *widget);
extern
void gtk_widget_set_can_default (GtkWidget *widget,
                                           gboolean can_default);
extern
gboolean gtk_widget_get_can_default (GtkWidget *widget);
extern
gboolean gtk_widget_has_default (GtkWidget *widget);
extern
void gtk_widget_grab_default (GtkWidget *widget);
extern
void gtk_widget_set_receives_default (GtkWidget *widget,
                                           gboolean receives_default);
extern
gboolean gtk_widget_get_receives_default (GtkWidget *widget);
extern
gboolean gtk_widget_has_grab (GtkWidget *widget);
extern
gboolean gtk_widget_device_is_shadowed (GtkWidget *widget,
                                           GdkDevice *device);
extern
void gtk_widget_set_name (GtkWidget *widget,
        const gchar *name);
extern
const gchar * gtk_widget_get_name (GtkWidget *widget);
extern
void gtk_widget_set_state (GtkWidget *widget,
        GtkStateType state);
extern
GtkStateType gtk_widget_get_state (GtkWidget *widget);
extern
void gtk_widget_set_state_flags (GtkWidget *widget,
                                                         GtkStateFlags flags,
                                                         gboolean clear);
extern
void gtk_widget_unset_state_flags (GtkWidget *widget,
                                                         GtkStateFlags flags);
extern
GtkStateFlags gtk_widget_get_state_flags (GtkWidget *widget);
extern
void gtk_widget_set_sensitive (GtkWidget *widget,
        gboolean sensitive);
extern
gboolean gtk_widget_get_sensitive (GtkWidget *widget);
extern
gboolean gtk_widget_is_sensitive (GtkWidget *widget);
extern
void gtk_widget_set_visible (GtkWidget *widget,
                                                         gboolean visible);
extern
gboolean gtk_widget_get_visible (GtkWidget *widget);
extern
gboolean gtk_widget_is_visible (GtkWidget *widget);
extern
void gtk_widget_set_has_window (GtkWidget *widget,
                                                         gboolean has_window);
extern
gboolean gtk_widget_get_has_window (GtkWidget *widget);
extern
gboolean gtk_widget_is_toplevel (GtkWidget *widget);
extern
gboolean gtk_widget_is_drawable (GtkWidget *widget);
extern
void gtk_widget_set_realized (GtkWidget *widget,
                                                         gboolean realized);
extern
gboolean gtk_widget_get_realized (GtkWidget *widget);
extern
void gtk_widget_set_mapped (GtkWidget *widget,
                                                         gboolean mapped);
extern
gboolean gtk_widget_get_mapped (GtkWidget *widget);
extern
void gtk_widget_set_app_paintable (GtkWidget *widget,
        gboolean app_paintable);
extern
gboolean gtk_widget_get_app_paintable (GtkWidget *widget);
extern
void gtk_widget_set_double_buffered (GtkWidget *widget,
        gboolean double_buffered);
extern
gboolean gtk_widget_get_double_buffered (GtkWidget *widget);
extern
void gtk_widget_set_redraw_on_allocate (GtkWidget *widget,
        gboolean redraw_on_allocate);
extern
void gtk_widget_set_parent (GtkWidget *widget,
        GtkWidget *parent);
extern
GtkWidget * gtk_widget_get_parent (GtkWidget *widget);
extern
void gtk_widget_set_parent_window (GtkWidget *widget,
        GdkWindow *parent_window);
extern
GdkWindow * gtk_widget_get_parent_window (GtkWidget *widget);
extern
void gtk_widget_set_child_visible (GtkWidget *widget,
        gboolean is_visible);
extern
gboolean gtk_widget_get_child_visible (GtkWidget *widget);
extern
void gtk_widget_set_window (GtkWidget *widget,
                                                         GdkWindow *window);
extern
GdkWindow * gtk_widget_get_window (GtkWidget *widget);
extern
void gtk_widget_register_window (GtkWidget *widget,
                                                         GdkWindow *window);
extern
void gtk_widget_unregister_window (GtkWidget *widget,
                                                         GdkWindow *window);
extern
int gtk_widget_get_allocated_width (GtkWidget *widget);
extern
int gtk_widget_get_allocated_height (GtkWidget *widget);
extern
int gtk_widget_get_allocated_baseline (GtkWidget *widget);
extern
void gtk_widget_get_allocation (GtkWidget *widget,
                                                         GtkAllocation *allocation);
extern
void gtk_widget_set_allocation (GtkWidget *widget,
                                                         const GtkAllocation *allocation);
extern
void gtk_widget_set_clip (GtkWidget *widget,
                                                         const GtkAllocation *clip);
extern
void gtk_widget_get_clip (GtkWidget *widget,
                                                         GtkAllocation *clip);
extern
void gtk_widget_get_requisition (GtkWidget *widget,
                                                         GtkRequisition *requisition);
extern
gboolean gtk_widget_child_focus (GtkWidget *widget,
                                           GtkDirectionType direction);
extern
gboolean gtk_widget_keynav_failed (GtkWidget *widget,
                                           GtkDirectionType direction);
extern
void gtk_widget_error_bell (GtkWidget *widget);
extern
void gtk_widget_set_size_request (GtkWidget *widget,
                                           gint width,
                                           gint height);
extern
void gtk_widget_get_size_request (GtkWidget *widget,
                                           gint *width,
                                           gint *height);
extern
void gtk_widget_set_events (GtkWidget *widget,
        gint events);
extern
void gtk_widget_add_events (GtkWidget *widget,
        gint events);
extern
void gtk_widget_set_device_events (GtkWidget *widget,
                                           GdkDevice *device,
        GdkEventMask events);
extern
void gtk_widget_add_device_events (GtkWidget *widget,
                                           GdkDevice *device,
        GdkEventMask events);
extern
void gtk_widget_set_opacity (GtkWidget *widget,
        double opacity);
extern
double gtk_widget_get_opacity (GtkWidget *widget);
extern
void gtk_widget_set_device_enabled (GtkWidget *widget,
                                           GdkDevice *device,
                                           gboolean enabled);
extern
gboolean gtk_widget_get_device_enabled (GtkWidget *widget,
                                           GdkDevice *device);
extern
GtkWidget* gtk_widget_get_toplevel (GtkWidget *widget);
extern
GtkWidget* gtk_widget_get_ancestor (GtkWidget *widget,
      GType widget_type);
extern
GdkVisual* gtk_widget_get_visual (GtkWidget *widget);
extern
void gtk_widget_set_visual (GtkWidget *widget,
                                         GdkVisual *visual);
extern
GdkScreen * gtk_widget_get_screen (GtkWidget *widget);
extern
gboolean gtk_widget_has_screen (GtkWidget *widget);
extern
gint gtk_widget_get_scale_factor (GtkWidget *widget);
extern
GdkDisplay * gtk_widget_get_display (GtkWidget *widget);
extern
GdkWindow * gtk_widget_get_root_window (GtkWidget *widget);
extern
GtkSettings* gtk_widget_get_settings (GtkWidget *widget);
extern
GtkClipboard *gtk_widget_get_clipboard (GtkWidget *widget,
       GdkAtom selection);
extern
gboolean gtk_widget_get_hexpand (GtkWidget *widget);
extern
void gtk_widget_set_hexpand (GtkWidget *widget,
                                          gboolean expand);
extern
gboolean gtk_widget_get_hexpand_set (GtkWidget *widget);
extern
void gtk_widget_set_hexpand_set (GtkWidget *widget,
                                          gboolean set);
extern
gboolean gtk_widget_get_vexpand (GtkWidget *widget);
extern
void gtk_widget_set_vexpand (GtkWidget *widget,
                                          gboolean expand);
extern
gboolean gtk_widget_get_vexpand_set (GtkWidget *widget);
extern
void gtk_widget_set_vexpand_set (GtkWidget *widget,
                                          gboolean set);
extern
void gtk_widget_queue_compute_expand (GtkWidget *widget);
extern
gboolean gtk_widget_compute_expand (GtkWidget *widget,
                                          GtkOrientation orientation);
extern
gboolean gtk_widget_get_support_multidevice (GtkWidget *widget);
extern
void gtk_widget_set_support_multidevice (GtkWidget *widget,
                                                     gboolean support_multidevice);
extern
void gtk_widget_class_set_accessible_type (GtkWidgetClass *widget_class,
                                                          GType type);
extern
void gtk_widget_class_set_accessible_role (GtkWidgetClass *widget_class,
                                                          AtkRole role);
extern
AtkObject* gtk_widget_get_accessible (GtkWidget *widget);
extern
GtkAlign gtk_widget_get_halign (GtkWidget *widget);
extern
void gtk_widget_set_halign (GtkWidget *widget,
                                       GtkAlign align);
extern
GtkAlign gtk_widget_get_valign (GtkWidget *widget);
extern
GtkAlign gtk_widget_get_valign_with_baseline (GtkWidget *widget);
extern
void gtk_widget_set_valign (GtkWidget *widget,
                                       GtkAlign align);
extern
gint gtk_widget_get_margin_left (GtkWidget *widget);
extern
void gtk_widget_set_margin_left (GtkWidget *widget,
                                       gint margin);
extern
gint gtk_widget_get_margin_right (GtkWidget *widget);
extern
void gtk_widget_set_margin_right (GtkWidget *widget,
                                       gint margin);
extern
gint gtk_widget_get_margin_start (GtkWidget *widget);
extern
void gtk_widget_set_margin_start (GtkWidget *widget,
                                       gint margin);
extern
gint gtk_widget_get_margin_end (GtkWidget *widget);
extern
void gtk_widget_set_margin_end (GtkWidget *widget,
                                       gint margin);
extern
gint gtk_widget_get_margin_top (GtkWidget *widget);
extern
void gtk_widget_set_margin_top (GtkWidget *widget,
                                       gint margin);
extern
gint gtk_widget_get_margin_bottom (GtkWidget *widget);
extern
void gtk_widget_set_margin_bottom (GtkWidget *widget,
                                       gint margin);
extern
gint gtk_widget_get_events (GtkWidget *widget);
extern
GdkEventMask gtk_widget_get_device_events (GtkWidget *widget,
                                           GdkDevice *device);
extern
void gtk_widget_get_pointer (GtkWidget *widget,
      gint *x,
      gint *y);
extern
gboolean gtk_widget_is_ancestor (GtkWidget *widget,
      GtkWidget *ancestor);
extern
gboolean gtk_widget_translate_coordinates (GtkWidget *src_widget,
            GtkWidget *dest_widget,
            gint src_x,
            gint src_y,
            gint *dest_x,
            gint *dest_y);
extern
gboolean gtk_widget_hide_on_delete (GtkWidget *widget);
extern
void gtk_widget_override_color (GtkWidget *widget,
                                                   GtkStateFlags state,
                                                   const GdkRGBA *color);
extern
void gtk_widget_override_background_color (GtkWidget *widget,
                                                   GtkStateFlags state,
                                                   const GdkRGBA *color);
extern
void gtk_widget_override_font (GtkWidget *widget,
                                                   const PangoFontDescription *font_desc);
extern
void gtk_widget_override_symbolic_color (GtkWidget *widget,
                                                   const gchar *name,
                                                   const GdkRGBA *color);
extern
void gtk_widget_override_cursor (GtkWidget *widget,
                                                   const GdkRGBA *cursor,
                                                   const GdkRGBA *secondary_cursor);
extern
void gtk_widget_reset_style (GtkWidget *widget);
extern
PangoContext *gtk_widget_create_pango_context (GtkWidget *widget);
extern
PangoContext *gtk_widget_get_pango_context (GtkWidget *widget);
extern
void gtk_widget_set_font_options (GtkWidget *widget,
                                  const cairo_font_options_t *options);
extern
const cairo_font_options_t *gtk_widget_get_font_options (GtkWidget *widget);
extern
PangoLayout *gtk_widget_create_pango_layout (GtkWidget *widget,
            const gchar *text);
extern
GdkPixbuf *gtk_widget_render_icon_pixbuf (GtkWidget *widget,
                                               const gchar *stock_id,
                                               GtkIconSize size);
extern
void gtk_widget_set_composite_name (GtkWidget *widget,
      const gchar *name);
extern
gchar* gtk_widget_get_composite_name (GtkWidget *widget);
extern
void gtk_widget_push_composite_child (void);
extern
void gtk_widget_pop_composite_child (void);
extern
void gtk_widget_class_install_style_property (GtkWidgetClass *klass,
           GParamSpec *pspec);
extern
void gtk_widget_class_install_style_property_parser (GtkWidgetClass *klass,
           GParamSpec *pspec,
           GtkRcPropertyParser parser);
extern
GParamSpec* gtk_widget_class_find_style_property (GtkWidgetClass *klass,
           const gchar *property_name);
extern
GParamSpec** gtk_widget_class_list_style_properties (GtkWidgetClass *klass,
           guint *n_properties);
extern
void gtk_widget_style_get_property (GtkWidget *widget,
        const gchar *property_name,
        GValue *value);
extern
void gtk_widget_style_get_valist (GtkWidget *widget,
        const gchar *first_property_name,
        va_list var_args);
extern
void gtk_widget_style_get (GtkWidget *widget,
        const gchar *first_property_name,
        ...) __attribute__((__sentinel__));
extern
void gtk_widget_set_direction (GtkWidget *widget,
         GtkTextDirection dir);
extern
GtkTextDirection gtk_widget_get_direction (GtkWidget *widget);
extern
void gtk_widget_set_default_direction (GtkTextDirection dir);
extern
GtkTextDirection gtk_widget_get_default_direction (void);
extern
gboolean gtk_widget_is_composited (GtkWidget *widget);
extern
void gtk_widget_shape_combine_region (GtkWidget *widget,
                                              cairo_region_t *region);
extern
void gtk_widget_input_shape_combine_region (GtkWidget *widget,
                                                    cairo_region_t *region);
extern
GList* gtk_widget_list_mnemonic_labels (GtkWidget *widget);
extern
void gtk_widget_add_mnemonic_label (GtkWidget *widget,
      GtkWidget *label);
extern
void gtk_widget_remove_mnemonic_label (GtkWidget *widget,
      GtkWidget *label);
extern
void gtk_widget_set_tooltip_window (GtkWidget *widget,
                                                        GtkWindow *custom_window);
extern
GtkWindow *gtk_widget_get_tooltip_window (GtkWidget *widget);
extern
void gtk_widget_trigger_tooltip_query (GtkWidget *widget);
extern
void gtk_widget_set_tooltip_text (GtkWidget *widget,
                                             const gchar *text);
extern
gchar * gtk_widget_get_tooltip_text (GtkWidget *widget);
extern
void gtk_widget_set_tooltip_markup (GtkWidget *widget,
                                             const gchar *markup);
extern
gchar * gtk_widget_get_tooltip_markup (GtkWidget *widget);
extern
void gtk_widget_set_has_tooltip (GtkWidget *widget,
          gboolean has_tooltip);
extern
gboolean gtk_widget_get_has_tooltip (GtkWidget *widget);
extern
gboolean gtk_cairo_should_draw_window (cairo_t *cr,
                                             GdkWindow *window);
extern
void gtk_cairo_transform_to_window (cairo_t *cr,
                                             GtkWidget *widget,
                                             GdkWindow *window);
extern
GType gtk_requisition_get_type (void) __attribute__((__const__));
extern
GtkRequisition *gtk_requisition_new (void) __attribute__((__malloc__));
extern
GtkRequisition *gtk_requisition_copy (const GtkRequisition *requisition);
extern
void gtk_requisition_free (GtkRequisition *requisition);
extern
gboolean gtk_widget_in_destruction (GtkWidget *widget);
extern
GtkStyleContext * gtk_widget_get_style_context (GtkWidget *widget);
extern
GtkWidgetPath * gtk_widget_get_path (GtkWidget *widget);
extern
GdkModifierType gtk_widget_get_modifier_mask (GtkWidget *widget,
                                                GdkModifierIntent intent);
extern
void gtk_widget_insert_action_group (GtkWidget *widget,
                                                                         const gchar *name,
                                                                         GActionGroup *group);
extern
guint gtk_widget_add_tick_callback (GtkWidget *widget,
                                    GtkTickCallback callback,
                                    gpointer user_data,
                                    GDestroyNotify notify);
extern
void gtk_widget_remove_tick_callback (GtkWidget *widget,
                                      guint id);
extern
void gtk_widget_init_template (GtkWidget *widget);
extern
GObject *gtk_widget_get_template_child (GtkWidget *widget,
               GType widget_type,
               const gchar *name);
extern
void gtk_widget_class_set_template (GtkWidgetClass *widget_class,
               GBytes *template_bytes);
extern
void gtk_widget_class_set_template_from_resource (GtkWidgetClass *widget_class,
               const gchar *resource_name);
extern
void gtk_widget_class_bind_template_callback_full (GtkWidgetClass *widget_class,
               const gchar *callback_name,
               GCallback callback_symbol);
extern
void gtk_widget_class_set_connect_func (GtkWidgetClass *widget_class,
               GtkBuilderConnectFunc connect_func,
               gpointer connect_data,
               GDestroyNotify connect_data_destroy);
extern
void gtk_widget_class_bind_template_child_full (GtkWidgetClass *widget_class,
               const gchar *name,
               gboolean internal_child,
               gssize struct_offset);
extern
GActionGroup *gtk_widget_get_action_group (GtkWidget *widget,
                                                         const gchar *prefix);
extern
const gchar ** gtk_widget_list_action_prefixes (GtkWidget *widget);
extern
void gtk_widget_set_font_map (GtkWidget *widget,
                                                         PangoFontMap *font_map);
extern
PangoFontMap * gtk_widget_get_font_map (GtkWidget *widget);
typedef struct _GtkApplication GtkApplication;
typedef struct _GtkApplicationClass GtkApplicationClass;
typedef struct _GtkApplicationPrivate GtkApplicationPrivate;
struct _GtkApplication
{
  GApplication parent;
  GtkApplicationPrivate *priv;
};
struct _GtkApplicationClass
{
  GApplicationClass parent_class;
  void (*window_added) (GtkApplication *application,
                          GtkWindow *window);
  void (*window_removed) (GtkApplication *application,
                          GtkWindow *window);
  gpointer padding[12];
};
extern
GType gtk_application_get_type (void) __attribute__((__const__));
extern
GtkApplication * gtk_application_new (const gchar *application_id,
                                                GApplicationFlags flags);
extern
void gtk_application_add_window (GtkApplication *application,
                                                GtkWindow *window);
extern
void gtk_application_remove_window (GtkApplication *application,
                                                GtkWindow *window);
extern
GList * gtk_application_get_windows (GtkApplication *application);
extern
GMenuModel * gtk_application_get_app_menu (GtkApplication *application);
extern
void gtk_application_set_app_menu (GtkApplication *application,
                                                GMenuModel *app_menu);
extern
GMenuModel * gtk_application_get_menubar (GtkApplication *application);
extern
void gtk_application_set_menubar (GtkApplication *application,
                                                GMenuModel *menubar);
extern
void gtk_application_add_accelerator (GtkApplication *application,
                                                     const gchar *accelerator,
                                                     const gchar *action_name,
                                                     GVariant *parameter);
extern
void gtk_application_remove_accelerator (GtkApplication *application,
                                                     const gchar *action_name,
                                                     GVariant *parameter);
typedef enum
{
  GTK_APPLICATION_INHIBIT_LOGOUT = (1 << 0),
  GTK_APPLICATION_INHIBIT_SWITCH = (1 << 1),
  GTK_APPLICATION_INHIBIT_SUSPEND = (1 << 2),
  GTK_APPLICATION_INHIBIT_IDLE = (1 << 3)
} GtkApplicationInhibitFlags;
extern
guint gtk_application_inhibit (GtkApplication *application,
                                                     GtkWindow *window,
                                                     GtkApplicationInhibitFlags flags,
                                                     const gchar *reason);
extern
void gtk_application_uninhibit (GtkApplication *application,
                                                     guint cookie);
extern
gboolean gtk_application_is_inhibited (GtkApplication *application,
                                                     GtkApplicationInhibitFlags flags);
extern
GtkWindow * gtk_application_get_window_by_id (GtkApplication *application,
                                                     guint id);
extern
GtkWindow * gtk_application_get_active_window (GtkApplication *application);
extern
gchar ** gtk_application_list_action_descriptions (GtkApplication *application);
extern
gchar ** gtk_application_get_accels_for_action (GtkApplication *application,
                                                                  const gchar *detailed_action_name);
extern
gchar ** gtk_application_get_actions_for_accel (GtkApplication *application,
                                                                  const gchar *accel);
extern
void gtk_application_set_accels_for_action (GtkApplication *application,
                                                                  const gchar *detailed_action_name,
                                                                  const gchar * const *accels);
extern
gboolean gtk_application_prefers_app_menu (GtkApplication *application);
extern
GMenu * gtk_application_get_menu_by_id (GtkApplication *application,
                                                                  const gchar *id);
typedef struct _GtkContainer GtkContainer;
typedef struct _GtkContainerPrivate GtkContainerPrivate;
typedef struct _GtkContainerClass GtkContainerClass;
struct _GtkContainer
{
  GtkWidget widget;
  GtkContainerPrivate *priv;
};
struct _GtkContainerClass
{
  GtkWidgetClass parent_class;
  void (*add) (GtkContainer *container,
     GtkWidget *widget);
  void (*remove) (GtkContainer *container,
     GtkWidget *widget);
  void (*check_resize) (GtkContainer *container);
  void (*forall) (GtkContainer *container,
     gboolean include_internals,
     GtkCallback callback,
     gpointer callback_data);
  void (*set_focus_child) (GtkContainer *container,
     GtkWidget *child);
  GType (*child_type) (GtkContainer *container);
  gchar* (*composite_name) (GtkContainer *container,
     GtkWidget *child);
  void (*set_child_property) (GtkContainer *container,
     GtkWidget *child,
     guint property_id,
     const GValue *value,
     GParamSpec *pspec);
  void (*get_child_property) (GtkContainer *container,
                                 GtkWidget *child,
     guint property_id,
     GValue *value,
     GParamSpec *pspec);
  GtkWidgetPath * (*get_path_for_child) (GtkContainer *container,
                                         GtkWidget *child);
  unsigned int _handle_border_width : 1;
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
  void (*_gtk_reserved5) (void);
  void (*_gtk_reserved6) (void);
  void (*_gtk_reserved7) (void);
  void (*_gtk_reserved8) (void);
};
typedef enum
{
  GTK_RESIZE_PARENT,
  GTK_RESIZE_QUEUE,
  GTK_RESIZE_IMMEDIATE
} GtkResizeMode;
extern
GType gtk_container_get_type (void) __attribute__((__const__));
extern
void gtk_container_set_border_width (GtkContainer *container,
       guint border_width);
extern
guint gtk_container_get_border_width (GtkContainer *container);
extern
void gtk_container_add (GtkContainer *container,
       GtkWidget *widget);
extern
void gtk_container_remove (GtkContainer *container,
       GtkWidget *widget);
extern
void gtk_container_set_resize_mode (GtkContainer *container,
       GtkResizeMode resize_mode);
extern
GtkResizeMode gtk_container_get_resize_mode (GtkContainer *container);
extern
void gtk_container_check_resize (GtkContainer *container);
extern
void gtk_container_foreach (GtkContainer *container,
         GtkCallback callback,
         gpointer callback_data);
extern
GList* gtk_container_get_children (GtkContainer *container);
extern
void gtk_container_propagate_draw (GtkContainer *container,
      GtkWidget *child,
      cairo_t *cr);
extern
void gtk_container_set_focus_chain (GtkContainer *container,
                                         GList *focusable_widgets);
extern
gboolean gtk_container_get_focus_chain (GtkContainer *container,
      GList **focusable_widgets);
extern
void gtk_container_unset_focus_chain (GtkContainer *container);
extern
void gtk_container_set_reallocate_redraws (GtkContainer *container,
          gboolean needs_redraws);
extern
void gtk_container_set_focus_child (GtkContainer *container,
         GtkWidget *child);
extern
GtkWidget *
       gtk_container_get_focus_child (GtkContainer *container);
extern
void gtk_container_set_focus_vadjustment (GtkContainer *container,
         GtkAdjustment *adjustment);
extern
GtkAdjustment *gtk_container_get_focus_vadjustment (GtkContainer *container);
extern
void gtk_container_set_focus_hadjustment (GtkContainer *container,
         GtkAdjustment *adjustment);
extern
GtkAdjustment *gtk_container_get_focus_hadjustment (GtkContainer *container);
extern
void gtk_container_resize_children (GtkContainer *container);
extern
GType gtk_container_child_type (GtkContainer *container);
extern
void gtk_container_class_install_child_property (GtkContainerClass *cclass,
        guint property_id,
        GParamSpec *pspec);
extern
void gtk_container_class_install_child_properties (GtkContainerClass *cclass,
                                                           guint n_pspecs,
                                                           GParamSpec **pspecs);
extern
GParamSpec* gtk_container_class_find_child_property (GObjectClass *cclass,
        const gchar *property_name);
extern
GParamSpec** gtk_container_class_list_child_properties (GObjectClass *cclass,
        guint *n_properties);
extern
void gtk_container_add_with_properties (GtkContainer *container,
        GtkWidget *widget,
        const gchar *first_prop_name,
        ...) __attribute__((__sentinel__));
extern
void gtk_container_child_set (GtkContainer *container,
        GtkWidget *child,
        const gchar *first_prop_name,
        ...) __attribute__((__sentinel__));
extern
void gtk_container_child_get (GtkContainer *container,
        GtkWidget *child,
        const gchar *first_prop_name,
        ...) __attribute__((__sentinel__));
extern
void gtk_container_child_set_valist (GtkContainer *container,
        GtkWidget *child,
        const gchar *first_property_name,
        va_list var_args);
extern
void gtk_container_child_get_valist (GtkContainer *container,
        GtkWidget *child,
        const gchar *first_property_name,
        va_list var_args);
extern
void gtk_container_child_set_property (GtkContainer *container,
        GtkWidget *child,
        const gchar *property_name,
        const GValue *value);
extern
void gtk_container_child_get_property (GtkContainer *container,
        GtkWidget *child,
        const gchar *property_name,
                                                  GValue *value);
extern
void gtk_container_child_notify (GtkContainer *container,
                                 GtkWidget *child,
                                 const gchar *child_property);
extern
void gtk_container_child_notify_by_pspec (GtkContainer *container,
                                          GtkWidget *child,
                                          GParamSpec *pspec);
extern
void gtk_container_forall (GtkContainer *container,
           GtkCallback callback,
           gpointer callback_data);
extern
void gtk_container_class_handle_border_width (GtkContainerClass *klass);
extern
GtkWidgetPath * gtk_container_get_path_for_child (GtkContainer *container,
                                                  GtkWidget *child);
typedef struct _GtkBin GtkBin;
typedef struct _GtkBinPrivate GtkBinPrivate;
typedef struct _GtkBinClass GtkBinClass;
struct _GtkBin
{
  GtkContainer container;
  GtkBinPrivate *priv;
};
struct _GtkBinClass
{
  GtkContainerClass parent_class;
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_bin_get_type (void) __attribute__((__const__));
extern
GtkWidget *gtk_bin_get_child (GtkBin *bin);
void _gtk_bin_set_child (GtkBin *bin,
                               GtkWidget *widget);
typedef struct _GtkWindowPrivate GtkWindowPrivate;
typedef struct _GtkWindowClass GtkWindowClass;
typedef struct _GtkWindowGeometryInfo GtkWindowGeometryInfo;
typedef struct _GtkWindowGroup GtkWindowGroup;
typedef struct _GtkWindowGroupClass GtkWindowGroupClass;
typedef struct _GtkWindowGroupPrivate GtkWindowGroupPrivate;
struct _GtkWindow
{
  GtkBin bin;
  GtkWindowPrivate *priv;
};
struct _GtkWindowClass
{
  GtkBinClass parent_class;
  void (* set_focus) (GtkWindow *window,
                            GtkWidget *focus);
  void (* activate_focus) (GtkWindow *window);
  void (* activate_default) (GtkWindow *window);
  void (* keys_changed) (GtkWindow *window);
  gboolean (* enable_debugging) (GtkWindow *window,
                                 gboolean toggle);
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
};
typedef enum
{
  GTK_WINDOW_TOPLEVEL,
  GTK_WINDOW_POPUP
} GtkWindowType;
typedef enum
{
  GTK_WIN_POS_NONE,
  GTK_WIN_POS_CENTER,
  GTK_WIN_POS_MOUSE,
  GTK_WIN_POS_CENTER_ALWAYS,
  GTK_WIN_POS_CENTER_ON_PARENT
} GtkWindowPosition;
extern
GType gtk_window_get_type (void) __attribute__((__const__));
extern
GtkWidget* gtk_window_new (GtkWindowType type);
extern
void gtk_window_set_title (GtkWindow *window,
      const gchar *title);
extern
const gchar * gtk_window_get_title (GtkWindow *window);
extern
void gtk_window_set_wmclass (GtkWindow *window,
      const gchar *wmclass_name,
      const gchar *wmclass_class);
extern
void gtk_window_set_role (GtkWindow *window,
                                                const gchar *role);
extern
void gtk_window_set_startup_id (GtkWindow *window,
                                                const gchar *startup_id);
extern
const gchar * gtk_window_get_role (GtkWindow *window);
extern
void gtk_window_add_accel_group (GtkWindow *window,
      GtkAccelGroup *accel_group);
extern
void gtk_window_remove_accel_group (GtkWindow *window,
      GtkAccelGroup *accel_group);
extern
void gtk_window_set_position (GtkWindow *window,
      GtkWindowPosition position);
extern
gboolean gtk_window_activate_focus (GtkWindow *window);
extern
void gtk_window_set_focus (GtkWindow *window,
      GtkWidget *focus);
extern
GtkWidget *gtk_window_get_focus (GtkWindow *window);
extern
void gtk_window_set_default (GtkWindow *window,
      GtkWidget *default_widget);
extern
GtkWidget *gtk_window_get_default_widget (GtkWindow *window);
extern
gboolean gtk_window_activate_default (GtkWindow *window);
extern
void gtk_window_set_transient_for (GtkWindow *window,
      GtkWindow *parent);
extern
GtkWindow *gtk_window_get_transient_for (GtkWindow *window);
extern
void gtk_window_set_attached_to (GtkWindow *window,
                                                GtkWidget *attach_widget);
extern
GtkWidget *gtk_window_get_attached_to (GtkWindow *window);
extern
void gtk_window_set_opacity (GtkWindow *window,
      gdouble opacity);
extern
gdouble gtk_window_get_opacity (GtkWindow *window);
extern
void gtk_window_set_type_hint (GtkWindow *window,
      GdkWindowTypeHint hint);
extern
GdkWindowTypeHint gtk_window_get_type_hint (GtkWindow *window);
extern
void gtk_window_set_skip_taskbar_hint (GtkWindow *window,
                                                gboolean setting);
extern
gboolean gtk_window_get_skip_taskbar_hint (GtkWindow *window);
extern
void gtk_window_set_skip_pager_hint (GtkWindow *window,
                                                gboolean setting);
extern
gboolean gtk_window_get_skip_pager_hint (GtkWindow *window);
extern
void gtk_window_set_urgency_hint (GtkWindow *window,
                                                gboolean setting);
extern
gboolean gtk_window_get_urgency_hint (GtkWindow *window);
extern
void gtk_window_set_accept_focus (GtkWindow *window,
                                                gboolean setting);
extern
gboolean gtk_window_get_accept_focus (GtkWindow *window);
extern
void gtk_window_set_focus_on_map (GtkWindow *window,
                                                gboolean setting);
extern
gboolean gtk_window_get_focus_on_map (GtkWindow *window);
extern
void gtk_window_set_destroy_with_parent (GtkWindow *window,
                                                gboolean setting);
extern
gboolean gtk_window_get_destroy_with_parent (GtkWindow *window);
extern
void gtk_window_set_hide_titlebar_when_maximized (GtkWindow *window,
                                                        gboolean setting);
extern
gboolean gtk_window_get_hide_titlebar_when_maximized (GtkWindow *window);
extern
void gtk_window_set_mnemonics_visible (GtkWindow *window,
                                                gboolean setting);
extern
gboolean gtk_window_get_mnemonics_visible (GtkWindow *window);
extern
void gtk_window_set_focus_visible (GtkWindow *window,
                                                gboolean setting);
extern
gboolean gtk_window_get_focus_visible (GtkWindow *window);
extern
void gtk_window_set_resizable (GtkWindow *window,
                                                gboolean resizable);
extern
gboolean gtk_window_get_resizable (GtkWindow *window);
extern
void gtk_window_set_gravity (GtkWindow *window,
                                                GdkGravity gravity);
extern
GdkGravity gtk_window_get_gravity (GtkWindow *window);
extern
void gtk_window_set_geometry_hints (GtkWindow *window,
      GtkWidget *geometry_widget,
      GdkGeometry *geometry,
      GdkWindowHints geom_mask);
extern
void gtk_window_set_screen (GtkWindow *window,
      GdkScreen *screen);
extern
GdkScreen* gtk_window_get_screen (GtkWindow *window);
extern
gboolean gtk_window_is_active (GtkWindow *window);
extern
gboolean gtk_window_has_toplevel_focus (GtkWindow *window);
extern
void gtk_window_set_decorated (GtkWindow *window,
                                                gboolean setting);
extern
gboolean gtk_window_get_decorated (GtkWindow *window);
extern
void gtk_window_set_deletable (GtkWindow *window,
                                                gboolean setting);
extern
gboolean gtk_window_get_deletable (GtkWindow *window);
extern
void gtk_window_set_icon_list (GtkWindow *window,
                                                    GList *list);
extern
GList* gtk_window_get_icon_list (GtkWindow *window);
extern
void gtk_window_set_icon (GtkWindow *window,
                                                    GdkPixbuf *icon);
extern
void gtk_window_set_icon_name (GtkWindow *window,
          const gchar *name);
extern
gboolean gtk_window_set_icon_from_file (GtkWindow *window,
          const gchar *filename,
          GError **err);
extern
GdkPixbuf* gtk_window_get_icon (GtkWindow *window);
extern
const gchar * gtk_window_get_icon_name (GtkWindow *window);
extern
void gtk_window_set_default_icon_list (GList *list);
extern
GList* gtk_window_get_default_icon_list (void);
extern
void gtk_window_set_default_icon (GdkPixbuf *icon);
extern
void gtk_window_set_default_icon_name (const gchar *name);
extern
const gchar * gtk_window_get_default_icon_name (void);
extern
gboolean gtk_window_set_default_icon_from_file (const gchar *filename,
          GError **err);
extern
void gtk_window_set_auto_startup_notification (gboolean setting);
extern
void gtk_window_set_modal (GtkWindow *window,
          gboolean modal);
extern
gboolean gtk_window_get_modal (GtkWindow *window);
extern
GList* gtk_window_list_toplevels (void);
extern
void gtk_window_set_has_user_ref_count (GtkWindow *window,
                                              gboolean setting);
extern
void gtk_window_add_mnemonic (GtkWindow *window,
        guint keyval,
        GtkWidget *target);
extern
void gtk_window_remove_mnemonic (GtkWindow *window,
        guint keyval,
        GtkWidget *target);
extern
gboolean gtk_window_mnemonic_activate (GtkWindow *window,
        guint keyval,
        GdkModifierType modifier);
extern
void gtk_window_set_mnemonic_modifier (GtkWindow *window,
        GdkModifierType modifier);
extern
GdkModifierType gtk_window_get_mnemonic_modifier (GtkWindow *window);
extern
gboolean gtk_window_activate_key (GtkWindow *window,
        GdkEventKey *event);
extern
gboolean gtk_window_propagate_key_event (GtkWindow *window,
        GdkEventKey *event);
extern
void gtk_window_present (GtkWindow *window);
extern
void gtk_window_present_with_time (GtkWindow *window,
            guint32 timestamp);
extern
void gtk_window_iconify (GtkWindow *window);
extern
void gtk_window_deiconify (GtkWindow *window);
extern
void gtk_window_stick (GtkWindow *window);
extern
void gtk_window_unstick (GtkWindow *window);
extern
void gtk_window_maximize (GtkWindow *window);
extern
void gtk_window_unmaximize (GtkWindow *window);
extern
void gtk_window_fullscreen (GtkWindow *window);
extern
void gtk_window_unfullscreen (GtkWindow *window);
extern
void gtk_window_fullscreen_on_monitor(GtkWindow *window,
                                          GdkScreen *screen,
                                          gint monitor);
extern
void gtk_window_close (GtkWindow *window);
extern
void gtk_window_set_keep_above (GtkWindow *window, gboolean setting);
extern
void gtk_window_set_keep_below (GtkWindow *window, gboolean setting);
extern
void gtk_window_begin_resize_drag (GtkWindow *window,
                                   GdkWindowEdge edge,
                                   gint button,
                                   gint root_x,
                                   gint root_y,
                                   guint32 timestamp);
extern
void gtk_window_begin_move_drag (GtkWindow *window,
                                   gint button,
                                   gint root_x,
                                   gint root_y,
                                   guint32 timestamp);
extern
void gtk_window_set_default_size (GtkWindow *window,
                                      gint width,
                                      gint height);
extern
void gtk_window_get_default_size (GtkWindow *window,
                                      gint *width,
                                      gint *height);
extern
void gtk_window_resize (GtkWindow *window,
                                      gint width,
                                      gint height);
extern
void gtk_window_get_size (GtkWindow *window,
                                      gint *width,
                                      gint *height);
extern
void gtk_window_move (GtkWindow *window,
                                      gint x,
                                      gint y);
extern
void gtk_window_get_position (GtkWindow *window,
                                      gint *root_x,
                                      gint *root_y);
extern
gboolean gtk_window_parse_geometry (GtkWindow *window,
                                      const gchar *geometry);
extern
void gtk_window_set_default_geometry (GtkWindow *window,
                                      gint width,
                                      gint height);
extern
void gtk_window_resize_to_geometry (GtkWindow *window,
                                      gint width,
                                      gint height);
extern
GtkWindowGroup *gtk_window_get_group (GtkWindow *window);
extern
gboolean gtk_window_has_group (GtkWindow *window);
extern
void gtk_window_reshow_with_initial_size (GtkWindow *window);
extern
GtkWindowType gtk_window_get_window_type (GtkWindow *window);
extern
GtkApplication *gtk_window_get_application (GtkWindow *window);
extern
void gtk_window_set_application (GtkWindow *window,
                                                 GtkApplication *application);
extern
void gtk_window_set_has_resize_grip (GtkWindow *window,
                                            gboolean value);
extern
gboolean gtk_window_get_has_resize_grip (GtkWindow *window);
extern
gboolean gtk_window_resize_grip_is_visible (GtkWindow *window);
extern
gboolean gtk_window_get_resize_grip_area (GtkWindow *window,
                                            GdkRectangle *rect);
extern
void gtk_window_set_titlebar (GtkWindow *window,
                                            GtkWidget *titlebar);
extern
GtkWidget *gtk_window_get_titlebar (GtkWindow *window);
extern
gboolean gtk_window_is_maximized (GtkWindow *window);
extern
void gtk_window_set_interactive_debugging (gboolean enable);
typedef enum
{
  GTK_DIALOG_MODAL = 1 << 0,
  GTK_DIALOG_DESTROY_WITH_PARENT = 1 << 1,
  GTK_DIALOG_USE_HEADER_BAR = 1 << 2
} GtkDialogFlags;
typedef enum
{
  GTK_RESPONSE_NONE = -1,
  GTK_RESPONSE_REJECT = -2,
  GTK_RESPONSE_ACCEPT = -3,
  GTK_RESPONSE_DELETE_EVENT = -4,
  GTK_RESPONSE_OK = -5,
  GTK_RESPONSE_CANCEL = -6,
  GTK_RESPONSE_CLOSE = -7,
  GTK_RESPONSE_YES = -8,
  GTK_RESPONSE_NO = -9,
  GTK_RESPONSE_APPLY = -10,
  GTK_RESPONSE_HELP = -11
} GtkResponseType;
typedef struct _GtkDialog GtkDialog;
typedef struct _GtkDialogPrivate GtkDialogPrivate;
typedef struct _GtkDialogClass GtkDialogClass;
struct _GtkDialog
{
  GtkWindow window;
  GtkDialogPrivate *priv;
};
struct _GtkDialogClass
{
  GtkWindowClass parent_class;
  void (* response) (GtkDialog *dialog, gint response_id);
  void (* close) (GtkDialog *dialog);
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_dialog_get_type (void) __attribute__((__const__));
extern
GtkWidget* gtk_dialog_new (void);
extern
GtkWidget* gtk_dialog_new_with_buttons (const gchar *title,
                                        GtkWindow *parent,
                                        GtkDialogFlags flags,
                                        const gchar *first_button_text,
                                        ...) __attribute__((__sentinel__));
extern
void gtk_dialog_add_action_widget (GtkDialog *dialog,
                                         GtkWidget *child,
                                         gint response_id);
extern
GtkWidget* gtk_dialog_add_button (GtkDialog *dialog,
                                         const gchar *button_text,
                                         gint response_id);
extern
void gtk_dialog_add_buttons (GtkDialog *dialog,
                                         const gchar *first_button_text,
                                         ...) __attribute__((__sentinel__));
extern
void gtk_dialog_set_response_sensitive (GtkDialog *dialog,
                                        gint response_id,
                                        gboolean setting);
extern
void gtk_dialog_set_default_response (GtkDialog *dialog,
                                        gint response_id);
extern
GtkWidget* gtk_dialog_get_widget_for_response (GtkDialog *dialog,
                                               gint response_id);
extern
gint gtk_dialog_get_response_for_widget (GtkDialog *dialog,
                                         GtkWidget *widget);
extern
gboolean gtk_alternative_dialog_button_order (GdkScreen *screen);
extern
void gtk_dialog_set_alternative_button_order (GtkDialog *dialog,
                                                  gint first_response_id,
                                                  ...);
extern
void gtk_dialog_set_alternative_button_order_from_array (GtkDialog *dialog,
                                                             gint n_params,
                                                             gint *new_order);
extern
void gtk_dialog_response (GtkDialog *dialog,
                                    gint response_id);
extern
gint gtk_dialog_run (GtkDialog *dialog);
extern
GtkWidget * gtk_dialog_get_action_area (GtkDialog *dialog);
extern
GtkWidget * gtk_dialog_get_content_area (GtkDialog *dialog);
extern
GtkWidget * gtk_dialog_get_header_bar (GtkDialog *dialog);
typedef struct _GtkAboutDialog GtkAboutDialog;
typedef struct _GtkAboutDialogClass GtkAboutDialogClass;
typedef struct _GtkAboutDialogPrivate GtkAboutDialogPrivate;
typedef enum {
  GTK_LICENSE_UNKNOWN,
  GTK_LICENSE_CUSTOM,
  GTK_LICENSE_GPL_2_0,
  GTK_LICENSE_GPL_3_0,
  GTK_LICENSE_LGPL_2_1,
  GTK_LICENSE_LGPL_3_0,
  GTK_LICENSE_BSD,
  GTK_LICENSE_MIT_X11,
  GTK_LICENSE_ARTISTIC,
  GTK_LICENSE_GPL_2_0_ONLY,
  GTK_LICENSE_GPL_3_0_ONLY,
  GTK_LICENSE_LGPL_2_1_ONLY,
  GTK_LICENSE_LGPL_3_0_ONLY
} GtkLicense;
struct _GtkAboutDialog
{
  GtkDialog parent_instance;
  GtkAboutDialogPrivate *priv;
};
struct _GtkAboutDialogClass
{
  GtkDialogClass parent_class;
  gboolean (*activate_link) (GtkAboutDialog *dialog,
                             const gchar *uri);
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_about_dialog_get_type (void) __attribute__((__const__));
extern
GtkWidget *gtk_about_dialog_new (void);
extern
void gtk_show_about_dialog (GtkWindow *parent,
                                                                const gchar *first_property_name,
                                                                ...) __attribute__((__sentinel__));
extern
const gchar * gtk_about_dialog_get_program_name (GtkAboutDialog *about);
extern
void gtk_about_dialog_set_program_name (GtkAboutDialog *about,
                                                                const gchar *name);
extern
const gchar * gtk_about_dialog_get_version (GtkAboutDialog *about);
extern
void gtk_about_dialog_set_version (GtkAboutDialog *about,
                                                                const gchar *version);
extern
const gchar * gtk_about_dialog_get_copyright (GtkAboutDialog *about);
extern
void gtk_about_dialog_set_copyright (GtkAboutDialog *about,
                                                                const gchar *copyright);
extern
const gchar * gtk_about_dialog_get_comments (GtkAboutDialog *about);
extern
void gtk_about_dialog_set_comments (GtkAboutDialog *about,
                                                                const gchar *comments);
extern
const gchar * gtk_about_dialog_get_license (GtkAboutDialog *about);
extern
void gtk_about_dialog_set_license (GtkAboutDialog *about,
                                                                const gchar *license);
extern
void gtk_about_dialog_set_license_type (GtkAboutDialog *about,
                                                                GtkLicense license_type);
extern
GtkLicense gtk_about_dialog_get_license_type (GtkAboutDialog *about);
extern
gboolean gtk_about_dialog_get_wrap_license (GtkAboutDialog *about);
extern
void gtk_about_dialog_set_wrap_license (GtkAboutDialog *about,
                                                                gboolean wrap_license);
extern
const gchar * gtk_about_dialog_get_website (GtkAboutDialog *about);
extern
void gtk_about_dialog_set_website (GtkAboutDialog *about,
                                                                const gchar *website);
extern
const gchar * gtk_about_dialog_get_website_label (GtkAboutDialog *about);
extern
void gtk_about_dialog_set_website_label (GtkAboutDialog *about,
                                                                const gchar *website_label);
extern
const gchar* const * gtk_about_dialog_get_authors (GtkAboutDialog *about);
extern
void gtk_about_dialog_set_authors (GtkAboutDialog *about,
                                                                const gchar **authors);
extern
const gchar* const * gtk_about_dialog_get_documenters (GtkAboutDialog *about);
extern
void gtk_about_dialog_set_documenters (GtkAboutDialog *about,
                                                                const gchar **documenters);
extern
const gchar* const * gtk_about_dialog_get_artists (GtkAboutDialog *about);
extern
void gtk_about_dialog_set_artists (GtkAboutDialog *about,
                                                                const gchar **artists);
extern
const gchar * gtk_about_dialog_get_translator_credits (GtkAboutDialog *about);
extern
void gtk_about_dialog_set_translator_credits (GtkAboutDialog *about,
                                                                const gchar *translator_credits);
extern
GdkPixbuf *gtk_about_dialog_get_logo (GtkAboutDialog *about);
extern
void gtk_about_dialog_set_logo (GtkAboutDialog *about,
                                                                GdkPixbuf *logo);
extern
const gchar * gtk_about_dialog_get_logo_icon_name (GtkAboutDialog *about);
extern
void gtk_about_dialog_set_logo_icon_name (GtkAboutDialog *about,
                                                                const gchar *icon_name);
extern
void gtk_about_dialog_add_credit_section (GtkAboutDialog *about,
                                                                const gchar *section_name,
                                                                const gchar **people);
typedef struct _GtkMisc GtkMisc;
typedef struct _GtkMiscPrivate GtkMiscPrivate;
typedef struct _GtkMiscClass GtkMiscClass;
struct _GtkMisc
{
  GtkWidget widget;
  GtkMiscPrivate *priv;
};
struct _GtkMiscClass
{
  GtkWidgetClass parent_class;
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_misc_get_type (void) __attribute__((__const__));
extern
void gtk_misc_set_alignment (GtkMisc *misc,
    gfloat xalign,
    gfloat yalign);
extern
void gtk_misc_get_alignment (GtkMisc *misc,
    gfloat *xalign,
    gfloat *yalign);
extern
void gtk_misc_set_padding (GtkMisc *misc,
    gint xpad,
    gint ypad);
extern
void gtk_misc_get_padding (GtkMisc *misc,
    gint *xpad,
    gint *ypad);
void _gtk_misc_get_padding_and_border (GtkMisc *misc,
      GtkBorder *border);
typedef struct _GtkMenuShell GtkMenuShell;
typedef struct _GtkMenuShellClass GtkMenuShellClass;
typedef struct _GtkMenuShellPrivate GtkMenuShellPrivate;
struct _GtkMenuShell
{
  GtkContainer container;
  GtkMenuShellPrivate *priv;
};
struct _GtkMenuShellClass
{
  GtkContainerClass parent_class;
  guint submenu_placement : 1;
  void (*deactivate) (GtkMenuShell *menu_shell);
  void (*selection_done) (GtkMenuShell *menu_shell);
  void (*move_current) (GtkMenuShell *menu_shell,
                                GtkMenuDirectionType direction);
  void (*activate_current) (GtkMenuShell *menu_shell,
                                gboolean force_hide);
  void (*cancel) (GtkMenuShell *menu_shell);
  void (*select_item) (GtkMenuShell *menu_shell,
                                GtkWidget *menu_item);
  void (*insert) (GtkMenuShell *menu_shell,
                                GtkWidget *child,
                                gint position);
  gint (*get_popup_delay) (GtkMenuShell *menu_shell);
  gboolean (*move_selected) (GtkMenuShell *menu_shell,
                                gint distance);
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_menu_shell_get_type (void) __attribute__((__const__));
extern
void gtk_menu_shell_append (GtkMenuShell *menu_shell,
                                        GtkWidget *child);
extern
void gtk_menu_shell_prepend (GtkMenuShell *menu_shell,
                                        GtkWidget *child);
extern
void gtk_menu_shell_insert (GtkMenuShell *menu_shell,
                                        GtkWidget *child,
                                        gint position);
extern
void gtk_menu_shell_deactivate (GtkMenuShell *menu_shell);
extern
void gtk_menu_shell_select_item (GtkMenuShell *menu_shell,
                                        GtkWidget *menu_item);
extern
void gtk_menu_shell_deselect (GtkMenuShell *menu_shell);
extern
void gtk_menu_shell_activate_item (GtkMenuShell *menu_shell,
                                        GtkWidget *menu_item,
                                        gboolean force_deactivate);
extern
void gtk_menu_shell_select_first (GtkMenuShell *menu_shell,
                                        gboolean search_sensitive);
extern
void gtk_menu_shell_cancel (GtkMenuShell *menu_shell);
extern
gboolean gtk_menu_shell_get_take_focus (GtkMenuShell *menu_shell);
extern
void gtk_menu_shell_set_take_focus (GtkMenuShell *menu_shell,
                                        gboolean take_focus);
extern
GtkWidget *gtk_menu_shell_get_selected_item (GtkMenuShell *menu_shell);
extern
GtkWidget *gtk_menu_shell_get_parent_shell (GtkMenuShell *menu_shell);
extern
void gtk_menu_shell_bind_model (GtkMenuShell *menu_shell,
                                        GMenuModel *model,
                                        const gchar *action_namespace,
                                        gboolean with_separators);
typedef struct _GtkMenu GtkMenu;
typedef struct _GtkMenuClass GtkMenuClass;
typedef struct _GtkMenuPrivate GtkMenuPrivate;
typedef enum
{
  GTK_ARROWS_BOTH,
  GTK_ARROWS_START,
  GTK_ARROWS_END
} GtkArrowPlacement;
typedef void (*GtkMenuPositionFunc) (GtkMenu *menu,
         gint *x,
         gint *y,
         gboolean *push_in,
         gpointer user_data);
typedef void (*GtkMenuDetachFunc) (GtkWidget *attach_widget,
         GtkMenu *menu);
struct _GtkMenu
{
  GtkMenuShell menu_shell;
  GtkMenuPrivate *priv;
};
struct _GtkMenuClass
{
  GtkMenuShellClass parent_class;
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_menu_get_type (void) __attribute__((__const__));
extern
GtkWidget* gtk_menu_new (void);
extern
GtkWidget* gtk_menu_new_from_model (GMenuModel *model);
extern
void gtk_menu_popup (GtkMenu *menu,
        GtkWidget *parent_menu_shell,
        GtkWidget *parent_menu_item,
        GtkMenuPositionFunc func,
        gpointer data,
        guint button,
        guint32 activate_time);
extern
void gtk_menu_popup_for_device (GtkMenu *menu,
                                           GdkDevice *device,
                                           GtkWidget *parent_menu_shell,
                                           GtkWidget *parent_menu_item,
                                           GtkMenuPositionFunc func,
                                           gpointer data,
                                           GDestroyNotify destroy,
                                           guint button,
                                           guint32 activate_time);
extern
void gtk_menu_reposition (GtkMenu *menu);
extern
void gtk_menu_popdown (GtkMenu *menu);
extern
GtkWidget* gtk_menu_get_active (GtkMenu *menu);
extern
void gtk_menu_set_active (GtkMenu *menu,
        guint index);
extern
void gtk_menu_set_accel_group (GtkMenu *menu,
        GtkAccelGroup *accel_group);
extern
GtkAccelGroup* gtk_menu_get_accel_group (GtkMenu *menu);
extern
void gtk_menu_set_accel_path (GtkMenu *menu,
        const gchar *accel_path);
extern
const gchar* gtk_menu_get_accel_path (GtkMenu *menu);
extern
void gtk_menu_attach_to_widget (GtkMenu *menu,
        GtkWidget *attach_widget,
        GtkMenuDetachFunc detacher);
extern
void gtk_menu_detach (GtkMenu *menu);
extern
GtkWidget* gtk_menu_get_attach_widget (GtkMenu *menu);
extern
void gtk_menu_set_tearoff_state (GtkMenu *menu,
                                           gboolean torn_off);
extern
gboolean gtk_menu_get_tearoff_state (GtkMenu *menu);
extern
void gtk_menu_set_title (GtkMenu *menu,
                                           const gchar *title);
extern
const gchar * gtk_menu_get_title (GtkMenu *menu);
extern
void gtk_menu_reorder_child (GtkMenu *menu,
                                           GtkWidget *child,
                                           gint position);
extern
void gtk_menu_set_screen (GtkMenu *menu,
        GdkScreen *screen);
extern
void gtk_menu_attach (GtkMenu *menu,
                                           GtkWidget *child,
                                           guint left_attach,
                                           guint right_attach,
                                           guint top_attach,
                                           guint bottom_attach);
extern
void gtk_menu_set_monitor (GtkMenu *menu,
                                           gint monitor_num);
extern
gint gtk_menu_get_monitor (GtkMenu *menu);
extern
GList* gtk_menu_get_for_attach_widget (GtkWidget *widget);
extern
void gtk_menu_set_reserve_toggle_size (GtkMenu *menu,
                                          gboolean reserve_toggle_size);
extern
gboolean gtk_menu_get_reserve_toggle_size (GtkMenu *menu);
typedef struct _GtkLabel GtkLabel;
typedef struct _GtkLabelPrivate GtkLabelPrivate;
typedef struct _GtkLabelClass GtkLabelClass;
typedef struct _GtkLabelSelectionInfo GtkLabelSelectionInfo;
struct _GtkLabel
{
  GtkMisc misc;
  GtkLabelPrivate *priv;
};
struct _GtkLabelClass
{
  GtkMiscClass parent_class;
  void (* move_cursor) (GtkLabel *label,
       GtkMovementStep step,
       gint count,
       gboolean extend_selection);
  void (* copy_clipboard) (GtkLabel *label);
  void (* populate_popup) (GtkLabel *label,
                             GtkMenu *menu);
  gboolean (*activate_link) (GtkLabel *label,
                             const gchar *uri);
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
  void (*_gtk_reserved5) (void);
  void (*_gtk_reserved6) (void);
  void (*_gtk_reserved7) (void);
  void (*_gtk_reserved8) (void);
};
extern
GType gtk_label_get_type (void) __attribute__((__const__));
extern
GtkWidget* gtk_label_new (const gchar *str);
extern
GtkWidget* gtk_label_new_with_mnemonic (const gchar *str);
extern
void gtk_label_set_text (GtkLabel *label,
         const gchar *str);
extern
const gchar* gtk_label_get_text (GtkLabel *label);
extern
void gtk_label_set_attributes (GtkLabel *label,
         PangoAttrList *attrs);
extern
PangoAttrList *gtk_label_get_attributes (GtkLabel *label);
extern
void gtk_label_set_label (GtkLabel *label,
         const gchar *str);
extern
const gchar * gtk_label_get_label (GtkLabel *label);
extern
void gtk_label_set_markup (GtkLabel *label,
         const gchar *str);
extern
void gtk_label_set_use_markup (GtkLabel *label,
         gboolean setting);
extern
gboolean gtk_label_get_use_markup (GtkLabel *label);
extern
void gtk_label_set_use_underline (GtkLabel *label,
         gboolean setting);
extern
gboolean gtk_label_get_use_underline (GtkLabel *label);
extern
void gtk_label_set_markup_with_mnemonic (GtkLabel *label,
         const gchar *str);
extern
guint gtk_label_get_mnemonic_keyval (GtkLabel *label);
extern
void gtk_label_set_mnemonic_widget (GtkLabel *label,
         GtkWidget *widget);
extern
GtkWidget *gtk_label_get_mnemonic_widget (GtkLabel *label);
extern
void gtk_label_set_text_with_mnemonic (GtkLabel *label,
         const gchar *str);
extern
void gtk_label_set_justify (GtkLabel *label,
         GtkJustification jtype);
extern
GtkJustification gtk_label_get_justify (GtkLabel *label);
extern
void gtk_label_set_ellipsize (GtkLabel *label,
         PangoEllipsizeMode mode);
extern
PangoEllipsizeMode gtk_label_get_ellipsize (GtkLabel *label);
extern
void gtk_label_set_width_chars (GtkLabel *label,
         gint n_chars);
extern
gint gtk_label_get_width_chars (GtkLabel *label);
extern
void gtk_label_set_max_width_chars (GtkLabel *label,
           gint n_chars);
extern
gint gtk_label_get_max_width_chars (GtkLabel *label);
extern
void gtk_label_set_lines (GtkLabel *label,
                                                   gint lines);
extern
gint gtk_label_get_lines (GtkLabel *label);
extern
void gtk_label_set_pattern (GtkLabel *label,
         const gchar *pattern);
extern
void gtk_label_set_line_wrap (GtkLabel *label,
         gboolean wrap);
extern
gboolean gtk_label_get_line_wrap (GtkLabel *label);
extern
void gtk_label_set_line_wrap_mode (GtkLabel *label,
         PangoWrapMode wrap_mode);
extern
PangoWrapMode gtk_label_get_line_wrap_mode (GtkLabel *label);
extern
void gtk_label_set_selectable (GtkLabel *label,
         gboolean setting);
extern
gboolean gtk_label_get_selectable (GtkLabel *label);
extern
void gtk_label_set_angle (GtkLabel *label,
         gdouble angle);
extern
gdouble gtk_label_get_angle (GtkLabel *label);
extern
void gtk_label_select_region (GtkLabel *label,
         gint start_offset,
         gint end_offset);
extern
gboolean gtk_label_get_selection_bounds (GtkLabel *label,
                                                   gint *start,
                                                   gint *end);
extern
PangoLayout *gtk_label_get_layout (GtkLabel *label);
extern
void gtk_label_get_layout_offsets (GtkLabel *label,
                                           gint *x,
                                           gint *y);
extern
void gtk_label_set_single_line_mode (GtkLabel *label,
                                              gboolean single_line_mode);
extern
gboolean gtk_label_get_single_line_mode (GtkLabel *label);
extern
const gchar *gtk_label_get_current_uri (GtkLabel *label);
extern
void gtk_label_set_track_visited_links (GtkLabel *label,
                                                 gboolean track_links);
extern
gboolean gtk_label_get_track_visited_links (GtkLabel *label);
extern
void gtk_label_set_xalign (GtkLabel *label,
                                   gfloat xalign);
extern
gfloat gtk_label_get_xalign (GtkLabel *label);
extern
void gtk_label_set_yalign (GtkLabel *label,
                                   gfloat yalign);
extern
gfloat gtk_label_get_yalign (GtkLabel *label);
typedef struct _GtkAccelLabel GtkAccelLabel;
typedef struct _GtkAccelLabelClass GtkAccelLabelClass;
typedef struct _GtkAccelLabelPrivate GtkAccelLabelPrivate;
struct _GtkAccelLabel
{
  GtkLabel label;
  GtkAccelLabelPrivate *priv;
};
struct _GtkAccelLabelClass
{
  GtkLabelClass parent_class;
  gchar *signal_quote1;
  gchar *signal_quote2;
  gchar *mod_name_shift;
  gchar *mod_name_control;
  gchar *mod_name_alt;
  gchar *mod_separator;
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_accel_label_get_type (void) __attribute__((__const__));
extern
GtkWidget* gtk_accel_label_new (const gchar *string);
extern
GtkWidget* gtk_accel_label_get_accel_widget (GtkAccelLabel *accel_label);
extern
guint gtk_accel_label_get_accel_width (GtkAccelLabel *accel_label);
extern
void gtk_accel_label_set_accel_widget (GtkAccelLabel *accel_label,
           GtkWidget *accel_widget);
extern
void gtk_accel_label_set_accel_closure (GtkAccelLabel *accel_label,
           GClosure *accel_closure);
extern
gboolean gtk_accel_label_refetch (GtkAccelLabel *accel_label);
extern
void gtk_accel_label_set_accel (GtkAccelLabel *accel_label,
                                              guint accelerator_key,
                                              GdkModifierType accelerator_mods);
extern
void gtk_accel_label_get_accel (GtkAccelLabel *accel_label,
                                              guint *accelerator_key,
                                              GdkModifierType *accelerator_mods);
gchar * _gtk_accel_label_class_get_accelerator_label (GtkAccelLabelClass *klass,
        guint accelerator_key,
        GdkModifierType accelerator_mods);
typedef struct _GtkAccelMap GtkAccelMap;
typedef struct _GtkAccelMapClass GtkAccelMapClass;
typedef void (*GtkAccelMapForeach) (gpointer data,
       const gchar *accel_path,
       guint accel_key,
       GdkModifierType accel_mods,
       gboolean changed);
extern
void gtk_accel_map_add_entry (const gchar *accel_path,
      guint accel_key,
      GdkModifierType accel_mods);
extern
gboolean gtk_accel_map_lookup_entry (const gchar *accel_path,
      GtkAccelKey *key);
extern
gboolean gtk_accel_map_change_entry (const gchar *accel_path,
      guint accel_key,
      GdkModifierType accel_mods,
      gboolean replace);
extern
void gtk_accel_map_load (const gchar *file_name);
extern
void gtk_accel_map_save (const gchar *file_name);
extern
void gtk_accel_map_foreach (gpointer data,
      GtkAccelMapForeach foreach_func);
extern
void gtk_accel_map_load_fd (gint fd);
extern
void gtk_accel_map_load_scanner (GScanner *scanner);
extern
void gtk_accel_map_save_fd (gint fd);
extern
void gtk_accel_map_lock_path (const gchar *accel_path);
extern
void gtk_accel_map_unlock_path (const gchar *accel_path);
extern
void gtk_accel_map_add_filter (const gchar *filter_pattern);
extern
void gtk_accel_map_foreach_unfiltered (gpointer data,
       GtkAccelMapForeach foreach_func);
extern
GType gtk_accel_map_get_type (void) __attribute__((__const__));
extern
GtkAccelMap *gtk_accel_map_get (void);
typedef struct _GtkAccessible GtkAccessible;
typedef struct _GtkAccessiblePrivate GtkAccessiblePrivate;
typedef struct _GtkAccessibleClass GtkAccessibleClass;
struct _GtkAccessible
{
  AtkObject parent;
  GtkAccessiblePrivate *priv;
};
struct _GtkAccessibleClass
{
  AtkObjectClass parent_class;
  void (*connect_widget_destroyed) (GtkAccessible *accessible);
  void (*widget_set) (GtkAccessible *accessible);
  void (*widget_unset) (GtkAccessible *accessible);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_accessible_get_type (void) __attribute__((__const__));
extern
void gtk_accessible_set_widget (GtkAccessible *accessible,
                                                    GtkWidget *widget);
extern
GtkWidget *gtk_accessible_get_widget (GtkAccessible *accessible);
extern
void gtk_accessible_connect_widget_destroyed (GtkAccessible *accessible);
typedef struct _GtkActionableInterface GtkActionableInterface;
typedef struct _GtkActionable GtkActionable;
struct _GtkActionableInterface
{
  GTypeInterface g_iface;
  const gchar * (* get_action_name) (GtkActionable *actionable);
  void (* set_action_name) (GtkActionable *actionable,
                                                 const gchar *action_name);
  GVariant * (* get_action_target_value) (GtkActionable *actionable);
  void (* set_action_target_value) (GtkActionable *actionable,
                                                 GVariant *target_value);
};
extern
GType gtk_actionable_get_type (void) __attribute__((__const__));
extern
const gchar * gtk_actionable_get_action_name (GtkActionable *actionable);
extern
void gtk_actionable_set_action_name (GtkActionable *actionable,
                                                                         const gchar *action_name);
extern
GVariant * gtk_actionable_get_action_target_value (GtkActionable *actionable);
extern
void gtk_actionable_set_action_target_value (GtkActionable *actionable,
                                                                         GVariant *target_value);
extern
void gtk_actionable_set_action_target (GtkActionable *actionable,
                                                                         const gchar *format_string,
                                                                         ...);
extern
void gtk_actionable_set_detailed_action_name (GtkActionable *actionable,
                                                                         const gchar *detailed_action_name);
typedef struct _GtkActionBar GtkActionBar;
typedef struct _GtkActionBarPrivate GtkActionBarPrivate;
typedef struct _GtkActionBarClass GtkActionBarClass;
struct _GtkActionBar
{
  GtkBin bin;
};
struct _GtkActionBarClass
{
  GtkBinClass parent_class;
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_action_bar_get_type (void) __attribute__((__const__));
extern
GtkWidget *gtk_action_bar_new (void);
extern
GtkWidget *gtk_action_bar_get_center_widget (GtkActionBar *action_bar);
extern
void gtk_action_bar_set_center_widget (GtkActionBar *action_bar,
                                               GtkWidget *center_widget);
extern
void gtk_action_bar_pack_start (GtkActionBar *action_bar,
                                               GtkWidget *child);
extern
void gtk_action_bar_pack_end (GtkActionBar *action_bar,
                                               GtkWidget *child);
typedef struct _GtkAdjustmentPrivate GtkAdjustmentPrivate;
typedef struct _GtkAdjustmentClass GtkAdjustmentClass;
struct _GtkAdjustment
{
  GInitiallyUnowned parent_instance;
  GtkAdjustmentPrivate *priv;
};
struct _GtkAdjustmentClass
{
  GInitiallyUnownedClass parent_class;
  void (* changed) (GtkAdjustment *adjustment);
  void (* value_changed) (GtkAdjustment *adjustment);
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_adjustment_get_type (void) __attribute__((__const__));
extern
GtkAdjustment* gtk_adjustment_new (gdouble value,
                                                 gdouble lower,
                                                 gdouble upper,
                                                 gdouble step_increment,
                                                 gdouble page_increment,
                                                 gdouble page_size);
extern
void gtk_adjustment_changed (GtkAdjustment *adjustment);
extern
void gtk_adjustment_value_changed (GtkAdjustment *adjustment);
extern
void gtk_adjustment_clamp_page (GtkAdjustment *adjustment,
                                                 gdouble lower,
                                                 gdouble upper);
extern
gdouble gtk_adjustment_get_value (GtkAdjustment *adjustment);
extern
void gtk_adjustment_set_value (GtkAdjustment *adjustment,
                                                 gdouble value);
extern
gdouble gtk_adjustment_get_lower (GtkAdjustment *adjustment);
extern
void gtk_adjustment_set_lower (GtkAdjustment *adjustment,
                                                 gdouble lower);
extern
gdouble gtk_adjustment_get_upper (GtkAdjustment *adjustment);
extern
void gtk_adjustment_set_upper (GtkAdjustment *adjustment,
                                                 gdouble upper);
extern
gdouble gtk_adjustment_get_step_increment (GtkAdjustment *adjustment);
extern
void gtk_adjustment_set_step_increment (GtkAdjustment *adjustment,
                                                 gdouble step_increment);
extern
gdouble gtk_adjustment_get_page_increment (GtkAdjustment *adjustment);
extern
void gtk_adjustment_set_page_increment (GtkAdjustment *adjustment,
                                                 gdouble page_increment);
extern
gdouble gtk_adjustment_get_page_size (GtkAdjustment *adjustment);
extern
void gtk_adjustment_set_page_size (GtkAdjustment *adjustment,
                                                 gdouble page_size);
extern
void gtk_adjustment_configure (GtkAdjustment *adjustment,
                                                 gdouble value,
                                                 gdouble lower,
                                                 gdouble upper,
                                                 gdouble step_increment,
                                                 gdouble page_increment,
                                                 gdouble page_size);
extern
gdouble gtk_adjustment_get_minimum_increment (GtkAdjustment *adjustment);
typedef struct _GtkAppChooser GtkAppChooser;
extern
GType gtk_app_chooser_get_type (void) __attribute__((__const__));
extern
GAppInfo * gtk_app_chooser_get_app_info (GtkAppChooser *self);
extern
gchar * gtk_app_chooser_get_content_type (GtkAppChooser *self);
extern
void gtk_app_chooser_refresh (GtkAppChooser *self);
typedef struct _GtkAppChooserDialog GtkAppChooserDialog;
typedef struct _GtkAppChooserDialogClass GtkAppChooserDialogClass;
typedef struct _GtkAppChooserDialogPrivate GtkAppChooserDialogPrivate;
struct _GtkAppChooserDialog {
  GtkDialog parent;
  GtkAppChooserDialogPrivate *priv;
};
struct _GtkAppChooserDialogClass {
  GtkDialogClass parent_class;
  gpointer padding[16];
};
extern
GType gtk_app_chooser_dialog_get_type (void) __attribute__((__const__));
extern
GtkWidget * gtk_app_chooser_dialog_new (GtkWindow *parent,
                                                           GtkDialogFlags flags,
                                                           GFile *file);
extern
GtkWidget * gtk_app_chooser_dialog_new_for_content_type (GtkWindow *parent,
                                                           GtkDialogFlags flags,
                                                           const gchar *content_type);
extern
GtkWidget * gtk_app_chooser_dialog_get_widget (GtkAppChooserDialog *self);
extern
void gtk_app_chooser_dialog_set_heading (GtkAppChooserDialog *self,
                                                           const gchar *heading);
extern
const gchar * gtk_app_chooser_dialog_get_heading (GtkAppChooserDialog *self);
typedef struct _GtkBox GtkBox;
typedef struct _GtkBoxPrivate GtkBoxPrivate;
typedef struct _GtkBoxClass GtkBoxClass;
struct _GtkBox
{
  GtkContainer container;
  GtkBoxPrivate *priv;
};
struct _GtkBoxClass
{
  GtkContainerClass parent_class;
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_box_get_type (void) __attribute__((__const__));
extern
GtkWidget* gtk_box_new (GtkOrientation orientation,
                                         gint spacing);
extern
void gtk_box_pack_start (GtkBox *box,
                                         GtkWidget *child,
                                         gboolean expand,
                                         gboolean fill,
                                         guint padding);
extern
void gtk_box_pack_end (GtkBox *box,
                                         GtkWidget *child,
                                         gboolean expand,
                                         gboolean fill,
                                         guint padding);
extern
void gtk_box_set_homogeneous (GtkBox *box,
                                         gboolean homogeneous);
extern
gboolean gtk_box_get_homogeneous (GtkBox *box);
extern
void gtk_box_set_spacing (GtkBox *box,
                                         gint spacing);
extern
gint gtk_box_get_spacing (GtkBox *box);
extern
void gtk_box_set_baseline_position (GtkBox *box,
        GtkBaselinePosition position);
extern
GtkBaselinePosition gtk_box_get_baseline_position (GtkBox *box);
extern
void gtk_box_reorder_child (GtkBox *box,
                                         GtkWidget *child,
                                         gint position);
extern
void gtk_box_query_child_packing (GtkBox *box,
                                         GtkWidget *child,
                                         gboolean *expand,
                                         gboolean *fill,
                                         guint *padding,
                                         GtkPackType *pack_type);
extern
void gtk_box_set_child_packing (GtkBox *box,
                                         GtkWidget *child,
                                         gboolean expand,
                                         gboolean fill,
                                         guint padding,
                                         GtkPackType pack_type);
extern
void gtk_box_set_center_widget (GtkBox *box,
                                         GtkWidget *widget);
extern
GtkWidget *gtk_box_get_center_widget (GtkBox *box);
typedef struct _GtkAppChooserWidget GtkAppChooserWidget;
typedef struct _GtkAppChooserWidgetClass GtkAppChooserWidgetClass;
typedef struct _GtkAppChooserWidgetPrivate GtkAppChooserWidgetPrivate;
struct _GtkAppChooserWidget {
  GtkBox parent;
  GtkAppChooserWidgetPrivate *priv;
};
struct _GtkAppChooserWidgetClass {
  GtkBoxClass parent_class;
  void (* application_selected) (GtkAppChooserWidget *self,
                                  GAppInfo *app_info);
  void (* application_activated) (GtkAppChooserWidget *self,
                                  GAppInfo *app_info);
  void (* populate_popup) (GtkAppChooserWidget *self,
                                  GtkMenu *menu,
                                  GAppInfo *app_info);
  gpointer padding[16];
};
extern
GType gtk_app_chooser_widget_get_type (void) __attribute__((__const__));
extern
GtkWidget * gtk_app_chooser_widget_new (const gchar *content_type);
extern
void gtk_app_chooser_widget_set_show_default (GtkAppChooserWidget *self,
                                                           gboolean setting);
extern
gboolean gtk_app_chooser_widget_get_show_default (GtkAppChooserWidget *self);
extern
void gtk_app_chooser_widget_set_show_recommended (GtkAppChooserWidget *self,
                                                           gboolean setting);
extern
gboolean gtk_app_chooser_widget_get_show_recommended (GtkAppChooserWidget *self);
extern
void gtk_app_chooser_widget_set_show_fallback (GtkAppChooserWidget *self,
                                                           gboolean setting);
extern
gboolean gtk_app_chooser_widget_get_show_fallback (GtkAppChooserWidget *self);
extern
void gtk_app_chooser_widget_set_show_other (GtkAppChooserWidget *self,
                                                           gboolean setting);
extern
gboolean gtk_app_chooser_widget_get_show_other (GtkAppChooserWidget *self);
extern
void gtk_app_chooser_widget_set_show_all (GtkAppChooserWidget *self,
                                                           gboolean setting);
extern
gboolean gtk_app_chooser_widget_get_show_all (GtkAppChooserWidget *self);
extern
void gtk_app_chooser_widget_set_default_text (GtkAppChooserWidget *self,
                                                           const gchar *text);
extern
const gchar * gtk_app_chooser_widget_get_default_text (GtkAppChooserWidget *self);
typedef struct _GtkTreeIter GtkTreeIter;
typedef struct _GtkTreePath GtkTreePath;
typedef struct _GtkTreeRowReference GtkTreeRowReference;
typedef struct _GtkTreeModel GtkTreeModel;
typedef struct _GtkTreeModelIface GtkTreeModelIface;
typedef gboolean (* GtkTreeModelForeachFunc) (GtkTreeModel *model, GtkTreePath *path, GtkTreeIter *iter, gpointer data);
typedef enum
{
  GTK_TREE_MODEL_ITERS_PERSIST = 1 << 0,
  GTK_TREE_MODEL_LIST_ONLY = 1 << 1
} GtkTreeModelFlags;
struct _GtkTreeIter
{
  gint stamp;
  gpointer user_data;
  gpointer user_data2;
  gpointer user_data3;
};
struct _GtkTreeModelIface
{
  GTypeInterface g_iface;
  void (* row_changed) (GtkTreeModel *tree_model,
       GtkTreePath *path,
       GtkTreeIter *iter);
  void (* row_inserted) (GtkTreeModel *tree_model,
       GtkTreePath *path,
       GtkTreeIter *iter);
  void (* row_has_child_toggled) (GtkTreeModel *tree_model,
       GtkTreePath *path,
       GtkTreeIter *iter);
  void (* row_deleted) (GtkTreeModel *tree_model,
       GtkTreePath *path);
  void (* rows_reordered) (GtkTreeModel *tree_model,
       GtkTreePath *path,
       GtkTreeIter *iter,
       gint *new_order);
  GtkTreeModelFlags (* get_flags) (GtkTreeModel *tree_model);
  gint (* get_n_columns) (GtkTreeModel *tree_model);
  GType (* get_column_type) (GtkTreeModel *tree_model,
        gint index_);
  gboolean (* get_iter) (GtkTreeModel *tree_model,
        GtkTreeIter *iter,
        GtkTreePath *path);
  GtkTreePath *(* get_path) (GtkTreeModel *tree_model,
        GtkTreeIter *iter);
  void (* get_value) (GtkTreeModel *tree_model,
        GtkTreeIter *iter,
        gint column,
        GValue *value);
  gboolean (* iter_next) (GtkTreeModel *tree_model,
        GtkTreeIter *iter);
  gboolean (* iter_previous) (GtkTreeModel *tree_model,
        GtkTreeIter *iter);
  gboolean (* iter_children) (GtkTreeModel *tree_model,
        GtkTreeIter *iter,
        GtkTreeIter *parent);
  gboolean (* iter_has_child) (GtkTreeModel *tree_model,
        GtkTreeIter *iter);
  gint (* iter_n_children) (GtkTreeModel *tree_model,
        GtkTreeIter *iter);
  gboolean (* iter_nth_child) (GtkTreeModel *tree_model,
        GtkTreeIter *iter,
        GtkTreeIter *parent,
        gint n);
  gboolean (* iter_parent) (GtkTreeModel *tree_model,
        GtkTreeIter *iter,
        GtkTreeIter *child);
  void (* ref_node) (GtkTreeModel *tree_model,
        GtkTreeIter *iter);
  void (* unref_node) (GtkTreeModel *tree_model,
        GtkTreeIter *iter);
};
extern
GtkTreePath *gtk_tree_path_new (void);
extern
GtkTreePath *gtk_tree_path_new_from_string (const gchar *path);
extern
GtkTreePath *gtk_tree_path_new_from_indices (gint first_index,
          ...);
extern
GtkTreePath *gtk_tree_path_new_from_indicesv (gint *indices,
           gsize length);
extern
gchar *gtk_tree_path_to_string (GtkTreePath *path);
extern
GtkTreePath *gtk_tree_path_new_first (void);
extern
void gtk_tree_path_append_index (GtkTreePath *path,
          gint index_);
extern
void gtk_tree_path_prepend_index (GtkTreePath *path,
          gint index_);
extern
gint gtk_tree_path_get_depth (GtkTreePath *path);
extern
gint *gtk_tree_path_get_indices (GtkTreePath *path);
extern
gint *gtk_tree_path_get_indices_with_depth (GtkTreePath *path,
         gint *depth);
extern
void gtk_tree_path_free (GtkTreePath *path);
extern
GtkTreePath *gtk_tree_path_copy (const GtkTreePath *path);
extern
GType gtk_tree_path_get_type (void) __attribute__((__const__));
extern
gint gtk_tree_path_compare (const GtkTreePath *a,
          const GtkTreePath *b);
extern
void gtk_tree_path_next (GtkTreePath *path);
extern
gboolean gtk_tree_path_prev (GtkTreePath *path);
extern
gboolean gtk_tree_path_up (GtkTreePath *path);
extern
void gtk_tree_path_down (GtkTreePath *path);
extern
gboolean gtk_tree_path_is_ancestor (GtkTreePath *path,
                                             GtkTreePath *descendant);
extern
gboolean gtk_tree_path_is_descendant (GtkTreePath *path,
                                             GtkTreePath *ancestor);
extern
GType gtk_tree_row_reference_get_type (void) __attribute__((__const__));
extern
GtkTreeRowReference *gtk_tree_row_reference_new (GtkTreeModel *model,
             GtkTreePath *path);
extern
GtkTreeRowReference *gtk_tree_row_reference_new_proxy (GObject *proxy,
             GtkTreeModel *model,
             GtkTreePath *path);
extern
GtkTreePath *gtk_tree_row_reference_get_path (GtkTreeRowReference *reference);
extern
GtkTreeModel *gtk_tree_row_reference_get_model (GtkTreeRowReference *reference);
extern
gboolean gtk_tree_row_reference_valid (GtkTreeRowReference *reference);
extern
GtkTreeRowReference *gtk_tree_row_reference_copy (GtkTreeRowReference *reference);
extern
void gtk_tree_row_reference_free (GtkTreeRowReference *reference);
extern
void gtk_tree_row_reference_inserted (GObject *proxy,
             GtkTreePath *path);
extern
void gtk_tree_row_reference_deleted (GObject *proxy,
             GtkTreePath *path);
extern
void gtk_tree_row_reference_reordered (GObject *proxy,
             GtkTreePath *path,
             GtkTreeIter *iter,
             gint *new_order);
extern
GtkTreeIter * gtk_tree_iter_copy (GtkTreeIter *iter);
extern
void gtk_tree_iter_free (GtkTreeIter *iter);
extern
GType gtk_tree_iter_get_type (void) __attribute__((__const__));
extern
GType gtk_tree_model_get_type (void) __attribute__((__const__));
extern
GtkTreeModelFlags gtk_tree_model_get_flags (GtkTreeModel *tree_model);
extern
gint gtk_tree_model_get_n_columns (GtkTreeModel *tree_model);
extern
GType gtk_tree_model_get_column_type (GtkTreeModel *tree_model,
        gint index_);
extern
gboolean gtk_tree_model_get_iter (GtkTreeModel *tree_model,
        GtkTreeIter *iter,
        GtkTreePath *path);
extern
gboolean gtk_tree_model_get_iter_from_string (GtkTreeModel *tree_model,
             GtkTreeIter *iter,
             const gchar *path_string);
extern
gchar * gtk_tree_model_get_string_from_iter (GtkTreeModel *tree_model,
                                                       GtkTreeIter *iter);
extern
gboolean gtk_tree_model_get_iter_first (GtkTreeModel *tree_model,
        GtkTreeIter *iter);
extern
GtkTreePath * gtk_tree_model_get_path (GtkTreeModel *tree_model,
        GtkTreeIter *iter);
extern
void gtk_tree_model_get_value (GtkTreeModel *tree_model,
        GtkTreeIter *iter,
        gint column,
        GValue *value);
extern
gboolean gtk_tree_model_iter_previous (GtkTreeModel *tree_model,
        GtkTreeIter *iter);
extern
gboolean gtk_tree_model_iter_next (GtkTreeModel *tree_model,
        GtkTreeIter *iter);
extern
gboolean gtk_tree_model_iter_children (GtkTreeModel *tree_model,
        GtkTreeIter *iter,
        GtkTreeIter *parent);
extern
gboolean gtk_tree_model_iter_has_child (GtkTreeModel *tree_model,
        GtkTreeIter *iter);
extern
gint gtk_tree_model_iter_n_children (GtkTreeModel *tree_model,
        GtkTreeIter *iter);
extern
gboolean gtk_tree_model_iter_nth_child (GtkTreeModel *tree_model,
        GtkTreeIter *iter,
        GtkTreeIter *parent,
        gint n);
extern
gboolean gtk_tree_model_iter_parent (GtkTreeModel *tree_model,
        GtkTreeIter *iter,
        GtkTreeIter *child);
extern
void gtk_tree_model_ref_node (GtkTreeModel *tree_model,
        GtkTreeIter *iter);
extern
void gtk_tree_model_unref_node (GtkTreeModel *tree_model,
        GtkTreeIter *iter);
extern
void gtk_tree_model_get (GtkTreeModel *tree_model,
        GtkTreeIter *iter,
        ...);
extern
void gtk_tree_model_get_valist (GtkTreeModel *tree_model,
        GtkTreeIter *iter,
        va_list var_args);
extern
void gtk_tree_model_foreach (GtkTreeModel *model,
        GtkTreeModelForeachFunc func,
        gpointer user_data);
extern
void gtk_tree_model_row_changed (GtkTreeModel *tree_model,
        GtkTreePath *path,
        GtkTreeIter *iter);
extern
void gtk_tree_model_row_inserted (GtkTreeModel *tree_model,
        GtkTreePath *path,
        GtkTreeIter *iter);
extern
void gtk_tree_model_row_has_child_toggled (GtkTreeModel *tree_model,
        GtkTreePath *path,
        GtkTreeIter *iter);
extern
void gtk_tree_model_row_deleted (GtkTreeModel *tree_model,
        GtkTreePath *path);
extern
void gtk_tree_model_rows_reordered (GtkTreeModel *tree_model,
        GtkTreePath *path,
        GtkTreeIter *iter,
        gint *new_order);
extern
void gtk_tree_model_rows_reordered_with_length (GtkTreeModel *tree_model,
      GtkTreePath *path,
      GtkTreeIter *iter,
      gint *new_order,
      gint length);
typedef struct _GtkCellEditable GtkCellEditable;
typedef struct _GtkCellEditableIface GtkCellEditableIface;
struct _GtkCellEditableIface
{
  GTypeInterface g_iface;
  void (* editing_done) (GtkCellEditable *cell_editable);
  void (* remove_widget) (GtkCellEditable *cell_editable);
  void (* start_editing) (GtkCellEditable *cell_editable,
     GdkEvent *event);
};
extern
GType gtk_cell_editable_get_type (void) __attribute__((__const__));
extern
void gtk_cell_editable_start_editing (GtkCellEditable *cell_editable,
           GdkEvent *event);
extern
void gtk_cell_editable_editing_done (GtkCellEditable *cell_editable);
extern
void gtk_cell_editable_remove_widget (GtkCellEditable *cell_editable);
typedef enum
{
  GTK_CELL_RENDERER_SELECTED = 1 << 0,
  GTK_CELL_RENDERER_PRELIT = 1 << 1,
  GTK_CELL_RENDERER_INSENSITIVE = 1 << 2,
  GTK_CELL_RENDERER_SORTED = 1 << 3,
  GTK_CELL_RENDERER_FOCUSED = 1 << 4,
  GTK_CELL_RENDERER_EXPANDABLE = 1 << 5,
  GTK_CELL_RENDERER_EXPANDED = 1 << 6
} GtkCellRendererState;
typedef enum
{
  GTK_CELL_RENDERER_MODE_INERT,
  GTK_CELL_RENDERER_MODE_ACTIVATABLE,
  GTK_CELL_RENDERER_MODE_EDITABLE
} GtkCellRendererMode;
typedef struct _GtkCellRenderer GtkCellRenderer;
typedef struct _GtkCellRendererPrivate GtkCellRendererPrivate;
typedef struct _GtkCellRendererClass GtkCellRendererClass;
typedef struct _GtkCellRendererClassPrivate GtkCellRendererClassPrivate;
struct _GtkCellRenderer
{
  GInitiallyUnowned parent_instance;
  GtkCellRendererPrivate *priv;
};
struct _GtkCellRendererClass
{
  GInitiallyUnownedClass parent_class;
  GtkSizeRequestMode (* get_request_mode) (GtkCellRenderer *cell);
  void (* get_preferred_width) (GtkCellRenderer *cell,
                                                          GtkWidget *widget,
                                                          gint *minimum_size,
                                                          gint *natural_size);
  void (* get_preferred_height_for_width) (GtkCellRenderer *cell,
                                                          GtkWidget *widget,
                                                          gint width,
                                                          gint *minimum_height,
                                                          gint *natural_height);
  void (* get_preferred_height) (GtkCellRenderer *cell,
                                                          GtkWidget *widget,
                                                          gint *minimum_size,
                                                          gint *natural_size);
  void (* get_preferred_width_for_height) (GtkCellRenderer *cell,
                                                          GtkWidget *widget,
                                                          gint height,
                                                          gint *minimum_width,
                                                          gint *natural_width);
  void (* get_aligned_area) (GtkCellRenderer *cell,
                                                          GtkWidget *widget,
         GtkCellRendererState flags,
                                                          const GdkRectangle *cell_area,
                                                          GdkRectangle *aligned_area);
  void (* get_size) (GtkCellRenderer *cell,
                                                          GtkWidget *widget,
                                                          const GdkRectangle *cell_area,
                                                          gint *x_offset,
                                                          gint *y_offset,
                                                          gint *width,
                                                          gint *height);
  void (* render) (GtkCellRenderer *cell,
                                                          cairo_t *cr,
                                                          GtkWidget *widget,
                                                          const GdkRectangle *background_area,
                                                          const GdkRectangle *cell_area,
                                                          GtkCellRendererState flags);
  gboolean (* activate) (GtkCellRenderer *cell,
                                                          GdkEvent *event,
                                                          GtkWidget *widget,
                                                          const gchar *path,
                                                          const GdkRectangle *background_area,
                                                          const GdkRectangle *cell_area,
                                                          GtkCellRendererState flags);
  GtkCellEditable * (* start_editing) (GtkCellRenderer *cell,
                                                          GdkEvent *event,
                                                          GtkWidget *widget,
                                                          const gchar *path,
                                                          const GdkRectangle *background_area,
                                                          const GdkRectangle *cell_area,
                                                          GtkCellRendererState flags);
  void (* editing_canceled) (GtkCellRenderer *cell);
  void (* editing_started) (GtkCellRenderer *cell,
        GtkCellEditable *editable,
        const gchar *path);
  GtkCellRendererClassPrivate *priv;
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_cell_renderer_get_type (void) __attribute__((__const__));
extern
GtkSizeRequestMode gtk_cell_renderer_get_request_mode (GtkCellRenderer *cell);
extern
void gtk_cell_renderer_get_preferred_width (GtkCellRenderer *cell,
                                                                     GtkWidget *widget,
                                                                     gint *minimum_size,
                                                                     gint *natural_size);
extern
void gtk_cell_renderer_get_preferred_height_for_width (GtkCellRenderer *cell,
                                                                     GtkWidget *widget,
                                                                     gint width,
                                                                     gint *minimum_height,
                                                                     gint *natural_height);
extern
void gtk_cell_renderer_get_preferred_height (GtkCellRenderer *cell,
                                                                     GtkWidget *widget,
                                                                     gint *minimum_size,
                                                                     gint *natural_size);
extern
void gtk_cell_renderer_get_preferred_width_for_height (GtkCellRenderer *cell,
                                                                     GtkWidget *widget,
                                                                     gint height,
                                                                     gint *minimum_width,
                                                                     gint *natural_width);
extern
void gtk_cell_renderer_get_preferred_size (GtkCellRenderer *cell,
                                                                     GtkWidget *widget,
                                                                     GtkRequisition *minimum_size,
                                                                     GtkRequisition *natural_size);
extern
void gtk_cell_renderer_get_aligned_area (GtkCellRenderer *cell,
             GtkWidget *widget,
             GtkCellRendererState flags,
             const GdkRectangle *cell_area,
             GdkRectangle *aligned_area);
extern
void gtk_cell_renderer_get_size (GtkCellRenderer *cell,
                                                   GtkWidget *widget,
                                                   const GdkRectangle *cell_area,
                                                   gint *x_offset,
                                                   gint *y_offset,
                                                   gint *width,
                                                   gint *height);
extern
void gtk_cell_renderer_render (GtkCellRenderer *cell,
                                                   cairo_t *cr,
         GtkWidget *widget,
         const GdkRectangle *background_area,
         const GdkRectangle *cell_area,
         GtkCellRendererState flags);
extern
gboolean gtk_cell_renderer_activate (GtkCellRenderer *cell,
         GdkEvent *event,
         GtkWidget *widget,
         const gchar *path,
         const GdkRectangle *background_area,
         const GdkRectangle *cell_area,
         GtkCellRendererState flags);
extern
GtkCellEditable *gtk_cell_renderer_start_editing (GtkCellRenderer *cell,
         GdkEvent *event,
         GtkWidget *widget,
         const gchar *path,
         const GdkRectangle *background_area,
         const GdkRectangle *cell_area,
         GtkCellRendererState flags);
extern
void gtk_cell_renderer_set_fixed_size (GtkCellRenderer *cell,
         gint width,
         gint height);
extern
void gtk_cell_renderer_get_fixed_size (GtkCellRenderer *cell,
         gint *width,
         gint *height);
extern
void gtk_cell_renderer_set_alignment (GtkCellRenderer *cell,
                                                   gfloat xalign,
                                                   gfloat yalign);
extern
void gtk_cell_renderer_get_alignment (GtkCellRenderer *cell,
                                                   gfloat *xalign,
                                                   gfloat *yalign);
extern
void gtk_cell_renderer_set_padding (GtkCellRenderer *cell,
                                                   gint xpad,
                                                   gint ypad);
extern
void gtk_cell_renderer_get_padding (GtkCellRenderer *cell,
                                                   gint *xpad,
                                                   gint *ypad);
extern
void gtk_cell_renderer_set_visible (GtkCellRenderer *cell,
                                                   gboolean visible);
extern
gboolean gtk_cell_renderer_get_visible (GtkCellRenderer *cell);
extern
void gtk_cell_renderer_set_sensitive (GtkCellRenderer *cell,
                                                   gboolean sensitive);
extern
gboolean gtk_cell_renderer_get_sensitive (GtkCellRenderer *cell);
extern
gboolean gtk_cell_renderer_is_activatable (GtkCellRenderer *cell);
extern
void gtk_cell_renderer_stop_editing (GtkCellRenderer *cell,
                                                   gboolean canceled);
void _gtk_cell_renderer_calc_offset (GtkCellRenderer *cell,
                                                   const GdkRectangle *cell_area,
                                                   GtkTextDirection direction,
                                                   gint width,
                                                   gint height,
                                                   gint *x_offset,
                                                   gint *y_offset);
extern
GtkStateFlags gtk_cell_renderer_get_state (GtkCellRenderer *cell,
                                                   GtkWidget *widget,
                                                   GtkCellRendererState cell_state);
extern
void gtk_cell_renderer_class_set_accessible_type
                                                  (GtkCellRendererClass *renderer_class,
                                                   GType type);
GType _gtk_cell_renderer_get_accessible_type
                                                  (GtkCellRenderer * renderer);
typedef struct _GtkTreeSortable GtkTreeSortable;
typedef struct _GtkTreeSortableIface GtkTreeSortableIface;
typedef gint (* GtkTreeIterCompareFunc) (GtkTreeModel *model,
      GtkTreeIter *a,
      GtkTreeIter *b,
      gpointer user_data);
struct _GtkTreeSortableIface
{
  GTypeInterface g_iface;
  void (* sort_column_changed) (GtkTreeSortable *sortable);
  gboolean (* get_sort_column_id) (GtkTreeSortable *sortable,
          gint *sort_column_id,
          GtkSortType *order);
  void (* set_sort_column_id) (GtkTreeSortable *sortable,
          gint sort_column_id,
          GtkSortType order);
  void (* set_sort_func) (GtkTreeSortable *sortable,
          gint sort_column_id,
          GtkTreeIterCompareFunc sort_func,
          gpointer user_data,
          GDestroyNotify destroy);
  void (* set_default_sort_func) (GtkTreeSortable *sortable,
          GtkTreeIterCompareFunc sort_func,
          gpointer user_data,
          GDestroyNotify destroy);
  gboolean (* has_default_sort_func) (GtkTreeSortable *sortable);
};
extern
GType gtk_tree_sortable_get_type (void) __attribute__((__const__));
extern
void gtk_tree_sortable_sort_column_changed (GtkTreeSortable *sortable);
extern
gboolean gtk_tree_sortable_get_sort_column_id (GtkTreeSortable *sortable,
        gint *sort_column_id,
        GtkSortType *order);
extern
void gtk_tree_sortable_set_sort_column_id (GtkTreeSortable *sortable,
        gint sort_column_id,
        GtkSortType order);
extern
void gtk_tree_sortable_set_sort_func (GtkTreeSortable *sortable,
        gint sort_column_id,
        GtkTreeIterCompareFunc sort_func,
        gpointer user_data,
        GDestroyNotify destroy);
extern
void gtk_tree_sortable_set_default_sort_func (GtkTreeSortable *sortable,
        GtkTreeIterCompareFunc sort_func,
        gpointer user_data,
        GDestroyNotify destroy);
extern
gboolean gtk_tree_sortable_has_default_sort_func (GtkTreeSortable *sortable);
typedef struct _GtkCellArea GtkCellArea;
typedef struct _GtkCellAreaClass GtkCellAreaClass;
typedef struct _GtkCellAreaPrivate GtkCellAreaPrivate;
typedef struct _GtkCellAreaContext GtkCellAreaContext;
typedef gboolean (*GtkCellCallback) (GtkCellRenderer *renderer,
                                        gpointer data);
typedef gboolean (*GtkCellAllocCallback) (GtkCellRenderer *renderer,
                                             const GdkRectangle *cell_area,
                                             const GdkRectangle *cell_background,
                                             gpointer data);
struct _GtkCellArea
{
  GInitiallyUnowned parent_instance;
  GtkCellAreaPrivate *priv;
};
struct _GtkCellAreaClass
{
  GInitiallyUnownedClass parent_class;
  void (* add) (GtkCellArea *area,
                                                          GtkCellRenderer *renderer);
  void (* remove) (GtkCellArea *area,
                                                          GtkCellRenderer *renderer);
  void (* foreach) (GtkCellArea *area,
                                                          GtkCellCallback callback,
                                                          gpointer callback_data);
  void (* foreach_alloc) (GtkCellArea *area,
                                                          GtkCellAreaContext *context,
                                                          GtkWidget *widget,
                                                          const GdkRectangle *cell_area,
                                                          const GdkRectangle *background_area,
                                                          GtkCellAllocCallback callback,
                                                          gpointer callback_data);
  gint (* event) (GtkCellArea *area,
                                                          GtkCellAreaContext *context,
                                                          GtkWidget *widget,
                                                          GdkEvent *event,
                                                          const GdkRectangle *cell_area,
                                                          GtkCellRendererState flags);
  void (* render) (GtkCellArea *area,
                                                          GtkCellAreaContext *context,
                                                          GtkWidget *widget,
                                                          cairo_t *cr,
                                                          const GdkRectangle *background_area,
                                                          const GdkRectangle *cell_area,
                                                          GtkCellRendererState flags,
                                                          gboolean paint_focus);
  void (* apply_attributes) (GtkCellArea *area,
                                                          GtkTreeModel *tree_model,
                                                          GtkTreeIter *iter,
                                                          gboolean is_expander,
                                                          gboolean is_expanded);
  GtkCellAreaContext *(* create_context) (GtkCellArea *area);
  GtkCellAreaContext *(* copy_context) (GtkCellArea *area,
                                                          GtkCellAreaContext *context);
  GtkSizeRequestMode (* get_request_mode) (GtkCellArea *area);
  void (* get_preferred_width) (GtkCellArea *area,
                                                          GtkCellAreaContext *context,
                                                          GtkWidget *widget,
                                                          gint *minimum_width,
                                                          gint *natural_width);
  void (* get_preferred_height_for_width) (GtkCellArea *area,
                                                          GtkCellAreaContext *context,
                                                          GtkWidget *widget,
                                                          gint width,
                                                          gint *minimum_height,
                                                          gint *natural_height);
  void (* get_preferred_height) (GtkCellArea *area,
                                                          GtkCellAreaContext *context,
                                                          GtkWidget *widget,
                                                          gint *minimum_height,
                                                          gint *natural_height);
  void (* get_preferred_width_for_height) (GtkCellArea *area,
                                                          GtkCellAreaContext *context,
                                                          GtkWidget *widget,
                                                          gint height,
                                                          gint *minimum_width,
                                                          gint *natural_width);
  void (* set_cell_property) (GtkCellArea *area,
                                                          GtkCellRenderer *renderer,
                                                          guint property_id,
                                                          const GValue *value,
                                                          GParamSpec *pspec);
  void (* get_cell_property) (GtkCellArea *area,
                                                          GtkCellRenderer *renderer,
                                                          guint property_id,
                                                          GValue *value,
                                                          GParamSpec *pspec);
  gboolean (* focus) (GtkCellArea *area,
                                                          GtkDirectionType direction);
  gboolean (* is_activatable) (GtkCellArea *area);
  gboolean (* activate) (GtkCellArea *area,
                                                          GtkCellAreaContext *context,
                                                          GtkWidget *widget,
                                                          const GdkRectangle *cell_area,
                                                          GtkCellRendererState flags,
                                                          gboolean edit_only);
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
  void (*_gtk_reserved5) (void);
  void (*_gtk_reserved6) (void);
  void (*_gtk_reserved7) (void);
  void (*_gtk_reserved8) (void);
};
extern
GType gtk_cell_area_get_type (void) __attribute__((__const__));
extern
void gtk_cell_area_add (GtkCellArea *area,
                                                                    GtkCellRenderer *renderer);
extern
void gtk_cell_area_remove (GtkCellArea *area,
                                                                    GtkCellRenderer *renderer);
extern
gboolean gtk_cell_area_has_renderer (GtkCellArea *area,
                                                                    GtkCellRenderer *renderer);
extern
void gtk_cell_area_foreach (GtkCellArea *area,
                                                                    GtkCellCallback callback,
                                                                    gpointer callback_data);
extern
void gtk_cell_area_foreach_alloc (GtkCellArea *area,
                                                                    GtkCellAreaContext *context,
                                                                    GtkWidget *widget,
                                                                    const GdkRectangle *cell_area,
                                                                    const GdkRectangle *background_area,
                                                                    GtkCellAllocCallback callback,
                                                                    gpointer callback_data);
extern
gint gtk_cell_area_event (GtkCellArea *area,
                                                                    GtkCellAreaContext *context,
                                                                    GtkWidget *widget,
                                                                    GdkEvent *event,
                                                                    const GdkRectangle *cell_area,
                                                                    GtkCellRendererState flags);
extern
void gtk_cell_area_render (GtkCellArea *area,
                                                                    GtkCellAreaContext *context,
                                                                    GtkWidget *widget,
                                                                    cairo_t *cr,
                                                                    const GdkRectangle *background_area,
                                                                    const GdkRectangle *cell_area,
                                                                    GtkCellRendererState flags,
                                                                    gboolean paint_focus);
extern
void gtk_cell_area_get_cell_allocation (GtkCellArea *area,
                                                                    GtkCellAreaContext *context,
                                                                    GtkWidget *widget,
                                                                    GtkCellRenderer *renderer,
                                                                    const GdkRectangle *cell_area,
                                                                    GdkRectangle *allocation);
extern
GtkCellRenderer *gtk_cell_area_get_cell_at_position (GtkCellArea *area,
                                                                    GtkCellAreaContext *context,
                                                                    GtkWidget *widget,
                                                                    const GdkRectangle *cell_area,
                                                                    gint x,
                                                                    gint y,
                                                                    GdkRectangle *alloc_area);
extern
GtkCellAreaContext *gtk_cell_area_create_context (GtkCellArea *area);
extern
GtkCellAreaContext *gtk_cell_area_copy_context (GtkCellArea *area,
                                                                    GtkCellAreaContext *context);
extern
GtkSizeRequestMode gtk_cell_area_get_request_mode (GtkCellArea *area);
extern
void gtk_cell_area_get_preferred_width (GtkCellArea *area,
                                                                    GtkCellAreaContext *context,
                                                                    GtkWidget *widget,
                                                                    gint *minimum_width,
                                                                    gint *natural_width);
extern
void gtk_cell_area_get_preferred_height_for_width (GtkCellArea *area,
                                                                    GtkCellAreaContext *context,
                                                                    GtkWidget *widget,
                                                                    gint width,
                                                                    gint *minimum_height,
                                                                    gint *natural_height);
extern
void gtk_cell_area_get_preferred_height (GtkCellArea *area,
                                                                    GtkCellAreaContext *context,
                                                                    GtkWidget *widget,
                                                                    gint *minimum_height,
                                                                    gint *natural_height);
extern
void gtk_cell_area_get_preferred_width_for_height (GtkCellArea *area,
                                                                    GtkCellAreaContext *context,
                                                                    GtkWidget *widget,
                                                                    gint height,
                                                                    gint *minimum_width,
                                                                    gint *natural_width);
extern
const gchar * gtk_cell_area_get_current_path_string (GtkCellArea *area);
extern
void gtk_cell_area_apply_attributes (GtkCellArea *area,
                                                                    GtkTreeModel *tree_model,
                                                                    GtkTreeIter *iter,
                                                                    gboolean is_expander,
                                                                    gboolean is_expanded);
extern
void gtk_cell_area_attribute_connect (GtkCellArea *area,
                                                                    GtkCellRenderer *renderer,
                                                                    const gchar *attribute,
                                                                    gint column);
extern
void gtk_cell_area_attribute_disconnect (GtkCellArea *area,
                                                                    GtkCellRenderer *renderer,
                                                                    const gchar *attribute);
extern
gint gtk_cell_area_attribute_get_column (GtkCellArea *area,
                                                                    GtkCellRenderer *renderer,
                                                                    const gchar *attribute);
extern
void gtk_cell_area_class_install_cell_property (GtkCellAreaClass *aclass,
                                                                    guint property_id,
                                                                    GParamSpec *pspec);
extern
GParamSpec* gtk_cell_area_class_find_cell_property (GtkCellAreaClass *aclass,
                                                                    const gchar *property_name);
extern
GParamSpec** gtk_cell_area_class_list_cell_properties (GtkCellAreaClass *aclass,
                                                                    guint *n_properties);
extern
void gtk_cell_area_add_with_properties (GtkCellArea *area,
                                                                    GtkCellRenderer *renderer,
                                                                    const gchar *first_prop_name,
                                                                    ...) __attribute__((__sentinel__));
extern
void gtk_cell_area_cell_set (GtkCellArea *area,
                                                                    GtkCellRenderer *renderer,
                                                                    const gchar *first_prop_name,
                                                                    ...) __attribute__((__sentinel__));
extern
void gtk_cell_area_cell_get (GtkCellArea *area,
                                                                    GtkCellRenderer *renderer,
                                                                    const gchar *first_prop_name,
                                                                    ...) __attribute__((__sentinel__));
extern
void gtk_cell_area_cell_set_valist (GtkCellArea *area,
                                                                    GtkCellRenderer *renderer,
                                                                    const gchar *first_property_name,
                                                                    va_list var_args);
extern
void gtk_cell_area_cell_get_valist (GtkCellArea *area,
                                                                    GtkCellRenderer *renderer,
                                                                    const gchar *first_property_name,
                                                                    va_list var_args);
extern
void gtk_cell_area_cell_set_property (GtkCellArea *area,
                                                                    GtkCellRenderer *renderer,
                                                                    const gchar *property_name,
                                                                    const GValue *value);
extern
void gtk_cell_area_cell_get_property (GtkCellArea *area,
                                                                    GtkCellRenderer *renderer,
                                                                    const gchar *property_name,
                                                                    GValue *value);
extern
gboolean gtk_cell_area_is_activatable (GtkCellArea *area);
extern
gboolean gtk_cell_area_activate (GtkCellArea *area,
                                                                    GtkCellAreaContext *context,
                                                                    GtkWidget *widget,
                                                                    const GdkRectangle *cell_area,
                                                                    GtkCellRendererState flags,
                                                                    gboolean edit_only);
extern
gboolean gtk_cell_area_focus (GtkCellArea *area,
                                                                    GtkDirectionType direction);
extern
void gtk_cell_area_set_focus_cell (GtkCellArea *area,
                                                                    GtkCellRenderer *renderer);
extern
GtkCellRenderer *gtk_cell_area_get_focus_cell (GtkCellArea *area);
extern
void gtk_cell_area_add_focus_sibling (GtkCellArea *area,
                                                                    GtkCellRenderer *renderer,
                                                                    GtkCellRenderer *sibling);
extern
void gtk_cell_area_remove_focus_sibling (GtkCellArea *area,
                                                                    GtkCellRenderer *renderer,
                                                                    GtkCellRenderer *sibling);
extern
gboolean gtk_cell_area_is_focus_sibling (GtkCellArea *area,
                                                                    GtkCellRenderer *renderer,
                                                                    GtkCellRenderer *sibling);
extern
const GList * gtk_cell_area_get_focus_siblings (GtkCellArea *area,
                                                                    GtkCellRenderer *renderer);
extern
GtkCellRenderer *gtk_cell_area_get_focus_from_sibling (GtkCellArea *area,
                                                                    GtkCellRenderer *renderer);
extern
GtkCellRenderer *gtk_cell_area_get_edited_cell (GtkCellArea *area);
extern
GtkCellEditable *gtk_cell_area_get_edit_widget (GtkCellArea *area);
extern
gboolean gtk_cell_area_activate_cell (GtkCellArea *area,
                                                                    GtkWidget *widget,
                                                                    GtkCellRenderer *renderer,
                                                                    GdkEvent *event,
                                                                    const GdkRectangle *cell_area,
                                                                    GtkCellRendererState flags);
extern
void gtk_cell_area_stop_editing (GtkCellArea *area,
                                                                    gboolean canceled);
extern
void gtk_cell_area_inner_cell_area (GtkCellArea *area,
                                                                    GtkWidget *widget,
                                                                    const GdkRectangle *cell_area,
                                                                    GdkRectangle *inner_area);
extern
void gtk_cell_area_request_renderer (GtkCellArea *area,
                                                                    GtkCellRenderer *renderer,
                                                                    GtkOrientation orientation,
                                                                    GtkWidget *widget,
                                                                    gint for_size,
                                                                    gint *minimum_size,
                                                                    gint *natural_size);
void _gtk_cell_area_set_cell_data_func_with_proxy (GtkCellArea *area,
            GtkCellRenderer *cell,
            GFunc func,
            gpointer func_data,
            GDestroyNotify destroy,
            gpointer proxy);
typedef struct _GtkTreeViewColumn GtkTreeViewColumn;
typedef struct _GtkTreeViewColumnClass GtkTreeViewColumnClass;
typedef struct _GtkTreeViewColumnPrivate GtkTreeViewColumnPrivate;
typedef enum
{
  GTK_TREE_VIEW_COLUMN_GROW_ONLY,
  GTK_TREE_VIEW_COLUMN_AUTOSIZE,
  GTK_TREE_VIEW_COLUMN_FIXED
} GtkTreeViewColumnSizing;
typedef void (* GtkTreeCellDataFunc) (GtkTreeViewColumn *tree_column,
          GtkCellRenderer *cell,
          GtkTreeModel *tree_model,
          GtkTreeIter *iter,
          gpointer data);
struct _GtkTreeViewColumn
{
  GInitiallyUnowned parent_instance;
  GtkTreeViewColumnPrivate *priv;
};
struct _GtkTreeViewColumnClass
{
  GInitiallyUnownedClass parent_class;
  void (*clicked) (GtkTreeViewColumn *tree_column);
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_tree_view_column_get_type (void) __attribute__((__const__));
extern
GtkTreeViewColumn *gtk_tree_view_column_new (void);
extern
GtkTreeViewColumn *gtk_tree_view_column_new_with_area (GtkCellArea *area);
extern
GtkTreeViewColumn *gtk_tree_view_column_new_with_attributes (const gchar *title,
          GtkCellRenderer *cell,
          ...) __attribute__((__sentinel__));
extern
void gtk_tree_view_column_pack_start (GtkTreeViewColumn *tree_column,
          GtkCellRenderer *cell,
          gboolean expand);
extern
void gtk_tree_view_column_pack_end (GtkTreeViewColumn *tree_column,
          GtkCellRenderer *cell,
          gboolean expand);
extern
void gtk_tree_view_column_clear (GtkTreeViewColumn *tree_column);
extern
void gtk_tree_view_column_add_attribute (GtkTreeViewColumn *tree_column,
          GtkCellRenderer *cell_renderer,
          const gchar *attribute,
          gint column);
extern
void gtk_tree_view_column_set_attributes (GtkTreeViewColumn *tree_column,
          GtkCellRenderer *cell_renderer,
          ...) __attribute__((__sentinel__));
extern
void gtk_tree_view_column_set_cell_data_func (GtkTreeViewColumn *tree_column,
          GtkCellRenderer *cell_renderer,
          GtkTreeCellDataFunc func,
          gpointer func_data,
          GDestroyNotify destroy);
extern
void gtk_tree_view_column_clear_attributes (GtkTreeViewColumn *tree_column,
          GtkCellRenderer *cell_renderer);
extern
void gtk_tree_view_column_set_spacing (GtkTreeViewColumn *tree_column,
          gint spacing);
extern
gint gtk_tree_view_column_get_spacing (GtkTreeViewColumn *tree_column);
extern
void gtk_tree_view_column_set_visible (GtkTreeViewColumn *tree_column,
          gboolean visible);
extern
gboolean gtk_tree_view_column_get_visible (GtkTreeViewColumn *tree_column);
extern
void gtk_tree_view_column_set_resizable (GtkTreeViewColumn *tree_column,
          gboolean resizable);
extern
gboolean gtk_tree_view_column_get_resizable (GtkTreeViewColumn *tree_column);
extern
void gtk_tree_view_column_set_sizing (GtkTreeViewColumn *tree_column,
          GtkTreeViewColumnSizing type);
extern
GtkTreeViewColumnSizing gtk_tree_view_column_get_sizing (GtkTreeViewColumn *tree_column);
extern
gint gtk_tree_view_column_get_x_offset (GtkTreeViewColumn *tree_column);
extern
gint gtk_tree_view_column_get_width (GtkTreeViewColumn *tree_column);
extern
gint gtk_tree_view_column_get_fixed_width (GtkTreeViewColumn *tree_column);
extern
void gtk_tree_view_column_set_fixed_width (GtkTreeViewColumn *tree_column,
          gint fixed_width);
extern
void gtk_tree_view_column_set_min_width (GtkTreeViewColumn *tree_column,
          gint min_width);
extern
gint gtk_tree_view_column_get_min_width (GtkTreeViewColumn *tree_column);
extern
void gtk_tree_view_column_set_max_width (GtkTreeViewColumn *tree_column,
          gint max_width);
extern
gint gtk_tree_view_column_get_max_width (GtkTreeViewColumn *tree_column);
extern
void gtk_tree_view_column_clicked (GtkTreeViewColumn *tree_column);
extern
void gtk_tree_view_column_set_title (GtkTreeViewColumn *tree_column,
          const gchar *title);
extern
const gchar * gtk_tree_view_column_get_title (GtkTreeViewColumn *tree_column);
extern
void gtk_tree_view_column_set_expand (GtkTreeViewColumn *tree_column,
          gboolean expand);
extern
gboolean gtk_tree_view_column_get_expand (GtkTreeViewColumn *tree_column);
extern
void gtk_tree_view_column_set_clickable (GtkTreeViewColumn *tree_column,
          gboolean clickable);
extern
gboolean gtk_tree_view_column_get_clickable (GtkTreeViewColumn *tree_column);
extern
void gtk_tree_view_column_set_widget (GtkTreeViewColumn *tree_column,
          GtkWidget *widget);
extern
GtkWidget *gtk_tree_view_column_get_widget (GtkTreeViewColumn *tree_column);
extern
void gtk_tree_view_column_set_alignment (GtkTreeViewColumn *tree_column,
          gfloat xalign);
extern
gfloat gtk_tree_view_column_get_alignment (GtkTreeViewColumn *tree_column);
extern
void gtk_tree_view_column_set_reorderable (GtkTreeViewColumn *tree_column,
          gboolean reorderable);
extern
gboolean gtk_tree_view_column_get_reorderable (GtkTreeViewColumn *tree_column);
extern
void gtk_tree_view_column_set_sort_column_id (GtkTreeViewColumn *tree_column,
          gint sort_column_id);
extern
gint gtk_tree_view_column_get_sort_column_id (GtkTreeViewColumn *tree_column);
extern
void gtk_tree_view_column_set_sort_indicator (GtkTreeViewColumn *tree_column,
          gboolean setting);
extern
gboolean gtk_tree_view_column_get_sort_indicator (GtkTreeViewColumn *tree_column);
extern
void gtk_tree_view_column_set_sort_order (GtkTreeViewColumn *tree_column,
          GtkSortType order);
extern
GtkSortType gtk_tree_view_column_get_sort_order (GtkTreeViewColumn *tree_column);
extern
void gtk_tree_view_column_cell_set_cell_data (GtkTreeViewColumn *tree_column,
          GtkTreeModel *tree_model,
          GtkTreeIter *iter,
          gboolean is_expander,
          gboolean is_expanded);
extern
void gtk_tree_view_column_cell_get_size (GtkTreeViewColumn *tree_column,
          const GdkRectangle *cell_area,
          gint *x_offset,
          gint *y_offset,
          gint *width,
          gint *height);
extern
gboolean gtk_tree_view_column_cell_is_visible (GtkTreeViewColumn *tree_column);
extern
void gtk_tree_view_column_focus_cell (GtkTreeViewColumn *tree_column,
          GtkCellRenderer *cell);
extern
gboolean gtk_tree_view_column_cell_get_position (GtkTreeViewColumn *tree_column,
                               GtkCellRenderer *cell_renderer,
                               gint *x_offset,
                               gint *width);
extern
void gtk_tree_view_column_queue_resize (GtkTreeViewColumn *tree_column);
extern
GtkWidget *gtk_tree_view_column_get_tree_view (GtkTreeViewColumn *tree_column);
extern
GtkWidget *gtk_tree_view_column_get_button (GtkTreeViewColumn *tree_column);
typedef struct _GtkTextAttributes GtkTextAttributes;
typedef struct _GtkTextAppearance GtkTextAppearance;
struct _GtkTextAppearance
{
  GdkColor bg_color;
  GdkColor fg_color;
  gint rise;
  guint underline : 4;
  guint strikethrough : 1;
  guint draw_bg : 1;
  guint inside_selection : 1;
  guint is_text : 1;
  GdkRGBA *rgba[2];
};
struct _GtkTextAttributes
{
  guint refcount;
  GtkTextAppearance appearance;
  GtkJustification justification;
  GtkTextDirection direction;
  PangoFontDescription *font;
  gdouble font_scale;
  gint left_margin;
  gint right_margin;
  gint indent;
  gint pixels_above_lines;
  gint pixels_below_lines;
  gint pixels_inside_wrap;
  PangoTabArray *tabs;
  GtkWrapMode wrap_mode;
  PangoLanguage *language;
  GdkColor *pg_bg_color;
  guint invisible : 1;
  guint bg_full_height : 1;
  guint editable : 1;
  guint no_fallback: 1;
  GdkRGBA *pg_bg_rgba;
  gint letter_spacing;
  gchar *font_features;
};
extern
GtkTextAttributes* gtk_text_attributes_new (void);
extern
GtkTextAttributes* gtk_text_attributes_copy (GtkTextAttributes *src);
extern
void gtk_text_attributes_copy_values (GtkTextAttributes *src,
                                                    GtkTextAttributes *dest);
extern
void gtk_text_attributes_unref (GtkTextAttributes *values);
extern
GtkTextAttributes *gtk_text_attributes_ref (GtkTextAttributes *values);
extern
GType gtk_text_attributes_get_type (void) __attribute__((__const__));
typedef struct _GtkTextChildAnchor GtkTextChildAnchor;
typedef struct _GtkTextChildAnchorClass GtkTextChildAnchorClass;
struct _GtkTextChildAnchor
{
  GObject parent_instance;
  gpointer segment;
};
struct _GtkTextChildAnchorClass
{
  GObjectClass parent_class;
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_text_child_anchor_get_type (void) __attribute__((__const__));
extern
GtkTextChildAnchor* gtk_text_child_anchor_new (void);
extern
GList* gtk_text_child_anchor_get_widgets (GtkTextChildAnchor *anchor);
extern
gboolean gtk_text_child_anchor_get_deleted (GtkTextChildAnchor *anchor);
typedef struct _GtkTextIter GtkTextIter;
typedef struct _GtkTextTagTable GtkTextTagTable;
typedef struct _GtkTextTag GtkTextTag;
typedef struct _GtkTextTagPrivate GtkTextTagPrivate;
typedef struct _GtkTextTagClass GtkTextTagClass;
struct _GtkTextTag
{
  GObject parent_instance;
  GtkTextTagPrivate *priv;
};
struct _GtkTextTagClass
{
  GObjectClass parent_class;
  gboolean (* event) (GtkTextTag *tag,
                      GObject *event_object,
                      GdkEvent *event,
                      const GtkTextIter *iter);
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_text_tag_get_type (void) __attribute__((__const__));
extern
GtkTextTag *gtk_text_tag_new (const gchar *name);
extern
gint gtk_text_tag_get_priority (GtkTextTag *tag);
extern
void gtk_text_tag_set_priority (GtkTextTag *tag,
                                        gint priority);
extern
gboolean gtk_text_tag_event (GtkTextTag *tag,
                                        GObject *event_object,
                                        GdkEvent *event,
                                        const GtkTextIter *iter);
typedef enum {
  GTK_TEXT_SEARCH_VISIBLE_ONLY = 1 << 0,
  GTK_TEXT_SEARCH_TEXT_ONLY = 1 << 1,
  GTK_TEXT_SEARCH_CASE_INSENSITIVE = 1 << 2
} GtkTextSearchFlags;
typedef struct _GtkTextBuffer GtkTextBuffer;
struct _GtkTextIter {
  gpointer dummy1;
  gpointer dummy2;
  gint dummy3;
  gint dummy4;
  gint dummy5;
  gint dummy6;
  gint dummy7;
  gint dummy8;
  gpointer dummy9;
  gpointer dummy10;
  gint dummy11;
  gint dummy12;
  gint dummy13;
  gpointer dummy14;
};
extern
GtkTextBuffer *gtk_text_iter_get_buffer (const GtkTextIter *iter);
extern
GtkTextIter *gtk_text_iter_copy (const GtkTextIter *iter);
extern
void gtk_text_iter_free (GtkTextIter *iter);
extern
void gtk_text_iter_assign (GtkTextIter *iter,
                                     const GtkTextIter *other);
extern
GType gtk_text_iter_get_type (void) __attribute__((__const__));
extern
gint gtk_text_iter_get_offset (const GtkTextIter *iter);
extern
gint gtk_text_iter_get_line (const GtkTextIter *iter);
extern
gint gtk_text_iter_get_line_offset (const GtkTextIter *iter);
extern
gint gtk_text_iter_get_line_index (const GtkTextIter *iter);
extern
gint gtk_text_iter_get_visible_line_offset (const GtkTextIter *iter);
extern
gint gtk_text_iter_get_visible_line_index (const GtkTextIter *iter);
extern
gunichar gtk_text_iter_get_char (const GtkTextIter *iter);
extern
gchar *gtk_text_iter_get_slice (const GtkTextIter *start,
                                          const GtkTextIter *end);
extern
gchar *gtk_text_iter_get_text (const GtkTextIter *start,
                                          const GtkTextIter *end);
extern
gchar *gtk_text_iter_get_visible_slice (const GtkTextIter *start,
                                          const GtkTextIter *end);
extern
gchar *gtk_text_iter_get_visible_text (const GtkTextIter *start,
                                          const GtkTextIter *end);
extern
GdkPixbuf* gtk_text_iter_get_pixbuf (const GtkTextIter *iter);
extern
GSList * gtk_text_iter_get_marks (const GtkTextIter *iter);
extern
GtkTextChildAnchor* gtk_text_iter_get_child_anchor (const GtkTextIter *iter);
extern
GSList *gtk_text_iter_get_toggled_tags (const GtkTextIter *iter,
                                          gboolean toggled_on);
extern
gboolean gtk_text_iter_begins_tag (const GtkTextIter *iter,
                                          GtkTextTag *tag);
extern
gboolean gtk_text_iter_ends_tag (const GtkTextIter *iter,
                                          GtkTextTag *tag);
extern
gboolean gtk_text_iter_toggles_tag (const GtkTextIter *iter,
                                          GtkTextTag *tag);
extern
gboolean gtk_text_iter_has_tag (const GtkTextIter *iter,
                                          GtkTextTag *tag);
extern
GSList *gtk_text_iter_get_tags (const GtkTextIter *iter);
extern
gboolean gtk_text_iter_editable (const GtkTextIter *iter,
                                          gboolean default_setting);
extern
gboolean gtk_text_iter_can_insert (const GtkTextIter *iter,
                                          gboolean default_editability);
extern
gboolean gtk_text_iter_starts_word (const GtkTextIter *iter);
extern
gboolean gtk_text_iter_ends_word (const GtkTextIter *iter);
extern
gboolean gtk_text_iter_inside_word (const GtkTextIter *iter);
extern
gboolean gtk_text_iter_starts_sentence (const GtkTextIter *iter);
extern
gboolean gtk_text_iter_ends_sentence (const GtkTextIter *iter);
extern
gboolean gtk_text_iter_inside_sentence (const GtkTextIter *iter);
extern
gboolean gtk_text_iter_starts_line (const GtkTextIter *iter);
extern
gboolean gtk_text_iter_ends_line (const GtkTextIter *iter);
extern
gboolean gtk_text_iter_is_cursor_position (const GtkTextIter *iter);
extern
gint gtk_text_iter_get_chars_in_line (const GtkTextIter *iter);
extern
gint gtk_text_iter_get_bytes_in_line (const GtkTextIter *iter);
extern
gboolean gtk_text_iter_get_attributes (const GtkTextIter *iter,
          GtkTextAttributes *values);
extern
PangoLanguage* gtk_text_iter_get_language (const GtkTextIter *iter);
extern
gboolean gtk_text_iter_is_end (const GtkTextIter *iter);
extern
gboolean gtk_text_iter_is_start (const GtkTextIter *iter);
extern
gboolean gtk_text_iter_forward_char (GtkTextIter *iter);
extern
gboolean gtk_text_iter_backward_char (GtkTextIter *iter);
extern
gboolean gtk_text_iter_forward_chars (GtkTextIter *iter,
                                             gint count);
extern
gboolean gtk_text_iter_backward_chars (GtkTextIter *iter,
                                             gint count);
extern
gboolean gtk_text_iter_forward_line (GtkTextIter *iter);
extern
gboolean gtk_text_iter_backward_line (GtkTextIter *iter);
extern
gboolean gtk_text_iter_forward_lines (GtkTextIter *iter,
                                             gint count);
extern
gboolean gtk_text_iter_backward_lines (GtkTextIter *iter,
                                             gint count);
extern
gboolean gtk_text_iter_forward_word_end (GtkTextIter *iter);
extern
gboolean gtk_text_iter_backward_word_start (GtkTextIter *iter);
extern
gboolean gtk_text_iter_forward_word_ends (GtkTextIter *iter,
                                             gint count);
extern
gboolean gtk_text_iter_backward_word_starts (GtkTextIter *iter,
                                             gint count);
extern
gboolean gtk_text_iter_forward_visible_line (GtkTextIter *iter);
extern
gboolean gtk_text_iter_backward_visible_line (GtkTextIter *iter);
extern
gboolean gtk_text_iter_forward_visible_lines (GtkTextIter *iter,
                                               gint count);
extern
gboolean gtk_text_iter_backward_visible_lines (GtkTextIter *iter,
                                               gint count);
extern
gboolean gtk_text_iter_forward_visible_word_end (GtkTextIter *iter);
extern
gboolean gtk_text_iter_backward_visible_word_start (GtkTextIter *iter);
extern
gboolean gtk_text_iter_forward_visible_word_ends (GtkTextIter *iter,
                                             gint count);
extern
gboolean gtk_text_iter_backward_visible_word_starts (GtkTextIter *iter,
                                             gint count);
extern
gboolean gtk_text_iter_forward_sentence_end (GtkTextIter *iter);
extern
gboolean gtk_text_iter_backward_sentence_start (GtkTextIter *iter);
extern
gboolean gtk_text_iter_forward_sentence_ends (GtkTextIter *iter,
                                                 gint count);
extern
gboolean gtk_text_iter_backward_sentence_starts (GtkTextIter *iter,
                                                 gint count);
extern
gboolean gtk_text_iter_forward_cursor_position (GtkTextIter *iter);
extern
gboolean gtk_text_iter_backward_cursor_position (GtkTextIter *iter);
extern
gboolean gtk_text_iter_forward_cursor_positions (GtkTextIter *iter,
                                                  gint count);
extern
gboolean gtk_text_iter_backward_cursor_positions (GtkTextIter *iter,
                                                  gint count);
extern
gboolean gtk_text_iter_forward_visible_cursor_position (GtkTextIter *iter);
extern
gboolean gtk_text_iter_backward_visible_cursor_position (GtkTextIter *iter);
extern
gboolean gtk_text_iter_forward_visible_cursor_positions (GtkTextIter *iter,
                                                          gint count);
extern
gboolean gtk_text_iter_backward_visible_cursor_positions (GtkTextIter *iter,
                                                          gint count);
extern
void gtk_text_iter_set_offset (GtkTextIter *iter,
                                           gint char_offset);
extern
void gtk_text_iter_set_line (GtkTextIter *iter,
                                           gint line_number);
extern
void gtk_text_iter_set_line_offset (GtkTextIter *iter,
                                           gint char_on_line);
extern
void gtk_text_iter_set_line_index (GtkTextIter *iter,
                                           gint byte_on_line);
extern
void gtk_text_iter_forward_to_end (GtkTextIter *iter);
extern
gboolean gtk_text_iter_forward_to_line_end (GtkTextIter *iter);
extern
void gtk_text_iter_set_visible_line_offset (GtkTextIter *iter,
                                                gint char_on_line);
extern
void gtk_text_iter_set_visible_line_index (GtkTextIter *iter,
                                                gint byte_on_line);
extern
gboolean gtk_text_iter_forward_to_tag_toggle (GtkTextIter *iter,
                                              GtkTextTag *tag);
extern
gboolean gtk_text_iter_backward_to_tag_toggle (GtkTextIter *iter,
                                               GtkTextTag *tag);
typedef gboolean (* GtkTextCharPredicate) (gunichar ch, gpointer user_data);
extern
gboolean gtk_text_iter_forward_find_char (GtkTextIter *iter,
                                           GtkTextCharPredicate pred,
                                           gpointer user_data,
                                           const GtkTextIter *limit);
extern
gboolean gtk_text_iter_backward_find_char (GtkTextIter *iter,
                                           GtkTextCharPredicate pred,
                                           gpointer user_data,
                                           const GtkTextIter *limit);
extern
gboolean gtk_text_iter_forward_search (const GtkTextIter *iter,
                                        const gchar *str,
                                        GtkTextSearchFlags flags,
                                        GtkTextIter *match_start,
                                        GtkTextIter *match_end,
                                        const GtkTextIter *limit);
extern
gboolean gtk_text_iter_backward_search (const GtkTextIter *iter,
                                        const gchar *str,
                                        GtkTextSearchFlags flags,
                                        GtkTextIter *match_start,
                                        GtkTextIter *match_end,
                                        const GtkTextIter *limit);
extern
gboolean gtk_text_iter_equal (const GtkTextIter *lhs,
                                        const GtkTextIter *rhs);
extern
gint gtk_text_iter_compare (const GtkTextIter *lhs,
                                        const GtkTextIter *rhs);
extern
gboolean gtk_text_iter_in_range (const GtkTextIter *iter,
                                        const GtkTextIter *start,
                                        const GtkTextIter *end);
extern
void gtk_text_iter_order (GtkTextIter *first,
                                        GtkTextIter *second);
typedef struct _GtkTargetPair GtkTargetPair;
struct _GtkTargetPair
{
  GdkAtom target;
  guint flags;
  guint info;
};
typedef struct _GtkTargetList GtkTargetList;
typedef struct _GtkTargetEntry GtkTargetEntry;
struct _GtkTargetEntry
{
  gchar *target;
  guint flags;
  guint info;
};
extern
GType gtk_target_list_get_type (void) __attribute__((__const__));
extern
GtkTargetList *gtk_target_list_new (const GtkTargetEntry *targets,
                                          guint ntargets);
extern
GtkTargetList *gtk_target_list_ref (GtkTargetList *list);
extern
void gtk_target_list_unref (GtkTargetList *list);
extern
void gtk_target_list_add (GtkTargetList *list,
                                          GdkAtom target,
                                          guint flags,
                                          guint info);
extern
void gtk_target_list_add_text_targets (GtkTargetList *list,
                                                      guint info);
extern
void gtk_target_list_add_rich_text_targets (GtkTargetList *list,
                                                      guint info,
                                                      gboolean deserializable,
                                                      GtkTextBuffer *buffer);
extern
void gtk_target_list_add_image_targets (GtkTargetList *list,
                                                      guint info,
                                                      gboolean writable);
extern
void gtk_target_list_add_uri_targets (GtkTargetList *list,
                                                      guint info);
extern
void gtk_target_list_add_table (GtkTargetList *list,
                                          const GtkTargetEntry *targets,
                                          guint ntargets);
extern
void gtk_target_list_remove (GtkTargetList *list,
                                          GdkAtom target);
extern
gboolean gtk_target_list_find (GtkTargetList *list,
                                          GdkAtom target,
                                          guint *info);
extern
GtkTargetEntry * gtk_target_table_new_from_list (GtkTargetList *list,
                                                 gint *n_targets);
extern
void gtk_target_table_free (GtkTargetEntry *targets,
                                                 gint n_targets);
extern
gboolean gtk_selection_owner_set (GtkWidget *widget,
                                              GdkAtom selection,
                                              guint32 time_);
extern
gboolean gtk_selection_owner_set_for_display (GdkDisplay *display,
                                              GtkWidget *widget,
                                              GdkAtom selection,
                                              guint32 time_);
extern
void gtk_selection_add_target (GtkWidget *widget,
                                      GdkAtom selection,
                                      GdkAtom target,
                                      guint info);
extern
void gtk_selection_add_targets (GtkWidget *widget,
                                      GdkAtom selection,
                                      const GtkTargetEntry *targets,
                                      guint ntargets);
extern
void gtk_selection_clear_targets (GtkWidget *widget,
                                      GdkAtom selection);
extern
gboolean gtk_selection_convert (GtkWidget *widget,
                                      GdkAtom selection,
                                      GdkAtom target,
                                      guint32 time_);
extern
void gtk_selection_remove_all (GtkWidget *widget);
extern
GdkAtom gtk_selection_data_get_selection (const GtkSelectionData *selection_data);
extern
GdkAtom gtk_selection_data_get_target (const GtkSelectionData *selection_data);
extern
GdkAtom gtk_selection_data_get_data_type (const GtkSelectionData *selection_data);
extern
gint gtk_selection_data_get_format (const GtkSelectionData *selection_data);
extern
const guchar *gtk_selection_data_get_data (const GtkSelectionData *selection_data);
extern
gint gtk_selection_data_get_length (const GtkSelectionData *selection_data);
extern
const guchar *gtk_selection_data_get_data_with_length
                                               (const GtkSelectionData *selection_data,
                                                gint *length);
extern
GdkDisplay *gtk_selection_data_get_display (const GtkSelectionData *selection_data);
extern
void gtk_selection_data_set (GtkSelectionData *selection_data,
                                      GdkAtom type,
                                      gint format,
                                      const guchar *data,
                                      gint length);
extern
gboolean gtk_selection_data_set_text (GtkSelectionData *selection_data,
                                      const gchar *str,
                                      gint len);
extern
guchar * gtk_selection_data_get_text (const GtkSelectionData *selection_data);
extern
gboolean gtk_selection_data_set_pixbuf (GtkSelectionData *selection_data,
                                          GdkPixbuf *pixbuf);
extern
GdkPixbuf *gtk_selection_data_get_pixbuf (const GtkSelectionData *selection_data);
extern
gboolean gtk_selection_data_set_uris (GtkSelectionData *selection_data,
                                      gchar **uris);
extern
gchar **gtk_selection_data_get_uris (const GtkSelectionData *selection_data);
extern
gboolean gtk_selection_data_get_targets (const GtkSelectionData *selection_data,
                                                  GdkAtom **targets,
                                                  gint *n_atoms);
extern
gboolean gtk_selection_data_targets_include_text (const GtkSelectionData *selection_data);
extern
gboolean gtk_selection_data_targets_include_rich_text (const GtkSelectionData *selection_data,
                                                       GtkTextBuffer *buffer);
extern
gboolean gtk_selection_data_targets_include_image (const GtkSelectionData *selection_data,
                                                   gboolean writable);
extern
gboolean gtk_selection_data_targets_include_uri (const GtkSelectionData *selection_data);
extern
gboolean gtk_targets_include_text (GdkAtom *targets,
                                                  gint n_targets);
extern
gboolean gtk_targets_include_rich_text (GdkAtom *targets,
                                                  gint n_targets,
                                                  GtkTextBuffer *buffer);
extern
gboolean gtk_targets_include_image (GdkAtom *targets,
                                                  gint n_targets,
                                                  gboolean writable);
extern
gboolean gtk_targets_include_uri (GdkAtom *targets,
                                                  gint n_targets);
extern
GType gtk_selection_data_get_type (void) __attribute__((__const__));
extern
GtkSelectionData *gtk_selection_data_copy (const GtkSelectionData *data);
extern
void gtk_selection_data_free (GtkSelectionData *data);
extern
GType gtk_target_entry_get_type (void) __attribute__((__const__));
extern
GtkTargetEntry *gtk_target_entry_new (const gchar *target,
                                               guint flags,
                                               guint info);
extern
GtkTargetEntry *gtk_target_entry_copy (GtkTargetEntry *data);
extern
void gtk_target_entry_free (GtkTargetEntry *data);
typedef enum {
  GTK_DEST_DEFAULT_MOTION = 1 << 0,
  GTK_DEST_DEFAULT_HIGHLIGHT = 1 << 1,
  GTK_DEST_DEFAULT_DROP = 1 << 2,
  GTK_DEST_DEFAULT_ALL = 0x07
} GtkDestDefaults;
typedef enum {
  GTK_TARGET_SAME_APP = 1 << 0,
  GTK_TARGET_SAME_WIDGET = 1 << 1,
  GTK_TARGET_OTHER_APP = 1 << 2,
  GTK_TARGET_OTHER_WIDGET = 1 << 3
} GtkTargetFlags;
extern
void gtk_drag_get_data (GtkWidget *widget,
   GdkDragContext *context,
   GdkAtom target,
   guint32 time_);
extern
void gtk_drag_finish (GdkDragContext *context,
   gboolean success,
   gboolean del,
   guint32 time_);
extern
GtkWidget *gtk_drag_get_source_widget (GdkDragContext *context);
extern
void gtk_drag_highlight (GtkWidget *widget);
extern
void gtk_drag_unhighlight (GtkWidget *widget);
extern
void gtk_drag_dest_set (GtkWidget *widget,
     GtkDestDefaults flags,
              const GtkTargetEntry *targets,
     gint n_targets,
     GdkDragAction actions);
extern
void gtk_drag_dest_set_proxy (GtkWidget *widget,
         GdkWindow *proxy_window,
         GdkDragProtocol protocol,
         gboolean use_coordinates);
extern
void gtk_drag_dest_unset (GtkWidget *widget);
extern
GdkAtom gtk_drag_dest_find_target (GtkWidget *widget,
                                              GdkDragContext *context,
                                              GtkTargetList *target_list);
extern
GtkTargetList* gtk_drag_dest_get_target_list (GtkWidget *widget);
extern
void gtk_drag_dest_set_target_list (GtkWidget *widget,
                                              GtkTargetList *target_list);
extern
void gtk_drag_dest_add_text_targets (GtkWidget *widget);
extern
void gtk_drag_dest_add_image_targets (GtkWidget *widget);
extern
void gtk_drag_dest_add_uri_targets (GtkWidget *widget);
extern
void gtk_drag_dest_set_track_motion (GtkWidget *widget,
      gboolean track_motion);
extern
gboolean gtk_drag_dest_get_track_motion (GtkWidget *widget);
extern
void gtk_drag_source_set (GtkWidget *widget,
      GdkModifierType start_button_mask,
      const GtkTargetEntry *targets,
      gint n_targets,
      GdkDragAction actions);
extern
void gtk_drag_source_unset (GtkWidget *widget);
extern
GtkTargetList* gtk_drag_source_get_target_list (GtkWidget *widget);
extern
void gtk_drag_source_set_target_list (GtkWidget *widget,
                                                GtkTargetList *target_list);
extern
void gtk_drag_source_add_text_targets (GtkWidget *widget);
extern
void gtk_drag_source_add_image_targets (GtkWidget *widget);
extern
void gtk_drag_source_add_uri_targets (GtkWidget *widget);
extern
void gtk_drag_source_set_icon_pixbuf (GtkWidget *widget,
           GdkPixbuf *pixbuf);
extern
void gtk_drag_source_set_icon_stock (GtkWidget *widget,
           const gchar *stock_id);
extern
void gtk_drag_source_set_icon_name (GtkWidget *widget,
           const gchar *icon_name);
extern
void gtk_drag_source_set_icon_gicon (GtkWidget *widget,
           GIcon *icon);
extern
GdkDragContext *gtk_drag_begin_with_coordinates (GtkWidget *widget,
                                                 GtkTargetList *targets,
                                                 GdkDragAction actions,
                                                 gint button,
                                                 GdkEvent *event,
                                                 gint x,
                                                 gint y);
extern
GdkDragContext *gtk_drag_begin (GtkWidget *widget,
    GtkTargetList *targets,
    GdkDragAction actions,
    gint button,
    GdkEvent *event);
extern
void gtk_drag_cancel (GdkDragContext *context);
extern
void gtk_drag_set_icon_widget (GdkDragContext *context,
          GtkWidget *widget,
          gint hot_x,
          gint hot_y);
extern
void gtk_drag_set_icon_pixbuf (GdkDragContext *context,
          GdkPixbuf *pixbuf,
          gint hot_x,
          gint hot_y);
extern
void gtk_drag_set_icon_stock (GdkDragContext *context,
          const gchar *stock_id,
          gint hot_x,
          gint hot_y);
extern
void gtk_drag_set_icon_surface(GdkDragContext *context,
          cairo_surface_t *surface);
extern
void gtk_drag_set_icon_name (GdkDragContext *context,
          const gchar *icon_name,
          gint hot_x,
          gint hot_y);
extern
void gtk_drag_set_icon_gicon (GdkDragContext *context,
          GIcon *icon,
          gint hot_x,
          gint hot_y);
extern
void gtk_drag_set_icon_default (GdkDragContext *context);
extern
gboolean gtk_drag_check_threshold (GtkWidget *widget,
       gint start_x,
       gint start_y,
       gint current_x,
       gint current_y);
typedef struct _GtkEditable GtkEditable;
typedef struct _GtkEditableInterface GtkEditableInterface;
struct _GtkEditableInterface
{
  GTypeInterface base_iface;
  void (* insert_text) (GtkEditable *editable,
         const gchar *new_text,
         gint new_text_length,
         gint *position);
  void (* delete_text) (GtkEditable *editable,
         gint start_pos,
         gint end_pos);
  void (* changed) (GtkEditable *editable);
  void (* do_insert_text) (GtkEditable *editable,
         const gchar *new_text,
         gint new_text_length,
         gint *position);
  void (* do_delete_text) (GtkEditable *editable,
         gint start_pos,
         gint end_pos);
  gchar* (* get_chars) (GtkEditable *editable,
         gint start_pos,
         gint end_pos);
  void (* set_selection_bounds) (GtkEditable *editable,
         gint start_pos,
         gint end_pos);
  gboolean (* get_selection_bounds) (GtkEditable *editable,
         gint *start_pos,
         gint *end_pos);
  void (* set_position) (GtkEditable *editable,
         gint position);
  gint (* get_position) (GtkEditable *editable);
};
extern
GType gtk_editable_get_type (void) __attribute__((__const__));
extern
void gtk_editable_select_region (GtkEditable *editable,
         gint start_pos,
         gint end_pos);
extern
gboolean gtk_editable_get_selection_bounds (GtkEditable *editable,
         gint *start_pos,
         gint *end_pos);
extern
void gtk_editable_insert_text (GtkEditable *editable,
         const gchar *new_text,
         gint new_text_length,
         gint *position);
extern
void gtk_editable_delete_text (GtkEditable *editable,
         gint start_pos,
         gint end_pos);
extern
gchar* gtk_editable_get_chars (GtkEditable *editable,
         gint start_pos,
         gint end_pos);
extern
void gtk_editable_cut_clipboard (GtkEditable *editable);
extern
void gtk_editable_copy_clipboard (GtkEditable *editable);
extern
void gtk_editable_paste_clipboard (GtkEditable *editable);
extern
void gtk_editable_delete_selection (GtkEditable *editable);
extern
void gtk_editable_set_position (GtkEditable *editable,
         gint position);
extern
gint gtk_editable_get_position (GtkEditable *editable);
extern
void gtk_editable_set_editable (GtkEditable *editable,
         gboolean is_editable);
extern
gboolean gtk_editable_get_editable (GtkEditable *editable);
typedef struct _GtkIMContext GtkIMContext;
typedef struct _GtkIMContextClass GtkIMContextClass;
struct _GtkIMContext
{
  GObject parent_instance;
};
struct _GtkIMContextClass
{
  GObjectClass parent_class;
  void (*preedit_start) (GtkIMContext *context);
  void (*preedit_end) (GtkIMContext *context);
  void (*preedit_changed) (GtkIMContext *context);
  void (*commit) (GtkIMContext *context, const gchar *str);
  gboolean (*retrieve_surrounding) (GtkIMContext *context);
  gboolean (*delete_surrounding) (GtkIMContext *context,
        gint offset,
        gint n_chars);
  void (*set_client_window) (GtkIMContext *context,
       GdkWindow *window);
  void (*get_preedit_string) (GtkIMContext *context,
       gchar **str,
       PangoAttrList **attrs,
       gint *cursor_pos);
  gboolean (*filter_keypress) (GtkIMContext *context,
              GdkEventKey *event);
  void (*focus_in) (GtkIMContext *context);
  void (*focus_out) (GtkIMContext *context);
  void (*reset) (GtkIMContext *context);
  void (*set_cursor_location) (GtkIMContext *context,
       GdkRectangle *area);
  void (*set_use_preedit) (GtkIMContext *context,
       gboolean use_preedit);
  void (*set_surrounding) (GtkIMContext *context,
       const gchar *text,
       gint len,
       gint cursor_index);
  gboolean (*get_surrounding) (GtkIMContext *context,
       gchar **text,
       gint *cursor_index);
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
  void (*_gtk_reserved5) (void);
  void (*_gtk_reserved6) (void);
};
extern
GType gtk_im_context_get_type (void) __attribute__((__const__));
extern
void gtk_im_context_set_client_window (GtkIMContext *context,
          GdkWindow *window);
extern
void gtk_im_context_get_preedit_string (GtkIMContext *context,
          gchar **str,
          PangoAttrList **attrs,
          gint *cursor_pos);
extern
gboolean gtk_im_context_filter_keypress (GtkIMContext *context,
          GdkEventKey *event);
extern
void gtk_im_context_focus_in (GtkIMContext *context);
extern
void gtk_im_context_focus_out (GtkIMContext *context);
extern
void gtk_im_context_reset (GtkIMContext *context);
extern
void gtk_im_context_set_cursor_location (GtkIMContext *context,
          const GdkRectangle *area);
extern
void gtk_im_context_set_use_preedit (GtkIMContext *context,
          gboolean use_preedit);
extern
void gtk_im_context_set_surrounding (GtkIMContext *context,
          const gchar *text,
          gint len,
          gint cursor_index);
extern
gboolean gtk_im_context_get_surrounding (GtkIMContext *context,
          gchar **text,
          gint *cursor_index);
extern
gboolean gtk_im_context_delete_surrounding (GtkIMContext *context,
          gint offset,
          gint n_chars);
typedef struct _GtkEntryBuffer GtkEntryBuffer;
typedef struct _GtkEntryBufferClass GtkEntryBufferClass;
typedef struct _GtkEntryBufferPrivate GtkEntryBufferPrivate;
struct _GtkEntryBuffer
{
  GObject parent_instance;
  GtkEntryBufferPrivate *priv;
};
struct _GtkEntryBufferClass
{
  GObjectClass parent_class;
  void (*inserted_text) (GtkEntryBuffer *buffer,
                                          guint position,
                                          const gchar *chars,
                                          guint n_chars);
  void (*deleted_text) (GtkEntryBuffer *buffer,
                                          guint position,
                                          guint n_chars);
  const gchar* (*get_text) (GtkEntryBuffer *buffer,
                                          gsize *n_bytes);
  guint (*get_length) (GtkEntryBuffer *buffer);
  guint (*insert_text) (GtkEntryBuffer *buffer,
                                          guint position,
                                          const gchar *chars,
                                          guint n_chars);
  guint (*delete_text) (GtkEntryBuffer *buffer,
                                          guint position,
                                          guint n_chars);
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
  void (*_gtk_reserved5) (void);
  void (*_gtk_reserved6) (void);
  void (*_gtk_reserved7) (void);
  void (*_gtk_reserved8) (void);
};
extern
GType gtk_entry_buffer_get_type (void) __attribute__((__const__));
extern
GtkEntryBuffer* gtk_entry_buffer_new (const gchar *initial_chars,
                                                                   gint n_initial_chars);
extern
gsize gtk_entry_buffer_get_bytes (GtkEntryBuffer *buffer);
extern
guint gtk_entry_buffer_get_length (GtkEntryBuffer *buffer);
extern
const gchar* gtk_entry_buffer_get_text (GtkEntryBuffer *buffer);
extern
void gtk_entry_buffer_set_text (GtkEntryBuffer *buffer,
                                                                   const gchar *chars,
                                                                   gint n_chars);
extern
void gtk_entry_buffer_set_max_length (GtkEntryBuffer *buffer,
                                                                   gint max_length);
extern
gint gtk_entry_buffer_get_max_length (GtkEntryBuffer *buffer);
extern
guint gtk_entry_buffer_insert_text (GtkEntryBuffer *buffer,
                                                                   guint position,
                                                                   const gchar *chars,
                                                                   gint n_chars);
extern
guint gtk_entry_buffer_delete_text (GtkEntryBuffer *buffer,
                                                                   guint position,
                                                                   gint n_chars);
extern
void gtk_entry_buffer_emit_inserted_text (GtkEntryBuffer *buffer,
                                                                   guint position,
                                                                   const gchar *chars,
                                                                   guint n_chars);
extern
void gtk_entry_buffer_emit_deleted_text (GtkEntryBuffer *buffer,
                                                                   guint position,
                                                                   guint n_chars);
typedef struct _GtkListStore GtkListStore;
typedef struct _GtkListStorePrivate GtkListStorePrivate;
typedef struct _GtkListStoreClass GtkListStoreClass;
struct _GtkListStore
{
  GObject parent;
  GtkListStorePrivate *priv;
};
struct _GtkListStoreClass
{
  GObjectClass parent_class;
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_list_store_get_type (void) __attribute__((__const__));
extern
GtkListStore *gtk_list_store_new (gint n_columns,
            ...);
extern
GtkListStore *gtk_list_store_newv (gint n_columns,
            GType *types);
extern
void gtk_list_store_set_column_types (GtkListStore *list_store,
            gint n_columns,
            GType *types);
extern
void gtk_list_store_set_value (GtkListStore *list_store,
            GtkTreeIter *iter,
            gint column,
            GValue *value);
extern
void gtk_list_store_set (GtkListStore *list_store,
            GtkTreeIter *iter,
            ...);
extern
void gtk_list_store_set_valuesv (GtkListStore *list_store,
            GtkTreeIter *iter,
            gint *columns,
            GValue *values,
            gint n_values);
extern
void gtk_list_store_set_valist (GtkListStore *list_store,
            GtkTreeIter *iter,
            va_list var_args);
extern
gboolean gtk_list_store_remove (GtkListStore *list_store,
            GtkTreeIter *iter);
extern
void gtk_list_store_insert (GtkListStore *list_store,
            GtkTreeIter *iter,
            gint position);
extern
void gtk_list_store_insert_before (GtkListStore *list_store,
            GtkTreeIter *iter,
            GtkTreeIter *sibling);
extern
void gtk_list_store_insert_after (GtkListStore *list_store,
            GtkTreeIter *iter,
            GtkTreeIter *sibling);
extern
void gtk_list_store_insert_with_values (GtkListStore *list_store,
        GtkTreeIter *iter,
        gint position,
        ...);
extern
void gtk_list_store_insert_with_valuesv (GtkListStore *list_store,
        GtkTreeIter *iter,
        gint position,
        gint *columns,
        GValue *values,
        gint n_values);
extern
void gtk_list_store_prepend (GtkListStore *list_store,
            GtkTreeIter *iter);
extern
void gtk_list_store_append (GtkListStore *list_store,
            GtkTreeIter *iter);
extern
void gtk_list_store_clear (GtkListStore *list_store);
extern
gboolean gtk_list_store_iter_is_valid (GtkListStore *list_store,
                                               GtkTreeIter *iter);
extern
void gtk_list_store_reorder (GtkListStore *store,
                                               gint *new_order);
extern
void gtk_list_store_swap (GtkListStore *store,
                                               GtkTreeIter *a,
                                               GtkTreeIter *b);
extern
void gtk_list_store_move_after (GtkListStore *store,
                                               GtkTreeIter *iter,
                                               GtkTreeIter *position);
extern
void gtk_list_store_move_before (GtkListStore *store,
                                               GtkTreeIter *iter,
                                               GtkTreeIter *position);
typedef gboolean (* GtkTreeModelFilterVisibleFunc) (GtkTreeModel *model,
                                                    GtkTreeIter *iter,
                                                    gpointer data);
typedef void (* GtkTreeModelFilterModifyFunc) (GtkTreeModel *model,
                                               GtkTreeIter *iter,
                                               GValue *value,
                                               gint column,
                                               gpointer data);
typedef struct _GtkTreeModelFilter GtkTreeModelFilter;
typedef struct _GtkTreeModelFilterClass GtkTreeModelFilterClass;
typedef struct _GtkTreeModelFilterPrivate GtkTreeModelFilterPrivate;
struct _GtkTreeModelFilter
{
  GObject parent;
  GtkTreeModelFilterPrivate *priv;
};
struct _GtkTreeModelFilterClass
{
  GObjectClass parent_class;
  gboolean (* visible) (GtkTreeModelFilter *self,
                        GtkTreeModel *child_model,
                        GtkTreeIter *iter);
  void (* modify) (GtkTreeModelFilter *self,
                   GtkTreeModel *child_model,
                   GtkTreeIter *iter,
                   GValue *value,
                   gint column);
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_tree_model_filter_get_type (void) __attribute__((__const__));
extern
GtkTreeModel *gtk_tree_model_filter_new (GtkTreeModel *child_model,
                                                                GtkTreePath *root);
extern
void gtk_tree_model_filter_set_visible_func (GtkTreeModelFilter *filter,
                                                                GtkTreeModelFilterVisibleFunc func,
                                                                gpointer data,
                                                                GDestroyNotify destroy);
extern
void gtk_tree_model_filter_set_modify_func (GtkTreeModelFilter *filter,
                                                                gint n_columns,
                                                                GType *types,
                                                                GtkTreeModelFilterModifyFunc func,
                                                                gpointer data,
                                                                GDestroyNotify destroy);
extern
void gtk_tree_model_filter_set_visible_column (GtkTreeModelFilter *filter,
                                                                gint column);
extern
GtkTreeModel *gtk_tree_model_filter_get_model (GtkTreeModelFilter *filter);
extern
gboolean gtk_tree_model_filter_convert_child_iter_to_iter (GtkTreeModelFilter *filter,
                                                                GtkTreeIter *filter_iter,
                                                                GtkTreeIter *child_iter);
extern
void gtk_tree_model_filter_convert_iter_to_child_iter (GtkTreeModelFilter *filter,
                                                                GtkTreeIter *child_iter,
                                                                GtkTreeIter *filter_iter);
extern
GtkTreePath *gtk_tree_model_filter_convert_child_path_to_path (GtkTreeModelFilter *filter,
                                                                GtkTreePath *child_path);
extern
GtkTreePath *gtk_tree_model_filter_convert_path_to_child_path (GtkTreeModelFilter *filter,
                                                                GtkTreePath *filter_path);
extern
void gtk_tree_model_filter_refilter (GtkTreeModelFilter *filter);
extern
void gtk_tree_model_filter_clear_cache (GtkTreeModelFilter *filter);
typedef struct _GtkEntryCompletion GtkEntryCompletion;
typedef struct _GtkEntryCompletionClass GtkEntryCompletionClass;
typedef struct _GtkEntryCompletionPrivate GtkEntryCompletionPrivate;
typedef gboolean (* GtkEntryCompletionMatchFunc) (GtkEntryCompletion *completion,
                                                  const gchar *key,
                                                  GtkTreeIter *iter,
                                                  gpointer user_data);
struct _GtkEntryCompletion
{
  GObject parent_instance;
  GtkEntryCompletionPrivate *priv;
};
struct _GtkEntryCompletionClass
{
  GObjectClass parent_class;
  gboolean (* match_selected) (GtkEntryCompletion *completion,
                                 GtkTreeModel *model,
                                 GtkTreeIter *iter);
  void (* action_activated) (GtkEntryCompletion *completion,
                                 gint index_);
  gboolean (* insert_prefix) (GtkEntryCompletion *completion,
                                 const gchar *prefix);
  gboolean (* cursor_on_match) (GtkEntryCompletion *completion,
                                 GtkTreeModel *model,
                                 GtkTreeIter *iter);
  void (* no_matches) (GtkEntryCompletion *completion);
  void (*_gtk_reserved0) (void);
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
};
extern
GType gtk_entry_completion_get_type (void) __attribute__((__const__));
extern
GtkEntryCompletion *gtk_entry_completion_new (void);
extern
GtkEntryCompletion *gtk_entry_completion_new_with_area (GtkCellArea *area);
extern
GtkWidget *gtk_entry_completion_get_entry (GtkEntryCompletion *completion);
extern
void gtk_entry_completion_set_model (GtkEntryCompletion *completion,
                                                                 GtkTreeModel *model);
extern
GtkTreeModel *gtk_entry_completion_get_model (GtkEntryCompletion *completion);
extern
void gtk_entry_completion_set_match_func (GtkEntryCompletion *completion,
                                                                 GtkEntryCompletionMatchFunc func,
                                                                 gpointer func_data,
                                                                 GDestroyNotify func_notify);
extern
void gtk_entry_completion_set_minimum_key_length (GtkEntryCompletion *completion,
                                                                 gint length);
extern
gint gtk_entry_completion_get_minimum_key_length (GtkEntryCompletion *completion);
extern
gchar * gtk_entry_completion_compute_prefix (GtkEntryCompletion *completion,
                                                                 const char *key);
extern
void gtk_entry_completion_complete (GtkEntryCompletion *completion);
extern
void gtk_entry_completion_insert_prefix (GtkEntryCompletion *completion);
extern
void gtk_entry_completion_insert_action_text (GtkEntryCompletion *completion,
                                                                 gint index_,
                                                                 const gchar *text);
extern
void gtk_entry_completion_insert_action_markup (GtkEntryCompletion *completion,
                                                                 gint index_,
                                                                 const gchar *markup);
extern
void gtk_entry_completion_delete_action (GtkEntryCompletion *completion,
                                                                 gint index_);
extern
void gtk_entry_completion_set_inline_completion (GtkEntryCompletion *completion,
                                                                 gboolean inline_completion);
extern
gboolean gtk_entry_completion_get_inline_completion (GtkEntryCompletion *completion);
extern
void gtk_entry_completion_set_inline_selection (GtkEntryCompletion *completion,
                                                                 gboolean inline_selection);
extern
gboolean gtk_entry_completion_get_inline_selection (GtkEntryCompletion *completion);
extern
void gtk_entry_completion_set_popup_completion (GtkEntryCompletion *completion,
                                                                 gboolean popup_completion);
extern
gboolean gtk_entry_completion_get_popup_completion (GtkEntryCompletion *completion);
extern
void gtk_entry_completion_set_popup_set_width (GtkEntryCompletion *completion,
                                                                 gboolean popup_set_width);
extern
gboolean gtk_entry_completion_get_popup_set_width (GtkEntryCompletion *completion);
extern
void gtk_entry_completion_set_popup_single_match (GtkEntryCompletion *completion,
                                                                 gboolean popup_single_match);
extern
gboolean gtk_entry_completion_get_popup_single_match (GtkEntryCompletion *completion);
extern
const gchar *gtk_entry_completion_get_completion_prefix (GtkEntryCompletion *completion);
extern
void gtk_entry_completion_set_text_column (GtkEntryCompletion *completion,
                                                                 gint column);
extern
gint gtk_entry_completion_get_text_column (GtkEntryCompletion *completion);
typedef struct _GtkImage GtkImage;
typedef struct _GtkImagePrivate GtkImagePrivate;
typedef struct _GtkImageClass GtkImageClass;
typedef enum
{
  GTK_IMAGE_EMPTY,
  GTK_IMAGE_PIXBUF,
  GTK_IMAGE_STOCK,
  GTK_IMAGE_ICON_SET,
  GTK_IMAGE_ANIMATION,
  GTK_IMAGE_ICON_NAME,
  GTK_IMAGE_GICON,
  GTK_IMAGE_SURFACE
} GtkImageType;
struct _GtkImage
{
  GtkMisc misc;
  GtkImagePrivate *priv;
};
struct _GtkImageClass
{
  GtkMiscClass parent_class;
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_image_get_type (void) __attribute__((__const__));
extern
GtkWidget* gtk_image_new (void);
extern
GtkWidget* gtk_image_new_from_file (const gchar *filename);
extern
GtkWidget* gtk_image_new_from_resource (const gchar *resource_path);
extern
GtkWidget* gtk_image_new_from_pixbuf (GdkPixbuf *pixbuf);
extern
GtkWidget* gtk_image_new_from_stock (const gchar *stock_id,
                                         GtkIconSize size);
extern
GtkWidget* gtk_image_new_from_icon_set (GtkIconSet *icon_set,
                                         GtkIconSize size);
extern
GtkWidget* gtk_image_new_from_animation (GdkPixbufAnimation *animation);
extern
GtkWidget* gtk_image_new_from_icon_name (const gchar *icon_name,
      GtkIconSize size);
extern
GtkWidget* gtk_image_new_from_gicon (GIcon *icon,
      GtkIconSize size);
extern
GtkWidget* gtk_image_new_from_surface (cairo_surface_t *surface);
extern
void gtk_image_clear (GtkImage *image);
extern
void gtk_image_set_from_file (GtkImage *image,
                                   const gchar *filename);
extern
void gtk_image_set_from_resource (GtkImage *image,
                                   const gchar *resource_path);
extern
void gtk_image_set_from_pixbuf (GtkImage *image,
                                   GdkPixbuf *pixbuf);
extern
void gtk_image_set_from_stock (GtkImage *image,
                                   const gchar *stock_id,
                                   GtkIconSize size);
extern
void gtk_image_set_from_icon_set (GtkImage *image,
                                   GtkIconSet *icon_set,
                                   GtkIconSize size);
extern
void gtk_image_set_from_animation (GtkImage *image,
                                   GdkPixbufAnimation *animation);
extern
void gtk_image_set_from_icon_name (GtkImage *image,
       const gchar *icon_name,
       GtkIconSize size);
extern
void gtk_image_set_from_gicon (GtkImage *image,
       GIcon *icon,
       GtkIconSize size);
extern
void gtk_image_set_from_surface (GtkImage *image,
       cairo_surface_t *surface);
extern
void gtk_image_set_pixel_size (GtkImage *image,
       gint pixel_size);
extern
GtkImageType gtk_image_get_storage_type (GtkImage *image);
extern
GdkPixbuf* gtk_image_get_pixbuf (GtkImage *image);
extern
void gtk_image_get_stock (GtkImage *image,
                                   gchar **stock_id,
                                   GtkIconSize *size);
extern
void gtk_image_get_icon_set (GtkImage *image,
                                   GtkIconSet **icon_set,
                                   GtkIconSize *size);
extern
GdkPixbufAnimation* gtk_image_get_animation (GtkImage *image);
extern
void gtk_image_get_icon_name (GtkImage *image,
        const gchar **icon_name,
        GtkIconSize *size);
extern
void gtk_image_get_gicon (GtkImage *image,
        GIcon **gicon,
        GtkIconSize *size);
extern
gint gtk_image_get_pixel_size (GtkImage *image);
typedef enum
{
  GTK_ENTRY_ICON_PRIMARY,
  GTK_ENTRY_ICON_SECONDARY
} GtkEntryIconPosition;
typedef struct _GtkEntry GtkEntry;
typedef struct _GtkEntryPrivate GtkEntryPrivate;
typedef struct _GtkEntryClass GtkEntryClass;
struct _GtkEntry
{
  GtkWidget parent_instance;
  GtkEntryPrivate *priv;
};
struct _GtkEntryClass
{
  GtkWidgetClass parent_class;
  void (* populate_popup) (GtkEntry *entry,
                             GtkWidget *popup);
  void (* activate) (GtkEntry *entry);
  void (* move_cursor) (GtkEntry *entry,
          GtkMovementStep step,
          gint count,
          gboolean extend_selection);
  void (* insert_at_cursor) (GtkEntry *entry,
          const gchar *str);
  void (* delete_from_cursor) (GtkEntry *entry,
          GtkDeleteType type,
          gint count);
  void (* backspace) (GtkEntry *entry);
  void (* cut_clipboard) (GtkEntry *entry);
  void (* copy_clipboard) (GtkEntry *entry);
  void (* paste_clipboard) (GtkEntry *entry);
  void (* toggle_overwrite) (GtkEntry *entry);
  void (* get_text_area_size) (GtkEntry *entry,
          gint *x,
          gint *y,
          gint *width,
          gint *height);
  void (* get_frame_size) (GtkEntry *entry,
                               gint *x,
                               gint *y,
          gint *width,
          gint *height);
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
  void (*_gtk_reserved5) (void);
  void (*_gtk_reserved6) (void);
  void (*_gtk_reserved7) (void);
};
extern
GType gtk_entry_get_type (void) __attribute__((__const__));
extern
GtkWidget* gtk_entry_new (void);
extern
GtkWidget* gtk_entry_new_with_buffer (GtkEntryBuffer *buffer);
extern
GtkEntryBuffer* gtk_entry_get_buffer (GtkEntry *entry);
extern
void gtk_entry_set_buffer (GtkEntry *entry,
                                                 GtkEntryBuffer *buffer);
extern
void gtk_entry_get_text_area (GtkEntry *entry,
                                                 GdkRectangle *text_area);
extern
void gtk_entry_set_visibility (GtkEntry *entry,
       gboolean visible);
extern
gboolean gtk_entry_get_visibility (GtkEntry *entry);
extern
void gtk_entry_set_invisible_char (GtkEntry *entry,
                                                 gunichar ch);
extern
gunichar gtk_entry_get_invisible_char (GtkEntry *entry);
extern
void gtk_entry_unset_invisible_char (GtkEntry *entry);
extern
void gtk_entry_set_has_frame (GtkEntry *entry,
                                                 gboolean setting);
extern
gboolean gtk_entry_get_has_frame (GtkEntry *entry);
extern
void gtk_entry_set_inner_border (GtkEntry *entry,
                                                 const GtkBorder *border);
extern
const GtkBorder* gtk_entry_get_inner_border (GtkEntry *entry);
extern
void gtk_entry_set_overwrite_mode (GtkEntry *entry,
                                                 gboolean overwrite);
extern
gboolean gtk_entry_get_overwrite_mode (GtkEntry *entry);
extern
void gtk_entry_set_max_length (GtkEntry *entry,
       gint max);
extern
gint gtk_entry_get_max_length (GtkEntry *entry);
extern
guint16 gtk_entry_get_text_length (GtkEntry *entry);
extern
void gtk_entry_set_activates_default (GtkEntry *entry,
                                                 gboolean setting);
extern
gboolean gtk_entry_get_activates_default (GtkEntry *entry);
extern
void gtk_entry_set_width_chars (GtkEntry *entry,
                                                 gint n_chars);
extern
gint gtk_entry_get_width_chars (GtkEntry *entry);
extern
void gtk_entry_set_max_width_chars (GtkEntry *entry,
                                                 gint n_chars);
extern
gint gtk_entry_get_max_width_chars (GtkEntry *entry);
extern
void gtk_entry_set_text (GtkEntry *entry,
                                                 const gchar *text);
extern
const gchar* gtk_entry_get_text (GtkEntry *entry);
extern
PangoLayout* gtk_entry_get_layout (GtkEntry *entry);
extern
void gtk_entry_get_layout_offsets (GtkEntry *entry,
                                                 gint *x,
                                                 gint *y);
extern
void gtk_entry_set_alignment (GtkEntry *entry,
                                                 gfloat xalign);
extern
gfloat gtk_entry_get_alignment (GtkEntry *entry);
extern
void gtk_entry_set_completion (GtkEntry *entry,
                                              GtkEntryCompletion *completion);
extern
GtkEntryCompletion *gtk_entry_get_completion (GtkEntry *entry);
extern
gint gtk_entry_layout_index_to_text_index (GtkEntry *entry,
                                                 gint layout_index);
extern
gint gtk_entry_text_index_to_layout_index (GtkEntry *entry,
                                                 gint text_index);
extern
void gtk_entry_set_cursor_hadjustment (GtkEntry *entry,
                                                 GtkAdjustment *adjustment);
extern
GtkAdjustment* gtk_entry_get_cursor_hadjustment (GtkEntry *entry);
extern
void gtk_entry_set_progress_fraction (GtkEntry *entry,
                                                  gdouble fraction);
extern
gdouble gtk_entry_get_progress_fraction (GtkEntry *entry);
extern
void gtk_entry_set_progress_pulse_step (GtkEntry *entry,
                                                  gdouble fraction);
extern
gdouble gtk_entry_get_progress_pulse_step (GtkEntry *entry);
extern
void gtk_entry_progress_pulse (GtkEntry *entry);
extern
const gchar* gtk_entry_get_placeholder_text (GtkEntry *entry);
extern
void gtk_entry_set_placeholder_text (GtkEntry *entry,
                                                  const gchar *text);
extern
void gtk_entry_set_icon_from_pixbuf (GtkEntry *entry,
         GtkEntryIconPosition icon_pos,
         GdkPixbuf *pixbuf);
extern
void gtk_entry_set_icon_from_stock (GtkEntry *entry,
         GtkEntryIconPosition icon_pos,
         const gchar *stock_id);
extern
void gtk_entry_set_icon_from_icon_name (GtkEntry *entry,
         GtkEntryIconPosition icon_pos,
         const gchar *icon_name);
extern
void gtk_entry_set_icon_from_gicon (GtkEntry *entry,
         GtkEntryIconPosition icon_pos,
         GIcon *icon);
extern
GtkImageType gtk_entry_get_icon_storage_type (GtkEntry *entry,
         GtkEntryIconPosition icon_pos);
extern
GdkPixbuf* gtk_entry_get_icon_pixbuf (GtkEntry *entry,
         GtkEntryIconPosition icon_pos);
extern
const gchar* gtk_entry_get_icon_stock (GtkEntry *entry,
         GtkEntryIconPosition icon_pos);
extern
const gchar* gtk_entry_get_icon_name (GtkEntry *entry,
         GtkEntryIconPosition icon_pos);
extern
GIcon* gtk_entry_get_icon_gicon (GtkEntry *entry,
         GtkEntryIconPosition icon_pos);
extern
void gtk_entry_set_icon_activatable (GtkEntry *entry,
         GtkEntryIconPosition icon_pos,
         gboolean activatable);
extern
gboolean gtk_entry_get_icon_activatable (GtkEntry *entry,
         GtkEntryIconPosition icon_pos);
extern
void gtk_entry_set_icon_sensitive (GtkEntry *entry,
         GtkEntryIconPosition icon_pos,
         gboolean sensitive);
extern
gboolean gtk_entry_get_icon_sensitive (GtkEntry *entry,
         GtkEntryIconPosition icon_pos);
extern
gint gtk_entry_get_icon_at_pos (GtkEntry *entry,
         gint x,
         gint y);
extern
void gtk_entry_set_icon_tooltip_text (GtkEntry *entry,
         GtkEntryIconPosition icon_pos,
         const gchar *tooltip);
extern
gchar * gtk_entry_get_icon_tooltip_text (GtkEntry *entry,
                                                          GtkEntryIconPosition icon_pos);
extern
void gtk_entry_set_icon_tooltip_markup (GtkEntry *entry,
         GtkEntryIconPosition icon_pos,
         const gchar *tooltip);
extern
gchar * gtk_entry_get_icon_tooltip_markup (GtkEntry *entry,
                                                          GtkEntryIconPosition icon_pos);
extern
void gtk_entry_set_icon_drag_source (GtkEntry *entry,
         GtkEntryIconPosition icon_pos,
         GtkTargetList *target_list,
         GdkDragAction actions);
extern
gint gtk_entry_get_current_icon_drag_source (GtkEntry *entry);
extern
void gtk_entry_get_icon_area (GtkEntry *entry,
                                                          GtkEntryIconPosition icon_pos,
                                                          GdkRectangle *icon_area);
extern
gboolean gtk_entry_im_context_filter_keypress (GtkEntry *entry,
                                                          GdkEventKey *event);
extern
void gtk_entry_reset_im_context (GtkEntry *entry);
extern
void gtk_entry_set_input_purpose (GtkEntry *entry,
                                                              GtkInputPurpose purpose);
extern
GtkInputPurpose gtk_entry_get_input_purpose (GtkEntry *entry);
extern
void gtk_entry_set_input_hints (GtkEntry *entry,
                                                              GtkInputHints hints);
extern
GtkInputHints gtk_entry_get_input_hints (GtkEntry *entry);
extern
void gtk_entry_set_attributes (GtkEntry *entry,
                                                              PangoAttrList *attrs);
extern
PangoAttrList *gtk_entry_get_attributes (GtkEntry *entry);
extern
void gtk_entry_set_tabs (GtkEntry *entry,
                                                              PangoTabArray *tabs);
extern
PangoTabArray *gtk_entry_get_tabs (GtkEntry *entry);
extern
void gtk_entry_grab_focus_without_selecting (GtkEntry *entry);
typedef enum
{
  GTK_TREE_VIEW_DROP_BEFORE,
  GTK_TREE_VIEW_DROP_AFTER,
  GTK_TREE_VIEW_DROP_INTO_OR_BEFORE,
  GTK_TREE_VIEW_DROP_INTO_OR_AFTER
} GtkTreeViewDropPosition;
typedef struct _GtkTreeView GtkTreeView;
typedef struct _GtkTreeViewClass GtkTreeViewClass;
typedef struct _GtkTreeViewPrivate GtkTreeViewPrivate;
typedef struct _GtkTreeSelection GtkTreeSelection;
typedef struct _GtkTreeSelectionClass GtkTreeSelectionClass;
struct _GtkTreeView
{
  GtkContainer parent;
  GtkTreeViewPrivate *priv;
};
struct _GtkTreeViewClass
{
  GtkContainerClass parent_class;
  void (* row_activated) (GtkTreeView *tree_view,
               GtkTreePath *path,
        GtkTreeViewColumn *column);
  gboolean (* test_expand_row) (GtkTreeView *tree_view,
               GtkTreeIter *iter,
               GtkTreePath *path);
  gboolean (* test_collapse_row) (GtkTreeView *tree_view,
               GtkTreeIter *iter,
               GtkTreePath *path);
  void (* row_expanded) (GtkTreeView *tree_view,
               GtkTreeIter *iter,
               GtkTreePath *path);
  void (* row_collapsed) (GtkTreeView *tree_view,
               GtkTreeIter *iter,
               GtkTreePath *path);
  void (* columns_changed) (GtkTreeView *tree_view);
  void (* cursor_changed) (GtkTreeView *tree_view);
  gboolean (* move_cursor) (GtkTreeView *tree_view,
               GtkMovementStep step,
               gint count);
  gboolean (* select_all) (GtkTreeView *tree_view);
  gboolean (* unselect_all) (GtkTreeView *tree_view);
  gboolean (* select_cursor_row) (GtkTreeView *tree_view,
        gboolean start_editing);
  gboolean (* toggle_cursor_row) (GtkTreeView *tree_view);
  gboolean (* expand_collapse_cursor_row) (GtkTreeView *tree_view,
        gboolean logical,
        gboolean expand,
        gboolean open_all);
  gboolean (* select_cursor_parent) (GtkTreeView *tree_view);
  gboolean (* start_interactive_search) (GtkTreeView *tree_view);
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
  void (*_gtk_reserved5) (void);
  void (*_gtk_reserved6) (void);
  void (*_gtk_reserved7) (void);
  void (*_gtk_reserved8) (void);
};
typedef gboolean (* GtkTreeViewColumnDropFunc) (GtkTreeView *tree_view,
      GtkTreeViewColumn *column,
      GtkTreeViewColumn *prev_column,
      GtkTreeViewColumn *next_column,
      gpointer data);
typedef void (* GtkTreeViewMappingFunc) (GtkTreeView *tree_view,
      GtkTreePath *path,
      gpointer user_data);
typedef gboolean (*GtkTreeViewSearchEqualFunc) (GtkTreeModel *model,
      gint column,
      const gchar *key,
      GtkTreeIter *iter,
      gpointer search_data);
typedef gboolean (*GtkTreeViewRowSeparatorFunc) (GtkTreeModel *model,
       GtkTreeIter *iter,
       gpointer data);
typedef void (*GtkTreeViewSearchPositionFunc) (GtkTreeView *tree_view,
         GtkWidget *search_dialog,
         gpointer user_data);
extern
GType gtk_tree_view_get_type (void) __attribute__((__const__));
extern
GtkWidget *gtk_tree_view_new (void);
extern
GtkWidget *gtk_tree_view_new_with_model (GtkTreeModel *model);
extern
GtkTreeModel *gtk_tree_view_get_model (GtkTreeView *tree_view);
extern
void gtk_tree_view_set_model (GtkTreeView *tree_view,
            GtkTreeModel *model);
extern
GtkTreeSelection *gtk_tree_view_get_selection (GtkTreeView *tree_view);
extern
GtkAdjustment *gtk_tree_view_get_hadjustment (GtkTreeView *tree_view);
extern
void gtk_tree_view_set_hadjustment (GtkTreeView *tree_view,
            GtkAdjustment *adjustment);
extern
GtkAdjustment *gtk_tree_view_get_vadjustment (GtkTreeView *tree_view);
extern
void gtk_tree_view_set_vadjustment (GtkTreeView *tree_view,
            GtkAdjustment *adjustment);
extern
gboolean gtk_tree_view_get_headers_visible (GtkTreeView *tree_view);
extern
void gtk_tree_view_set_headers_visible (GtkTreeView *tree_view,
            gboolean headers_visible);
extern
void gtk_tree_view_columns_autosize (GtkTreeView *tree_view);
extern
gboolean gtk_tree_view_get_headers_clickable (GtkTreeView *tree_view);
extern
void gtk_tree_view_set_headers_clickable (GtkTreeView *tree_view,
            gboolean setting);
extern
void gtk_tree_view_set_rules_hint (GtkTreeView *tree_view,
            gboolean setting);
extern
gboolean gtk_tree_view_get_rules_hint (GtkTreeView *tree_view);
extern
gboolean gtk_tree_view_get_activate_on_single_click (GtkTreeView *tree_view);
extern
void gtk_tree_view_set_activate_on_single_click (GtkTreeView *tree_view,
            gboolean single);
extern
gint gtk_tree_view_append_column (GtkTreeView *tree_view,
            GtkTreeViewColumn *column);
extern
gint gtk_tree_view_remove_column (GtkTreeView *tree_view,
            GtkTreeViewColumn *column);
extern
gint gtk_tree_view_insert_column (GtkTreeView *tree_view,
            GtkTreeViewColumn *column,
            gint position);
extern
gint gtk_tree_view_insert_column_with_attributes (GtkTreeView *tree_view,
            gint position,
            const gchar *title,
            GtkCellRenderer *cell,
            ...) __attribute__((__sentinel__));
extern
gint gtk_tree_view_insert_column_with_data_func (GtkTreeView *tree_view,
            gint position,
            const gchar *title,
            GtkCellRenderer *cell,
                                                                    GtkTreeCellDataFunc func,
                                                                    gpointer data,
                                                                    GDestroyNotify dnotify);
extern
guint gtk_tree_view_get_n_columns (GtkTreeView *tree_view);
extern
GtkTreeViewColumn *gtk_tree_view_get_column (GtkTreeView *tree_view,
            gint n);
extern
GList *gtk_tree_view_get_columns (GtkTreeView *tree_view);
extern
void gtk_tree_view_move_column_after (GtkTreeView *tree_view,
            GtkTreeViewColumn *column,
            GtkTreeViewColumn *base_column);
extern
void gtk_tree_view_set_expander_column (GtkTreeView *tree_view,
            GtkTreeViewColumn *column);
extern
GtkTreeViewColumn *gtk_tree_view_get_expander_column (GtkTreeView *tree_view);
extern
void gtk_tree_view_set_column_drag_function (GtkTreeView *tree_view,
            GtkTreeViewColumnDropFunc func,
            gpointer user_data,
            GDestroyNotify destroy);
extern
void gtk_tree_view_scroll_to_point (GtkTreeView *tree_view,
            gint tree_x,
            gint tree_y);
extern
void gtk_tree_view_scroll_to_cell (GtkTreeView *tree_view,
            GtkTreePath *path,
            GtkTreeViewColumn *column,
            gboolean use_align,
            gfloat row_align,
            gfloat col_align);
extern
void gtk_tree_view_row_activated (GtkTreeView *tree_view,
            GtkTreePath *path,
            GtkTreeViewColumn *column);
extern
void gtk_tree_view_expand_all (GtkTreeView *tree_view);
extern
void gtk_tree_view_collapse_all (GtkTreeView *tree_view);
extern
void gtk_tree_view_expand_to_path (GtkTreeView *tree_view,
            GtkTreePath *path);
extern
gboolean gtk_tree_view_expand_row (GtkTreeView *tree_view,
            GtkTreePath *path,
            gboolean open_all);
extern
gboolean gtk_tree_view_collapse_row (GtkTreeView *tree_view,
            GtkTreePath *path);
extern
void gtk_tree_view_map_expanded_rows (GtkTreeView *tree_view,
            GtkTreeViewMappingFunc func,
            gpointer data);
extern
gboolean gtk_tree_view_row_expanded (GtkTreeView *tree_view,
            GtkTreePath *path);
extern
void gtk_tree_view_set_reorderable (GtkTreeView *tree_view,
            gboolean reorderable);
extern
gboolean gtk_tree_view_get_reorderable (GtkTreeView *tree_view);
extern
void gtk_tree_view_set_cursor (GtkTreeView *tree_view,
            GtkTreePath *path,
            GtkTreeViewColumn *focus_column,
            gboolean start_editing);
extern
void gtk_tree_view_set_cursor_on_cell (GtkTreeView *tree_view,
            GtkTreePath *path,
            GtkTreeViewColumn *focus_column,
            GtkCellRenderer *focus_cell,
            gboolean start_editing);
extern
void gtk_tree_view_get_cursor (GtkTreeView *tree_view,
            GtkTreePath **path,
            GtkTreeViewColumn **focus_column);
extern
GdkWindow *gtk_tree_view_get_bin_window (GtkTreeView *tree_view);
extern
gboolean gtk_tree_view_get_path_at_pos (GtkTreeView *tree_view,
            gint x,
            gint y,
            GtkTreePath **path,
            GtkTreeViewColumn **column,
            gint *cell_x,
            gint *cell_y);
extern
void gtk_tree_view_get_cell_area (GtkTreeView *tree_view,
            GtkTreePath *path,
            GtkTreeViewColumn *column,
            GdkRectangle *rect);
extern
void gtk_tree_view_get_background_area (GtkTreeView *tree_view,
            GtkTreePath *path,
            GtkTreeViewColumn *column,
            GdkRectangle *rect);
extern
void gtk_tree_view_get_visible_rect (GtkTreeView *tree_view,
            GdkRectangle *visible_rect);
extern
gboolean gtk_tree_view_get_visible_range (GtkTreeView *tree_view,
            GtkTreePath **start_path,
            GtkTreePath **end_path);
extern
gboolean gtk_tree_view_is_blank_at_pos (GtkTreeView *tree_view,
                                                                    gint x,
                                                                    gint y,
                                                                    GtkTreePath **path,
                                                                    GtkTreeViewColumn **column,
                                                                    gint *cell_x,
                                                                    gint *cell_y);
extern
void gtk_tree_view_enable_model_drag_source (GtkTreeView *tree_view,
            GdkModifierType start_button_mask,
            const GtkTargetEntry *targets,
            gint n_targets,
            GdkDragAction actions);
extern
void gtk_tree_view_enable_model_drag_dest (GtkTreeView *tree_view,
            const GtkTargetEntry *targets,
            gint n_targets,
            GdkDragAction actions);
extern
void gtk_tree_view_unset_rows_drag_source (GtkTreeView *tree_view);
extern
void gtk_tree_view_unset_rows_drag_dest (GtkTreeView *tree_view);
extern
void gtk_tree_view_set_drag_dest_row (GtkTreeView *tree_view,
            GtkTreePath *path,
            GtkTreeViewDropPosition pos);
extern
void gtk_tree_view_get_drag_dest_row (GtkTreeView *tree_view,
            GtkTreePath **path,
            GtkTreeViewDropPosition *pos);
extern
gboolean gtk_tree_view_get_dest_row_at_pos (GtkTreeView *tree_view,
            gint drag_x,
            gint drag_y,
            GtkTreePath **path,
            GtkTreeViewDropPosition *pos);
extern
cairo_surface_t *gtk_tree_view_create_row_drag_icon (GtkTreeView *tree_view,
            GtkTreePath *path);
extern
void gtk_tree_view_set_enable_search (GtkTreeView *tree_view,
        gboolean enable_search);
extern
gboolean gtk_tree_view_get_enable_search (GtkTreeView *tree_view);
extern
gint gtk_tree_view_get_search_column (GtkTreeView *tree_view);
extern
void gtk_tree_view_set_search_column (GtkTreeView *tree_view,
        gint column);
extern
GtkTreeViewSearchEqualFunc gtk_tree_view_get_search_equal_func (GtkTreeView *tree_view);
extern
void gtk_tree_view_set_search_equal_func (GtkTreeView *tree_view,
        GtkTreeViewSearchEqualFunc search_equal_func,
        gpointer search_user_data,
        GDestroyNotify search_destroy);
extern
GtkEntry *gtk_tree_view_get_search_entry (GtkTreeView *tree_view);
extern
void gtk_tree_view_set_search_entry (GtkTreeView *tree_view,
              GtkEntry *entry);
extern
GtkTreeViewSearchPositionFunc gtk_tree_view_get_search_position_func (GtkTreeView *tree_view);
extern
void gtk_tree_view_set_search_position_func (GtkTreeView *tree_view,
              GtkTreeViewSearchPositionFunc func,
              gpointer data,
              GDestroyNotify destroy);
extern
void gtk_tree_view_convert_widget_to_tree_coords (GtkTreeView *tree_view,
       gint wx,
       gint wy,
       gint *tx,
       gint *ty);
extern
void gtk_tree_view_convert_tree_to_widget_coords (GtkTreeView *tree_view,
       gint tx,
       gint ty,
       gint *wx,
       gint *wy);
extern
void gtk_tree_view_convert_widget_to_bin_window_coords (GtkTreeView *tree_view,
       gint wx,
       gint wy,
       gint *bx,
       gint *by);
extern
void gtk_tree_view_convert_bin_window_to_widget_coords (GtkTreeView *tree_view,
       gint bx,
       gint by,
       gint *wx,
       gint *wy);
extern
void gtk_tree_view_convert_tree_to_bin_window_coords (GtkTreeView *tree_view,
       gint tx,
       gint ty,
       gint *bx,
       gint *by);
extern
void gtk_tree_view_convert_bin_window_to_tree_coords (GtkTreeView *tree_view,
       gint bx,
       gint by,
       gint *tx,
       gint *ty);
typedef void (* GtkTreeDestroyCountFunc) (GtkTreeView *tree_view,
        GtkTreePath *path,
        gint children,
        gpointer user_data);
extern
void gtk_tree_view_set_destroy_count_func (GtkTreeView *tree_view,
        GtkTreeDestroyCountFunc func,
        gpointer data,
        GDestroyNotify destroy);
extern
void gtk_tree_view_set_fixed_height_mode (GtkTreeView *tree_view,
           gboolean enable);
extern
gboolean gtk_tree_view_get_fixed_height_mode (GtkTreeView *tree_view);
extern
void gtk_tree_view_set_hover_selection (GtkTreeView *tree_view,
           gboolean hover);
extern
gboolean gtk_tree_view_get_hover_selection (GtkTreeView *tree_view);
extern
void gtk_tree_view_set_hover_expand (GtkTreeView *tree_view,
           gboolean expand);
extern
gboolean gtk_tree_view_get_hover_expand (GtkTreeView *tree_view);
extern
void gtk_tree_view_set_rubber_banding (GtkTreeView *tree_view,
           gboolean enable);
extern
gboolean gtk_tree_view_get_rubber_banding (GtkTreeView *tree_view);
extern
gboolean gtk_tree_view_is_rubber_banding_active (GtkTreeView *tree_view);
extern
GtkTreeViewRowSeparatorFunc gtk_tree_view_get_row_separator_func (GtkTreeView *tree_view);
extern
void gtk_tree_view_set_row_separator_func (GtkTreeView *tree_view,
          GtkTreeViewRowSeparatorFunc func,
          gpointer data,
          GDestroyNotify destroy);
extern
GtkTreeViewGridLines gtk_tree_view_get_grid_lines (GtkTreeView *tree_view);
extern
void gtk_tree_view_set_grid_lines (GtkTreeView *tree_view,
          GtkTreeViewGridLines grid_lines);
extern
gboolean gtk_tree_view_get_enable_tree_lines (GtkTreeView *tree_view);
extern
void gtk_tree_view_set_enable_tree_lines (GtkTreeView *tree_view,
          gboolean enabled);
extern
void gtk_tree_view_set_show_expanders (GtkTreeView *tree_view,
          gboolean enabled);
extern
gboolean gtk_tree_view_get_show_expanders (GtkTreeView *tree_view);
extern
void gtk_tree_view_set_level_indentation (GtkTreeView *tree_view,
          gint indentation);
extern
gint gtk_tree_view_get_level_indentation (GtkTreeView *tree_view);
extern
void gtk_tree_view_set_tooltip_row (GtkTreeView *tree_view,
      GtkTooltip *tooltip,
      GtkTreePath *path);
extern
void gtk_tree_view_set_tooltip_cell (GtkTreeView *tree_view,
      GtkTooltip *tooltip,
      GtkTreePath *path,
      GtkTreeViewColumn *column,
      GtkCellRenderer *cell);
extern
gboolean gtk_tree_view_get_tooltip_context(GtkTreeView *tree_view,
      gint *x,
      gint *y,
      gboolean keyboard_tip,
      GtkTreeModel **model,
      GtkTreePath **path,
      GtkTreeIter *iter);
extern
void gtk_tree_view_set_tooltip_column (GtkTreeView *tree_view,
             gint column);
extern
gint gtk_tree_view_get_tooltip_column (GtkTreeView *tree_view);
typedef struct _GtkComboBox GtkComboBox;
typedef struct _GtkComboBoxClass GtkComboBoxClass;
typedef struct _GtkComboBoxPrivate GtkComboBoxPrivate;
struct _GtkComboBox
{
  GtkBin parent_instance;
  GtkComboBoxPrivate *priv;
};
struct _GtkComboBoxClass
{
  GtkBinClass parent_class;
  void (* changed) (GtkComboBox *combo_box);
  gchar *(* format_entry_text) (GtkComboBox *combo_box,
      const gchar *path);
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
};
extern
GType gtk_combo_box_get_type (void) __attribute__((__const__));
extern
GtkWidget *gtk_combo_box_new (void);
extern
GtkWidget *gtk_combo_box_new_with_area (GtkCellArea *area);
extern
GtkWidget *gtk_combo_box_new_with_area_and_entry (GtkCellArea *area);
extern
GtkWidget *gtk_combo_box_new_with_entry (void);
extern
GtkWidget *gtk_combo_box_new_with_model (GtkTreeModel *model);
extern
GtkWidget *gtk_combo_box_new_with_model_and_entry (GtkTreeModel *model);
extern
gint gtk_combo_box_get_wrap_width (GtkComboBox *combo_box);
extern
void gtk_combo_box_set_wrap_width (GtkComboBox *combo_box,
                                                    gint width);
extern
gint gtk_combo_box_get_row_span_column (GtkComboBox *combo_box);
extern
void gtk_combo_box_set_row_span_column (GtkComboBox *combo_box,
                                                    gint row_span);
extern
gint gtk_combo_box_get_column_span_column (GtkComboBox *combo_box);
extern
void gtk_combo_box_set_column_span_column (GtkComboBox *combo_box,
                                                    gint column_span);
extern
gboolean gtk_combo_box_get_add_tearoffs (GtkComboBox *combo_box);
extern
void gtk_combo_box_set_add_tearoffs (GtkComboBox *combo_box,
                                                    gboolean add_tearoffs);
extern
const gchar * gtk_combo_box_get_title (GtkComboBox *combo_box);
extern
void gtk_combo_box_set_title (GtkComboBox *combo_box,
                                                    const gchar *title);
extern
gboolean gtk_combo_box_get_focus_on_click (GtkComboBox *combo);
extern
void gtk_combo_box_set_focus_on_click (GtkComboBox *combo,
                                                    gboolean focus_on_click);
extern
gint gtk_combo_box_get_active (GtkComboBox *combo_box);
extern
void gtk_combo_box_set_active (GtkComboBox *combo_box,
                                              gint index_);
extern
gboolean gtk_combo_box_get_active_iter (GtkComboBox *combo_box,
                                              GtkTreeIter *iter);
extern
void gtk_combo_box_set_active_iter (GtkComboBox *combo_box,
                                              GtkTreeIter *iter);
extern
void gtk_combo_box_set_model (GtkComboBox *combo_box,
                                              GtkTreeModel *model);
extern
GtkTreeModel *gtk_combo_box_get_model (GtkComboBox *combo_box);
extern
GtkTreeViewRowSeparatorFunc gtk_combo_box_get_row_separator_func (GtkComboBox *combo_box);
extern
void gtk_combo_box_set_row_separator_func (GtkComboBox *combo_box,
                                                                  GtkTreeViewRowSeparatorFunc func,
                                                                  gpointer data,
                                                                  GDestroyNotify destroy);
extern
void gtk_combo_box_set_button_sensitivity (GtkComboBox *combo_box,
                                                         GtkSensitivityType sensitivity);
extern
GtkSensitivityType gtk_combo_box_get_button_sensitivity (GtkComboBox *combo_box);
extern
gboolean gtk_combo_box_get_has_entry (GtkComboBox *combo_box);
extern
void gtk_combo_box_set_entry_text_column (GtkComboBox *combo_box,
                                                         gint text_column);
extern
gint gtk_combo_box_get_entry_text_column (GtkComboBox *combo_box);
extern
void gtk_combo_box_set_popup_fixed_width (GtkComboBox *combo_box,
                                                         gboolean fixed);
extern
gboolean gtk_combo_box_get_popup_fixed_width (GtkComboBox *combo_box);
extern
void gtk_combo_box_popup (GtkComboBox *combo_box);
extern
void gtk_combo_box_popup_for_device (GtkComboBox *combo_box,
                                              GdkDevice *device);
extern
void gtk_combo_box_popdown (GtkComboBox *combo_box);
extern
AtkObject* gtk_combo_box_get_popup_accessible (GtkComboBox *combo_box);
extern
gint gtk_combo_box_get_id_column (GtkComboBox *combo_box);
extern
void gtk_combo_box_set_id_column (GtkComboBox *combo_box,
                                                  gint id_column);
extern
const gchar * gtk_combo_box_get_active_id (GtkComboBox *combo_box);
extern
gboolean gtk_combo_box_set_active_id (GtkComboBox *combo_box,
                                                  const gchar *active_id);
typedef struct _GtkAppChooserButton GtkAppChooserButton;
typedef struct _GtkAppChooserButtonClass GtkAppChooserButtonClass;
typedef struct _GtkAppChooserButtonPrivate GtkAppChooserButtonPrivate;
struct _GtkAppChooserButton {
  GtkComboBox parent;
  GtkAppChooserButtonPrivate *priv;
};
struct _GtkAppChooserButtonClass {
  GtkComboBoxClass parent_class;
  void (* custom_item_activated) (GtkAppChooserButton *self,
                                  const gchar *item_name);
  gpointer padding[16];
};
extern
GType gtk_app_chooser_button_get_type (void) __attribute__((__const__));
extern
GtkWidget * gtk_app_chooser_button_new (const gchar *content_type);
extern
void gtk_app_chooser_button_append_separator (GtkAppChooserButton *self);
extern
void gtk_app_chooser_button_append_custom_item (GtkAppChooserButton *self,
                                                       const gchar *name,
                                                       const gchar *label,
                                                       GIcon *icon);
extern
void gtk_app_chooser_button_set_active_custom_item (GtkAppChooserButton *self,
                                                        const gchar *name);
extern
void gtk_app_chooser_button_set_show_dialog_item (GtkAppChooserButton *self,
                                                       gboolean setting);
extern
gboolean gtk_app_chooser_button_get_show_dialog_item (GtkAppChooserButton *self);
extern
void gtk_app_chooser_button_set_heading (GtkAppChooserButton *self,
                                                       const gchar *heading);
extern
const gchar *
         gtk_app_chooser_button_get_heading (GtkAppChooserButton *self);
extern
void gtk_app_chooser_button_set_show_default_item (GtkAppChooserButton *self,
                                                       gboolean setting);
extern
gboolean gtk_app_chooser_button_get_show_default_item (GtkAppChooserButton *self);
typedef struct _GtkApplicationWindowPrivate GtkApplicationWindowPrivate;
typedef struct _GtkApplicationWindowClass GtkApplicationWindowClass;
typedef struct _GtkApplicationWindow GtkApplicationWindow;
struct _GtkApplicationWindow
{
  GtkWindow parent_instance;
  GtkApplicationWindowPrivate *priv;
};
struct _GtkApplicationWindowClass
{
  GtkWindowClass parent_class;
  gpointer padding[14];
};
extern
GType gtk_application_window_get_type (void) __attribute__((__const__));
extern
GtkWidget * gtk_application_window_new (GtkApplication *application);
extern
void gtk_application_window_set_show_menubar (GtkApplicationWindow *window,
                                                     gboolean show_menubar);
extern
gboolean gtk_application_window_get_show_menubar (GtkApplicationWindow *window);
extern
guint gtk_application_window_get_id (GtkApplicationWindow *window);
typedef struct _GtkFrame GtkFrame;
typedef struct _GtkFramePrivate GtkFramePrivate;
typedef struct _GtkFrameClass GtkFrameClass;
struct _GtkFrame
{
  GtkBin bin;
  GtkFramePrivate *priv;
};
struct _GtkFrameClass
{
  GtkBinClass parent_class;
  void (*compute_child_allocation) (GtkFrame *frame,
                                    GtkAllocation *allocation);
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_frame_get_type (void) __attribute__((__const__));
extern
GtkWidget* gtk_frame_new (const gchar *label);
extern
void gtk_frame_set_label (GtkFrame *frame,
                                   const gchar *label);
extern
const gchar * gtk_frame_get_label (GtkFrame *frame);
extern
void gtk_frame_set_label_widget (GtkFrame *frame,
           GtkWidget *label_widget);
extern
GtkWidget *gtk_frame_get_label_widget (GtkFrame *frame);
extern
void gtk_frame_set_label_align (GtkFrame *frame,
           gfloat xalign,
           gfloat yalign);
extern
void gtk_frame_get_label_align (GtkFrame *frame,
           gfloat *xalign,
           gfloat *yalign);
extern
void gtk_frame_set_shadow_type (GtkFrame *frame,
           GtkShadowType type);
extern
GtkShadowType gtk_frame_get_shadow_type (GtkFrame *frame);
typedef struct _GtkAspectFrame GtkAspectFrame;
typedef struct _GtkAspectFramePrivate GtkAspectFramePrivate;
typedef struct _GtkAspectFrameClass GtkAspectFrameClass;
struct _GtkAspectFrame
{
  GtkFrame frame;
  GtkAspectFramePrivate *priv;
};
struct _GtkAspectFrameClass
{
  GtkFrameClass parent_class;
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_aspect_frame_get_type (void) __attribute__((__const__));
extern
GtkWidget* gtk_aspect_frame_new (const gchar *label,
     gfloat xalign,
     gfloat yalign,
     gfloat ratio,
     gboolean obey_child);
extern
void gtk_aspect_frame_set (GtkAspectFrame *aspect_frame,
     gfloat xalign,
     gfloat yalign,
     gfloat ratio,
     gboolean obey_child);
typedef enum
{
  GTK_ASSISTANT_PAGE_CONTENT,
  GTK_ASSISTANT_PAGE_INTRO,
  GTK_ASSISTANT_PAGE_CONFIRM,
  GTK_ASSISTANT_PAGE_SUMMARY,
  GTK_ASSISTANT_PAGE_PROGRESS,
  GTK_ASSISTANT_PAGE_CUSTOM
} GtkAssistantPageType;
typedef struct _GtkAssistant GtkAssistant;
typedef struct _GtkAssistantPrivate GtkAssistantPrivate;
typedef struct _GtkAssistantClass GtkAssistantClass;
struct _GtkAssistant
{
  GtkWindow parent;
  GtkAssistantPrivate *priv;
};
struct _GtkAssistantClass
{
  GtkWindowClass parent_class;
  void (* prepare) (GtkAssistant *assistant, GtkWidget *page);
  void (* apply) (GtkAssistant *assistant);
  void (* close) (GtkAssistant *assistant);
  void (* cancel) (GtkAssistant *assistant);
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
  void (*_gtk_reserved5) (void);
};
typedef gint (*GtkAssistantPageFunc) (gint current_page, gpointer data);
extern
GType gtk_assistant_get_type (void) __attribute__((__const__));
extern
GtkWidget *gtk_assistant_new (void);
extern
void gtk_assistant_next_page (GtkAssistant *assistant);
extern
void gtk_assistant_previous_page (GtkAssistant *assistant);
extern
gint gtk_assistant_get_current_page (GtkAssistant *assistant);
extern
void gtk_assistant_set_current_page (GtkAssistant *assistant,
                                                           gint page_num);
extern
gint gtk_assistant_get_n_pages (GtkAssistant *assistant);
extern
GtkWidget *gtk_assistant_get_nth_page (GtkAssistant *assistant,
                                                           gint page_num);
extern
gint gtk_assistant_prepend_page (GtkAssistant *assistant,
                                                           GtkWidget *page);
extern
gint gtk_assistant_append_page (GtkAssistant *assistant,
                                                           GtkWidget *page);
extern
gint gtk_assistant_insert_page (GtkAssistant *assistant,
                                                           GtkWidget *page,
                                                           gint position);
extern
void gtk_assistant_remove_page (GtkAssistant *assistant,
                                                           gint page_num);
extern
void gtk_assistant_set_forward_page_func (GtkAssistant *assistant,
                                                           GtkAssistantPageFunc page_func,
                                                           gpointer data,
                                                           GDestroyNotify destroy);
extern
void gtk_assistant_set_page_type (GtkAssistant *assistant,
                                                           GtkWidget *page,
                                                           GtkAssistantPageType type);
extern
GtkAssistantPageType gtk_assistant_get_page_type (GtkAssistant *assistant,
                                                           GtkWidget *page);
extern
void gtk_assistant_set_page_title (GtkAssistant *assistant,
                                                           GtkWidget *page,
                                                           const gchar *title);
extern
const gchar * gtk_assistant_get_page_title (GtkAssistant *assistant,
                                                           GtkWidget *page);
extern
void gtk_assistant_set_page_header_image (GtkAssistant *assistant,
                                                           GtkWidget *page,
                                                           GdkPixbuf *pixbuf);
extern
GdkPixbuf *gtk_assistant_get_page_header_image (GtkAssistant *assistant,
                                                           GtkWidget *page);
extern
void gtk_assistant_set_page_side_image (GtkAssistant *assistant,
                                                           GtkWidget *page,
                                                           GdkPixbuf *pixbuf);
extern
GdkPixbuf *gtk_assistant_get_page_side_image (GtkAssistant *assistant,
                                                           GtkWidget *page);
extern
void gtk_assistant_set_page_complete (GtkAssistant *assistant,
                                                           GtkWidget *page,
                                                           gboolean complete);
extern
gboolean gtk_assistant_get_page_complete (GtkAssistant *assistant,
                                                           GtkWidget *page);
extern
void gtk_assistant_add_action_widget (GtkAssistant *assistant,
                                                           GtkWidget *child);
extern
void gtk_assistant_remove_action_widget (GtkAssistant *assistant,
                                                           GtkWidget *child);
extern
void gtk_assistant_update_buttons_state (GtkAssistant *assistant);
extern
void gtk_assistant_commit (GtkAssistant *assistant);
extern
void gtk_assistant_set_page_has_padding (GtkAssistant *assistant,
                                                           GtkWidget *page,
                                                           gboolean has_padding);
extern
gboolean gtk_assistant_get_page_has_padding (GtkAssistant *assistant,
                                                           GtkWidget *page);
typedef struct _GtkButtonBox GtkButtonBox;
typedef struct _GtkButtonBoxPrivate GtkButtonBoxPrivate;
typedef struct _GtkButtonBoxClass GtkButtonBoxClass;
struct _GtkButtonBox
{
  GtkBox box;
  GtkButtonBoxPrivate *priv;
};
struct _GtkButtonBoxClass
{
  GtkBoxClass parent_class;
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
typedef enum
{
  GTK_BUTTONBOX_SPREAD = 1,
  GTK_BUTTONBOX_EDGE,
  GTK_BUTTONBOX_START,
  GTK_BUTTONBOX_END,
  GTK_BUTTONBOX_CENTER,
  GTK_BUTTONBOX_EXPAND
} GtkButtonBoxStyle;
extern
GType gtk_button_box_get_type (void) __attribute__((__const__));
extern
GtkWidget * gtk_button_box_new (GtkOrientation orientation);
extern
GtkButtonBoxStyle gtk_button_box_get_layout (GtkButtonBox *widget);
extern
void gtk_button_box_set_layout (GtkButtonBox *widget,
                                                      GtkButtonBoxStyle layout_style);
extern
gboolean gtk_button_box_get_child_secondary (GtkButtonBox *widget,
                                                      GtkWidget *child);
extern
void gtk_button_box_set_child_secondary (GtkButtonBox *widget,
                                                      GtkWidget *child,
                                                      gboolean is_secondary);
extern
gboolean gtk_button_box_get_child_non_homogeneous (GtkButtonBox *widget,
                                                            GtkWidget *child);
extern
void gtk_button_box_set_child_non_homogeneous (GtkButtonBox *widget,
                                                            GtkWidget *child,
                                                            gboolean non_homogeneous);
typedef struct _GtkBindingSet GtkBindingSet;
typedef struct _GtkBindingEntry GtkBindingEntry;
typedef struct _GtkBindingSignal GtkBindingSignal;
typedef struct _GtkBindingArg GtkBindingArg;
struct _GtkBindingSet
{
  gchar *set_name;
  gint priority;
  GSList *widget_path_pspecs;
  GSList *widget_class_pspecs;
  GSList *class_branch_pspecs;
  GtkBindingEntry *entries;
  GtkBindingEntry *current;
  guint parsed : 1;
};
struct _GtkBindingEntry
{
  guint keyval;
  GdkModifierType modifiers;
  GtkBindingSet *binding_set;
  guint destroyed : 1;
  guint in_emission : 1;
  guint marks_unbound : 1;
  GtkBindingEntry *set_next;
  GtkBindingEntry *hash_next;
  GtkBindingSignal *signals;
};
struct _GtkBindingArg
{
  GType arg_type;
  union {
    glong long_data;
    gdouble double_data;
    gchar *string_data;
  } d;
};
struct _GtkBindingSignal
{
  GtkBindingSignal *next;
  gchar *signal_name;
  guint n_args;
  GtkBindingArg *args;
};
extern
GtkBindingSet *gtk_binding_set_new (const gchar *set_name);
extern
GtkBindingSet *gtk_binding_set_by_class (gpointer object_class);
extern
GtkBindingSet *gtk_binding_set_find (const gchar *set_name);
extern
gboolean gtk_bindings_activate (GObject *object,
                                              guint keyval,
                                              GdkModifierType modifiers);
extern
gboolean gtk_bindings_activate_event (GObject *object,
                                              GdkEventKey *event);
extern
gboolean gtk_binding_set_activate (GtkBindingSet *binding_set,
                                              guint keyval,
                                              GdkModifierType modifiers,
                                              GObject *object);
extern
void gtk_binding_entry_skip (GtkBindingSet *binding_set,
                                              guint keyval,
                                              GdkModifierType modifiers);
extern
void gtk_binding_entry_add_signal (GtkBindingSet *binding_set,
                                              guint keyval,
                                              GdkModifierType modifiers,
                                              const gchar *signal_name,
                                              guint n_args,
                                              ...);
extern
void gtk_binding_entry_add_signall (GtkBindingSet *binding_set,
                                              guint keyval,
                                              GdkModifierType modifiers,
                                              const gchar *signal_name,
                                              GSList *binding_args);
extern
GTokenType gtk_binding_entry_add_signal_from_string
                                             (GtkBindingSet *binding_set,
                                              const gchar *signal_desc);
extern
void gtk_binding_entry_remove (GtkBindingSet *binding_set,
                                              guint keyval,
                                              GdkModifierType modifiers);
typedef struct _GtkBuilderClass GtkBuilderClass;
typedef struct _GtkBuilderPrivate GtkBuilderPrivate;
typedef enum
{
  GTK_BUILDER_ERROR_INVALID_TYPE_FUNCTION,
  GTK_BUILDER_ERROR_UNHANDLED_TAG,
  GTK_BUILDER_ERROR_MISSING_ATTRIBUTE,
  GTK_BUILDER_ERROR_INVALID_ATTRIBUTE,
  GTK_BUILDER_ERROR_INVALID_TAG,
  GTK_BUILDER_ERROR_MISSING_PROPERTY_VALUE,
  GTK_BUILDER_ERROR_INVALID_VALUE,
  GTK_BUILDER_ERROR_VERSION_MISMATCH,
  GTK_BUILDER_ERROR_DUPLICATE_ID,
  GTK_BUILDER_ERROR_OBJECT_TYPE_REFUSED,
  GTK_BUILDER_ERROR_TEMPLATE_MISMATCH,
  GTK_BUILDER_ERROR_INVALID_PROPERTY,
  GTK_BUILDER_ERROR_INVALID_SIGNAL,
  GTK_BUILDER_ERROR_INVALID_ID
} GtkBuilderError;
extern
GQuark gtk_builder_error_quark (void);
struct _GtkBuilder
{
  GObject parent_instance;
  GtkBuilderPrivate *priv;
};
struct _GtkBuilderClass
{
  GObjectClass parent_class;
  GType (* get_type_from_name) (GtkBuilder *builder,
                                const char *type_name);
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
  void (*_gtk_reserved5) (void);
  void (*_gtk_reserved6) (void);
  void (*_gtk_reserved7) (void);
  void (*_gtk_reserved8) (void);
};
extern
GType gtk_builder_get_type (void) __attribute__((__const__));
extern
GtkBuilder* gtk_builder_new (void);
extern
guint gtk_builder_add_from_file (GtkBuilder *builder,
                                                  const gchar *filename,
                                                  GError **error);
extern
guint gtk_builder_add_from_resource (GtkBuilder *builder,
                                                  const gchar *resource_path,
                                                  GError **error);
extern
guint gtk_builder_add_from_string (GtkBuilder *builder,
                                                  const gchar *buffer,
                                                  gsize length,
                                                  GError **error);
extern
guint gtk_builder_add_objects_from_file (GtkBuilder *builder,
                                                  const gchar *filename,
                                                  gchar **object_ids,
                                                  GError **error);
extern
guint gtk_builder_add_objects_from_resource(GtkBuilder *builder,
                                                  const gchar *resource_path,
                                                  gchar **object_ids,
                                                  GError **error);
extern
guint gtk_builder_add_objects_from_string (GtkBuilder *builder,
                                                  const gchar *buffer,
                                                  gsize length,
                                                  gchar **object_ids,
                                                  GError **error);
extern
GObject* gtk_builder_get_object (GtkBuilder *builder,
                                                  const gchar *name);
extern
GSList* gtk_builder_get_objects (GtkBuilder *builder);
extern
void gtk_builder_expose_object (GtkBuilder *builder,
                                                  const gchar *name,
                                                  GObject *object);
extern
void gtk_builder_connect_signals (GtkBuilder *builder,
        gpointer user_data);
extern
void gtk_builder_connect_signals_full (GtkBuilder *builder,
                                                  GtkBuilderConnectFunc func,
        gpointer user_data);
extern
void gtk_builder_set_translation_domain (GtkBuilder *builder,
                                                  const gchar *domain);
extern
const gchar* gtk_builder_get_translation_domain (GtkBuilder *builder);
extern
GType gtk_builder_get_type_from_name (GtkBuilder *builder,
                                                  const char *type_name);
extern
gboolean gtk_builder_value_from_string (GtkBuilder *builder,
        GParamSpec *pspec,
                                                  const gchar *string,
                                                  GValue *value,
        GError **error);
extern
gboolean gtk_builder_value_from_string_type (GtkBuilder *builder,
        GType type,
                                                  const gchar *string,
                                                  GValue *value,
        GError **error);
extern
GtkBuilder * gtk_builder_new_from_file (const gchar *filename);
extern
GtkBuilder * gtk_builder_new_from_resource (const gchar *resource_path);
extern
GtkBuilder * gtk_builder_new_from_string (const gchar *string,
                                                  gssize length);
extern
void gtk_builder_add_callback_symbol (GtkBuilder *builder,
        const gchar *callback_name,
        GCallback callback_symbol);
extern
void gtk_builder_add_callback_symbols (GtkBuilder *builder,
        const gchar *first_callback_name,
        GCallback first_callback_symbol,
        ...) __attribute__((__sentinel__));
extern
GCallback gtk_builder_lookup_callback_symbol (GtkBuilder *builder,
        const gchar *callback_name);
extern
void gtk_builder_set_application (GtkBuilder *builder,
                                                  GtkApplication *application);
extern
GtkApplication * gtk_builder_get_application (GtkBuilder *builder);
typedef struct _GtkBuildable GtkBuildable;
typedef struct _GtkBuildableIface GtkBuildableIface;
struct _GtkBuildableIface
{
  GTypeInterface g_iface;
  void (* set_name) (GtkBuildable *buildable,
                                            const gchar *name);
  const gchar * (* get_name) (GtkBuildable *buildable);
  void (* add_child) (GtkBuildable *buildable,
         GtkBuilder *builder,
         GObject *child,
         const gchar *type);
  void (* set_buildable_property) (GtkBuildable *buildable,
         GtkBuilder *builder,
         const gchar *name,
         const GValue *value);
  GObject * (* construct_child) (GtkBuildable *buildable,
         GtkBuilder *builder,
         const gchar *name);
  gboolean (* custom_tag_start) (GtkBuildable *buildable,
         GtkBuilder *builder,
         GObject *child,
         const gchar *tagname,
         GMarkupParser *parser,
         gpointer *data);
  void (* custom_tag_end) (GtkBuildable *buildable,
         GtkBuilder *builder,
         GObject *child,
         const gchar *tagname,
         gpointer *data);
  void (* custom_finished) (GtkBuildable *buildable,
         GtkBuilder *builder,
         GObject *child,
         const gchar *tagname,
         gpointer data);
  void (* parser_finished) (GtkBuildable *buildable,
         GtkBuilder *builder);
  GObject * (* get_internal_child) (GtkBuildable *buildable,
         GtkBuilder *builder,
         const gchar *childname);
};
extern
GType gtk_buildable_get_type (void) __attribute__((__const__));
extern
void gtk_buildable_set_name (GtkBuildable *buildable,
      const gchar *name);
extern
const gchar * gtk_buildable_get_name (GtkBuildable *buildable);
extern
void gtk_buildable_add_child (GtkBuildable *buildable,
      GtkBuilder *builder,
      GObject *child,
      const gchar *type);
extern
void gtk_buildable_set_buildable_property (GtkBuildable *buildable,
      GtkBuilder *builder,
      const gchar *name,
      const GValue *value);
extern
GObject * gtk_buildable_construct_child (GtkBuildable *buildable,
      GtkBuilder *builder,
      const gchar *name);
extern
gboolean gtk_buildable_custom_tag_start (GtkBuildable *buildable,
      GtkBuilder *builder,
      GObject *child,
      const gchar *tagname,
      GMarkupParser *parser,
      gpointer *data);
extern
void gtk_buildable_custom_tag_end (GtkBuildable *buildable,
      GtkBuilder *builder,
      GObject *child,
      const gchar *tagname,
      gpointer *data);
extern
void gtk_buildable_custom_finished (GtkBuildable *buildable,
      GtkBuilder *builder,
      GObject *child,
      const gchar *tagname,
      gpointer data);
extern
void gtk_buildable_parser_finished (GtkBuildable *buildable,
      GtkBuilder *builder);
extern
GObject * gtk_buildable_get_internal_child (GtkBuildable *buildable,
      GtkBuilder *builder,
      const gchar *childname);
typedef struct _GtkButton GtkButton;
typedef struct _GtkButtonPrivate GtkButtonPrivate;
typedef struct _GtkButtonClass GtkButtonClass;
struct _GtkButton
{
  GtkBin bin;
  GtkButtonPrivate *priv;
};
struct _GtkButtonClass
{
  GtkBinClass parent_class;
  void (* pressed) (GtkButton *button);
  void (* released) (GtkButton *button);
  void (* clicked) (GtkButton *button);
  void (* enter) (GtkButton *button);
  void (* leave) (GtkButton *button);
  void (* activate) (GtkButton *button);
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_button_get_type (void) __attribute__((__const__));
extern
GtkWidget* gtk_button_new (void);
extern
GtkWidget* gtk_button_new_with_label (const gchar *label);
extern
GtkWidget* gtk_button_new_from_icon_name (const gchar *icon_name,
           GtkIconSize size);
extern
GtkWidget* gtk_button_new_from_stock (const gchar *stock_id);
extern
GtkWidget* gtk_button_new_with_mnemonic (const gchar *label);
extern
void gtk_button_clicked (GtkButton *button);
extern
void gtk_button_pressed (GtkButton *button);
extern
void gtk_button_released (GtkButton *button);
extern
void gtk_button_enter (GtkButton *button);
extern
void gtk_button_leave (GtkButton *button);
extern
void gtk_button_set_relief (GtkButton *button,
           GtkReliefStyle relief);
extern
GtkReliefStyle gtk_button_get_relief (GtkButton *button);
extern
void gtk_button_set_label (GtkButton *button,
           const gchar *label);
extern
const gchar * gtk_button_get_label (GtkButton *button);
extern
void gtk_button_set_use_underline (GtkButton *button,
           gboolean use_underline);
extern
gboolean gtk_button_get_use_underline (GtkButton *button);
extern
void gtk_button_set_use_stock (GtkButton *button,
           gboolean use_stock);
extern
gboolean gtk_button_get_use_stock (GtkButton *button);
extern
void gtk_button_set_focus_on_click (GtkButton *button,
           gboolean focus_on_click);
extern
gboolean gtk_button_get_focus_on_click (GtkButton *button);
extern
void gtk_button_set_alignment (GtkButton *button,
           gfloat xalign,
           gfloat yalign);
extern
void gtk_button_get_alignment (GtkButton *button,
           gfloat *xalign,
           gfloat *yalign);
extern
void gtk_button_set_image (GtkButton *button,
                  GtkWidget *image);
extern
GtkWidget* gtk_button_get_image (GtkButton *button);
extern
void gtk_button_set_image_position (GtkButton *button,
           GtkPositionType position);
extern
GtkPositionType gtk_button_get_image_position (GtkButton *button);
extern
void gtk_button_set_always_show_image (GtkButton *button,
                                                        gboolean always_show);
extern
gboolean gtk_button_get_always_show_image (GtkButton *button);
extern
GdkWindow* gtk_button_get_event_window (GtkButton *button);
typedef struct _GtkCalendar GtkCalendar;
typedef struct _GtkCalendarClass GtkCalendarClass;
typedef struct _GtkCalendarPrivate GtkCalendarPrivate;
typedef enum
{
  GTK_CALENDAR_SHOW_HEADING = 1 << 0,
  GTK_CALENDAR_SHOW_DAY_NAMES = 1 << 1,
  GTK_CALENDAR_NO_MONTH_CHANGE = 1 << 2,
  GTK_CALENDAR_SHOW_WEEK_NUMBERS = 1 << 3,
  GTK_CALENDAR_SHOW_DETAILS = 1 << 5
} GtkCalendarDisplayOptions;
typedef gchar* (*GtkCalendarDetailFunc) (GtkCalendar *calendar,
                                         guint year,
                                         guint month,
                                         guint day,
                                         gpointer user_data);
struct _GtkCalendar
{
  GtkWidget widget;
  GtkCalendarPrivate *priv;
};
struct _GtkCalendarClass
{
  GtkWidgetClass parent_class;
  void (* month_changed) (GtkCalendar *calendar);
  void (* day_selected) (GtkCalendar *calendar);
  void (* day_selected_double_click) (GtkCalendar *calendar);
  void (* prev_month) (GtkCalendar *calendar);
  void (* next_month) (GtkCalendar *calendar);
  void (* prev_year) (GtkCalendar *calendar);
  void (* next_year) (GtkCalendar *calendar);
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_calendar_get_type (void) __attribute__((__const__));
extern
GtkWidget* gtk_calendar_new (void);
extern
void gtk_calendar_select_month (GtkCalendar *calendar,
      guint month,
      guint year);
extern
void gtk_calendar_select_day (GtkCalendar *calendar,
      guint day);
extern
void gtk_calendar_mark_day (GtkCalendar *calendar,
      guint day);
extern
void gtk_calendar_unmark_day (GtkCalendar *calendar,
      guint day);
extern
void gtk_calendar_clear_marks (GtkCalendar *calendar);
extern
void gtk_calendar_set_display_options (GtkCalendar *calendar,
          GtkCalendarDisplayOptions flags);
extern
GtkCalendarDisplayOptions
           gtk_calendar_get_display_options (GtkCalendar *calendar);
extern
void gtk_calendar_get_date (GtkCalendar *calendar,
      guint *year,
      guint *month,
      guint *day);
extern
void gtk_calendar_set_detail_func (GtkCalendar *calendar,
                                         GtkCalendarDetailFunc func,
                                         gpointer data,
                                         GDestroyNotify destroy);
extern
void gtk_calendar_set_detail_width_chars (GtkCalendar *calendar,
                                                gint chars);
extern
void gtk_calendar_set_detail_height_rows (GtkCalendar *calendar,
                                                gint rows);
extern
gint gtk_calendar_get_detail_width_chars (GtkCalendar *calendar);
extern
gint gtk_calendar_get_detail_height_rows (GtkCalendar *calendar);
extern
gboolean gtk_calendar_get_day_is_marked (GtkCalendar *calendar,
                                                guint day);
typedef struct _GtkCellAreaBox GtkCellAreaBox;
typedef struct _GtkCellAreaBoxClass GtkCellAreaBoxClass;
typedef struct _GtkCellAreaBoxPrivate GtkCellAreaBoxPrivate;
struct _GtkCellAreaBox
{
  GtkCellArea parent_instance;
  GtkCellAreaBoxPrivate *priv;
};
struct _GtkCellAreaBoxClass
{
  GtkCellAreaClass parent_class;
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_cell_area_box_get_type (void) __attribute__((__const__));
extern
GtkCellArea *gtk_cell_area_box_new (void);
extern
void gtk_cell_area_box_pack_start (GtkCellAreaBox *box,
                                            GtkCellRenderer *renderer,
                                            gboolean expand,
                                            gboolean align,
                                            gboolean fixed);
extern
void gtk_cell_area_box_pack_end (GtkCellAreaBox *box,
                                            GtkCellRenderer *renderer,
                                            gboolean expand,
                                            gboolean align,
                                            gboolean fixed);
extern
gint gtk_cell_area_box_get_spacing (GtkCellAreaBox *box);
extern
void gtk_cell_area_box_set_spacing (GtkCellAreaBox *box,
                                            gint spacing);
gboolean _gtk_cell_area_box_group_visible (GtkCellAreaBox *box,
                                              gint group_idx);
typedef struct _GtkCellAreaContextPrivate GtkCellAreaContextPrivate;
typedef struct _GtkCellAreaContextClass GtkCellAreaContextClass;
struct _GtkCellAreaContext
{
  GObject parent_instance;
  GtkCellAreaContextPrivate *priv;
};
struct _GtkCellAreaContextClass
{
  GObjectClass parent_class;
  void (* allocate) (GtkCellAreaContext *context,
                                              gint width,
                                              gint height);
  void (* reset) (GtkCellAreaContext *context);
  void (* get_preferred_height_for_width) (GtkCellAreaContext *context,
                                              gint width,
                                              gint *minimum_height,
                                              gint *natural_height);
  void (* get_preferred_width_for_height) (GtkCellAreaContext *context,
                                              gint height,
                                              gint *minimum_width,
                                              gint *natural_width);
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
  void (*_gtk_reserved5) (void);
  void (*_gtk_reserved6) (void);
};
extern
GType gtk_cell_area_context_get_type (void) __attribute__((__const__));
extern
GtkCellArea *gtk_cell_area_context_get_area (GtkCellAreaContext *context);
extern
void gtk_cell_area_context_allocate (GtkCellAreaContext *context,
                                                                    gint width,
                                                                    gint height);
extern
void gtk_cell_area_context_reset (GtkCellAreaContext *context);
extern
void gtk_cell_area_context_get_preferred_width (GtkCellAreaContext *context,
                                                                   gint *minimum_width,
                                                                   gint *natural_width);
extern
void gtk_cell_area_context_get_preferred_height (GtkCellAreaContext *context,
                                                                   gint *minimum_height,
                                                                   gint *natural_height);
extern
void gtk_cell_area_context_get_preferred_height_for_width (GtkCellAreaContext *context,
                                                                   gint width,
                                                                   gint *minimum_height,
                                                                   gint *natural_height);
extern
void gtk_cell_area_context_get_preferred_width_for_height (GtkCellAreaContext *context,
                                                                   gint height,
                                                                   gint *minimum_width,
                                                                   gint *natural_width);
extern
void gtk_cell_area_context_get_allocation (GtkCellAreaContext *context,
                                                                   gint *width,
                                                                   gint *height);
extern
void gtk_cell_area_context_push_preferred_width (GtkCellAreaContext *context,
                                                          gint minimum_width,
                                                          gint natural_width);
extern
void gtk_cell_area_context_push_preferred_height (GtkCellAreaContext *context,
                                                          gint minimum_height,
                                                          gint natural_height);
typedef struct _GtkCellLayout GtkCellLayout;
typedef struct _GtkCellLayoutIface GtkCellLayoutIface;
typedef void (* GtkCellLayoutDataFunc) (GtkCellLayout *cell_layout,
                                        GtkCellRenderer *cell,
                                        GtkTreeModel *tree_model,
                                        GtkTreeIter *iter,
                                        gpointer data);
struct _GtkCellLayoutIface
{
  GTypeInterface g_iface;
  void (* pack_start) (GtkCellLayout *cell_layout,
                               GtkCellRenderer *cell,
                               gboolean expand);
  void (* pack_end) (GtkCellLayout *cell_layout,
                               GtkCellRenderer *cell,
                               gboolean expand);
  void (* clear) (GtkCellLayout *cell_layout);
  void (* add_attribute) (GtkCellLayout *cell_layout,
                               GtkCellRenderer *cell,
                               const gchar *attribute,
                               gint column);
  void (* set_cell_data_func) (GtkCellLayout *cell_layout,
                               GtkCellRenderer *cell,
                               GtkCellLayoutDataFunc func,
                               gpointer func_data,
                               GDestroyNotify destroy);
  void (* clear_attributes) (GtkCellLayout *cell_layout,
                               GtkCellRenderer *cell);
  void (* reorder) (GtkCellLayout *cell_layout,
                               GtkCellRenderer *cell,
                               gint position);
  GList* (* get_cells) (GtkCellLayout *cell_layout);
  GtkCellArea *(* get_area) (GtkCellLayout *cell_layout);
};
extern
GType gtk_cell_layout_get_type (void) __attribute__((__const__));
extern
void gtk_cell_layout_pack_start (GtkCellLayout *cell_layout,
                                          GtkCellRenderer *cell,
                                          gboolean expand);
extern
void gtk_cell_layout_pack_end (GtkCellLayout *cell_layout,
                                          GtkCellRenderer *cell,
                                          gboolean expand);
extern
GList *gtk_cell_layout_get_cells (GtkCellLayout *cell_layout);
extern
void gtk_cell_layout_clear (GtkCellLayout *cell_layout);
extern
void gtk_cell_layout_set_attributes (GtkCellLayout *cell_layout,
                                          GtkCellRenderer *cell,
                                          ...) __attribute__((__sentinel__));
extern
void gtk_cell_layout_add_attribute (GtkCellLayout *cell_layout,
                                          GtkCellRenderer *cell,
                                          const gchar *attribute,
                                          gint column);
extern
void gtk_cell_layout_set_cell_data_func (GtkCellLayout *cell_layout,
                                          GtkCellRenderer *cell,
                                          GtkCellLayoutDataFunc func,
                                          gpointer func_data,
                                          GDestroyNotify destroy);
extern
void gtk_cell_layout_clear_attributes (GtkCellLayout *cell_layout,
                                          GtkCellRenderer *cell);
extern
void gtk_cell_layout_reorder (GtkCellLayout *cell_layout,
                                          GtkCellRenderer *cell,
                                          gint position);
extern
GtkCellArea *gtk_cell_layout_get_area (GtkCellLayout *cell_layout);
gboolean _gtk_cell_layout_buildable_custom_tag_start (GtkBuildable *buildable,
            GtkBuilder *builder,
            GObject *child,
            const gchar *tagname,
            GMarkupParser *parser,
            gpointer *data);
gboolean _gtk_cell_layout_buildable_custom_tag_end (GtkBuildable *buildable,
            GtkBuilder *builder,
            GObject *child,
            const gchar *tagname,
            gpointer *data);
void _gtk_cell_layout_buildable_add_child (GtkBuildable *buildable,
            GtkBuilder *builder,
            GObject *child,
            const gchar *type);
typedef struct _GtkCellRendererText GtkCellRendererText;
typedef struct _GtkCellRendererTextPrivate GtkCellRendererTextPrivate;
typedef struct _GtkCellRendererTextClass GtkCellRendererTextClass;
struct _GtkCellRendererText
{
  GtkCellRenderer parent;
  GtkCellRendererTextPrivate *priv;
};
struct _GtkCellRendererTextClass
{
  GtkCellRendererClass parent_class;
  void (* edited) (GtkCellRendererText *cell_renderer_text,
     const gchar *path,
     const gchar *new_text);
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_cell_renderer_text_get_type (void) __attribute__((__const__));
extern
GtkCellRenderer *gtk_cell_renderer_text_new (void);
extern
void gtk_cell_renderer_text_set_fixed_height_from_font (GtkCellRendererText *renderer,
            gint number_of_rows);
typedef struct _GtkCellRendererAccel GtkCellRendererAccel;
typedef struct _GtkCellRendererAccelPrivate GtkCellRendererAccelPrivate;
typedef struct _GtkCellRendererAccelClass GtkCellRendererAccelClass;
typedef enum
{
  GTK_CELL_RENDERER_ACCEL_MODE_GTK,
  GTK_CELL_RENDERER_ACCEL_MODE_OTHER,
  GTK_CELL_RENDERER_ACCEL_MODE_MODIFIER_TAP
} GtkCellRendererAccelMode;
struct _GtkCellRendererAccel
{
  GtkCellRendererText parent;
  GtkCellRendererAccelPrivate *priv;
};
struct _GtkCellRendererAccelClass
{
  GtkCellRendererTextClass parent_class;
  void (* accel_edited) (GtkCellRendererAccel *accel,
      const gchar *path_string,
     guint accel_key,
     GdkModifierType accel_mods,
     guint hardware_keycode);
  void (* accel_cleared) (GtkCellRendererAccel *accel,
     const gchar *path_string);
  void (*_gtk_reserved0) (void);
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_cell_renderer_accel_get_type (void) __attribute__((__const__));
extern
GtkCellRenderer *gtk_cell_renderer_accel_new (void);
typedef struct _GtkCellRendererCombo GtkCellRendererCombo;
typedef struct _GtkCellRendererComboPrivate GtkCellRendererComboPrivate;
typedef struct _GtkCellRendererComboClass GtkCellRendererComboClass;
struct _GtkCellRendererCombo
{
  GtkCellRendererText parent;
  GtkCellRendererComboPrivate *priv;
};
struct _GtkCellRendererComboClass
{
  GtkCellRendererTextClass parent;
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_cell_renderer_combo_get_type (void) __attribute__((__const__));
extern
GtkCellRenderer *gtk_cell_renderer_combo_new (void);
typedef struct _GtkCellRendererPixbuf GtkCellRendererPixbuf;
typedef struct _GtkCellRendererPixbufPrivate GtkCellRendererPixbufPrivate;
typedef struct _GtkCellRendererPixbufClass GtkCellRendererPixbufClass;
struct _GtkCellRendererPixbuf
{
  GtkCellRenderer parent;
  GtkCellRendererPixbufPrivate *priv;
};
struct _GtkCellRendererPixbufClass
{
  GtkCellRendererClass parent_class;
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_cell_renderer_pixbuf_get_type (void) __attribute__((__const__));
extern
GtkCellRenderer *gtk_cell_renderer_pixbuf_new (void);
typedef struct _GtkCellRendererProgress GtkCellRendererProgress;
typedef struct _GtkCellRendererProgressClass GtkCellRendererProgressClass;
typedef struct _GtkCellRendererProgressPrivate GtkCellRendererProgressPrivate;
struct _GtkCellRendererProgress
{
  GtkCellRenderer parent_instance;
  GtkCellRendererProgressPrivate *priv;
};
struct _GtkCellRendererProgressClass
{
  GtkCellRendererClass parent_class;
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_cell_renderer_progress_get_type (void) __attribute__((__const__));
extern
GtkCellRenderer* gtk_cell_renderer_progress_new (void);
typedef struct _GtkCellRendererSpin GtkCellRendererSpin;
typedef struct _GtkCellRendererSpinClass GtkCellRendererSpinClass;
typedef struct _GtkCellRendererSpinPrivate GtkCellRendererSpinPrivate;
struct _GtkCellRendererSpin
{
  GtkCellRendererText parent;
  GtkCellRendererSpinPrivate *priv;
};
struct _GtkCellRendererSpinClass
{
  GtkCellRendererTextClass parent;
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_cell_renderer_spin_get_type (void);
extern
GtkCellRenderer *gtk_cell_renderer_spin_new (void);
typedef struct _GtkCellRendererSpinner GtkCellRendererSpinner;
typedef struct _GtkCellRendererSpinnerClass GtkCellRendererSpinnerClass;
typedef struct _GtkCellRendererSpinnerPrivate GtkCellRendererSpinnerPrivate;
struct _GtkCellRendererSpinner
{
  GtkCellRenderer parent;
  GtkCellRendererSpinnerPrivate *priv;
};
struct _GtkCellRendererSpinnerClass
{
  GtkCellRendererClass parent_class;
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_cell_renderer_spinner_get_type (void) __attribute__((__const__));
extern
GtkCellRenderer *gtk_cell_renderer_spinner_new (void);
typedef struct _GtkCellRendererToggle GtkCellRendererToggle;
typedef struct _GtkCellRendererTogglePrivate GtkCellRendererTogglePrivate;
typedef struct _GtkCellRendererToggleClass GtkCellRendererToggleClass;
struct _GtkCellRendererToggle
{
  GtkCellRenderer parent;
  GtkCellRendererTogglePrivate *priv;
};
struct _GtkCellRendererToggleClass
{
  GtkCellRendererClass parent_class;
  void (* toggled) (GtkCellRendererToggle *cell_renderer_toggle,
      const gchar *path);
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_cell_renderer_toggle_get_type (void) __attribute__((__const__));
extern
GtkCellRenderer *gtk_cell_renderer_toggle_new (void);
extern
gboolean gtk_cell_renderer_toggle_get_radio (GtkCellRendererToggle *toggle);
extern
void gtk_cell_renderer_toggle_set_radio (GtkCellRendererToggle *toggle,
                                                          gboolean radio);
extern
gboolean gtk_cell_renderer_toggle_get_active (GtkCellRendererToggle *toggle);
extern
void gtk_cell_renderer_toggle_set_active (GtkCellRendererToggle *toggle,
                                                          gboolean setting);
extern
gboolean gtk_cell_renderer_toggle_get_activatable (GtkCellRendererToggle *toggle);
extern
void gtk_cell_renderer_toggle_set_activatable (GtkCellRendererToggle *toggle,
                                                          gboolean setting);
typedef struct _GtkCellView GtkCellView;
typedef struct _GtkCellViewClass GtkCellViewClass;
typedef struct _GtkCellViewPrivate GtkCellViewPrivate;
struct _GtkCellView
{
  GtkWidget parent_instance;
  GtkCellViewPrivate *priv;
};
struct _GtkCellViewClass
{
  GtkWidgetClass parent_class;
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_cell_view_get_type (void) __attribute__((__const__));
extern
GtkWidget *gtk_cell_view_new (void);
extern
GtkWidget *gtk_cell_view_new_with_context (GtkCellArea *area,
                                                         GtkCellAreaContext *context);
extern
GtkWidget *gtk_cell_view_new_with_text (const gchar *text);
extern
GtkWidget *gtk_cell_view_new_with_markup (const gchar *markup);
extern
GtkWidget *gtk_cell_view_new_with_pixbuf (GdkPixbuf *pixbuf);
extern
void gtk_cell_view_set_model (GtkCellView *cell_view,
                                                         GtkTreeModel *model);
extern
GtkTreeModel *gtk_cell_view_get_model (GtkCellView *cell_view);
extern
void gtk_cell_view_set_displayed_row (GtkCellView *cell_view,
                                                         GtkTreePath *path);
extern
GtkTreePath *gtk_cell_view_get_displayed_row (GtkCellView *cell_view);
extern
void gtk_cell_view_set_background_rgba (GtkCellView *cell_view,
                                                         const GdkRGBA *rgba);
extern
gboolean gtk_cell_view_get_draw_sensitive (GtkCellView *cell_view);
extern
void gtk_cell_view_set_draw_sensitive (GtkCellView *cell_view,
                                                         gboolean draw_sensitive);
extern
gboolean gtk_cell_view_get_fit_model (GtkCellView *cell_view);
extern
void gtk_cell_view_set_fit_model (GtkCellView *cell_view,
                                                         gboolean fit_model);
extern
gboolean gtk_cell_view_get_size_of_row (GtkCellView *cell_view,
                                                         GtkTreePath *path,
                                                         GtkRequisition *requisition);
extern
void gtk_cell_view_set_background_color (GtkCellView *cell_view,
                                                         const GdkColor *color);
typedef struct _GtkToggleButton GtkToggleButton;
typedef struct _GtkToggleButtonPrivate GtkToggleButtonPrivate;
typedef struct _GtkToggleButtonClass GtkToggleButtonClass;
struct _GtkToggleButton
{
  GtkButton button;
  GtkToggleButtonPrivate *priv;
};
struct _GtkToggleButtonClass
{
  GtkButtonClass parent_class;
  void (* toggled) (GtkToggleButton *toggle_button);
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_toggle_button_get_type (void) __attribute__((__const__));
extern
GtkWidget* gtk_toggle_button_new (void);
extern
GtkWidget* gtk_toggle_button_new_with_label (const gchar *label);
extern
GtkWidget* gtk_toggle_button_new_with_mnemonic (const gchar *label);
extern
void gtk_toggle_button_set_mode (GtkToggleButton *toggle_button,
                                                gboolean draw_indicator);
extern
gboolean gtk_toggle_button_get_mode (GtkToggleButton *toggle_button);
extern
void gtk_toggle_button_set_active (GtkToggleButton *toggle_button,
                                                gboolean is_active);
extern
gboolean gtk_toggle_button_get_active (GtkToggleButton *toggle_button);
extern
void gtk_toggle_button_toggled (GtkToggleButton *toggle_button);
extern
void gtk_toggle_button_set_inconsistent (GtkToggleButton *toggle_button,
                                                gboolean setting);
extern
gboolean gtk_toggle_button_get_inconsistent (GtkToggleButton *toggle_button);
typedef struct _GtkCheckButton GtkCheckButton;
typedef struct _GtkCheckButtonClass GtkCheckButtonClass;
struct _GtkCheckButton
{
  GtkToggleButton toggle_button;
};
struct _GtkCheckButtonClass
{
  GtkToggleButtonClass parent_class;
  void (* draw_indicator) (GtkCheckButton *check_button,
      cairo_t *cr);
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_check_button_get_type (void) __attribute__((__const__));
extern
GtkWidget* gtk_check_button_new (void);
extern
GtkWidget* gtk_check_button_new_with_label (const gchar *label);
extern
GtkWidget* gtk_check_button_new_with_mnemonic (const gchar *label);
void _gtk_check_button_get_props (GtkCheckButton *check_button,
      gint *indicator_size,
      gint *indicator_spacing);
typedef struct _GtkMenuItem GtkMenuItem;
typedef struct _GtkMenuItemClass GtkMenuItemClass;
typedef struct _GtkMenuItemPrivate GtkMenuItemPrivate;
struct _GtkMenuItem
{
  GtkBin bin;
  GtkMenuItemPrivate *priv;
};
struct _GtkMenuItemClass
{
  GtkBinClass parent_class;
  guint hide_on_activate : 1;
  void (* activate) (GtkMenuItem *menu_item);
  void (* activate_item) (GtkMenuItem *menu_item);
  void (* toggle_size_request) (GtkMenuItem *menu_item,
                                 gint *requisition);
  void (* toggle_size_allocate) (GtkMenuItem *menu_item,
                                 gint allocation);
  void (* set_label) (GtkMenuItem *menu_item,
                                 const gchar *label);
  const gchar * (* get_label) (GtkMenuItem *menu_item);
  void (* select) (GtkMenuItem *menu_item);
  void (* deselect) (GtkMenuItem *menu_item);
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_menu_item_get_type (void) __attribute__((__const__));
extern
GtkWidget* gtk_menu_item_new (void);
extern
GtkWidget* gtk_menu_item_new_with_label (const gchar *label);
extern
GtkWidget* gtk_menu_item_new_with_mnemonic (const gchar *label);
extern
void gtk_menu_item_set_submenu (GtkMenuItem *menu_item,
                                               GtkWidget *submenu);
extern
GtkWidget* gtk_menu_item_get_submenu (GtkMenuItem *menu_item);
extern
void gtk_menu_item_select (GtkMenuItem *menu_item);
extern
void gtk_menu_item_deselect (GtkMenuItem *menu_item);
extern
void gtk_menu_item_activate (GtkMenuItem *menu_item);
extern
void gtk_menu_item_toggle_size_request (GtkMenuItem *menu_item,
                                               gint *requisition);
extern
void gtk_menu_item_toggle_size_allocate (GtkMenuItem *menu_item,
                                               gint allocation);
extern
void gtk_menu_item_set_right_justified (GtkMenuItem *menu_item,
                                               gboolean right_justified);
extern
gboolean gtk_menu_item_get_right_justified (GtkMenuItem *menu_item);
extern
void gtk_menu_item_set_accel_path (GtkMenuItem *menu_item,
                                               const gchar *accel_path);
extern
const gchar * gtk_menu_item_get_accel_path (GtkMenuItem *menu_item);
extern
void gtk_menu_item_set_label (GtkMenuItem *menu_item,
                                               const gchar *label);
extern
const gchar * gtk_menu_item_get_label (GtkMenuItem *menu_item);
extern
void gtk_menu_item_set_use_underline (GtkMenuItem *menu_item,
                                               gboolean setting);
extern
gboolean gtk_menu_item_get_use_underline (GtkMenuItem *menu_item);
extern
void gtk_menu_item_set_reserve_indicator (GtkMenuItem *menu_item,
                                                gboolean reserve);
extern
gboolean gtk_menu_item_get_reserve_indicator (GtkMenuItem *menu_item);
typedef struct _GtkCheckMenuItem GtkCheckMenuItem;
typedef struct _GtkCheckMenuItemPrivate GtkCheckMenuItemPrivate;
typedef struct _GtkCheckMenuItemClass GtkCheckMenuItemClass;
struct _GtkCheckMenuItem
{
  GtkMenuItem menu_item;
  GtkCheckMenuItemPrivate *priv;
};
struct _GtkCheckMenuItemClass
{
  GtkMenuItemClass parent_class;
  void (* toggled) (GtkCheckMenuItem *check_menu_item);
  void (* draw_indicator) (GtkCheckMenuItem *check_menu_item,
      cairo_t *cr);
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_check_menu_item_get_type (void) __attribute__((__const__));
extern
GtkWidget* gtk_check_menu_item_new (void);
extern
GtkWidget* gtk_check_menu_item_new_with_label (const gchar *label);
extern
GtkWidget* gtk_check_menu_item_new_with_mnemonic (const gchar *label);
extern
void gtk_check_menu_item_set_active (GtkCheckMenuItem *check_menu_item,
        gboolean is_active);
extern
gboolean gtk_check_menu_item_get_active (GtkCheckMenuItem *check_menu_item);
extern
void gtk_check_menu_item_toggled (GtkCheckMenuItem *check_menu_item);
extern
void gtk_check_menu_item_set_inconsistent (GtkCheckMenuItem *check_menu_item,
        gboolean setting);
extern
gboolean gtk_check_menu_item_get_inconsistent (GtkCheckMenuItem *check_menu_item);
extern
void gtk_check_menu_item_set_draw_as_radio (GtkCheckMenuItem *check_menu_item,
        gboolean draw_as_radio);
extern
gboolean gtk_check_menu_item_get_draw_as_radio (GtkCheckMenuItem *check_menu_item);
void _gtk_check_menu_item_set_active (GtkCheckMenuItem *check_menu_item,
                                                  gboolean is_active);
typedef void (* GtkClipboardReceivedFunc) (GtkClipboard *clipboard,
                GtkSelectionData *selection_data,
                gpointer data);
typedef void (* GtkClipboardTextReceivedFunc) (GtkClipboard *clipboard,
                const gchar *text,
                gpointer data);
typedef void (* GtkClipboardRichTextReceivedFunc) (GtkClipboard *clipboard,
                                                   GdkAtom format,
                const guint8 *text,
                                                   gsize length,
                gpointer data);
typedef void (* GtkClipboardImageReceivedFunc) (GtkClipboard *clipboard,
         GdkPixbuf *pixbuf,
         gpointer data);
typedef void (* GtkClipboardURIReceivedFunc) (GtkClipboard *clipboard,
         gchar **uris,
         gpointer data);
typedef void (* GtkClipboardTargetsReceivedFunc) (GtkClipboard *clipboard,
                GdkAtom *atoms,
         gint n_atoms,
                gpointer data);
typedef void (* GtkClipboardGetFunc) (GtkClipboard *clipboard,
            GtkSelectionData *selection_data,
            guint info,
            gpointer user_data_or_owner);
typedef void (* GtkClipboardClearFunc) (GtkClipboard *clipboard,
            gpointer user_data_or_owner);
extern
GType gtk_clipboard_get_type (void) __attribute__((__const__));
extern
GtkClipboard *gtk_clipboard_get_for_display (GdkDisplay *display,
          GdkAtom selection);
extern
GtkClipboard *gtk_clipboard_get (GdkAtom selection);
extern
GtkClipboard *gtk_clipboard_get_default (GdkDisplay *display);
extern
GdkDisplay *gtk_clipboard_get_display (GtkClipboard *clipboard);
extern
gboolean gtk_clipboard_set_with_data (GtkClipboard *clipboard,
           const GtkTargetEntry *targets,
           guint n_targets,
           GtkClipboardGetFunc get_func,
           GtkClipboardClearFunc clear_func,
           gpointer user_data);
extern
gboolean gtk_clipboard_set_with_owner (GtkClipboard *clipboard,
           const GtkTargetEntry *targets,
           guint n_targets,
           GtkClipboardGetFunc get_func,
           GtkClipboardClearFunc clear_func,
           GObject *owner);
extern
GObject *gtk_clipboard_get_owner (GtkClipboard *clipboard);
extern
void gtk_clipboard_clear (GtkClipboard *clipboard);
extern
void gtk_clipboard_set_text (GtkClipboard *clipboard,
           const gchar *text,
           gint len);
extern
void gtk_clipboard_set_image (GtkClipboard *clipboard,
           GdkPixbuf *pixbuf);
extern
void gtk_clipboard_request_contents (GtkClipboard *clipboard,
                                      GdkAtom target,
                                      GtkClipboardReceivedFunc callback,
                                      gpointer user_data);
extern
void gtk_clipboard_request_text (GtkClipboard *clipboard,
                                      GtkClipboardTextReceivedFunc callback,
                                      gpointer user_data);
extern
void gtk_clipboard_request_rich_text (GtkClipboard *clipboard,
                                      GtkTextBuffer *buffer,
                                      GtkClipboardRichTextReceivedFunc callback,
                                      gpointer user_data);
extern
void gtk_clipboard_request_image (GtkClipboard *clipboard,
                                      GtkClipboardImageReceivedFunc callback,
                                      gpointer user_data);
extern
void gtk_clipboard_request_uris (GtkClipboard *clipboard,
                                      GtkClipboardURIReceivedFunc callback,
                                      gpointer user_data);
extern
void gtk_clipboard_request_targets (GtkClipboard *clipboard,
                                      GtkClipboardTargetsReceivedFunc callback,
                                      gpointer user_data);
extern
GtkSelectionData *gtk_clipboard_wait_for_contents (GtkClipboard *clipboard,
                                                    GdkAtom target);
extern
gchar * gtk_clipboard_wait_for_text (GtkClipboard *clipboard);
extern
guint8 * gtk_clipboard_wait_for_rich_text (GtkClipboard *clipboard,
                                                    GtkTextBuffer *buffer,
                                                    GdkAtom *format,
                                                    gsize *length);
extern
GdkPixbuf * gtk_clipboard_wait_for_image (GtkClipboard *clipboard);
extern
gchar ** gtk_clipboard_wait_for_uris (GtkClipboard *clipboard);
extern
gboolean gtk_clipboard_wait_for_targets (GtkClipboard *clipboard,
                                                    GdkAtom **targets,
                                                    gint *n_targets);
extern
gboolean gtk_clipboard_wait_is_text_available (GtkClipboard *clipboard);
extern
gboolean gtk_clipboard_wait_is_rich_text_available (GtkClipboard *clipboard,
                                                    GtkTextBuffer *buffer);
extern
gboolean gtk_clipboard_wait_is_image_available (GtkClipboard *clipboard);
extern
gboolean gtk_clipboard_wait_is_uris_available (GtkClipboard *clipboard);
extern
gboolean gtk_clipboard_wait_is_target_available (GtkClipboard *clipboard,
                                                    GdkAtom target);
extern
void gtk_clipboard_set_can_store (GtkClipboard *clipboard,
      const GtkTargetEntry *targets,
      gint n_targets);
extern
void gtk_clipboard_store (GtkClipboard *clipboard);
void _gtk_clipboard_handle_event (GdkEventOwnerChange *event);
void _gtk_clipboard_store_all (void);
typedef struct _GtkColorButton GtkColorButton;
typedef struct _GtkColorButtonClass GtkColorButtonClass;
typedef struct _GtkColorButtonPrivate GtkColorButtonPrivate;
struct _GtkColorButton {
  GtkButton button;
  GtkColorButtonPrivate *priv;
};
struct _GtkColorButtonClass {
  GtkButtonClass parent_class;
  void (* color_set) (GtkColorButton *cp);
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_color_button_get_type (void) __attribute__((__const__));
extern
GtkWidget * gtk_color_button_new (void);
extern
GtkWidget * gtk_color_button_new_with_rgba (const GdkRGBA *rgba);
extern
void gtk_color_button_set_title (GtkColorButton *button,
                                             const gchar *title);
extern
const gchar *gtk_color_button_get_title (GtkColorButton *button);
extern
GtkWidget *gtk_color_button_new_with_color (const GdkColor *color);
extern
void gtk_color_button_set_color (GtkColorButton *button,
                                            const GdkColor *color);
extern
void gtk_color_button_get_color (GtkColorButton *button,
                                            GdkColor *color);
extern
void gtk_color_button_set_alpha (GtkColorButton *button,
                                            guint16 alpha);
extern
guint16 gtk_color_button_get_alpha (GtkColorButton *button);
extern
void gtk_color_button_set_use_alpha (GtkColorButton *button,
                                             gboolean use_alpha);
extern
gboolean gtk_color_button_get_use_alpha (GtkColorButton *button);
extern
void gtk_color_button_set_rgba (GtkColorButton *button,
                                             const GdkRGBA *rgba);
extern
void gtk_color_button_get_rgba (GtkColorButton *button,
                                             GdkRGBA *rgba);
typedef struct _GtkColorChooser GtkColorChooser;
typedef struct _GtkColorChooserInterface GtkColorChooserInterface;
struct _GtkColorChooserInterface
{
  GTypeInterface base_interface;
  void (* get_rgba) (GtkColorChooser *chooser,
                        GdkRGBA *color);
  void (* set_rgba) (GtkColorChooser *chooser,
                        const GdkRGBA *color);
  void (* add_palette) (GtkColorChooser *chooser,
                        GtkOrientation orientation,
                        gint colors_per_line,
                        gint n_colors,
                        GdkRGBA *colors);
  void (* color_activated) (GtkColorChooser *chooser,
                            const GdkRGBA *color);
  gpointer padding[12];
};
extern
GType gtk_color_chooser_get_type (void) __attribute__((__const__));
extern
void gtk_color_chooser_get_rgba (GtkColorChooser *chooser,
                                           GdkRGBA *color);
extern
void gtk_color_chooser_set_rgba (GtkColorChooser *chooser,
                                           const GdkRGBA *color);
extern
gboolean gtk_color_chooser_get_use_alpha (GtkColorChooser *chooser);
extern
void gtk_color_chooser_set_use_alpha (GtkColorChooser *chooser,
                                           gboolean use_alpha);
extern
void gtk_color_chooser_add_palette (GtkColorChooser *chooser,
                                           GtkOrientation orientation,
                                           gint colors_per_line,
                                           gint n_colors,
                                           GdkRGBA *colors);
typedef struct _GtkColorChooserDialog GtkColorChooserDialog;
typedef struct _GtkColorChooserDialogPrivate GtkColorChooserDialogPrivate;
typedef struct _GtkColorChooserDialogClass GtkColorChooserDialogClass;
struct _GtkColorChooserDialog
{
  GtkDialog parent_instance;
  GtkColorChooserDialogPrivate *priv;
};
struct _GtkColorChooserDialogClass
{
  GtkDialogClass parent_class;
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_color_chooser_dialog_get_type (void) __attribute__((__const__));
extern
GtkWidget * gtk_color_chooser_dialog_new (const gchar *title,
                                               GtkWindow *parent);
typedef struct _GtkColorChooserWidget GtkColorChooserWidget;
typedef struct _GtkColorChooserWidgetPrivate GtkColorChooserWidgetPrivate;
typedef struct _GtkColorChooserWidgetClass GtkColorChooserWidgetClass;
struct _GtkColorChooserWidget
{
  GtkBox parent_instance;
  GtkColorChooserWidgetPrivate *priv;
};
struct _GtkColorChooserWidgetClass
{
  GtkBoxClass parent_class;
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
  void (*_gtk_reserved5) (void);
  void (*_gtk_reserved6) (void);
  void (*_gtk_reserved7) (void);
  void (*_gtk_reserved8) (void);
};
extern
GType gtk_color_chooser_widget_get_type (void) __attribute__((__const__));
extern
GtkWidget * gtk_color_chooser_widget_new (void);
extern
void gtk_hsv_to_rgb (gdouble h, gdouble s, gdouble v,
                     gdouble *r, gdouble *g, gdouble *b);
extern
void gtk_rgb_to_hsv (gdouble r, gdouble g, gdouble b,
                     gdouble *h, gdouble *s, gdouble *v);
typedef struct _GtkComboBoxText GtkComboBoxText;
typedef struct _GtkComboBoxTextPrivate GtkComboBoxTextPrivate;
typedef struct _GtkComboBoxTextClass GtkComboBoxTextClass;
struct _GtkComboBoxText
{
  GtkComboBox parent_instance;
  GtkComboBoxTextPrivate *priv;
};
struct _GtkComboBoxTextClass
{
  GtkComboBoxClass parent_class;
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_combo_box_text_get_type (void) __attribute__((__const__));
extern
GtkWidget* gtk_combo_box_text_new (void);
extern
GtkWidget* gtk_combo_box_text_new_with_entry (void);
extern
void gtk_combo_box_text_append_text (GtkComboBoxText *combo_box,
                                                  const gchar *text);
extern
void gtk_combo_box_text_insert_text (GtkComboBoxText *combo_box,
                                                  gint position,
                                                  const gchar *text);
extern
void gtk_combo_box_text_prepend_text (GtkComboBoxText *combo_box,
                                                  const gchar *text);
extern
void gtk_combo_box_text_remove (GtkComboBoxText *combo_box,
                                                  gint position);
extern
void gtk_combo_box_text_remove_all (GtkComboBoxText *combo_box);
extern
gchar *gtk_combo_box_text_get_active_text (GtkComboBoxText *combo_box);
extern
void gtk_combo_box_text_insert (GtkComboBoxText *combo_box,
                                                  gint position,
                                                  const gchar *id,
                                                  const gchar *text);
extern
void gtk_combo_box_text_append (GtkComboBoxText *combo_box,
                                                  const gchar *id,
                                                  const gchar *text);
extern
void gtk_combo_box_text_prepend (GtkComboBoxText *combo_box,
                                                  const gchar *id,
                                                  const gchar *text);
typedef enum
{
  GTK_CSS_SECTION_DOCUMENT,
  GTK_CSS_SECTION_IMPORT,
  GTK_CSS_SECTION_COLOR_DEFINITION,
  GTK_CSS_SECTION_BINDING_SET,
  GTK_CSS_SECTION_RULESET,
  GTK_CSS_SECTION_SELECTOR,
  GTK_CSS_SECTION_DECLARATION,
  GTK_CSS_SECTION_VALUE,
  GTK_CSS_SECTION_KEYFRAMES
} GtkCssSectionType;
typedef struct _GtkCssSection GtkCssSection;
extern
GType gtk_css_section_get_type (void) __attribute__((__const__));
extern
GtkCssSection * gtk_css_section_ref (GtkCssSection *section);
extern
void gtk_css_section_unref (GtkCssSection *section);
extern
GtkCssSectionType gtk_css_section_get_section_type (const GtkCssSection *section);
extern
GtkCssSection * gtk_css_section_get_parent (const GtkCssSection *section);
extern
GFile * gtk_css_section_get_file (const GtkCssSection *section);
extern
guint gtk_css_section_get_start_line (const GtkCssSection *section);
extern
guint gtk_css_section_get_start_position (const GtkCssSection *section);
extern
guint gtk_css_section_get_end_line (const GtkCssSection *section);
extern
guint gtk_css_section_get_end_position (const GtkCssSection *section);
typedef enum
{
  GTK_CSS_PROVIDER_ERROR_FAILED,
  GTK_CSS_PROVIDER_ERROR_SYNTAX,
  GTK_CSS_PROVIDER_ERROR_IMPORT,
  GTK_CSS_PROVIDER_ERROR_NAME,
  GTK_CSS_PROVIDER_ERROR_DEPRECATED,
  GTK_CSS_PROVIDER_ERROR_UNKNOWN_VALUE
} GtkCssProviderError;
extern
GQuark gtk_css_provider_error_quark (void);
typedef struct _GtkCssProvider GtkCssProvider;
typedef struct _GtkCssProviderClass GtkCssProviderClass;
typedef struct _GtkCssProviderPrivate GtkCssProviderPrivate;
struct _GtkCssProvider
{
  GObject parent_instance;
  GtkCssProviderPrivate *priv;
};
struct _GtkCssProviderClass
{
  GObjectClass parent_class;
  void (* parsing_error) (GtkCssProvider *provider,
                                                 GtkCssSection *section,
                                                 const GError * error);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_css_provider_get_type (void) __attribute__((__const__));
extern
GtkCssProvider * gtk_css_provider_new (void);
extern
char * gtk_css_provider_to_string (GtkCssProvider *provider);
extern
gboolean gtk_css_provider_load_from_data (GtkCssProvider *css_provider,
                                                  const gchar *data,
                                                  gssize length,
                                                  GError **error);
extern
gboolean gtk_css_provider_load_from_file (GtkCssProvider *css_provider,
                                                  GFile *file,
                                                  GError **error);
extern
gboolean gtk_css_provider_load_from_path (GtkCssProvider *css_provider,
                                                  const gchar *path,
                                                  GError **error);
extern
void gtk_css_provider_load_from_resource (GtkCssProvider *css_provider,
                                                      const gchar *resource_path);
extern
GtkCssProvider * gtk_css_provider_get_default (void);
extern
GtkCssProvider * gtk_css_provider_get_named (const gchar *name,
                                             const gchar *variant);
typedef enum {
  GTK_DEBUG_MISC = 1 << 0,
  GTK_DEBUG_PLUGSOCKET = 1 << 1,
  GTK_DEBUG_TEXT = 1 << 2,
  GTK_DEBUG_TREE = 1 << 3,
  GTK_DEBUG_UPDATES = 1 << 4,
  GTK_DEBUG_KEYBINDINGS = 1 << 5,
  GTK_DEBUG_MULTIHEAD = 1 << 6,
  GTK_DEBUG_MODULES = 1 << 7,
  GTK_DEBUG_GEOMETRY = 1 << 8,
  GTK_DEBUG_ICONTHEME = 1 << 9,
  GTK_DEBUG_PRINTING = 1 << 10,
  GTK_DEBUG_BUILDER = 1 << 11,
  GTK_DEBUG_SIZE_REQUEST = 1 << 12,
  GTK_DEBUG_NO_CSS_CACHE = 1 << 13,
  GTK_DEBUG_BASELINES = 1 << 14,
  GTK_DEBUG_PIXEL_CACHE = 1 << 15,
  GTK_DEBUG_NO_PIXEL_CACHE = 1 << 16,
  GTK_DEBUG_INTERACTIVE = 1 << 17,
  GTK_DEBUG_TOUCHSCREEN = 1 << 18,
  GTK_DEBUG_ACTIONS = 1 << 19
} GtkDebugFlag;
extern
guint gtk_get_debug_flags (void);
extern
void gtk_set_debug_flags (guint flags);
typedef struct _GtkDrawingArea GtkDrawingArea;
typedef struct _GtkDrawingAreaClass GtkDrawingAreaClass;
struct _GtkDrawingArea
{
  GtkWidget widget;
  gpointer dummy;
};
struct _GtkDrawingAreaClass
{
  GtkWidgetClass parent_class;
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_drawing_area_get_type (void) __attribute__((__const__));
extern
GtkWidget* gtk_drawing_area_new (void);
typedef struct _GtkEventBox GtkEventBox;
typedef struct _GtkEventBoxClass GtkEventBoxClass;
typedef struct _GtkEventBoxPrivate GtkEventBoxPrivate;
struct _GtkEventBox
{
  GtkBin bin;
  GtkEventBoxPrivate *priv;
};
struct _GtkEventBoxClass
{
  GtkBinClass parent_class;
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_event_box_get_type (void) __attribute__((__const__));
extern
GtkWidget* gtk_event_box_new (void);
extern
gboolean gtk_event_box_get_visible_window (GtkEventBox *event_box);
extern
void gtk_event_box_set_visible_window (GtkEventBox *event_box,
                                             gboolean visible_window);
extern
gboolean gtk_event_box_get_above_child (GtkEventBox *event_box);
extern
void gtk_event_box_set_above_child (GtkEventBox *event_box,
                                             gboolean above_child);
typedef struct _GtkEventController GtkEventController;
typedef struct _GtkEventControllerClass GtkEventControllerClass;
extern
GType gtk_event_controller_get_type (void) __attribute__((__const__));
extern
GtkWidget * gtk_event_controller_get_widget (GtkEventController *controller);
extern
gboolean gtk_event_controller_handle_event (GtkEventController *controller,
                                                  const GdkEvent *event);
extern
void gtk_event_controller_reset (GtkEventController *controller);
extern
GtkPropagationPhase gtk_event_controller_get_propagation_phase (GtkEventController *controller);
extern
void gtk_event_controller_set_propagation_phase (GtkEventController *controller,
                                                                GtkPropagationPhase phase);
typedef struct _GtkExpander GtkExpander;
typedef struct _GtkExpanderClass GtkExpanderClass;
typedef struct _GtkExpanderPrivate GtkExpanderPrivate;
struct _GtkExpander
{
  GtkBin bin;
  GtkExpanderPrivate *priv;
};
struct _GtkExpanderClass
{
  GtkBinClass parent_class;
  void (* activate) (GtkExpander *expander);
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_expander_get_type (void) __attribute__((__const__));
extern
GtkWidget *gtk_expander_new (const gchar *label);
extern
GtkWidget *gtk_expander_new_with_mnemonic (const gchar *label);
extern
void gtk_expander_set_expanded (GtkExpander *expander,
                                                        gboolean expanded);
extern
gboolean gtk_expander_get_expanded (GtkExpander *expander);
extern
void gtk_expander_set_spacing (GtkExpander *expander,
                                                        gint spacing);
extern
gint gtk_expander_get_spacing (GtkExpander *expander);
extern
void gtk_expander_set_label (GtkExpander *expander,
                                                        const gchar *label);
extern
const gchar * gtk_expander_get_label (GtkExpander *expander);
extern
void gtk_expander_set_use_underline (GtkExpander *expander,
                                                        gboolean use_underline);
extern
gboolean gtk_expander_get_use_underline (GtkExpander *expander);
extern
void gtk_expander_set_use_markup (GtkExpander *expander,
                                                        gboolean use_markup);
extern
gboolean gtk_expander_get_use_markup (GtkExpander *expander);
extern
void gtk_expander_set_label_widget (GtkExpander *expander,
              GtkWidget *label_widget);
extern
GtkWidget *gtk_expander_get_label_widget (GtkExpander *expander);
extern
void gtk_expander_set_label_fill (GtkExpander *expander,
              gboolean label_fill);
extern
gboolean gtk_expander_get_label_fill (GtkExpander *expander);
extern
void gtk_expander_set_resize_toplevel (GtkExpander *expander,
                                                        gboolean resize_toplevel);
extern
gboolean gtk_expander_get_resize_toplevel (GtkExpander *expander);
typedef struct _GtkFixed GtkFixed;
typedef struct _GtkFixedPrivate GtkFixedPrivate;
typedef struct _GtkFixedClass GtkFixedClass;
typedef struct _GtkFixedChild GtkFixedChild;
struct _GtkFixed
{
  GtkContainer container;
  GtkFixedPrivate *priv;
};
struct _GtkFixedClass
{
  GtkContainerClass parent_class;
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
struct _GtkFixedChild
{
  GtkWidget *widget;
  gint x;
  gint y;
};
extern
GType gtk_fixed_get_type (void) __attribute__((__const__));
extern
GtkWidget* gtk_fixed_new (void);
extern
void gtk_fixed_put (GtkFixed *fixed,
                                        GtkWidget *widget,
                                        gint x,
                                        gint y);
extern
void gtk_fixed_move (GtkFixed *fixed,
                                        GtkWidget *widget,
                                        gint x,
                                        gint y);
typedef struct _GtkFileFilter GtkFileFilter;
typedef struct _GtkFileFilterInfo GtkFileFilterInfo;
typedef enum {
  GTK_FILE_FILTER_FILENAME = 1 << 0,
  GTK_FILE_FILTER_URI = 1 << 1,
  GTK_FILE_FILTER_DISPLAY_NAME = 1 << 2,
  GTK_FILE_FILTER_MIME_TYPE = 1 << 3
} GtkFileFilterFlags;
typedef gboolean (*GtkFileFilterFunc) (const GtkFileFilterInfo *filter_info,
           gpointer data);
struct _GtkFileFilterInfo
{
  GtkFileFilterFlags contains;
  const gchar *filename;
  const gchar *uri;
  const gchar *display_name;
  const gchar *mime_type;
};
extern
GType gtk_file_filter_get_type (void) __attribute__((__const__));
extern
GtkFileFilter * gtk_file_filter_new (void);
extern
void gtk_file_filter_set_name (GtkFileFilter *filter,
      const gchar *name);
extern
const gchar * gtk_file_filter_get_name (GtkFileFilter *filter);
extern
void gtk_file_filter_add_mime_type (GtkFileFilter *filter,
      const gchar *mime_type);
extern
void gtk_file_filter_add_pattern (GtkFileFilter *filter,
      const gchar *pattern);
extern
void gtk_file_filter_add_pixbuf_formats (GtkFileFilter *filter);
extern
void gtk_file_filter_add_custom (GtkFileFilter *filter,
      GtkFileFilterFlags needed,
      GtkFileFilterFunc func,
      gpointer data,
      GDestroyNotify notify);
extern
GtkFileFilterFlags gtk_file_filter_get_needed (GtkFileFilter *filter);
extern
gboolean gtk_file_filter_filter (GtkFileFilter *filter,
            const GtkFileFilterInfo *filter_info);
typedef struct _GtkFileChooser GtkFileChooser;
typedef enum
{
  GTK_FILE_CHOOSER_ACTION_OPEN,
  GTK_FILE_CHOOSER_ACTION_SAVE,
  GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER,
  GTK_FILE_CHOOSER_ACTION_CREATE_FOLDER
} GtkFileChooserAction;
typedef enum
{
  GTK_FILE_CHOOSER_CONFIRMATION_CONFIRM,
  GTK_FILE_CHOOSER_CONFIRMATION_ACCEPT_FILENAME,
  GTK_FILE_CHOOSER_CONFIRMATION_SELECT_AGAIN
} GtkFileChooserConfirmation;
extern
GType gtk_file_chooser_get_type (void) __attribute__((__const__));
typedef enum {
  GTK_FILE_CHOOSER_ERROR_NONEXISTENT,
  GTK_FILE_CHOOSER_ERROR_BAD_FILENAME,
  GTK_FILE_CHOOSER_ERROR_ALREADY_EXISTS,
  GTK_FILE_CHOOSER_ERROR_INCOMPLETE_HOSTNAME
} GtkFileChooserError;
extern
GQuark gtk_file_chooser_error_quark (void);
extern
void gtk_file_chooser_set_action (GtkFileChooser *chooser,
          GtkFileChooserAction action);
extern
GtkFileChooserAction gtk_file_chooser_get_action (GtkFileChooser *chooser);
extern
void gtk_file_chooser_set_local_only (GtkFileChooser *chooser,
          gboolean local_only);
extern
gboolean gtk_file_chooser_get_local_only (GtkFileChooser *chooser);
extern
void gtk_file_chooser_set_select_multiple (GtkFileChooser *chooser,
          gboolean select_multiple);
extern
gboolean gtk_file_chooser_get_select_multiple (GtkFileChooser *chooser);
extern
void gtk_file_chooser_set_show_hidden (GtkFileChooser *chooser,
          gboolean show_hidden);
extern
gboolean gtk_file_chooser_get_show_hidden (GtkFileChooser *chooser);
extern
void gtk_file_chooser_set_do_overwrite_confirmation (GtkFileChooser *chooser,
             gboolean do_overwrite_confirmation);
extern
gboolean gtk_file_chooser_get_do_overwrite_confirmation (GtkFileChooser *chooser);
extern
void gtk_file_chooser_set_create_folders (GtkFileChooser *chooser,
         gboolean create_folders);
extern
gboolean gtk_file_chooser_get_create_folders (GtkFileChooser *chooser);
extern
void gtk_file_chooser_set_current_name (GtkFileChooser *chooser,
             const gchar *name);
extern
gchar *gtk_file_chooser_get_current_name (GtkFileChooser *chooser);
extern
gchar * gtk_file_chooser_get_filename (GtkFileChooser *chooser);
extern
gboolean gtk_file_chooser_set_filename (GtkFileChooser *chooser,
           const char *filename);
extern
gboolean gtk_file_chooser_select_filename (GtkFileChooser *chooser,
           const char *filename);
extern
void gtk_file_chooser_unselect_filename (GtkFileChooser *chooser,
           const char *filename);
extern
void gtk_file_chooser_select_all (GtkFileChooser *chooser);
extern
void gtk_file_chooser_unselect_all (GtkFileChooser *chooser);
extern
GSList * gtk_file_chooser_get_filenames (GtkFileChooser *chooser);
extern
gboolean gtk_file_chooser_set_current_folder (GtkFileChooser *chooser,
           const gchar *filename);
extern
gchar * gtk_file_chooser_get_current_folder (GtkFileChooser *chooser);
extern
gchar * gtk_file_chooser_get_uri (GtkFileChooser *chooser);
extern
gboolean gtk_file_chooser_set_uri (GtkFileChooser *chooser,
        const char *uri);
extern
gboolean gtk_file_chooser_select_uri (GtkFileChooser *chooser,
        const char *uri);
extern
void gtk_file_chooser_unselect_uri (GtkFileChooser *chooser,
        const char *uri);
extern
GSList * gtk_file_chooser_get_uris (GtkFileChooser *chooser);
extern
gboolean gtk_file_chooser_set_current_folder_uri (GtkFileChooser *chooser,
        const gchar *uri);
extern
gchar * gtk_file_chooser_get_current_folder_uri (GtkFileChooser *chooser);
extern
GFile * gtk_file_chooser_get_file (GtkFileChooser *chooser);
extern
gboolean gtk_file_chooser_set_file (GtkFileChooser *chooser,
                                                   GFile *file,
                                                   GError **error);
extern
gboolean gtk_file_chooser_select_file (GtkFileChooser *chooser,
                                                   GFile *file,
                                                   GError **error);
extern
void gtk_file_chooser_unselect_file (GtkFileChooser *chooser,
                                                   GFile *file);
extern
GSList * gtk_file_chooser_get_files (GtkFileChooser *chooser);
extern
gboolean gtk_file_chooser_set_current_folder_file (GtkFileChooser *chooser,
                                                   GFile *file,
                                                   GError **error);
extern
GFile * gtk_file_chooser_get_current_folder_file (GtkFileChooser *chooser);
extern
void gtk_file_chooser_set_preview_widget (GtkFileChooser *chooser,
             GtkWidget *preview_widget);
extern
GtkWidget *gtk_file_chooser_get_preview_widget (GtkFileChooser *chooser);
extern
void gtk_file_chooser_set_preview_widget_active (GtkFileChooser *chooser,
             gboolean active);
extern
gboolean gtk_file_chooser_get_preview_widget_active (GtkFileChooser *chooser);
extern
void gtk_file_chooser_set_use_preview_label (GtkFileChooser *chooser,
             gboolean use_label);
extern
gboolean gtk_file_chooser_get_use_preview_label (GtkFileChooser *chooser);
extern
char *gtk_file_chooser_get_preview_filename (GtkFileChooser *chooser);
extern
char *gtk_file_chooser_get_preview_uri (GtkFileChooser *chooser);
extern
GFile *gtk_file_chooser_get_preview_file (GtkFileChooser *chooser);
extern
void gtk_file_chooser_set_extra_widget (GtkFileChooser *chooser,
           GtkWidget *extra_widget);
extern
GtkWidget *gtk_file_chooser_get_extra_widget (GtkFileChooser *chooser);
extern
void gtk_file_chooser_add_filter (GtkFileChooser *chooser,
     GtkFileFilter *filter);
extern
void gtk_file_chooser_remove_filter (GtkFileChooser *chooser,
     GtkFileFilter *filter);
extern
GSList *gtk_file_chooser_list_filters (GtkFileChooser *chooser);
extern
void gtk_file_chooser_set_filter (GtkFileChooser *chooser,
        GtkFileFilter *filter);
extern
GtkFileFilter *gtk_file_chooser_get_filter (GtkFileChooser *chooser);
extern
gboolean gtk_file_chooser_add_shortcut_folder (GtkFileChooser *chooser,
        const char *folder,
        GError **error);
extern
gboolean gtk_file_chooser_remove_shortcut_folder (GtkFileChooser *chooser,
        const char *folder,
        GError **error);
extern
GSList *gtk_file_chooser_list_shortcut_folders (GtkFileChooser *chooser);
extern
gboolean gtk_file_chooser_add_shortcut_folder_uri (GtkFileChooser *chooser,
            const char *uri,
            GError **error);
extern
gboolean gtk_file_chooser_remove_shortcut_folder_uri (GtkFileChooser *chooser,
            const char *uri,
            GError **error);
extern
GSList *gtk_file_chooser_list_shortcut_folder_uris (GtkFileChooser *chooser);
typedef struct _GtkFileChooserButton GtkFileChooserButton;
typedef struct _GtkFileChooserButtonPrivate GtkFileChooserButtonPrivate;
typedef struct _GtkFileChooserButtonClass GtkFileChooserButtonClass;
struct _GtkFileChooserButton
{
  GtkBox parent;
  GtkFileChooserButtonPrivate *priv;
};
struct _GtkFileChooserButtonClass
{
  GtkBoxClass parent_class;
  void (* file_set) (GtkFileChooserButton *fc);
  void (*__gtk_reserved1);
  void (*__gtk_reserved2);
  void (*__gtk_reserved3);
  void (*__gtk_reserved4);
};
extern
GType gtk_file_chooser_button_get_type (void) __attribute__((__const__));
extern
GtkWidget * gtk_file_chooser_button_new (const gchar *title,
        GtkFileChooserAction action);
extern
GtkWidget * gtk_file_chooser_button_new_with_dialog (GtkWidget *dialog);
extern
const gchar * gtk_file_chooser_button_get_title (GtkFileChooserButton *button);
extern
void gtk_file_chooser_button_set_title (GtkFileChooserButton *button,
        const gchar *title);
extern
gint gtk_file_chooser_button_get_width_chars (GtkFileChooserButton *button);
extern
void gtk_file_chooser_button_set_width_chars (GtkFileChooserButton *button,
        gint n_chars);
extern
gboolean gtk_file_chooser_button_get_focus_on_click (GtkFileChooserButton *button);
extern
void gtk_file_chooser_button_set_focus_on_click (GtkFileChooserButton *button,
                                                                  gboolean focus_on_click);
typedef struct _GtkFileChooserDialog GtkFileChooserDialog;
typedef struct _GtkFileChooserDialogPrivate GtkFileChooserDialogPrivate;
typedef struct _GtkFileChooserDialogClass GtkFileChooserDialogClass;
struct _GtkFileChooserDialog
{
  GtkDialog parent_instance;
  GtkFileChooserDialogPrivate *priv;
};
struct _GtkFileChooserDialogClass
{
  GtkDialogClass parent_class;
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_file_chooser_dialog_get_type (void) __attribute__((__const__));
extern
GtkWidget *gtk_file_chooser_dialog_new (const gchar *title,
           GtkWindow *parent,
           GtkFileChooserAction action,
           const gchar *first_button_text,
           ...) __attribute__((__sentinel__));
typedef struct _GtkFileChooserWidget GtkFileChooserWidget;
typedef struct _GtkFileChooserWidgetPrivate GtkFileChooserWidgetPrivate;
typedef struct _GtkFileChooserWidgetClass GtkFileChooserWidgetClass;
struct _GtkFileChooserWidget
{
  GtkBox parent_instance;
  GtkFileChooserWidgetPrivate *priv;
};
struct _GtkFileChooserWidgetClass
{
  GtkBoxClass parent_class;
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_file_chooser_widget_get_type (void) __attribute__((__const__));
extern
GtkWidget *gtk_file_chooser_widget_new (GtkFileChooserAction action);
typedef struct _GtkFlowBox GtkFlowBox;
typedef struct _GtkFlowBoxClass GtkFlowBoxClass;
typedef struct _GtkFlowBoxChild GtkFlowBoxChild;
typedef struct _GtkFlowBoxChildClass GtkFlowBoxChildClass;
struct _GtkFlowBox
{
  GtkContainer container;
};
struct _GtkFlowBoxClass
{
  GtkContainerClass parent_class;
  void (*child_activated) (GtkFlowBox *box,
                                      GtkFlowBoxChild *child);
  void (*selected_children_changed) (GtkFlowBox *box);
  void (*activate_cursor_child) (GtkFlowBox *box);
  void (*toggle_cursor_child) (GtkFlowBox *box);
  gboolean (*move_cursor) (GtkFlowBox *box,
                                      GtkMovementStep step,
                                      gint count);
  void (*select_all) (GtkFlowBox *box);
  void (*unselect_all) (GtkFlowBox *box);
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
  void (*_gtk_reserved5) (void);
  void (*_gtk_reserved6) (void);
};
struct _GtkFlowBoxChild
{
  GtkBin parent_instance;
};
struct _GtkFlowBoxChildClass
{
  GtkBinClass parent_class;
  void (* activate) (GtkFlowBoxChild *child);
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
};
typedef GtkWidget * (*GtkFlowBoxCreateWidgetFunc) (gpointer item,
                                                   gpointer user_data);
extern
GType gtk_flow_box_child_get_type (void) __attribute__((__const__));
extern
GtkWidget* gtk_flow_box_child_new (void);
extern
gint gtk_flow_box_child_get_index (GtkFlowBoxChild *child);
extern
gboolean gtk_flow_box_child_is_selected (GtkFlowBoxChild *child);
extern
void gtk_flow_box_child_changed (GtkFlowBoxChild *child);
extern
GType gtk_flow_box_get_type (void) __attribute__((__const__));
extern
GtkWidget *gtk_flow_box_new (void);
extern
void gtk_flow_box_bind_model (GtkFlowBox *box,
                                                              GListModel *model,
                                                              GtkFlowBoxCreateWidgetFunc create_widget_func,
                                                              gpointer user_data,
                                                              GDestroyNotify user_data_free_func);
extern
void gtk_flow_box_set_homogeneous (GtkFlowBox *box,
                                                              gboolean homogeneous);
extern
gboolean gtk_flow_box_get_homogeneous (GtkFlowBox *box);
extern
void gtk_flow_box_set_row_spacing (GtkFlowBox *box,
                                                              guint spacing);
extern
guint gtk_flow_box_get_row_spacing (GtkFlowBox *box);
extern
void gtk_flow_box_set_column_spacing (GtkFlowBox *box,
                                                              guint spacing);
extern
guint gtk_flow_box_get_column_spacing (GtkFlowBox *box);
extern
void gtk_flow_box_set_min_children_per_line (GtkFlowBox *box,
                                                              guint n_children);
extern
guint gtk_flow_box_get_min_children_per_line (GtkFlowBox *box);
extern
void gtk_flow_box_set_max_children_per_line (GtkFlowBox *box,
                                                              guint n_children);
extern
guint gtk_flow_box_get_max_children_per_line (GtkFlowBox *box);
extern
void gtk_flow_box_set_activate_on_single_click (GtkFlowBox *box,
                                                                 gboolean single);
extern
gboolean gtk_flow_box_get_activate_on_single_click (GtkFlowBox *box);
extern
void gtk_flow_box_insert (GtkFlowBox *box,
                                                                 GtkWidget *widget,
                                                                 gint position);
extern
GtkFlowBoxChild *gtk_flow_box_get_child_at_index (GtkFlowBox *box,
                                                                 gint idx);
typedef void (* GtkFlowBoxForeachFunc) (GtkFlowBox *box,
                                        GtkFlowBoxChild *child,
                                        gpointer user_data);
extern
void gtk_flow_box_selected_foreach (GtkFlowBox *box,
                                                                 GtkFlowBoxForeachFunc func,
                                                                 gpointer data);
extern
GList *gtk_flow_box_get_selected_children (GtkFlowBox *box);
extern
void gtk_flow_box_select_child (GtkFlowBox *box,
                                                                 GtkFlowBoxChild *child);
extern
void gtk_flow_box_unselect_child (GtkFlowBox *box,
                                                                 GtkFlowBoxChild *child);
extern
void gtk_flow_box_select_all (GtkFlowBox *box);
extern
void gtk_flow_box_unselect_all (GtkFlowBox *box);
extern
void gtk_flow_box_set_selection_mode (GtkFlowBox *box,
                                                                 GtkSelectionMode mode);
extern
GtkSelectionMode gtk_flow_box_get_selection_mode (GtkFlowBox *box);
extern
void gtk_flow_box_set_hadjustment (GtkFlowBox *box,
                                                                 GtkAdjustment *adjustment);
extern
void gtk_flow_box_set_vadjustment (GtkFlowBox *box,
                                                                 GtkAdjustment *adjustment);
typedef gboolean (*GtkFlowBoxFilterFunc) (GtkFlowBoxChild *child,
                                          gpointer user_data);
extern
void gtk_flow_box_set_filter_func (GtkFlowBox *box,
                                                                 GtkFlowBoxFilterFunc filter_func,
                                                                 gpointer user_data,
                                                                 GDestroyNotify destroy);
extern
void gtk_flow_box_invalidate_filter (GtkFlowBox *box);
typedef gint (*GtkFlowBoxSortFunc) (GtkFlowBoxChild *child1,
                                    GtkFlowBoxChild *child2,
                                    gpointer user_data);
extern
void gtk_flow_box_set_sort_func (GtkFlowBox *box,
                                                                 GtkFlowBoxSortFunc sort_func,
                                                                 gpointer user_data,
                                                                 GDestroyNotify destroy);
extern
void gtk_flow_box_invalidate_sort (GtkFlowBox *box);
typedef struct _GtkFontButton GtkFontButton;
typedef struct _GtkFontButtonClass GtkFontButtonClass;
typedef struct _GtkFontButtonPrivate GtkFontButtonPrivate;
struct _GtkFontButton {
  GtkButton button;
  GtkFontButtonPrivate *priv;
};
struct _GtkFontButtonClass {
  GtkButtonClass parent_class;
  void (* font_set) (GtkFontButton *gfp);
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_font_button_get_type (void) __attribute__((__const__));
extern
GtkWidget *gtk_font_button_new (void);
extern
GtkWidget *gtk_font_button_new_with_font (const gchar *fontname);
extern
const gchar * gtk_font_button_get_title (GtkFontButton *font_button);
extern
void gtk_font_button_set_title (GtkFontButton *font_button,
                                                      const gchar *title);
extern
gboolean gtk_font_button_get_use_font (GtkFontButton *font_button);
extern
void gtk_font_button_set_use_font (GtkFontButton *font_button,
                                                      gboolean use_font);
extern
gboolean gtk_font_button_get_use_size (GtkFontButton *font_button);
extern
void gtk_font_button_set_use_size (GtkFontButton *font_button,
                                                      gboolean use_size);
extern
const gchar * gtk_font_button_get_font_name (GtkFontButton *font_button);
extern
gboolean gtk_font_button_set_font_name (GtkFontButton *font_button,
                                                      const gchar *fontname);
extern
gboolean gtk_font_button_get_show_style (GtkFontButton *font_button);
extern
void gtk_font_button_set_show_style (GtkFontButton *font_button,
                                                      gboolean show_style);
extern
gboolean gtk_font_button_get_show_size (GtkFontButton *font_button);
extern
void gtk_font_button_set_show_size (GtkFontButton *font_button,
                                                      gboolean show_size);
typedef gboolean (*GtkFontFilterFunc) (const PangoFontFamily *family,
                                       const PangoFontFace *face,
                                       gpointer data);
typedef struct _GtkFontChooser GtkFontChooser;
typedef struct _GtkFontChooserIface GtkFontChooserIface;
struct _GtkFontChooserIface
{
  GTypeInterface base_iface;
  PangoFontFamily * (* get_font_family) (GtkFontChooser *fontchooser);
  PangoFontFace * (* get_font_face) (GtkFontChooser *fontchooser);
  gint (* get_font_size) (GtkFontChooser *fontchooser);
  void (* set_filter_func) (GtkFontChooser *fontchooser,
                                                 GtkFontFilterFunc filter,
                                                 gpointer user_data,
                                                 GDestroyNotify destroy);
  void (* font_activated) (GtkFontChooser *chooser,
                           const gchar *fontname);
  void (* set_font_map) (GtkFontChooser *fontchooser,
                                                 PangoFontMap *fontmap);
  PangoFontMap * (* get_font_map) (GtkFontChooser *fontchooser);
  gpointer padding[10];
};
extern
GType gtk_font_chooser_get_type (void) __attribute__((__const__));
extern
PangoFontFamily *gtk_font_chooser_get_font_family (GtkFontChooser *fontchooser);
extern
PangoFontFace *gtk_font_chooser_get_font_face (GtkFontChooser *fontchooser);
extern
gint gtk_font_chooser_get_font_size (GtkFontChooser *fontchooser);
extern
PangoFontDescription *
                 gtk_font_chooser_get_font_desc (GtkFontChooser *fontchooser);
extern
void gtk_font_chooser_set_font_desc (GtkFontChooser *fontchooser,
                                                            const PangoFontDescription *font_desc);
extern
gchar* gtk_font_chooser_get_font (GtkFontChooser *fontchooser);
extern
void gtk_font_chooser_set_font (GtkFontChooser *fontchooser,
                                                            const gchar *fontname);
extern
gchar* gtk_font_chooser_get_preview_text (GtkFontChooser *fontchooser);
extern
void gtk_font_chooser_set_preview_text (GtkFontChooser *fontchooser,
                                                            const gchar *text);
extern
gboolean gtk_font_chooser_get_show_preview_entry (GtkFontChooser *fontchooser);
extern
void gtk_font_chooser_set_show_preview_entry (GtkFontChooser *fontchooser,
                                                            gboolean show_preview_entry);
extern
void gtk_font_chooser_set_filter_func (GtkFontChooser *fontchooser,
                                                            GtkFontFilterFunc filter,
                                                            gpointer user_data,
                                                            GDestroyNotify destroy);
extern
void gtk_font_chooser_set_font_map (GtkFontChooser *fontchooser,
                                                            PangoFontMap *fontmap);
extern
PangoFontMap * gtk_font_chooser_get_font_map (GtkFontChooser *fontchooser);
typedef struct _GtkFontChooserDialog GtkFontChooserDialog;
typedef struct _GtkFontChooserDialogPrivate GtkFontChooserDialogPrivate;
typedef struct _GtkFontChooserDialogClass GtkFontChooserDialogClass;
struct _GtkFontChooserDialog
{
  GtkDialog parent_instance;
  GtkFontChooserDialogPrivate *priv;
};
struct _GtkFontChooserDialogClass
{
  GtkDialogClass parent_class;
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_font_chooser_dialog_get_type (void) __attribute__((__const__));
extern
GtkWidget* gtk_font_chooser_dialog_new (const gchar *title,
                                                     GtkWindow *parent);
typedef struct _GtkFontChooserWidget GtkFontChooserWidget;
typedef struct _GtkFontChooserWidgetPrivate GtkFontChooserWidgetPrivate;
typedef struct _GtkFontChooserWidgetClass GtkFontChooserWidgetClass;
struct _GtkFontChooserWidget
{
  GtkBox parent_instance;
  GtkFontChooserWidgetPrivate *priv;
};
struct _GtkFontChooserWidgetClass
{
  GtkBoxClass parent_class;
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
  void (*_gtk_reserved5) (void);
  void (*_gtk_reserved6) (void);
  void (*_gtk_reserved7) (void);
  void (*_gtk_reserved8) (void);
};
extern
GType gtk_font_chooser_widget_get_type (void) __attribute__((__const__));
extern
GtkWidget* gtk_font_chooser_widget_new (void);
typedef struct _GtkGesture GtkGesture;
typedef struct _GtkGestureClass GtkGestureClass;
extern
GType gtk_gesture_get_type (void) __attribute__((__const__));
extern
GdkDevice * gtk_gesture_get_device (GtkGesture *gesture);
extern
gboolean gtk_gesture_set_state (GtkGesture *gesture,
                                              GtkEventSequenceState state);
extern
GtkEventSequenceState
            gtk_gesture_get_sequence_state (GtkGesture *gesture,
                                              GdkEventSequence *sequence);
extern
gboolean gtk_gesture_set_sequence_state (GtkGesture *gesture,
                                              GdkEventSequence *sequence,
                                              GtkEventSequenceState state);
extern
GList * gtk_gesture_get_sequences (GtkGesture *gesture);
extern
GdkEventSequence * gtk_gesture_get_last_updated_sequence
                                             (GtkGesture *gesture);
extern
gboolean gtk_gesture_handles_sequence (GtkGesture *gesture,
                                              GdkEventSequence *sequence);
extern
const GdkEvent *
            gtk_gesture_get_last_event (GtkGesture *gesture,
                                              GdkEventSequence *sequence);
extern
gboolean gtk_gesture_get_point (GtkGesture *gesture,
                                              GdkEventSequence *sequence,
                                              gdouble *x,
                                              gdouble *y);
extern
gboolean gtk_gesture_get_bounding_box (GtkGesture *gesture,
                                              GdkRectangle *rect);
extern
gboolean gtk_gesture_get_bounding_box_center
                                             (GtkGesture *gesture,
                                              gdouble *x,
                                              gdouble *y);
extern
gboolean gtk_gesture_is_active (GtkGesture *gesture);
extern
gboolean gtk_gesture_is_recognized (GtkGesture *gesture);
extern
GdkWindow * gtk_gesture_get_window (GtkGesture *gesture);
extern
void gtk_gesture_set_window (GtkGesture *gesture,
                                              GdkWindow *window);
extern
void gtk_gesture_group (GtkGesture *group_gesture,
                                              GtkGesture *gesture);
extern
void gtk_gesture_ungroup (GtkGesture *gesture);
extern
GList * gtk_gesture_get_group (GtkGesture *gesture);
extern
gboolean gtk_gesture_is_grouped_with (GtkGesture *gesture,
                                              GtkGesture *other);
typedef struct _GtkGestureSingle GtkGestureSingle;
typedef struct _GtkGestureSingleClass GtkGestureSingleClass;
extern
GType gtk_gesture_single_get_type (void) __attribute__((__const__));
extern
gboolean gtk_gesture_single_get_touch_only (GtkGestureSingle *gesture);
extern
void gtk_gesture_single_set_touch_only (GtkGestureSingle *gesture,
                                               gboolean touch_only);
extern
gboolean gtk_gesture_single_get_exclusive (GtkGestureSingle *gesture);
extern
void gtk_gesture_single_set_exclusive (GtkGestureSingle *gesture,
                                               gboolean exclusive);
extern
guint gtk_gesture_single_get_button (GtkGestureSingle *gesture);
extern
void gtk_gesture_single_set_button (GtkGestureSingle *gesture,
                                               guint button);
extern
guint gtk_gesture_single_get_current_button
                                              (GtkGestureSingle *gesture);
extern
GdkEventSequence * gtk_gesture_single_get_current_sequence
                                              (GtkGestureSingle *gesture);
typedef struct _GtkGestureDrag GtkGestureDrag;
typedef struct _GtkGestureDragClass GtkGestureDragClass;
extern
GType gtk_gesture_drag_get_type (void) __attribute__((__const__));
extern
GtkGesture * gtk_gesture_drag_new (GtkWidget *widget);
extern
gboolean gtk_gesture_drag_get_start_point (GtkGestureDrag *gesture,
                                                 gdouble *x,
                                                 gdouble *y);
extern
gboolean gtk_gesture_drag_get_offset (GtkGestureDrag *gesture,
                                                 gdouble *x,
                                                 gdouble *y);
typedef struct _GtkGestureLongPress GtkGestureLongPress;
typedef struct _GtkGestureLongPressClass GtkGestureLongPressClass;
extern
GType gtk_gesture_long_press_get_type (void) __attribute__((__const__));
extern
GtkGesture * gtk_gesture_long_press_new (GtkWidget *widget);
typedef struct _GtkGestureMultiPress GtkGestureMultiPress;
typedef struct _GtkGestureMultiPressClass GtkGestureMultiPressClass;
extern
GType gtk_gesture_multi_press_get_type (void) __attribute__((__const__));
extern
GtkGesture * gtk_gesture_multi_press_new (GtkWidget *widget);
extern
void gtk_gesture_multi_press_set_area (GtkGestureMultiPress *gesture,
            const GdkRectangle *rect);
extern
gboolean gtk_gesture_multi_press_get_area (GtkGestureMultiPress *gesture,
                                               GdkRectangle *rect);
typedef struct _GtkGesturePan GtkGesturePan;
typedef struct _GtkGesturePanClass GtkGesturePanClass;
extern
GType gtk_gesture_pan_get_type (void) __attribute__((__const__));
extern
GtkGesture * gtk_gesture_pan_new (GtkWidget *widget,
                                                   GtkOrientation orientation);
extern
GtkOrientation gtk_gesture_pan_get_orientation (GtkGesturePan *gesture);
extern
void gtk_gesture_pan_set_orientation (GtkGesturePan *gesture,
                                                   GtkOrientation orientation);
typedef struct _GtkGestureRotate GtkGestureRotate;
typedef struct _GtkGestureRotateClass GtkGestureRotateClass;
extern
GType gtk_gesture_rotate_get_type (void) __attribute__((__const__));
extern
GtkGesture * gtk_gesture_rotate_new (GtkWidget *widget);
extern
gdouble gtk_gesture_rotate_get_angle_delta (GtkGestureRotate *gesture);
typedef struct _GtkGestureSwipe GtkGestureSwipe;
typedef struct _GtkGestureSwipeClass GtkGestureSwipeClass;
extern
GType gtk_gesture_swipe_get_type (void) __attribute__((__const__));
extern
GtkGesture * gtk_gesture_swipe_new (GtkWidget *widget);
extern
gboolean gtk_gesture_swipe_get_velocity (GtkGestureSwipe *gesture,
                                             gdouble *velocity_x,
                                             gdouble *velocity_y);
typedef struct _GtkGestureZoom GtkGestureZoom;
typedef struct _GtkGestureZoomClass GtkGestureZoomClass;
extern
GType gtk_gesture_zoom_get_type (void) __attribute__((__const__));
extern
GtkGesture * gtk_gesture_zoom_new (GtkWidget *widget);
extern
gdouble gtk_gesture_zoom_get_scale_delta (GtkGestureZoom *gesture);
typedef struct _GtkGLArea GtkGLArea;
typedef struct _GtkGLAreaClass GtkGLAreaClass;
struct _GtkGLArea
{
  GtkWidget parent_instance;
};
struct _GtkGLAreaClass
{
  GtkWidgetClass parent_class;
  gboolean (* render) (GtkGLArea *area,
                                     GdkGLContext *context);
  void (* resize) (GtkGLArea *area,
                                     int width,
                                     int height);
  GdkGLContext * (* create_context) (GtkGLArea *area);
  gpointer _padding[6];
};
extern
GType gtk_gl_area_get_type (void) __attribute__((__const__));
extern
GtkWidget * gtk_gl_area_new (void);
extern
void gtk_gl_area_set_required_version (GtkGLArea *area,
                                                         gint major,
                                                         gint minor);
extern
void gtk_gl_area_get_required_version (GtkGLArea *area,
                                                         gint *major,
                                                         gint *minor);
extern
gboolean gtk_gl_area_get_has_alpha (GtkGLArea *area);
extern
void gtk_gl_area_set_has_alpha (GtkGLArea *area,
                                                         gboolean has_alpha);
extern
gboolean gtk_gl_area_get_has_depth_buffer (GtkGLArea *area);
extern
void gtk_gl_area_set_has_depth_buffer (GtkGLArea *area,
                                                         gboolean has_depth_buffer);
extern
gboolean gtk_gl_area_get_has_stencil_buffer (GtkGLArea *area);
extern
void gtk_gl_area_set_has_stencil_buffer (GtkGLArea *area,
                                                         gboolean has_stencil_buffer);
extern
gboolean gtk_gl_area_get_auto_render (GtkGLArea *area);
extern
void gtk_gl_area_set_auto_render (GtkGLArea *area,
                                                         gboolean auto_render);
extern
void gtk_gl_area_queue_render (GtkGLArea *area);
extern
GdkGLContext * gtk_gl_area_get_context (GtkGLArea *area);
extern
void gtk_gl_area_make_current (GtkGLArea *area);
extern
void gtk_gl_area_attach_buffers (GtkGLArea *area);
extern
void gtk_gl_area_set_error (GtkGLArea *area,
                                                         const GError *error);
extern
GError * gtk_gl_area_get_error (GtkGLArea *area);
typedef struct _GtkGrid GtkGrid;
typedef struct _GtkGridPrivate GtkGridPrivate;
typedef struct _GtkGridClass GtkGridClass;
struct _GtkGrid
{
  GtkContainer container;
  GtkGridPrivate *priv;
};
struct _GtkGridClass
{
  GtkContainerClass parent_class;
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
  void (*_gtk_reserved5) (void);
  void (*_gtk_reserved6) (void);
  void (*_gtk_reserved7) (void);
  void (*_gtk_reserved8) (void);
};
extern
GType gtk_grid_get_type (void) __attribute__((__const__));
extern
GtkWidget* gtk_grid_new (void);
extern
void gtk_grid_attach (GtkGrid *grid,
                                            GtkWidget *child,
                                            gint left,
                                            gint top,
                                            gint width,
                                            gint height);
extern
void gtk_grid_attach_next_to (GtkGrid *grid,
                                            GtkWidget *child,
                                            GtkWidget *sibling,
                                            GtkPositionType side,
                                            gint width,
                                            gint height);
extern
GtkWidget *gtk_grid_get_child_at (GtkGrid *grid,
                                            gint left,
                                            gint top);
extern
void gtk_grid_insert_row (GtkGrid *grid,
                                            gint position);
extern
void gtk_grid_insert_column (GtkGrid *grid,
                                            gint position);
extern
void gtk_grid_remove_row (GtkGrid *grid,
                                            gint position);
extern
void gtk_grid_remove_column (GtkGrid *grid,
                                            gint position);
extern
void gtk_grid_insert_next_to (GtkGrid *grid,
                                            GtkWidget *sibling,
                                            GtkPositionType side);
extern
void gtk_grid_set_row_homogeneous (GtkGrid *grid,
                                            gboolean homogeneous);
extern
gboolean gtk_grid_get_row_homogeneous (GtkGrid *grid);
extern
void gtk_grid_set_row_spacing (GtkGrid *grid,
                                            guint spacing);
extern
guint gtk_grid_get_row_spacing (GtkGrid *grid);
extern
void gtk_grid_set_column_homogeneous (GtkGrid *grid,
                                            gboolean homogeneous);
extern
gboolean gtk_grid_get_column_homogeneous (GtkGrid *grid);
extern
void gtk_grid_set_column_spacing (GtkGrid *grid,
                                            guint spacing);
extern
guint gtk_grid_get_column_spacing (GtkGrid *grid);
extern
void gtk_grid_set_row_baseline_position (GtkGrid *grid,
            gint row,
            GtkBaselinePosition pos);
extern
GtkBaselinePosition gtk_grid_get_row_baseline_position (GtkGrid *grid,
       gint row);
extern
void gtk_grid_set_baseline_row (GtkGrid *grid,
         gint row);
extern
gint gtk_grid_get_baseline_row (GtkGrid *grid);
typedef struct _GtkHeaderBar GtkHeaderBar;
typedef struct _GtkHeaderBarPrivate GtkHeaderBarPrivate;
typedef struct _GtkHeaderBarClass GtkHeaderBarClass;
struct _GtkHeaderBar
{
  GtkContainer container;
};
struct _GtkHeaderBarClass
{
  GtkContainerClass parent_class;
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_header_bar_get_type (void) __attribute__((__const__));
extern
GtkWidget *gtk_header_bar_new (void);
extern
void gtk_header_bar_set_title (GtkHeaderBar *bar,
                                               const gchar *title);
extern
const gchar *gtk_header_bar_get_title (GtkHeaderBar *bar);
extern
void gtk_header_bar_set_subtitle (GtkHeaderBar *bar,
                                               const gchar *subtitle);
extern
const gchar *gtk_header_bar_get_subtitle (GtkHeaderBar *bar);
extern
void gtk_header_bar_set_custom_title (GtkHeaderBar *bar,
                                               GtkWidget *title_widget);
extern
GtkWidget *gtk_header_bar_get_custom_title (GtkHeaderBar *bar);
extern
void gtk_header_bar_pack_start (GtkHeaderBar *bar,
                                               GtkWidget *child);
extern
void gtk_header_bar_pack_end (GtkHeaderBar *bar,
                                               GtkWidget *child);
extern
gboolean gtk_header_bar_get_show_close_button (GtkHeaderBar *bar);
extern
void gtk_header_bar_set_show_close_button (GtkHeaderBar *bar,
                                                   gboolean setting);
extern
void gtk_header_bar_set_has_subtitle (GtkHeaderBar *bar,
                                              gboolean setting);
extern
gboolean gtk_header_bar_get_has_subtitle (GtkHeaderBar *bar);
extern
void gtk_header_bar_set_decoration_layout (GtkHeaderBar *bar,
                                                   const gchar *layout);
extern
const gchar *gtk_header_bar_get_decoration_layout (GtkHeaderBar *bar);
typedef struct _GtkIconFactory GtkIconFactory;
typedef struct _GtkIconFactoryPrivate GtkIconFactoryPrivate;
typedef struct _GtkIconFactoryClass GtkIconFactoryClass;
struct _GtkIconFactory
{
  GObject parent_instance;
  GtkIconFactoryPrivate *priv;
};
struct _GtkIconFactoryClass
{
  GObjectClass parent_class;
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_icon_factory_get_type (void) __attribute__((__const__));
extern
GtkIconFactory* gtk_icon_factory_new (void);
extern
void gtk_icon_factory_add (GtkIconFactory *factory,
                                           const gchar *stock_id,
                                           GtkIconSet *icon_set);
extern
GtkIconSet* gtk_icon_factory_lookup (GtkIconFactory *factory,
                                           const gchar *stock_id);
extern
void gtk_icon_factory_add_default (GtkIconFactory *factory);
extern
void gtk_icon_factory_remove_default (GtkIconFactory *factory);
extern
GtkIconSet* gtk_icon_factory_lookup_default (const gchar *stock_id);
extern
gboolean gtk_icon_size_lookup (GtkIconSize size,
         gint *width,
         gint *height);
extern
gboolean gtk_icon_size_lookup_for_settings (GtkSettings *settings,
         GtkIconSize size,
         gint *width,
         gint *height);
extern
GtkIconSize gtk_icon_size_register (const gchar *name,
                                                    gint width,
                                                    gint height);
extern
void gtk_icon_size_register_alias (const gchar *alias,
                                                    GtkIconSize target);
extern
GtkIconSize gtk_icon_size_from_name (const gchar *name);
extern
const gchar* gtk_icon_size_get_name (GtkIconSize size);
extern
GType gtk_icon_set_get_type (void) __attribute__((__const__));
extern
GtkIconSet* gtk_icon_set_new (void);
extern
GtkIconSet* gtk_icon_set_new_from_pixbuf (GdkPixbuf *pixbuf);
extern
GtkIconSet* gtk_icon_set_ref (GtkIconSet *icon_set);
extern
void gtk_icon_set_unref (GtkIconSet *icon_set);
extern
GtkIconSet* gtk_icon_set_copy (GtkIconSet *icon_set);
extern
GdkPixbuf* gtk_icon_set_render_icon (GtkIconSet *icon_set,
                                          GtkStyle *style,
                                          GtkTextDirection direction,
                                          GtkStateType state,
                                          GtkIconSize size,
                                          GtkWidget *widget,
                                          const gchar *detail);
extern
void gtk_icon_set_add_source (GtkIconSet *icon_set,
                                          const GtkIconSource *source);
extern
void gtk_icon_set_get_sizes (GtkIconSet *icon_set,
                                          GtkIconSize **sizes,
                                          gint *n_sizes);
extern
GType gtk_icon_source_get_type (void) __attribute__((__const__));
extern
GtkIconSource* gtk_icon_source_new (void);
extern
GtkIconSource* gtk_icon_source_copy (const GtkIconSource *source);
extern
void gtk_icon_source_free (GtkIconSource *source);
extern
void gtk_icon_source_set_filename (GtkIconSource *source,
                                                         const gchar *filename);
extern
void gtk_icon_source_set_icon_name (GtkIconSource *source,
                                                         const gchar *icon_name);
extern
void gtk_icon_source_set_pixbuf (GtkIconSource *source,
                                                         GdkPixbuf *pixbuf);
extern
const gchar * gtk_icon_source_get_filename (const GtkIconSource *source);
extern
const gchar * gtk_icon_source_get_icon_name (const GtkIconSource *source);
extern
GdkPixbuf* gtk_icon_source_get_pixbuf (const GtkIconSource *source);
extern
void gtk_icon_source_set_direction_wildcarded (GtkIconSource *source,
                                                           gboolean setting);
extern
void gtk_icon_source_set_state_wildcarded (GtkIconSource *source,
                                                           gboolean setting);
extern
void gtk_icon_source_set_size_wildcarded (GtkIconSource *source,
                                                           gboolean setting);
extern
gboolean gtk_icon_source_get_size_wildcarded (const GtkIconSource *source);
extern
gboolean gtk_icon_source_get_state_wildcarded (const GtkIconSource *source);
extern
gboolean gtk_icon_source_get_direction_wildcarded (const GtkIconSource *source);
extern
void gtk_icon_source_set_direction (GtkIconSource *source,
                                                           GtkTextDirection direction);
extern
void gtk_icon_source_set_state (GtkIconSource *source,
                                                           GtkStateType state);
extern
void gtk_icon_source_set_size (GtkIconSource *source,
                                                           GtkIconSize size);
extern
GtkTextDirection gtk_icon_source_get_direction (const GtkIconSource *source);
extern
GtkStateType gtk_icon_source_get_state (const GtkIconSource *source);
extern
GtkIconSize gtk_icon_source_get_size (const GtkIconSource *source);
void _gtk_icon_set_invalidate_caches (void);
GList* _gtk_icon_factory_list_ids (void);
void _gtk_icon_factory_ensure_default_icons (void);
typedef struct _GtkStyleProperties GtkStyleProperties;
typedef struct _GtkStylePropertiesClass GtkStylePropertiesClass;
typedef struct _GtkStylePropertiesPrivate GtkStylePropertiesPrivate;
typedef struct _GtkSymbolicColor GtkSymbolicColor;
typedef struct _GtkGradient GtkGradient;
struct _GtkStyleProperties
{
  GObject parent_object;
  GtkStylePropertiesPrivate *priv;
};
struct _GtkStylePropertiesClass
{
  GObjectClass parent_class;
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
typedef gboolean (* GtkStylePropertyParser) (const gchar *string,
                                             GValue *value,
                                             GError **error);
extern
GType gtk_style_properties_get_type (void) __attribute__((__const__));
extern
void gtk_style_properties_register_property (GtkStylePropertyParser parse_func,
                                                 GParamSpec *pspec);
extern
gboolean gtk_style_properties_lookup_property (const gchar *property_name,
                                                 GtkStylePropertyParser *parse_func,
                                                 GParamSpec **pspec);
extern
GtkStyleProperties * gtk_style_properties_new (void);
extern
void gtk_style_properties_map_color (GtkStyleProperties *props,
                                                      const gchar *name,
                                                      GtkSymbolicColor *color);
extern
GtkSymbolicColor * gtk_style_properties_lookup_color (GtkStyleProperties *props,
                                                      const gchar *name);
extern
void gtk_style_properties_set_property (GtkStyleProperties *props,
                                            const gchar *property,
                                            GtkStateFlags state,
                                            const GValue *value);
extern
void gtk_style_properties_set_valist (GtkStyleProperties *props,
                                            GtkStateFlags state,
                                            va_list args);
extern
void gtk_style_properties_set (GtkStyleProperties *props,
                                            GtkStateFlags state,
                                            ...) __attribute__((__sentinel__));
extern
gboolean gtk_style_properties_get_property (GtkStyleProperties *props,
                                            const gchar *property,
                                            GtkStateFlags state,
                                            GValue *value);
extern
void gtk_style_properties_get_valist (GtkStyleProperties *props,
                                            GtkStateFlags state,
                                            va_list args);
extern
void gtk_style_properties_get (GtkStyleProperties *props,
                                            GtkStateFlags state,
                                            ...) __attribute__((__sentinel__));
extern
void gtk_style_properties_unset_property (GtkStyleProperties *props,
                                              const gchar *property,
                                              GtkStateFlags state);
extern
void gtk_style_properties_clear (GtkStyleProperties *props);
extern
void gtk_style_properties_merge (GtkStyleProperties *props,
                                              const GtkStyleProperties *props_to_merge,
                                              gboolean replace);
typedef struct _GtkStyleProviderIface GtkStyleProviderIface;
typedef struct _GtkStyleProvider GtkStyleProvider;
struct _GtkStyleProviderIface
{
  GTypeInterface g_iface;
  GtkStyleProperties * (* get_style) (GtkStyleProvider *provider,
                                      GtkWidgetPath *path);
  gboolean (* get_style_property) (GtkStyleProvider *provider,
                                   GtkWidgetPath *path,
                                   GtkStateFlags state,
                                   GParamSpec *pspec,
                                   GValue *value);
  GtkIconFactory * (* get_icon_factory) (GtkStyleProvider *provider,
      GtkWidgetPath *path);
};
extern
GType gtk_style_provider_get_type (void) __attribute__((__const__));
extern
GtkStyleProperties *gtk_style_provider_get_style (GtkStyleProvider *provider,
                                                  GtkWidgetPath *path);
extern
gboolean gtk_style_provider_get_style_property (GtkStyleProvider *provider,
                                                GtkWidgetPath *path,
                                                GtkStateFlags state,
                                                GParamSpec *pspec,
                                                GValue *value);
extern
GtkIconFactory * gtk_style_provider_get_icon_factory (GtkStyleProvider *provider,
            GtkWidgetPath *path);
typedef struct _GtkStyleContextClass GtkStyleContextClass;
typedef struct _GtkStyleContextPrivate GtkStyleContextPrivate;
struct _GtkStyleContext
{
  GObject parent_object;
  GtkStyleContextPrivate *priv;
};
struct _GtkStyleContextClass
{
  GObjectClass parent_class;
  void (* changed) (GtkStyleContext *context);
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_style_context_get_type (void) __attribute__((__const__));
extern
GtkStyleContext * gtk_style_context_new (void);
extern
void gtk_style_context_add_provider_for_screen (GdkScreen *screen,
                                                   GtkStyleProvider *provider,
                                                   guint priority);
extern
void gtk_style_context_remove_provider_for_screen (GdkScreen *screen,
                                                   GtkStyleProvider *provider);
extern
void gtk_style_context_add_provider (GtkStyleContext *context,
                                        GtkStyleProvider *provider,
                                        guint priority);
extern
void gtk_style_context_remove_provider (GtkStyleContext *context,
                                        GtkStyleProvider *provider);
extern
void gtk_style_context_save (GtkStyleContext *context);
extern
void gtk_style_context_restore (GtkStyleContext *context);
extern
GtkCssSection * gtk_style_context_get_section (GtkStyleContext *context,
                                               const gchar *property);
extern
void gtk_style_context_get_property (GtkStyleContext *context,
                                     const gchar *property,
                                     GtkStateFlags state,
                                     GValue *value);
extern
void gtk_style_context_get_valist (GtkStyleContext *context,
                                     GtkStateFlags state,
                                     va_list args);
extern
void gtk_style_context_get (GtkStyleContext *context,
                                     GtkStateFlags state,
                                     ...) __attribute__((__sentinel__));
extern
void gtk_style_context_set_state (GtkStyleContext *context,
                                              GtkStateFlags flags);
extern
GtkStateFlags gtk_style_context_get_state (GtkStyleContext *context);
extern
void gtk_style_context_set_scale (GtkStyleContext *context,
                                              gint scale);
extern
gint gtk_style_context_get_scale (GtkStyleContext *context);
extern
gboolean gtk_style_context_state_is_running (GtkStyleContext *context,
                                                  GtkStateType state,
                                                  gdouble *progress);
extern
void gtk_style_context_set_path (GtkStyleContext *context,
                                              GtkWidgetPath *path);
extern
const GtkWidgetPath * gtk_style_context_get_path (GtkStyleContext *context);
extern
void gtk_style_context_set_parent (GtkStyleContext *context,
                                              GtkStyleContext *parent);
extern
GtkStyleContext *gtk_style_context_get_parent (GtkStyleContext *context);
extern
GList * gtk_style_context_list_classes (GtkStyleContext *context);
extern
void gtk_style_context_add_class (GtkStyleContext *context,
                                         const gchar *class_name);
extern
void gtk_style_context_remove_class (GtkStyleContext *context,
                                         const gchar *class_name);
extern
gboolean gtk_style_context_has_class (GtkStyleContext *context,
                                         const gchar *class_name);
extern
GList * gtk_style_context_list_regions (GtkStyleContext *context);
extern
void gtk_style_context_add_region (GtkStyleContext *context,
                                          const gchar *region_name,
                                          GtkRegionFlags flags);
extern
void gtk_style_context_remove_region (GtkStyleContext *context,
                                          const gchar *region_name);
extern
gboolean gtk_style_context_has_region (GtkStyleContext *context,
                                          const gchar *region_name,
                                          GtkRegionFlags *flags_return);
extern
void gtk_style_context_get_style_property (GtkStyleContext *context,
                                           const gchar *property_name,
                                           GValue *value);
extern
void gtk_style_context_get_style_valist (GtkStyleContext *context,
                                           va_list args);
extern
void gtk_style_context_get_style (GtkStyleContext *context,
                                           ...);
extern
GtkIconSet * gtk_style_context_lookup_icon_set (GtkStyleContext *context,
                                                const gchar *stock_id);
extern
GdkPixbuf * gtk_icon_set_render_icon_pixbuf (GtkIconSet *icon_set,
                                                GtkStyleContext *context,
                                                GtkIconSize size);
extern
cairo_surface_t *
gtk_icon_set_render_icon_surface (GtkIconSet *icon_set,
      GtkStyleContext *context,
      GtkIconSize size,
      int scale,
      GdkWindow *for_window);
extern
void gtk_style_context_set_screen (GtkStyleContext *context,
                                          GdkScreen *screen);
extern
GdkScreen * gtk_style_context_get_screen (GtkStyleContext *context);
extern
void gtk_style_context_set_frame_clock (GtkStyleContext *context,
                                                  GdkFrameClock *frame_clock);
extern
GdkFrameClock *gtk_style_context_get_frame_clock (GtkStyleContext *context);
extern
void gtk_style_context_set_direction (GtkStyleContext *context,
                                                  GtkTextDirection direction);
extern
GtkTextDirection gtk_style_context_get_direction (GtkStyleContext *context);
extern
void gtk_style_context_set_junction_sides (GtkStyleContext *context,
                                                       GtkJunctionSides sides);
extern
GtkJunctionSides gtk_style_context_get_junction_sides (GtkStyleContext *context);
extern
gboolean gtk_style_context_lookup_color (GtkStyleContext *context,
                                         const gchar *color_name,
                                         GdkRGBA *color);
extern
void gtk_style_context_notify_state_change (GtkStyleContext *context,
                                             GdkWindow *window,
                                             gpointer region_id,
                                             GtkStateType state,
                                             gboolean state_value);
extern
void gtk_style_context_cancel_animations (GtkStyleContext *context,
                                             gpointer region_id);
extern
void gtk_style_context_scroll_animations (GtkStyleContext *context,
                                             GdkWindow *window,
                                             gint dx,
                                             gint dy);
extern
void gtk_style_context_push_animatable_region (GtkStyleContext *context,
                                               gpointer region_id);
extern
void gtk_style_context_pop_animatable_region (GtkStyleContext *context);
extern
void gtk_style_context_get_color (GtkStyleContext *context,
                                             GtkStateFlags state,
                                             GdkRGBA *color);
extern
void gtk_style_context_get_background_color (GtkStyleContext *context,
                                             GtkStateFlags state,
                                             GdkRGBA *color);
extern
void gtk_style_context_get_border_color (GtkStyleContext *context,
                                             GtkStateFlags state,
                                             GdkRGBA *color);
extern
const PangoFontDescription *
     gtk_style_context_get_font (GtkStyleContext *context,
                                             GtkStateFlags state);
extern
void gtk_style_context_get_border (GtkStyleContext *context,
                                             GtkStateFlags state,
                                             GtkBorder *border);
extern
void gtk_style_context_get_padding (GtkStyleContext *context,
                                             GtkStateFlags state,
                                             GtkBorder *padding);
extern
void gtk_style_context_get_margin (GtkStyleContext *context,
                                             GtkStateFlags state,
                                             GtkBorder *margin);
extern
void gtk_style_context_invalidate (GtkStyleContext *context);
extern
void gtk_style_context_reset_widgets (GdkScreen *screen);
extern
void gtk_style_context_set_background (GtkStyleContext *context,
                                             GdkWindow *window);
extern
void gtk_render_insertion_cursor
                                   (GtkStyleContext *context,
                                    cairo_t *cr,
                                    gdouble x,
                                    gdouble y,
                                    PangoLayout *layout,
                                    int index,
                                    PangoDirection direction);
extern
void gtk_draw_insertion_cursor (GtkWidget *widget,
                                     cairo_t *cr,
                                     const GdkRectangle *location,
                                     gboolean is_primary,
                                     GtkTextDirection direction,
                                     gboolean draw_arrow);
typedef struct _GtkIconInfo GtkIconInfo;
typedef struct _GtkIconInfoClass GtkIconInfoClass;
typedef struct _GtkIconTheme GtkIconTheme;
typedef struct _GtkIconThemeClass GtkIconThemeClass;
typedef struct _GtkIconThemePrivate GtkIconThemePrivate;
struct _GtkIconTheme
{
  GObject parent_instance;
  GtkIconThemePrivate *priv;
};
struct _GtkIconThemeClass
{
  GObjectClass parent_class;
  void (* changed) (GtkIconTheme *icon_theme);
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
typedef enum
{
  GTK_ICON_LOOKUP_NO_SVG = 1 << 0,
  GTK_ICON_LOOKUP_FORCE_SVG = 1 << 1,
  GTK_ICON_LOOKUP_USE_BUILTIN = 1 << 2,
  GTK_ICON_LOOKUP_GENERIC_FALLBACK = 1 << 3,
  GTK_ICON_LOOKUP_FORCE_SIZE = 1 << 4,
  GTK_ICON_LOOKUP_FORCE_REGULAR = 1 << 5,
  GTK_ICON_LOOKUP_FORCE_SYMBOLIC = 1 << 6,
  GTK_ICON_LOOKUP_DIR_LTR = 1 << 7,
  GTK_ICON_LOOKUP_DIR_RTL = 1 << 8
} GtkIconLookupFlags;
typedef enum {
  GTK_ICON_THEME_NOT_FOUND,
  GTK_ICON_THEME_FAILED
} GtkIconThemeError;
extern
GQuark gtk_icon_theme_error_quark (void);
extern
GType gtk_icon_theme_get_type (void) __attribute__((__const__));
extern
GtkIconTheme *gtk_icon_theme_new (void);
extern
GtkIconTheme *gtk_icon_theme_get_default (void);
extern
GtkIconTheme *gtk_icon_theme_get_for_screen (GdkScreen *screen);
extern
void gtk_icon_theme_set_screen (GtkIconTheme *icon_theme,
          GdkScreen *screen);
extern
void gtk_icon_theme_set_search_path (GtkIconTheme *icon_theme,
          const gchar *path[],
          gint n_elements);
extern
void gtk_icon_theme_get_search_path (GtkIconTheme *icon_theme,
          gchar **path[],
          gint *n_elements);
extern
void gtk_icon_theme_append_search_path (GtkIconTheme *icon_theme,
          const gchar *path);
extern
void gtk_icon_theme_prepend_search_path (GtkIconTheme *icon_theme,
          const gchar *path);
extern
void gtk_icon_theme_add_resource_path (GtkIconTheme *icon_theme,
                                                    const gchar *path);
extern
void gtk_icon_theme_set_custom_theme (GtkIconTheme *icon_theme,
          const gchar *theme_name);
extern
gboolean gtk_icon_theme_has_icon (GtkIconTheme *icon_theme,
          const gchar *icon_name);
extern
gint *gtk_icon_theme_get_icon_sizes (GtkIconTheme *icon_theme,
          const gchar *icon_name);
extern
GtkIconInfo * gtk_icon_theme_lookup_icon (GtkIconTheme *icon_theme,
          const gchar *icon_name,
          gint size,
          GtkIconLookupFlags flags);
extern
GtkIconInfo * gtk_icon_theme_lookup_icon_for_scale (GtkIconTheme *icon_theme,
                                                    const gchar *icon_name,
                                                    gint size,
                                                    gint scale,
                                                    GtkIconLookupFlags flags);
extern
GtkIconInfo * gtk_icon_theme_choose_icon (GtkIconTheme *icon_theme,
          const gchar *icon_names[],
          gint size,
          GtkIconLookupFlags flags);
extern
GtkIconInfo * gtk_icon_theme_choose_icon_for_scale (GtkIconTheme *icon_theme,
          const gchar *icon_names[],
          gint size,
                                                    gint scale,
          GtkIconLookupFlags flags);
extern
GdkPixbuf * gtk_icon_theme_load_icon (GtkIconTheme *icon_theme,
          const gchar *icon_name,
          gint size,
          GtkIconLookupFlags flags,
          GError **error);
extern
GdkPixbuf * gtk_icon_theme_load_icon_for_scale (GtkIconTheme *icon_theme,
                                                    const gchar *icon_name,
                                                    gint size,
                                                    gint scale,
                                                    GtkIconLookupFlags flags,
                                                    GError **error);
extern
cairo_surface_t * gtk_icon_theme_load_surface (GtkIconTheme *icon_theme,
          const gchar *icon_name,
          gint size,
          gint scale,
          GdkWindow *for_window,
          GtkIconLookupFlags flags,
          GError **error);
extern
GtkIconInfo * gtk_icon_theme_lookup_by_gicon (GtkIconTheme *icon_theme,
                                                    GIcon *icon,
                                                    gint size,
                                                    GtkIconLookupFlags flags);
extern
GtkIconInfo * gtk_icon_theme_lookup_by_gicon_for_scale (GtkIconTheme *icon_theme,
                                                        GIcon *icon,
                                                        gint size,
                                                        gint scale,
                                                        GtkIconLookupFlags flags);
extern
GList * gtk_icon_theme_list_icons (GtkIconTheme *icon_theme,
          const gchar *context);
extern
GList * gtk_icon_theme_list_contexts (GtkIconTheme *icon_theme);
extern
char * gtk_icon_theme_get_example_icon_name (GtkIconTheme *icon_theme);
extern
gboolean gtk_icon_theme_rescan_if_needed (GtkIconTheme *icon_theme);
extern
void gtk_icon_theme_add_builtin_icon (const gchar *icon_name,
                 gint size,
                 GdkPixbuf *pixbuf);
extern
GType gtk_icon_info_get_type (void) __attribute__((__const__));
extern
GtkIconInfo * gtk_icon_info_copy (GtkIconInfo *icon_info);
extern
void gtk_icon_info_free (GtkIconInfo *icon_info);
extern
GtkIconInfo * gtk_icon_info_new_for_pixbuf (GtkIconTheme *icon_theme,
                                                        GdkPixbuf *pixbuf);
extern
gint gtk_icon_info_get_base_size (GtkIconInfo *icon_info);
extern
gint gtk_icon_info_get_base_scale (GtkIconInfo *icon_info);
extern
const gchar * gtk_icon_info_get_filename (GtkIconInfo *icon_info);
extern
GdkPixbuf * gtk_icon_info_get_builtin_pixbuf (GtkIconInfo *icon_info);
extern
gboolean gtk_icon_info_is_symbolic (GtkIconInfo *icon_info);
extern
GdkPixbuf * gtk_icon_info_load_icon (GtkIconInfo *icon_info,
       GError **error);
extern
cairo_surface_t * gtk_icon_info_load_surface (GtkIconInfo *icon_info,
       GdkWindow *for_window,
       GError **error);
extern
void gtk_icon_info_load_icon_async (GtkIconInfo *icon_info,
             GCancellable *cancellable,
             GAsyncReadyCallback callback,
             gpointer user_data);
extern
GdkPixbuf * gtk_icon_info_load_icon_finish (GtkIconInfo *icon_info,
             GAsyncResult *res,
             GError **error);
extern
GdkPixbuf * gtk_icon_info_load_symbolic (GtkIconInfo *icon_info,
                                                        const GdkRGBA *fg,
                                                        const GdkRGBA *success_color,
                                                        const GdkRGBA *warning_color,
                                                        const GdkRGBA *error_color,
                                                        gboolean *was_symbolic,
                                                        GError **error);
extern
void gtk_icon_info_load_symbolic_async (GtkIconInfo *icon_info,
        const GdkRGBA *fg,
        const GdkRGBA *success_color,
        const GdkRGBA *warning_color,
        const GdkRGBA *error_color,
        GCancellable *cancellable,
        GAsyncReadyCallback callback,
        gpointer user_data);
extern
GdkPixbuf * gtk_icon_info_load_symbolic_finish (GtkIconInfo *icon_info,
         GAsyncResult *res,
         gboolean *was_symbolic,
         GError **error);
extern
GdkPixbuf * gtk_icon_info_load_symbolic_for_context (GtkIconInfo *icon_info,
                                                               GtkStyleContext *context,
                                                               gboolean *was_symbolic,
                                                               GError **error);
extern
void gtk_icon_info_load_symbolic_for_context_async (GtkIconInfo *icon_info,
             GtkStyleContext *context,
             GCancellable *cancellable,
             GAsyncReadyCallback callback,
             gpointer user_data);
extern
GdkPixbuf * gtk_icon_info_load_symbolic_for_context_finish (GtkIconInfo *icon_info,
              GAsyncResult *res,
              gboolean *was_symbolic,
              GError **error);
extern
GdkPixbuf * gtk_icon_info_load_symbolic_for_style (GtkIconInfo *icon_info,
                                                              GtkStyle *style,
                                                              GtkStateType state,
                                                              gboolean *was_symbolic,
                                                              GError **error);
extern
void gtk_icon_info_set_raw_coordinates (GtkIconInfo *icon_info,
        gboolean raw_coordinates);
extern
gboolean gtk_icon_info_get_embedded_rect (GtkIconInfo *icon_info,
             GdkRectangle *rectangle);
extern
gboolean gtk_icon_info_get_attach_points (GtkIconInfo *icon_info,
             GdkPoint **points,
             gint *n_points);
extern
const gchar * gtk_icon_info_get_display_name (GtkIconInfo *icon_info);
extern
GType gtk_tooltip_get_type (void);
extern
void gtk_tooltip_set_markup (GtkTooltip *tooltip,
                                          const gchar *markup);
extern
void gtk_tooltip_set_text (GtkTooltip *tooltip,
                                          const gchar *text);
extern
void gtk_tooltip_set_icon (GtkTooltip *tooltip,
                                          GdkPixbuf *pixbuf);
extern
void gtk_tooltip_set_icon_from_stock (GtkTooltip *tooltip,
                                          const gchar *stock_id,
                                          GtkIconSize size);
extern
void gtk_tooltip_set_icon_from_icon_name (GtkTooltip *tooltip,
              const gchar *icon_name,
              GtkIconSize size);
extern
void gtk_tooltip_set_icon_from_gicon (GtkTooltip *tooltip,
       GIcon *gicon,
       GtkIconSize size);
extern
void gtk_tooltip_set_custom (GtkTooltip *tooltip,
                                          GtkWidget *custom_widget);
extern
void gtk_tooltip_set_tip_area (GtkTooltip *tooltip,
                                          const GdkRectangle *rect);
extern
void gtk_tooltip_trigger_tooltip_query (GdkDisplay *display);
typedef struct _GtkIconView GtkIconView;
typedef struct _GtkIconViewClass GtkIconViewClass;
typedef struct _GtkIconViewPrivate GtkIconViewPrivate;
typedef void (* GtkIconViewForeachFunc) (GtkIconView *icon_view,
          GtkTreePath *path,
          gpointer data);
typedef enum
{
  GTK_ICON_VIEW_NO_DROP,
  GTK_ICON_VIEW_DROP_INTO,
  GTK_ICON_VIEW_DROP_LEFT,
  GTK_ICON_VIEW_DROP_RIGHT,
  GTK_ICON_VIEW_DROP_ABOVE,
  GTK_ICON_VIEW_DROP_BELOW
} GtkIconViewDropPosition;
struct _GtkIconView
{
  GtkContainer parent;
  GtkIconViewPrivate *priv;
};
struct _GtkIconViewClass
{
  GtkContainerClass parent_class;
  void (* item_activated) (GtkIconView *icon_view,
          GtkTreePath *path);
  void (* selection_changed) (GtkIconView *icon_view);
  void (* select_all) (GtkIconView *icon_view);
  void (* unselect_all) (GtkIconView *icon_view);
  void (* select_cursor_item) (GtkIconView *icon_view);
  void (* toggle_cursor_item) (GtkIconView *icon_view);
  gboolean (* move_cursor) (GtkIconView *icon_view,
          GtkMovementStep step,
          gint count);
  gboolean (* activate_cursor_item) (GtkIconView *icon_view);
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_icon_view_get_type (void) __attribute__((__const__));
extern
GtkWidget * gtk_icon_view_new (void);
extern
GtkWidget * gtk_icon_view_new_with_area (GtkCellArea *area);
extern
GtkWidget * gtk_icon_view_new_with_model (GtkTreeModel *model);
extern
void gtk_icon_view_set_model (GtkIconView *icon_view,
              GtkTreeModel *model);
extern
GtkTreeModel * gtk_icon_view_get_model (GtkIconView *icon_view);
extern
void gtk_icon_view_set_text_column (GtkIconView *icon_view,
               gint column);
extern
gint gtk_icon_view_get_text_column (GtkIconView *icon_view);
extern
void gtk_icon_view_set_markup_column (GtkIconView *icon_view,
             gint column);
extern
gint gtk_icon_view_get_markup_column (GtkIconView *icon_view);
extern
void gtk_icon_view_set_pixbuf_column (GtkIconView *icon_view,
             gint column);
extern
gint gtk_icon_view_get_pixbuf_column (GtkIconView *icon_view);
extern
void gtk_icon_view_set_item_orientation (GtkIconView *icon_view,
                                                   GtkOrientation orientation);
extern
GtkOrientation gtk_icon_view_get_item_orientation (GtkIconView *icon_view);
extern
void gtk_icon_view_set_columns (GtkIconView *icon_view,
              gint columns);
extern
gint gtk_icon_view_get_columns (GtkIconView *icon_view);
extern
void gtk_icon_view_set_item_width (GtkIconView *icon_view,
             gint item_width);
extern
gint gtk_icon_view_get_item_width (GtkIconView *icon_view);
extern
void gtk_icon_view_set_spacing (GtkIconView *icon_view,
              gint spacing);
extern
gint gtk_icon_view_get_spacing (GtkIconView *icon_view);
extern
void gtk_icon_view_set_row_spacing (GtkIconView *icon_view,
             gint row_spacing);
extern
gint gtk_icon_view_get_row_spacing (GtkIconView *icon_view);
extern
void gtk_icon_view_set_column_spacing (GtkIconView *icon_view,
             gint column_spacing);
extern
gint gtk_icon_view_get_column_spacing (GtkIconView *icon_view);
extern
void gtk_icon_view_set_margin (GtkIconView *icon_view,
             gint margin);
extern
gint gtk_icon_view_get_margin (GtkIconView *icon_view);
extern
void gtk_icon_view_set_item_padding (GtkIconView *icon_view,
             gint item_padding);
extern
gint gtk_icon_view_get_item_padding (GtkIconView *icon_view);
extern
GtkTreePath * gtk_icon_view_get_path_at_pos (GtkIconView *icon_view,
      gint x,
      gint y);
extern
gboolean gtk_icon_view_get_item_at_pos (GtkIconView *icon_view,
      gint x,
      gint y,
      GtkTreePath **path,
      GtkCellRenderer **cell);
extern
gboolean gtk_icon_view_get_visible_range (GtkIconView *icon_view,
      GtkTreePath **start_path,
      GtkTreePath **end_path);
extern
void gtk_icon_view_set_activate_on_single_click (GtkIconView *icon_view,
                                                           gboolean single);
extern
gboolean gtk_icon_view_get_activate_on_single_click (GtkIconView *icon_view);
extern
void gtk_icon_view_selected_foreach (GtkIconView *icon_view,
       GtkIconViewForeachFunc func,
       gpointer data);
extern
void gtk_icon_view_set_selection_mode (GtkIconView *icon_view,
       GtkSelectionMode mode);
extern
GtkSelectionMode gtk_icon_view_get_selection_mode (GtkIconView *icon_view);
extern
void gtk_icon_view_select_path (GtkIconView *icon_view,
         GtkTreePath *path);
extern
void gtk_icon_view_unselect_path (GtkIconView *icon_view,
         GtkTreePath *path);
extern
gboolean gtk_icon_view_path_is_selected (GtkIconView *icon_view,
         GtkTreePath *path);
extern
gint gtk_icon_view_get_item_row (GtkIconView *icon_view,
                                                   GtkTreePath *path);
extern
gint gtk_icon_view_get_item_column (GtkIconView *icon_view,
                                                   GtkTreePath *path);
extern
GList *gtk_icon_view_get_selected_items (GtkIconView *icon_view);
extern
void gtk_icon_view_select_all (GtkIconView *icon_view);
extern
void gtk_icon_view_unselect_all (GtkIconView *icon_view);
extern
void gtk_icon_view_item_activated (GtkIconView *icon_view,
         GtkTreePath *path);
extern
void gtk_icon_view_set_cursor (GtkIconView *icon_view,
         GtkTreePath *path,
         GtkCellRenderer *cell,
         gboolean start_editing);
extern
gboolean gtk_icon_view_get_cursor (GtkIconView *icon_view,
         GtkTreePath **path,
         GtkCellRenderer **cell);
extern
void gtk_icon_view_scroll_to_path (GtkIconView *icon_view,
                                                   GtkTreePath *path,
         gboolean use_align,
         gfloat row_align,
                                                   gfloat col_align);
extern
void gtk_icon_view_enable_model_drag_source (GtkIconView *icon_view,
              GdkModifierType start_button_mask,
              const GtkTargetEntry *targets,
              gint n_targets,
              GdkDragAction actions);
extern
void gtk_icon_view_enable_model_drag_dest (GtkIconView *icon_view,
              const GtkTargetEntry *targets,
              gint n_targets,
              GdkDragAction actions);
extern
void gtk_icon_view_unset_model_drag_source (GtkIconView *icon_view);
extern
void gtk_icon_view_unset_model_drag_dest (GtkIconView *icon_view);
extern
void gtk_icon_view_set_reorderable (GtkIconView *icon_view,
              gboolean reorderable);
extern
gboolean gtk_icon_view_get_reorderable (GtkIconView *icon_view);
extern
void gtk_icon_view_set_drag_dest_item (GtkIconView *icon_view,
              GtkTreePath *path,
              GtkIconViewDropPosition pos);
extern
void gtk_icon_view_get_drag_dest_item (GtkIconView *icon_view,
              GtkTreePath **path,
              GtkIconViewDropPosition *pos);
extern
gboolean gtk_icon_view_get_dest_item_at_pos (GtkIconView *icon_view,
              gint drag_x,
              gint drag_y,
              GtkTreePath **path,
              GtkIconViewDropPosition *pos);
extern
cairo_surface_t *gtk_icon_view_create_drag_icon (GtkIconView *icon_view,
              GtkTreePath *path);
extern
void gtk_icon_view_convert_widget_to_bin_window_coords (GtkIconView *icon_view,
                                                               gint wx,
                                                               gint wy,
                                                               gint *bx,
                                                               gint *by);
extern
gboolean gtk_icon_view_get_cell_rect (GtkIconView *icon_view,
              GtkTreePath *path,
              GtkCellRenderer *cell,
              GdkRectangle *rect);
extern
void gtk_icon_view_set_tooltip_item (GtkIconView *icon_view,
                                                               GtkTooltip *tooltip,
                                                               GtkTreePath *path);
extern
void gtk_icon_view_set_tooltip_cell (GtkIconView *icon_view,
                                                               GtkTooltip *tooltip,
                                                               GtkTreePath *path,
                                                               GtkCellRenderer *cell);
extern
gboolean gtk_icon_view_get_tooltip_context (GtkIconView *icon_view,
                                                               gint *x,
                                                               gint *y,
                                                               gboolean keyboard_tip,
                                                               GtkTreeModel **model,
                                                               GtkTreePath **path,
                                                               GtkTreeIter *iter);
extern
void gtk_icon_view_set_tooltip_column (GtkIconView *icon_view,
                                                               gint column);
extern
gint gtk_icon_view_get_tooltip_column (GtkIconView *icon_view);
typedef struct _GtkIMContextInfo GtkIMContextInfo;
struct _GtkIMContextInfo
{
  const gchar *context_id;
  const gchar *context_name;
  const gchar *domain;
  const gchar *domain_dirname;
  const gchar *default_locales;
};
typedef struct _GtkIMContextSimple GtkIMContextSimple;
typedef struct _GtkIMContextSimplePrivate GtkIMContextSimplePrivate;
typedef struct _GtkIMContextSimpleClass GtkIMContextSimpleClass;
struct _GtkIMContextSimple
{
  GtkIMContext object;
  GtkIMContextSimplePrivate *priv;
};
struct _GtkIMContextSimpleClass
{
  GtkIMContextClass parent_class;
};
extern
GType gtk_im_context_simple_get_type (void) __attribute__((__const__));
extern
GtkIMContext *gtk_im_context_simple_new (void);
extern
void gtk_im_context_simple_add_table (GtkIMContextSimple *context_simple,
            guint16 *data,
            gint max_seq_len,
            gint n_seqs);
typedef struct _GtkIMMulticontext GtkIMMulticontext;
typedef struct _GtkIMMulticontextClass GtkIMMulticontextClass;
typedef struct _GtkIMMulticontextPrivate GtkIMMulticontextPrivate;
struct _GtkIMMulticontext
{
  GtkIMContext object;
  GtkIMMulticontextPrivate *priv;
};
struct _GtkIMMulticontextClass
{
  GtkIMContextClass parent_class;
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_im_multicontext_get_type (void) __attribute__((__const__));
extern
GtkIMContext *gtk_im_multicontext_new (void);
extern
void gtk_im_multicontext_append_menuitems (GtkIMMulticontext *context,
          GtkMenuShell *menushell);
extern
const char * gtk_im_multicontext_get_context_id (GtkIMMulticontext *context);
extern
void gtk_im_multicontext_set_context_id (GtkIMMulticontext *context,
                                                    const char *context_id);
typedef struct _GtkInfoBarPrivate GtkInfoBarPrivate;
typedef struct _GtkInfoBarClass GtkInfoBarClass;
typedef struct _GtkInfoBar GtkInfoBar;
struct _GtkInfoBar
{
  GtkBox parent;
  GtkInfoBarPrivate *priv;
};
struct _GtkInfoBarClass
{
  GtkBoxClass parent_class;
  void (* response) (GtkInfoBar *info_bar, gint response_id);
  void (* close) (GtkInfoBar *info_bar);
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_info_bar_get_type (void) __attribute__((__const__));
extern
GtkWidget *gtk_info_bar_new (void);
extern
GtkWidget *gtk_info_bar_new_with_buttons (const gchar *first_button_text,
                                                    ...);
extern
GtkWidget *gtk_info_bar_get_action_area (GtkInfoBar *info_bar);
extern
GtkWidget *gtk_info_bar_get_content_area (GtkInfoBar *info_bar);
extern
void gtk_info_bar_add_action_widget (GtkInfoBar *info_bar,
                                                    GtkWidget *child,
                                                    gint response_id);
extern
GtkWidget *gtk_info_bar_add_button (GtkInfoBar *info_bar,
                                                    const gchar *button_text,
                                                    gint response_id);
extern
void gtk_info_bar_add_buttons (GtkInfoBar *info_bar,
                                                    const gchar *first_button_text,
                                                    ...);
extern
void gtk_info_bar_set_response_sensitive (GtkInfoBar *info_bar,
                                                    gint response_id,
                                                    gboolean setting);
extern
void gtk_info_bar_set_default_response (GtkInfoBar *info_bar,
                                                    gint response_id);
extern
void gtk_info_bar_response (GtkInfoBar *info_bar,
                                                    gint response_id);
extern
void gtk_info_bar_set_message_type (GtkInfoBar *info_bar,
                                                    GtkMessageType message_type);
extern
GtkMessageType gtk_info_bar_get_message_type (GtkInfoBar *info_bar);
extern
void gtk_info_bar_set_show_close_button (GtkInfoBar *info_bar,
                                                    gboolean setting);
extern
gboolean gtk_info_bar_get_show_close_button (GtkInfoBar *info_bar);
typedef struct _GtkInvisible GtkInvisible;
typedef struct _GtkInvisiblePrivate GtkInvisiblePrivate;
typedef struct _GtkInvisibleClass GtkInvisibleClass;
struct _GtkInvisible
{
  GtkWidget widget;
  GtkInvisiblePrivate *priv;
};
struct _GtkInvisibleClass
{
  GtkWidgetClass parent_class;
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_invisible_get_type (void) __attribute__((__const__));
extern
GtkWidget* gtk_invisible_new (void);
extern
GtkWidget* gtk_invisible_new_for_screen (GdkScreen *screen);
extern
void gtk_invisible_set_screen (GtkInvisible *invisible,
      GdkScreen *screen);
extern
GdkScreen* gtk_invisible_get_screen (GtkInvisible *invisible);
typedef struct _GtkLayout GtkLayout;
typedef struct _GtkLayoutPrivate GtkLayoutPrivate;
typedef struct _GtkLayoutClass GtkLayoutClass;
struct _GtkLayout
{
  GtkContainer container;
  GtkLayoutPrivate *priv;
};
struct _GtkLayoutClass
{
  GtkContainerClass parent_class;
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_layout_get_type (void) __attribute__((__const__));
extern
GtkWidget* gtk_layout_new (GtkAdjustment *hadjustment,
               GtkAdjustment *vadjustment);
extern
GdkWindow* gtk_layout_get_bin_window (GtkLayout *layout);
extern
void gtk_layout_put (GtkLayout *layout,
                             GtkWidget *child_widget,
                             gint x,
                             gint y);
extern
void gtk_layout_move (GtkLayout *layout,
                             GtkWidget *child_widget,
                             gint x,
                             gint y);
extern
void gtk_layout_set_size (GtkLayout *layout,
                      guint width,
                      guint height);
extern
void gtk_layout_get_size (GtkLayout *layout,
        guint *width,
        guint *height);
extern
GtkAdjustment* gtk_layout_get_hadjustment (GtkLayout *layout);
extern
GtkAdjustment* gtk_layout_get_vadjustment (GtkLayout *layout);
extern
void gtk_layout_set_hadjustment (GtkLayout *layout,
                                           GtkAdjustment *adjustment);
extern
void gtk_layout_set_vadjustment (GtkLayout *layout,
                                           GtkAdjustment *adjustment);
typedef struct _GtkLevelBarClass GtkLevelBarClass;
typedef struct _GtkLevelBar GtkLevelBar;
typedef struct _GtkLevelBarPrivate GtkLevelBarPrivate;
struct _GtkLevelBar {
  GtkWidget parent;
  GtkLevelBarPrivate *priv;
};
struct _GtkLevelBarClass {
  GtkWidgetClass parent_class;
  void (* offset_changed) (GtkLevelBar *self,
                           const gchar *name);
  gpointer padding[16];
};
extern
GType gtk_level_bar_get_type (void) __attribute__((__const__));
extern
GtkWidget *gtk_level_bar_new (void);
extern
GtkWidget *gtk_level_bar_new_for_interval (gdouble min_value,
                                             gdouble max_value);
extern
void gtk_level_bar_set_mode (GtkLevelBar *self,
                                             GtkLevelBarMode mode);
extern
GtkLevelBarMode gtk_level_bar_get_mode (GtkLevelBar *self);
extern
void gtk_level_bar_set_value (GtkLevelBar *self,
                                             gdouble value);
extern
gdouble gtk_level_bar_get_value (GtkLevelBar *self);
extern
void gtk_level_bar_set_min_value (GtkLevelBar *self,
                                             gdouble value);
extern
gdouble gtk_level_bar_get_min_value (GtkLevelBar *self);
extern
void gtk_level_bar_set_max_value (GtkLevelBar *self,
                                             gdouble value);
extern
gdouble gtk_level_bar_get_max_value (GtkLevelBar *self);
extern
void gtk_level_bar_set_inverted (GtkLevelBar *self,
                                             gboolean inverted);
extern
gboolean gtk_level_bar_get_inverted (GtkLevelBar *self);
extern
void gtk_level_bar_add_offset_value (GtkLevelBar *self,
                                             const gchar *name,
                                             gdouble value);
extern
void gtk_level_bar_remove_offset_value (GtkLevelBar *self,
                                              const gchar *name);
extern
gboolean gtk_level_bar_get_offset_value (GtkLevelBar *self,
                                             const gchar *name,
                                             gdouble *value);
typedef struct _GtkLinkButton GtkLinkButton;
typedef struct _GtkLinkButtonClass GtkLinkButtonClass;
typedef struct _GtkLinkButtonPrivate GtkLinkButtonPrivate;
struct _GtkLinkButton
{
  GtkButton parent_instance;
  GtkLinkButtonPrivate *priv;
};
struct _GtkLinkButtonClass
{
  GtkButtonClass parent_class;
  gboolean (* activate_link) (GtkLinkButton *button);
  void (*_gtk_padding1) (void);
  void (*_gtk_padding2) (void);
  void (*_gtk_padding3) (void);
  void (*_gtk_padding4) (void);
};
extern
GType gtk_link_button_get_type (void) __attribute__((__const__));
extern
GtkWidget * gtk_link_button_new (const gchar *uri);
extern
GtkWidget * gtk_link_button_new_with_label (const gchar *uri,
               const gchar *label);
extern
const gchar * gtk_link_button_get_uri (GtkLinkButton *link_button);
extern
void gtk_link_button_set_uri (GtkLinkButton *link_button,
               const gchar *uri);
extern
gboolean gtk_link_button_get_visited (GtkLinkButton *link_button);
extern
void gtk_link_button_set_visited (GtkLinkButton *link_button,
                                                         gboolean visited);
typedef struct _GtkListBox GtkListBox;
typedef struct _GtkListBoxClass GtkListBoxClass;
typedef struct _GtkListBoxRow GtkListBoxRow;
typedef struct _GtkListBoxRowClass GtkListBoxRowClass;
struct _GtkListBox
{
  GtkContainer parent_instance;
};
struct _GtkListBoxClass
{
  GtkContainerClass parent_class;
  void (*row_selected) (GtkListBox *box,
                               GtkListBoxRow *row);
  void (*row_activated) (GtkListBox *box,
                               GtkListBoxRow *row);
  void (*activate_cursor_row) (GtkListBox *box);
  void (*toggle_cursor_row) (GtkListBox *box);
  void (*move_cursor) (GtkListBox *box,
                               GtkMovementStep step,
                               gint count);
  void (*selected_rows_changed) (GtkListBox *box);
  void (*select_all) (GtkListBox *box);
  void (*unselect_all) (GtkListBox *box);
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
};
struct _GtkListBoxRow
{
  GtkBin parent_instance;
};
struct _GtkListBoxRowClass
{
  GtkBinClass parent_class;
  void (* activate) (GtkListBoxRow *row);
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
};
typedef gboolean (*GtkListBoxFilterFunc) (GtkListBoxRow *row,
                                          gpointer user_data);
typedef gint (*GtkListBoxSortFunc) (GtkListBoxRow *row1,
                                    GtkListBoxRow *row2,
                                    gpointer user_data);
typedef void (*GtkListBoxUpdateHeaderFunc) (GtkListBoxRow *row,
                                            GtkListBoxRow *before,
                                            gpointer user_data);
typedef GtkWidget * (*GtkListBoxCreateWidgetFunc) (gpointer item,
                                                   gpointer user_data);
extern
GType gtk_list_box_row_get_type (void) __attribute__((__const__));
extern
GtkWidget* gtk_list_box_row_new (void);
extern
GtkWidget* gtk_list_box_row_get_header (GtkListBoxRow *row);
extern
void gtk_list_box_row_set_header (GtkListBoxRow *row,
                                           GtkWidget *header);
extern
gint gtk_list_box_row_get_index (GtkListBoxRow *row);
extern
void gtk_list_box_row_changed (GtkListBoxRow *row);
extern
gboolean gtk_list_box_row_is_selected (GtkListBoxRow *row);
extern
void gtk_list_box_row_set_selectable (GtkListBoxRow *row,
                                            gboolean selectable);
extern
gboolean gtk_list_box_row_get_selectable (GtkListBoxRow *row);
extern
void gtk_list_box_row_set_activatable (GtkListBoxRow *row,
                                             gboolean activatable);
extern
gboolean gtk_list_box_row_get_activatable (GtkListBoxRow *row);
extern
GType gtk_list_box_get_type (void) __attribute__((__const__));
extern
void gtk_list_box_prepend (GtkListBox *box,
                                                          GtkWidget *child);
extern
void gtk_list_box_insert (GtkListBox *box,
                                                          GtkWidget *child,
                                                          gint position);
extern
GtkListBoxRow* gtk_list_box_get_selected_row (GtkListBox *box);
extern
GtkListBoxRow* gtk_list_box_get_row_at_index (GtkListBox *box,
                                                          gint index_);
extern
GtkListBoxRow* gtk_list_box_get_row_at_y (GtkListBox *box,
                                                          gint y);
extern
void gtk_list_box_select_row (GtkListBox *box,
                                                          GtkListBoxRow *row);
extern
void gtk_list_box_set_placeholder (GtkListBox *box,
                                                          GtkWidget *placeholder);
extern
void gtk_list_box_set_adjustment (GtkListBox *box,
                                                          GtkAdjustment *adjustment);
extern
GtkAdjustment *gtk_list_box_get_adjustment (GtkListBox *box);
typedef void (* GtkListBoxForeachFunc) (GtkListBox *box,
                                        GtkListBoxRow *row,
                                        gpointer user_data);
extern
void gtk_list_box_selected_foreach (GtkListBox *box,
                                                          GtkListBoxForeachFunc func,
                                                          gpointer data);
extern
GList *gtk_list_box_get_selected_rows (GtkListBox *box);
extern
void gtk_list_box_unselect_row (GtkListBox *box,
                                                          GtkListBoxRow *row);
extern
void gtk_list_box_select_all (GtkListBox *box);
extern
void gtk_list_box_unselect_all (GtkListBox *box);
extern
void gtk_list_box_set_selection_mode (GtkListBox *box,
                                                          GtkSelectionMode mode);
extern
GtkSelectionMode gtk_list_box_get_selection_mode (GtkListBox *box);
extern
void gtk_list_box_set_filter_func (GtkListBox *box,
                                                          GtkListBoxFilterFunc filter_func,
                                                          gpointer user_data,
                                                          GDestroyNotify destroy);
extern
void gtk_list_box_set_header_func (GtkListBox *box,
                                                          GtkListBoxUpdateHeaderFunc update_header,
                                                          gpointer user_data,
                                                          GDestroyNotify destroy);
extern
void gtk_list_box_invalidate_filter (GtkListBox *box);
extern
void gtk_list_box_invalidate_sort (GtkListBox *box);
extern
void gtk_list_box_invalidate_headers (GtkListBox *box);
extern
void gtk_list_box_set_sort_func (GtkListBox *box,
                                                          GtkListBoxSortFunc sort_func,
                                                          gpointer user_data,
                                                          GDestroyNotify destroy);
extern
void gtk_list_box_set_activate_on_single_click (GtkListBox *box,
                                                          gboolean single);
extern
gboolean gtk_list_box_get_activate_on_single_click (GtkListBox *box);
extern
void gtk_list_box_drag_unhighlight_row (GtkListBox *box);
extern
void gtk_list_box_drag_highlight_row (GtkListBox *box,
                                                          GtkListBoxRow *row);
extern
GtkWidget* gtk_list_box_new (void);
extern
void gtk_list_box_bind_model (GtkListBox *box,
                                                          GListModel *model,
                                                          GtkListBoxCreateWidgetFunc create_widget_func,
                                                          gpointer user_data,
                                                          GDestroyNotify user_data_free_func);
typedef struct _GtkLockButton GtkLockButton;
typedef struct _GtkLockButtonClass GtkLockButtonClass;
typedef struct _GtkLockButtonPrivate GtkLockButtonPrivate;
struct _GtkLockButton
{
  GtkButton parent;
  GtkLockButtonPrivate *priv;
};
struct _GtkLockButtonClass
{
  GtkButtonClass parent_class;
  void (*reserved0) (void);
  void (*reserved1) (void);
  void (*reserved2) (void);
  void (*reserved3) (void);
  void (*reserved4) (void);
  void (*reserved5) (void);
  void (*reserved6) (void);
  void (*reserved7) (void);
};
extern
GType gtk_lock_button_get_type (void) __attribute__((__const__));
extern
GtkWidget *gtk_lock_button_new (GPermission *permission);
extern
GPermission *gtk_lock_button_get_permission (GtkLockButton *button);
extern
void gtk_lock_button_set_permission (GtkLockButton *button,
                                             GPermission *permission);
typedef gint (*GtkKeySnoopFunc) (GtkWidget *grab_widget,
                                 GdkEventKey *event,
                                 gpointer func_data);
extern
guint gtk_get_major_version (void) __attribute__((__const__));
extern
guint gtk_get_minor_version (void) __attribute__((__const__));
extern
guint gtk_get_micro_version (void) __attribute__((__const__));
extern
guint gtk_get_binary_age (void) __attribute__((__const__));
extern
guint gtk_get_interface_age (void) __attribute__((__const__));
extern
const gchar* gtk_check_version (guint required_major,
                                guint required_minor,
                                guint required_micro);
extern
gboolean gtk_parse_args (int *argc,
                                   char ***argv);
extern
void gtk_init (int *argc,
                                   char ***argv);
extern
gboolean gtk_init_check (int *argc,
                                   char ***argv);
extern
gboolean gtk_init_with_args (gint *argc,
                                   gchar ***argv,
                                   const gchar *parameter_string,
                                   const GOptionEntry *entries,
                                   const gchar *translation_domain,
                                   GError **error);
extern
GOptionGroup *gtk_get_option_group (gboolean open_default_display);
extern
void gtk_disable_setlocale (void);
extern
PangoLanguage *gtk_get_default_language (void);
extern
GtkTextDirection gtk_get_locale_direction (void);
extern
gboolean gtk_events_pending (void);
extern
void gtk_main_do_event (GdkEvent *event);
extern
void gtk_main (void);
extern
guint gtk_main_level (void);
extern
void gtk_main_quit (void);
extern
gboolean gtk_main_iteration (void);
extern
gboolean gtk_main_iteration_do (gboolean blocking);
extern
gboolean gtk_true (void) __attribute__((__const__));
extern
gboolean gtk_false (void) __attribute__((__const__));
extern
void gtk_grab_add (GtkWidget *widget);
extern
GtkWidget* gtk_grab_get_current (void);
extern
void gtk_grab_remove (GtkWidget *widget);
extern
void gtk_device_grab_add (GtkWidget *widget,
                                    GdkDevice *device,
                                    gboolean block_others);
extern
void gtk_device_grab_remove (GtkWidget *widget,
                                    GdkDevice *device);
extern
guint gtk_key_snooper_install (GtkKeySnoopFunc snooper,
                                    gpointer func_data);
extern
void gtk_key_snooper_remove (guint snooper_handler_id);
extern
GdkEvent * gtk_get_current_event (void);
extern
guint32 gtk_get_current_event_time (void);
extern
gboolean gtk_get_current_event_state (GdkModifierType *state);
extern
GdkDevice *gtk_get_current_event_device (void);
extern
GtkWidget *gtk_get_event_widget (GdkEvent *event);
extern
void gtk_propagate_event (GtkWidget *widget,
                                         GdkEvent *event);
typedef struct _GtkMenuBar GtkMenuBar;
typedef struct _GtkMenuBarPrivate GtkMenuBarPrivate;
typedef struct _GtkMenuBarClass GtkMenuBarClass;
struct _GtkMenuBar
{
  GtkMenuShell menu_shell;
  GtkMenuBarPrivate *priv;
};
struct _GtkMenuBarClass
{
  GtkMenuShellClass parent_class;
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_menu_bar_get_type (void) __attribute__((__const__));
extern
GtkWidget* gtk_menu_bar_new (void);
extern
GtkWidget* gtk_menu_bar_new_from_model (GMenuModel *model);
extern
GtkPackDirection gtk_menu_bar_get_pack_direction (GtkMenuBar *menubar);
extern
void gtk_menu_bar_set_pack_direction (GtkMenuBar *menubar,
        GtkPackDirection pack_dir);
extern
GtkPackDirection gtk_menu_bar_get_child_pack_direction (GtkMenuBar *menubar);
extern
void gtk_menu_bar_set_child_pack_direction (GtkMenuBar *menubar,
       GtkPackDirection child_pack_dir);
void _gtk_menu_bar_cycle_focus (GtkMenuBar *menubar,
    GtkDirectionType dir);
GList* _gtk_menu_bar_get_viewable_menu_bars (GtkWindow *window);
typedef struct _GtkPopover GtkPopover;
typedef struct _GtkPopoverClass GtkPopoverClass;
typedef struct _GtkPopoverPrivate GtkPopoverPrivate;
struct _GtkPopover
{
  GtkBin parent_instance;
  GtkPopoverPrivate *priv;
};
struct _GtkPopoverClass
{
  GtkBinClass parent_class;
  void (* closed) (GtkPopover *popover);
  gpointer reserved[10];
};
extern
GType gtk_popover_get_type (void) __attribute__((__const__));
extern
GtkWidget * gtk_popover_new (GtkWidget *relative_to);
extern
GtkWidget * gtk_popover_new_from_model (GtkWidget *relative_to,
                                             GMenuModel *model);
extern
void gtk_popover_set_relative_to (GtkPopover *popover,
                                             GtkWidget *relative_to);
extern
GtkWidget * gtk_popover_get_relative_to (GtkPopover *popover);
extern
void gtk_popover_set_pointing_to (GtkPopover *popover,
                                             const GdkRectangle *rect);
extern
gboolean gtk_popover_get_pointing_to (GtkPopover *popover,
                                             GdkRectangle *rect);
extern
void gtk_popover_set_position (GtkPopover *popover,
                                             GtkPositionType position);
extern
GtkPositionType gtk_popover_get_position (GtkPopover *popover);
extern
void gtk_popover_set_modal (GtkPopover *popover,
                                             gboolean modal);
extern
gboolean gtk_popover_get_modal (GtkPopover *popover);
extern
void gtk_popover_bind_model (GtkPopover *popover,
                                             GMenuModel *model,
                                             const gchar *action_namespace);
extern
void gtk_popover_set_transitions_enabled (GtkPopover *popover,
                                                     gboolean transitions_enabled);
extern
gboolean gtk_popover_get_transitions_enabled (GtkPopover *popover);
extern
void gtk_popover_set_default_widget (GtkPopover *popover,
                                                GtkWidget *widget);
extern
GtkWidget * gtk_popover_get_default_widget (GtkPopover *popover);
typedef struct _GtkMenuButton GtkMenuButton;
typedef struct _GtkMenuButtonClass GtkMenuButtonClass;
typedef struct _GtkMenuButtonPrivate GtkMenuButtonPrivate;
struct _GtkMenuButton
{
  GtkToggleButton parent;
  GtkMenuButtonPrivate *priv;
};
struct _GtkMenuButtonClass
{
  GtkToggleButtonClass parent_class;
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_menu_button_get_type (void) __attribute__((__const__));
extern
GtkWidget *gtk_menu_button_new (void);
extern
void gtk_menu_button_set_popup (GtkMenuButton *menu_button,
                                             GtkWidget *menu);
extern
GtkMenu *gtk_menu_button_get_popup (GtkMenuButton *menu_button);
extern
void gtk_menu_button_set_popover (GtkMenuButton *menu_button,
                                             GtkWidget *popover);
extern
GtkPopover *gtk_menu_button_get_popover (GtkMenuButton *menu_button);
extern
void gtk_menu_button_set_direction (GtkMenuButton *menu_button,
                                             GtkArrowType direction);
extern
GtkArrowType gtk_menu_button_get_direction (GtkMenuButton *menu_button);
extern
void gtk_menu_button_set_menu_model (GtkMenuButton *menu_button,
                                             GMenuModel *menu_model);
extern
GMenuModel *gtk_menu_button_get_menu_model (GtkMenuButton *menu_button);
extern
void gtk_menu_button_set_align_widget (GtkMenuButton *menu_button,
                                               GtkWidget *align_widget);
extern
GtkWidget *gtk_menu_button_get_align_widget (GtkMenuButton *menu_button);
extern
void gtk_menu_button_set_use_popover (GtkMenuButton *menu_button,
                                              gboolean use_popover);
extern
gboolean gtk_menu_button_get_use_popover (GtkMenuButton *menu_button);
typedef struct _GtkSizeGroup GtkSizeGroup;
typedef struct _GtkSizeGroupPrivate GtkSizeGroupPrivate;
typedef struct _GtkSizeGroupClass GtkSizeGroupClass;
struct _GtkSizeGroup
{
  GObject parent_instance;
  GtkSizeGroupPrivate *priv;
};
struct _GtkSizeGroupClass
{
  GObjectClass parent_class;
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_size_group_get_type (void) __attribute__((__const__));
extern
GtkSizeGroup * gtk_size_group_new (GtkSizeGroupMode mode);
extern
void gtk_size_group_set_mode (GtkSizeGroup *size_group,
            GtkSizeGroupMode mode);
extern
GtkSizeGroupMode gtk_size_group_get_mode (GtkSizeGroup *size_group);
extern
void gtk_size_group_set_ignore_hidden (GtkSizeGroup *size_group,
         gboolean ignore_hidden);
extern
gboolean gtk_size_group_get_ignore_hidden (GtkSizeGroup *size_group);
extern
void gtk_size_group_add_widget (GtkSizeGroup *size_group,
            GtkWidget *widget);
extern
void gtk_size_group_remove_widget (GtkSizeGroup *size_group,
            GtkWidget *widget);
extern
GSList * gtk_size_group_get_widgets (GtkSizeGroup *size_group);
typedef struct _GtkToolItem GtkToolItem;
typedef struct _GtkToolItemClass GtkToolItemClass;
typedef struct _GtkToolItemPrivate GtkToolItemPrivate;
struct _GtkToolItem
{
  GtkBin parent;
  GtkToolItemPrivate *priv;
};
struct _GtkToolItemClass
{
  GtkBinClass parent_class;
  gboolean (* create_menu_proxy) (GtkToolItem *tool_item);
  void (* toolbar_reconfigured) (GtkToolItem *tool_item);
  void (* _gtk_reserved1) (void);
  void (* _gtk_reserved2) (void);
  void (* _gtk_reserved3) (void);
  void (* _gtk_reserved4) (void);
};
extern
GType gtk_tool_item_get_type (void) __attribute__((__const__));
extern
GtkToolItem *gtk_tool_item_new (void);
extern
void gtk_tool_item_set_homogeneous (GtkToolItem *tool_item,
       gboolean homogeneous);
extern
gboolean gtk_tool_item_get_homogeneous (GtkToolItem *tool_item);
extern
void gtk_tool_item_set_expand (GtkToolItem *tool_item,
       gboolean expand);
extern
gboolean gtk_tool_item_get_expand (GtkToolItem *tool_item);
extern
void gtk_tool_item_set_tooltip_text (GtkToolItem *tool_item,
       const gchar *text);
extern
void gtk_tool_item_set_tooltip_markup (GtkToolItem *tool_item,
       const gchar *markup);
extern
void gtk_tool_item_set_use_drag_window (GtkToolItem *tool_item,
       gboolean use_drag_window);
extern
gboolean gtk_tool_item_get_use_drag_window (GtkToolItem *tool_item);
extern
void gtk_tool_item_set_visible_horizontal (GtkToolItem *tool_item,
       gboolean visible_horizontal);
extern
gboolean gtk_tool_item_get_visible_horizontal (GtkToolItem *tool_item);
extern
void gtk_tool_item_set_visible_vertical (GtkToolItem *tool_item,
       gboolean visible_vertical);
extern
gboolean gtk_tool_item_get_visible_vertical (GtkToolItem *tool_item);
extern
gboolean gtk_tool_item_get_is_important (GtkToolItem *tool_item);
extern
void gtk_tool_item_set_is_important (GtkToolItem *tool_item,
       gboolean is_important);
extern
PangoEllipsizeMode gtk_tool_item_get_ellipsize_mode (GtkToolItem *tool_item);
extern
GtkIconSize gtk_tool_item_get_icon_size (GtkToolItem *tool_item);
extern
GtkOrientation gtk_tool_item_get_orientation (GtkToolItem *tool_item);
extern
GtkToolbarStyle gtk_tool_item_get_toolbar_style (GtkToolItem *tool_item);
extern
GtkReliefStyle gtk_tool_item_get_relief_style (GtkToolItem *tool_item);
extern
gfloat gtk_tool_item_get_text_alignment (GtkToolItem *tool_item);
extern
GtkOrientation gtk_tool_item_get_text_orientation (GtkToolItem *tool_item);
extern
GtkSizeGroup * gtk_tool_item_get_text_size_group (GtkToolItem *tool_item);
extern
GtkWidget * gtk_tool_item_retrieve_proxy_menu_item (GtkToolItem *tool_item);
extern
GtkWidget * gtk_tool_item_get_proxy_menu_item (GtkToolItem *tool_item,
       const gchar *menu_item_id);
extern
void gtk_tool_item_set_proxy_menu_item (GtkToolItem *tool_item,
       const gchar *menu_item_id,
       GtkWidget *menu_item);
extern
void gtk_tool_item_rebuild_menu (GtkToolItem *tool_item);
extern
void gtk_tool_item_toolbar_reconfigured (GtkToolItem *tool_item);
gboolean _gtk_tool_item_create_menu_proxy (GtkToolItem *tool_item);
typedef struct _GtkToolButton GtkToolButton;
typedef struct _GtkToolButtonClass GtkToolButtonClass;
typedef struct _GtkToolButtonPrivate GtkToolButtonPrivate;
struct _GtkToolButton
{
  GtkToolItem parent;
  GtkToolButtonPrivate *priv;
};
struct _GtkToolButtonClass
{
  GtkToolItemClass parent_class;
  GType button_type;
  void (* clicked) (GtkToolButton *tool_item);
  void (* _gtk_reserved1) (void);
  void (* _gtk_reserved2) (void);
  void (* _gtk_reserved3) (void);
  void (* _gtk_reserved4) (void);
};
extern
GType gtk_tool_button_get_type (void) __attribute__((__const__));
extern
GtkToolItem *gtk_tool_button_new (GtkWidget *icon_widget,
          const gchar *label);
extern
GtkToolItem *gtk_tool_button_new_from_stock (const gchar *stock_id);
extern
void gtk_tool_button_set_label (GtkToolButton *button,
        const gchar *label);
extern
const gchar * gtk_tool_button_get_label (GtkToolButton *button);
extern
void gtk_tool_button_set_use_underline (GtkToolButton *button,
        gboolean use_underline);
extern
gboolean gtk_tool_button_get_use_underline (GtkToolButton *button);
extern
void gtk_tool_button_set_stock_id (GtkToolButton *button,
        const gchar *stock_id);
extern
const gchar * gtk_tool_button_get_stock_id (GtkToolButton *button);
extern
void gtk_tool_button_set_icon_name (GtkToolButton *button,
        const gchar *icon_name);
extern
const gchar * gtk_tool_button_get_icon_name (GtkToolButton *button);
extern
void gtk_tool_button_set_icon_widget (GtkToolButton *button,
        GtkWidget *icon_widget);
extern
GtkWidget * gtk_tool_button_get_icon_widget (GtkToolButton *button);
extern
void gtk_tool_button_set_label_widget (GtkToolButton *button,
        GtkWidget *label_widget);
extern
GtkWidget * gtk_tool_button_get_label_widget (GtkToolButton *button);
GtkWidget *_gtk_tool_button_get_button (GtkToolButton *button);
typedef struct _GtkMenuToolButtonClass GtkMenuToolButtonClass;
typedef struct _GtkMenuToolButton GtkMenuToolButton;
typedef struct _GtkMenuToolButtonPrivate GtkMenuToolButtonPrivate;
struct _GtkMenuToolButton
{
  GtkToolButton parent;
  GtkMenuToolButtonPrivate *priv;
};
struct _GtkMenuToolButtonClass
{
  GtkToolButtonClass parent_class;
  void (*show_menu) (GtkMenuToolButton *button);
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_menu_tool_button_get_type (void) __attribute__((__const__));
extern
GtkToolItem *gtk_menu_tool_button_new (GtkWidget *icon_widget,
                                                   const gchar *label);
extern
GtkToolItem *gtk_menu_tool_button_new_from_stock (const gchar *stock_id);
extern
void gtk_menu_tool_button_set_menu (GtkMenuToolButton *button,
                                                   GtkWidget *menu);
extern
GtkWidget *gtk_menu_tool_button_get_menu (GtkMenuToolButton *button);
extern
void gtk_menu_tool_button_set_arrow_tooltip_text (GtkMenuToolButton *button,
            const gchar *text);
extern
void gtk_menu_tool_button_set_arrow_tooltip_markup (GtkMenuToolButton *button,
            const gchar *markup);
typedef struct _GtkMessageDialog GtkMessageDialog;
typedef struct _GtkMessageDialogPrivate GtkMessageDialogPrivate;
typedef struct _GtkMessageDialogClass GtkMessageDialogClass;
struct _GtkMessageDialog
{
  GtkDialog parent_instance;
  GtkMessageDialogPrivate *priv;
};
struct _GtkMessageDialogClass
{
  GtkDialogClass parent_class;
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
typedef enum
{
  GTK_BUTTONS_NONE,
  GTK_BUTTONS_OK,
  GTK_BUTTONS_CLOSE,
  GTK_BUTTONS_CANCEL,
  GTK_BUTTONS_YES_NO,
  GTK_BUTTONS_OK_CANCEL
} GtkButtonsType;
extern
GType gtk_message_dialog_get_type (void) __attribute__((__const__));
extern
GtkWidget* gtk_message_dialog_new (GtkWindow *parent,
                                        GtkDialogFlags flags,
                                        GtkMessageType type,
                                        GtkButtonsType buttons,
                                        const gchar *message_format,
                                        ...) __attribute__((__format__ (__printf__, 5, 6)));
extern
GtkWidget* gtk_message_dialog_new_with_markup (GtkWindow *parent,
                                                 GtkDialogFlags flags,
                                                 GtkMessageType type,
                                                 GtkButtonsType buttons,
                                                 const gchar *message_format,
                                                 ...) __attribute__((__format__ (__printf__, 5, 6)));
extern
void gtk_message_dialog_set_image (GtkMessageDialog *dialog,
         GtkWidget *image);
extern
GtkWidget * gtk_message_dialog_get_image (GtkMessageDialog *dialog);
extern
void gtk_message_dialog_set_markup (GtkMessageDialog *message_dialog,
                                           const gchar *str);
extern
void gtk_message_dialog_format_secondary_text (GtkMessageDialog *message_dialog,
                                                     const gchar *message_format,
                                                     ...) __attribute__((__format__ (__printf__, 2, 3)));
extern
void gtk_message_dialog_format_secondary_markup (GtkMessageDialog *message_dialog,
                                                       const gchar *message_format,
                                                       ...) __attribute__((__format__ (__printf__, 2, 3)));
extern
GtkWidget *gtk_message_dialog_get_message_area (GtkMessageDialog *message_dialog);
typedef struct _GtkModelButton GtkModelButton;
typedef enum {
  GTK_BUTTON_ROLE_NORMAL,
  GTK_BUTTON_ROLE_CHECK,
  GTK_BUTTON_ROLE_RADIO
} GtkButtonRole;
extern
GType gtk_model_button_get_type (void) __attribute__((__const__));
extern
GtkWidget * gtk_model_button_new (void);
typedef void (*GtkModuleInitFunc) (gint *argc,
                                              gchar ***argv);
typedef void (*GtkModuleDisplayInitFunc) (GdkDisplay *display);
typedef struct _GtkMountOperation GtkMountOperation;
typedef struct _GtkMountOperationClass GtkMountOperationClass;
typedef struct _GtkMountOperationPrivate GtkMountOperationPrivate;
struct _GtkMountOperation
{
  GMountOperation parent_instance;
  GtkMountOperationPrivate *priv;
};
struct _GtkMountOperationClass
{
  GMountOperationClass parent_class;
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_mount_operation_get_type (void);
extern
GMountOperation *gtk_mount_operation_new (GtkWindow *parent);
extern
gboolean gtk_mount_operation_is_showing (GtkMountOperation *op);
extern
void gtk_mount_operation_set_parent (GtkMountOperation *op,
                                                 GtkWindow *parent);
extern
GtkWindow * gtk_mount_operation_get_parent (GtkMountOperation *op);
extern
void gtk_mount_operation_set_screen (GtkMountOperation *op,
                                                 GdkScreen *screen);
extern
GdkScreen *gtk_mount_operation_get_screen (GtkMountOperation *op);
typedef enum
{
  GTK_NOTEBOOK_TAB_FIRST,
  GTK_NOTEBOOK_TAB_LAST
} GtkNotebookTab;
typedef struct _GtkNotebook GtkNotebook;
typedef struct _GtkNotebookPrivate GtkNotebookPrivate;
typedef struct _GtkNotebookClass GtkNotebookClass;
struct _GtkNotebook
{
  GtkContainer container;
  GtkNotebookPrivate *priv;
};
struct _GtkNotebookClass
{
  GtkContainerClass parent_class;
  void (* switch_page) (GtkNotebook *notebook,
                              GtkWidget *page,
         guint page_num);
  gboolean (* select_page) (GtkNotebook *notebook,
                                gboolean move_focus);
  gboolean (* focus_tab) (GtkNotebook *notebook,
                                GtkNotebookTab type);
  gboolean (* change_current_page) (GtkNotebook *notebook,
                                gint offset);
  void (* move_focus_out) (GtkNotebook *notebook,
    GtkDirectionType direction);
  gboolean (* reorder_tab) (GtkNotebook *notebook,
    GtkDirectionType direction,
    gboolean move_to_last);
  gint (* insert_page) (GtkNotebook *notebook,
           GtkWidget *child,
    GtkWidget *tab_label,
    GtkWidget *menu_label,
    gint position);
  GtkNotebook * (* create_window) (GtkNotebook *notebook,
                                   GtkWidget *page,
                                   gint x,
                                   gint y);
  void (* page_reordered) (GtkNotebook *notebook,
                                GtkWidget *child,
                                guint page_num);
  void (* page_removed) (GtkNotebook *notebook,
                                GtkWidget *child,
                                guint page_num);
  void (* page_added) (GtkNotebook *notebook,
                                GtkWidget *child,
                                guint page_num);
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
  void (*_gtk_reserved5) (void);
  void (*_gtk_reserved6) (void);
  void (*_gtk_reserved7) (void);
  void (*_gtk_reserved8) (void);
};
extern
GType gtk_notebook_get_type (void) __attribute__((__const__));
extern
GtkWidget * gtk_notebook_new (void);
extern
gint gtk_notebook_append_page (GtkNotebook *notebook,
         GtkWidget *child,
         GtkWidget *tab_label);
extern
gint gtk_notebook_append_page_menu (GtkNotebook *notebook,
         GtkWidget *child,
         GtkWidget *tab_label,
         GtkWidget *menu_label);
extern
gint gtk_notebook_prepend_page (GtkNotebook *notebook,
         GtkWidget *child,
         GtkWidget *tab_label);
extern
gint gtk_notebook_prepend_page_menu (GtkNotebook *notebook,
         GtkWidget *child,
         GtkWidget *tab_label,
         GtkWidget *menu_label);
extern
gint gtk_notebook_insert_page (GtkNotebook *notebook,
         GtkWidget *child,
         GtkWidget *tab_label,
         gint position);
extern
gint gtk_notebook_insert_page_menu (GtkNotebook *notebook,
         GtkWidget *child,
         GtkWidget *tab_label,
         GtkWidget *menu_label,
         gint position);
extern
void gtk_notebook_remove_page (GtkNotebook *notebook,
         gint page_num);
extern
void gtk_notebook_set_group_name (GtkNotebook *notebook,
                                          const gchar *group_name);
extern
const gchar *gtk_notebook_get_group_name (GtkNotebook *notebook);
extern
gint gtk_notebook_get_current_page (GtkNotebook *notebook);
extern
GtkWidget* gtk_notebook_get_nth_page (GtkNotebook *notebook,
       gint page_num);
extern
gint gtk_notebook_get_n_pages (GtkNotebook *notebook);
extern
gint gtk_notebook_page_num (GtkNotebook *notebook,
       GtkWidget *child);
extern
void gtk_notebook_set_current_page (GtkNotebook *notebook,
       gint page_num);
extern
void gtk_notebook_next_page (GtkNotebook *notebook);
extern
void gtk_notebook_prev_page (GtkNotebook *notebook);
extern
void gtk_notebook_set_show_border (GtkNotebook *notebook,
         gboolean show_border);
extern
gboolean gtk_notebook_get_show_border (GtkNotebook *notebook);
extern
void gtk_notebook_set_show_tabs (GtkNotebook *notebook,
         gboolean show_tabs);
extern
gboolean gtk_notebook_get_show_tabs (GtkNotebook *notebook);
extern
void gtk_notebook_set_tab_pos (GtkNotebook *notebook,
                GtkPositionType pos);
extern
GtkPositionType gtk_notebook_get_tab_pos (GtkNotebook *notebook);
extern
void gtk_notebook_set_scrollable (GtkNotebook *notebook,
         gboolean scrollable);
extern
gboolean gtk_notebook_get_scrollable (GtkNotebook *notebook);
extern
guint16 gtk_notebook_get_tab_hborder (GtkNotebook *notebook);
extern
guint16 gtk_notebook_get_tab_vborder (GtkNotebook *notebook);
extern
void gtk_notebook_popup_enable (GtkNotebook *notebook);
extern
void gtk_notebook_popup_disable (GtkNotebook *notebook);
extern
GtkWidget * gtk_notebook_get_tab_label (GtkNotebook *notebook,
        GtkWidget *child);
extern
void gtk_notebook_set_tab_label (GtkNotebook *notebook,
        GtkWidget *child,
        GtkWidget *tab_label);
extern
void gtk_notebook_set_tab_label_text (GtkNotebook *notebook,
                                               GtkWidget *child,
                                               const gchar *tab_text);
extern
const gchar * gtk_notebook_get_tab_label_text (GtkNotebook *notebook,
                                               GtkWidget *child);
extern
GtkWidget * gtk_notebook_get_menu_label (GtkNotebook *notebook,
        GtkWidget *child);
extern
void gtk_notebook_set_menu_label (GtkNotebook *notebook,
        GtkWidget *child,
        GtkWidget *menu_label);
extern
void gtk_notebook_set_menu_label_text (GtkNotebook *notebook,
                                                GtkWidget *child,
                                                const gchar *menu_text);
extern
const gchar * gtk_notebook_get_menu_label_text (GtkNotebook *notebook,
       GtkWidget *child);
extern
void gtk_notebook_reorder_child (GtkNotebook *notebook,
        GtkWidget *child,
        gint position);
extern
gboolean gtk_notebook_get_tab_reorderable (GtkNotebook *notebook,
        GtkWidget *child);
extern
void gtk_notebook_set_tab_reorderable (GtkNotebook *notebook,
        GtkWidget *child,
        gboolean reorderable);
extern
gboolean gtk_notebook_get_tab_detachable (GtkNotebook *notebook,
        GtkWidget *child);
extern
void gtk_notebook_set_tab_detachable (GtkNotebook *notebook,
        GtkWidget *child,
        gboolean detachable);
extern
void gtk_notebook_detach_tab (GtkNotebook *notebook,
                                           GtkWidget *child);
extern
GtkWidget* gtk_notebook_get_action_widget (GtkNotebook *notebook,
                                           GtkPackType pack_type);
extern
void gtk_notebook_set_action_widget (GtkNotebook *notebook,
                                           GtkWidget *widget,
                                           GtkPackType pack_type);
typedef struct _GtkOffscreenWindow GtkOffscreenWindow;
typedef struct _GtkOffscreenWindowClass GtkOffscreenWindowClass;
struct _GtkOffscreenWindow
{
  GtkWindow parent_object;
};
struct _GtkOffscreenWindowClass
{
  GtkWindowClass parent_class;
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_offscreen_window_get_type (void) __attribute__((__const__));
extern
GtkWidget *gtk_offscreen_window_new (void);
extern
cairo_surface_t *gtk_offscreen_window_get_surface (GtkOffscreenWindow *offscreen);
extern
GdkPixbuf *gtk_offscreen_window_get_pixbuf (GtkOffscreenWindow *offscreen);
typedef struct _GtkOrientable GtkOrientable;
typedef struct _GtkOrientableIface GtkOrientableIface;
struct _GtkOrientableIface
{
  GTypeInterface base_iface;
};
extern
GType gtk_orientable_get_type (void) __attribute__((__const__));
extern
void gtk_orientable_set_orientation (GtkOrientable *orientable,
                                               GtkOrientation orientation);
extern
GtkOrientation gtk_orientable_get_orientation (GtkOrientable *orientable);
typedef struct _GtkOverlay GtkOverlay;
typedef struct _GtkOverlayClass GtkOverlayClass;
typedef struct _GtkOverlayPrivate GtkOverlayPrivate;
struct _GtkOverlay
{
  GtkBin parent;
  GtkOverlayPrivate *priv;
};
struct _GtkOverlayClass
{
  GtkBinClass parent_class;
  gboolean (*get_child_position) (GtkOverlay *overlay,
                                  GtkWidget *widget,
                                  GtkAllocation *allocation);
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
  void (*_gtk_reserved5) (void);
  void (*_gtk_reserved6) (void);
  void (*_gtk_reserved7) (void);
  void (*_gtk_reserved8) (void);
};
extern
GType gtk_overlay_get_type (void) __attribute__((__const__));
extern
GtkWidget *gtk_overlay_new (void);
extern
void gtk_overlay_add_overlay (GtkOverlay *overlay,
                                    GtkWidget *widget);
extern
void gtk_overlay_reorder_overlay (GtkOverlay *overlay,
     GtkWidget *child,
     gint position);
extern
gboolean gtk_overlay_get_overlay_pass_through (GtkOverlay *overlay,
       GtkWidget *widget);
extern
void gtk_overlay_set_overlay_pass_through (GtkOverlay *overlay,
       GtkWidget *widget,
       gboolean pass_through);
typedef struct _GtkPaperSize GtkPaperSize;
extern
GType gtk_paper_size_get_type (void) __attribute__((__const__));
extern
GtkPaperSize *gtk_paper_size_new (const gchar *name);
extern
GtkPaperSize *gtk_paper_size_new_from_ppd (const gchar *ppd_name,
        const gchar *ppd_display_name,
        gdouble width,
        gdouble height);
extern
GtkPaperSize *gtk_paper_size_new_from_ipp (const gchar *ipp_name,
        gdouble width,
        gdouble height);
extern
GtkPaperSize *gtk_paper_size_new_custom (const gchar *name,
        const gchar *display_name,
        gdouble width,
        gdouble height,
        GtkUnit unit);
extern
GtkPaperSize *gtk_paper_size_copy (GtkPaperSize *other);
extern
void gtk_paper_size_free (GtkPaperSize *size);
extern
gboolean gtk_paper_size_is_equal (GtkPaperSize *size1,
        GtkPaperSize *size2);
extern
GList *gtk_paper_size_get_paper_sizes (gboolean include_custom);
extern
const gchar *gtk_paper_size_get_name (GtkPaperSize *size);
extern
const gchar *gtk_paper_size_get_display_name (GtkPaperSize *size);
extern
const gchar *gtk_paper_size_get_ppd_name (GtkPaperSize *size);
extern
gdouble gtk_paper_size_get_width (GtkPaperSize *size, GtkUnit unit);
extern
gdouble gtk_paper_size_get_height (GtkPaperSize *size, GtkUnit unit);
extern
gboolean gtk_paper_size_is_custom (GtkPaperSize *size);
extern
gboolean gtk_paper_size_is_ipp (GtkPaperSize *size);
extern
void gtk_paper_size_set_size (GtkPaperSize *size,
                                                  gdouble width,
                                                  gdouble height,
                                                  GtkUnit unit);
extern
gdouble gtk_paper_size_get_default_top_margin (GtkPaperSize *size,
        GtkUnit unit);
extern
gdouble gtk_paper_size_get_default_bottom_margin (GtkPaperSize *size,
        GtkUnit unit);
extern
gdouble gtk_paper_size_get_default_left_margin (GtkPaperSize *size,
        GtkUnit unit);
extern
gdouble gtk_paper_size_get_default_right_margin (GtkPaperSize *size,
        GtkUnit unit);
extern
const gchar *gtk_paper_size_get_default (void);
extern
GtkPaperSize *gtk_paper_size_new_from_key_file (GKeyFile *key_file,
             const gchar *group_name,
             GError **error);
extern
void gtk_paper_size_to_key_file (GtkPaperSize *size,
             GKeyFile *key_file,
             const gchar *group_name);
typedef struct _GtkPageSetup GtkPageSetup;
extern
GType gtk_page_setup_get_type (void) __attribute__((__const__));
extern
GtkPageSetup * gtk_page_setup_new (void);
extern
GtkPageSetup * gtk_page_setup_copy (GtkPageSetup *other);
extern
GtkPageOrientation gtk_page_setup_get_orientation (GtkPageSetup *setup);
extern
void gtk_page_setup_set_orientation (GtkPageSetup *setup,
           GtkPageOrientation orientation);
extern
GtkPaperSize * gtk_page_setup_get_paper_size (GtkPageSetup *setup);
extern
void gtk_page_setup_set_paper_size (GtkPageSetup *setup,
           GtkPaperSize *size);
extern
gdouble gtk_page_setup_get_top_margin (GtkPageSetup *setup,
           GtkUnit unit);
extern
void gtk_page_setup_set_top_margin (GtkPageSetup *setup,
           gdouble margin,
           GtkUnit unit);
extern
gdouble gtk_page_setup_get_bottom_margin (GtkPageSetup *setup,
           GtkUnit unit);
extern
void gtk_page_setup_set_bottom_margin (GtkPageSetup *setup,
           gdouble margin,
           GtkUnit unit);
extern
gdouble gtk_page_setup_get_left_margin (GtkPageSetup *setup,
           GtkUnit unit);
extern
void gtk_page_setup_set_left_margin (GtkPageSetup *setup,
           gdouble margin,
           GtkUnit unit);
extern
gdouble gtk_page_setup_get_right_margin (GtkPageSetup *setup,
           GtkUnit unit);
extern
void gtk_page_setup_set_right_margin (GtkPageSetup *setup,
           gdouble margin,
           GtkUnit unit);
extern
void gtk_page_setup_set_paper_size_and_default_margins (GtkPageSetup *setup,
       GtkPaperSize *size);
extern
gdouble gtk_page_setup_get_paper_width (GtkPageSetup *setup,
           GtkUnit unit);
extern
gdouble gtk_page_setup_get_paper_height (GtkPageSetup *setup,
           GtkUnit unit);
extern
gdouble gtk_page_setup_get_page_width (GtkPageSetup *setup,
           GtkUnit unit);
extern
gdouble gtk_page_setup_get_page_height (GtkPageSetup *setup,
           GtkUnit unit);
extern
GtkPageSetup *gtk_page_setup_new_from_file (const gchar *file_name,
           GError **error);
extern
gboolean gtk_page_setup_load_file (GtkPageSetup *setup,
           const char *file_name,
           GError **error);
extern
gboolean gtk_page_setup_to_file (GtkPageSetup *setup,
           const char *file_name,
           GError **error);
extern
GtkPageSetup *gtk_page_setup_new_from_key_file (GKeyFile *key_file,
           const gchar *group_name,
           GError **error);
extern
gboolean gtk_page_setup_load_key_file (GtkPageSetup *setup,
                         GKeyFile *key_file,
                         const gchar *group_name,
                         GError **error);
extern
void gtk_page_setup_to_key_file (GtkPageSetup *setup,
           GKeyFile *key_file,
           const gchar *group_name);
typedef struct _GtkPaned GtkPaned;
typedef struct _GtkPanedClass GtkPanedClass;
typedef struct _GtkPanedPrivate GtkPanedPrivate;
struct _GtkPaned
{
  GtkContainer container;
  GtkPanedPrivate *priv;
};
struct _GtkPanedClass
{
  GtkContainerClass parent_class;
  gboolean (* cycle_child_focus) (GtkPaned *paned,
        gboolean reverse);
  gboolean (* toggle_handle_focus) (GtkPaned *paned);
  gboolean (* move_handle) (GtkPaned *paned,
        GtkScrollType scroll);
  gboolean (* cycle_handle_focus) (GtkPaned *paned,
        gboolean reverse);
  gboolean (* accept_position) (GtkPaned *paned);
  gboolean (* cancel_position) (GtkPaned *paned);
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_paned_get_type (void) __attribute__((__const__));
extern
GtkWidget * gtk_paned_new (GtkOrientation orientation);
extern
void gtk_paned_add1 (GtkPaned *paned,
                                    GtkWidget *child);
extern
void gtk_paned_add2 (GtkPaned *paned,
                                    GtkWidget *child);
extern
void gtk_paned_pack1 (GtkPaned *paned,
                                    GtkWidget *child,
                                    gboolean resize,
                                    gboolean shrink);
extern
void gtk_paned_pack2 (GtkPaned *paned,
                                    GtkWidget *child,
                                    gboolean resize,
                                    gboolean shrink);
extern
gint gtk_paned_get_position (GtkPaned *paned);
extern
void gtk_paned_set_position (GtkPaned *paned,
                                    gint position);
extern
GtkWidget * gtk_paned_get_child1 (GtkPaned *paned);
extern
GtkWidget * gtk_paned_get_child2 (GtkPaned *paned);
extern
GdkWindow * gtk_paned_get_handle_window (GtkPaned *paned);
extern
void gtk_paned_set_wide_handle (GtkPaned *paned,
                                       gboolean wide);
extern
gboolean gtk_paned_get_wide_handle (GtkPaned *paned);
typedef struct _GtkPlacesSidebar GtkPlacesSidebar;
typedef struct _GtkPlacesSidebarClass GtkPlacesSidebarClass;
typedef enum {
  GTK_PLACES_OPEN_NORMAL = 1 << 0,
  GTK_PLACES_OPEN_NEW_TAB = 1 << 1,
  GTK_PLACES_OPEN_NEW_WINDOW = 1 << 2
} GtkPlacesOpenFlags;
extern
GType gtk_places_sidebar_get_type (void) __attribute__((__const__));
extern
GtkWidget * gtk_places_sidebar_new (void);
extern
GtkPlacesOpenFlags gtk_places_sidebar_get_open_flags (GtkPlacesSidebar *sidebar);
extern
void gtk_places_sidebar_set_open_flags (GtkPlacesSidebar *sidebar,
                                                                  GtkPlacesOpenFlags flags);
extern
GFile * gtk_places_sidebar_get_location (GtkPlacesSidebar *sidebar);
extern
void gtk_places_sidebar_set_location (GtkPlacesSidebar *sidebar,
                                                                  GFile *location);
extern
gboolean gtk_places_sidebar_get_show_recent (GtkPlacesSidebar *sidebar);
extern
void gtk_places_sidebar_set_show_recent (GtkPlacesSidebar *sidebar,
                                                                  gboolean show_recent);
extern
gboolean gtk_places_sidebar_get_show_desktop (GtkPlacesSidebar *sidebar);
extern
void gtk_places_sidebar_set_show_desktop (GtkPlacesSidebar *sidebar,
                                                                  gboolean show_desktop);
extern
gboolean gtk_places_sidebar_get_show_connect_to_server (GtkPlacesSidebar *sidebar);
extern
void gtk_places_sidebar_set_show_connect_to_server (GtkPlacesSidebar *sidebar,
                                                                  gboolean show_connect_to_server);
extern
gboolean gtk_places_sidebar_get_show_enter_location (GtkPlacesSidebar *sidebar);
extern
void gtk_places_sidebar_set_show_enter_location (GtkPlacesSidebar *sidebar,
                                                                  gboolean show_enter_location);
extern
void gtk_places_sidebar_set_local_only (GtkPlacesSidebar *sidebar,
                                                                  gboolean local_only);
extern
gboolean gtk_places_sidebar_get_local_only (GtkPlacesSidebar *sidebar);
extern
void gtk_places_sidebar_add_shortcut (GtkPlacesSidebar *sidebar,
                                                                  GFile *location);
extern
void gtk_places_sidebar_remove_shortcut (GtkPlacesSidebar *sidebar,
                                                                  GFile *location);
extern
GSList * gtk_places_sidebar_list_shortcuts (GtkPlacesSidebar *sidebar);
extern
GFile * gtk_places_sidebar_get_nth_bookmark (GtkPlacesSidebar *sidebar,
                                                                  gint n);
extern
void gtk_places_sidebar_set_drop_targets_visible (GtkPlacesSidebar *sidebar,
                                                                  gboolean visible,
                                                                  GdkDragContext *context);
extern
gboolean gtk_places_sidebar_get_show_trash (GtkPlacesSidebar *sidebar);
extern
void gtk_places_sidebar_set_show_trash (GtkPlacesSidebar *sidebar,
                                                                  gboolean show_trash);
extern
void gtk_places_sidebar_set_show_other_locations (GtkPlacesSidebar *sidebar,
                                                                  gboolean show_other_locations);
extern
gboolean gtk_places_sidebar_get_show_other_locations (GtkPlacesSidebar *sidebar);
typedef struct _GtkPopoverMenu GtkPopoverMenu;
typedef struct _GtkPopoverMenuClass GtkPopoverMenuClass;
struct _GtkPopoverMenuClass
{
  GtkPopoverClass parent_class;
  gpointer reserved[10];
};
extern
GType gtk_popover_menu_get_type (void) __attribute__((__const__));
extern
GtkWidget * gtk_popover_menu_new (void);
extern
void gtk_popover_menu_open_submenu (GtkPopoverMenu *popover,
                                           const gchar *name);
typedef struct _GtkPrintContext GtkPrintContext;
extern
GType gtk_print_context_get_type (void) __attribute__((__const__));
extern
cairo_t *gtk_print_context_get_cairo_context (GtkPrintContext *context);
extern
GtkPageSetup *gtk_print_context_get_page_setup (GtkPrintContext *context);
extern
gdouble gtk_print_context_get_width (GtkPrintContext *context);
extern
gdouble gtk_print_context_get_height (GtkPrintContext *context);
extern
gdouble gtk_print_context_get_dpi_x (GtkPrintContext *context);
extern
gdouble gtk_print_context_get_dpi_y (GtkPrintContext *context);
extern
gboolean gtk_print_context_get_hard_margins (GtkPrintContext *context,
            gdouble *top,
            gdouble *bottom,
            gdouble *left,
            gdouble *right);
extern
PangoFontMap *gtk_print_context_get_pango_fontmap (GtkPrintContext *context);
extern
PangoContext *gtk_print_context_create_pango_context (GtkPrintContext *context);
extern
PangoLayout *gtk_print_context_create_pango_layout (GtkPrintContext *context);
extern
void gtk_print_context_set_cairo_context (GtkPrintContext *context,
            cairo_t *cr,
            double dpi_x,
            double dpi_y);
typedef struct _GtkPrintSettings GtkPrintSettings;
typedef void (*GtkPrintSettingsFunc) (const gchar *key,
     const gchar *value,
     gpointer user_data);
typedef struct _GtkPageRange GtkPageRange;
struct _GtkPageRange
{
  gint start;
  gint end;
};
extern
GType gtk_print_settings_get_type (void) __attribute__((__const__));
extern
GtkPrintSettings *gtk_print_settings_new (void);
extern
GtkPrintSettings *gtk_print_settings_copy (GtkPrintSettings *other);
extern
GtkPrintSettings *gtk_print_settings_new_from_file (const gchar *file_name,
             GError **error);
extern
gboolean gtk_print_settings_load_file (GtkPrintSettings *settings,
             const gchar *file_name,
             GError **error);
extern
gboolean gtk_print_settings_to_file (GtkPrintSettings *settings,
             const gchar *file_name,
             GError **error);
extern
GtkPrintSettings *gtk_print_settings_new_from_key_file (GKeyFile *key_file,
             const gchar *group_name,
             GError **error);
extern
gboolean gtk_print_settings_load_key_file (GtkPrintSettings *settings,
             GKeyFile *key_file,
             const gchar *group_name,
             GError **error);
extern
void gtk_print_settings_to_key_file (GtkPrintSettings *settings,
             GKeyFile *key_file,
             const gchar *group_name);
extern
gboolean gtk_print_settings_has_key (GtkPrintSettings *settings,
             const gchar *key);
extern
const gchar * gtk_print_settings_get (GtkPrintSettings *settings,
             const gchar *key);
extern
void gtk_print_settings_set (GtkPrintSettings *settings,
             const gchar *key,
             const gchar *value);
extern
void gtk_print_settings_unset (GtkPrintSettings *settings,
             const gchar *key);
extern
void gtk_print_settings_foreach (GtkPrintSettings *settings,
             GtkPrintSettingsFunc func,
             gpointer user_data);
extern
gboolean gtk_print_settings_get_bool (GtkPrintSettings *settings,
             const gchar *key);
extern
void gtk_print_settings_set_bool (GtkPrintSettings *settings,
             const gchar *key,
             gboolean value);
extern
gdouble gtk_print_settings_get_double (GtkPrintSettings *settings,
             const gchar *key);
extern
gdouble gtk_print_settings_get_double_with_default (GtkPrintSettings *settings,
             const gchar *key,
             gdouble def);
extern
void gtk_print_settings_set_double (GtkPrintSettings *settings,
             const gchar *key,
             gdouble value);
extern
gdouble gtk_print_settings_get_length (GtkPrintSettings *settings,
             const gchar *key,
             GtkUnit unit);
extern
void gtk_print_settings_set_length (GtkPrintSettings *settings,
             const gchar *key,
             gdouble value,
             GtkUnit unit);
extern
gint gtk_print_settings_get_int (GtkPrintSettings *settings,
             const gchar *key);
extern
gint gtk_print_settings_get_int_with_default (GtkPrintSettings *settings,
             const gchar *key,
             gint def);
extern
void gtk_print_settings_set_int (GtkPrintSettings *settings,
             const gchar *key,
             gint value);
extern
const gchar * gtk_print_settings_get_printer (GtkPrintSettings *settings);
extern
void gtk_print_settings_set_printer (GtkPrintSettings *settings,
        const gchar *printer);
extern
GtkPageOrientation gtk_print_settings_get_orientation (GtkPrintSettings *settings);
extern
void gtk_print_settings_set_orientation (GtkPrintSettings *settings,
        GtkPageOrientation orientation);
extern
GtkPaperSize * gtk_print_settings_get_paper_size (GtkPrintSettings *settings);
extern
void gtk_print_settings_set_paper_size (GtkPrintSettings *settings,
        GtkPaperSize *paper_size);
extern
gdouble gtk_print_settings_get_paper_width (GtkPrintSettings *settings,
        GtkUnit unit);
extern
void gtk_print_settings_set_paper_width (GtkPrintSettings *settings,
        gdouble width,
        GtkUnit unit);
extern
gdouble gtk_print_settings_get_paper_height (GtkPrintSettings *settings,
        GtkUnit unit);
extern
void gtk_print_settings_set_paper_height (GtkPrintSettings *settings,
        gdouble height,
        GtkUnit unit);
extern
gboolean gtk_print_settings_get_use_color (GtkPrintSettings *settings);
extern
void gtk_print_settings_set_use_color (GtkPrintSettings *settings,
        gboolean use_color);
extern
gboolean gtk_print_settings_get_collate (GtkPrintSettings *settings);
extern
void gtk_print_settings_set_collate (GtkPrintSettings *settings,
        gboolean collate);
extern
gboolean gtk_print_settings_get_reverse (GtkPrintSettings *settings);
extern
void gtk_print_settings_set_reverse (GtkPrintSettings *settings,
        gboolean reverse);
extern
GtkPrintDuplex gtk_print_settings_get_duplex (GtkPrintSettings *settings);
extern
void gtk_print_settings_set_duplex (GtkPrintSettings *settings,
        GtkPrintDuplex duplex);
extern
GtkPrintQuality gtk_print_settings_get_quality (GtkPrintSettings *settings);
extern
void gtk_print_settings_set_quality (GtkPrintSettings *settings,
        GtkPrintQuality quality);
extern
gint gtk_print_settings_get_n_copies (GtkPrintSettings *settings);
extern
void gtk_print_settings_set_n_copies (GtkPrintSettings *settings,
        gint num_copies);
extern
gint gtk_print_settings_get_number_up (GtkPrintSettings *settings);
extern
void gtk_print_settings_set_number_up (GtkPrintSettings *settings,
        gint number_up);
extern
GtkNumberUpLayout gtk_print_settings_get_number_up_layout (GtkPrintSettings *settings);
extern
void gtk_print_settings_set_number_up_layout (GtkPrintSettings *settings,
        GtkNumberUpLayout number_up_layout);
extern
gint gtk_print_settings_get_resolution (GtkPrintSettings *settings);
extern
void gtk_print_settings_set_resolution (GtkPrintSettings *settings,
        gint resolution);
extern
gint gtk_print_settings_get_resolution_x (GtkPrintSettings *settings);
extern
gint gtk_print_settings_get_resolution_y (GtkPrintSettings *settings);
extern
void gtk_print_settings_set_resolution_xy (GtkPrintSettings *settings,
        gint resolution_x,
        gint resolution_y);
extern
gdouble gtk_print_settings_get_printer_lpi (GtkPrintSettings *settings);
extern
void gtk_print_settings_set_printer_lpi (GtkPrintSettings *settings,
        gdouble lpi);
extern
gdouble gtk_print_settings_get_scale (GtkPrintSettings *settings);
extern
void gtk_print_settings_set_scale (GtkPrintSettings *settings,
        gdouble scale);
extern
GtkPrintPages gtk_print_settings_get_print_pages (GtkPrintSettings *settings);
extern
void gtk_print_settings_set_print_pages (GtkPrintSettings *settings,
        GtkPrintPages pages);
extern
GtkPageRange * gtk_print_settings_get_page_ranges (GtkPrintSettings *settings,
        gint *num_ranges);
extern
void gtk_print_settings_set_page_ranges (GtkPrintSettings *settings,
        GtkPageRange *page_ranges,
        gint num_ranges);
extern
GtkPageSet gtk_print_settings_get_page_set (GtkPrintSettings *settings);
extern
void gtk_print_settings_set_page_set (GtkPrintSettings *settings,
        GtkPageSet page_set);
extern
const gchar * gtk_print_settings_get_default_source (GtkPrintSettings *settings);
extern
void gtk_print_settings_set_default_source (GtkPrintSettings *settings,
        const gchar *default_source);
extern
const gchar * gtk_print_settings_get_media_type (GtkPrintSettings *settings);
extern
void gtk_print_settings_set_media_type (GtkPrintSettings *settings,
        const gchar *media_type);
extern
const gchar * gtk_print_settings_get_dither (GtkPrintSettings *settings);
extern
void gtk_print_settings_set_dither (GtkPrintSettings *settings,
        const gchar *dither);
extern
const gchar * gtk_print_settings_get_finishings (GtkPrintSettings *settings);
extern
void gtk_print_settings_set_finishings (GtkPrintSettings *settings,
        const gchar *finishings);
extern
const gchar * gtk_print_settings_get_output_bin (GtkPrintSettings *settings);
extern
void gtk_print_settings_set_output_bin (GtkPrintSettings *settings,
        const gchar *output_bin);
typedef struct _GtkPrintOperationPreview GtkPrintOperationPreview;
typedef struct _GtkPrintOperationPreviewIface GtkPrintOperationPreviewIface;
struct _GtkPrintOperationPreviewIface
{
  GTypeInterface g_iface;
  void (*ready) (GtkPrintOperationPreview *preview,
           GtkPrintContext *context);
  void (*got_page_size) (GtkPrintOperationPreview *preview,
           GtkPrintContext *context,
           GtkPageSetup *page_setup);
  void (*render_page) (GtkPrintOperationPreview *preview,
           gint page_nr);
  gboolean (*is_selected) (GtkPrintOperationPreview *preview,
           gint page_nr);
  void (*end_preview) (GtkPrintOperationPreview *preview);
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
  void (*_gtk_reserved5) (void);
  void (*_gtk_reserved6) (void);
  void (*_gtk_reserved7) (void);
  void (*_gtk_reserved8) (void);
};
extern
GType gtk_print_operation_preview_get_type (void) __attribute__((__const__));
extern
void gtk_print_operation_preview_render_page (GtkPrintOperationPreview *preview,
        gint page_nr);
extern
void gtk_print_operation_preview_end_preview (GtkPrintOperationPreview *preview);
extern
gboolean gtk_print_operation_preview_is_selected (GtkPrintOperationPreview *preview,
        gint page_nr);
typedef struct _GtkPrintOperationClass GtkPrintOperationClass;
typedef struct _GtkPrintOperationPrivate GtkPrintOperationPrivate;
typedef struct _GtkPrintOperation GtkPrintOperation;
typedef enum {
  GTK_PRINT_STATUS_INITIAL,
  GTK_PRINT_STATUS_PREPARING,
  GTK_PRINT_STATUS_GENERATING_DATA,
  GTK_PRINT_STATUS_SENDING_DATA,
  GTK_PRINT_STATUS_PENDING,
  GTK_PRINT_STATUS_PENDING_ISSUE,
  GTK_PRINT_STATUS_PRINTING,
  GTK_PRINT_STATUS_FINISHED,
  GTK_PRINT_STATUS_FINISHED_ABORTED
} GtkPrintStatus;
typedef enum {
  GTK_PRINT_OPERATION_RESULT_ERROR,
  GTK_PRINT_OPERATION_RESULT_APPLY,
  GTK_PRINT_OPERATION_RESULT_CANCEL,
  GTK_PRINT_OPERATION_RESULT_IN_PROGRESS
} GtkPrintOperationResult;
typedef enum {
  GTK_PRINT_OPERATION_ACTION_PRINT_DIALOG,
  GTK_PRINT_OPERATION_ACTION_PRINT,
  GTK_PRINT_OPERATION_ACTION_PREVIEW,
  GTK_PRINT_OPERATION_ACTION_EXPORT
} GtkPrintOperationAction;
struct _GtkPrintOperation
{
  GObject parent_instance;
  GtkPrintOperationPrivate *priv;
};
struct _GtkPrintOperationClass
{
  GObjectClass parent_class;
  void (*done) (GtkPrintOperation *operation,
                                  GtkPrintOperationResult result);
  void (*begin_print) (GtkPrintOperation *operation,
                                  GtkPrintContext *context);
  gboolean (*paginate) (GtkPrintOperation *operation,
                                  GtkPrintContext *context);
  void (*request_page_setup) (GtkPrintOperation *operation,
                                  GtkPrintContext *context,
                                  gint page_nr,
                                  GtkPageSetup *setup);
  void (*draw_page) (GtkPrintOperation *operation,
                                  GtkPrintContext *context,
                                  gint page_nr);
  void (*end_print) (GtkPrintOperation *operation,
                                  GtkPrintContext *context);
  void (*status_changed) (GtkPrintOperation *operation);
  GtkWidget *(*create_custom_widget) (GtkPrintOperation *operation);
  void (*custom_widget_apply) (GtkPrintOperation *operation,
                                      GtkWidget *widget);
  gboolean (*preview) (GtkPrintOperation *operation,
                              GtkPrintOperationPreview *preview,
                              GtkPrintContext *context,
                              GtkWindow *parent);
  void (*update_custom_widget) (GtkPrintOperation *operation,
                                    GtkWidget *widget,
                                    GtkPageSetup *setup,
                                    GtkPrintSettings *settings);
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
  void (*_gtk_reserved5) (void);
  void (*_gtk_reserved6) (void);
  void (*_gtk_reserved7) (void);
  void (*_gtk_reserved8) (void);
};
typedef enum
{
  GTK_PRINT_ERROR_GENERAL,
  GTK_PRINT_ERROR_INTERNAL_ERROR,
  GTK_PRINT_ERROR_NOMEM,
  GTK_PRINT_ERROR_INVALID_FILE
} GtkPrintError;
extern
GQuark gtk_print_error_quark (void);
extern
GType gtk_print_operation_get_type (void) __attribute__((__const__));
extern
GtkPrintOperation * gtk_print_operation_new (void);
extern
void gtk_print_operation_set_default_page_setup (GtkPrintOperation *op,
                                                                    GtkPageSetup *default_page_setup);
extern
GtkPageSetup * gtk_print_operation_get_default_page_setup (GtkPrintOperation *op);
extern
void gtk_print_operation_set_print_settings (GtkPrintOperation *op,
                                                                    GtkPrintSettings *print_settings);
extern
GtkPrintSettings * gtk_print_operation_get_print_settings (GtkPrintOperation *op);
extern
void gtk_print_operation_set_job_name (GtkPrintOperation *op,
                                                                    const gchar *job_name);
extern
void gtk_print_operation_set_n_pages (GtkPrintOperation *op,
                                                                    gint n_pages);
extern
void gtk_print_operation_set_current_page (GtkPrintOperation *op,
                                                                    gint current_page);
extern
void gtk_print_operation_set_use_full_page (GtkPrintOperation *op,
                                                                    gboolean full_page);
extern
void gtk_print_operation_set_unit (GtkPrintOperation *op,
                                                                    GtkUnit unit);
extern
void gtk_print_operation_set_export_filename (GtkPrintOperation *op,
                                                                    const gchar *filename);
extern
void gtk_print_operation_set_track_print_status (GtkPrintOperation *op,
                                                                    gboolean track_status);
extern
void gtk_print_operation_set_show_progress (GtkPrintOperation *op,
                                                                    gboolean show_progress);
extern
void gtk_print_operation_set_allow_async (GtkPrintOperation *op,
                                                                    gboolean allow_async);
extern
void gtk_print_operation_set_custom_tab_label (GtkPrintOperation *op,
                                                                    const gchar *label);
extern
GtkPrintOperationResult gtk_print_operation_run (GtkPrintOperation *op,
                                                                    GtkPrintOperationAction action,
                                                                    GtkWindow *parent,
                                                                    GError **error);
extern
void gtk_print_operation_get_error (GtkPrintOperation *op,
                                                                    GError **error);
extern
GtkPrintStatus gtk_print_operation_get_status (GtkPrintOperation *op);
extern
const gchar * gtk_print_operation_get_status_string (GtkPrintOperation *op);
extern
gboolean gtk_print_operation_is_finished (GtkPrintOperation *op);
extern
void gtk_print_operation_cancel (GtkPrintOperation *op);
extern
void gtk_print_operation_draw_page_finish (GtkPrintOperation *op);
extern
void gtk_print_operation_set_defer_drawing (GtkPrintOperation *op);
extern
void gtk_print_operation_set_support_selection (GtkPrintOperation *op,
                                                                    gboolean support_selection);
extern
gboolean gtk_print_operation_get_support_selection (GtkPrintOperation *op);
extern
void gtk_print_operation_set_has_selection (GtkPrintOperation *op,
                                                                    gboolean has_selection);
extern
gboolean gtk_print_operation_get_has_selection (GtkPrintOperation *op);
extern
void gtk_print_operation_set_embed_page_setup (GtkPrintOperation *op,
                                                                    gboolean embed);
extern
gboolean gtk_print_operation_get_embed_page_setup (GtkPrintOperation *op);
extern
gint gtk_print_operation_get_n_pages_to_print (GtkPrintOperation *op);
extern
GtkPageSetup *gtk_print_run_page_setup_dialog (GtkWindow *parent,
                                                                    GtkPageSetup *page_setup,
                                                                    GtkPrintSettings *settings);
typedef void (* GtkPageSetupDoneFunc) (GtkPageSetup *page_setup,
                                        gpointer data);
extern
void gtk_print_run_page_setup_dialog_async (GtkWindow *parent,
                                                                    GtkPageSetup *page_setup,
                                                                    GtkPrintSettings *settings,
                                                                    GtkPageSetupDoneFunc done_cb,
                                                                    gpointer data);
typedef struct _GtkProgressBar GtkProgressBar;
typedef struct _GtkProgressBarPrivate GtkProgressBarPrivate;
typedef struct _GtkProgressBarClass GtkProgressBarClass;
struct _GtkProgressBar
{
  GtkWidget parent;
  GtkProgressBarPrivate *priv;
};
struct _GtkProgressBarClass
{
  GtkWidgetClass parent_class;
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_progress_bar_get_type (void) __attribute__((__const__));
extern
GtkWidget* gtk_progress_bar_new (void);
extern
void gtk_progress_bar_pulse (GtkProgressBar *pbar);
extern
void gtk_progress_bar_set_text (GtkProgressBar *pbar,
                                                  const gchar *text);
extern
void gtk_progress_bar_set_fraction (GtkProgressBar *pbar,
                                                  gdouble fraction);
extern
void gtk_progress_bar_set_pulse_step (GtkProgressBar *pbar,
                                                  gdouble fraction);
extern
void gtk_progress_bar_set_inverted (GtkProgressBar *pbar,
                                                  gboolean inverted);
extern
const gchar * gtk_progress_bar_get_text (GtkProgressBar *pbar);
extern
gdouble gtk_progress_bar_get_fraction (GtkProgressBar *pbar);
extern
gdouble gtk_progress_bar_get_pulse_step (GtkProgressBar *pbar);
extern
gboolean gtk_progress_bar_get_inverted (GtkProgressBar *pbar);
extern
void gtk_progress_bar_set_ellipsize (GtkProgressBar *pbar,
                                                   PangoEllipsizeMode mode);
extern
PangoEllipsizeMode gtk_progress_bar_get_ellipsize (GtkProgressBar *pbar);
extern
void gtk_progress_bar_set_show_text (GtkProgressBar *pbar,
                                                   gboolean show_text);
extern
gboolean gtk_progress_bar_get_show_text (GtkProgressBar *pbar);
typedef struct _GtkRadioButton GtkRadioButton;
typedef struct _GtkRadioButtonPrivate GtkRadioButtonPrivate;
typedef struct _GtkRadioButtonClass GtkRadioButtonClass;
struct _GtkRadioButton
{
  GtkCheckButton check_button;
  GtkRadioButtonPrivate *priv;
};
struct _GtkRadioButtonClass
{
  GtkCheckButtonClass parent_class;
  void (*group_changed) (GtkRadioButton *radio_button);
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_radio_button_get_type (void) __attribute__((__const__));
extern
GtkWidget* gtk_radio_button_new (GSList *group);
extern
GtkWidget* gtk_radio_button_new_from_widget (GtkRadioButton *radio_group_member);
extern
GtkWidget* gtk_radio_button_new_with_label (GSList *group,
                                                           const gchar *label);
extern
GtkWidget* gtk_radio_button_new_with_label_from_widget (GtkRadioButton *radio_group_member,
                                                           const gchar *label);
extern
GtkWidget* gtk_radio_button_new_with_mnemonic (GSList *group,
                                                           const gchar *label);
extern
GtkWidget* gtk_radio_button_new_with_mnemonic_from_widget (GtkRadioButton *radio_group_member,
                                                           const gchar *label);
extern
GSList* gtk_radio_button_get_group (GtkRadioButton *radio_button);
extern
void gtk_radio_button_set_group (GtkRadioButton *radio_button,
                                                           GSList *group);
extern
void gtk_radio_button_join_group (GtkRadioButton *radio_button,
                                                    GtkRadioButton *group_source);
typedef struct _GtkRadioMenuItem GtkRadioMenuItem;
typedef struct _GtkRadioMenuItemPrivate GtkRadioMenuItemPrivate;
typedef struct _GtkRadioMenuItemClass GtkRadioMenuItemClass;
struct _GtkRadioMenuItem
{
  GtkCheckMenuItem check_menu_item;
  GtkRadioMenuItemPrivate *priv;
};
struct _GtkRadioMenuItemClass
{
  GtkCheckMenuItemClass parent_class;
  void (*group_changed) (GtkRadioMenuItem *radio_menu_item);
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_radio_menu_item_get_type (void) __attribute__((__const__));
extern
GtkWidget* gtk_radio_menu_item_new (GSList *group);
extern
GtkWidget* gtk_radio_menu_item_new_with_label (GSList *group,
             const gchar *label);
extern
GtkWidget* gtk_radio_menu_item_new_with_mnemonic (GSList *group,
             const gchar *label);
extern
GtkWidget* gtk_radio_menu_item_new_from_widget (GtkRadioMenuItem *group);
extern
GtkWidget *gtk_radio_menu_item_new_with_mnemonic_from_widget (GtkRadioMenuItem *group,
             const gchar *label);
extern
GtkWidget *gtk_radio_menu_item_new_with_label_from_widget (GtkRadioMenuItem *group,
             const gchar *label);
extern
GSList* gtk_radio_menu_item_get_group (GtkRadioMenuItem *radio_menu_item);
extern
void gtk_radio_menu_item_set_group (GtkRadioMenuItem *radio_menu_item,
             GSList *group);
extern
void gtk_radio_menu_item_join_group (GtkRadioMenuItem *radio_menu_item,
                                                              GtkRadioMenuItem *group_source);
typedef struct _GtkToggleToolButton GtkToggleToolButton;
typedef struct _GtkToggleToolButtonClass GtkToggleToolButtonClass;
typedef struct _GtkToggleToolButtonPrivate GtkToggleToolButtonPrivate;
struct _GtkToggleToolButton
{
  GtkToolButton parent;
  GtkToggleToolButtonPrivate *priv;
};
struct _GtkToggleToolButtonClass
{
  GtkToolButtonClass parent_class;
  void (* toggled) (GtkToggleToolButton *button);
  void (* _gtk_reserved1) (void);
  void (* _gtk_reserved2) (void);
  void (* _gtk_reserved3) (void);
  void (* _gtk_reserved4) (void);
};
extern
GType gtk_toggle_tool_button_get_type (void) __attribute__((__const__));
extern
GtkToolItem *gtk_toggle_tool_button_new (void);
extern
GtkToolItem *gtk_toggle_tool_button_new_from_stock (const gchar *stock_id);
extern
void gtk_toggle_tool_button_set_active (GtkToggleToolButton *button,
          gboolean is_active);
extern
gboolean gtk_toggle_tool_button_get_active (GtkToggleToolButton *button);
typedef struct _GtkRadioToolButton GtkRadioToolButton;
typedef struct _GtkRadioToolButtonClass GtkRadioToolButtonClass;
struct _GtkRadioToolButton
{
  GtkToggleToolButton parent;
};
struct _GtkRadioToolButtonClass
{
  GtkToggleToolButtonClass parent_class;
  void (* _gtk_reserved1) (void);
  void (* _gtk_reserved2) (void);
  void (* _gtk_reserved3) (void);
  void (* _gtk_reserved4) (void);
};
extern
GType gtk_radio_tool_button_get_type (void) __attribute__((__const__));
extern
GtkToolItem *gtk_radio_tool_button_new (GSList *group);
extern
GtkToolItem *gtk_radio_tool_button_new_from_stock (GSList *group,
              const gchar *stock_id);
extern
GtkToolItem *gtk_radio_tool_button_new_from_widget (GtkRadioToolButton *group);
extern
GtkToolItem *gtk_radio_tool_button_new_with_stock_from_widget (GtkRadioToolButton *group,
              const gchar *stock_id);
extern
GSList * gtk_radio_tool_button_get_group (GtkRadioToolButton *button);
extern
void gtk_radio_tool_button_set_group (GtkRadioToolButton *button,
              GSList *group);
typedef struct _GtkRange GtkRange;
typedef struct _GtkRangePrivate GtkRangePrivate;
typedef struct _GtkRangeClass GtkRangeClass;
struct _GtkRange
{
  GtkWidget widget;
  GtkRangePrivate *priv;
};
struct _GtkRangeClass
{
  GtkWidgetClass parent_class;
  __attribute__((__deprecated__)) gchar *slider_detail;
  __attribute__((__deprecated__)) gchar *stepper_detail;
  void (* value_changed) (GtkRange *range);
  void (* adjust_bounds) (GtkRange *range,
                             gdouble new_value);
  void (* move_slider) (GtkRange *range,
                             GtkScrollType scroll);
  void (* get_range_border) (GtkRange *range,
                             GtkBorder *border_);
  gboolean (* change_value) (GtkRange *range,
                             GtkScrollType scroll,
                             gdouble new_value);
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_range_get_type (void) __attribute__((__const__));
extern
void gtk_range_set_adjustment (GtkRange *range,
                                                            GtkAdjustment *adjustment);
extern
GtkAdjustment* gtk_range_get_adjustment (GtkRange *range);
extern
void gtk_range_set_inverted (GtkRange *range,
                                                            gboolean setting);
extern
gboolean gtk_range_get_inverted (GtkRange *range);
extern
void gtk_range_set_flippable (GtkRange *range,
                                                            gboolean flippable);
extern
gboolean gtk_range_get_flippable (GtkRange *range);
extern
void gtk_range_set_slider_size_fixed (GtkRange *range,
                                                            gboolean size_fixed);
extern
gboolean gtk_range_get_slider_size_fixed (GtkRange *range);
extern
void gtk_range_set_min_slider_size (GtkRange *range,
                                                            gint min_size);
extern
gint gtk_range_get_min_slider_size (GtkRange *range);
extern
void gtk_range_get_range_rect (GtkRange *range,
                                                            GdkRectangle *range_rect);
extern
void gtk_range_get_slider_range (GtkRange *range,
                                                            gint *slider_start,
                                                            gint *slider_end);
extern
void gtk_range_set_lower_stepper_sensitivity (GtkRange *range,
                                                            GtkSensitivityType sensitivity);
extern
GtkSensitivityType gtk_range_get_lower_stepper_sensitivity (GtkRange *range);
extern
void gtk_range_set_upper_stepper_sensitivity (GtkRange *range,
                                                            GtkSensitivityType sensitivity);
extern
GtkSensitivityType gtk_range_get_upper_stepper_sensitivity (GtkRange *range);
extern
void gtk_range_set_increments (GtkRange *range,
                                                            gdouble step,
                                                            gdouble page);
extern
void gtk_range_set_range (GtkRange *range,
                                                            gdouble min,
                                                            gdouble max);
extern
void gtk_range_set_value (GtkRange *range,
                                                            gdouble value);
extern
gdouble gtk_range_get_value (GtkRange *range);
extern
void gtk_range_set_show_fill_level (GtkRange *range,
                                                            gboolean show_fill_level);
extern
gboolean gtk_range_get_show_fill_level (GtkRange *range);
extern
void gtk_range_set_restrict_to_fill_level (GtkRange *range,
                                                            gboolean restrict_to_fill_level);
extern
gboolean gtk_range_get_restrict_to_fill_level (GtkRange *range);
extern
void gtk_range_set_fill_level (GtkRange *range,
                                                            gdouble fill_level);
extern
gdouble gtk_range_get_fill_level (GtkRange *range);
extern
void gtk_range_set_round_digits (GtkRange *range,
                                                            gint round_digits);
extern
gint gtk_range_get_round_digits (GtkRange *range);
typedef struct _GtkRecentInfo GtkRecentInfo;
typedef struct _GtkRecentData GtkRecentData;
typedef struct _GtkRecentManager GtkRecentManager;
typedef struct _GtkRecentManagerClass GtkRecentManagerClass;
typedef struct _GtkRecentManagerPrivate GtkRecentManagerPrivate;
struct _GtkRecentData
{
  gchar *display_name;
  gchar *description;
  gchar *mime_type;
  gchar *app_name;
  gchar *app_exec;
  gchar **groups;
  gboolean is_private;
};
struct _GtkRecentManager
{
  GObject parent_instance;
  GtkRecentManagerPrivate *priv;
};
struct _GtkRecentManagerClass
{
  GObjectClass parent_class;
  void (*changed) (GtkRecentManager *manager);
  void (*_gtk_recent1) (void);
  void (*_gtk_recent2) (void);
  void (*_gtk_recent3) (void);
  void (*_gtk_recent4) (void);
};
typedef enum
{
  GTK_RECENT_MANAGER_ERROR_NOT_FOUND,
  GTK_RECENT_MANAGER_ERROR_INVALID_URI,
  GTK_RECENT_MANAGER_ERROR_INVALID_ENCODING,
  GTK_RECENT_MANAGER_ERROR_NOT_REGISTERED,
  GTK_RECENT_MANAGER_ERROR_READ,
  GTK_RECENT_MANAGER_ERROR_WRITE,
  GTK_RECENT_MANAGER_ERROR_UNKNOWN
} GtkRecentManagerError;
extern
GQuark gtk_recent_manager_error_quark (void);
extern
GType gtk_recent_manager_get_type (void) __attribute__((__const__));
extern
GtkRecentManager *gtk_recent_manager_new (void);
extern
GtkRecentManager *gtk_recent_manager_get_default (void);
extern
gboolean gtk_recent_manager_add_item (GtkRecentManager *manager,
           const gchar *uri);
extern
gboolean gtk_recent_manager_add_full (GtkRecentManager *manager,
           const gchar *uri,
           const GtkRecentData *recent_data);
extern
gboolean gtk_recent_manager_remove_item (GtkRecentManager *manager,
           const gchar *uri,
           GError **error);
extern
GtkRecentInfo * gtk_recent_manager_lookup_item (GtkRecentManager *manager,
           const gchar *uri,
           GError **error);
extern
gboolean gtk_recent_manager_has_item (GtkRecentManager *manager,
           const gchar *uri);
extern
gboolean gtk_recent_manager_move_item (GtkRecentManager *manager,
           const gchar *uri,
           const gchar *new_uri,
           GError **error);
extern
GList * gtk_recent_manager_get_items (GtkRecentManager *manager);
extern
gint gtk_recent_manager_purge_items (GtkRecentManager *manager,
           GError **error);
extern
GType gtk_recent_info_get_type (void) __attribute__((__const__));
extern
GtkRecentInfo * gtk_recent_info_ref (GtkRecentInfo *info);
extern
void gtk_recent_info_unref (GtkRecentInfo *info);
extern
const gchar * gtk_recent_info_get_uri (GtkRecentInfo *info);
extern
const gchar * gtk_recent_info_get_display_name (GtkRecentInfo *info);
extern
const gchar * gtk_recent_info_get_description (GtkRecentInfo *info);
extern
const gchar * gtk_recent_info_get_mime_type (GtkRecentInfo *info);
extern
time_t gtk_recent_info_get_added (GtkRecentInfo *info);
extern
time_t gtk_recent_info_get_modified (GtkRecentInfo *info);
extern
time_t gtk_recent_info_get_visited (GtkRecentInfo *info);
extern
gboolean gtk_recent_info_get_private_hint (GtkRecentInfo *info);
extern
gboolean gtk_recent_info_get_application_info (GtkRecentInfo *info,
           const gchar *app_name,
           const gchar **app_exec,
           guint *count,
           time_t *time_);
extern
GAppInfo * gtk_recent_info_create_app_info (GtkRecentInfo *info,
                                                            const gchar *app_name,
                                                            GError **error);
extern
gchar ** gtk_recent_info_get_applications (GtkRecentInfo *info,
           gsize *length) __attribute__((__malloc__));
extern
gchar * gtk_recent_info_last_application (GtkRecentInfo *info) __attribute__((__malloc__));
extern
gboolean gtk_recent_info_has_application (GtkRecentInfo *info,
           const gchar *app_name);
extern
gchar ** gtk_recent_info_get_groups (GtkRecentInfo *info,
           gsize *length) __attribute__((__malloc__));
extern
gboolean gtk_recent_info_has_group (GtkRecentInfo *info,
           const gchar *group_name);
extern
GdkPixbuf * gtk_recent_info_get_icon (GtkRecentInfo *info,
           gint size);
extern
GIcon * gtk_recent_info_get_gicon (GtkRecentInfo *info);
extern
gchar * gtk_recent_info_get_short_name (GtkRecentInfo *info) __attribute__((__malloc__));
extern
gchar * gtk_recent_info_get_uri_display (GtkRecentInfo *info) __attribute__((__malloc__));
extern
gint gtk_recent_info_get_age (GtkRecentInfo *info);
extern
gboolean gtk_recent_info_is_local (GtkRecentInfo *info);
extern
gboolean gtk_recent_info_exists (GtkRecentInfo *info);
extern
gboolean gtk_recent_info_match (GtkRecentInfo *info_a,
           GtkRecentInfo *info_b);
void _gtk_recent_manager_sync (void);
typedef struct _GtkRecentFilter GtkRecentFilter;
typedef struct _GtkRecentFilterInfo GtkRecentFilterInfo;
typedef enum {
  GTK_RECENT_FILTER_URI = 1 << 0,
  GTK_RECENT_FILTER_DISPLAY_NAME = 1 << 1,
  GTK_RECENT_FILTER_MIME_TYPE = 1 << 2,
  GTK_RECENT_FILTER_APPLICATION = 1 << 3,
  GTK_RECENT_FILTER_GROUP = 1 << 4,
  GTK_RECENT_FILTER_AGE = 1 << 5
} GtkRecentFilterFlags;
typedef gboolean (*GtkRecentFilterFunc) (const GtkRecentFilterInfo *filter_info,
      gpointer user_data);
struct _GtkRecentFilterInfo
{
  GtkRecentFilterFlags contains;
  const gchar *uri;
  const gchar *display_name;
  const gchar *mime_type;
  const gchar **applications;
  const gchar **groups;
  gint age;
};
extern
GType gtk_recent_filter_get_type (void) __attribute__((__const__));
extern
GtkRecentFilter * gtk_recent_filter_new (void);
extern
void gtk_recent_filter_set_name (GtkRecentFilter *filter,
        const gchar *name);
extern
const gchar * gtk_recent_filter_get_name (GtkRecentFilter *filter);
extern
void gtk_recent_filter_add_mime_type (GtkRecentFilter *filter,
        const gchar *mime_type);
extern
void gtk_recent_filter_add_pattern (GtkRecentFilter *filter,
        const gchar *pattern);
extern
void gtk_recent_filter_add_pixbuf_formats (GtkRecentFilter *filter);
extern
void gtk_recent_filter_add_application (GtkRecentFilter *filter,
        const gchar *application);
extern
void gtk_recent_filter_add_group (GtkRecentFilter *filter,
        const gchar *group);
extern
void gtk_recent_filter_add_age (GtkRecentFilter *filter,
        gint days);
extern
void gtk_recent_filter_add_custom (GtkRecentFilter *filter,
        GtkRecentFilterFlags needed,
        GtkRecentFilterFunc func,
        gpointer data,
        GDestroyNotify data_destroy);
extern
GtkRecentFilterFlags gtk_recent_filter_get_needed (GtkRecentFilter *filter);
extern
gboolean gtk_recent_filter_filter (GtkRecentFilter *filter,
         const GtkRecentFilterInfo *filter_info);
typedef enum
{
  GTK_RECENT_SORT_NONE = 0,
  GTK_RECENT_SORT_MRU,
  GTK_RECENT_SORT_LRU,
  GTK_RECENT_SORT_CUSTOM
} GtkRecentSortType;
typedef gint (*GtkRecentSortFunc) (GtkRecentInfo *a,
       GtkRecentInfo *b,
       gpointer user_data);
typedef struct _GtkRecentChooser GtkRecentChooser;
typedef struct _GtkRecentChooserIface GtkRecentChooserIface;
typedef enum
{
  GTK_RECENT_CHOOSER_ERROR_NOT_FOUND,
  GTK_RECENT_CHOOSER_ERROR_INVALID_URI
} GtkRecentChooserError;
extern
GQuark gtk_recent_chooser_error_quark (void);
struct _GtkRecentChooserIface
{
  GTypeInterface base_iface;
  gboolean (* set_current_uri) (GtkRecentChooser *chooser,
           const gchar *uri,
           GError **error);
  gchar * (* get_current_uri) (GtkRecentChooser *chooser);
  gboolean (* select_uri) (GtkRecentChooser *chooser,
           const gchar *uri,
           GError **error);
  void (* unselect_uri) (GtkRecentChooser *chooser,
                                            const gchar *uri);
  void (* select_all) (GtkRecentChooser *chooser);
  void (* unselect_all) (GtkRecentChooser *chooser);
  GList * (* get_items) (GtkRecentChooser *chooser);
  GtkRecentManager *(* get_recent_manager) (GtkRecentChooser *chooser);
  void (* add_filter) (GtkRecentChooser *chooser,
           GtkRecentFilter *filter);
  void (* remove_filter) (GtkRecentChooser *chooser,
           GtkRecentFilter *filter);
  GSList * (* list_filters) (GtkRecentChooser *chooser);
  void (* set_sort_func) (GtkRecentChooser *chooser,
           GtkRecentSortFunc sort_func,
           gpointer sort_data,
           GDestroyNotify data_destroy);
  void (* item_activated) (GtkRecentChooser *chooser);
  void (* selection_changed) (GtkRecentChooser *chooser);
};
extern
GType gtk_recent_chooser_get_type (void) __attribute__((__const__));
extern
void gtk_recent_chooser_set_show_private (GtkRecentChooser *chooser,
         gboolean show_private);
extern
gboolean gtk_recent_chooser_get_show_private (GtkRecentChooser *chooser);
extern
void gtk_recent_chooser_set_show_not_found (GtkRecentChooser *chooser,
         gboolean show_not_found);
extern
gboolean gtk_recent_chooser_get_show_not_found (GtkRecentChooser *chooser);
extern
void gtk_recent_chooser_set_select_multiple (GtkRecentChooser *chooser,
         gboolean select_multiple);
extern
gboolean gtk_recent_chooser_get_select_multiple (GtkRecentChooser *chooser);
extern
void gtk_recent_chooser_set_limit (GtkRecentChooser *chooser,
         gint limit);
extern
gint gtk_recent_chooser_get_limit (GtkRecentChooser *chooser);
extern
void gtk_recent_chooser_set_local_only (GtkRecentChooser *chooser,
         gboolean local_only);
extern
gboolean gtk_recent_chooser_get_local_only (GtkRecentChooser *chooser);
extern
void gtk_recent_chooser_set_show_tips (GtkRecentChooser *chooser,
         gboolean show_tips);
extern
gboolean gtk_recent_chooser_get_show_tips (GtkRecentChooser *chooser);
extern
void gtk_recent_chooser_set_show_icons (GtkRecentChooser *chooser,
         gboolean show_icons);
extern
gboolean gtk_recent_chooser_get_show_icons (GtkRecentChooser *chooser);
extern
void gtk_recent_chooser_set_sort_type (GtkRecentChooser *chooser,
         GtkRecentSortType sort_type);
extern
GtkRecentSortType gtk_recent_chooser_get_sort_type (GtkRecentChooser *chooser);
extern
void gtk_recent_chooser_set_sort_func (GtkRecentChooser *chooser,
         GtkRecentSortFunc sort_func,
         gpointer sort_data,
         GDestroyNotify data_destroy);
extern
gboolean gtk_recent_chooser_set_current_uri (GtkRecentChooser *chooser,
          const gchar *uri,
          GError **error);
extern
gchar * gtk_recent_chooser_get_current_uri (GtkRecentChooser *chooser);
extern
GtkRecentInfo *gtk_recent_chooser_get_current_item (GtkRecentChooser *chooser);
extern
gboolean gtk_recent_chooser_select_uri (GtkRecentChooser *chooser,
          const gchar *uri,
          GError **error);
extern
void gtk_recent_chooser_unselect_uri (GtkRecentChooser *chooser,
                 const gchar *uri);
extern
void gtk_recent_chooser_select_all (GtkRecentChooser *chooser);
extern
void gtk_recent_chooser_unselect_all (GtkRecentChooser *chooser);
extern
GList * gtk_recent_chooser_get_items (GtkRecentChooser *chooser);
extern
gchar ** gtk_recent_chooser_get_uris (GtkRecentChooser *chooser,
          gsize *length);
extern
void gtk_recent_chooser_add_filter (GtkRecentChooser *chooser,
          GtkRecentFilter *filter);
extern
void gtk_recent_chooser_remove_filter (GtkRecentChooser *chooser,
         GtkRecentFilter *filter);
extern
GSList * gtk_recent_chooser_list_filters (GtkRecentChooser *chooser);
extern
void gtk_recent_chooser_set_filter (GtkRecentChooser *chooser,
         GtkRecentFilter *filter);
extern
GtkRecentFilter *gtk_recent_chooser_get_filter (GtkRecentChooser *chooser);
typedef struct _GtkRecentChooserDialog GtkRecentChooserDialog;
typedef struct _GtkRecentChooserDialogClass GtkRecentChooserDialogClass;
typedef struct _GtkRecentChooserDialogPrivate GtkRecentChooserDialogPrivate;
struct _GtkRecentChooserDialog
{
  GtkDialog parent_instance;
  GtkRecentChooserDialogPrivate *priv;
};
struct _GtkRecentChooserDialogClass
{
  GtkDialogClass parent_class;
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_recent_chooser_dialog_get_type (void) __attribute__((__const__));
extern
GtkWidget *gtk_recent_chooser_dialog_new (const gchar *title,
                   GtkWindow *parent,
                   const gchar *first_button_text,
                   ...) __attribute__((__sentinel__));
extern
GtkWidget *gtk_recent_chooser_dialog_new_for_manager (const gchar *title,
            GtkWindow *parent,
            GtkRecentManager *manager,
            const gchar *first_button_text,
            ...) __attribute__((__sentinel__));
typedef struct _GtkRecentChooserMenu GtkRecentChooserMenu;
typedef struct _GtkRecentChooserMenuClass GtkRecentChooserMenuClass;
typedef struct _GtkRecentChooserMenuPrivate GtkRecentChooserMenuPrivate;
struct _GtkRecentChooserMenu
{
  GtkMenu parent_instance;
  GtkRecentChooserMenuPrivate *priv;
};
struct _GtkRecentChooserMenuClass
{
  GtkMenuClass parent_class;
  void (* gtk_recent1) (void);
  void (* gtk_recent2) (void);
  void (* gtk_recent3) (void);
  void (* gtk_recent4) (void);
};
extern
GType gtk_recent_chooser_menu_get_type (void) __attribute__((__const__));
extern
GtkWidget *gtk_recent_chooser_menu_new (void);
extern
GtkWidget *gtk_recent_chooser_menu_new_for_manager (GtkRecentManager *manager);
extern
gboolean gtk_recent_chooser_menu_get_show_numbers (GtkRecentChooserMenu *menu);
extern
void gtk_recent_chooser_menu_set_show_numbers (GtkRecentChooserMenu *menu,
           gboolean show_numbers);
typedef struct _GtkRecentChooserWidget GtkRecentChooserWidget;
typedef struct _GtkRecentChooserWidgetClass GtkRecentChooserWidgetClass;
typedef struct _GtkRecentChooserWidgetPrivate GtkRecentChooserWidgetPrivate;
struct _GtkRecentChooserWidget
{
  GtkBox parent_instance;
  GtkRecentChooserWidgetPrivate *priv;
};
struct _GtkRecentChooserWidgetClass
{
  GtkBoxClass parent_class;
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_recent_chooser_widget_get_type (void) __attribute__((__const__));
extern
GtkWidget *gtk_recent_chooser_widget_new (void);
extern
GtkWidget *gtk_recent_chooser_widget_new_for_manager (GtkRecentManager *manager);
extern
void gtk_render_check (GtkStyleContext *context,
                                    cairo_t *cr,
                                    gdouble x,
                                    gdouble y,
                                    gdouble width,
                                    gdouble height);
extern
void gtk_render_option (GtkStyleContext *context,
                                    cairo_t *cr,
                                    gdouble x,
                                    gdouble y,
                                    gdouble width,
                                    gdouble height);
extern
void gtk_render_arrow (GtkStyleContext *context,
                                    cairo_t *cr,
                                    gdouble angle,
                                    gdouble x,
                                    gdouble y,
                                    gdouble size);
extern
void gtk_render_background (GtkStyleContext *context,
                                    cairo_t *cr,
                                    gdouble x,
                                    gdouble y,
                                    gdouble width,
                                    gdouble height);
extern
void gtk_render_frame (GtkStyleContext *context,
                                    cairo_t *cr,
                                    gdouble x,
                                    gdouble y,
                                    gdouble width,
                                    gdouble height);
extern
void gtk_render_expander (GtkStyleContext *context,
                                    cairo_t *cr,
                                    gdouble x,
                                    gdouble y,
                                    gdouble width,
                                    gdouble height);
extern
void gtk_render_focus (GtkStyleContext *context,
                                    cairo_t *cr,
                                    gdouble x,
                                    gdouble y,
                                    gdouble width,
                                    gdouble height);
extern
void gtk_render_layout (GtkStyleContext *context,
                                    cairo_t *cr,
                                    gdouble x,
                                    gdouble y,
                                    PangoLayout *layout);
extern
void gtk_render_line (GtkStyleContext *context,
                                    cairo_t *cr,
                                    gdouble x0,
                                    gdouble y0,
                                    gdouble x1,
                                    gdouble y1);
extern
void gtk_render_slider (GtkStyleContext *context,
                                    cairo_t *cr,
                                    gdouble x,
                                    gdouble y,
                                    gdouble width,
                                    gdouble height,
                                    GtkOrientation orientation);
extern
void gtk_render_frame_gap (GtkStyleContext *context,
                                    cairo_t *cr,
                                    gdouble x,
                                    gdouble y,
                                    gdouble width,
                                    gdouble height,
                                    GtkPositionType gap_side,
                                    gdouble xy0_gap,
                                    gdouble xy1_gap);
extern
void gtk_render_extension (GtkStyleContext *context,
                                    cairo_t *cr,
                                    gdouble x,
                                    gdouble y,
                                    gdouble width,
                                    gdouble height,
                                    GtkPositionType gap_side);
extern
void gtk_render_handle (GtkStyleContext *context,
                                    cairo_t *cr,
                                    gdouble x,
                                    gdouble y,
                                    gdouble width,
                                    gdouble height);
extern
void gtk_render_activity (GtkStyleContext *context,
                                    cairo_t *cr,
                                    gdouble x,
                                    gdouble y,
                                    gdouble width,
                                    gdouble height);
extern
GdkPixbuf * gtk_render_icon_pixbuf (GtkStyleContext *context,
                                    const GtkIconSource *source,
                                    GtkIconSize size);
extern
void gtk_render_icon (GtkStyleContext *context,
                                    cairo_t *cr,
                                    GdkPixbuf *pixbuf,
                                    gdouble x,
                                    gdouble y);
extern
void gtk_render_icon_surface (GtkStyleContext *context,
         cairo_t *cr,
         cairo_surface_t *surface,
         gdouble x,
         gdouble y);
typedef struct _GtkRevealer GtkRevealer;
typedef struct _GtkRevealerClass GtkRevealerClass;
typedef enum {
  GTK_REVEALER_TRANSITION_TYPE_NONE,
  GTK_REVEALER_TRANSITION_TYPE_CROSSFADE,
  GTK_REVEALER_TRANSITION_TYPE_SLIDE_RIGHT,
  GTK_REVEALER_TRANSITION_TYPE_SLIDE_LEFT,
  GTK_REVEALER_TRANSITION_TYPE_SLIDE_UP,
  GTK_REVEALER_TRANSITION_TYPE_SLIDE_DOWN
} GtkRevealerTransitionType;
struct _GtkRevealer {
  GtkBin parent_instance;
};
struct _GtkRevealerClass {
  GtkBinClass parent_class;
};
extern
GType gtk_revealer_get_type (void) __attribute__((__const__));
extern
GtkWidget* gtk_revealer_new (void);
extern
gboolean gtk_revealer_get_reveal_child (GtkRevealer *revealer);
extern
void gtk_revealer_set_reveal_child (GtkRevealer *revealer,
                                                                 gboolean reveal_child);
extern
gboolean gtk_revealer_get_child_revealed (GtkRevealer *revealer);
extern
guint gtk_revealer_get_transition_duration (GtkRevealer *revealer);
extern
void gtk_revealer_set_transition_duration (GtkRevealer *revealer,
                                                                 guint duration);
extern
void gtk_revealer_set_transition_type (GtkRevealer *revealer,
                                                                 GtkRevealerTransitionType transition);
extern
GtkRevealerTransitionType gtk_revealer_get_transition_type (GtkRevealer *revealer);
typedef struct _GtkScale GtkScale;
typedef struct _GtkScalePrivate GtkScalePrivate;
typedef struct _GtkScaleClass GtkScaleClass;
struct _GtkScale
{
  GtkRange range;
  GtkScalePrivate *priv;
};
struct _GtkScaleClass
{
  GtkRangeClass parent_class;
  gchar* (* format_value) (GtkScale *scale,
                           gdouble value);
  void (* draw_value) (GtkScale *scale);
  void (* get_layout_offsets) (GtkScale *scale,
                               gint *x,
                               gint *y);
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_scale_get_type (void) __attribute__((__const__));
extern
GtkWidget * gtk_scale_new (GtkOrientation orientation,
                                                GtkAdjustment *adjustment);
extern
GtkWidget * gtk_scale_new_with_range (GtkOrientation orientation,
                                                gdouble min,
                                                gdouble max,
                                                gdouble step);
extern
void gtk_scale_set_digits (GtkScale *scale,
                                                gint digits);
extern
gint gtk_scale_get_digits (GtkScale *scale);
extern
void gtk_scale_set_draw_value (GtkScale *scale,
                                                gboolean draw_value);
extern
gboolean gtk_scale_get_draw_value (GtkScale *scale);
extern
void gtk_scale_set_has_origin (GtkScale *scale,
                                                gboolean has_origin);
extern
gboolean gtk_scale_get_has_origin (GtkScale *scale);
extern
void gtk_scale_set_value_pos (GtkScale *scale,
                                                GtkPositionType pos);
extern
GtkPositionType gtk_scale_get_value_pos (GtkScale *scale);
extern
PangoLayout * gtk_scale_get_layout (GtkScale *scale);
extern
void gtk_scale_get_layout_offsets (GtkScale *scale,
                                                gint *x,
                                                gint *y);
extern
void gtk_scale_add_mark (GtkScale *scale,
                                                gdouble value,
                                                GtkPositionType position,
                                                const gchar *markup);
extern
void gtk_scale_clear_marks (GtkScale *scale);
typedef struct _GtkScaleButton GtkScaleButton;
typedef struct _GtkScaleButtonClass GtkScaleButtonClass;
typedef struct _GtkScaleButtonPrivate GtkScaleButtonPrivate;
struct _GtkScaleButton
{
  GtkButton parent;
  GtkScaleButtonPrivate *priv;
};
struct _GtkScaleButtonClass
{
  GtkButtonClass parent_class;
  void (* value_changed) (GtkScaleButton *button,
                           gdouble value);
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_scale_button_get_type (void) __attribute__((__const__));
extern
GtkWidget * gtk_scale_button_new (GtkIconSize size,
                                                    gdouble min,
                                                    gdouble max,
                                                    gdouble step,
                                                    const gchar **icons);
extern
void gtk_scale_button_set_icons (GtkScaleButton *button,
                                                    const gchar **icons);
extern
gdouble gtk_scale_button_get_value (GtkScaleButton *button);
extern
void gtk_scale_button_set_value (GtkScaleButton *button,
                                                    gdouble value);
extern
GtkAdjustment * gtk_scale_button_get_adjustment (GtkScaleButton *button);
extern
void gtk_scale_button_set_adjustment (GtkScaleButton *button,
                                                    GtkAdjustment *adjustment);
extern
GtkWidget * gtk_scale_button_get_plus_button (GtkScaleButton *button);
extern
GtkWidget * gtk_scale_button_get_minus_button (GtkScaleButton *button);
extern
GtkWidget * gtk_scale_button_get_popup (GtkScaleButton *button);
typedef struct _GtkScrollable GtkScrollable;
typedef struct _GtkScrollableInterface GtkScrollableInterface;
struct _GtkScrollableInterface
{
  GTypeInterface base_iface;
  gboolean (* get_border) (GtkScrollable *scrollable,
                           GtkBorder *border);
};
extern
GType gtk_scrollable_get_type (void) __attribute__((__const__));
extern
GtkAdjustment *gtk_scrollable_get_hadjustment (GtkScrollable *scrollable);
extern
void gtk_scrollable_set_hadjustment (GtkScrollable *scrollable,
           GtkAdjustment *hadjustment);
extern
GtkAdjustment *gtk_scrollable_get_vadjustment (GtkScrollable *scrollable);
extern
void gtk_scrollable_set_vadjustment (GtkScrollable *scrollable,
           GtkAdjustment *vadjustment);
extern
GtkScrollablePolicy gtk_scrollable_get_hscroll_policy (GtkScrollable *scrollable);
extern
void gtk_scrollable_set_hscroll_policy (GtkScrollable *scrollable,
           GtkScrollablePolicy policy);
extern
GtkScrollablePolicy gtk_scrollable_get_vscroll_policy (GtkScrollable *scrollable);
extern
void gtk_scrollable_set_vscroll_policy (GtkScrollable *scrollable,
           GtkScrollablePolicy policy);
extern
gboolean gtk_scrollable_get_border (GtkScrollable *scrollable,
                                                            GtkBorder *border);
typedef struct _GtkScrollbar GtkScrollbar;
typedef struct _GtkScrollbarClass GtkScrollbarClass;
struct _GtkScrollbar
{
  GtkRange range;
};
struct _GtkScrollbarClass
{
  GtkRangeClass parent_class;
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_scrollbar_get_type (void) __attribute__((__const__));
extern
GtkWidget * gtk_scrollbar_new (GtkOrientation orientation,
                                    GtkAdjustment *adjustment);
typedef struct _GtkScrolledWindow GtkScrolledWindow;
typedef struct _GtkScrolledWindowPrivate GtkScrolledWindowPrivate;
typedef struct _GtkScrolledWindowClass GtkScrolledWindowClass;
struct _GtkScrolledWindow
{
  GtkBin container;
  GtkScrolledWindowPrivate *priv;
};
struct _GtkScrolledWindowClass
{
  GtkBinClass parent_class;
  gint scrollbar_spacing;
  gboolean (*scroll_child) (GtkScrolledWindow *scrolled_window,
         GtkScrollType scroll,
       gboolean horizontal);
  void (* move_focus_out) (GtkScrolledWindow *scrolled_window,
      GtkDirectionType direction);
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
typedef enum
{
  GTK_CORNER_TOP_LEFT,
  GTK_CORNER_BOTTOM_LEFT,
  GTK_CORNER_TOP_RIGHT,
  GTK_CORNER_BOTTOM_RIGHT
} GtkCornerType;
typedef enum
{
  GTK_POLICY_ALWAYS,
  GTK_POLICY_AUTOMATIC,
  GTK_POLICY_NEVER,
  GTK_POLICY_EXTERNAL
} GtkPolicyType;
extern
GType gtk_scrolled_window_get_type (void) __attribute__((__const__));
extern
GtkWidget* gtk_scrolled_window_new (GtkAdjustment *hadjustment,
            GtkAdjustment *vadjustment);
extern
void gtk_scrolled_window_set_hadjustment (GtkScrolledWindow *scrolled_window,
            GtkAdjustment *hadjustment);
extern
void gtk_scrolled_window_set_vadjustment (GtkScrolledWindow *scrolled_window,
            GtkAdjustment *vadjustment);
extern
GtkAdjustment* gtk_scrolled_window_get_hadjustment (GtkScrolledWindow *scrolled_window);
extern
GtkAdjustment* gtk_scrolled_window_get_vadjustment (GtkScrolledWindow *scrolled_window);
extern
GtkWidget* gtk_scrolled_window_get_hscrollbar (GtkScrolledWindow *scrolled_window);
extern
GtkWidget* gtk_scrolled_window_get_vscrollbar (GtkScrolledWindow *scrolled_window);
extern
void gtk_scrolled_window_set_policy (GtkScrolledWindow *scrolled_window,
            GtkPolicyType hscrollbar_policy,
            GtkPolicyType vscrollbar_policy);
extern
void gtk_scrolled_window_get_policy (GtkScrolledWindow *scrolled_window,
            GtkPolicyType *hscrollbar_policy,
            GtkPolicyType *vscrollbar_policy);
extern
void gtk_scrolled_window_set_placement (GtkScrolledWindow *scrolled_window,
            GtkCornerType window_placement);
extern
void gtk_scrolled_window_unset_placement (GtkScrolledWindow *scrolled_window);
extern
GtkCornerType gtk_scrolled_window_get_placement (GtkScrolledWindow *scrolled_window);
extern
void gtk_scrolled_window_set_shadow_type (GtkScrolledWindow *scrolled_window,
            GtkShadowType type);
extern
GtkShadowType gtk_scrolled_window_get_shadow_type (GtkScrolledWindow *scrolled_window);
extern
void gtk_scrolled_window_add_with_viewport (GtkScrolledWindow *scrolled_window,
            GtkWidget *child);
extern
gint gtk_scrolled_window_get_min_content_width (GtkScrolledWindow *scrolled_window);
extern
void gtk_scrolled_window_set_min_content_width (GtkScrolledWindow *scrolled_window,
                                                           gint width);
extern
gint gtk_scrolled_window_get_min_content_height (GtkScrolledWindow *scrolled_window);
extern
void gtk_scrolled_window_set_min_content_height (GtkScrolledWindow *scrolled_window,
                                                           gint height);
extern
void gtk_scrolled_window_set_kinetic_scrolling (GtkScrolledWindow *scrolled_window,
                                                           gboolean kinetic_scrolling);
extern
gboolean gtk_scrolled_window_get_kinetic_scrolling (GtkScrolledWindow *scrolled_window);
extern
void gtk_scrolled_window_set_capture_button_press (GtkScrolledWindow *scrolled_window,
                                                             gboolean capture_button_press);
extern
gboolean gtk_scrolled_window_get_capture_button_press (GtkScrolledWindow *scrolled_window);
extern
void gtk_scrolled_window_set_overlay_scrolling (GtkScrolledWindow *scrolled_window,
                                                           gboolean overlay_scrolling);
extern
gboolean gtk_scrolled_window_get_overlay_scrolling (GtkScrolledWindow *scrolled_window);
typedef struct _GtkSearchBar GtkSearchBar;
typedef struct _GtkSearchBarClass GtkSearchBarClass;
struct _GtkSearchBar
{
  GtkBin parent;
};
struct _GtkSearchBarClass
{
  GtkBinClass parent_class;
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_search_bar_get_type (void) __attribute__((__const__));
extern
GtkWidget* gtk_search_bar_new (void);
extern
void gtk_search_bar_connect_entry (GtkSearchBar *bar,
                                            GtkEntry *entry);
extern
gboolean gtk_search_bar_get_search_mode (GtkSearchBar *bar);
extern
void gtk_search_bar_set_search_mode (GtkSearchBar *bar,
                                            gboolean search_mode);
extern
gboolean gtk_search_bar_get_show_close_button (GtkSearchBar *bar);
extern
void gtk_search_bar_set_show_close_button (GtkSearchBar *bar,
                                                  gboolean visible);
extern
gboolean gtk_search_bar_handle_event (GtkSearchBar *bar,
                                            GdkEvent *event);
typedef struct _GtkSearchEntry GtkSearchEntry;
typedef struct _GtkSearchEntryClass GtkSearchEntryClass;
struct _GtkSearchEntry
{
  GtkEntry parent;
};
struct _GtkSearchEntryClass
{
  GtkEntryClass parent_class;
  void (*search_changed) (GtkSearchEntry *entry);
  void (*next_match) (GtkSearchEntry *entry);
  void (*previous_match) (GtkSearchEntry *entry);
  void (*stop_search) (GtkSearchEntry *entry);
};
extern
GType gtk_search_entry_get_type (void) __attribute__((__const__));
extern
GtkWidget* gtk_search_entry_new (void);
extern
gboolean gtk_search_entry_handle_event (GtkSearchEntry *entry,
                                                 GdkEvent *event);
typedef struct _GtkSeparator GtkSeparator;
typedef struct _GtkSeparatorPrivate GtkSeparatorPrivate;
typedef struct _GtkSeparatorClass GtkSeparatorClass;
struct _GtkSeparator
{
  GtkWidget widget;
  GtkSeparatorPrivate *priv;
};
struct _GtkSeparatorClass
{
  GtkWidgetClass parent_class;
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_separator_get_type (void) __attribute__((__const__));
extern
GtkWidget * gtk_separator_new (GtkOrientation orientation);
typedef struct _GtkSeparatorMenuItem GtkSeparatorMenuItem;
typedef struct _GtkSeparatorMenuItemClass GtkSeparatorMenuItemClass;
struct _GtkSeparatorMenuItem
{
  GtkMenuItem menu_item;
};
struct _GtkSeparatorMenuItemClass
{
  GtkMenuItemClass parent_class;
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_separator_menu_item_get_type (void) __attribute__((__const__));
extern
GtkWidget* gtk_separator_menu_item_new (void);
typedef struct _GtkSeparatorToolItem GtkSeparatorToolItem;
typedef struct _GtkSeparatorToolItemClass GtkSeparatorToolItemClass;
typedef struct _GtkSeparatorToolItemPrivate GtkSeparatorToolItemPrivate;
struct _GtkSeparatorToolItem
{
  GtkToolItem parent;
  GtkSeparatorToolItemPrivate *priv;
};
struct _GtkSeparatorToolItemClass
{
  GtkToolItemClass parent_class;
  void (* _gtk_reserved1) (void);
  void (* _gtk_reserved2) (void);
  void (* _gtk_reserved3) (void);
  void (* _gtk_reserved4) (void);
};
extern
GType gtk_separator_tool_item_get_type (void) __attribute__((__const__));
extern
GtkToolItem *gtk_separator_tool_item_new (void);
extern
gboolean gtk_separator_tool_item_get_draw (GtkSeparatorToolItem *item);
extern
void gtk_separator_tool_item_set_draw (GtkSeparatorToolItem *item,
            gboolean draw);
typedef struct _GtkSettingsPrivate GtkSettingsPrivate;
typedef struct _GtkSettingsClass GtkSettingsClass;
typedef struct _GtkSettingsValue GtkSettingsValue;
struct _GtkSettings
{
  GObject parent_instance;
  GtkSettingsPrivate *priv;
};
struct _GtkSettingsClass
{
  GObjectClass parent_class;
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
struct _GtkSettingsValue
{
  gchar *origin;
  GValue value;
};
extern
GType gtk_settings_get_type (void) __attribute__((__const__));
extern
GtkSettings* gtk_settings_get_default (void);
extern
GtkSettings* gtk_settings_get_for_screen (GdkScreen *screen);
extern
void gtk_settings_install_property (GParamSpec *pspec);
extern
void gtk_settings_install_property_parser (GParamSpec *pspec,
                                                      GtkRcPropertyParser parser);
extern
gboolean gtk_rc_property_parse_color (const GParamSpec *pspec,
                                            const GString *gstring,
                                            GValue *property_value);
extern
gboolean gtk_rc_property_parse_enum (const GParamSpec *pspec,
                                            const GString *gstring,
                                            GValue *property_value);
extern
gboolean gtk_rc_property_parse_flags (const GParamSpec *pspec,
                                            const GString *gstring,
                                            GValue *property_value);
extern
gboolean gtk_rc_property_parse_requisition (const GParamSpec *pspec,
                                            const GString *gstring,
                                            GValue *property_value);
extern
gboolean gtk_rc_property_parse_border (const GParamSpec *pspec,
                                            const GString *gstring,
                                            GValue *property_value);
extern
void gtk_settings_set_property_value (GtkSettings *settings,
                                            const gchar *name,
                                            const GtkSettingsValue *svalue);
extern
void gtk_settings_set_string_property (GtkSettings *settings,
                                            const gchar *name,
                                            const gchar *v_string,
                                            const gchar *origin);
extern
void gtk_settings_set_long_property (GtkSettings *settings,
                                            const gchar *name,
                                            glong v_long,
                                            const gchar *origin);
extern
void gtk_settings_set_double_property (GtkSettings *settings,
                                            const gchar *name,
                                            gdouble v_double,
                                            const gchar *origin);
extern
gboolean gtk_show_uri (GdkScreen *screen,
                        const gchar *uri,
                        guint32 timestamp,
                        GError **error);
typedef struct _GtkStack GtkStack;
typedef struct _GtkStackClass GtkStackClass;
typedef enum {
  GTK_STACK_TRANSITION_TYPE_NONE,
  GTK_STACK_TRANSITION_TYPE_CROSSFADE,
  GTK_STACK_TRANSITION_TYPE_SLIDE_RIGHT,
  GTK_STACK_TRANSITION_TYPE_SLIDE_LEFT,
  GTK_STACK_TRANSITION_TYPE_SLIDE_UP,
  GTK_STACK_TRANSITION_TYPE_SLIDE_DOWN,
  GTK_STACK_TRANSITION_TYPE_SLIDE_LEFT_RIGHT,
  GTK_STACK_TRANSITION_TYPE_SLIDE_UP_DOWN,
  GTK_STACK_TRANSITION_TYPE_OVER_UP,
  GTK_STACK_TRANSITION_TYPE_OVER_DOWN,
  GTK_STACK_TRANSITION_TYPE_OVER_LEFT,
  GTK_STACK_TRANSITION_TYPE_OVER_RIGHT,
  GTK_STACK_TRANSITION_TYPE_UNDER_UP,
  GTK_STACK_TRANSITION_TYPE_UNDER_DOWN,
  GTK_STACK_TRANSITION_TYPE_UNDER_LEFT,
  GTK_STACK_TRANSITION_TYPE_UNDER_RIGHT,
  GTK_STACK_TRANSITION_TYPE_OVER_UP_DOWN,
  GTK_STACK_TRANSITION_TYPE_OVER_DOWN_UP,
  GTK_STACK_TRANSITION_TYPE_OVER_LEFT_RIGHT,
  GTK_STACK_TRANSITION_TYPE_OVER_RIGHT_LEFT
} GtkStackTransitionType;
struct _GtkStack {
  GtkContainer parent_instance;
};
struct _GtkStackClass {
  GtkContainerClass parent_class;
};
extern
GType gtk_stack_get_type (void) __attribute__((__const__));
extern
GtkWidget * gtk_stack_new (void);
extern
void gtk_stack_add_named (GtkStack *stack,
                                                          GtkWidget *child,
                                                          const gchar *name);
extern
void gtk_stack_add_titled (GtkStack *stack,
                                                          GtkWidget *child,
                                                          const gchar *name,
                                                          const gchar *title);
extern
GtkWidget * gtk_stack_get_child_by_name (GtkStack *stack,
                                                          const gchar *name);
extern
void gtk_stack_set_visible_child (GtkStack *stack,
                                                          GtkWidget *child);
extern
GtkWidget * gtk_stack_get_visible_child (GtkStack *stack);
extern
void gtk_stack_set_visible_child_name (GtkStack *stack,
                                                          const gchar *name);
extern
const gchar * gtk_stack_get_visible_child_name (GtkStack *stack);
extern
void gtk_stack_set_visible_child_full (GtkStack *stack,
                                                          const gchar *name,
                                                          GtkStackTransitionType transition);
extern
void gtk_stack_set_homogeneous (GtkStack *stack,
                                                          gboolean homogeneous);
extern
gboolean gtk_stack_get_homogeneous (GtkStack *stack);
extern
void gtk_stack_set_hhomogeneous (GtkStack *stack,
                                                          gboolean hhomogeneous);
extern
gboolean gtk_stack_get_hhomogeneous (GtkStack *stack);
extern
void gtk_stack_set_vhomogeneous (GtkStack *stack,
                                                          gboolean vhomogeneous);
extern
gboolean gtk_stack_get_vhomogeneous (GtkStack *stack);
extern
void gtk_stack_set_transition_duration (GtkStack *stack,
                                                          guint duration);
extern
guint gtk_stack_get_transition_duration (GtkStack *stack);
extern
void gtk_stack_set_transition_type (GtkStack *stack,
                                                          GtkStackTransitionType transition);
extern
GtkStackTransitionType gtk_stack_get_transition_type (GtkStack *stack);
extern
gboolean gtk_stack_get_transition_running (GtkStack *stack);
extern
void gtk_stack_set_interpolate_size (GtkStack *stack,
                                                          gboolean interpolate_size);
extern
gboolean gtk_stack_get_interpolate_size (GtkStack *stack);
typedef struct _GtkStackSidebar GtkStackSidebar;
typedef struct _GtkStackSidebarPrivate GtkStackSidebarPrivate;
typedef struct _GtkStackSidebarClass GtkStackSidebarClass;
struct _GtkStackSidebar
{
  GtkBin parent;
};
struct _GtkStackSidebarClass
{
  GtkBinClass parent_class;
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_stack_sidebar_get_type (void) __attribute__((__const__));
extern
GtkWidget * gtk_stack_sidebar_new (void);
extern
void gtk_stack_sidebar_set_stack (GtkStackSidebar *sidebar,
                                         GtkStack *stack);
extern
GtkStack * gtk_stack_sidebar_get_stack (GtkStackSidebar *sidebar);
typedef struct _GtkRequestedSize GtkRequestedSize;
struct _GtkRequestedSize
{
  gpointer data;
  gint minimum_size;
  gint natural_size;
};
extern
gint gtk_distribute_natural_allocation (gint extra_space,
                                                                     guint n_requested_sizes,
                                                                     GtkRequestedSize *sizes);
typedef enum
{
  GTK_UPDATE_ALWAYS,
  GTK_UPDATE_IF_VALID
} GtkSpinButtonUpdatePolicy;
typedef enum
{
  GTK_SPIN_STEP_FORWARD,
  GTK_SPIN_STEP_BACKWARD,
  GTK_SPIN_PAGE_FORWARD,
  GTK_SPIN_PAGE_BACKWARD,
  GTK_SPIN_HOME,
  GTK_SPIN_END,
  GTK_SPIN_USER_DEFINED
} GtkSpinType;
typedef struct _GtkSpinButton GtkSpinButton;
typedef struct _GtkSpinButtonPrivate GtkSpinButtonPrivate;
typedef struct _GtkSpinButtonClass GtkSpinButtonClass;
struct _GtkSpinButton
{
  GtkEntry entry;
  GtkSpinButtonPrivate *priv;
};
struct _GtkSpinButtonClass
{
  GtkEntryClass parent_class;
  gint (*input) (GtkSpinButton *spin_button,
    gdouble *new_value);
  gint (*output) (GtkSpinButton *spin_button);
  void (*value_changed) (GtkSpinButton *spin_button);
  void (*change_value) (GtkSpinButton *spin_button,
   GtkScrollType scroll);
  void (*wrapped) (GtkSpinButton *spin_button);
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_spin_button_get_type (void) __attribute__((__const__));
extern
void gtk_spin_button_configure (GtkSpinButton *spin_button,
          GtkAdjustment *adjustment,
          gdouble climb_rate,
          guint digits);
extern
GtkWidget* gtk_spin_button_new (GtkAdjustment *adjustment,
          gdouble climb_rate,
          guint digits);
extern
GtkWidget* gtk_spin_button_new_with_range (gdouble min,
          gdouble max,
          gdouble step);
extern
void gtk_spin_button_set_adjustment (GtkSpinButton *spin_button,
          GtkAdjustment *adjustment);
extern
GtkAdjustment* gtk_spin_button_get_adjustment (GtkSpinButton *spin_button);
extern
void gtk_spin_button_set_digits (GtkSpinButton *spin_button,
          guint digits);
extern
guint gtk_spin_button_get_digits (GtkSpinButton *spin_button);
extern
void gtk_spin_button_set_increments (GtkSpinButton *spin_button,
          gdouble step,
          gdouble page);
extern
void gtk_spin_button_get_increments (GtkSpinButton *spin_button,
          gdouble *step,
          gdouble *page);
extern
void gtk_spin_button_set_range (GtkSpinButton *spin_button,
          gdouble min,
          gdouble max);
extern
void gtk_spin_button_get_range (GtkSpinButton *spin_button,
          gdouble *min,
          gdouble *max);
extern
gdouble gtk_spin_button_get_value (GtkSpinButton *spin_button);
extern
gint gtk_spin_button_get_value_as_int (GtkSpinButton *spin_button);
extern
void gtk_spin_button_set_value (GtkSpinButton *spin_button,
          gdouble value);
extern
void gtk_spin_button_set_update_policy (GtkSpinButton *spin_button,
          GtkSpinButtonUpdatePolicy policy);
extern
GtkSpinButtonUpdatePolicy gtk_spin_button_get_update_policy (GtkSpinButton *spin_button);
extern
void gtk_spin_button_set_numeric (GtkSpinButton *spin_button,
          gboolean numeric);
extern
gboolean gtk_spin_button_get_numeric (GtkSpinButton *spin_button);
extern
void gtk_spin_button_spin (GtkSpinButton *spin_button,
          GtkSpinType direction,
          gdouble increment);
extern
void gtk_spin_button_set_wrap (GtkSpinButton *spin_button,
          gboolean wrap);
extern
gboolean gtk_spin_button_get_wrap (GtkSpinButton *spin_button);
extern
void gtk_spin_button_set_snap_to_ticks (GtkSpinButton *spin_button,
          gboolean snap_to_ticks);
extern
gboolean gtk_spin_button_get_snap_to_ticks (GtkSpinButton *spin_button);
extern
void gtk_spin_button_update (GtkSpinButton *spin_button);
void _gtk_spin_button_get_panels (GtkSpinButton *spin_button,
                                                    GdkWindow **down_panel,
                                                    GdkWindow **up_panel);
typedef struct _GtkSpinner GtkSpinner;
typedef struct _GtkSpinnerClass GtkSpinnerClass;
typedef struct _GtkSpinnerPrivate GtkSpinnerPrivate;
struct _GtkSpinner
{
  GtkWidget parent;
  GtkSpinnerPrivate *priv;
};
struct _GtkSpinnerClass
{
  GtkWidgetClass parent_class;
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_spinner_get_type (void) __attribute__((__const__));
extern
GtkWidget *gtk_spinner_new (void);
extern
void gtk_spinner_start (GtkSpinner *spinner);
extern
void gtk_spinner_stop (GtkSpinner *spinner);
typedef struct _GtkStackSwitcher GtkStackSwitcher;
typedef struct _GtkStackSwitcherClass GtkStackSwitcherClass;
struct _GtkStackSwitcher
{
  GtkBox widget;
};
struct _GtkStackSwitcherClass
{
  GtkBoxClass parent_class;
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_stack_switcher_get_type (void) __attribute__((__const__));
extern
GtkWidget * gtk_stack_switcher_new (void);
extern
void gtk_stack_switcher_set_stack (GtkStackSwitcher *switcher,
                                                   GtkStack *stack);
extern
GtkStack * gtk_stack_switcher_get_stack (GtkStackSwitcher *switcher);
typedef struct _GtkStatusbar GtkStatusbar;
typedef struct _GtkStatusbarPrivate GtkStatusbarPrivate;
typedef struct _GtkStatusbarClass GtkStatusbarClass;
struct _GtkStatusbar
{
  GtkBox parent_widget;
  GtkStatusbarPrivate *priv;
};
struct _GtkStatusbarClass
{
  GtkBoxClass parent_class;
  gpointer reserved;
  void (*text_pushed) (GtkStatusbar *statusbar,
    guint context_id,
    const gchar *text);
  void (*text_popped) (GtkStatusbar *statusbar,
    guint context_id,
    const gchar *text);
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_statusbar_get_type (void) __attribute__((__const__));
extern
GtkWidget* gtk_statusbar_new (void);
extern
guint gtk_statusbar_get_context_id (GtkStatusbar *statusbar,
      const gchar *context_description);
extern
guint gtk_statusbar_push (GtkStatusbar *statusbar,
      guint context_id,
      const gchar *text);
extern
void gtk_statusbar_pop (GtkStatusbar *statusbar,
      guint context_id);
extern
void gtk_statusbar_remove (GtkStatusbar *statusbar,
      guint context_id,
      guint message_id);
extern
void gtk_statusbar_remove_all (GtkStatusbar *statusbar,
      guint context_id);
extern
GtkWidget* gtk_statusbar_get_message_area (GtkStatusbar *statusbar);
typedef struct _GtkSwitch GtkSwitch;
typedef struct _GtkSwitchPrivate GtkSwitchPrivate;
typedef struct _GtkSwitchClass GtkSwitchClass;
struct _GtkSwitch
{
  GtkWidget parent_instance;
  GtkSwitchPrivate *priv;
};
struct _GtkSwitchClass
{
  GtkWidgetClass parent_class;
  void (* activate) (GtkSwitch *sw);
  gboolean (* state_set) (GtkSwitch *sw, gboolean state);
  void (* _switch_padding_1) (void);
  void (* _switch_padding_2) (void);
  void (* _switch_padding_3) (void);
  void (* _switch_padding_4) (void);
  void (* _switch_padding_5) (void);
};
extern
GType gtk_switch_get_type (void) __attribute__((__const__));
extern
GtkWidget * gtk_switch_new (void);
extern
void gtk_switch_set_active (GtkSwitch *sw,
                                         gboolean is_active);
extern
gboolean gtk_switch_get_active (GtkSwitch *sw);
extern
void gtk_switch_set_state (GtkSwitch *sw,
                                        gboolean state);
extern
gboolean gtk_switch_get_state (GtkSwitch *sw);
typedef void (* GtkTextTagTableForeach) (GtkTextTag *tag, gpointer data);
typedef struct _GtkTextTagTablePrivate GtkTextTagTablePrivate;
typedef struct _GtkTextTagTableClass GtkTextTagTableClass;
struct _GtkTextTagTable
{
  GObject parent_instance;
  GtkTextTagTablePrivate *priv;
};
struct _GtkTextTagTableClass
{
  GObjectClass parent_class;
  void (* tag_changed) (GtkTextTagTable *table, GtkTextTag *tag, gboolean size_changed);
  void (* tag_added) (GtkTextTagTable *table, GtkTextTag *tag);
  void (* tag_removed) (GtkTextTagTable *table, GtkTextTag *tag);
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_text_tag_table_get_type (void) __attribute__((__const__));
extern
GtkTextTagTable *gtk_text_tag_table_new (void);
extern
gboolean gtk_text_tag_table_add (GtkTextTagTable *table,
                                              GtkTextTag *tag);
extern
void gtk_text_tag_table_remove (GtkTextTagTable *table,
                                              GtkTextTag *tag);
extern
GtkTextTag *gtk_text_tag_table_lookup (GtkTextTagTable *table,
                                              const gchar *name);
extern
void gtk_text_tag_table_foreach (GtkTextTagTable *table,
                                              GtkTextTagTableForeach func,
                                              gpointer data);
extern
gint gtk_text_tag_table_get_size (GtkTextTagTable *table);
void _gtk_text_tag_table_add_buffer (GtkTextTagTable *table,
                                        gpointer buffer);
void _gtk_text_tag_table_remove_buffer (GtkTextTagTable *table,
                                        gpointer buffer);
typedef struct _GtkTextMark GtkTextMark;
typedef struct _GtkTextMarkClass GtkTextMarkClass;
struct _GtkTextMark
{
  GObject parent_instance;
  gpointer segment;
};
struct _GtkTextMarkClass
{
  GObjectClass parent_class;
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_text_mark_get_type (void) __attribute__((__const__));
extern
GtkTextMark *gtk_text_mark_new (const gchar *name,
                                                      gboolean left_gravity);
extern
void gtk_text_mark_set_visible (GtkTextMark *mark,
                                                      gboolean setting);
extern
gboolean gtk_text_mark_get_visible (GtkTextMark *mark);
extern
const gchar * gtk_text_mark_get_name (GtkTextMark *mark);
extern
gboolean gtk_text_mark_get_deleted (GtkTextMark *mark);
extern
GtkTextBuffer* gtk_text_mark_get_buffer (GtkTextMark *mark);
extern
gboolean gtk_text_mark_get_left_gravity (GtkTextMark *mark);
typedef enum
{
  GTK_TEXT_BUFFER_TARGET_INFO_BUFFER_CONTENTS = - 1,
  GTK_TEXT_BUFFER_TARGET_INFO_RICH_TEXT = - 2,
  GTK_TEXT_BUFFER_TARGET_INFO_TEXT = - 3
} GtkTextBufferTargetInfo;
typedef struct _GtkTextBTree GtkTextBTree;
typedef struct _GtkTextBufferPrivate GtkTextBufferPrivate;
typedef struct _GtkTextBufferClass GtkTextBufferClass;
struct _GtkTextBuffer
{
  GObject parent_instance;
  GtkTextBufferPrivate *priv;
};
struct _GtkTextBufferClass
{
  GObjectClass parent_class;
  void (* insert_text) (GtkTextBuffer *buffer,
                                   GtkTextIter *pos,
                                   const gchar *new_text,
                                   gint new_text_length);
  void (* insert_pixbuf) (GtkTextBuffer *buffer,
                                   GtkTextIter *iter,
                                   GdkPixbuf *pixbuf);
  void (* insert_child_anchor) (GtkTextBuffer *buffer,
                                   GtkTextIter *iter,
                                   GtkTextChildAnchor *anchor);
  void (* delete_range) (GtkTextBuffer *buffer,
                                   GtkTextIter *start,
                                   GtkTextIter *end);
  void (* changed) (GtkTextBuffer *buffer);
  void (* modified_changed) (GtkTextBuffer *buffer);
  void (* mark_set) (GtkTextBuffer *buffer,
                                   const GtkTextIter *location,
                                   GtkTextMark *mark);
  void (* mark_deleted) (GtkTextBuffer *buffer,
                                   GtkTextMark *mark);
  void (* apply_tag) (GtkTextBuffer *buffer,
                                   GtkTextTag *tag,
                                   const GtkTextIter *start,
                                   const GtkTextIter *end);
  void (* remove_tag) (GtkTextBuffer *buffer,
                                   GtkTextTag *tag,
                                   const GtkTextIter *start,
                                   const GtkTextIter *end);
  void (* begin_user_action) (GtkTextBuffer *buffer);
  void (* end_user_action) (GtkTextBuffer *buffer);
  void (* paste_done) (GtkTextBuffer *buffer,
                                   GtkClipboard *clipboard);
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_text_buffer_get_type (void) __attribute__((__const__));
extern
GtkTextBuffer *gtk_text_buffer_new (GtkTextTagTable *table);
extern
gint gtk_text_buffer_get_line_count (GtkTextBuffer *buffer);
extern
gint gtk_text_buffer_get_char_count (GtkTextBuffer *buffer);
extern
GtkTextTagTable* gtk_text_buffer_get_tag_table (GtkTextBuffer *buffer);
extern
void gtk_text_buffer_set_text (GtkTextBuffer *buffer,
                                        const gchar *text,
                                        gint len);
extern
void gtk_text_buffer_insert (GtkTextBuffer *buffer,
                                        GtkTextIter *iter,
                                        const gchar *text,
                                        gint len);
extern
void gtk_text_buffer_insert_at_cursor (GtkTextBuffer *buffer,
                                        const gchar *text,
                                        gint len);
extern
gboolean gtk_text_buffer_insert_interactive (GtkTextBuffer *buffer,
                                                       GtkTextIter *iter,
                                                       const gchar *text,
                                                       gint len,
                                                       gboolean default_editable);
extern
gboolean gtk_text_buffer_insert_interactive_at_cursor (GtkTextBuffer *buffer,
                                                       const gchar *text,
                                                       gint len,
                                                       gboolean default_editable);
extern
void gtk_text_buffer_insert_range (GtkTextBuffer *buffer,
                                                   GtkTextIter *iter,
                                                   const GtkTextIter *start,
                                                   const GtkTextIter *end);
extern
gboolean gtk_text_buffer_insert_range_interactive (GtkTextBuffer *buffer,
                                                   GtkTextIter *iter,
                                                   const GtkTextIter *start,
                                                   const GtkTextIter *end,
                                                   gboolean default_editable);
extern
void gtk_text_buffer_insert_with_tags (GtkTextBuffer *buffer,
                                                   GtkTextIter *iter,
                                                   const gchar *text,
                                                   gint len,
                                                   GtkTextTag *first_tag,
                                                   ...) __attribute__((__sentinel__));
extern
void gtk_text_buffer_insert_with_tags_by_name (GtkTextBuffer *buffer,
                                                   GtkTextIter *iter,
                                                   const gchar *text,
                                                   gint len,
                                                   const gchar *first_tag_name,
                                                   ...) __attribute__((__sentinel__));
extern
void gtk_text_buffer_insert_markup (GtkTextBuffer *buffer,
                                                   GtkTextIter *iter,
                                                   const gchar *markup,
                                                   gint len);
extern
void gtk_text_buffer_delete (GtkTextBuffer *buffer,
          GtkTextIter *start,
          GtkTextIter *end);
extern
gboolean gtk_text_buffer_delete_interactive (GtkTextBuffer *buffer,
          GtkTextIter *start_iter,
          GtkTextIter *end_iter,
          gboolean default_editable);
extern
gboolean gtk_text_buffer_backspace (GtkTextBuffer *buffer,
          GtkTextIter *iter,
          gboolean interactive,
          gboolean default_editable);
extern
gchar *gtk_text_buffer_get_text (GtkTextBuffer *buffer,
                                                     const GtkTextIter *start,
                                                     const GtkTextIter *end,
                                                     gboolean include_hidden_chars);
extern
gchar *gtk_text_buffer_get_slice (GtkTextBuffer *buffer,
                                                     const GtkTextIter *start,
                                                     const GtkTextIter *end,
                                                     gboolean include_hidden_chars);
extern
void gtk_text_buffer_insert_pixbuf (GtkTextBuffer *buffer,
                                            GtkTextIter *iter,
                                            GdkPixbuf *pixbuf);
extern
void gtk_text_buffer_insert_child_anchor (GtkTextBuffer *buffer,
                                                        GtkTextIter *iter,
                                                        GtkTextChildAnchor *anchor);
extern
GtkTextChildAnchor *gtk_text_buffer_create_child_anchor (GtkTextBuffer *buffer,
                                                         GtkTextIter *iter);
extern
void gtk_text_buffer_add_mark (GtkTextBuffer *buffer,
                                            GtkTextMark *mark,
                                            const GtkTextIter *where);
extern
GtkTextMark *gtk_text_buffer_create_mark (GtkTextBuffer *buffer,
                                            const gchar *mark_name,
                                            const GtkTextIter *where,
                                            gboolean left_gravity);
extern
void gtk_text_buffer_move_mark (GtkTextBuffer *buffer,
                                            GtkTextMark *mark,
                                            const GtkTextIter *where);
extern
void gtk_text_buffer_delete_mark (GtkTextBuffer *buffer,
                                            GtkTextMark *mark);
extern
GtkTextMark* gtk_text_buffer_get_mark (GtkTextBuffer *buffer,
                                            const gchar *name);
extern
void gtk_text_buffer_move_mark_by_name (GtkTextBuffer *buffer,
                                          const gchar *name,
                                          const GtkTextIter *where);
extern
void gtk_text_buffer_delete_mark_by_name (GtkTextBuffer *buffer,
                                          const gchar *name);
extern
GtkTextMark* gtk_text_buffer_get_insert (GtkTextBuffer *buffer);
extern
GtkTextMark* gtk_text_buffer_get_selection_bound (GtkTextBuffer *buffer);
extern
void gtk_text_buffer_place_cursor (GtkTextBuffer *buffer,
                                   const GtkTextIter *where);
extern
void gtk_text_buffer_select_range (GtkTextBuffer *buffer,
                                   const GtkTextIter *ins,
       const GtkTextIter *bound);
extern
void gtk_text_buffer_apply_tag (GtkTextBuffer *buffer,
                                            GtkTextTag *tag,
                                            const GtkTextIter *start,
                                            const GtkTextIter *end);
extern
void gtk_text_buffer_remove_tag (GtkTextBuffer *buffer,
                                            GtkTextTag *tag,
                                            const GtkTextIter *start,
                                            const GtkTextIter *end);
extern
void gtk_text_buffer_apply_tag_by_name (GtkTextBuffer *buffer,
                                            const gchar *name,
                                            const GtkTextIter *start,
                                            const GtkTextIter *end);
extern
void gtk_text_buffer_remove_tag_by_name (GtkTextBuffer *buffer,
                                            const gchar *name,
                                            const GtkTextIter *start,
                                            const GtkTextIter *end);
extern
void gtk_text_buffer_remove_all_tags (GtkTextBuffer *buffer,
                                            const GtkTextIter *start,
                                            const GtkTextIter *end);
extern
GtkTextTag *gtk_text_buffer_create_tag (GtkTextBuffer *buffer,
                                           const gchar *tag_name,
                                           const gchar *first_property_name,
                                           ...);
extern
void gtk_text_buffer_get_iter_at_line_offset (GtkTextBuffer *buffer,
                                              GtkTextIter *iter,
                                              gint line_number,
                                              gint char_offset);
extern
void gtk_text_buffer_get_iter_at_line_index (GtkTextBuffer *buffer,
                                              GtkTextIter *iter,
                                              gint line_number,
                                              gint byte_index);
extern
void gtk_text_buffer_get_iter_at_offset (GtkTextBuffer *buffer,
                                              GtkTextIter *iter,
                                              gint char_offset);
extern
void gtk_text_buffer_get_iter_at_line (GtkTextBuffer *buffer,
                                              GtkTextIter *iter,
                                              gint line_number);
extern
void gtk_text_buffer_get_start_iter (GtkTextBuffer *buffer,
                                              GtkTextIter *iter);
extern
void gtk_text_buffer_get_end_iter (GtkTextBuffer *buffer,
                                              GtkTextIter *iter);
extern
void gtk_text_buffer_get_bounds (GtkTextBuffer *buffer,
                                              GtkTextIter *start,
                                              GtkTextIter *end);
extern
void gtk_text_buffer_get_iter_at_mark (GtkTextBuffer *buffer,
                                              GtkTextIter *iter,
                                              GtkTextMark *mark);
extern
void gtk_text_buffer_get_iter_at_child_anchor (GtkTextBuffer *buffer,
                                               GtkTextIter *iter,
                                               GtkTextChildAnchor *anchor);
extern
gboolean gtk_text_buffer_get_modified (GtkTextBuffer *buffer);
extern
void gtk_text_buffer_set_modified (GtkTextBuffer *buffer,
                                                         gboolean setting);
extern
gboolean gtk_text_buffer_get_has_selection (GtkTextBuffer *buffer);
extern
void gtk_text_buffer_add_selection_clipboard (GtkTextBuffer *buffer,
       GtkClipboard *clipboard);
extern
void gtk_text_buffer_remove_selection_clipboard (GtkTextBuffer *buffer,
       GtkClipboard *clipboard);
extern
void gtk_text_buffer_cut_clipboard (GtkTextBuffer *buffer,
        GtkClipboard *clipboard,
                                                         gboolean default_editable);
extern
void gtk_text_buffer_copy_clipboard (GtkTextBuffer *buffer,
        GtkClipboard *clipboard);
extern
void gtk_text_buffer_paste_clipboard (GtkTextBuffer *buffer,
        GtkClipboard *clipboard,
        GtkTextIter *override_location,
                                                         gboolean default_editable);
extern
gboolean gtk_text_buffer_get_selection_bounds (GtkTextBuffer *buffer,
                                                         GtkTextIter *start,
                                                         GtkTextIter *end);
extern
gboolean gtk_text_buffer_delete_selection (GtkTextBuffer *buffer,
                                                         gboolean interactive,
                                                         gboolean default_editable);
extern
void gtk_text_buffer_begin_user_action (GtkTextBuffer *buffer);
extern
void gtk_text_buffer_end_user_action (GtkTextBuffer *buffer);
extern
GtkTargetList * gtk_text_buffer_get_copy_target_list (GtkTextBuffer *buffer);
extern
GtkTargetList * gtk_text_buffer_get_paste_target_list (GtkTextBuffer *buffer);
void _gtk_text_buffer_spew (GtkTextBuffer *buffer);
GtkTextBTree* _gtk_text_buffer_get_btree (GtkTextBuffer *buffer);
const PangoLogAttr* _gtk_text_buffer_get_line_log_attrs (GtkTextBuffer *buffer,
                                                         const GtkTextIter *anywhere_in_line,
                                                         gint *char_len);
void _gtk_text_buffer_notify_will_remove_tag (GtkTextBuffer *buffer,
                                              GtkTextTag *tag);
void _gtk_text_buffer_get_text_before (GtkTextBuffer *buffer,
                                       AtkTextBoundary boundary_type,
                                       GtkTextIter *position,
                                       GtkTextIter *start,
                                       GtkTextIter *end);
void _gtk_text_buffer_get_text_at (GtkTextBuffer *buffer,
                                       AtkTextBoundary boundary_type,
                                       GtkTextIter *position,
                                       GtkTextIter *start,
                                       GtkTextIter *end);
void _gtk_text_buffer_get_text_after (GtkTextBuffer *buffer,
                                       AtkTextBoundary boundary_type,
                                       GtkTextIter *position,
                                       GtkTextIter *start,
                                       GtkTextIter *end);
typedef guint8 * (* GtkTextBufferSerializeFunc) (GtkTextBuffer *register_buffer,
                                                   GtkTextBuffer *content_buffer,
                                                   const GtkTextIter *start,
                                                   const GtkTextIter *end,
                                                   gsize *length,
                                                   gpointer user_data);
typedef gboolean (* GtkTextBufferDeserializeFunc) (GtkTextBuffer *register_buffer,
                                                   GtkTextBuffer *content_buffer,
                                                   GtkTextIter *iter,
                                                   const guint8 *data,
                                                   gsize length,
                                                   gboolean create_tags,
                                                   gpointer user_data,
                                                   GError **error);
extern
GdkAtom gtk_text_buffer_register_serialize_format (GtkTextBuffer *buffer,
                                                       const gchar *mime_type,
                                                       GtkTextBufferSerializeFunc function,
                                                       gpointer user_data,
                                                       GDestroyNotify user_data_destroy);
extern
GdkAtom gtk_text_buffer_register_serialize_tagset (GtkTextBuffer *buffer,
                                                       const gchar *tagset_name);
extern
GdkAtom gtk_text_buffer_register_deserialize_format (GtkTextBuffer *buffer,
                                                       const gchar *mime_type,
                                                       GtkTextBufferDeserializeFunc function,
                                                       gpointer user_data,
                                                       GDestroyNotify user_data_destroy);
extern
GdkAtom gtk_text_buffer_register_deserialize_tagset (GtkTextBuffer *buffer,
                                                       const gchar *tagset_name);
extern
void gtk_text_buffer_unregister_serialize_format (GtkTextBuffer *buffer,
                                                       GdkAtom format);
extern
void gtk_text_buffer_unregister_deserialize_format (GtkTextBuffer *buffer,
                                                       GdkAtom format);
extern
void gtk_text_buffer_deserialize_set_can_create_tags (GtkTextBuffer *buffer,
                                                          GdkAtom format,
                                                          gboolean can_create_tags);
extern
gboolean gtk_text_buffer_deserialize_get_can_create_tags (GtkTextBuffer *buffer,
                                                          GdkAtom format);
extern
GdkAtom * gtk_text_buffer_get_serialize_formats (GtkTextBuffer *buffer,
                                                       gint *n_formats);
extern
GdkAtom * gtk_text_buffer_get_deserialize_formats (GtkTextBuffer *buffer,
                                                       gint *n_formats);
extern
guint8 * gtk_text_buffer_serialize (GtkTextBuffer *register_buffer,
                                                       GtkTextBuffer *content_buffer,
                                                       GdkAtom format,
                                                       const GtkTextIter *start,
                                                       const GtkTextIter *end,
                                                       gsize *length);
extern
gboolean gtk_text_buffer_deserialize (GtkTextBuffer *register_buffer,
                                                       GtkTextBuffer *content_buffer,
                                                       GdkAtom format,
                                                       GtkTextIter *iter,
                                                       const guint8 *data,
                                                       gsize length,
                                                       GError **error);
typedef enum
{
  GTK_TEXT_WINDOW_PRIVATE,
  GTK_TEXT_WINDOW_WIDGET,
  GTK_TEXT_WINDOW_TEXT,
  GTK_TEXT_WINDOW_LEFT,
  GTK_TEXT_WINDOW_RIGHT,
  GTK_TEXT_WINDOW_TOP,
  GTK_TEXT_WINDOW_BOTTOM
} GtkTextWindowType;
typedef enum
{
  GTK_TEXT_VIEW_LAYER_BELOW,
  GTK_TEXT_VIEW_LAYER_ABOVE
} GtkTextViewLayer;
typedef enum
{
  GTK_TEXT_EXTEND_SELECTION_WORD,
  GTK_TEXT_EXTEND_SELECTION_LINE
} GtkTextExtendSelection;
typedef struct _GtkTextView GtkTextView;
typedef struct _GtkTextViewPrivate GtkTextViewPrivate;
typedef struct _GtkTextViewClass GtkTextViewClass;
struct _GtkTextView
{
  GtkContainer parent_instance;
  GtkTextViewPrivate *priv;
};
struct _GtkTextViewClass
{
  GtkContainerClass parent_class;
  void (* populate_popup) (GtkTextView *text_view,
                                  GtkWidget *popup);
  void (* move_cursor) (GtkTextView *text_view,
                                  GtkMovementStep step,
                                  gint count,
                                  gboolean extend_selection);
  void (* set_anchor) (GtkTextView *text_view);
  void (* insert_at_cursor) (GtkTextView *text_view,
                                  const gchar *str);
  void (* delete_from_cursor) (GtkTextView *text_view,
                                  GtkDeleteType type,
                                  gint count);
  void (* backspace) (GtkTextView *text_view);
  void (* cut_clipboard) (GtkTextView *text_view);
  void (* copy_clipboard) (GtkTextView *text_view);
  void (* paste_clipboard) (GtkTextView *text_view);
  void (* toggle_overwrite) (GtkTextView *text_view);
  GtkTextBuffer * (* create_buffer) (GtkTextView *text_view);
  void (* draw_layer) (GtkTextView *text_view,
             GtkTextViewLayer layer,
             cairo_t *cr);
  gboolean (* extend_selection) (GtkTextView *text_view,
                                  GtkTextExtendSelection granularity,
                                  const GtkTextIter *location,
                                  GtkTextIter *start,
                                  GtkTextIter *end);
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
  void (*_gtk_reserved5) (void);
};
extern
GType gtk_text_view_get_type (void) __attribute__((__const__));
extern
GtkWidget * gtk_text_view_new (void);
extern
GtkWidget * gtk_text_view_new_with_buffer (GtkTextBuffer *buffer);
extern
void gtk_text_view_set_buffer (GtkTextView *text_view,
                                                    GtkTextBuffer *buffer);
extern
GtkTextBuffer *gtk_text_view_get_buffer (GtkTextView *text_view);
extern
gboolean gtk_text_view_scroll_to_iter (GtkTextView *text_view,
                                                    GtkTextIter *iter,
                                                    gdouble within_margin,
                                                    gboolean use_align,
                                                    gdouble xalign,
                                                    gdouble yalign);
extern
void gtk_text_view_scroll_to_mark (GtkTextView *text_view,
                                                    GtkTextMark *mark,
                                                    gdouble within_margin,
                                                    gboolean use_align,
                                                    gdouble xalign,
                                                    gdouble yalign);
extern
void gtk_text_view_scroll_mark_onscreen (GtkTextView *text_view,
                                                    GtkTextMark *mark);
extern
gboolean gtk_text_view_move_mark_onscreen (GtkTextView *text_view,
                                                    GtkTextMark *mark);
extern
gboolean gtk_text_view_place_cursor_onscreen (GtkTextView *text_view);
extern
void gtk_text_view_get_visible_rect (GtkTextView *text_view,
                                                    GdkRectangle *visible_rect);
extern
void gtk_text_view_set_cursor_visible (GtkTextView *text_view,
                                                    gboolean setting);
extern
gboolean gtk_text_view_get_cursor_visible (GtkTextView *text_view);
extern
void gtk_text_view_get_cursor_locations (GtkTextView *text_view,
                                                    const GtkTextIter *iter,
                                                    GdkRectangle *strong,
                                                    GdkRectangle *weak);
extern
void gtk_text_view_get_iter_location (GtkTextView *text_view,
                                                    const GtkTextIter *iter,
                                                    GdkRectangle *location);
extern
void gtk_text_view_get_iter_at_location (GtkTextView *text_view,
                                                    GtkTextIter *iter,
                                                    gint x,
                                                    gint y);
extern
void gtk_text_view_get_iter_at_position (GtkTextView *text_view,
                                                    GtkTextIter *iter,
          gint *trailing,
                                                    gint x,
                                                    gint y);
extern
void gtk_text_view_get_line_yrange (GtkTextView *text_view,
                                                    const GtkTextIter *iter,
                                                    gint *y,
                                                    gint *height);
extern
void gtk_text_view_get_line_at_y (GtkTextView *text_view,
                                                    GtkTextIter *target_iter,
                                                    gint y,
                                                    gint *line_top);
extern
void gtk_text_view_buffer_to_window_coords (GtkTextView *text_view,
                                            GtkTextWindowType win,
                                            gint buffer_x,
                                            gint buffer_y,
                                            gint *window_x,
                                            gint *window_y);
extern
void gtk_text_view_window_to_buffer_coords (GtkTextView *text_view,
                                            GtkTextWindowType win,
                                            gint window_x,
                                            gint window_y,
                                            gint *buffer_x,
                                            gint *buffer_y);
extern
GtkAdjustment* gtk_text_view_get_hadjustment (GtkTextView *text_view);
extern
GtkAdjustment* gtk_text_view_get_vadjustment (GtkTextView *text_view);
extern
GdkWindow* gtk_text_view_get_window (GtkTextView *text_view,
                                                 GtkTextWindowType win);
extern
GtkTextWindowType gtk_text_view_get_window_type (GtkTextView *text_view,
                                                 GdkWindow *window);
extern
void gtk_text_view_set_border_window_size (GtkTextView *text_view,
                                           GtkTextWindowType type,
                                           gint size);
extern
gint gtk_text_view_get_border_window_size (GtkTextView *text_view,
        GtkTextWindowType type);
extern
gboolean gtk_text_view_forward_display_line (GtkTextView *text_view,
                                                       GtkTextIter *iter);
extern
gboolean gtk_text_view_backward_display_line (GtkTextView *text_view,
                                                       GtkTextIter *iter);
extern
gboolean gtk_text_view_forward_display_line_end (GtkTextView *text_view,
                                                       GtkTextIter *iter);
extern
gboolean gtk_text_view_backward_display_line_start (GtkTextView *text_view,
                                                       GtkTextIter *iter);
extern
gboolean gtk_text_view_starts_display_line (GtkTextView *text_view,
                                                       const GtkTextIter *iter);
extern
gboolean gtk_text_view_move_visually (GtkTextView *text_view,
                                                       GtkTextIter *iter,
                                                       gint count);
extern
gboolean gtk_text_view_im_context_filter_keypress (GtkTextView *text_view,
                                                                 GdkEventKey *event);
extern
void gtk_text_view_reset_im_context (GtkTextView *text_view);
extern
void gtk_text_view_add_child_at_anchor (GtkTextView *text_view,
                                        GtkWidget *child,
                                        GtkTextChildAnchor *anchor);
extern
void gtk_text_view_add_child_in_window (GtkTextView *text_view,
                                        GtkWidget *child,
                                        GtkTextWindowType which_window,
                                        gint xpos,
                                        gint ypos);
extern
void gtk_text_view_move_child (GtkTextView *text_view,
                                        GtkWidget *child,
                                        gint xpos,
                                        gint ypos);
extern
void gtk_text_view_set_wrap_mode (GtkTextView *text_view,
                                                       GtkWrapMode wrap_mode);
extern
GtkWrapMode gtk_text_view_get_wrap_mode (GtkTextView *text_view);
extern
void gtk_text_view_set_editable (GtkTextView *text_view,
                                                       gboolean setting);
extern
gboolean gtk_text_view_get_editable (GtkTextView *text_view);
extern
void gtk_text_view_set_overwrite (GtkTextView *text_view,
             gboolean overwrite);
extern
gboolean gtk_text_view_get_overwrite (GtkTextView *text_view);
extern
void gtk_text_view_set_accepts_tab (GtkTextView *text_view,
             gboolean accepts_tab);
extern
gboolean gtk_text_view_get_accepts_tab (GtkTextView *text_view);
extern
void gtk_text_view_set_pixels_above_lines (GtkTextView *text_view,
                                                       gint pixels_above_lines);
extern
gint gtk_text_view_get_pixels_above_lines (GtkTextView *text_view);
extern
void gtk_text_view_set_pixels_below_lines (GtkTextView *text_view,
                                                       gint pixels_below_lines);
extern
gint gtk_text_view_get_pixels_below_lines (GtkTextView *text_view);
extern
void gtk_text_view_set_pixels_inside_wrap (GtkTextView *text_view,
                                                       gint pixels_inside_wrap);
extern
gint gtk_text_view_get_pixels_inside_wrap (GtkTextView *text_view);
extern
void gtk_text_view_set_justification (GtkTextView *text_view,
                                                       GtkJustification justification);
extern
GtkJustification gtk_text_view_get_justification (GtkTextView *text_view);
extern
void gtk_text_view_set_left_margin (GtkTextView *text_view,
                                                       gint left_margin);
extern
gint gtk_text_view_get_left_margin (GtkTextView *text_view);
extern
void gtk_text_view_set_right_margin (GtkTextView *text_view,
                                                       gint right_margin);
extern
gint gtk_text_view_get_right_margin (GtkTextView *text_view);
extern
void gtk_text_view_set_top_margin (GtkTextView *text_view,
                                                       gint top_margin);
extern
gint gtk_text_view_get_top_margin (GtkTextView *text_view);
extern
void gtk_text_view_set_bottom_margin (GtkTextView *text_view,
                                                       gint bottom_margin);
extern
gint gtk_text_view_get_bottom_margin (GtkTextView *text_view);
extern
void gtk_text_view_set_indent (GtkTextView *text_view,
                                                       gint indent);
extern
gint gtk_text_view_get_indent (GtkTextView *text_view);
extern
void gtk_text_view_set_tabs (GtkTextView *text_view,
                                                       PangoTabArray *tabs);
extern
PangoTabArray* gtk_text_view_get_tabs (GtkTextView *text_view);
extern
GtkTextAttributes* gtk_text_view_get_default_attributes (GtkTextView *text_view);
extern
void gtk_text_view_set_input_purpose (GtkTextView *text_view,
                                                       GtkInputPurpose purpose);
extern
GtkInputPurpose gtk_text_view_get_input_purpose (GtkTextView *text_view);
extern
void gtk_text_view_set_input_hints (GtkTextView *text_view,
                                                       GtkInputHints hints);
extern
GtkInputHints gtk_text_view_get_input_hints (GtkTextView *text_view);
extern
void gtk_text_view_set_monospace (GtkTextView *text_view,
                                                       gboolean monospace);
extern
gboolean gtk_text_view_get_monospace (GtkTextView *text_view);
typedef enum
{
  GTK_TOOLBAR_SPACE_EMPTY,
  GTK_TOOLBAR_SPACE_LINE
} GtkToolbarSpaceStyle;
typedef struct _GtkToolbar GtkToolbar;
typedef struct _GtkToolbarPrivate GtkToolbarPrivate;
typedef struct _GtkToolbarClass GtkToolbarClass;
struct _GtkToolbar
{
  GtkContainer container;
  GtkToolbarPrivate *priv;
};
struct _GtkToolbarClass
{
  GtkContainerClass parent_class;
  void (* orientation_changed) (GtkToolbar *toolbar,
        GtkOrientation orientation);
  void (* style_changed) (GtkToolbar *toolbar,
        GtkToolbarStyle style);
  gboolean (* popup_context_menu) (GtkToolbar *toolbar,
        gint x,
        gint y,
        gint button_number);
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_toolbar_get_type (void) __attribute__((__const__));
extern
GtkWidget * gtk_toolbar_new (void);
extern
void gtk_toolbar_insert (GtkToolbar *toolbar,
           GtkToolItem *item,
           gint pos);
extern
gint gtk_toolbar_get_item_index (GtkToolbar *toolbar,
           GtkToolItem *item);
extern
gint gtk_toolbar_get_n_items (GtkToolbar *toolbar);
extern
GtkToolItem * gtk_toolbar_get_nth_item (GtkToolbar *toolbar,
           gint n);
extern
gboolean gtk_toolbar_get_show_arrow (GtkToolbar *toolbar);
extern
void gtk_toolbar_set_show_arrow (GtkToolbar *toolbar,
           gboolean show_arrow);
extern
GtkToolbarStyle gtk_toolbar_get_style (GtkToolbar *toolbar);
extern
void gtk_toolbar_set_style (GtkToolbar *toolbar,
           GtkToolbarStyle style);
extern
void gtk_toolbar_unset_style (GtkToolbar *toolbar);
extern
GtkIconSize gtk_toolbar_get_icon_size (GtkToolbar *toolbar);
extern
void gtk_toolbar_set_icon_size (GtkToolbar *toolbar,
                                                     GtkIconSize icon_size);
extern
void gtk_toolbar_unset_icon_size (GtkToolbar *toolbar);
extern
GtkReliefStyle gtk_toolbar_get_relief_style (GtkToolbar *toolbar);
extern
gint gtk_toolbar_get_drop_index (GtkToolbar *toolbar,
           gint x,
           gint y);
extern
void gtk_toolbar_set_drop_highlight_item (GtkToolbar *toolbar,
           GtkToolItem *tool_item,
           gint index_);
typedef struct _GtkToolItemGroup GtkToolItemGroup;
typedef struct _GtkToolItemGroupClass GtkToolItemGroupClass;
typedef struct _GtkToolItemGroupPrivate GtkToolItemGroupPrivate;
struct _GtkToolItemGroup
{
  GtkContainer parent_instance;
  GtkToolItemGroupPrivate *priv;
};
struct _GtkToolItemGroupClass
{
  GtkContainerClass parent_class;
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_tool_item_group_get_type (void) __attribute__((__const__));
extern
GtkWidget* gtk_tool_item_group_new (const gchar *label);
extern
void gtk_tool_item_group_set_label (GtkToolItemGroup *group,
                                                             const gchar *label);
extern
void gtk_tool_item_group_set_label_widget (GtkToolItemGroup *group,
                                                             GtkWidget *label_widget);
extern
void gtk_tool_item_group_set_collapsed (GtkToolItemGroup *group,
                                                             gboolean collapsed);
extern
void gtk_tool_item_group_set_ellipsize (GtkToolItemGroup *group,
                                                             PangoEllipsizeMode ellipsize);
extern
void gtk_tool_item_group_set_header_relief (GtkToolItemGroup *group,
                                                             GtkReliefStyle style);
extern
const gchar * gtk_tool_item_group_get_label (GtkToolItemGroup *group);
extern
GtkWidget *gtk_tool_item_group_get_label_widget (GtkToolItemGroup *group);
extern
gboolean gtk_tool_item_group_get_collapsed (GtkToolItemGroup *group);
extern
PangoEllipsizeMode gtk_tool_item_group_get_ellipsize (GtkToolItemGroup *group);
extern
GtkReliefStyle gtk_tool_item_group_get_header_relief (GtkToolItemGroup *group);
extern
void gtk_tool_item_group_insert (GtkToolItemGroup *group,
                                                             GtkToolItem *item,
                                                             gint position);
extern
void gtk_tool_item_group_set_item_position (GtkToolItemGroup *group,
                                                             GtkToolItem *item,
                                                             gint position);
extern
gint gtk_tool_item_group_get_item_position (GtkToolItemGroup *group,
                                                             GtkToolItem *item);
extern
guint gtk_tool_item_group_get_n_items (GtkToolItemGroup *group);
extern
GtkToolItem* gtk_tool_item_group_get_nth_item (GtkToolItemGroup *group,
                                                             guint index);
extern
GtkToolItem* gtk_tool_item_group_get_drop_item (GtkToolItemGroup *group,
                                                             gint x,
                                                             gint y);
typedef struct _GtkToolPalette GtkToolPalette;
typedef struct _GtkToolPaletteClass GtkToolPaletteClass;
typedef struct _GtkToolPalettePrivate GtkToolPalettePrivate;
typedef enum
{
  GTK_TOOL_PALETTE_DRAG_ITEMS = (1 << 0),
  GTK_TOOL_PALETTE_DRAG_GROUPS = (1 << 1)
}
GtkToolPaletteDragTargets;
struct _GtkToolPalette
{
  GtkContainer parent_instance;
  GtkToolPalettePrivate *priv;
};
struct _GtkToolPaletteClass
{
  GtkContainerClass parent_class;
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_tool_palette_get_type (void) __attribute__((__const__));
extern
GtkWidget* gtk_tool_palette_new (void);
extern
void gtk_tool_palette_set_group_position (GtkToolPalette *palette,
                                                                       GtkToolItemGroup *group,
                                                                       gint position);
extern
void gtk_tool_palette_set_exclusive (GtkToolPalette *palette,
                                                                       GtkToolItemGroup *group,
                                                                       gboolean exclusive);
extern
void gtk_tool_palette_set_expand (GtkToolPalette *palette,
                                                                       GtkToolItemGroup *group,
                                                                       gboolean expand);
extern
gint gtk_tool_palette_get_group_position (GtkToolPalette *palette,
                                                                       GtkToolItemGroup *group);
extern
gboolean gtk_tool_palette_get_exclusive (GtkToolPalette *palette,
                                                                       GtkToolItemGroup *group);
extern
gboolean gtk_tool_palette_get_expand (GtkToolPalette *palette,
                                                                       GtkToolItemGroup *group);
extern
void gtk_tool_palette_set_icon_size (GtkToolPalette *palette,
                                                                       GtkIconSize icon_size);
extern
void gtk_tool_palette_unset_icon_size (GtkToolPalette *palette);
extern
void gtk_tool_palette_set_style (GtkToolPalette *palette,
                                                                       GtkToolbarStyle style);
extern
void gtk_tool_palette_unset_style (GtkToolPalette *palette);
extern
GtkIconSize gtk_tool_palette_get_icon_size (GtkToolPalette *palette);
extern
GtkToolbarStyle gtk_tool_palette_get_style (GtkToolPalette *palette);
extern
GtkToolItem* gtk_tool_palette_get_drop_item (GtkToolPalette *palette,
                                                                       gint x,
                                                                       gint y);
extern
GtkToolItemGroup* gtk_tool_palette_get_drop_group (GtkToolPalette *palette,
                                                                       gint x,
                                                                       gint y);
extern
GtkWidget* gtk_tool_palette_get_drag_item (GtkToolPalette *palette,
                                                                       const GtkSelectionData *selection);
extern
void gtk_tool_palette_set_drag_source (GtkToolPalette *palette,
                                                                       GtkToolPaletteDragTargets targets);
extern
void gtk_tool_palette_add_drag_dest (GtkToolPalette *palette,
                                                                       GtkWidget *widget,
                                                                       GtkDestDefaults flags,
                                                                       GtkToolPaletteDragTargets targets,
                                                                       GdkDragAction actions);
extern
GtkAdjustment* gtk_tool_palette_get_hadjustment (GtkToolPalette *palette);
extern
GtkAdjustment* gtk_tool_palette_get_vadjustment (GtkToolPalette *palette);
extern
const GtkTargetEntry* gtk_tool_palette_get_drag_target_item (void) __attribute__((__const__));
extern
const GtkTargetEntry* gtk_tool_palette_get_drag_target_group (void) __attribute__((__const__));
typedef struct _GtkToolShell GtkToolShell;
typedef struct _GtkToolShellIface GtkToolShellIface;
struct _GtkToolShellIface
{
  GTypeInterface g_iface;
  GtkIconSize (*get_icon_size) (GtkToolShell *shell);
  GtkOrientation (*get_orientation) (GtkToolShell *shell);
  GtkToolbarStyle (*get_style) (GtkToolShell *shell);
  GtkReliefStyle (*get_relief_style) (GtkToolShell *shell);
  void (*rebuild_menu) (GtkToolShell *shell);
  GtkOrientation (*get_text_orientation) (GtkToolShell *shell);
  gfloat (*get_text_alignment) (GtkToolShell *shell);
  PangoEllipsizeMode (*get_ellipsize_mode) (GtkToolShell *shell);
  GtkSizeGroup * (*get_text_size_group) (GtkToolShell *shell);
};
extern
GType gtk_tool_shell_get_type (void) __attribute__((__const__));
extern
GtkIconSize gtk_tool_shell_get_icon_size (GtkToolShell *shell);
extern
GtkOrientation gtk_tool_shell_get_orientation (GtkToolShell *shell);
extern
GtkToolbarStyle gtk_tool_shell_get_style (GtkToolShell *shell);
extern
GtkReliefStyle gtk_tool_shell_get_relief_style (GtkToolShell *shell);
extern
void gtk_tool_shell_rebuild_menu (GtkToolShell *shell);
extern
GtkOrientation gtk_tool_shell_get_text_orientation (GtkToolShell *shell);
extern
gfloat gtk_tool_shell_get_text_alignment (GtkToolShell *shell);
extern
PangoEllipsizeMode gtk_tool_shell_get_ellipsize_mode (GtkToolShell *shell);
extern
GtkSizeGroup * gtk_tool_shell_get_text_size_group (GtkToolShell *shell);
extern
void gtk_test_init (int *argcp,
                                                 char ***argvp,
                                                 ...);
extern
void gtk_test_register_all_types (void);
extern
const GType* gtk_test_list_all_types (guint *n_types);
extern
GtkWidget* gtk_test_find_widget (GtkWidget *widget,
                                                 const gchar *label_pattern,
                                                 GType widget_type);
extern
GtkWidget* gtk_test_create_widget (GType widget_type,
                                                 const gchar *first_property_name,
                                                 ...);
extern
GtkWidget* gtk_test_create_simple_window (const gchar *window_title,
                                                 const gchar *dialog_text);
extern
GtkWidget* gtk_test_display_button_window (const gchar *window_title,
                                                 const gchar *dialog_text,
                                                 ...);
extern
void gtk_test_slider_set_perc (GtkWidget *widget,
                                                 double percentage);
extern
double gtk_test_slider_get_value (GtkWidget *widget);
extern
gboolean gtk_test_spin_button_click (GtkSpinButton *spinner,
                                                 guint button,
                                                 gboolean upwards);
extern
void gtk_test_widget_wait_for_draw (GtkWidget *widget);
extern
gboolean gtk_test_widget_click (GtkWidget *widget,
                                                 guint button,
                                                 GdkModifierType modifiers);
extern
gboolean gtk_test_widget_send_key (GtkWidget *widget,
                                                 guint keyval,
                                                 GdkModifierType modifiers);
extern
void gtk_test_text_set (GtkWidget *widget,
                                                 const gchar *string);
extern
gchar* gtk_test_text_get (GtkWidget *widget);
extern
GtkWidget* gtk_test_find_sibling (GtkWidget *base_widget,
                                                 GType widget_type);
extern
GtkWidget* gtk_test_find_label (GtkWidget *widget,
                                                 const gchar *label_pattern);
typedef struct _GtkTreeDragSource GtkTreeDragSource;
typedef struct _GtkTreeDragSourceIface GtkTreeDragSourceIface;
struct _GtkTreeDragSourceIface
{
  GTypeInterface g_iface;
  gboolean (* row_draggable) (GtkTreeDragSource *drag_source,
                                         GtkTreePath *path);
  gboolean (* drag_data_get) (GtkTreeDragSource *drag_source,
                                         GtkTreePath *path,
                                         GtkSelectionData *selection_data);
  gboolean (* drag_data_delete) (GtkTreeDragSource *drag_source,
                                         GtkTreePath *path);
};
extern
GType gtk_tree_drag_source_get_type (void) __attribute__((__const__));
extern
gboolean gtk_tree_drag_source_row_draggable (GtkTreeDragSource *drag_source,
                                                GtkTreePath *path);
extern
gboolean gtk_tree_drag_source_drag_data_delete (GtkTreeDragSource *drag_source,
                                                GtkTreePath *path);
extern
gboolean gtk_tree_drag_source_drag_data_get (GtkTreeDragSource *drag_source,
                                                GtkTreePath *path,
                                                GtkSelectionData *selection_data);
typedef struct _GtkTreeDragDest GtkTreeDragDest;
typedef struct _GtkTreeDragDestIface GtkTreeDragDestIface;
struct _GtkTreeDragDestIface
{
  GTypeInterface g_iface;
  gboolean (* drag_data_received) (GtkTreeDragDest *drag_dest,
                                       GtkTreePath *dest,
                                       GtkSelectionData *selection_data);
  gboolean (* row_drop_possible) (GtkTreeDragDest *drag_dest,
                                       GtkTreePath *dest_path,
           GtkSelectionData *selection_data);
};
extern
GType gtk_tree_drag_dest_get_type (void) __attribute__((__const__));
extern
gboolean gtk_tree_drag_dest_drag_data_received (GtkTreeDragDest *drag_dest,
      GtkTreePath *dest,
      GtkSelectionData *selection_data);
extern
gboolean gtk_tree_drag_dest_row_drop_possible (GtkTreeDragDest *drag_dest,
      GtkTreePath *dest_path,
      GtkSelectionData *selection_data);
extern
gboolean gtk_tree_set_row_drag_data (GtkSelectionData *selection_data,
      GtkTreeModel *tree_model,
      GtkTreePath *path);
extern
gboolean gtk_tree_get_row_drag_data (GtkSelectionData *selection_data,
      GtkTreeModel **tree_model,
      GtkTreePath **path);
typedef struct _GtkTreeModelSort GtkTreeModelSort;
typedef struct _GtkTreeModelSortClass GtkTreeModelSortClass;
typedef struct _GtkTreeModelSortPrivate GtkTreeModelSortPrivate;
struct _GtkTreeModelSort
{
  GObject parent;
  GtkTreeModelSortPrivate *priv;
};
struct _GtkTreeModelSortClass
{
  GObjectClass parent_class;
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_tree_model_sort_get_type (void) __attribute__((__const__));
extern
GtkTreeModel *gtk_tree_model_sort_new_with_model (GtkTreeModel *child_model);
extern
GtkTreeModel *gtk_tree_model_sort_get_model (GtkTreeModelSort *tree_model);
extern
GtkTreePath *gtk_tree_model_sort_convert_child_path_to_path (GtkTreeModelSort *tree_model_sort,
             GtkTreePath *child_path);
extern
gboolean gtk_tree_model_sort_convert_child_iter_to_iter (GtkTreeModelSort *tree_model_sort,
             GtkTreeIter *sort_iter,
             GtkTreeIter *child_iter);
extern
GtkTreePath *gtk_tree_model_sort_convert_path_to_child_path (GtkTreeModelSort *tree_model_sort,
             GtkTreePath *sorted_path);
extern
void gtk_tree_model_sort_convert_iter_to_child_iter (GtkTreeModelSort *tree_model_sort,
             GtkTreeIter *child_iter,
             GtkTreeIter *sorted_iter);
extern
void gtk_tree_model_sort_reset_default_sort_func (GtkTreeModelSort *tree_model_sort);
extern
void gtk_tree_model_sort_clear_cache (GtkTreeModelSort *tree_model_sort);
extern
gboolean gtk_tree_model_sort_iter_is_valid (GtkTreeModelSort *tree_model_sort,
                                                              GtkTreeIter *iter);
typedef struct _GtkTreeSelectionPrivate GtkTreeSelectionPrivate;
typedef gboolean (* GtkTreeSelectionFunc) (GtkTreeSelection *selection,
           GtkTreeModel *model,
           GtkTreePath *path,
                                              gboolean path_currently_selected,
           gpointer data);
typedef void (* GtkTreeSelectionForeachFunc) (GtkTreeModel *model,
           GtkTreePath *path,
           GtkTreeIter *iter,
           gpointer data);
struct _GtkTreeSelection
{
  GObject parent;
  GtkTreeSelectionPrivate *priv;
};
struct _GtkTreeSelectionClass
{
  GObjectClass parent_class;
  void (* changed) (GtkTreeSelection *selection);
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_tree_selection_get_type (void) __attribute__((__const__));
extern
void gtk_tree_selection_set_mode (GtkTreeSelection *selection,
        GtkSelectionMode type);
extern
GtkSelectionMode gtk_tree_selection_get_mode (GtkTreeSelection *selection);
extern
void gtk_tree_selection_set_select_function (GtkTreeSelection *selection,
        GtkTreeSelectionFunc func,
        gpointer data,
        GDestroyNotify destroy);
extern
gpointer gtk_tree_selection_get_user_data (GtkTreeSelection *selection);
extern
GtkTreeView* gtk_tree_selection_get_tree_view (GtkTreeSelection *selection);
extern
GtkTreeSelectionFunc gtk_tree_selection_get_select_function (GtkTreeSelection *selection);
extern
gboolean gtk_tree_selection_get_selected (GtkTreeSelection *selection,
        GtkTreeModel **model,
        GtkTreeIter *iter);
extern
GList * gtk_tree_selection_get_selected_rows (GtkTreeSelection *selection,
                                                         GtkTreeModel **model);
extern
gint gtk_tree_selection_count_selected_rows (GtkTreeSelection *selection);
extern
void gtk_tree_selection_selected_foreach (GtkTreeSelection *selection,
        GtkTreeSelectionForeachFunc func,
        gpointer data);
extern
void gtk_tree_selection_select_path (GtkTreeSelection *selection,
        GtkTreePath *path);
extern
void gtk_tree_selection_unselect_path (GtkTreeSelection *selection,
        GtkTreePath *path);
extern
void gtk_tree_selection_select_iter (GtkTreeSelection *selection,
        GtkTreeIter *iter);
extern
void gtk_tree_selection_unselect_iter (GtkTreeSelection *selection,
        GtkTreeIter *iter);
extern
gboolean gtk_tree_selection_path_is_selected (GtkTreeSelection *selection,
        GtkTreePath *path);
extern
gboolean gtk_tree_selection_iter_is_selected (GtkTreeSelection *selection,
        GtkTreeIter *iter);
extern
void gtk_tree_selection_select_all (GtkTreeSelection *selection);
extern
void gtk_tree_selection_unselect_all (GtkTreeSelection *selection);
extern
void gtk_tree_selection_select_range (GtkTreeSelection *selection,
        GtkTreePath *start_path,
        GtkTreePath *end_path);
extern
void gtk_tree_selection_unselect_range (GtkTreeSelection *selection,
                                                         GtkTreePath *start_path,
        GtkTreePath *end_path);
typedef struct _GtkTreeStore GtkTreeStore;
typedef struct _GtkTreeStoreClass GtkTreeStoreClass;
typedef struct _GtkTreeStorePrivate GtkTreeStorePrivate;
struct _GtkTreeStore
{
  GObject parent;
  GtkTreeStorePrivate *priv;
};
struct _GtkTreeStoreClass
{
  GObjectClass parent_class;
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_tree_store_get_type (void) __attribute__((__const__));
extern
GtkTreeStore *gtk_tree_store_new (gint n_columns,
            ...);
extern
GtkTreeStore *gtk_tree_store_newv (gint n_columns,
            GType *types);
extern
void gtk_tree_store_set_column_types (GtkTreeStore *tree_store,
            gint n_columns,
            GType *types);
extern
void gtk_tree_store_set_value (GtkTreeStore *tree_store,
            GtkTreeIter *iter,
            gint column,
            GValue *value);
extern
void gtk_tree_store_set (GtkTreeStore *tree_store,
            GtkTreeIter *iter,
            ...);
extern
void gtk_tree_store_set_valuesv (GtkTreeStore *tree_store,
            GtkTreeIter *iter,
            gint *columns,
            GValue *values,
            gint n_values);
extern
void gtk_tree_store_set_valist (GtkTreeStore *tree_store,
            GtkTreeIter *iter,
            va_list var_args);
extern
gboolean gtk_tree_store_remove (GtkTreeStore *tree_store,
            GtkTreeIter *iter);
extern
void gtk_tree_store_insert (GtkTreeStore *tree_store,
            GtkTreeIter *iter,
            GtkTreeIter *parent,
            gint position);
extern
void gtk_tree_store_insert_before (GtkTreeStore *tree_store,
            GtkTreeIter *iter,
            GtkTreeIter *parent,
            GtkTreeIter *sibling);
extern
void gtk_tree_store_insert_after (GtkTreeStore *tree_store,
            GtkTreeIter *iter,
            GtkTreeIter *parent,
            GtkTreeIter *sibling);
extern
void gtk_tree_store_insert_with_values (GtkTreeStore *tree_store,
       GtkTreeIter *iter,
       GtkTreeIter *parent,
       gint position,
       ...);
extern
void gtk_tree_store_insert_with_valuesv (GtkTreeStore *tree_store,
        GtkTreeIter *iter,
        GtkTreeIter *parent,
        gint position,
        gint *columns,
        GValue *values,
        gint n_values);
extern
void gtk_tree_store_prepend (GtkTreeStore *tree_store,
            GtkTreeIter *iter,
            GtkTreeIter *parent);
extern
void gtk_tree_store_append (GtkTreeStore *tree_store,
            GtkTreeIter *iter,
            GtkTreeIter *parent);
extern
gboolean gtk_tree_store_is_ancestor (GtkTreeStore *tree_store,
            GtkTreeIter *iter,
            GtkTreeIter *descendant);
extern
gint gtk_tree_store_iter_depth (GtkTreeStore *tree_store,
            GtkTreeIter *iter);
extern
void gtk_tree_store_clear (GtkTreeStore *tree_store);
extern
gboolean gtk_tree_store_iter_is_valid (GtkTreeStore *tree_store,
                                               GtkTreeIter *iter);
extern
void gtk_tree_store_reorder (GtkTreeStore *tree_store,
                                               GtkTreeIter *parent,
                                               gint *new_order);
extern
void gtk_tree_store_swap (GtkTreeStore *tree_store,
                                               GtkTreeIter *a,
                                               GtkTreeIter *b);
extern
void gtk_tree_store_move_before (GtkTreeStore *tree_store,
                                               GtkTreeIter *iter,
                                               GtkTreeIter *position);
extern
void gtk_tree_store_move_after (GtkTreeStore *tree_store,
                                               GtkTreeIter *iter,
                                               GtkTreeIter *position);
extern GType gtk_license_get_type (void) __attribute__((__const__));
extern GType gtk_accel_flags_get_type (void) __attribute__((__const__));
extern GType gtk_application_inhibit_flags_get_type (void) __attribute__((__const__));
extern GType gtk_assistant_page_type_get_type (void) __attribute__((__const__));
extern GType gtk_button_box_style_get_type (void) __attribute__((__const__));
extern GType gtk_builder_error_get_type (void) __attribute__((__const__));
extern GType gtk_calendar_display_options_get_type (void) __attribute__((__const__));
extern GType gtk_cell_renderer_state_get_type (void) __attribute__((__const__));
extern GType gtk_cell_renderer_mode_get_type (void) __attribute__((__const__));
extern GType gtk_cell_renderer_accel_mode_get_type (void) __attribute__((__const__));
extern GType gtk_resize_mode_get_type (void) __attribute__((__const__));
extern GType gtk_css_provider_error_get_type (void) __attribute__((__const__));
extern GType gtk_css_section_type_get_type (void) __attribute__((__const__));
extern GType gtk_debug_flag_get_type (void) __attribute__((__const__));
extern GType gtk_dialog_flags_get_type (void) __attribute__((__const__));
extern GType gtk_response_type_get_type (void) __attribute__((__const__));
extern GType gtk_dest_defaults_get_type (void) __attribute__((__const__));
extern GType gtk_target_flags_get_type (void) __attribute__((__const__));
extern GType gtk_entry_icon_position_get_type (void) __attribute__((__const__));
extern GType gtk_align_get_type (void) __attribute__((__const__));
extern GType gtk_arrow_type_get_type (void) __attribute__((__const__));
extern GType gtk_baseline_position_get_type (void) __attribute__((__const__));
extern GType gtk_delete_type_get_type (void) __attribute__((__const__));
extern GType gtk_direction_type_get_type (void) __attribute__((__const__));
extern GType gtk_icon_size_get_type (void) __attribute__((__const__));
extern GType gtk_sensitivity_type_get_type (void) __attribute__((__const__));
extern GType gtk_text_direction_get_type (void) __attribute__((__const__));
extern GType gtk_justification_get_type (void) __attribute__((__const__));
extern GType gtk_menu_direction_type_get_type (void) __attribute__((__const__));
extern GType gtk_message_type_get_type (void) __attribute__((__const__));
extern GType gtk_movement_step_get_type (void) __attribute__((__const__));
extern GType gtk_scroll_step_get_type (void) __attribute__((__const__));
extern GType gtk_orientation_get_type (void) __attribute__((__const__));
extern GType gtk_pack_type_get_type (void) __attribute__((__const__));
extern GType gtk_position_type_get_type (void) __attribute__((__const__));
extern GType gtk_relief_style_get_type (void) __attribute__((__const__));
extern GType gtk_scroll_type_get_type (void) __attribute__((__const__));
extern GType gtk_selection_mode_get_type (void) __attribute__((__const__));
extern GType gtk_shadow_type_get_type (void) __attribute__((__const__));
extern GType gtk_state_type_get_type (void) __attribute__((__const__));
extern GType gtk_toolbar_style_get_type (void) __attribute__((__const__));
extern GType gtk_wrap_mode_get_type (void) __attribute__((__const__));
extern GType gtk_sort_type_get_type (void) __attribute__((__const__));
extern GType gtk_im_preedit_style_get_type (void) __attribute__((__const__));
extern GType gtk_im_status_style_get_type (void) __attribute__((__const__));
extern GType gtk_pack_direction_get_type (void) __attribute__((__const__));
extern GType gtk_print_pages_get_type (void) __attribute__((__const__));
extern GType gtk_page_set_get_type (void) __attribute__((__const__));
extern GType gtk_number_up_layout_get_type (void) __attribute__((__const__));
extern GType gtk_page_orientation_get_type (void) __attribute__((__const__));
extern GType gtk_print_quality_get_type (void) __attribute__((__const__));
extern GType gtk_print_duplex_get_type (void) __attribute__((__const__));
extern GType gtk_unit_get_type (void) __attribute__((__const__));
extern GType gtk_tree_view_grid_lines_get_type (void) __attribute__((__const__));
extern GType gtk_drag_result_get_type (void) __attribute__((__const__));
extern GType gtk_size_group_mode_get_type (void) __attribute__((__const__));
extern GType gtk_size_request_mode_get_type (void) __attribute__((__const__));
extern GType gtk_scrollable_policy_get_type (void) __attribute__((__const__));
extern GType gtk_state_flags_get_type (void) __attribute__((__const__));
extern GType gtk_region_flags_get_type (void) __attribute__((__const__));
extern GType gtk_junction_sides_get_type (void) __attribute__((__const__));
extern GType gtk_border_style_get_type (void) __attribute__((__const__));
extern GType gtk_level_bar_mode_get_type (void) __attribute__((__const__));
extern GType gtk_input_purpose_get_type (void) __attribute__((__const__));
extern GType gtk_input_hints_get_type (void) __attribute__((__const__));
extern GType gtk_propagation_phase_get_type (void) __attribute__((__const__));
extern GType gtk_event_sequence_state_get_type (void) __attribute__((__const__));
extern GType gtk_pan_direction_get_type (void) __attribute__((__const__));
extern GType gtk_file_chooser_action_get_type (void) __attribute__((__const__));
extern GType gtk_file_chooser_confirmation_get_type (void) __attribute__((__const__));
extern GType gtk_file_chooser_error_get_type (void) __attribute__((__const__));
extern GType gtk_file_filter_flags_get_type (void) __attribute__((__const__));
extern GType gtk_icon_lookup_flags_get_type (void) __attribute__((__const__));
extern GType gtk_icon_theme_error_get_type (void) __attribute__((__const__));
extern GType gtk_icon_view_drop_position_get_type (void) __attribute__((__const__));
extern GType gtk_image_type_get_type (void) __attribute__((__const__));
extern GType gtk_arrow_placement_get_type (void) __attribute__((__const__));
extern GType gtk_buttons_type_get_type (void) __attribute__((__const__));
extern GType gtk_button_role_get_type (void) __attribute__((__const__));
extern GType gtk_notebook_tab_get_type (void) __attribute__((__const__));
extern GType gtk_places_open_flags_get_type (void) __attribute__((__const__));
extern GType gtk_print_status_get_type (void) __attribute__((__const__));
extern GType gtk_print_operation_result_get_type (void) __attribute__((__const__));
extern GType gtk_print_operation_action_get_type (void) __attribute__((__const__));
extern GType gtk_print_error_get_type (void) __attribute__((__const__));
extern GType gtk_recent_sort_type_get_type (void) __attribute__((__const__));
extern GType gtk_recent_chooser_error_get_type (void) __attribute__((__const__));
extern GType gtk_recent_filter_flags_get_type (void) __attribute__((__const__));
extern GType gtk_recent_manager_error_get_type (void) __attribute__((__const__));
extern GType gtk_revealer_transition_type_get_type (void) __attribute__((__const__));
extern GType gtk_corner_type_get_type (void) __attribute__((__const__));
extern GType gtk_policy_type_get_type (void) __attribute__((__const__));
extern GType gtk_spin_button_update_policy_get_type (void) __attribute__((__const__));
extern GType gtk_spin_type_get_type (void) __attribute__((__const__));
extern GType gtk_stack_transition_type_get_type (void) __attribute__((__const__));
extern GType gtk_text_buffer_target_info_get_type (void) __attribute__((__const__));
extern GType gtk_text_search_flags_get_type (void) __attribute__((__const__));
extern GType gtk_text_window_type_get_type (void) __attribute__((__const__));
extern GType gtk_text_view_layer_get_type (void) __attribute__((__const__));
extern GType gtk_text_extend_selection_get_type (void) __attribute__((__const__));
extern GType gtk_toolbar_space_style_get_type (void) __attribute__((__const__));
extern GType gtk_tool_palette_drag_targets_get_type (void) __attribute__((__const__));
extern GType gtk_tree_model_flags_get_type (void) __attribute__((__const__));
extern GType gtk_tree_view_drop_position_get_type (void) __attribute__((__const__));
extern GType gtk_tree_view_column_sizing_get_type (void) __attribute__((__const__));
extern GType gtk_widget_help_type_get_type (void) __attribute__((__const__));
extern GType gtk_window_type_get_type (void) __attribute__((__const__));
extern GType gtk_window_position_get_type (void) __attribute__((__const__));
extern GType gtk_rc_flags_get_type (void) __attribute__((__const__));
extern GType gtk_rc_token_type_get_type (void) __attribute__((__const__));
extern GType gtk_path_priority_type_get_type (void) __attribute__((__const__));
extern GType gtk_path_type_get_type (void) __attribute__((__const__));
extern GType gtk_expander_style_get_type (void) __attribute__((__const__));
extern GType gtk_attach_options_get_type (void) __attribute__((__const__));
extern GType gtk_ui_manager_item_type_get_type (void) __attribute__((__const__));
typedef struct _GtkViewport GtkViewport;
typedef struct _GtkViewportPrivate GtkViewportPrivate;
typedef struct _GtkViewportClass GtkViewportClass;
struct _GtkViewport
{
  GtkBin bin;
  GtkViewportPrivate *priv;
};
struct _GtkViewportClass
{
  GtkBinClass parent_class;
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_viewport_get_type (void) __attribute__((__const__));
extern
GtkWidget* gtk_viewport_new (GtkAdjustment *hadjustment,
          GtkAdjustment *vadjustment);
extern
GtkAdjustment* gtk_viewport_get_hadjustment (GtkViewport *viewport);
extern
GtkAdjustment* gtk_viewport_get_vadjustment (GtkViewport *viewport);
extern
void gtk_viewport_set_hadjustment (GtkViewport *viewport,
                                             GtkAdjustment *adjustment);
extern
void gtk_viewport_set_vadjustment (GtkViewport *viewport,
                                             GtkAdjustment *adjustment);
extern
void gtk_viewport_set_shadow_type (GtkViewport *viewport,
          GtkShadowType type);
extern
GtkShadowType gtk_viewport_get_shadow_type (GtkViewport *viewport);
extern
GdkWindow* gtk_viewport_get_bin_window (GtkViewport *viewport);
extern
GdkWindow* gtk_viewport_get_view_window (GtkViewport *viewport);
typedef struct _GtkVolumeButton GtkVolumeButton;
typedef struct _GtkVolumeButtonClass GtkVolumeButtonClass;
struct _GtkVolumeButton
{
  GtkScaleButton parent;
};
struct _GtkVolumeButtonClass
{
  GtkScaleButtonClass parent_class;
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_volume_button_get_type (void) __attribute__((__const__));
extern
GtkWidget* gtk_volume_button_new (void);
extern
GType gtk_widget_path_get_type (void) __attribute__((__const__));
extern
GtkWidgetPath * gtk_widget_path_new (void);
extern
GtkWidgetPath * gtk_widget_path_copy (const GtkWidgetPath *path);
extern
GtkWidgetPath * gtk_widget_path_ref (GtkWidgetPath *path);
extern
void gtk_widget_path_unref (GtkWidgetPath *path);
extern
void gtk_widget_path_free (GtkWidgetPath *path);
extern
char * gtk_widget_path_to_string (const GtkWidgetPath *path);
extern
gint gtk_widget_path_length (const GtkWidgetPath *path);
extern
gint gtk_widget_path_append_type (GtkWidgetPath *path,
                                                     GType type);
extern
void gtk_widget_path_prepend_type (GtkWidgetPath *path,
                                                     GType type);
extern
gint gtk_widget_path_append_with_siblings(GtkWidgetPath *path,
                                                     GtkWidgetPath *siblings,
                                                     guint sibling_index);
extern
gint gtk_widget_path_append_for_widget (GtkWidgetPath *path,
                                                     GtkWidget *widget);
extern
GType gtk_widget_path_iter_get_object_type (const GtkWidgetPath *path,
                                                           gint pos);
extern
void gtk_widget_path_iter_set_object_type (GtkWidgetPath *path,
                                                           gint pos,
                                                           GType type);
extern
const GtkWidgetPath *
                    gtk_widget_path_iter_get_siblings (const GtkWidgetPath *path,
                                                           gint pos);
extern
guint gtk_widget_path_iter_get_sibling_index(const GtkWidgetPath *path,
                                                           gint pos);
extern
const gchar * gtk_widget_path_iter_get_name (const GtkWidgetPath *path,
                                                       gint pos);
extern
void gtk_widget_path_iter_set_name (GtkWidgetPath *path,
                                                       gint pos,
                                                       const gchar *name);
extern
gboolean gtk_widget_path_iter_has_name (const GtkWidgetPath *path,
                                                       gint pos,
                                                       const gchar *name);
extern
gboolean gtk_widget_path_iter_has_qname (const GtkWidgetPath *path,
                                                       gint pos,
                                                       GQuark qname);
extern
GtkStateFlags gtk_widget_path_iter_get_state (const GtkWidgetPath *path,
                                                       gint pos);
extern
void gtk_widget_path_iter_set_state (GtkWidgetPath *path,
                                                       gint pos,
                                                       GtkStateFlags state);
extern
void gtk_widget_path_iter_add_class (GtkWidgetPath *path,
                                             gint pos,
                                             const gchar *name);
extern
void gtk_widget_path_iter_remove_class (GtkWidgetPath *path,
                                             gint pos,
                                             const gchar *name);
extern
void gtk_widget_path_iter_clear_classes (GtkWidgetPath *path,
                                             gint pos);
extern
GSList * gtk_widget_path_iter_list_classes (const GtkWidgetPath *path,
                                             gint pos);
extern
gboolean gtk_widget_path_iter_has_class (const GtkWidgetPath *path,
                                             gint pos,
                                             const gchar *name);
extern
gboolean gtk_widget_path_iter_has_qclass (const GtkWidgetPath *path,
                                             gint pos,
                                             GQuark qname);
extern
void gtk_widget_path_iter_add_region (GtkWidgetPath *path,
                                             gint pos,
                                             const gchar *name,
                                             GtkRegionFlags flags);
extern
void gtk_widget_path_iter_remove_region (GtkWidgetPath *path,
                                             gint pos,
                                             const gchar *name);
extern
void gtk_widget_path_iter_clear_regions (GtkWidgetPath *path,
                                             gint pos);
extern
GSList * gtk_widget_path_iter_list_regions (const GtkWidgetPath *path,
                                             gint pos);
extern
gboolean gtk_widget_path_iter_has_region (const GtkWidgetPath *path,
                                             gint pos,
                                             const gchar *name,
                                             GtkRegionFlags *flags);
extern
gboolean gtk_widget_path_iter_has_qregion (const GtkWidgetPath *path,
                                             gint pos,
                                             GQuark qname,
                                             GtkRegionFlags *flags);
extern
GType gtk_widget_path_get_object_type (const GtkWidgetPath *path);
extern
gboolean gtk_widget_path_is_type (const GtkWidgetPath *path,
                                            GType type);
extern
gboolean gtk_widget_path_has_parent (const GtkWidgetPath *path,
                                            GType type);
void gtk_widget_path_iter_add_qclass (GtkWidgetPath *path,
                                            gint pos,
                                            GQuark qname);
struct _GtkWindowGroup
{
  GObject parent_instance;
  GtkWindowGroupPrivate *priv;
};
struct _GtkWindowGroupClass
{
  GObjectClass parent_class;
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_window_group_get_type (void) __attribute__((__const__));
extern
GtkWindowGroup * gtk_window_group_new (void);
extern
void gtk_window_group_add_window (GtkWindowGroup *window_group,
                                                 GtkWindow *window);
extern
void gtk_window_group_remove_window (GtkWindowGroup *window_group,
                                                 GtkWindow *window);
extern
GList * gtk_window_group_list_windows (GtkWindowGroup *window_group);
extern
GtkWidget * gtk_window_group_get_current_grab (GtkWindowGroup *window_group);
extern
GtkWidget * gtk_window_group_get_current_device_grab (GtkWindowGroup *window_group,
                                                           GdkDevice *device);
typedef struct _GtkArrow GtkArrow;
typedef struct _GtkArrowPrivate GtkArrowPrivate;
typedef struct _GtkArrowClass GtkArrowClass;
struct _GtkArrow
{
  GtkMisc misc;
  GtkArrowPrivate *priv;
};
struct _GtkArrowClass
{
  GtkMiscClass parent_class;
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_arrow_get_type (void) __attribute__((__const__));
extern
GtkWidget* gtk_arrow_new (GtkArrowType arrow_type,
     GtkShadowType shadow_type);
extern
void gtk_arrow_set (GtkArrow *arrow,
     GtkArrowType arrow_type,
     GtkShadowType shadow_type);
typedef struct _GtkAction GtkAction;
typedef struct _GtkActionClass GtkActionClass;
typedef struct _GtkActionPrivate GtkActionPrivate;
struct _GtkAction
{
  GObject object;
  GtkActionPrivate *private_data;
};
struct _GtkActionClass
{
  GObjectClass parent_class;
  void (* activate) (GtkAction *action);
  GType menu_item_type;
  GType toolbar_item_type;
  GtkWidget *(* create_menu_item) (GtkAction *action);
  GtkWidget *(* create_tool_item) (GtkAction *action);
  void (* connect_proxy) (GtkAction *action,
         GtkWidget *proxy);
  void (* disconnect_proxy) (GtkAction *action,
         GtkWidget *proxy);
  GtkWidget *(* create_menu) (GtkAction *action);
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_action_get_type (void) __attribute__((__const__));
extern
GtkAction *gtk_action_new (const gchar *name,
      const gchar *label,
      const gchar *tooltip,
      const gchar *stock_id);
extern
const gchar* gtk_action_get_name (GtkAction *action);
extern
gboolean gtk_action_is_sensitive (GtkAction *action);
extern
gboolean gtk_action_get_sensitive (GtkAction *action);
extern
void gtk_action_set_sensitive (GtkAction *action,
      gboolean sensitive);
extern
gboolean gtk_action_is_visible (GtkAction *action);
extern
gboolean gtk_action_get_visible (GtkAction *action);
extern
void gtk_action_set_visible (GtkAction *action,
      gboolean visible);
extern
void gtk_action_activate (GtkAction *action);
extern
GtkWidget * gtk_action_create_icon (GtkAction *action,
      GtkIconSize icon_size);
extern
GtkWidget * gtk_action_create_menu_item (GtkAction *action);
extern
GtkWidget * gtk_action_create_tool_item (GtkAction *action);
extern
GtkWidget * gtk_action_create_menu (GtkAction *action);
extern
GSList * gtk_action_get_proxies (GtkAction *action);
extern
void gtk_action_connect_accelerator (GtkAction *action);
extern
void gtk_action_disconnect_accelerator (GtkAction *action);
extern
const gchar *gtk_action_get_accel_path (GtkAction *action);
extern
GClosure *gtk_action_get_accel_closure (GtkAction *action);
extern
void gtk_action_block_activate (GtkAction *action);
extern
void gtk_action_unblock_activate (GtkAction *action);
void _gtk_action_add_to_proxy_list (GtkAction *action,
      GtkWidget *proxy);
void _gtk_action_remove_from_proxy_list(GtkAction *action,
      GtkWidget *proxy);
void _gtk_action_emit_activate (GtkAction *action);
extern
void gtk_action_set_accel_path (GtkAction *action,
      const gchar *accel_path);
extern
void gtk_action_set_accel_group (GtkAction *action,
      GtkAccelGroup *accel_group);
void _gtk_action_sync_menu_visible (GtkAction *action,
      GtkWidget *proxy,
      gboolean empty);
extern
void gtk_action_set_label (GtkAction *action,
                                                         const gchar *label);
extern
const gchar * gtk_action_get_label (GtkAction *action);
extern
void gtk_action_set_short_label (GtkAction *action,
                                                         const gchar *short_label);
extern
const gchar * gtk_action_get_short_label (GtkAction *action);
extern
void gtk_action_set_tooltip (GtkAction *action,
                                                         const gchar *tooltip);
extern
const gchar * gtk_action_get_tooltip (GtkAction *action);
extern
void gtk_action_set_stock_id (GtkAction *action,
                                                         const gchar *stock_id);
extern
const gchar * gtk_action_get_stock_id (GtkAction *action);
extern
void gtk_action_set_gicon (GtkAction *action,
                                                         GIcon *icon);
extern
GIcon *gtk_action_get_gicon (GtkAction *action);
extern
void gtk_action_set_icon_name (GtkAction *action,
                                                         const gchar *icon_name);
extern
const gchar * gtk_action_get_icon_name (GtkAction *action);
extern
void gtk_action_set_visible_horizontal (GtkAction *action,
                                                         gboolean visible_horizontal);
extern
gboolean gtk_action_get_visible_horizontal (GtkAction *action);
extern
void gtk_action_set_visible_vertical (GtkAction *action,
                                                         gboolean visible_vertical);
extern
gboolean gtk_action_get_visible_vertical (GtkAction *action);
extern
void gtk_action_set_is_important (GtkAction *action,
                                                         gboolean is_important);
extern
gboolean gtk_action_get_is_important (GtkAction *action);
extern
void gtk_action_set_always_show_image (GtkAction *action,
                                                         gboolean always_show);
extern
gboolean gtk_action_get_always_show_image (GtkAction *action);
typedef struct _GtkActivatable GtkActivatable;
typedef struct _GtkActivatableIface GtkActivatableIface;
struct _GtkActivatableIface
{
  GTypeInterface g_iface;
  void (* update) (GtkActivatable *activatable,
                         GtkAction *action,
                         const gchar *property_name);
  void (* sync_action_properties) (GtkActivatable *activatable,
                         GtkAction *action);
};
extern
GType gtk_activatable_get_type (void) __attribute__((__const__));
extern
void gtk_activatable_sync_action_properties (GtkActivatable *activatable,
             GtkAction *action);
extern
void gtk_activatable_set_related_action (GtkActivatable *activatable,
             GtkAction *action);
extern
GtkAction *gtk_activatable_get_related_action (GtkActivatable *activatable);
extern
void gtk_activatable_set_use_action_appearance (GtkActivatable *activatable,
             gboolean use_appearance);
extern
gboolean gtk_activatable_get_use_action_appearance (GtkActivatable *activatable);
extern
void gtk_activatable_do_set_related_action (GtkActivatable *activatable,
             GtkAction *action);
typedef gchar * (*GtkTranslateFunc) (const gchar *path,
                                     gpointer func_data);
typedef struct _GtkStockItem GtkStockItem;
struct _GtkStockItem
{
  gchar *stock_id;
  gchar *label;
  GdkModifierType modifier;
  guint keyval;
  gchar *translation_domain;
};
extern
void gtk_stock_add (const GtkStockItem *items,
                               guint n_items);
extern
void gtk_stock_add_static (const GtkStockItem *items,
                               guint n_items);
extern
gboolean gtk_stock_lookup (const gchar *stock_id,
                               GtkStockItem *item);
extern
GSList* gtk_stock_list_ids (void);
extern
GtkStockItem *gtk_stock_item_copy (const GtkStockItem *item);
extern
void gtk_stock_item_free (GtkStockItem *item);
extern
void gtk_stock_set_translate_func (const gchar *domain,
         GtkTranslateFunc func,
         gpointer data,
         GDestroyNotify notify);
typedef char * GtkStock;
typedef struct _GtkActionGroup GtkActionGroup;
typedef struct _GtkActionGroupPrivate GtkActionGroupPrivate;
typedef struct _GtkActionGroupClass GtkActionGroupClass;
typedef struct _GtkActionEntry GtkActionEntry;
typedef struct _GtkToggleActionEntry GtkToggleActionEntry;
typedef struct _GtkRadioActionEntry GtkRadioActionEntry;
struct _GtkActionGroup
{
  GObject parent;
  GtkActionGroupPrivate *priv;
};
struct _GtkActionGroupClass
{
  GObjectClass parent_class;
  GtkAction *(* get_action) (GtkActionGroup *action_group,
                             const gchar *action_name);
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
struct _GtkActionEntry
{
  const gchar *name;
  const gchar *stock_id;
  const gchar *label;
  const gchar *accelerator;
  const gchar *tooltip;
  GCallback callback;
};
struct _GtkToggleActionEntry
{
  const gchar *name;
  const gchar *stock_id;
  const gchar *label;
  const gchar *accelerator;
  const gchar *tooltip;
  GCallback callback;
  gboolean is_active;
};
struct _GtkRadioActionEntry
{
  const gchar *name;
  const gchar *stock_id;
  const gchar *label;
  const gchar *accelerator;
  const gchar *tooltip;
  gint value;
};
extern
GType gtk_action_group_get_type (void) __attribute__((__const__));
extern
GtkActionGroup *gtk_action_group_new (const gchar *name);
extern
const gchar *gtk_action_group_get_name (GtkActionGroup *action_group);
extern
gboolean gtk_action_group_get_sensitive (GtkActionGroup *action_group);
extern
void gtk_action_group_set_sensitive (GtkActionGroup *action_group,
         gboolean sensitive);
extern
gboolean gtk_action_group_get_visible (GtkActionGroup *action_group);
extern
void gtk_action_group_set_visible (GtkActionGroup *action_group,
         gboolean visible);
extern
GtkAccelGroup *gtk_action_group_get_accel_group (GtkActionGroup *action_group);
extern
void gtk_action_group_set_accel_group (GtkActionGroup *action_group,
                                                          GtkAccelGroup *accel_group);
extern
GtkAction *gtk_action_group_get_action (GtkActionGroup *action_group,
         const gchar *action_name);
extern
GList *gtk_action_group_list_actions (GtkActionGroup *action_group);
extern
void gtk_action_group_add_action (GtkActionGroup *action_group,
         GtkAction *action);
extern
void gtk_action_group_add_action_with_accel (GtkActionGroup *action_group,
         GtkAction *action,
         const gchar *accelerator);
extern
void gtk_action_group_remove_action (GtkActionGroup *action_group,
         GtkAction *action);
extern
void gtk_action_group_add_actions (GtkActionGroup *action_group,
         const GtkActionEntry *entries,
         guint n_entries,
         gpointer user_data);
extern
void gtk_action_group_add_toggle_actions (GtkActionGroup *action_group,
         const GtkToggleActionEntry *entries,
         guint n_entries,
         gpointer user_data);
extern
void gtk_action_group_add_radio_actions (GtkActionGroup *action_group,
         const GtkRadioActionEntry *entries,
         guint n_entries,
         gint value,
         GCallback on_change,
         gpointer user_data);
extern
void gtk_action_group_add_actions_full (GtkActionGroup *action_group,
         const GtkActionEntry *entries,
         guint n_entries,
         gpointer user_data,
         GDestroyNotify destroy);
extern
void gtk_action_group_add_toggle_actions_full (GtkActionGroup *action_group,
         const GtkToggleActionEntry *entries,
         guint n_entries,
         gpointer user_data,
         GDestroyNotify destroy);
extern
void gtk_action_group_add_radio_actions_full (GtkActionGroup *action_group,
         const GtkRadioActionEntry *entries,
         guint n_entries,
         gint value,
         GCallback on_change,
         gpointer user_data,
         GDestroyNotify destroy);
extern
void gtk_action_group_set_translate_func (GtkActionGroup *action_group,
         GtkTranslateFunc func,
         gpointer data,
         GDestroyNotify notify);
extern
void gtk_action_group_set_translation_domain (GtkActionGroup *action_group,
         const gchar *domain);
extern
const gchar * gtk_action_group_translate_string (GtkActionGroup *action_group,
                                                     const gchar *string);
void _gtk_action_group_emit_connect_proxy (GtkActionGroup *action_group,
                                              GtkAction *action,
                                              GtkWidget *proxy);
void _gtk_action_group_emit_disconnect_proxy (GtkActionGroup *action_group,
                                              GtkAction *action,
                                              GtkWidget *proxy);
void _gtk_action_group_emit_pre_activate (GtkActionGroup *action_group,
                                              GtkAction *action);
void _gtk_action_group_emit_post_activate (GtkActionGroup *action_group,
                                              GtkAction *action);
typedef struct _GtkAlignment GtkAlignment;
typedef struct _GtkAlignmentPrivate GtkAlignmentPrivate;
typedef struct _GtkAlignmentClass GtkAlignmentClass;
struct _GtkAlignment
{
  GtkBin bin;
  GtkAlignmentPrivate *priv;
};
struct _GtkAlignmentClass
{
  GtkBinClass parent_class;
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_alignment_get_type (void) __attribute__((__const__));
extern
GtkWidget* gtk_alignment_new (gfloat xalign,
         gfloat yalign,
         gfloat xscale,
         gfloat yscale);
extern
void gtk_alignment_set (GtkAlignment *alignment,
         gfloat xalign,
         gfloat yalign,
         gfloat xscale,
         gfloat yscale);
extern
void gtk_alignment_set_padding (GtkAlignment *alignment,
          guint padding_top,
          guint padding_bottom,
          guint padding_left,
          guint padding_right);
extern
void gtk_alignment_get_padding (GtkAlignment *alignment,
          guint *padding_top,
          guint *padding_bottom,
          guint *padding_left,
          guint *padding_right);
typedef struct _GtkColorSelection GtkColorSelection;
typedef struct _GtkColorSelectionPrivate GtkColorSelectionPrivate;
typedef struct _GtkColorSelectionClass GtkColorSelectionClass;
typedef void (* GtkColorSelectionChangePaletteFunc) (const GdkColor *colors,
                                                     gint n_colors);
typedef void (* GtkColorSelectionChangePaletteWithScreenFunc) (GdkScreen *screen,
              const GdkColor *colors,
              gint n_colors);
struct _GtkColorSelection
{
  GtkBox parent_instance;
  GtkColorSelectionPrivate *private_data;
};
struct _GtkColorSelectionClass
{
  GtkBoxClass parent_class;
  void (*color_changed) (GtkColorSelection *color_selection);
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_color_selection_get_type (void) __attribute__((__const__));
extern
GtkWidget *gtk_color_selection_new (void);
extern
gboolean gtk_color_selection_get_has_opacity_control (GtkColorSelection *colorsel);
extern
void gtk_color_selection_set_has_opacity_control (GtkColorSelection *colorsel,
       gboolean has_opacity);
extern
gboolean gtk_color_selection_get_has_palette (GtkColorSelection *colorsel);
extern
void gtk_color_selection_set_has_palette (GtkColorSelection *colorsel,
       gboolean has_palette);
extern
void gtk_color_selection_set_current_alpha (GtkColorSelection *colorsel,
        guint16 alpha);
extern
guint16 gtk_color_selection_get_current_alpha (GtkColorSelection *colorsel);
extern
void gtk_color_selection_set_previous_alpha (GtkColorSelection *colorsel,
        guint16 alpha);
extern
guint16 gtk_color_selection_get_previous_alpha (GtkColorSelection *colorsel);
extern
void gtk_color_selection_set_current_rgba (GtkColorSelection *colorsel,
                                                  const GdkRGBA *rgba);
extern
void gtk_color_selection_get_current_rgba (GtkColorSelection *colorsel,
                                                  GdkRGBA *rgba);
extern
void gtk_color_selection_set_previous_rgba (GtkColorSelection *colorsel,
                                                  const GdkRGBA *rgba);
extern
void gtk_color_selection_get_previous_rgba (GtkColorSelection *colorsel,
                                                  GdkRGBA *rgba);
extern
gboolean gtk_color_selection_is_adjusting (GtkColorSelection *colorsel);
extern
gboolean gtk_color_selection_palette_from_string (const gchar *str,
                                                  GdkColor **colors,
                                                  gint *n_colors);
extern
gchar* gtk_color_selection_palette_to_string (const GdkColor *colors,
                                                  gint n_colors);
extern
GtkColorSelectionChangePaletteWithScreenFunc gtk_color_selection_set_change_palette_with_screen_hook (GtkColorSelectionChangePaletteWithScreenFunc func);
extern
void gtk_color_selection_set_current_color (GtkColorSelection *colorsel,
                                                  const GdkColor *color);
extern
void gtk_color_selection_get_current_color (GtkColorSelection *colorsel,
                                                  GdkColor *color);
extern
void gtk_color_selection_set_previous_color (GtkColorSelection *colorsel,
                                                  const GdkColor *color);
extern
void gtk_color_selection_get_previous_color (GtkColorSelection *colorsel,
                                                  GdkColor *color);
typedef struct _GtkColorSelectionDialog GtkColorSelectionDialog;
typedef struct _GtkColorSelectionDialogPrivate GtkColorSelectionDialogPrivate;
typedef struct _GtkColorSelectionDialogClass GtkColorSelectionDialogClass;
struct _GtkColorSelectionDialog
{
  GtkDialog parent_instance;
  GtkColorSelectionDialogPrivate *priv;
};
struct _GtkColorSelectionDialogClass
{
  GtkDialogClass parent_class;
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_color_selection_dialog_get_type (void) __attribute__((__const__));
extern
GtkWidget* gtk_color_selection_dialog_new (const gchar *title);
extern
GtkWidget* gtk_color_selection_dialog_get_color_selection (GtkColorSelectionDialog *colorsel);
typedef struct _GtkFontSelection GtkFontSelection;
typedef struct _GtkFontSelectionPrivate GtkFontSelectionPrivate;
typedef struct _GtkFontSelectionClass GtkFontSelectionClass;
typedef struct _GtkFontSelectionDialog GtkFontSelectionDialog;
typedef struct _GtkFontSelectionDialogPrivate GtkFontSelectionDialogPrivate;
typedef struct _GtkFontSelectionDialogClass GtkFontSelectionDialogClass;
struct _GtkFontSelection
{
  GtkBox parent_instance;
  GtkFontSelectionPrivate *priv;
};
struct _GtkFontSelectionClass
{
  GtkBoxClass parent_class;
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
struct _GtkFontSelectionDialog
{
  GtkDialog parent_instance;
  GtkFontSelectionDialogPrivate *priv;
};
struct _GtkFontSelectionDialogClass
{
  GtkDialogClass parent_class;
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_font_selection_get_type (void) __attribute__((__const__));
extern
GtkWidget * gtk_font_selection_new (void);
extern
GtkWidget * gtk_font_selection_get_family_list (GtkFontSelection *fontsel);
extern
GtkWidget * gtk_font_selection_get_face_list (GtkFontSelection *fontsel);
extern
GtkWidget * gtk_font_selection_get_size_entry (GtkFontSelection *fontsel);
extern
GtkWidget * gtk_font_selection_get_size_list (GtkFontSelection *fontsel);
extern
GtkWidget * gtk_font_selection_get_preview_entry (GtkFontSelection *fontsel);
extern
PangoFontFamily *
             gtk_font_selection_get_family (GtkFontSelection *fontsel);
extern
PangoFontFace *
             gtk_font_selection_get_face (GtkFontSelection *fontsel);
extern
gint gtk_font_selection_get_size (GtkFontSelection *fontsel);
extern
gchar* gtk_font_selection_get_font_name (GtkFontSelection *fontsel);
extern
gboolean gtk_font_selection_set_font_name (GtkFontSelection *fontsel,
                                                   const gchar *fontname);
extern
const gchar* gtk_font_selection_get_preview_text (GtkFontSelection *fontsel);
extern
void gtk_font_selection_set_preview_text (GtkFontSelection *fontsel,
                                                   const gchar *text);
extern
GType gtk_font_selection_dialog_get_type (void) __attribute__((__const__));
extern
GtkWidget *gtk_font_selection_dialog_new (const gchar *title);
extern
GtkWidget *gtk_font_selection_dialog_get_ok_button (GtkFontSelectionDialog *fsd);
extern
GtkWidget *gtk_font_selection_dialog_get_cancel_button (GtkFontSelectionDialog *fsd);
extern
GtkWidget *gtk_font_selection_dialog_get_font_selection (GtkFontSelectionDialog *fsd);
extern
gchar* gtk_font_selection_dialog_get_font_name (GtkFontSelectionDialog *fsd);
extern
gboolean gtk_font_selection_dialog_set_font_name (GtkFontSelectionDialog *fsd,
                                                        const gchar *fontname);
extern
const gchar*
          gtk_font_selection_dialog_get_preview_text (GtkFontSelectionDialog *fsd);
extern
void gtk_font_selection_dialog_set_preview_text (GtkFontSelectionDialog *fsd,
                                                        const gchar *text);
extern
GType gtk_symbolic_color_get_type (void) __attribute__((__const__));
extern
GtkSymbolicColor * gtk_symbolic_color_new_literal (const GdkRGBA *color);
extern
GtkSymbolicColor * gtk_symbolic_color_new_name (const gchar *name);
extern
GtkSymbolicColor * gtk_symbolic_color_new_shade (GtkSymbolicColor *color,
                                                   gdouble factor);
extern
GtkSymbolicColor * gtk_symbolic_color_new_alpha (GtkSymbolicColor *color,
                                                   gdouble factor);
extern
GtkSymbolicColor * gtk_symbolic_color_new_mix (GtkSymbolicColor *color1,
                                                   GtkSymbolicColor *color2,
                                                   gdouble factor);
extern
GtkSymbolicColor * gtk_symbolic_color_new_win32 (const gchar *theme_class,
                                                   gint id);
extern
GtkSymbolicColor * gtk_symbolic_color_ref (GtkSymbolicColor *color);
extern
void gtk_symbolic_color_unref (GtkSymbolicColor *color);
extern
char * gtk_symbolic_color_to_string (GtkSymbolicColor *color);
extern
gboolean gtk_symbolic_color_resolve (GtkSymbolicColor *color,
                                                   GtkStyleProperties *props,
                                                   GdkRGBA *resolved_color);
extern
GType gtk_gradient_get_type (void) __attribute__((__const__));
extern
GtkGradient * gtk_gradient_new_linear (gdouble x0,
                                           gdouble y0,
                                           gdouble x1,
                                           gdouble y1);
extern
GtkGradient * gtk_gradient_new_radial (gdouble x0,
                                           gdouble y0,
                                           gdouble radius0,
                                           gdouble x1,
                                           gdouble y1,
                                           gdouble radius1);
extern
void gtk_gradient_add_color_stop (GtkGradient *gradient,
                                           gdouble offset,
                                           GtkSymbolicColor *color);
extern
GtkGradient * gtk_gradient_ref (GtkGradient *gradient);
extern
void gtk_gradient_unref (GtkGradient *gradient);
extern
gboolean gtk_gradient_resolve (GtkGradient *gradient,
                                           GtkStyleProperties *props,
                                           cairo_pattern_t **resolved_gradient);
extern
cairo_pattern_t *
              gtk_gradient_resolve_for_context
                                          (GtkGradient *gradient,
                                           GtkStyleContext *context);
extern
char * gtk_gradient_to_string (GtkGradient *gradient);
typedef struct _GtkHandleBox GtkHandleBox;
typedef struct _GtkHandleBoxPrivate GtkHandleBoxPrivate;
typedef struct _GtkHandleBoxClass GtkHandleBoxClass;
struct _GtkHandleBox
{
  GtkBin bin;
  GtkHandleBoxPrivate *priv;
};
struct _GtkHandleBoxClass
{
  GtkBinClass parent_class;
  void (*child_attached) (GtkHandleBox *handle_box,
     GtkWidget *child);
  void (*child_detached) (GtkHandleBox *handle_box,
     GtkWidget *child);
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_handle_box_get_type (void) __attribute__((__const__));
extern
GtkWidget* gtk_handle_box_new (void);
extern
void gtk_handle_box_set_shadow_type (GtkHandleBox *handle_box,
                                                   GtkShadowType type);
extern
GtkShadowType gtk_handle_box_get_shadow_type (GtkHandleBox *handle_box);
extern
void gtk_handle_box_set_handle_position (GtkHandleBox *handle_box,
                GtkPositionType position);
extern
GtkPositionType gtk_handle_box_get_handle_position(GtkHandleBox *handle_box);
extern
void gtk_handle_box_set_snap_edge (GtkHandleBox *handle_box,
         GtkPositionType edge);
extern
GtkPositionType gtk_handle_box_get_snap_edge (GtkHandleBox *handle_box);
extern
gboolean gtk_handle_box_get_child_detached (GtkHandleBox *handle_box);
typedef struct _GtkHButtonBox GtkHButtonBox;
typedef struct _GtkHButtonBoxClass GtkHButtonBoxClass;
struct _GtkHButtonBox
{
  GtkButtonBox button_box;
};
struct _GtkHButtonBoxClass
{
  GtkButtonBoxClass parent_class;
};
extern
GType gtk_hbutton_box_get_type (void) __attribute__((__const__));
extern
GtkWidget* gtk_hbutton_box_new (void);
typedef struct _GtkHBox GtkHBox;
typedef struct _GtkHBoxClass GtkHBoxClass;
struct _GtkHBox
{
  GtkBox box;
};
struct _GtkHBoxClass
{
  GtkBoxClass parent_class;
};
extern
GType gtk_hbox_get_type (void) __attribute__((__const__));
extern
GtkWidget * gtk_hbox_new (gboolean homogeneous,
                               gint spacing);
typedef struct _GtkHPaned GtkHPaned;
typedef struct _GtkHPanedClass GtkHPanedClass;
struct _GtkHPaned
{
  GtkPaned paned;
};
struct _GtkHPanedClass
{
  GtkPanedClass parent_class;
};
extern
GType gtk_hpaned_get_type (void) __attribute__((__const__));
extern
GtkWidget * gtk_hpaned_new (void);
typedef struct _GtkHSV GtkHSV;
typedef struct _GtkHSVPrivate GtkHSVPrivate;
typedef struct _GtkHSVClass GtkHSVClass;
struct _GtkHSV
{
  GtkWidget parent_instance;
  GtkHSVPrivate *priv;
};
struct _GtkHSVClass
{
  GtkWidgetClass parent_class;
  void (* changed) (GtkHSV *hsv);
  void (* move) (GtkHSV *hsv,
                    GtkDirectionType type);
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_hsv_get_type (void) __attribute__((__const__));
extern
GtkWidget* gtk_hsv_new (void);
extern
void gtk_hsv_set_color (GtkHSV *hsv,
     double h,
     double s,
     double v);
extern
void gtk_hsv_get_color (GtkHSV *hsv,
     gdouble *h,
     gdouble *s,
     gdouble *v);
extern
void gtk_hsv_set_metrics (GtkHSV *hsv,
     gint size,
     gint ring_width);
extern
void gtk_hsv_get_metrics (GtkHSV *hsv,
     gint *size,
     gint *ring_width);
extern
gboolean gtk_hsv_is_adjusting (GtkHSV *hsv);
typedef struct _GtkHScale GtkHScale;
typedef struct _GtkHScaleClass GtkHScaleClass;
struct _GtkHScale
{
  GtkScale scale;
};
struct _GtkHScaleClass
{
  GtkScaleClass parent_class;
};
extern
GType gtk_hscale_get_type (void) __attribute__((__const__));
extern
GtkWidget* gtk_hscale_new (GtkAdjustment *adjustment);
extern
GtkWidget* gtk_hscale_new_with_range (gdouble min,
                                      gdouble max,
                                      gdouble step);
typedef struct _GtkHScrollbar GtkHScrollbar;
typedef struct _GtkHScrollbarClass GtkHScrollbarClass;
struct _GtkHScrollbar
{
  GtkScrollbar scrollbar;
};
struct _GtkHScrollbarClass
{
  GtkScrollbarClass parent_class;
};
extern
GType gtk_hscrollbar_get_type (void) __attribute__((__const__));
extern
GtkWidget* gtk_hscrollbar_new (GtkAdjustment *adjustment);
typedef struct _GtkHSeparator GtkHSeparator;
typedef struct _GtkHSeparatorClass GtkHSeparatorClass;
struct _GtkHSeparator
{
  GtkSeparator separator;
};
struct _GtkHSeparatorClass
{
  GtkSeparatorClass parent_class;
};
extern
GType gtk_hseparator_get_type (void) __attribute__((__const__));
extern
GtkWidget* gtk_hseparator_new (void);
typedef struct _GtkImageMenuItem GtkImageMenuItem;
typedef struct _GtkImageMenuItemPrivate GtkImageMenuItemPrivate;
typedef struct _GtkImageMenuItemClass GtkImageMenuItemClass;
struct _GtkImageMenuItem
{
  GtkMenuItem menu_item;
  GtkImageMenuItemPrivate *priv;
};
struct _GtkImageMenuItemClass
{
  GtkMenuItemClass parent_class;
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_image_menu_item_get_type (void) __attribute__((__const__));
extern
GtkWidget* gtk_image_menu_item_new (void);
extern
GtkWidget* gtk_image_menu_item_new_with_label (const gchar *label);
extern
GtkWidget* gtk_image_menu_item_new_with_mnemonic (const gchar *label);
extern
GtkWidget* gtk_image_menu_item_new_from_stock (const gchar *stock_id,
                                                  GtkAccelGroup *accel_group);
extern
void gtk_image_menu_item_set_always_show_image (GtkImageMenuItem *image_menu_item,
                                                      gboolean always_show);
extern
gboolean gtk_image_menu_item_get_always_show_image (GtkImageMenuItem *image_menu_item);
extern
void gtk_image_menu_item_set_image (GtkImageMenuItem *image_menu_item,
                                                  GtkWidget *image);
extern
GtkWidget* gtk_image_menu_item_get_image (GtkImageMenuItem *image_menu_item);
extern
void gtk_image_menu_item_set_use_stock (GtkImageMenuItem *image_menu_item,
        gboolean use_stock);
extern
gboolean gtk_image_menu_item_get_use_stock (GtkImageMenuItem *image_menu_item);
extern
void gtk_image_menu_item_set_accel_group (GtkImageMenuItem *image_menu_item,
        GtkAccelGroup *accel_group);
typedef struct _GtkNumerableIcon GtkNumerableIcon;
typedef struct _GtkNumerableIconClass GtkNumerableIconClass;
typedef struct _GtkNumerableIconPrivate GtkNumerableIconPrivate;
struct _GtkNumerableIcon {
  GEmblemedIcon parent;
  GtkNumerableIconPrivate *priv;
};
struct _GtkNumerableIconClass {
  GEmblemedIconClass parent_class;
  gpointer padding[16];
};
extern
GType gtk_numerable_icon_get_type (void) __attribute__((__const__));
extern
GIcon * gtk_numerable_icon_new (GIcon *base_icon);
extern
GIcon * gtk_numerable_icon_new_with_style_context (GIcon *base_icon,
                                                               GtkStyleContext *context);
extern
GtkStyleContext * gtk_numerable_icon_get_style_context (GtkNumerableIcon *self);
extern
void gtk_numerable_icon_set_style_context (GtkNumerableIcon *self,
                                                               GtkStyleContext *style);
extern
gint gtk_numerable_icon_get_count (GtkNumerableIcon *self);
extern
void gtk_numerable_icon_set_count (GtkNumerableIcon *self,
                                                               gint count);
extern
const gchar * gtk_numerable_icon_get_label (GtkNumerableIcon *self);
extern
void gtk_numerable_icon_set_label (GtkNumerableIcon *self,
                                                               const gchar *label);
extern
void gtk_numerable_icon_set_background_gicon (GtkNumerableIcon *self,
                                                               GIcon *icon);
extern
GIcon * gtk_numerable_icon_get_background_gicon (GtkNumerableIcon *self);
extern
void gtk_numerable_icon_set_background_icon_name (GtkNumerableIcon *self,
                                                               const gchar *icon_name);
extern
const gchar * gtk_numerable_icon_get_background_icon_name (GtkNumerableIcon *self);
typedef struct _GtkToggleAction GtkToggleAction;
typedef struct _GtkToggleActionPrivate GtkToggleActionPrivate;
typedef struct _GtkToggleActionClass GtkToggleActionClass;
struct _GtkToggleAction
{
  GtkAction parent;
  GtkToggleActionPrivate *private_data;
};
struct _GtkToggleActionClass
{
  GtkActionClass parent_class;
  void (* toggled) (GtkToggleAction *action);
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_toggle_action_get_type (void) __attribute__((__const__));
extern
GtkToggleAction *gtk_toggle_action_new (const gchar *name,
                                                      const gchar *label,
                                                      const gchar *tooltip,
                                                      const gchar *stock_id);
extern
void gtk_toggle_action_toggled (GtkToggleAction *action);
extern
void gtk_toggle_action_set_active (GtkToggleAction *action,
                                                      gboolean is_active);
extern
gboolean gtk_toggle_action_get_active (GtkToggleAction *action);
extern
void gtk_toggle_action_set_draw_as_radio (GtkToggleAction *action,
                                                      gboolean draw_as_radio);
extern
gboolean gtk_toggle_action_get_draw_as_radio (GtkToggleAction *action);
void _gtk_toggle_action_set_active (GtkToggleAction *toggle_action,
                                                      gboolean is_active);
typedef struct _GtkRadioAction GtkRadioAction;
typedef struct _GtkRadioActionPrivate GtkRadioActionPrivate;
typedef struct _GtkRadioActionClass GtkRadioActionClass;
struct _GtkRadioAction
{
  GtkToggleAction parent;
  GtkRadioActionPrivate *private_data;
};
struct _GtkRadioActionClass
{
  GtkToggleActionClass parent_class;
  void (* changed) (GtkRadioAction *action, GtkRadioAction *current);
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_radio_action_get_type (void) __attribute__((__const__));
extern
GtkRadioAction *gtk_radio_action_new (const gchar *name,
                                                    const gchar *label,
                                                    const gchar *tooltip,
                                                    const gchar *stock_id,
                                                    gint value);
extern
GSList *gtk_radio_action_get_group (GtkRadioAction *action);
extern
void gtk_radio_action_set_group (GtkRadioAction *action,
                                                    GSList *group);
extern
void gtk_radio_action_join_group (GtkRadioAction *action,
                                                    GtkRadioAction *group_source);
extern
gint gtk_radio_action_get_current_value (GtkRadioAction *action);
extern
void gtk_radio_action_set_current_value (GtkRadioAction *action,
                                                    gint current_value);
typedef struct _GtkRcContext GtkRcContext;
typedef struct _GtkRcStyleClass GtkRcStyleClass;
typedef enum
{
  GTK_RC_FG = 1 << 0,
  GTK_RC_BG = 1 << 1,
  GTK_RC_TEXT = 1 << 2,
  GTK_RC_BASE = 1 << 3
} GtkRcFlags;
struct _GtkRcStyle
{
  GObject parent_instance;
  gchar *name;
  gchar *bg_pixmap_name[5];
  PangoFontDescription *font_desc;
  GtkRcFlags color_flags[5];
  GdkColor fg[5];
  GdkColor bg[5];
  GdkColor text[5];
  GdkColor base[5];
  gint xthickness;
  gint ythickness;
  GArray *rc_properties;
  GSList *rc_style_lists;
  GSList *icon_factories;
  guint engine_specified : 1;
};
struct _GtkRcStyleClass
{
  GObjectClass parent_class;
  GtkRcStyle * (*create_rc_style) (GtkRcStyle *rc_style);
  guint (*parse) (GtkRcStyle *rc_style,
                       GtkSettings *settings,
                       GScanner *scanner);
  void (*merge) (GtkRcStyle *dest,
                       GtkRcStyle *src);
  GtkStyle * (*create_style) (GtkRcStyle *rc_style);
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
GSList* _gtk_rc_parse_widget_class_path (const gchar *pattern);
void _gtk_rc_free_widget_class_path (GSList *list);
gboolean _gtk_rc_match_widget_class (GSList *list,
                                          gint length,
                                          gchar *path,
                                          gchar *path_reversed);
extern
void gtk_rc_add_default_file (const gchar *filename);
extern
void gtk_rc_set_default_files (gchar **filenames);
extern
gchar** gtk_rc_get_default_files (void);
extern
GtkStyle* gtk_rc_get_style (GtkWidget *widget);
extern
GtkStyle* gtk_rc_get_style_by_paths (GtkSettings *settings,
                                         const char *widget_path,
                                         const char *class_path,
                                         GType type);
extern
gboolean gtk_rc_reparse_all_for_settings (GtkSettings *settings,
                                          gboolean force_load);
extern
void gtk_rc_reset_styles (GtkSettings *settings);
extern
gchar* gtk_rc_find_pixmap_in_path (GtkSettings *settings,
                                     GScanner *scanner,
                                     const gchar *pixmap_file);
extern
void gtk_rc_parse (const gchar *filename);
extern
void gtk_rc_parse_string (const gchar *rc_string);
extern
gboolean gtk_rc_reparse_all (void);
extern
GType gtk_rc_style_get_type (void) __attribute__((__const__));
extern
GtkRcStyle* gtk_rc_style_new (void);
extern
GtkRcStyle* gtk_rc_style_copy (GtkRcStyle *orig);
extern
gchar* gtk_rc_find_module_in_path (const gchar *module_file);
extern
gchar* gtk_rc_get_theme_dir (void);
extern
gchar* gtk_rc_get_module_dir (void);
extern
gchar* gtk_rc_get_im_module_path (void);
extern
gchar* gtk_rc_get_im_module_file (void);
typedef enum {
  GTK_RC_TOKEN_INVALID = G_TOKEN_LAST,
  GTK_RC_TOKEN_INCLUDE,
  GTK_RC_TOKEN_NORMAL,
  GTK_RC_TOKEN_ACTIVE,
  GTK_RC_TOKEN_PRELIGHT,
  GTK_RC_TOKEN_SELECTED,
  GTK_RC_TOKEN_INSENSITIVE,
  GTK_RC_TOKEN_FG,
  GTK_RC_TOKEN_BG,
  GTK_RC_TOKEN_TEXT,
  GTK_RC_TOKEN_BASE,
  GTK_RC_TOKEN_XTHICKNESS,
  GTK_RC_TOKEN_YTHICKNESS,
  GTK_RC_TOKEN_FONT,
  GTK_RC_TOKEN_FONTSET,
  GTK_RC_TOKEN_FONT_NAME,
  GTK_RC_TOKEN_BG_PIXMAP,
  GTK_RC_TOKEN_PIXMAP_PATH,
  GTK_RC_TOKEN_STYLE,
  GTK_RC_TOKEN_BINDING,
  GTK_RC_TOKEN_BIND,
  GTK_RC_TOKEN_WIDGET,
  GTK_RC_TOKEN_WIDGET_CLASS,
  GTK_RC_TOKEN_CLASS,
  GTK_RC_TOKEN_LOWEST,
  GTK_RC_TOKEN_GTK,
  GTK_RC_TOKEN_APPLICATION,
  GTK_RC_TOKEN_THEME,
  GTK_RC_TOKEN_RC,
  GTK_RC_TOKEN_HIGHEST,
  GTK_RC_TOKEN_ENGINE,
  GTK_RC_TOKEN_MODULE_PATH,
  GTK_RC_TOKEN_IM_MODULE_PATH,
  GTK_RC_TOKEN_IM_MODULE_FILE,
  GTK_RC_TOKEN_STOCK,
  GTK_RC_TOKEN_LTR,
  GTK_RC_TOKEN_RTL,
  GTK_RC_TOKEN_COLOR,
  GTK_RC_TOKEN_UNBIND,
  GTK_RC_TOKEN_LAST
} GtkRcTokenType;
typedef enum
{
  GTK_PATH_PRIO_LOWEST = 0,
  GTK_PATH_PRIO_GTK = 4,
  GTK_PATH_PRIO_APPLICATION = 8,
  GTK_PATH_PRIO_THEME = 10,
  GTK_PATH_PRIO_RC = 12,
  GTK_PATH_PRIO_HIGHEST = 15
} GtkPathPriorityType;
typedef enum
{
  GTK_PATH_WIDGET,
  GTK_PATH_WIDGET_CLASS,
  GTK_PATH_CLASS
} GtkPathType;
extern
GScanner* gtk_rc_scanner_new (void);
extern
guint gtk_rc_parse_color (GScanner *scanner,
                                 GdkColor *color);
extern
guint gtk_rc_parse_color_full (GScanner *scanner,
                                   GtkRcStyle *style,
                                   GdkColor *color);
extern
guint gtk_rc_parse_state (GScanner *scanner,
                                 GtkStateType *state);
extern
guint gtk_rc_parse_priority (GScanner *scanner,
                                 GtkPathPriorityType *priority);
struct _GtkRcProperty
{
  GQuark type_name;
  GQuark property_name;
  gchar *origin;
  GValue value;
};
extern
void gtk_binding_set_add_path (GtkBindingSet *binding_set,
                                    GtkPathType path_type,
                                    const gchar *path_pattern,
                                    GtkPathPriorityType priority);
typedef struct _GtkRecentAction GtkRecentAction;
typedef struct _GtkRecentActionPrivate GtkRecentActionPrivate;
typedef struct _GtkRecentActionClass GtkRecentActionClass;
struct _GtkRecentAction
{
  GtkAction parent_instance;
  GtkRecentActionPrivate *priv;
};
struct _GtkRecentActionClass
{
  GtkActionClass parent_class;
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_recent_action_get_type (void) __attribute__((__const__));
extern
GtkAction *gtk_recent_action_new (const gchar *name,
                                               const gchar *label,
                                               const gchar *tooltip,
                                               const gchar *stock_id);
extern
GtkAction *gtk_recent_action_new_for_manager (const gchar *name,
                                               const gchar *label,
                                               const gchar *tooltip,
                                               const gchar *stock_id,
                                               GtkRecentManager *manager);
extern
gboolean gtk_recent_action_get_show_numbers (GtkRecentAction *action);
extern
void gtk_recent_action_set_show_numbers (GtkRecentAction *action,
                                               gboolean show_numbers);
typedef struct _GtkStatusIcon GtkStatusIcon;
typedef struct _GtkStatusIconClass GtkStatusIconClass;
typedef struct _GtkStatusIconPrivate GtkStatusIconPrivate;
struct _GtkStatusIcon
{
  GObject parent_instance;
  GtkStatusIconPrivate *priv;
};
struct _GtkStatusIconClass
{
  GObjectClass parent_class;
  void (* activate) (GtkStatusIcon *status_icon);
  void (* popup_menu) (GtkStatusIcon *status_icon,
                                     guint button,
                                     guint32 activate_time);
  gboolean (* size_changed) (GtkStatusIcon *status_icon,
                                     gint size);
  gboolean (* button_press_event) (GtkStatusIcon *status_icon,
                                     GdkEventButton *event);
  gboolean (* button_release_event) (GtkStatusIcon *status_icon,
                                     GdkEventButton *event);
  gboolean (* scroll_event) (GtkStatusIcon *status_icon,
                                     GdkEventScroll *event);
  gboolean (* query_tooltip) (GtkStatusIcon *status_icon,
                                     gint x,
                                     gint y,
                                     gboolean keyboard_mode,
                                     GtkTooltip *tooltip);
  void (*__gtk_reserved1);
  void (*__gtk_reserved2);
  void (*__gtk_reserved3);
  void (*__gtk_reserved4);
};
extern
GType gtk_status_icon_get_type (void) __attribute__((__const__));
extern
GtkStatusIcon *gtk_status_icon_new (void);
extern
GtkStatusIcon *gtk_status_icon_new_from_pixbuf (GdkPixbuf *pixbuf);
extern
GtkStatusIcon *gtk_status_icon_new_from_file (const gchar *filename);
extern
GtkStatusIcon *gtk_status_icon_new_from_stock (const gchar *stock_id);
extern
GtkStatusIcon *gtk_status_icon_new_from_icon_name (const gchar *icon_name);
extern
GtkStatusIcon *gtk_status_icon_new_from_gicon (GIcon *icon);
extern
void gtk_status_icon_set_from_pixbuf (GtkStatusIcon *status_icon,
         GdkPixbuf *pixbuf);
extern
void gtk_status_icon_set_from_file (GtkStatusIcon *status_icon,
         const gchar *filename);
extern
void gtk_status_icon_set_from_stock (GtkStatusIcon *status_icon,
         const gchar *stock_id);
extern
void gtk_status_icon_set_from_icon_name (GtkStatusIcon *status_icon,
         const gchar *icon_name);
extern
void gtk_status_icon_set_from_gicon (GtkStatusIcon *status_icon,
                                                          GIcon *icon);
extern
GtkImageType gtk_status_icon_get_storage_type (GtkStatusIcon *status_icon);
extern
GdkPixbuf *gtk_status_icon_get_pixbuf (GtkStatusIcon *status_icon);
extern
const gchar * gtk_status_icon_get_stock (GtkStatusIcon *status_icon);
extern
const gchar * gtk_status_icon_get_icon_name (GtkStatusIcon *status_icon);
extern
GIcon *gtk_status_icon_get_gicon (GtkStatusIcon *status_icon);
extern
gint gtk_status_icon_get_size (GtkStatusIcon *status_icon);
extern
void gtk_status_icon_set_screen (GtkStatusIcon *status_icon,
                                                          GdkScreen *screen);
extern
GdkScreen *gtk_status_icon_get_screen (GtkStatusIcon *status_icon);
extern
void gtk_status_icon_set_has_tooltip (GtkStatusIcon *status_icon,
                                                          gboolean has_tooltip);
extern
void gtk_status_icon_set_tooltip_text (GtkStatusIcon *status_icon,
                                                          const gchar *text);
extern
void gtk_status_icon_set_tooltip_markup (GtkStatusIcon *status_icon,
                                                          const gchar *markup);
extern
void gtk_status_icon_set_title (GtkStatusIcon *status_icon,
                                                          const gchar *title);
extern
const gchar * gtk_status_icon_get_title (GtkStatusIcon *status_icon);
extern
void gtk_status_icon_set_name (GtkStatusIcon *status_icon,
                                                          const gchar *name);
extern
void gtk_status_icon_set_visible (GtkStatusIcon *status_icon,
         gboolean visible);
extern
gboolean gtk_status_icon_get_visible (GtkStatusIcon *status_icon);
extern
gboolean gtk_status_icon_is_embedded (GtkStatusIcon *status_icon);
extern
void gtk_status_icon_position_menu (GtkMenu *menu,
         gint *x,
         gint *y,
         gboolean *push_in,
         gpointer user_data);
extern
gboolean gtk_status_icon_get_geometry (GtkStatusIcon *status_icon,
         GdkScreen **screen,
         GdkRectangle *area,
         GtkOrientation *orientation);
extern
gboolean gtk_status_icon_get_has_tooltip (GtkStatusIcon *status_icon);
extern
gchar *gtk_status_icon_get_tooltip_text (GtkStatusIcon *status_icon);
extern
gchar *gtk_status_icon_get_tooltip_markup (GtkStatusIcon *status_icon);
extern
guint32 gtk_status_icon_get_x11_window_id (GtkStatusIcon *status_icon);
typedef struct _GtkStyleClass GtkStyleClass;
typedef struct _GtkThemeEngine GtkThemeEngine;
typedef struct _GtkRcProperty GtkRcProperty;
typedef enum
{
  GTK_EXPANDER_COLLAPSED,
  GTK_EXPANDER_SEMI_COLLAPSED,
  GTK_EXPANDER_SEMI_EXPANDED,
  GTK_EXPANDER_EXPANDED
} GtkExpanderStyle;
struct _GtkStyle
{
  GObject parent_instance;
  GdkColor fg[5];
  GdkColor bg[5];
  GdkColor light[5];
  GdkColor dark[5];
  GdkColor mid[5];
  GdkColor text[5];
  GdkColor base[5];
  GdkColor text_aa[5];
  GdkColor black;
  GdkColor white;
  PangoFontDescription *font_desc;
  gint xthickness;
  gint ythickness;
  cairo_pattern_t *background[5];
  gint attach_count;
  GdkVisual *visual;
  PangoFontDescription *private_font_desc;
  GtkRcStyle *rc_style;
  GSList *styles;
  GArray *property_cache;
  GSList *icon_factories;
};
struct _GtkStyleClass
{
  GObjectClass parent_class;
  void (*realize) (GtkStyle *style);
  void (*unrealize) (GtkStyle *style);
  void (*copy) (GtkStyle *style,
                                 GtkStyle *src);
  GtkStyle *(*clone) (GtkStyle *style);
  void (*init_from_rc) (GtkStyle *style,
                                 GtkRcStyle *rc_style);
  void (*set_background) (GtkStyle *style,
                                 GdkWindow *window,
                                 GtkStateType state_type);
  GdkPixbuf * (* render_icon) (GtkStyle *style,
                                 const GtkIconSource *source,
                                 GtkTextDirection direction,
                                 GtkStateType state,
                                 GtkIconSize size,
                                 GtkWidget *widget,
                                 const gchar *detail);
  void (*draw_hline) (GtkStyle *style,
                                 cairo_t *cr,
                                 GtkStateType state_type,
                                 GtkWidget *widget,
                                 const gchar *detail,
                                 gint x1,
                                 gint x2,
                                 gint y);
  void (*draw_vline) (GtkStyle *style,
                                 cairo_t *cr,
                                 GtkStateType state_type,
                                 GtkWidget *widget,
                                 const gchar *detail,
                                 gint y1_,
                                 gint y2_,
                                 gint x);
  void (*draw_shadow) (GtkStyle *style,
                                 cairo_t *cr,
                                 GtkStateType state_type,
                                 GtkShadowType shadow_type,
                                 GtkWidget *widget,
                                 const gchar *detail,
                                 gint x,
                                 gint y,
                                 gint width,
                                 gint height);
  void (*draw_arrow) (GtkStyle *style,
                                 cairo_t *cr,
                                 GtkStateType state_type,
                                 GtkShadowType shadow_type,
                                 GtkWidget *widget,
                                 const gchar *detail,
                                 GtkArrowType arrow_type,
                                 gboolean fill,
                                 gint x,
                                 gint y,
                                 gint width,
                                 gint height);
  void (*draw_diamond) (GtkStyle *style,
                                 cairo_t *cr,
                                 GtkStateType state_type,
                                 GtkShadowType shadow_type,
                                 GtkWidget *widget,
                                 const gchar *detail,
                                 gint x,
                                 gint y,
                                 gint width,
                                 gint height);
  void (*draw_box) (GtkStyle *style,
                                 cairo_t *cr,
                                 GtkStateType state_type,
                                 GtkShadowType shadow_type,
                                 GtkWidget *widget,
                                 const gchar *detail,
                                 gint x,
                                 gint y,
                                 gint width,
                                 gint height);
  void (*draw_flat_box) (GtkStyle *style,
                                 cairo_t *cr,
                                 GtkStateType state_type,
                                 GtkShadowType shadow_type,
                                 GtkWidget *widget,
                                 const gchar *detail,
                                 gint x,
                                 gint y,
                                 gint width,
                                 gint height);
  void (*draw_check) (GtkStyle *style,
                                 cairo_t *cr,
                                 GtkStateType state_type,
                                 GtkShadowType shadow_type,
                                 GtkWidget *widget,
                                 const gchar *detail,
                                 gint x,
                                 gint y,
                                 gint width,
                                 gint height);
  void (*draw_option) (GtkStyle *style,
                                 cairo_t *cr,
                                 GtkStateType state_type,
                                 GtkShadowType shadow_type,
                                 GtkWidget *widget,
                                 const gchar *detail,
                                 gint x,
                                 gint y,
                                 gint width,
                                 gint height);
  void (*draw_tab) (GtkStyle *style,
                                 cairo_t *cr,
                                 GtkStateType state_type,
                                 GtkShadowType shadow_type,
                                 GtkWidget *widget,
                                 const gchar *detail,
                                 gint x,
                                 gint y,
                                 gint width,
                                 gint height);
  void (*draw_shadow_gap) (GtkStyle *style,
                                 cairo_t *cr,
                                 GtkStateType state_type,
                                 GtkShadowType shadow_type,
                                 GtkWidget *widget,
                                 const gchar *detail,
                                 gint x,
                                 gint y,
                                 gint width,
                                 gint height,
                                 GtkPositionType gap_side,
                                 gint gap_x,
                                 gint gap_width);
  void (*draw_box_gap) (GtkStyle *style,
                                 cairo_t *cr,
                                 GtkStateType state_type,
                                 GtkShadowType shadow_type,
                                 GtkWidget *widget,
                                 const gchar *detail,
                                 gint x,
                                 gint y,
                                 gint width,
                                 gint height,
                                 GtkPositionType gap_side,
                                 gint gap_x,
                                 gint gap_width);
  void (*draw_extension) (GtkStyle *style,
                                 cairo_t *cr,
                                 GtkStateType state_type,
                                 GtkShadowType shadow_type,
                                 GtkWidget *widget,
                                 const gchar *detail,
                                 gint x,
                                 gint y,
                                 gint width,
                                 gint height,
                                 GtkPositionType gap_side);
  void (*draw_focus) (GtkStyle *style,
                                 cairo_t *cr,
                                 GtkStateType state_type,
                                 GtkWidget *widget,
                                 const gchar *detail,
                                 gint x,
                                 gint y,
                                 gint width,
                                 gint height);
  void (*draw_slider) (GtkStyle *style,
                                 cairo_t *cr,
                                 GtkStateType state_type,
                                 GtkShadowType shadow_type,
                                 GtkWidget *widget,
                                 const gchar *detail,
                                 gint x,
                                 gint y,
                                 gint width,
                                 gint height,
                                 GtkOrientation orientation);
  void (*draw_handle) (GtkStyle *style,
                                 cairo_t *cr,
                                 GtkStateType state_type,
                                 GtkShadowType shadow_type,
                                 GtkWidget *widget,
                                 const gchar *detail,
                                 gint x,
                                 gint y,
                                 gint width,
                                 gint height,
                                 GtkOrientation orientation);
  void (*draw_expander) (GtkStyle *style,
                                 cairo_t *cr,
                                 GtkStateType state_type,
                                 GtkWidget *widget,
                                 const gchar *detail,
                                 gint x,
                                 gint y,
                                 GtkExpanderStyle expander_style);
  void (*draw_layout) (GtkStyle *style,
                                 cairo_t *cr,
                                 GtkStateType state_type,
                                 gboolean use_text,
                                 GtkWidget *widget,
                                 const gchar *detail,
                                 gint x,
                                 gint y,
                                 PangoLayout *layout);
  void (*draw_resize_grip) (GtkStyle *style,
                                 cairo_t *cr,
                                 GtkStateType state_type,
                                 GtkWidget *widget,
                                 const gchar *detail,
                                 GdkWindowEdge edge,
                                 gint x,
                                 gint y,
                                 gint width,
                                 gint height);
  void (*draw_spinner) (GtkStyle *style,
                                 cairo_t *cr,
                                 GtkStateType state_type,
                                 GtkWidget *widget,
                                 const gchar *detail,
                                 guint step,
                                 gint x,
                                 gint y,
                                 gint width,
                                 gint height);
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
  void (*_gtk_reserved5) (void);
  void (*_gtk_reserved6) (void);
  void (*_gtk_reserved7) (void);
  void (*_gtk_reserved8) (void);
  void (*_gtk_reserved9) (void);
  void (*_gtk_reserved10) (void);
  void (*_gtk_reserved11) (void);
};
extern
GType gtk_style_get_type (void) __attribute__((__const__));
extern
GtkStyle* gtk_style_new (void);
extern
GtkStyle* gtk_style_copy (GtkStyle *style);
extern
GtkStyle* gtk_style_attach (GtkStyle *style,
                                              GdkWindow *window);
extern
void gtk_style_detach (GtkStyle *style);
extern
void gtk_style_set_background (GtkStyle *style,
                                              GdkWindow *window,
                                              GtkStateType state_type);
extern
void gtk_style_apply_default_background (GtkStyle *style,
                                              cairo_t *cr,
                                              GdkWindow *window,
                                              GtkStateType state_type,
                                              gint x,
                                              gint y,
                                              gint width,
                                              gint height);
extern
GtkIconSet* gtk_style_lookup_icon_set (GtkStyle *style,
                                              const gchar *stock_id);
extern
gboolean gtk_style_lookup_color (GtkStyle *style,
                                              const gchar *color_name,
                                              GdkColor *color);
extern
GdkPixbuf* gtk_style_render_icon (GtkStyle *style,
                                       const GtkIconSource *source,
                                       GtkTextDirection direction,
                                       GtkStateType state,
                                       GtkIconSize size,
                                       GtkWidget *widget,
                                       const gchar *detail);
extern
void gtk_paint_hline (GtkStyle *style,
                                  cairo_t *cr,
                                  GtkStateType state_type,
                                  GtkWidget *widget,
                                  const gchar *detail,
                                  gint x1,
                                  gint x2,
                                  gint y);
extern
void gtk_paint_vline (GtkStyle *style,
                                  cairo_t *cr,
                                  GtkStateType state_type,
                                  GtkWidget *widget,
                                  const gchar *detail,
                                  gint y1_,
                                  gint y2_,
                                  gint x);
extern
void gtk_paint_shadow (GtkStyle *style,
                                  cairo_t *cr,
                                  GtkStateType state_type,
                                  GtkShadowType shadow_type,
                                  GtkWidget *widget,
                                  const gchar *detail,
                                  gint x,
                                  gint y,
                                  gint width,
                                  gint height);
extern
void gtk_paint_arrow (GtkStyle *style,
                                  cairo_t *cr,
                                  GtkStateType state_type,
                                  GtkShadowType shadow_type,
                                  GtkWidget *widget,
                                  const gchar *detail,
                                  GtkArrowType arrow_type,
                                  gboolean fill,
                                  gint x,
                                  gint y,
                                  gint width,
                                  gint height);
extern
void gtk_paint_diamond (GtkStyle *style,
                                  cairo_t *cr,
                                  GtkStateType state_type,
                                  GtkShadowType shadow_type,
                                  GtkWidget *widget,
                                  const gchar *detail,
                                  gint x,
                                  gint y,
                                  gint width,
                                  gint height);
extern
void gtk_paint_box (GtkStyle *style,
                                  cairo_t *cr,
                                  GtkStateType state_type,
                                  GtkShadowType shadow_type,
                                  GtkWidget *widget,
                                  const gchar *detail,
                                  gint x,
                                  gint y,
                                  gint width,
                                  gint height);
extern
void gtk_paint_flat_box (GtkStyle *style,
                                  cairo_t *cr,
                                  GtkStateType state_type,
                                  GtkShadowType shadow_type,
                                  GtkWidget *widget,
                                  const gchar *detail,
                                  gint x,
                                  gint y,
                                  gint width,
                                  gint height);
extern
void gtk_paint_check (GtkStyle *style,
                                  cairo_t *cr,
                                  GtkStateType state_type,
                                  GtkShadowType shadow_type,
                                  GtkWidget *widget,
                                  const gchar *detail,
                                  gint x,
                                  gint y,
                                  gint width,
                                  gint height);
extern
void gtk_paint_option (GtkStyle *style,
                                  cairo_t *cr,
                                  GtkStateType state_type,
                                  GtkShadowType shadow_type,
                                  GtkWidget *widget,
                                  const gchar *detail,
                                  gint x,
                                  gint y,
                                  gint width,
                                  gint height);
extern
void gtk_paint_tab (GtkStyle *style,
                                  cairo_t *cr,
                                  GtkStateType state_type,
                                  GtkShadowType shadow_type,
                                  GtkWidget *widget,
                                  const gchar *detail,
                                  gint x,
                                  gint y,
                                  gint width,
                                  gint height);
extern
void gtk_paint_shadow_gap (GtkStyle *style,
                                  cairo_t *cr,
                                  GtkStateType state_type,
                                  GtkShadowType shadow_type,
                                  GtkWidget *widget,
                                  const gchar *detail,
                                  gint x,
                                  gint y,
                                  gint width,
                                  gint height,
                                  GtkPositionType gap_side,
                                  gint gap_x,
                                  gint gap_width);
extern
void gtk_paint_box_gap (GtkStyle *style,
                                  cairo_t *cr,
                                  GtkStateType state_type,
                                  GtkShadowType shadow_type,
                                  GtkWidget *widget,
                                  const gchar *detail,
                                  gint x,
                                  gint y,
                                  gint width,
                                  gint height,
                                  GtkPositionType gap_side,
                                  gint gap_x,
                                  gint gap_width);
extern
void gtk_paint_extension (GtkStyle *style,
                                  cairo_t *cr,
                                  GtkStateType state_type,
                                  GtkShadowType shadow_type,
                                  GtkWidget *widget,
                                  const gchar *detail,
                                  gint x,
                                  gint y,
                                  gint width,
                                  gint height,
                                  GtkPositionType gap_side);
extern
void gtk_paint_focus (GtkStyle *style,
                                  cairo_t *cr,
                                  GtkStateType state_type,
                                  GtkWidget *widget,
                                  const gchar *detail,
                                  gint x,
                                  gint y,
                                  gint width,
                                  gint height);
extern
void gtk_paint_slider (GtkStyle *style,
                                  cairo_t *cr,
                                  GtkStateType state_type,
                                  GtkShadowType shadow_type,
                                  GtkWidget *widget,
                                  const gchar *detail,
                                  gint x,
                                  gint y,
                                  gint width,
                                  gint height,
                                  GtkOrientation orientation);
extern
void gtk_paint_handle (GtkStyle *style,
                                  cairo_t *cr,
                                  GtkStateType state_type,
                                  GtkShadowType shadow_type,
                                  GtkWidget *widget,
                                  const gchar *detail,
                                  gint x,
                                  gint y,
                                  gint width,
                                  gint height,
                                  GtkOrientation orientation);
extern
void gtk_paint_expander (GtkStyle *style,
                                  cairo_t *cr,
                                  GtkStateType state_type,
                                  GtkWidget *widget,
                                  const gchar *detail,
                                  gint x,
                                  gint y,
                                  GtkExpanderStyle expander_style);
extern
void gtk_paint_layout (GtkStyle *style,
                                  cairo_t *cr,
                                  GtkStateType state_type,
                                  gboolean use_text,
                                  GtkWidget *widget,
                                  const gchar *detail,
                                  gint x,
                                  gint y,
                                  PangoLayout *layout);
extern
void gtk_paint_resize_grip (GtkStyle *style,
                                  cairo_t *cr,
                                  GtkStateType state_type,
                                  GtkWidget *widget,
                                  const gchar *detail,
                                  GdkWindowEdge edge,
                                  gint x,
                                  gint y,
                                  gint width,
                                  gint height);
extern
void gtk_paint_spinner (GtkStyle *style,
                                  cairo_t *cr,
                                  GtkStateType state_type,
                                  GtkWidget *widget,
                                  const gchar *detail,
                                  guint step,
                                  gint x,
                                  gint y,
                                  gint width,
                                  gint height);
extern
void gtk_style_get_style_property (GtkStyle *style,
                                   GType widget_type,
                                   const gchar *property_name,
                                   GValue *value);
extern
void gtk_style_get_valist (GtkStyle *style,
                                   GType widget_type,
                                   const gchar *first_property_name,
                                   va_list var_args);
extern
void gtk_style_get (GtkStyle *style,
                                   GType widget_type,
                                   const gchar *first_property_name,
                                   ...) __attribute__((__sentinel__));
GtkStyle* _gtk_style_new_for_path (GdkScreen *screen,
                                           GtkWidgetPath *path);
void _gtk_style_shade (const GdkColor *a,
                                           GdkColor *b,
                                           gdouble k);
extern
gboolean gtk_style_has_context (GtkStyle *style);
extern
void gtk_widget_style_attach (GtkWidget *widget);
extern
gboolean gtk_widget_has_rc_style (GtkWidget *widget);
extern
void gtk_widget_set_style (GtkWidget *widget,
                                           GtkStyle *style);
extern
void gtk_widget_ensure_style (GtkWidget *widget);
extern
GtkStyle * gtk_widget_get_style (GtkWidget *widget);
extern
void gtk_widget_modify_style (GtkWidget *widget,
                                           GtkRcStyle *style);
extern
GtkRcStyle *gtk_widget_get_modifier_style (GtkWidget *widget);
extern
void gtk_widget_modify_fg (GtkWidget *widget,
                                           GtkStateType state,
                                           const GdkColor *color);
extern
void gtk_widget_modify_bg (GtkWidget *widget,
                                           GtkStateType state,
                                           const GdkColor *color);
extern
void gtk_widget_modify_text (GtkWidget *widget,
                                           GtkStateType state,
                                           const GdkColor *color);
extern
void gtk_widget_modify_base (GtkWidget *widget,
                                           GtkStateType state,
                                           const GdkColor *color);
extern
void gtk_widget_modify_cursor (GtkWidget *widget,
                                           const GdkColor *primary,
                                           const GdkColor *secondary);
extern
void gtk_widget_modify_font (GtkWidget *widget,
                                           PangoFontDescription *font_desc);
extern
void gtk_widget_reset_rc_styles (GtkWidget *widget);
extern
GtkStyle* gtk_widget_get_default_style (void);
extern
void gtk_widget_path (GtkWidget *widget,
                                           guint *path_length,
                                           gchar **path,
                                           gchar **path_reversed);
extern
void gtk_widget_class_path (GtkWidget *widget,
                                           guint *path_length,
                                           gchar **path,
                                           gchar **path_reversed);
extern
GdkPixbuf *gtk_widget_render_icon (GtkWidget *widget,
                                           const gchar *stock_id,
                                           GtkIconSize size,
                                           const gchar *detail);
typedef struct _GtkTable GtkTable;
typedef struct _GtkTablePrivate GtkTablePrivate;
typedef struct _GtkTableClass GtkTableClass;
typedef struct _GtkTableChild GtkTableChild;
typedef struct _GtkTableRowCol GtkTableRowCol;
struct _GtkTable
{
  GtkContainer container;
  GtkTablePrivate *priv;
};
struct _GtkTableClass
{
  GtkContainerClass parent_class;
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
struct _GtkTableChild
{
  GtkWidget *widget;
  guint16 left_attach;
  guint16 right_attach;
  guint16 top_attach;
  guint16 bottom_attach;
  guint16 xpadding;
  guint16 ypadding;
  guint xexpand : 1;
  guint yexpand : 1;
  guint xshrink : 1;
  guint yshrink : 1;
  guint xfill : 1;
  guint yfill : 1;
};
struct _GtkTableRowCol
{
  guint16 requisition;
  guint16 allocation;
  guint16 spacing;
  guint need_expand : 1;
  guint need_shrink : 1;
  guint expand : 1;
  guint shrink : 1;
  guint empty : 1;
};
typedef enum
{
  GTK_EXPAND = 1 << 0,
  GTK_SHRINK = 1 << 1,
  GTK_FILL = 1 << 2
} GtkAttachOptions;
extern
GType gtk_table_get_type (void) __attribute__((__const__));
extern
GtkWidget* gtk_table_new (guint rows,
           guint columns,
           gboolean homogeneous);
extern
void gtk_table_resize (GtkTable *table,
           guint rows,
           guint columns);
extern
void gtk_table_attach (GtkTable *table,
           GtkWidget *child,
           guint left_attach,
           guint right_attach,
           guint top_attach,
           guint bottom_attach,
           GtkAttachOptions xoptions,
           GtkAttachOptions yoptions,
           guint xpadding,
           guint ypadding);
extern
void gtk_table_attach_defaults (GtkTable *table,
           GtkWidget *widget,
           guint left_attach,
           guint right_attach,
           guint top_attach,
           guint bottom_attach);
extern
void gtk_table_set_row_spacing (GtkTable *table,
           guint row,
           guint spacing);
extern
guint gtk_table_get_row_spacing (GtkTable *table,
           guint row);
extern
void gtk_table_set_col_spacing (GtkTable *table,
           guint column,
           guint spacing);
extern
guint gtk_table_get_col_spacing (GtkTable *table,
           guint column);
extern
void gtk_table_set_row_spacings (GtkTable *table,
           guint spacing);
extern
guint gtk_table_get_default_row_spacing (GtkTable *table);
extern
void gtk_table_set_col_spacings (GtkTable *table,
           guint spacing);
extern
guint gtk_table_get_default_col_spacing (GtkTable *table);
extern
void gtk_table_set_homogeneous (GtkTable *table,
           gboolean homogeneous);
extern
gboolean gtk_table_get_homogeneous (GtkTable *table);
extern
void gtk_table_get_size (GtkTable *table,
                                       guint *rows,
                                       guint *columns);
typedef struct _GtkTearoffMenuItem GtkTearoffMenuItem;
typedef struct _GtkTearoffMenuItemPrivate GtkTearoffMenuItemPrivate;
typedef struct _GtkTearoffMenuItemClass GtkTearoffMenuItemClass;
struct _GtkTearoffMenuItem
{
  GtkMenuItem menu_item;
  GtkTearoffMenuItemPrivate *priv;
};
struct _GtkTearoffMenuItemClass
{
  GtkMenuItemClass parent_class;
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
extern
GType gtk_tearoff_menu_item_get_type (void) __attribute__((__const__));
extern
GtkWidget* gtk_tearoff_menu_item_new (void);
typedef struct _GtkThemingEngine GtkThemingEngine;
typedef struct GtkThemingEnginePrivate GtkThemingEnginePrivate;
typedef struct _GtkThemingEngineClass GtkThemingEngineClass;
struct _GtkThemingEngine
{
  GObject parent_object;
  GtkThemingEnginePrivate *priv;
};
struct _GtkThemingEngineClass
{
  GObjectClass parent_class;
  void (* render_line) (GtkThemingEngine *engine,
                        cairo_t *cr,
                        gdouble x0,
                        gdouble y0,
                        gdouble x1,
                        gdouble y1);
  void (* render_background) (GtkThemingEngine *engine,
                              cairo_t *cr,
                              gdouble x,
                              gdouble y,
                              gdouble width,
                              gdouble height);
  void (* render_frame) (GtkThemingEngine *engine,
                         cairo_t *cr,
                         gdouble x,
                         gdouble y,
                         gdouble width,
                         gdouble height);
  void (* render_frame_gap) (GtkThemingEngine *engine,
                             cairo_t *cr,
                             gdouble x,
                             gdouble y,
                             gdouble width,
                             gdouble height,
                             GtkPositionType gap_side,
                             gdouble xy0_gap,
                             gdouble xy1_gap);
  void (* render_extension) (GtkThemingEngine *engine,
                             cairo_t *cr,
                             gdouble x,
                             gdouble y,
                             gdouble width,
                             gdouble height,
                             GtkPositionType gap_side);
  void (* render_check) (GtkThemingEngine *engine,
                         cairo_t *cr,
                         gdouble x,
                         gdouble y,
                         gdouble width,
                         gdouble height);
  void (* render_option) (GtkThemingEngine *engine,
                          cairo_t *cr,
                          gdouble x,
                          gdouble y,
                          gdouble width,
                          gdouble height);
  void (* render_arrow) (GtkThemingEngine *engine,
                         cairo_t *cr,
                         gdouble angle,
                         gdouble x,
                         gdouble y,
                         gdouble size);
  void (* render_expander) (GtkThemingEngine *engine,
                            cairo_t *cr,
                            gdouble x,
                            gdouble y,
                            gdouble width,
                            gdouble height);
  void (* render_focus) (GtkThemingEngine *engine,
                         cairo_t *cr,
                         gdouble x,
                         gdouble y,
                         gdouble width,
                         gdouble height);
  void (* render_layout) (GtkThemingEngine *engine,
                          cairo_t *cr,
                          gdouble x,
                          gdouble y,
                          PangoLayout *layout);
  void (* render_slider) (GtkThemingEngine *engine,
                          cairo_t *cr,
                          gdouble x,
                          gdouble y,
                          gdouble width,
                          gdouble height,
                          GtkOrientation orientation);
  void (* render_handle) (GtkThemingEngine *engine,
                             cairo_t *cr,
                             gdouble x,
                             gdouble y,
                             gdouble width,
                             gdouble height);
  void (* render_activity) (GtkThemingEngine *engine,
                            cairo_t *cr,
                            gdouble x,
                            gdouble y,
                            gdouble width,
                            gdouble height);
  GdkPixbuf * (* render_icon_pixbuf) (GtkThemingEngine *engine,
                                      const GtkIconSource *source,
                                      GtkIconSize size);
  void (* render_icon) (GtkThemingEngine *engine,
                        cairo_t *cr,
   GdkPixbuf *pixbuf,
                        gdouble x,
                        gdouble y);
  void (* render_icon_surface) (GtkThemingEngine *engine,
    cairo_t *cr,
    cairo_surface_t *surface,
    gdouble x,
    gdouble y);
  gpointer padding[14];
};
extern
GType gtk_theming_engine_get_type (void) __attribute__((__const__));
extern
void gtk_theming_engine_register_property (const gchar *name_space,
                                           GtkStylePropertyParser parse_func,
                                           GParamSpec *pspec);
extern
void gtk_theming_engine_get_property (GtkThemingEngine *engine,
                                      const gchar *property,
                                      GtkStateFlags state,
                                      GValue *value);
extern
void gtk_theming_engine_get_valist (GtkThemingEngine *engine,
                                      GtkStateFlags state,
                                      va_list args);
extern
void gtk_theming_engine_get (GtkThemingEngine *engine,
                                      GtkStateFlags state,
                                      ...) __attribute__((__sentinel__));
extern
void gtk_theming_engine_get_style_property (GtkThemingEngine *engine,
                                            const gchar *property_name,
                                            GValue *value);
extern
void gtk_theming_engine_get_style_valist (GtkThemingEngine *engine,
                                            va_list args);
extern
void gtk_theming_engine_get_style (GtkThemingEngine *engine,
                                            ...);
extern
gboolean gtk_theming_engine_lookup_color (GtkThemingEngine *engine,
                                          const gchar *color_name,
                                          GdkRGBA *color);
extern
const GtkWidgetPath * gtk_theming_engine_get_path (GtkThemingEngine *engine);
extern
gboolean gtk_theming_engine_has_class (GtkThemingEngine *engine,
                                        const gchar *style_class);
extern
gboolean gtk_theming_engine_has_region (GtkThemingEngine *engine,
                                        const gchar *style_region,
                                        GtkRegionFlags *flags);
extern
GtkStateFlags gtk_theming_engine_get_state (GtkThemingEngine *engine);
extern
gboolean gtk_theming_engine_state_is_running (GtkThemingEngine *engine,
                                                   GtkStateType state,
                                                   gdouble *progress);
extern
GtkTextDirection gtk_theming_engine_get_direction (GtkThemingEngine *engine);
extern
GtkJunctionSides gtk_theming_engine_get_junction_sides (GtkThemingEngine *engine);
extern
void gtk_theming_engine_get_color (GtkThemingEngine *engine,
                                              GtkStateFlags state,
                                              GdkRGBA *color);
extern
void gtk_theming_engine_get_background_color (GtkThemingEngine *engine,
                                              GtkStateFlags state,
                                              GdkRGBA *color);
extern
void gtk_theming_engine_get_border_color (GtkThemingEngine *engine,
                                              GtkStateFlags state,
                                              GdkRGBA *color);
extern
void gtk_theming_engine_get_border (GtkThemingEngine *engine,
                                     GtkStateFlags state,
                                     GtkBorder *border);
extern
void gtk_theming_engine_get_padding (GtkThemingEngine *engine,
                                     GtkStateFlags state,
                                     GtkBorder *padding);
extern
void gtk_theming_engine_get_margin (GtkThemingEngine *engine,
                                     GtkStateFlags state,
                                     GtkBorder *margin);
extern
const PangoFontDescription * gtk_theming_engine_get_font (GtkThemingEngine *engine,
                                                          GtkStateFlags state);
extern
GtkThemingEngine * gtk_theming_engine_load (const gchar *name);
extern
GdkScreen * gtk_theming_engine_get_screen (GtkThemingEngine *engine);
typedef struct _GtkUIManager GtkUIManager;
typedef struct _GtkUIManagerClass GtkUIManagerClass;
typedef struct _GtkUIManagerPrivate GtkUIManagerPrivate;
struct _GtkUIManager {
  GObject parent;
  GtkUIManagerPrivate *private_data;
};
struct _GtkUIManagerClass {
  GObjectClass parent_class;
  void (* add_widget) (GtkUIManager *manager,
                             GtkWidget *widget);
  void (* actions_changed) (GtkUIManager *manager);
  void (* connect_proxy) (GtkUIManager *manager,
        GtkAction *action,
        GtkWidget *proxy);
  void (* disconnect_proxy) (GtkUIManager *manager,
        GtkAction *action,
        GtkWidget *proxy);
  void (* pre_activate) (GtkUIManager *manager,
        GtkAction *action);
  void (* post_activate) (GtkUIManager *manager,
        GtkAction *action);
  GtkWidget * (* get_widget) (GtkUIManager *manager,
                              const gchar *path);
  GtkAction * (* get_action) (GtkUIManager *manager,
                              const gchar *path);
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
typedef enum {
  GTK_UI_MANAGER_AUTO = 0,
  GTK_UI_MANAGER_MENUBAR = 1 << 0,
  GTK_UI_MANAGER_MENU = 1 << 1,
  GTK_UI_MANAGER_TOOLBAR = 1 << 2,
  GTK_UI_MANAGER_PLACEHOLDER = 1 << 3,
  GTK_UI_MANAGER_POPUP = 1 << 4,
  GTK_UI_MANAGER_MENUITEM = 1 << 5,
  GTK_UI_MANAGER_TOOLITEM = 1 << 6,
  GTK_UI_MANAGER_SEPARATOR = 1 << 7,
  GTK_UI_MANAGER_ACCELERATOR = 1 << 8,
  GTK_UI_MANAGER_POPUP_WITH_ACCELS = 1 << 9
} GtkUIManagerItemType;
extern
GType gtk_ui_manager_get_type (void) __attribute__((__const__));
extern
GtkUIManager *gtk_ui_manager_new (void);
extern
void gtk_ui_manager_set_add_tearoffs (GtkUIManager *manager,
                                                   gboolean add_tearoffs);
extern
gboolean gtk_ui_manager_get_add_tearoffs (GtkUIManager *manager);
extern
void gtk_ui_manager_insert_action_group (GtkUIManager *manager,
         GtkActionGroup *action_group,
         gint pos);
extern
void gtk_ui_manager_remove_action_group (GtkUIManager *manager,
         GtkActionGroup *action_group);
extern
GList *gtk_ui_manager_get_action_groups (GtkUIManager *manager);
extern
GtkAccelGroup *gtk_ui_manager_get_accel_group (GtkUIManager *manager);
extern
GtkWidget *gtk_ui_manager_get_widget (GtkUIManager *manager,
         const gchar *path);
extern
GSList *gtk_ui_manager_get_toplevels (GtkUIManager *manager,
         GtkUIManagerItemType types);
extern
GtkAction *gtk_ui_manager_get_action (GtkUIManager *manager,
         const gchar *path);
extern
guint gtk_ui_manager_add_ui_from_string (GtkUIManager *manager,
         const gchar *buffer,
         gssize length,
         GError **error);
extern
guint gtk_ui_manager_add_ui_from_file (GtkUIManager *manager,
         const gchar *filename,
         GError **error);
extern
guint gtk_ui_manager_add_ui_from_resource(GtkUIManager *manager,
         const gchar *resource_path,
         GError **error);
extern
void gtk_ui_manager_add_ui (GtkUIManager *manager,
         guint merge_id,
         const gchar *path,
         const gchar *name,
         const gchar *action,
         GtkUIManagerItemType type,
         gboolean top);
extern
void gtk_ui_manager_remove_ui (GtkUIManager *manager,
         guint merge_id);
extern
gchar *gtk_ui_manager_get_ui (GtkUIManager *manager);
extern
void gtk_ui_manager_ensure_update (GtkUIManager *manager);
extern
guint gtk_ui_manager_new_merge_id (GtkUIManager *manager);
typedef struct _GtkVButtonBox GtkVButtonBox;
typedef struct _GtkVButtonBoxClass GtkVButtonBoxClass;
struct _GtkVButtonBox
{
  GtkButtonBox button_box;
};
struct _GtkVButtonBoxClass
{
  GtkButtonBoxClass parent_class;
};
extern
GType gtk_vbutton_box_get_type (void) __attribute__((__const__));
extern
GtkWidget *gtk_vbutton_box_new (void);
typedef struct _GtkVBox GtkVBox;
typedef struct _GtkVBoxClass GtkVBoxClass;
struct _GtkVBox
{
  GtkBox box;
};
struct _GtkVBoxClass
{
  GtkBoxClass parent_class;
};
extern
GType gtk_vbox_get_type (void) __attribute__((__const__));
extern
GtkWidget * gtk_vbox_new (gboolean homogeneous,
                               gint spacing);
typedef struct _GtkVPaned GtkVPaned;
typedef struct _GtkVPanedClass GtkVPanedClass;
struct _GtkVPaned
{
  GtkPaned paned;
};
struct _GtkVPanedClass
{
  GtkPanedClass parent_class;
};
extern
GType gtk_vpaned_get_type (void) __attribute__((__const__));
extern
GtkWidget * gtk_vpaned_new (void);
typedef struct _GtkVScale GtkVScale;
typedef struct _GtkVScaleClass GtkVScaleClass;
struct _GtkVScale
{
  GtkScale scale;
};
struct _GtkVScaleClass
{
  GtkScaleClass parent_class;
};
extern
GType gtk_vscale_get_type (void) __attribute__((__const__));
extern
GtkWidget* gtk_vscale_new (GtkAdjustment *adjustment);
extern
GtkWidget* gtk_vscale_new_with_range (gdouble min,
                                      gdouble max,
                                      gdouble step);
typedef struct _GtkVScrollbar GtkVScrollbar;
typedef struct _GtkVScrollbarClass GtkVScrollbarClass;
struct _GtkVScrollbar
{
  GtkScrollbar scrollbar;
};
struct _GtkVScrollbarClass
{
  GtkScrollbarClass parent_class;
};
extern
GType gtk_vscrollbar_get_type (void) __attribute__((__const__));
extern
GtkWidget* gtk_vscrollbar_new (GtkAdjustment *adjustment);
typedef struct _GtkVSeparator GtkVSeparator;
typedef struct _GtkVSeparatorClass GtkVSeparatorClass;
struct _GtkVSeparator
{
  GtkSeparator separator;
};
struct _GtkVSeparatorClass
{
  GtkSeparatorClass parent_class;
};
extern
GType gtk_vseparator_get_type (void) __attribute__((__const__));
extern
GtkWidget* gtk_vseparator_new (void);
typedef GtkAboutDialog *GtkAboutDialog_autoptr;
 static inline void glib_autoptr_cleanup_GtkAboutDialog (GtkAboutDialog **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkAccelGroup *GtkAccelGroup_autoptr;
 static inline void glib_autoptr_cleanup_GtkAccelGroup (GtkAccelGroup **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkAccelLabel *GtkAccelLabel_autoptr;
 static inline void glib_autoptr_cleanup_GtkAccelLabel (GtkAccelLabel **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkAccelMap *GtkAccelMap_autoptr;
 static inline void glib_autoptr_cleanup_GtkAccelMap (GtkAccelMap **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkAccessible *GtkAccessible_autoptr;
 static inline void glib_autoptr_cleanup_GtkAccessible (GtkAccessible **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkActionBar *GtkActionBar_autoptr;
 static inline void glib_autoptr_cleanup_GtkActionBar (GtkActionBar **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkActionable *GtkActionable_autoptr;
 static inline void glib_autoptr_cleanup_GtkActionable (GtkActionable **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkAdjustment *GtkAdjustment_autoptr;
 static inline void glib_autoptr_cleanup_GtkAdjustment (GtkAdjustment **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkAppChooser *GtkAppChooser_autoptr;
 static inline void glib_autoptr_cleanup_GtkAppChooser (GtkAppChooser **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkAppChooserButton *GtkAppChooserButton_autoptr;
 static inline void glib_autoptr_cleanup_GtkAppChooserButton (GtkAppChooserButton **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkAppChooserDialog *GtkAppChooserDialog_autoptr;
 static inline void glib_autoptr_cleanup_GtkAppChooserDialog (GtkAppChooserDialog **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkAppChooserWidget *GtkAppChooserWidget_autoptr;
 static inline void glib_autoptr_cleanup_GtkAppChooserWidget (GtkAppChooserWidget **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkApplication *GtkApplication_autoptr;
 static inline void glib_autoptr_cleanup_GtkApplication (GtkApplication **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkApplicationWindow *GtkApplicationWindow_autoptr;
 static inline void glib_autoptr_cleanup_GtkApplicationWindow (GtkApplicationWindow **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkAspectFrame *GtkAspectFrame_autoptr;
 static inline void glib_autoptr_cleanup_GtkAspectFrame (GtkAspectFrame **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkAssistant *GtkAssistant_autoptr;
 static inline void glib_autoptr_cleanup_GtkAssistant (GtkAssistant **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkBin *GtkBin_autoptr;
 static inline void glib_autoptr_cleanup_GtkBin (GtkBin **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkBox *GtkBox_autoptr;
 static inline void glib_autoptr_cleanup_GtkBox (GtkBox **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkBuildable *GtkBuildable_autoptr;
 static inline void glib_autoptr_cleanup_GtkBuildable (GtkBuildable **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkBuilder *GtkBuilder_autoptr;
 static inline void glib_autoptr_cleanup_GtkBuilder (GtkBuilder **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkButton *GtkButton_autoptr;
 static inline void glib_autoptr_cleanup_GtkButton (GtkButton **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkButtonBox *GtkButtonBox_autoptr;
 static inline void glib_autoptr_cleanup_GtkButtonBox (GtkButtonBox **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkCalendar *GtkCalendar_autoptr;
 static inline void glib_autoptr_cleanup_GtkCalendar (GtkCalendar **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkCellArea *GtkCellArea_autoptr;
 static inline void glib_autoptr_cleanup_GtkCellArea (GtkCellArea **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkCellAreaBox *GtkCellAreaBox_autoptr;
 static inline void glib_autoptr_cleanup_GtkCellAreaBox (GtkCellAreaBox **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkCellAreaContext *GtkCellAreaContext_autoptr;
 static inline void glib_autoptr_cleanup_GtkCellAreaContext (GtkCellAreaContext **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkCellEditable *GtkCellEditable_autoptr;
 static inline void glib_autoptr_cleanup_GtkCellEditable (GtkCellEditable **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkCellLayout *GtkCellLayout_autoptr;
 static inline void glib_autoptr_cleanup_GtkCellLayout (GtkCellLayout **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkCellRenderer *GtkCellRenderer_autoptr;
 static inline void glib_autoptr_cleanup_GtkCellRenderer (GtkCellRenderer **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkCellRendererAccel *GtkCellRendererAccel_autoptr;
 static inline void glib_autoptr_cleanup_GtkCellRendererAccel (GtkCellRendererAccel **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkCellRendererCombo *GtkCellRendererCombo_autoptr;
 static inline void glib_autoptr_cleanup_GtkCellRendererCombo (GtkCellRendererCombo **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkCellRendererPixbuf *GtkCellRendererPixbuf_autoptr;
 static inline void glib_autoptr_cleanup_GtkCellRendererPixbuf (GtkCellRendererPixbuf **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkCellRendererProgress *GtkCellRendererProgress_autoptr;
 static inline void glib_autoptr_cleanup_GtkCellRendererProgress (GtkCellRendererProgress **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkCellRendererSpin *GtkCellRendererSpin_autoptr;
 static inline void glib_autoptr_cleanup_GtkCellRendererSpin (GtkCellRendererSpin **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkCellRendererSpinner *GtkCellRendererSpinner_autoptr;
 static inline void glib_autoptr_cleanup_GtkCellRendererSpinner (GtkCellRendererSpinner **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkCellRendererText *GtkCellRendererText_autoptr;
 static inline void glib_autoptr_cleanup_GtkCellRendererText (GtkCellRendererText **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkCellRendererToggle *GtkCellRendererToggle_autoptr;
 static inline void glib_autoptr_cleanup_GtkCellRendererToggle (GtkCellRendererToggle **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkCellView *GtkCellView_autoptr;
 static inline void glib_autoptr_cleanup_GtkCellView (GtkCellView **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkCheckButton *GtkCheckButton_autoptr;
 static inline void glib_autoptr_cleanup_GtkCheckButton (GtkCheckButton **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkCheckMenuItem *GtkCheckMenuItem_autoptr;
 static inline void glib_autoptr_cleanup_GtkCheckMenuItem (GtkCheckMenuItem **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkClipboard *GtkClipboard_autoptr;
 static inline void glib_autoptr_cleanup_GtkClipboard (GtkClipboard **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkColorButton *GtkColorButton_autoptr;
 static inline void glib_autoptr_cleanup_GtkColorButton (GtkColorButton **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkColorChooser *GtkColorChooser_autoptr;
 static inline void glib_autoptr_cleanup_GtkColorChooser (GtkColorChooser **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkColorChooserDialog *GtkColorChooserDialog_autoptr;
 static inline void glib_autoptr_cleanup_GtkColorChooserDialog (GtkColorChooserDialog **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkColorChooserWidget *GtkColorChooserWidget_autoptr;
 static inline void glib_autoptr_cleanup_GtkColorChooserWidget (GtkColorChooserWidget **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkComboBox *GtkComboBox_autoptr;
 static inline void glib_autoptr_cleanup_GtkComboBox (GtkComboBox **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkComboBoxText *GtkComboBoxText_autoptr;
 static inline void glib_autoptr_cleanup_GtkComboBoxText (GtkComboBoxText **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkContainer *GtkContainer_autoptr;
 static inline void glib_autoptr_cleanup_GtkContainer (GtkContainer **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkCssProvider *GtkCssProvider_autoptr;
 static inline void glib_autoptr_cleanup_GtkCssProvider (GtkCssProvider **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkDialog *GtkDialog_autoptr;
 static inline void glib_autoptr_cleanup_GtkDialog (GtkDialog **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkDrawingArea *GtkDrawingArea_autoptr;
 static inline void glib_autoptr_cleanup_GtkDrawingArea (GtkDrawingArea **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkEditable *GtkEditable_autoptr;
 static inline void glib_autoptr_cleanup_GtkEditable (GtkEditable **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkEntry *GtkEntry_autoptr;
 static inline void glib_autoptr_cleanup_GtkEntry (GtkEntry **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkEntryBuffer *GtkEntryBuffer_autoptr;
 static inline void glib_autoptr_cleanup_GtkEntryBuffer (GtkEntryBuffer **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkEntryCompletion *GtkEntryCompletion_autoptr;
 static inline void glib_autoptr_cleanup_GtkEntryCompletion (GtkEntryCompletion **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkEventBox *GtkEventBox_autoptr;
 static inline void glib_autoptr_cleanup_GtkEventBox (GtkEventBox **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkEventController *GtkEventController_autoptr;
 static inline void glib_autoptr_cleanup_GtkEventController (GtkEventController **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkExpander *GtkExpander_autoptr;
 static inline void glib_autoptr_cleanup_GtkExpander (GtkExpander **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkFileChooserButton *GtkFileChooserButton_autoptr;
 static inline void glib_autoptr_cleanup_GtkFileChooserButton (GtkFileChooserButton **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkFileChooserDialog *GtkFileChooserDialog_autoptr;
 static inline void glib_autoptr_cleanup_GtkFileChooserDialog (GtkFileChooserDialog **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkFileChooserWidget *GtkFileChooserWidget_autoptr;
 static inline void glib_autoptr_cleanup_GtkFileChooserWidget (GtkFileChooserWidget **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkFileFilter *GtkFileFilter_autoptr;
 static inline void glib_autoptr_cleanup_GtkFileFilter (GtkFileFilter **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkFixed *GtkFixed_autoptr;
 static inline void glib_autoptr_cleanup_GtkFixed (GtkFixed **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkFlowBox *GtkFlowBox_autoptr;
 static inline void glib_autoptr_cleanup_GtkFlowBox (GtkFlowBox **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkFlowBoxChild *GtkFlowBoxChild_autoptr;
 static inline void glib_autoptr_cleanup_GtkFlowBoxChild (GtkFlowBoxChild **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkFontButton *GtkFontButton_autoptr;
 static inline void glib_autoptr_cleanup_GtkFontButton (GtkFontButton **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkFontChooser *GtkFontChooser_autoptr;
 static inline void glib_autoptr_cleanup_GtkFontChooser (GtkFontChooser **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkFontChooserDialog *GtkFontChooserDialog_autoptr;
 static inline void glib_autoptr_cleanup_GtkFontChooserDialog (GtkFontChooserDialog **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkFontChooserWidget *GtkFontChooserWidget_autoptr;
 static inline void glib_autoptr_cleanup_GtkFontChooserWidget (GtkFontChooserWidget **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkFrame *GtkFrame_autoptr;
 static inline void glib_autoptr_cleanup_GtkFrame (GtkFrame **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkGLArea *GtkGLArea_autoptr;
 static inline void glib_autoptr_cleanup_GtkGLArea (GtkGLArea **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkGesture *GtkGesture_autoptr;
 static inline void glib_autoptr_cleanup_GtkGesture (GtkGesture **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkGestureDrag *GtkGestureDrag_autoptr;
 static inline void glib_autoptr_cleanup_GtkGestureDrag (GtkGestureDrag **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkGestureLongPress *GtkGestureLongPress_autoptr;
 static inline void glib_autoptr_cleanup_GtkGestureLongPress (GtkGestureLongPress **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkGestureMultiPress *GtkGestureMultiPress_autoptr;
 static inline void glib_autoptr_cleanup_GtkGestureMultiPress (GtkGestureMultiPress **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkGesturePan *GtkGesturePan_autoptr;
 static inline void glib_autoptr_cleanup_GtkGesturePan (GtkGesturePan **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkGestureRotate *GtkGestureRotate_autoptr;
 static inline void glib_autoptr_cleanup_GtkGestureRotate (GtkGestureRotate **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkGestureSingle *GtkGestureSingle_autoptr;
 static inline void glib_autoptr_cleanup_GtkGestureSingle (GtkGestureSingle **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkGestureSwipe *GtkGestureSwipe_autoptr;
 static inline void glib_autoptr_cleanup_GtkGestureSwipe (GtkGestureSwipe **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkGestureZoom *GtkGestureZoom_autoptr;
 static inline void glib_autoptr_cleanup_GtkGestureZoom (GtkGestureZoom **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkGrid *GtkGrid_autoptr;
 static inline void glib_autoptr_cleanup_GtkGrid (GtkGrid **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkHeaderBar *GtkHeaderBar_autoptr;
 static inline void glib_autoptr_cleanup_GtkHeaderBar (GtkHeaderBar **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkIMContext *GtkIMContext_autoptr;
 static inline void glib_autoptr_cleanup_GtkIMContext (GtkIMContext **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkIMContextSimple *GtkIMContextSimple_autoptr;
 static inline void glib_autoptr_cleanup_GtkIMContextSimple (GtkIMContextSimple **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkIMMulticontext *GtkIMMulticontext_autoptr;
 static inline void glib_autoptr_cleanup_GtkIMMulticontext (GtkIMMulticontext **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkIconInfo *GtkIconInfo_autoptr;
 static inline void glib_autoptr_cleanup_GtkIconInfo (GtkIconInfo **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkIconTheme *GtkIconTheme_autoptr;
 static inline void glib_autoptr_cleanup_GtkIconTheme (GtkIconTheme **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkIconView *GtkIconView_autoptr;
 static inline void glib_autoptr_cleanup_GtkIconView (GtkIconView **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkImage *GtkImage_autoptr;
 static inline void glib_autoptr_cleanup_GtkImage (GtkImage **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkInfoBar *GtkInfoBar_autoptr;
 static inline void glib_autoptr_cleanup_GtkInfoBar (GtkInfoBar **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkInvisible *GtkInvisible_autoptr;
 static inline void glib_autoptr_cleanup_GtkInvisible (GtkInvisible **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkLabel *GtkLabel_autoptr;
 static inline void glib_autoptr_cleanup_GtkLabel (GtkLabel **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkLayout *GtkLayout_autoptr;
 static inline void glib_autoptr_cleanup_GtkLayout (GtkLayout **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkLevelBar *GtkLevelBar_autoptr;
 static inline void glib_autoptr_cleanup_GtkLevelBar (GtkLevelBar **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkLinkButton *GtkLinkButton_autoptr;
 static inline void glib_autoptr_cleanup_GtkLinkButton (GtkLinkButton **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkListBox *GtkListBox_autoptr;
 static inline void glib_autoptr_cleanup_GtkListBox (GtkListBox **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkListBoxRow *GtkListBoxRow_autoptr;
 static inline void glib_autoptr_cleanup_GtkListBoxRow (GtkListBoxRow **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkListStore *GtkListStore_autoptr;
 static inline void glib_autoptr_cleanup_GtkListStore (GtkListStore **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkLockButton *GtkLockButton_autoptr;
 static inline void glib_autoptr_cleanup_GtkLockButton (GtkLockButton **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkMenu *GtkMenu_autoptr;
 static inline void glib_autoptr_cleanup_GtkMenu (GtkMenu **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkMenuBar *GtkMenuBar_autoptr;
 static inline void glib_autoptr_cleanup_GtkMenuBar (GtkMenuBar **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkMenuButton *GtkMenuButton_autoptr;
 static inline void glib_autoptr_cleanup_GtkMenuButton (GtkMenuButton **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkMenuItem *GtkMenuItem_autoptr;
 static inline void glib_autoptr_cleanup_GtkMenuItem (GtkMenuItem **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkMenuShell *GtkMenuShell_autoptr;
 static inline void glib_autoptr_cleanup_GtkMenuShell (GtkMenuShell **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkMenuToolButton *GtkMenuToolButton_autoptr;
 static inline void glib_autoptr_cleanup_GtkMenuToolButton (GtkMenuToolButton **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkMessageDialog *GtkMessageDialog_autoptr;
 static inline void glib_autoptr_cleanup_GtkMessageDialog (GtkMessageDialog **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkMountOperation *GtkMountOperation_autoptr;
 static inline void glib_autoptr_cleanup_GtkMountOperation (GtkMountOperation **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkNotebook *GtkNotebook_autoptr;
 static inline void glib_autoptr_cleanup_GtkNotebook (GtkNotebook **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkOffscreenWindow *GtkOffscreenWindow_autoptr;
 static inline void glib_autoptr_cleanup_GtkOffscreenWindow (GtkOffscreenWindow **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkOrientable *GtkOrientable_autoptr;
 static inline void glib_autoptr_cleanup_GtkOrientable (GtkOrientable **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkOverlay *GtkOverlay_autoptr;
 static inline void glib_autoptr_cleanup_GtkOverlay (GtkOverlay **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkPageSetup *GtkPageSetup_autoptr;
 static inline void glib_autoptr_cleanup_GtkPageSetup (GtkPageSetup **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkPaned *GtkPaned_autoptr;
 static inline void glib_autoptr_cleanup_GtkPaned (GtkPaned **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkPlacesSidebar *GtkPlacesSidebar_autoptr;
 static inline void glib_autoptr_cleanup_GtkPlacesSidebar (GtkPlacesSidebar **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkPopover *GtkPopover_autoptr;
 static inline void glib_autoptr_cleanup_GtkPopover (GtkPopover **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkPopoverMenu *GtkPopoverMenu_autoptr;
 static inline void glib_autoptr_cleanup_GtkPopoverMenu (GtkPopoverMenu **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkPrintContext *GtkPrintContext_autoptr;
 static inline void glib_autoptr_cleanup_GtkPrintContext (GtkPrintContext **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkPrintOperation *GtkPrintOperation_autoptr;
 static inline void glib_autoptr_cleanup_GtkPrintOperation (GtkPrintOperation **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkPrintOperationPreview *GtkPrintOperationPreview_autoptr;
 static inline void glib_autoptr_cleanup_GtkPrintOperationPreview (GtkPrintOperationPreview **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkPrintSettings *GtkPrintSettings_autoptr;
 static inline void glib_autoptr_cleanup_GtkPrintSettings (GtkPrintSettings **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkProgressBar *GtkProgressBar_autoptr;
 static inline void glib_autoptr_cleanup_GtkProgressBar (GtkProgressBar **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkRadioButton *GtkRadioButton_autoptr;
 static inline void glib_autoptr_cleanup_GtkRadioButton (GtkRadioButton **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkRadioMenuItem *GtkRadioMenuItem_autoptr;
 static inline void glib_autoptr_cleanup_GtkRadioMenuItem (GtkRadioMenuItem **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkRadioToolButton *GtkRadioToolButton_autoptr;
 static inline void glib_autoptr_cleanup_GtkRadioToolButton (GtkRadioToolButton **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkRange *GtkRange_autoptr;
 static inline void glib_autoptr_cleanup_GtkRange (GtkRange **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkRcStyle *GtkRcStyle_autoptr;
 static inline void glib_autoptr_cleanup_GtkRcStyle (GtkRcStyle **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkRecentChooser *GtkRecentChooser_autoptr;
 static inline void glib_autoptr_cleanup_GtkRecentChooser (GtkRecentChooser **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkRecentChooserDialog *GtkRecentChooserDialog_autoptr;
 static inline void glib_autoptr_cleanup_GtkRecentChooserDialog (GtkRecentChooserDialog **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkRecentChooserMenu *GtkRecentChooserMenu_autoptr;
 static inline void glib_autoptr_cleanup_GtkRecentChooserMenu (GtkRecentChooserMenu **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkRecentChooserWidget *GtkRecentChooserWidget_autoptr;
 static inline void glib_autoptr_cleanup_GtkRecentChooserWidget (GtkRecentChooserWidget **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkRecentFilter *GtkRecentFilter_autoptr;
 static inline void glib_autoptr_cleanup_GtkRecentFilter (GtkRecentFilter **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkRecentManager *GtkRecentManager_autoptr;
 static inline void glib_autoptr_cleanup_GtkRecentManager (GtkRecentManager **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkRevealer *GtkRevealer_autoptr;
 static inline void glib_autoptr_cleanup_GtkRevealer (GtkRevealer **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkScale *GtkScale_autoptr;
 static inline void glib_autoptr_cleanup_GtkScale (GtkScale **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkScaleButton *GtkScaleButton_autoptr;
 static inline void glib_autoptr_cleanup_GtkScaleButton (GtkScaleButton **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkScrollable *GtkScrollable_autoptr;
 static inline void glib_autoptr_cleanup_GtkScrollable (GtkScrollable **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkScrollbar *GtkScrollbar_autoptr;
 static inline void glib_autoptr_cleanup_GtkScrollbar (GtkScrollbar **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkScrolledWindow *GtkScrolledWindow_autoptr;
 static inline void glib_autoptr_cleanup_GtkScrolledWindow (GtkScrolledWindow **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkSearchBar *GtkSearchBar_autoptr;
 static inline void glib_autoptr_cleanup_GtkSearchBar (GtkSearchBar **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkSearchEntry *GtkSearchEntry_autoptr;
 static inline void glib_autoptr_cleanup_GtkSearchEntry (GtkSearchEntry **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkSeparator *GtkSeparator_autoptr;
 static inline void glib_autoptr_cleanup_GtkSeparator (GtkSeparator **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkSeparatorMenuItem *GtkSeparatorMenuItem_autoptr;
 static inline void glib_autoptr_cleanup_GtkSeparatorMenuItem (GtkSeparatorMenuItem **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkSeparatorToolItem *GtkSeparatorToolItem_autoptr;
 static inline void glib_autoptr_cleanup_GtkSeparatorToolItem (GtkSeparatorToolItem **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkSettings *GtkSettings_autoptr;
 static inline void glib_autoptr_cleanup_GtkSettings (GtkSettings **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkStackSidebar *GtkStackSidebar_autoptr;
 static inline void glib_autoptr_cleanup_GtkStackSidebar (GtkStackSidebar **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkSizeGroup *GtkSizeGroup_autoptr;
 static inline void glib_autoptr_cleanup_GtkSizeGroup (GtkSizeGroup **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkSpinButton *GtkSpinButton_autoptr;
 static inline void glib_autoptr_cleanup_GtkSpinButton (GtkSpinButton **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkSpinner *GtkSpinner_autoptr;
 static inline void glib_autoptr_cleanup_GtkSpinner (GtkSpinner **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkStack *GtkStack_autoptr;
 static inline void glib_autoptr_cleanup_GtkStack (GtkStack **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkStackSwitcher *GtkStackSwitcher_autoptr;
 static inline void glib_autoptr_cleanup_GtkStackSwitcher (GtkStackSwitcher **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkStatusbar *GtkStatusbar_autoptr;
 static inline void glib_autoptr_cleanup_GtkStatusbar (GtkStatusbar **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkStyle *GtkStyle_autoptr;
 static inline void glib_autoptr_cleanup_GtkStyle (GtkStyle **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkStyleContext *GtkStyleContext_autoptr;
 static inline void glib_autoptr_cleanup_GtkStyleContext (GtkStyleContext **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkStyleProperties *GtkStyleProperties_autoptr;
 static inline void glib_autoptr_cleanup_GtkStyleProperties (GtkStyleProperties **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkStyleProvider *GtkStyleProvider_autoptr;
 static inline void glib_autoptr_cleanup_GtkStyleProvider (GtkStyleProvider **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkSwitch *GtkSwitch_autoptr;
 static inline void glib_autoptr_cleanup_GtkSwitch (GtkSwitch **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkTextBuffer *GtkTextBuffer_autoptr;
 static inline void glib_autoptr_cleanup_GtkTextBuffer (GtkTextBuffer **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkTextChildAnchor *GtkTextChildAnchor_autoptr;
 static inline void glib_autoptr_cleanup_GtkTextChildAnchor (GtkTextChildAnchor **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkTextMark *GtkTextMark_autoptr;
 static inline void glib_autoptr_cleanup_GtkTextMark (GtkTextMark **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkTextTag *GtkTextTag_autoptr;
 static inline void glib_autoptr_cleanup_GtkTextTag (GtkTextTag **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkTextTagTable *GtkTextTagTable_autoptr;
 static inline void glib_autoptr_cleanup_GtkTextTagTable (GtkTextTagTable **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkTextView *GtkTextView_autoptr;
 static inline void glib_autoptr_cleanup_GtkTextView (GtkTextView **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkToggleButton *GtkToggleButton_autoptr;
 static inline void glib_autoptr_cleanup_GtkToggleButton (GtkToggleButton **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkToggleToolButton *GtkToggleToolButton_autoptr;
 static inline void glib_autoptr_cleanup_GtkToggleToolButton (GtkToggleToolButton **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkToolButton *GtkToolButton_autoptr;
 static inline void glib_autoptr_cleanup_GtkToolButton (GtkToolButton **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkToolItem *GtkToolItem_autoptr;
 static inline void glib_autoptr_cleanup_GtkToolItem (GtkToolItem **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkToolItemGroup *GtkToolItemGroup_autoptr;
 static inline void glib_autoptr_cleanup_GtkToolItemGroup (GtkToolItemGroup **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkToolPalette *GtkToolPalette_autoptr;
 static inline void glib_autoptr_cleanup_GtkToolPalette (GtkToolPalette **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkToolShell *GtkToolShell_autoptr;
 static inline void glib_autoptr_cleanup_GtkToolShell (GtkToolShell **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkToolbar *GtkToolbar_autoptr;
 static inline void glib_autoptr_cleanup_GtkToolbar (GtkToolbar **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkTooltip *GtkTooltip_autoptr;
 static inline void glib_autoptr_cleanup_GtkTooltip (GtkTooltip **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkTreeDragDest *GtkTreeDragDest_autoptr;
 static inline void glib_autoptr_cleanup_GtkTreeDragDest (GtkTreeDragDest **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkTreeDragSource *GtkTreeDragSource_autoptr;
 static inline void glib_autoptr_cleanup_GtkTreeDragSource (GtkTreeDragSource **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkTreeModel *GtkTreeModel_autoptr;
 static inline void glib_autoptr_cleanup_GtkTreeModel (GtkTreeModel **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkTreeModelFilter *GtkTreeModelFilter_autoptr;
 static inline void glib_autoptr_cleanup_GtkTreeModelFilter (GtkTreeModelFilter **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkTreeModelSort *GtkTreeModelSort_autoptr;
 static inline void glib_autoptr_cleanup_GtkTreeModelSort (GtkTreeModelSort **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkTreeSelection *GtkTreeSelection_autoptr;
 static inline void glib_autoptr_cleanup_GtkTreeSelection (GtkTreeSelection **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkTreeSortable *GtkTreeSortable_autoptr;
 static inline void glib_autoptr_cleanup_GtkTreeSortable (GtkTreeSortable **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkTreeStore *GtkTreeStore_autoptr;
 static inline void glib_autoptr_cleanup_GtkTreeStore (GtkTreeStore **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkTreeView *GtkTreeView_autoptr;
 static inline void glib_autoptr_cleanup_GtkTreeView (GtkTreeView **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkTreeViewColumn *GtkTreeViewColumn_autoptr;
 static inline void glib_autoptr_cleanup_GtkTreeViewColumn (GtkTreeViewColumn **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkViewport *GtkViewport_autoptr;
 static inline void glib_autoptr_cleanup_GtkViewport (GtkViewport **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkVolumeButton *GtkVolumeButton_autoptr;
 static inline void glib_autoptr_cleanup_GtkVolumeButton (GtkVolumeButton **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkWidget *GtkWidget_autoptr;
 static inline void glib_autoptr_cleanup_GtkWidget (GtkWidget **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkWindow *GtkWindow_autoptr;
 static inline void glib_autoptr_cleanup_GtkWindow (GtkWindow **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkWindowGroup *GtkWindowGroup_autoptr;
 static inline void glib_autoptr_cleanup_GtkWindowGroup (GtkWindowGroup **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkBorder *GtkBorder_autoptr;
 static inline void glib_autoptr_cleanup_GtkBorder (GtkBorder **_ptr) { if (*_ptr) (gtk_border_free) (*_ptr); }
typedef GtkPaperSize *GtkPaperSize_autoptr;
 static inline void glib_autoptr_cleanup_GtkPaperSize (GtkPaperSize **_ptr) { if (*_ptr) (gtk_paper_size_free) (*_ptr); }
typedef GtkRequisition *GtkRequisition_autoptr;
 static inline void glib_autoptr_cleanup_GtkRequisition (GtkRequisition **_ptr) { if (*_ptr) (gtk_requisition_free) (*_ptr); }
typedef GtkSelectionData *GtkSelectionData_autoptr;
 static inline void glib_autoptr_cleanup_GtkSelectionData (GtkSelectionData **_ptr) { if (*_ptr) (gtk_selection_data_free) (*_ptr); }
typedef GtkTargetList *GtkTargetList_autoptr;
 static inline void glib_autoptr_cleanup_GtkTargetList (GtkTargetList **_ptr) { if (*_ptr) (gtk_target_list_unref) (*_ptr); }
typedef GtkTextAttributes *GtkTextAttributes_autoptr;
 static inline void glib_autoptr_cleanup_GtkTextAttributes (GtkTextAttributes **_ptr) { if (*_ptr) (gtk_text_attributes_unref) (*_ptr); }
typedef GtkTextIter *GtkTextIter_autoptr;
 static inline void glib_autoptr_cleanup_GtkTextIter (GtkTextIter **_ptr) { if (*_ptr) (gtk_text_iter_free) (*_ptr); }
typedef GtkTreeIter *GtkTreeIter_autoptr;
 static inline void glib_autoptr_cleanup_GtkTreeIter (GtkTreeIter **_ptr) { if (*_ptr) (gtk_tree_iter_free) (*_ptr); }
typedef GtkTreeRowReference *GtkTreeRowReference_autoptr;
 static inline void glib_autoptr_cleanup_GtkTreeRowReference (GtkTreeRowReference **_ptr) { if (*_ptr) (gtk_tree_row_reference_free) (*_ptr); }
typedef GtkWidgetPath *GtkWidgetPath_autoptr;
 static inline void glib_autoptr_cleanup_GtkWidgetPath (GtkWidgetPath **_ptr) { if (*_ptr) (gtk_widget_path_unref) (*_ptr); }
typedef enum
{
  NO_CHANGE = 0,
  INVISIBLE_CHANGE = 1,
  VISIBLE_CHANGE = 2,
  STRUCTURAL_CHANGE = 3
} change_type;
enum button_type
{
  BUTTON_TYPE_NONE,
  BUTTON_TYPE_TOGGLE,
  BUTTON_TYPE_RADIO
};
typedef struct _widget_value
{
  Lisp_Object lname;
  char *name;
  char *value;
  Lisp_Object lkey;
  char *key;
  Lisp_Object help;
 _Bool 
      enabled;
 _Bool 
      selected;
 _Bool 
      edited;
  enum button_type button_type;
  struct _widget_value *contents;
  void *call_data;
  struct _widget_value *next;
} widget_value;
extern int
_Xmblen(
    char *str,
    int len
    );
typedef char *XPointer;
typedef struct _XExtData {
 int number;
 struct _XExtData *next;
 int (*free_private)(
 struct _XExtData *extension
 );
 XPointer private_data;
} XExtData;
typedef struct {
 int extension;
 int major_opcode;
 int first_event;
 int first_error;
} XExtCodes;
typedef struct {
    int depth;
    int bits_per_pixel;
    int scanline_pad;
} XPixmapFormatValues;
typedef struct {
 int function;
 unsigned long plane_mask;
 unsigned long foreground;
 unsigned long background;
 int line_width;
 int line_style;
 int cap_style;
 int join_style;
 int fill_style;
 int fill_rule;
 int arc_mode;
 Pixmap tile;
 Pixmap stipple;
 int ts_x_origin;
 int ts_y_origin;
        Font font;
 int subwindow_mode;
 int graphics_exposures;
 int clip_x_origin;
 int clip_y_origin;
 Pixmap clip_mask;
 int dash_offset;
 char dashes;
} XGCValues;
typedef struct _XGC
*GC;
typedef struct {
 XExtData *ext_data;
 VisualID visualid;
 int class;
 unsigned long red_mask, green_mask, blue_mask;
 int bits_per_rgb;
 int map_entries;
} Visual;
typedef struct {
 int depth;
 int nvisuals;
 Visual *visuals;
} Depth;
struct _XDisplay;
typedef struct {
 XExtData *ext_data;
 struct _XDisplay *display;
 Window root;
 int width, height;
 int mwidth, mheight;
 int ndepths;
 Depth *depths;
 int root_depth;
 Visual *root_visual;
 GC default_gc;
 Colormap cmap;
 unsigned long white_pixel;
 unsigned long black_pixel;
 int max_maps, min_maps;
 int backing_store;
 int save_unders;
 long root_input_mask;
} Screen;
typedef struct {
 XExtData *ext_data;
 int depth;
 int bits_per_pixel;
 int scanline_pad;
} ScreenFormat;
typedef struct {
    Pixmap background_pixmap;
    unsigned long background_pixel;
    Pixmap border_pixmap;
    unsigned long border_pixel;
    int bit_gravity;
    int win_gravity;
    int backing_store;
    unsigned long backing_planes;
    unsigned long backing_pixel;
    int save_under;
    long event_mask;
    long do_not_propagate_mask;
    int override_redirect;
    Colormap colormap;
    Cursor cursor;
} XSetWindowAttributes;
typedef struct {
    int x, y;
    int width, height;
    int border_width;
    int depth;
    Visual *visual;
    Window root;
    int class;
    int bit_gravity;
    int win_gravity;
    int backing_store;
    unsigned long backing_planes;
    unsigned long backing_pixel;
    int save_under;
    Colormap colormap;
    int map_installed;
    int map_state;
    long all_event_masks;
    long your_event_mask;
    long do_not_propagate_mask;
    int override_redirect;
    Screen *screen;
} XWindowAttributes;
typedef struct {
 int family;
 int length;
 char *address;
} XHostAddress;
typedef struct {
 int typelength;
 int valuelength;
 char *type;
 char *value;
} XServerInterpretedAddress;
typedef struct _XImage {
    int width, height;
    int xoffset;
    int format;
    char *data;
    int byte_order;
    int bitmap_unit;
    int bitmap_bit_order;
    int bitmap_pad;
    int depth;
    int bytes_per_line;
    int bits_per_pixel;
    unsigned long red_mask;
    unsigned long green_mask;
    unsigned long blue_mask;
    XPointer obdata;
    struct funcs {
 struct _XImage *(*create_image)(
  struct _XDisplay* ,
  Visual* ,
  unsigned int ,
  int ,
  int ,
  char* ,
  unsigned int ,
  unsigned int ,
  int ,
  int );
 int (*destroy_image) (struct _XImage *);
 unsigned long (*get_pixel) (struct _XImage *, int, int);
 int (*put_pixel) (struct _XImage *, int, int, unsigned long);
 struct _XImage *(*sub_image)(struct _XImage *, int, int, unsigned int, unsigned int);
 int (*add_pixel) (struct _XImage *, long);
 } f;
} XImage;
typedef struct {
    int x, y;
    int width, height;
    int border_width;
    Window sibling;
    int stack_mode;
} XWindowChanges;
typedef struct {
 unsigned long pixel;
 unsigned short red, green, blue;
 char flags;
 char pad;
} XColor;
typedef struct {
    short x1, y1, x2, y2;
} XSegment;
typedef struct {
    short x, y;
} XPoint;
typedef struct {
    short x, y;
    unsigned short width, height;
} XRectangle;
typedef struct {
    short x, y;
    unsigned short width, height;
    short angle1, angle2;
} XArc;
typedef struct {
        int key_click_percent;
        int bell_percent;
        int bell_pitch;
        int bell_duration;
        int led;
        int led_mode;
        int key;
        int auto_repeat_mode;
} XKeyboardControl;
typedef struct {
        int key_click_percent;
 int bell_percent;
 unsigned int bell_pitch, bell_duration;
 unsigned long led_mask;
 int global_auto_repeat;
 char auto_repeats[32];
} XKeyboardState;
typedef struct {
        Time time;
 short x, y;
} XTimeCoord;
typedef struct {
  int max_keypermod;
  KeyCode *modifiermap;
} XModifierKeymap;
typedef struct _XDisplay Display;
struct _XPrivate;
struct _XrmHashBucketRec;
typedef struct
{
 XExtData *ext_data;
 struct _XPrivate *private1;
 int fd;
 int private2;
 int proto_major_version;
 int proto_minor_version;
 char *vendor;
        XID private3;
 XID private4;
 XID private5;
 int private6;
 XID (*resource_alloc)(
  struct _XDisplay*
 );
 int byte_order;
 int bitmap_unit;
 int bitmap_pad;
 int bitmap_bit_order;
 int nformats;
 ScreenFormat *pixmap_format;
 int private8;
 int release;
 struct _XPrivate *private9, *private10;
 int qlen;
 unsigned long last_request_read;
 unsigned long request;
 XPointer private11;
 XPointer private12;
 XPointer private13;
 XPointer private14;
 unsigned max_request_size;
 struct _XrmHashBucketRec *db;
 int (*private15)(
  struct _XDisplay*
  );
 char *display_name;
 int default_screen;
 int nscreens;
 Screen *screens;
 unsigned long motion_buffer;
 unsigned long private16;
 int min_keycode;
 int max_keycode;
 XPointer private17;
 XPointer private18;
 int private19;
 char *xdefaults;
}
*_XPrivDisplay;
typedef struct {
 int type;
 unsigned long serial;
 int send_event;
 Display *display;
 Window window;
 Window root;
 Window subwindow;
 Time time;
 int x, y;
 int x_root, y_root;
 unsigned int state;
 unsigned int keycode;
 int same_screen;
} XKeyEvent;
typedef XKeyEvent XKeyPressedEvent;
typedef XKeyEvent XKeyReleasedEvent;
typedef struct {
 int type;
 unsigned long serial;
 int send_event;
 Display *display;
 Window window;
 Window root;
 Window subwindow;
 Time time;
 int x, y;
 int x_root, y_root;
 unsigned int state;
 unsigned int button;
 int same_screen;
} XButtonEvent;
typedef XButtonEvent XButtonPressedEvent;
typedef XButtonEvent XButtonReleasedEvent;
typedef struct {
 int type;
 unsigned long serial;
 int send_event;
 Display *display;
 Window window;
 Window root;
 Window subwindow;
 Time time;
 int x, y;
 int x_root, y_root;
 unsigned int state;
 char is_hint;
 int same_screen;
} XMotionEvent;
typedef XMotionEvent XPointerMovedEvent;
typedef struct {
 int type;
 unsigned long serial;
 int send_event;
 Display *display;
 Window window;
 Window root;
 Window subwindow;
 Time time;
 int x, y;
 int x_root, y_root;
 int mode;
 int detail;
 int same_screen;
 int focus;
 unsigned int state;
} XCrossingEvent;
typedef XCrossingEvent XEnterWindowEvent;
typedef XCrossingEvent XLeaveWindowEvent;
typedef struct {
 int type;
 unsigned long serial;
 int send_event;
 Display *display;
 Window window;
 int mode;
 int detail;
} XFocusChangeEvent;
typedef XFocusChangeEvent XFocusInEvent;
typedef XFocusChangeEvent XFocusOutEvent;
typedef struct {
 int type;
 unsigned long serial;
 int send_event;
 Display *display;
 Window window;
 char key_vector[32];
} XKeymapEvent;
typedef struct {
 int type;
 unsigned long serial;
 int send_event;
 Display *display;
 Window window;
 int x, y;
 int width, height;
 int count;
} XExposeEvent;
typedef struct {
 int type;
 unsigned long serial;
 int send_event;
 Display *display;
 Drawable drawable;
 int x, y;
 int width, height;
 int count;
 int major_code;
 int minor_code;
} XGraphicsExposeEvent;
typedef struct {
 int type;
 unsigned long serial;
 int send_event;
 Display *display;
 Drawable drawable;
 int major_code;
 int minor_code;
} XNoExposeEvent;
typedef struct {
 int type;
 unsigned long serial;
 int send_event;
 Display *display;
 Window window;
 int state;
} XVisibilityEvent;
typedef struct {
 int type;
 unsigned long serial;
 int send_event;
 Display *display;
 Window parent;
 Window window;
 int x, y;
 int width, height;
 int border_width;
 int override_redirect;
} XCreateWindowEvent;
typedef struct {
 int type;
 unsigned long serial;
 int send_event;
 Display *display;
 Window event;
 Window window;
} XDestroyWindowEvent;
typedef struct {
 int type;
 unsigned long serial;
 int send_event;
 Display *display;
 Window event;
 Window window;
 int from_configure;
} XUnmapEvent;
typedef struct {
 int type;
 unsigned long serial;
 int send_event;
 Display *display;
 Window event;
 Window window;
 int override_redirect;
} XMapEvent;
typedef struct {
 int type;
 unsigned long serial;
 int send_event;
 Display *display;
 Window parent;
 Window window;
} XMapRequestEvent;
typedef struct {
 int type;
 unsigned long serial;
 int send_event;
 Display *display;
 Window event;
 Window window;
 Window parent;
 int x, y;
 int override_redirect;
} XReparentEvent;
typedef struct {
 int type;
 unsigned long serial;
 int send_event;
 Display *display;
 Window event;
 Window window;
 int x, y;
 int width, height;
 int border_width;
 Window above;
 int override_redirect;
} XConfigureEvent;
typedef struct {
 int type;
 unsigned long serial;
 int send_event;
 Display *display;
 Window event;
 Window window;
 int x, y;
} XGravityEvent;
typedef struct {
 int type;
 unsigned long serial;
 int send_event;
 Display *display;
 Window window;
 int width, height;
} XResizeRequestEvent;
typedef struct {
 int type;
 unsigned long serial;
 int send_event;
 Display *display;
 Window parent;
 Window window;
 int x, y;
 int width, height;
 int border_width;
 Window above;
 int detail;
 unsigned long value_mask;
} XConfigureRequestEvent;
typedef struct {
 int type;
 unsigned long serial;
 int send_event;
 Display *display;
 Window event;
 Window window;
 int place;
} XCirculateEvent;
typedef struct {
 int type;
 unsigned long serial;
 int send_event;
 Display *display;
 Window parent;
 Window window;
 int place;
} XCirculateRequestEvent;
typedef struct {
 int type;
 unsigned long serial;
 int send_event;
 Display *display;
 Window window;
 Atom atom;
 Time time;
 int state;
} XPropertyEvent;
typedef struct {
 int type;
 unsigned long serial;
 int send_event;
 Display *display;
 Window window;
 Atom selection;
 Time time;
} XSelectionClearEvent;
typedef struct {
 int type;
 unsigned long serial;
 int send_event;
 Display *display;
 Window owner;
 Window requestor;
 Atom selection;
 Atom target;
 Atom property;
 Time time;
} XSelectionRequestEvent;
typedef struct {
 int type;
 unsigned long serial;
 int send_event;
 Display *display;
 Window requestor;
 Atom selection;
 Atom target;
 Atom property;
 Time time;
} XSelectionEvent;
typedef struct {
 int type;
 unsigned long serial;
 int send_event;
 Display *display;
 Window window;
 Colormap colormap;
 int new;
 int state;
} XColormapEvent;
typedef struct {
 int type;
 unsigned long serial;
 int send_event;
 Display *display;
 Window window;
 Atom message_type;
 int format;
 union {
  char b[20];
  short s[10];
  long l[5];
  } data;
} XClientMessageEvent;
typedef struct {
 int type;
 unsigned long serial;
 int send_event;
 Display *display;
 Window window;
 int request;
 int first_keycode;
 int count;
} XMappingEvent;
typedef struct {
 int type;
 Display *display;
 XID resourceid;
 unsigned long serial;
 unsigned char error_code;
 unsigned char request_code;
 unsigned char minor_code;
} XErrorEvent;
typedef struct {
 int type;
 unsigned long serial;
 int send_event;
 Display *display;
 Window window;
} XAnyEvent;
typedef struct
    {
    int type;
    unsigned long serial;
    int send_event;
    Display *display;
    int extension;
    int evtype;
    } XGenericEvent;
typedef struct {
    int type;
    unsigned long serial;
    int send_event;
    Display *display;
    int extension;
    int evtype;
    unsigned int cookie;
    void *data;
} XGenericEventCookie;
typedef union _XEvent {
        int type;
 XAnyEvent xany;
 XKeyEvent xkey;
 XButtonEvent xbutton;
 XMotionEvent xmotion;
 XCrossingEvent xcrossing;
 XFocusChangeEvent xfocus;
 XExposeEvent xexpose;
 XGraphicsExposeEvent xgraphicsexpose;
 XNoExposeEvent xnoexpose;
 XVisibilityEvent xvisibility;
 XCreateWindowEvent xcreatewindow;
 XDestroyWindowEvent xdestroywindow;
 XUnmapEvent xunmap;
 XMapEvent xmap;
 XMapRequestEvent xmaprequest;
 XReparentEvent xreparent;
 XConfigureEvent xconfigure;
 XGravityEvent xgravity;
 XResizeRequestEvent xresizerequest;
 XConfigureRequestEvent xconfigurerequest;
 XCirculateEvent xcirculate;
 XCirculateRequestEvent xcirculaterequest;
 XPropertyEvent xproperty;
 XSelectionClearEvent xselectionclear;
 XSelectionRequestEvent xselectionrequest;
 XSelectionEvent xselection;
 XColormapEvent xcolormap;
 XClientMessageEvent xclient;
 XMappingEvent xmapping;
 XErrorEvent xerror;
 XKeymapEvent xkeymap;
 XGenericEvent xgeneric;
 XGenericEventCookie xcookie;
 long pad[24];
} XEvent;
typedef struct {
    short lbearing;
    short rbearing;
    short width;
    short ascent;
    short descent;
    unsigned short attributes;
} XCharStruct;
typedef struct {
    Atom name;
    unsigned long card32;
} XFontProp;
typedef struct {
    XExtData *ext_data;
    Font fid;
    unsigned direction;
    unsigned min_char_or_byte2;
    unsigned max_char_or_byte2;
    unsigned min_byte1;
    unsigned max_byte1;
    int all_chars_exist;
    unsigned default_char;
    int n_properties;
    XFontProp *properties;
    XCharStruct min_bounds;
    XCharStruct max_bounds;
    XCharStruct *per_char;
    int ascent;
    int descent;
} XFontStruct;
typedef struct {
    char *chars;
    int nchars;
    int delta;
    Font font;
} XTextItem;
typedef struct {
    unsigned char byte1;
    unsigned char byte2;
} XChar2b;
typedef struct {
    XChar2b *chars;
    int nchars;
    int delta;
    Font font;
} XTextItem16;
typedef union { Display *display;
  GC gc;
  Visual *visual;
  Screen *screen;
  ScreenFormat *pixmap_format;
  XFontStruct *font; } XEDataObject;
typedef struct {
    XRectangle max_ink_extent;
    XRectangle max_logical_extent;
} XFontSetExtents;
typedef struct _XOM *XOM;
typedef struct _XOC *XOC, *XFontSet;
typedef struct {
    char *chars;
    int nchars;
    int delta;
    XFontSet font_set;
} XmbTextItem;
typedef struct {
    wchar_t *chars;
    int nchars;
    int delta;
    XFontSet font_set;
} XwcTextItem;
typedef struct {
    int charset_count;
    char **charset_list;
} XOMCharSetList;
typedef enum {
    XOMOrientation_LTR_TTB,
    XOMOrientation_RTL_TTB,
    XOMOrientation_TTB_LTR,
    XOMOrientation_TTB_RTL,
    XOMOrientation_Context
} XOrientation;
typedef struct {
    int num_orientation;
    XOrientation *orientation;
} XOMOrientation;
typedef struct {
    int num_font;
    XFontStruct **font_struct_list;
    char **font_name_list;
} XOMFontInfo;
typedef struct _XIM *XIM;
typedef struct _XIC *XIC;
typedef void (*XIMProc)(
    XIM,
    XPointer,
    XPointer
);
typedef int (*XICProc)(
    XIC,
    XPointer,
    XPointer
);
typedef void (*XIDProc)(
    Display*,
    XPointer,
    XPointer
);
typedef unsigned long XIMStyle;
typedef struct {
    unsigned short count_styles;
    XIMStyle *supported_styles;
} XIMStyles;
typedef void *XVaNestedList;
typedef struct {
    XPointer client_data;
    XIMProc callback;
} XIMCallback;
typedef struct {
    XPointer client_data;
    XICProc callback;
} XICCallback;
typedef unsigned long XIMFeedback;
typedef struct _XIMText {
    unsigned short length;
    XIMFeedback *feedback;
    int encoding_is_wchar;
    union {
 char *multi_byte;
 wchar_t *wide_char;
    } string;
} XIMText;
typedef unsigned long XIMPreeditState;
typedef struct _XIMPreeditStateNotifyCallbackStruct {
    XIMPreeditState state;
} XIMPreeditStateNotifyCallbackStruct;
typedef unsigned long XIMResetState;
typedef unsigned long XIMStringConversionFeedback;
typedef struct _XIMStringConversionText {
    unsigned short length;
    XIMStringConversionFeedback *feedback;
    int encoding_is_wchar;
    union {
 char *mbs;
 wchar_t *wcs;
    } string;
} XIMStringConversionText;
typedef unsigned short XIMStringConversionPosition;
typedef unsigned short XIMStringConversionType;
typedef unsigned short XIMStringConversionOperation;
typedef enum {
    XIMForwardChar, XIMBackwardChar,
    XIMForwardWord, XIMBackwardWord,
    XIMCaretUp, XIMCaretDown,
    XIMNextLine, XIMPreviousLine,
    XIMLineStart, XIMLineEnd,
    XIMAbsolutePosition,
    XIMDontChange
} XIMCaretDirection;
typedef struct _XIMStringConversionCallbackStruct {
    XIMStringConversionPosition position;
    XIMCaretDirection direction;
    XIMStringConversionOperation operation;
    unsigned short factor;
    XIMStringConversionText *text;
} XIMStringConversionCallbackStruct;
typedef struct _XIMPreeditDrawCallbackStruct {
    int caret;
    int chg_first;
    int chg_length;
    XIMText *text;
} XIMPreeditDrawCallbackStruct;
typedef enum {
    XIMIsInvisible,
    XIMIsPrimary,
    XIMIsSecondary
} XIMCaretStyle;
typedef struct _XIMPreeditCaretCallbackStruct {
    int position;
    XIMCaretDirection direction;
    XIMCaretStyle style;
} XIMPreeditCaretCallbackStruct;
typedef enum {
    XIMTextType,
    XIMBitmapType
} XIMStatusDataType;
typedef struct _XIMStatusDrawCallbackStruct {
    XIMStatusDataType type;
    union {
 XIMText *text;
 Pixmap bitmap;
    } data;
} XIMStatusDrawCallbackStruct;
typedef struct _XIMHotKeyTrigger {
    KeySym keysym;
    int modifier;
    int modifier_mask;
} XIMHotKeyTrigger;
typedef struct _XIMHotKeyTriggers {
    int num_hot_key;
    XIMHotKeyTrigger *key;
} XIMHotKeyTriggers;
typedef unsigned long XIMHotKeyState;
typedef struct {
    unsigned short count_values;
    char **supported_values;
} XIMValuesList;
extern int _Xdebug;
extern XFontStruct *XLoadQueryFont(
    Display* ,
    const char*
);
extern XFontStruct *XQueryFont(
    Display* ,
    XID
);
extern XTimeCoord *XGetMotionEvents(
    Display* ,
    Window ,
    Time ,
    Time ,
    int*
);
extern XModifierKeymap *XDeleteModifiermapEntry(
    XModifierKeymap* ,
    KeyCode ,
    int
);
extern XModifierKeymap *XGetModifierMapping(
    Display*
);
extern XModifierKeymap *XInsertModifiermapEntry(
    XModifierKeymap* ,
    KeyCode ,
    int
);
extern XModifierKeymap *XNewModifiermap(
    int
);
extern XImage *XCreateImage(
    Display* ,
    Visual* ,
    unsigned int ,
    int ,
    int ,
    char* ,
    unsigned int ,
    unsigned int ,
    int ,
    int
);
extern int XInitImage(
    XImage*
);
extern XImage *XGetImage(
    Display* ,
    Drawable ,
    int ,
    int ,
    unsigned int ,
    unsigned int ,
    unsigned long ,
    int
);
extern XImage *XGetSubImage(
    Display* ,
    Drawable ,
    int ,
    int ,
    unsigned int ,
    unsigned int ,
    unsigned long ,
    int ,
    XImage* ,
    int ,
    int
);
extern Display *XOpenDisplay(
    const char*
);
extern void XrmInitialize(
    void
);
extern char *XFetchBytes(
    Display* ,
    int*
);
extern char *XFetchBuffer(
    Display* ,
    int* ,
    int
);
extern char *XGetAtomName(
    Display* ,
    Atom
);
extern int XGetAtomNames(
    Display* ,
    Atom* ,
    int ,
    char**
);
extern char *XGetDefault(
    Display* ,
    const char* ,
    const char*
);
extern char *XDisplayName(
    const char*
);
extern char *XKeysymToString(
    KeySym
);
extern int (*XSynchronize(
    Display* ,
    int
))(
    Display*
);
extern int (*XSetAfterFunction(
    Display* ,
    int (*) (
      Display*
            )
))(
    Display*
);
extern Atom XInternAtom(
    Display* ,
    const char* ,
    int
);
extern int XInternAtoms(
    Display* ,
    char** ,
    int ,
    int ,
    Atom*
);
extern Colormap XCopyColormapAndFree(
    Display* ,
    Colormap
);
extern Colormap XCreateColormap(
    Display* ,
    Window ,
    Visual* ,
    int
);
extern Cursor XCreatePixmapCursor(
    Display* ,
    Pixmap ,
    Pixmap ,
    XColor* ,
    XColor* ,
    unsigned int ,
    unsigned int
);
extern Cursor XCreateGlyphCursor(
    Display* ,
    Font ,
    Font ,
    unsigned int ,
    unsigned int ,
    XColor const * ,
    XColor const *
);
extern Cursor XCreateFontCursor(
    Display* ,
    unsigned int
);
extern Font XLoadFont(
    Display* ,
    const char*
);
extern GC XCreateGC(
    Display* ,
    Drawable ,
    unsigned long ,
    XGCValues*
);
extern GContext XGContextFromGC(
    GC
);
extern void XFlushGC(
    Display* ,
    GC
);
extern Pixmap XCreatePixmap(
    Display* ,
    Drawable ,
    unsigned int ,
    unsigned int ,
    unsigned int
);
extern Pixmap XCreateBitmapFromData(
    Display* ,
    Drawable ,
    const char* ,
    unsigned int ,
    unsigned int
);
extern Pixmap XCreatePixmapFromBitmapData(
    Display* ,
    Drawable ,
    char* ,
    unsigned int ,
    unsigned int ,
    unsigned long ,
    unsigned long ,
    unsigned int
);
extern Window XCreateSimpleWindow(
    Display* ,
    Window ,
    int ,
    int ,
    unsigned int ,
    unsigned int ,
    unsigned int ,
    unsigned long ,
    unsigned long
);
extern Window XGetSelectionOwner(
    Display* ,
    Atom
);
extern Window XCreateWindow(
    Display* ,
    Window ,
    int ,
    int ,
    unsigned int ,
    unsigned int ,
    unsigned int ,
    int ,
    unsigned int ,
    Visual* ,
    unsigned long ,
    XSetWindowAttributes*
);
extern Colormap *XListInstalledColormaps(
    Display* ,
    Window ,
    int*
);
extern char **XListFonts(
    Display* ,
    const char* ,
    int ,
    int*
);
extern char **XListFontsWithInfo(
    Display* ,
    const char* ,
    int ,
    int* ,
    XFontStruct**
);
extern char **XGetFontPath(
    Display* ,
    int*
);
extern char **XListExtensions(
    Display* ,
    int*
);
extern Atom *XListProperties(
    Display* ,
    Window ,
    int*
);
extern XHostAddress *XListHosts(
    Display* ,
    int* ,
    int*
);
__attribute__((deprecated))
extern KeySym XKeycodeToKeysym(
    Display* ,
    KeyCode ,
    int
);
extern KeySym XLookupKeysym(
    XKeyEvent* ,
    int
);
extern KeySym *XGetKeyboardMapping(
    Display* ,
    KeyCode ,
    int ,
    int*
);
extern KeySym XStringToKeysym(
    const char*
);
extern long XMaxRequestSize(
    Display*
);
extern long XExtendedMaxRequestSize(
    Display*
);
extern char *XResourceManagerString(
    Display*
);
extern char *XScreenResourceString(
 Screen*
);
extern unsigned long XDisplayMotionBufferSize(
    Display*
);
extern VisualID XVisualIDFromVisual(
    Visual*
);
extern int XInitThreads(
    void
);
extern void XLockDisplay(
    Display*
);
extern void XUnlockDisplay(
    Display*
);
extern XExtCodes *XInitExtension(
    Display* ,
    const char*
);
extern XExtCodes *XAddExtension(
    Display*
);
extern XExtData *XFindOnExtensionList(
    XExtData** ,
    int
);
extern XExtData **XEHeadOfExtensionList(
    XEDataObject
);
extern Window XRootWindow(
    Display* ,
    int
);
extern Window XDefaultRootWindow(
    Display*
);
extern Window XRootWindowOfScreen(
    Screen*
);
extern Visual *XDefaultVisual(
    Display* ,
    int
);
extern Visual *XDefaultVisualOfScreen(
    Screen*
);
extern GC XDefaultGC(
    Display* ,
    int
);
extern GC XDefaultGCOfScreen(
    Screen*
);
extern unsigned long XBlackPixel(
    Display* ,
    int
);
extern unsigned long XWhitePixel(
    Display* ,
    int
);
extern unsigned long XAllPlanes(
    void
);
extern unsigned long XBlackPixelOfScreen(
    Screen*
);
extern unsigned long XWhitePixelOfScreen(
    Screen*
);
extern unsigned long XNextRequest(
    Display*
);
extern unsigned long XLastKnownRequestProcessed(
    Display*
);
extern char *XServerVendor(
    Display*
);
extern char *XDisplayString(
    Display*
);
extern Colormap XDefaultColormap(
    Display* ,
    int
);
extern Colormap XDefaultColormapOfScreen(
    Screen*
);
extern Display *XDisplayOfScreen(
    Screen*
);
extern Screen *XScreenOfDisplay(
    Display* ,
    int
);
extern Screen *XDefaultScreenOfDisplay(
    Display*
);
extern long XEventMaskOfScreen(
    Screen*
);
extern int XScreenNumberOfScreen(
    Screen*
);
typedef int (*XErrorHandler) (
    Display* ,
    XErrorEvent*
);
extern XErrorHandler XSetErrorHandler (
    XErrorHandler
);
typedef int (*XIOErrorHandler) (
    Display*
);
extern XIOErrorHandler XSetIOErrorHandler (
    XIOErrorHandler
);
extern XPixmapFormatValues *XListPixmapFormats(
    Display* ,
    int*
);
extern int *XListDepths(
    Display* ,
    int ,
    int*
);
extern int XReconfigureWMWindow(
    Display* ,
    Window ,
    int ,
    unsigned int ,
    XWindowChanges*
);
extern int XGetWMProtocols(
    Display* ,
    Window ,
    Atom** ,
    int*
);
extern int XSetWMProtocols(
    Display* ,
    Window ,
    Atom* ,
    int
);
extern int XIconifyWindow(
    Display* ,
    Window ,
    int
);
extern int XWithdrawWindow(
    Display* ,
    Window ,
    int
);
extern int XGetCommand(
    Display* ,
    Window ,
    char*** ,
    int*
);
extern int XGetWMColormapWindows(
    Display* ,
    Window ,
    Window** ,
    int*
);
extern int XSetWMColormapWindows(
    Display* ,
    Window ,
    Window* ,
    int
);
extern void XFreeStringList(
    char**
);
extern int XSetTransientForHint(
    Display* ,
    Window ,
    Window
);
extern int XActivateScreenSaver(
    Display*
);
extern int XAddHost(
    Display* ,
    XHostAddress*
);
extern int XAddHosts(
    Display* ,
    XHostAddress* ,
    int
);
extern int XAddToExtensionList(
    struct _XExtData** ,
    XExtData*
);
extern int XAddToSaveSet(
    Display* ,
    Window
);
extern int XAllocColor(
    Display* ,
    Colormap ,
    XColor*
);
extern int XAllocColorCells(
    Display* ,
    Colormap ,
    int ,
    unsigned long* ,
    unsigned int ,
    unsigned long* ,
    unsigned int
);
extern int XAllocColorPlanes(
    Display* ,
    Colormap ,
    int ,
    unsigned long* ,
    int ,
    int ,
    int ,
    int ,
    unsigned long* ,
    unsigned long* ,
    unsigned long*
);
extern int XAllocNamedColor(
    Display* ,
    Colormap ,
    const char* ,
    XColor* ,
    XColor*
);
extern int XAllowEvents(
    Display* ,
    int ,
    Time
);
extern int XAutoRepeatOff(
    Display*
);
extern int XAutoRepeatOn(
    Display*
);
extern int XBell(
    Display* ,
    int
);
extern int XBitmapBitOrder(
    Display*
);
extern int XBitmapPad(
    Display*
);
extern int XBitmapUnit(
    Display*
);
extern int XCellsOfScreen(
    Screen*
);
extern int XChangeActivePointerGrab(
    Display* ,
    unsigned int ,
    Cursor ,
    Time
);
extern int XChangeGC(
    Display* ,
    GC ,
    unsigned long ,
    XGCValues*
);
extern int XChangeKeyboardControl(
    Display* ,
    unsigned long ,
    XKeyboardControl*
);
extern int XChangeKeyboardMapping(
    Display* ,
    int ,
    int ,
    KeySym* ,
    int
);
extern int XChangePointerControl(
    Display* ,
    int ,
    int ,
    int ,
    int ,
    int
);
extern int XChangeProperty(
    Display* ,
    Window ,
    Atom ,
    Atom ,
    int ,
    int ,
    const unsigned char* ,
    int
);
extern int XChangeSaveSet(
    Display* ,
    Window ,
    int
);
extern int XChangeWindowAttributes(
    Display* ,
    Window ,
    unsigned long ,
    XSetWindowAttributes*
);
extern int XCheckIfEvent(
    Display* ,
    XEvent* ,
    int (*) (
        Display* ,
               XEvent* ,
               XPointer
             ) ,
    XPointer
);
extern int XCheckMaskEvent(
    Display* ,
    long ,
    XEvent*
);
extern int XCheckTypedEvent(
    Display* ,
    int ,
    XEvent*
);
extern int XCheckTypedWindowEvent(
    Display* ,
    Window ,
    int ,
    XEvent*
);
extern int XCheckWindowEvent(
    Display* ,
    Window ,
    long ,
    XEvent*
);
extern int XCirculateSubwindows(
    Display* ,
    Window ,
    int
);
extern int XCirculateSubwindowsDown(
    Display* ,
    Window
);
extern int XCirculateSubwindowsUp(
    Display* ,
    Window
);
extern int XClearArea(
    Display* ,
    Window ,
    int ,
    int ,
    unsigned int ,
    unsigned int ,
    int
);
extern int XClearWindow(
    Display* ,
    Window
);
extern int XCloseDisplay(
    Display*
);
extern int XConfigureWindow(
    Display* ,
    Window ,
    unsigned int ,
    XWindowChanges*
);
extern int XConnectionNumber(
    Display*
);
extern int XConvertSelection(
    Display* ,
    Atom ,
    Atom ,
    Atom ,
    Window ,
    Time
);
extern int XCopyArea(
    Display* ,
    Drawable ,
    Drawable ,
    GC ,
    int ,
    int ,
    unsigned int ,
    unsigned int ,
    int ,
    int
);
extern int XCopyGC(
    Display* ,
    GC ,
    unsigned long ,
    GC
);
extern int XCopyPlane(
    Display* ,
    Drawable ,
    Drawable ,
    GC ,
    int ,
    int ,
    unsigned int ,
    unsigned int ,
    int ,
    int ,
    unsigned long
);
extern int XDefaultDepth(
    Display* ,
    int
);
extern int XDefaultDepthOfScreen(
    Screen*
);
extern int XDefaultScreen(
    Display*
);
extern int XDefineCursor(
    Display* ,
    Window ,
    Cursor
);
extern int XDeleteProperty(
    Display* ,
    Window ,
    Atom
);
extern int XDestroyWindow(
    Display* ,
    Window
);
extern int XDestroySubwindows(
    Display* ,
    Window
);
extern int XDoesBackingStore(
    Screen*
);
extern int XDoesSaveUnders(
    Screen*
);
extern int XDisableAccessControl(
    Display*
);
extern int XDisplayCells(
    Display* ,
    int
);
extern int XDisplayHeight(
    Display* ,
    int
);
extern int XDisplayHeightMM(
    Display* ,
    int
);
extern int XDisplayKeycodes(
    Display* ,
    int* ,
    int*
);
extern int XDisplayPlanes(
    Display* ,
    int
);
extern int XDisplayWidth(
    Display* ,
    int
);
extern int XDisplayWidthMM(
    Display* ,
    int
);
extern int XDrawArc(
    Display* ,
    Drawable ,
    GC ,
    int ,
    int ,
    unsigned int ,
    unsigned int ,
    int ,
    int
);
extern int XDrawArcs(
    Display* ,
    Drawable ,
    GC ,
    XArc* ,
    int
);
extern int XDrawImageString(
    Display* ,
    Drawable ,
    GC ,
    int ,
    int ,
    const char* ,
    int
);
extern int XDrawImageString16(
    Display* ,
    Drawable ,
    GC ,
    int ,
    int ,
    const XChar2b* ,
    int
);
extern int XDrawLine(
    Display* ,
    Drawable ,
    GC ,
    int ,
    int ,
    int ,
    int
);
extern int XDrawLines(
    Display* ,
    Drawable ,
    GC ,
    XPoint* ,
    int ,
    int
);
extern int XDrawPoint(
    Display* ,
    Drawable ,
    GC ,
    int ,
    int
);
extern int XDrawPoints(
    Display* ,
    Drawable ,
    GC ,
    XPoint* ,
    int ,
    int
);
extern int XDrawRectangle(
    Display* ,
    Drawable ,
    GC ,
    int ,
    int ,
    unsigned int ,
    unsigned int
);
extern int XDrawRectangles(
    Display* ,
    Drawable ,
    GC ,
    XRectangle* ,
    int
);
extern int XDrawSegments(
    Display* ,
    Drawable ,
    GC ,
    XSegment* ,
    int
);
extern int XDrawString(
    Display* ,
    Drawable ,
    GC ,
    int ,
    int ,
    const char* ,
    int
);
extern int XDrawString16(
    Display* ,
    Drawable ,
    GC ,
    int ,
    int ,
    const XChar2b* ,
    int
);
extern int XDrawText(
    Display* ,
    Drawable ,
    GC ,
    int ,
    int ,
    XTextItem* ,
    int
);
extern int XDrawText16(
    Display* ,
    Drawable ,
    GC ,
    int ,
    int ,
    XTextItem16* ,
    int
);
extern int XEnableAccessControl(
    Display*
);
extern int XEventsQueued(
    Display* ,
    int
);
extern int XFetchName(
    Display* ,
    Window ,
    char**
);
extern int XFillArc(
    Display* ,
    Drawable ,
    GC ,
    int ,
    int ,
    unsigned int ,
    unsigned int ,
    int ,
    int
);
extern int XFillArcs(
    Display* ,
    Drawable ,
    GC ,
    XArc* ,
    int
);
extern int XFillPolygon(
    Display* ,
    Drawable ,
    GC ,
    XPoint* ,
    int ,
    int ,
    int
);
extern int XFillRectangle(
    Display* ,
    Drawable ,
    GC ,
    int ,
    int ,
    unsigned int ,
    unsigned int
);
extern int XFillRectangles(
    Display* ,
    Drawable ,
    GC ,
    XRectangle* ,
    int
);
extern int XFlush(
    Display*
);
extern int XForceScreenSaver(
    Display* ,
    int
);
extern int XFree(
    void*
);
extern int XFreeColormap(
    Display* ,
    Colormap
);
extern int XFreeColors(
    Display* ,
    Colormap ,
    unsigned long* ,
    int ,
    unsigned long
);
extern int XFreeCursor(
    Display* ,
    Cursor
);
extern int XFreeExtensionList(
    char**
);
extern int XFreeFont(
    Display* ,
    XFontStruct*
);
extern int XFreeFontInfo(
    char** ,
    XFontStruct* ,
    int
);
extern int XFreeFontNames(
    char**
);
extern int XFreeFontPath(
    char**
);
extern int XFreeGC(
    Display* ,
    GC
);
extern int XFreeModifiermap(
    XModifierKeymap*
);
extern int XFreePixmap(
    Display* ,
    Pixmap
);
extern int XGeometry(
    Display* ,
    int ,
    const char* ,
    const char* ,
    unsigned int ,
    unsigned int ,
    unsigned int ,
    int ,
    int ,
    int* ,
    int* ,
    int* ,
    int*
);
extern int XGetErrorDatabaseText(
    Display* ,
    const char* ,
    const char* ,
    const char* ,
    char* ,
    int
);
extern int XGetErrorText(
    Display* ,
    int ,
    char* ,
    int
);
extern int XGetFontProperty(
    XFontStruct* ,
    Atom ,
    unsigned long*
);
extern int XGetGCValues(
    Display* ,
    GC ,
    unsigned long ,
    XGCValues*
);
extern int XGetGeometry(
    Display* ,
    Drawable ,
    Window* ,
    int* ,
    int* ,
    unsigned int* ,
    unsigned int* ,
    unsigned int* ,
    unsigned int*
);
extern int XGetIconName(
    Display* ,
    Window ,
    char**
);
extern int XGetInputFocus(
    Display* ,
    Window* ,
    int*
);
extern int XGetKeyboardControl(
    Display* ,
    XKeyboardState*
);
extern int XGetPointerControl(
    Display* ,
    int* ,
    int* ,
    int*
);
extern int XGetPointerMapping(
    Display* ,
    unsigned char* ,
    int
);
extern int XGetScreenSaver(
    Display* ,
    int* ,
    int* ,
    int* ,
    int*
);
extern int XGetTransientForHint(
    Display* ,
    Window ,
    Window*
);
extern int XGetWindowProperty(
    Display* ,
    Window ,
    Atom ,
    long ,
    long ,
    int ,
    Atom ,
    Atom* ,
    int* ,
    unsigned long* ,
    unsigned long* ,
    unsigned char**
);
extern int XGetWindowAttributes(
    Display* ,
    Window ,
    XWindowAttributes*
);
extern int XGrabButton(
    Display* ,
    unsigned int ,
    unsigned int ,
    Window ,
    int ,
    unsigned int ,
    int ,
    int ,
    Window ,
    Cursor
);
extern int XGrabKey(
    Display* ,
    int ,
    unsigned int ,
    Window ,
    int ,
    int ,
    int
);
extern int XGrabKeyboard(
    Display* ,
    Window ,
    int ,
    int ,
    int ,
    Time
);
extern int XGrabPointer(
    Display* ,
    Window ,
    int ,
    unsigned int ,
    int ,
    int ,
    Window ,
    Cursor ,
    Time
);
extern int XGrabServer(
    Display*
);
extern int XHeightMMOfScreen(
    Screen*
);
extern int XHeightOfScreen(
    Screen*
);
extern int XIfEvent(
    Display* ,
    XEvent* ,
    int (*) (
        Display* ,
               XEvent* ,
               XPointer
             ) ,
    XPointer
);
extern int XImageByteOrder(
    Display*
);
extern int XInstallColormap(
    Display* ,
    Colormap
);
extern KeyCode XKeysymToKeycode(
    Display* ,
    KeySym
);
extern int XKillClient(
    Display* ,
    XID
);
extern int XLookupColor(
    Display* ,
    Colormap ,
    const char* ,
    XColor* ,
    XColor*
);
extern int XLowerWindow(
    Display* ,
    Window
);
extern int XMapRaised(
    Display* ,
    Window
);
extern int XMapSubwindows(
    Display* ,
    Window
);
extern int XMapWindow(
    Display* ,
    Window
);
extern int XMaskEvent(
    Display* ,
    long ,
    XEvent*
);
extern int XMaxCmapsOfScreen(
    Screen*
);
extern int XMinCmapsOfScreen(
    Screen*
);
extern int XMoveResizeWindow(
    Display* ,
    Window ,
    int ,
    int ,
    unsigned int ,
    unsigned int
);
extern int XMoveWindow(
    Display* ,
    Window ,
    int ,
    int
);
extern int XNextEvent(
    Display* ,
    XEvent*
);
extern int XNoOp(
    Display*
);
extern int XParseColor(
    Display* ,
    Colormap ,
    const char* ,
    XColor*
);
extern int XParseGeometry(
    const char* ,
    int* ,
    int* ,
    unsigned int* ,
    unsigned int*
);
extern int XPeekEvent(
    Display* ,
    XEvent*
);
extern int XPeekIfEvent(
    Display* ,
    XEvent* ,
    int (*) (
        Display* ,
               XEvent* ,
               XPointer
             ) ,
    XPointer
);
extern int XPending(
    Display*
);
extern int XPlanesOfScreen(
    Screen*
);
extern int XProtocolRevision(
    Display*
);
extern int XProtocolVersion(
    Display*
);
extern int XPutBackEvent(
    Display* ,
    XEvent*
);
extern int XPutImage(
    Display* ,
    Drawable ,
    GC ,
    XImage* ,
    int ,
    int ,
    int ,
    int ,
    unsigned int ,
    unsigned int
);
extern int XQLength(
    Display*
);
extern int XQueryBestCursor(
    Display* ,
    Drawable ,
    unsigned int ,
    unsigned int ,
    unsigned int* ,
    unsigned int*
);
extern int XQueryBestSize(
    Display* ,
    int ,
    Drawable ,
    unsigned int ,
    unsigned int ,
    unsigned int* ,
    unsigned int*
);
extern int XQueryBestStipple(
    Display* ,
    Drawable ,
    unsigned int ,
    unsigned int ,
    unsigned int* ,
    unsigned int*
);
extern int XQueryBestTile(
    Display* ,
    Drawable ,
    unsigned int ,
    unsigned int ,
    unsigned int* ,
    unsigned int*
);
extern int XQueryColor(
    Display* ,
    Colormap ,
    XColor*
);
extern int XQueryColors(
    Display* ,
    Colormap ,
    XColor* ,
    int
);
extern int XQueryExtension(
    Display* ,
    const char* ,
    int* ,
    int* ,
    int*
);
extern int XQueryKeymap(
    Display* ,
    char [32]
);
extern int XQueryPointer(
    Display* ,
    Window ,
    Window* ,
    Window* ,
    int* ,
    int* ,
    int* ,
    int* ,
    unsigned int*
);
extern int XQueryTextExtents(
    Display* ,
    XID ,
    const char* ,
    int ,
    int* ,
    int* ,
    int* ,
    XCharStruct*
);
extern int XQueryTextExtents16(
    Display* ,
    XID ,
    const XChar2b* ,
    int ,
    int* ,
    int* ,
    int* ,
    XCharStruct*
);
extern int XQueryTree(
    Display* ,
    Window ,
    Window* ,
    Window* ,
    Window** ,
    unsigned int*
);
extern int XRaiseWindow(
    Display* ,
    Window
);
extern int XReadBitmapFile(
    Display* ,
    Drawable ,
    const char* ,
    unsigned int* ,
    unsigned int* ,
    Pixmap* ,
    int* ,
    int*
);
extern int XReadBitmapFileData(
    const char* ,
    unsigned int* ,
    unsigned int* ,
    unsigned char** ,
    int* ,
    int*
);
extern int XRebindKeysym(
    Display* ,
    KeySym ,
    KeySym* ,
    int ,
    const unsigned char* ,
    int
);
extern int XRecolorCursor(
    Display* ,
    Cursor ,
    XColor* ,
    XColor*
);
extern int XRefreshKeyboardMapping(
    XMappingEvent*
);
extern int XRemoveFromSaveSet(
    Display* ,
    Window
);
extern int XRemoveHost(
    Display* ,
    XHostAddress*
);
extern int XRemoveHosts(
    Display* ,
    XHostAddress* ,
    int
);
extern int XReparentWindow(
    Display* ,
    Window ,
    Window ,
    int ,
    int
);
extern int XResetScreenSaver(
    Display*
);
extern int XResizeWindow(
    Display* ,
    Window ,
    unsigned int ,
    unsigned int
);
extern int XRestackWindows(
    Display* ,
    Window* ,
    int
);
extern int XRotateBuffers(
    Display* ,
    int
);
extern int XRotateWindowProperties(
    Display* ,
    Window ,
    Atom* ,
    int ,
    int
);
extern int XScreenCount(
    Display*
);
extern int XSelectInput(
    Display* ,
    Window ,
    long
);
extern int XSendEvent(
    Display* ,
    Window ,
    int ,
    long ,
    XEvent*
);
extern int XSetAccessControl(
    Display* ,
    int
);
extern int XSetArcMode(
    Display* ,
    GC ,
    int
);
extern int XSetBackground(
    Display* ,
    GC ,
    unsigned long
);
extern int XSetClipMask(
    Display* ,
    GC ,
    Pixmap
);
extern int XSetClipOrigin(
    Display* ,
    GC ,
    int ,
    int
);
extern int XSetClipRectangles(
    Display* ,
    GC ,
    int ,
    int ,
    XRectangle* ,
    int ,
    int
);
extern int XSetCloseDownMode(
    Display* ,
    int
);
extern int XSetCommand(
    Display* ,
    Window ,
    char** ,
    int
);
extern int XSetDashes(
    Display* ,
    GC ,
    int ,
    const char* ,
    int
);
extern int XSetFillRule(
    Display* ,
    GC ,
    int
);
extern int XSetFillStyle(
    Display* ,
    GC ,
    int
);
extern int XSetFont(
    Display* ,
    GC ,
    Font
);
extern int XSetFontPath(
    Display* ,
    char** ,
    int
);
extern int XSetForeground(
    Display* ,
    GC ,
    unsigned long
);
extern int XSetFunction(
    Display* ,
    GC ,
    int
);
extern int XSetGraphicsExposures(
    Display* ,
    GC ,
    int
);
extern int XSetIconName(
    Display* ,
    Window ,
    const char*
);
extern int XSetInputFocus(
    Display* ,
    Window ,
    int ,
    Time
);
extern int XSetLineAttributes(
    Display* ,
    GC ,
    unsigned int ,
    int ,
    int ,
    int
);
extern int XSetModifierMapping(
    Display* ,
    XModifierKeymap*
);
extern int XSetPlaneMask(
    Display* ,
    GC ,
    unsigned long
);
extern int XSetPointerMapping(
    Display* ,
    const unsigned char* ,
    int
);
extern int XSetScreenSaver(
    Display* ,
    int ,
    int ,
    int ,
    int
);
extern int XSetSelectionOwner(
    Display* ,
    Atom ,
    Window ,
    Time
);
extern int XSetState(
    Display* ,
    GC ,
    unsigned long ,
    unsigned long ,
    int ,
    unsigned long
);
extern int XSetStipple(
    Display* ,
    GC ,
    Pixmap
);
extern int XSetSubwindowMode(
    Display* ,
    GC ,
    int
);
extern int XSetTSOrigin(
    Display* ,
    GC ,
    int ,
    int
);
extern int XSetTile(
    Display* ,
    GC ,
    Pixmap
);
extern int XSetWindowBackground(
    Display* ,
    Window ,
    unsigned long
);
extern int XSetWindowBackgroundPixmap(
    Display* ,
    Window ,
    Pixmap
);
extern int XSetWindowBorder(
    Display* ,
    Window ,
    unsigned long
);
extern int XSetWindowBorderPixmap(
    Display* ,
    Window ,
    Pixmap
);
extern int XSetWindowBorderWidth(
    Display* ,
    Window ,
    unsigned int
);
extern int XSetWindowColormap(
    Display* ,
    Window ,
    Colormap
);
extern int XStoreBuffer(
    Display* ,
    const char* ,
    int ,
    int
);
extern int XStoreBytes(
    Display* ,
    const char* ,
    int
);
extern int XStoreColor(
    Display* ,
    Colormap ,
    XColor*
);
extern int XStoreColors(
    Display* ,
    Colormap ,
    XColor* ,
    int
);
extern int XStoreName(
    Display* ,
    Window ,
    const char*
);
extern int XStoreNamedColor(
    Display* ,
    Colormap ,
    const char* ,
    unsigned long ,
    int
);
extern int XSync(
    Display* ,
    int
);
extern int XTextExtents(
    XFontStruct* ,
    const char* ,
    int ,
    int* ,
    int* ,
    int* ,
    XCharStruct*
);
extern int XTextExtents16(
    XFontStruct* ,
    const XChar2b* ,
    int ,
    int* ,
    int* ,
    int* ,
    XCharStruct*
);
extern int XTextWidth(
    XFontStruct* ,
    const char* ,
    int
);
extern int XTextWidth16(
    XFontStruct* ,
    const XChar2b* ,
    int
);
extern int XTranslateCoordinates(
    Display* ,
    Window ,
    Window ,
    int ,
    int ,
    int* ,
    int* ,
    Window*
);
extern int XUndefineCursor(
    Display* ,
    Window
);
extern int XUngrabButton(
    Display* ,
    unsigned int ,
    unsigned int ,
    Window
);
extern int XUngrabKey(
    Display* ,
    int ,
    unsigned int ,
    Window
);
extern int XUngrabKeyboard(
    Display* ,
    Time
);
extern int XUngrabPointer(
    Display* ,
    Time
);
extern int XUngrabServer(
    Display*
);
extern int XUninstallColormap(
    Display* ,
    Colormap
);
extern int XUnloadFont(
    Display* ,
    Font
);
extern int XUnmapSubwindows(
    Display* ,
    Window
);
extern int XUnmapWindow(
    Display* ,
    Window
);
extern int XVendorRelease(
    Display*
);
extern int XWarpPointer(
    Display* ,
    Window ,
    Window ,
    int ,
    int ,
    unsigned int ,
    unsigned int ,
    int ,
    int
);
extern int XWidthMMOfScreen(
    Screen*
);
extern int XWidthOfScreen(
    Screen*
);
extern int XWindowEvent(
    Display* ,
    Window ,
    long ,
    XEvent*
);
extern int XWriteBitmapFile(
    Display* ,
    const char* ,
    Pixmap ,
    unsigned int ,
    unsigned int ,
    int ,
    int
);
extern int XSupportsLocale (void);
extern char *XSetLocaleModifiers(
    const char*
);
extern XOM XOpenOM(
    Display* ,
    struct _XrmHashBucketRec* ,
    const char* ,
    const char*
);
extern int XCloseOM(
    XOM
);
extern char *XSetOMValues(
    XOM ,
    ...
) __attribute__ ((__sentinel__(0)));
extern char *XGetOMValues(
    XOM ,
    ...
) __attribute__ ((__sentinel__(0)));
extern Display *XDisplayOfOM(
    XOM
);
extern char *XLocaleOfOM(
    XOM
);
extern XOC XCreateOC(
    XOM ,
    ...
) __attribute__ ((__sentinel__(0)));
extern void XDestroyOC(
    XOC
);
extern XOM XOMOfOC(
    XOC
);
extern char *XSetOCValues(
    XOC ,
    ...
) __attribute__ ((__sentinel__(0)));
extern char *XGetOCValues(
    XOC ,
    ...
) __attribute__ ((__sentinel__(0)));
extern XFontSet XCreateFontSet(
    Display* ,
    const char* ,
    char*** ,
    int* ,
    char**
);
extern void XFreeFontSet(
    Display* ,
    XFontSet
);
extern int XFontsOfFontSet(
    XFontSet ,
    XFontStruct*** ,
    char***
);
extern char *XBaseFontNameListOfFontSet(
    XFontSet
);
extern char *XLocaleOfFontSet(
    XFontSet
);
extern int XContextDependentDrawing(
    XFontSet
);
extern int XDirectionalDependentDrawing(
    XFontSet
);
extern int XContextualDrawing(
    XFontSet
);
extern XFontSetExtents *XExtentsOfFontSet(
    XFontSet
);
extern int XmbTextEscapement(
    XFontSet ,
    const char* ,
    int
);
extern int XwcTextEscapement(
    XFontSet ,
    const wchar_t* ,
    int
);
extern int Xutf8TextEscapement(
    XFontSet ,
    const char* ,
    int
);
extern int XmbTextExtents(
    XFontSet ,
    const char* ,
    int ,
    XRectangle* ,
    XRectangle*
);
extern int XwcTextExtents(
    XFontSet ,
    const wchar_t* ,
    int ,
    XRectangle* ,
    XRectangle*
);
extern int Xutf8TextExtents(
    XFontSet ,
    const char* ,
    int ,
    XRectangle* ,
    XRectangle*
);
extern int XmbTextPerCharExtents(
    XFontSet ,
    const char* ,
    int ,
    XRectangle* ,
    XRectangle* ,
    int ,
    int* ,
    XRectangle* ,
    XRectangle*
);
extern int XwcTextPerCharExtents(
    XFontSet ,
    const wchar_t* ,
    int ,
    XRectangle* ,
    XRectangle* ,
    int ,
    int* ,
    XRectangle* ,
    XRectangle*
);
extern int Xutf8TextPerCharExtents(
    XFontSet ,
    const char* ,
    int ,
    XRectangle* ,
    XRectangle* ,
    int ,
    int* ,
    XRectangle* ,
    XRectangle*
);
extern void XmbDrawText(
    Display* ,
    Drawable ,
    GC ,
    int ,
    int ,
    XmbTextItem* ,
    int
);
extern void XwcDrawText(
    Display* ,
    Drawable ,
    GC ,
    int ,
    int ,
    XwcTextItem* ,
    int
);
extern void Xutf8DrawText(
    Display* ,
    Drawable ,
    GC ,
    int ,
    int ,
    XmbTextItem* ,
    int
);
extern void XmbDrawString(
    Display* ,
    Drawable ,
    XFontSet ,
    GC ,
    int ,
    int ,
    const char* ,
    int
);
extern void XwcDrawString(
    Display* ,
    Drawable ,
    XFontSet ,
    GC ,
    int ,
    int ,
    const wchar_t* ,
    int
);
extern void Xutf8DrawString(
    Display* ,
    Drawable ,
    XFontSet ,
    GC ,
    int ,
    int ,
    const char* ,
    int
);
extern void XmbDrawImageString(
    Display* ,
    Drawable ,
    XFontSet ,
    GC ,
    int ,
    int ,
    const char* ,
    int
);
extern void XwcDrawImageString(
    Display* ,
    Drawable ,
    XFontSet ,
    GC ,
    int ,
    int ,
    const wchar_t* ,
    int
);
extern void Xutf8DrawImageString(
    Display* ,
    Drawable ,
    XFontSet ,
    GC ,
    int ,
    int ,
    const char* ,
    int
);
extern XIM XOpenIM(
    Display* ,
    struct _XrmHashBucketRec* ,
    char* ,
    char*
);
extern int XCloseIM(
    XIM
);
extern char *XGetIMValues(
    XIM , ...
) __attribute__ ((__sentinel__(0)));
extern char *XSetIMValues(
    XIM , ...
) __attribute__ ((__sentinel__(0)));
extern Display *XDisplayOfIM(
    XIM
);
extern char *XLocaleOfIM(
    XIM
);
extern XIC XCreateIC(
    XIM , ...
) __attribute__ ((__sentinel__(0)));
extern void XDestroyIC(
    XIC
);
extern void XSetICFocus(
    XIC
);
extern void XUnsetICFocus(
    XIC
);
extern wchar_t *XwcResetIC(
    XIC
);
extern char *XmbResetIC(
    XIC
);
extern char *Xutf8ResetIC(
    XIC
);
extern char *XSetICValues(
    XIC , ...
) __attribute__ ((__sentinel__(0)));
extern char *XGetICValues(
    XIC , ...
) __attribute__ ((__sentinel__(0)));
extern XIM XIMOfIC(
    XIC
);
extern int XFilterEvent(
    XEvent* ,
    Window
);
extern int XmbLookupString(
    XIC ,
    XKeyPressedEvent* ,
    char* ,
    int ,
    KeySym* ,
    int*
);
extern int XwcLookupString(
    XIC ,
    XKeyPressedEvent* ,
    wchar_t* ,
    int ,
    KeySym* ,
    int*
);
extern int Xutf8LookupString(
    XIC ,
    XKeyPressedEvent* ,
    char* ,
    int ,
    KeySym* ,
    int*
);
extern XVaNestedList XVaCreateNestedList(
    int , ...
) __attribute__ ((__sentinel__(0)));
extern int XRegisterIMInstantiateCallback(
    Display* ,
    struct _XrmHashBucketRec* ,
    char* ,
    char* ,
    XIDProc ,
    XPointer
);
extern int XUnregisterIMInstantiateCallback(
    Display* ,
    struct _XrmHashBucketRec* ,
    char* ,
    char* ,
    XIDProc ,
    XPointer
);
typedef void (*XConnectionWatchProc)(
    Display* ,
    XPointer ,
    int ,
    int ,
    XPointer*
);
extern int XInternalConnectionNumbers(
    Display* ,
    int** ,
    int*
);
extern void XProcessInternalConnection(
    Display* ,
    int
);
extern int XAddConnectionWatch(
    Display* ,
    XConnectionWatchProc ,
    XPointer
);
extern void XRemoveConnectionWatch(
    Display* ,
    XConnectionWatchProc ,
    XPointer
);
extern void XSetAuthorization(
    char * ,
    int ,
    char * ,
    int
);
extern int _Xmbtowc(
    wchar_t * ,
    char * ,
    int
);
extern int _Xwctomb(
    char * ,
    wchar_t
);
extern int XGetEventData(
    Display* ,
    XGenericEventCookie*
);
extern void XFreeEventData(
    Display* ,
    XGenericEventCookie*
);
typedef struct {
     long flags;
 int x, y;
 int width, height;
 int min_width, min_height;
 int max_width, max_height;
     int width_inc, height_inc;
 struct {
  int x;
  int y;
 } min_aspect, max_aspect;
 int base_width, base_height;
 int win_gravity;
} XSizeHints;
typedef struct {
 long flags;
 int input;
 int initial_state;
 Pixmap icon_pixmap;
 Window icon_window;
 int icon_x, icon_y;
 Pixmap icon_mask;
 XID window_group;
} XWMHints;
typedef struct {
    unsigned char *value;
    Atom encoding;
    int format;
    unsigned long nitems;
} XTextProperty;
typedef enum {
    XStringStyle,
    XCompoundTextStyle,
    XTextStyle,
    XStdICCTextStyle,
    XUTF8StringStyle
} XICCEncodingStyle;
typedef struct {
 int min_width, min_height;
 int max_width, max_height;
 int width_inc, height_inc;
} XIconSize;
typedef struct {
 char *res_name;
 char *res_class;
} XClassHint;
typedef struct _XComposeStatus {
    XPointer compose_ptr;
    int chars_matched;
} XComposeStatus;
typedef struct _XRegion *Region;
typedef struct {
  Visual *visual;
  VisualID visualid;
  int screen;
  int depth;
  int class;
  unsigned long red_mask;
  unsigned long green_mask;
  unsigned long blue_mask;
  int colormap_size;
  int bits_per_rgb;
} XVisualInfo;
typedef struct {
 Colormap colormap;
 unsigned long red_max;
 unsigned long red_mult;
 unsigned long green_max;
 unsigned long green_mult;
 unsigned long blue_max;
 unsigned long blue_mult;
 unsigned long base_pixel;
 VisualID visualid;
 XID killid;
} XStandardColormap;
typedef int XContext;
extern XClassHint *XAllocClassHint (
    void
);
extern XIconSize *XAllocIconSize (
    void
);
extern XSizeHints *XAllocSizeHints (
    void
);
extern XStandardColormap *XAllocStandardColormap (
    void
);
extern XWMHints *XAllocWMHints (
    void
);
extern int XClipBox(
    Region ,
    XRectangle*
);
extern Region XCreateRegion(
    void
);
extern const char *XDefaultString (void);
extern int XDeleteContext(
    Display* ,
    XID ,
    XContext
);
extern int XDestroyRegion(
    Region
);
extern int XEmptyRegion(
    Region
);
extern int XEqualRegion(
    Region ,
    Region
);
extern int XFindContext(
    Display* ,
    XID ,
    XContext ,
    XPointer*
);
extern int XGetClassHint(
    Display* ,
    Window ,
    XClassHint*
);
extern int XGetIconSizes(
    Display* ,
    Window ,
    XIconSize** ,
    int*
);
extern int XGetNormalHints(
    Display* ,
    Window ,
    XSizeHints*
);
extern int XGetRGBColormaps(
    Display* ,
    Window ,
    XStandardColormap** ,
    int* ,
    Atom
);
extern int XGetSizeHints(
    Display* ,
    Window ,
    XSizeHints* ,
    Atom
);
extern int XGetStandardColormap(
    Display* ,
    Window ,
    XStandardColormap* ,
    Atom
);
extern int XGetTextProperty(
    Display* ,
    Window ,
    XTextProperty* ,
    Atom
);
extern XVisualInfo *XGetVisualInfo(
    Display* ,
    long ,
    XVisualInfo* ,
    int*
);
extern int XGetWMClientMachine(
    Display* ,
    Window ,
    XTextProperty*
);
extern XWMHints *XGetWMHints(
    Display* ,
    Window
);
extern int XGetWMIconName(
    Display* ,
    Window ,
    XTextProperty*
);
extern int XGetWMName(
    Display* ,
    Window ,
    XTextProperty*
);
extern int XGetWMNormalHints(
    Display* ,
    Window ,
    XSizeHints* ,
    long*
);
extern int XGetWMSizeHints(
    Display* ,
    Window ,
    XSizeHints* ,
    long* ,
    Atom
);
extern int XGetZoomHints(
    Display* ,
    Window ,
    XSizeHints*
);
extern int XIntersectRegion(
    Region ,
    Region ,
    Region
);
extern void XConvertCase(
    KeySym ,
    KeySym* ,
    KeySym*
);
extern int XLookupString(
    XKeyEvent* ,
    char* ,
    int ,
    KeySym* ,
    XComposeStatus*
);
extern int XMatchVisualInfo(
    Display* ,
    int ,
    int ,
    int ,
    XVisualInfo*
);
extern int XOffsetRegion(
    Region ,
    int ,
    int
);
extern int XPointInRegion(
    Region ,
    int ,
    int
);
extern Region XPolygonRegion(
    XPoint* ,
    int ,
    int
);
extern int XRectInRegion(
    Region ,
    int ,
    int ,
    unsigned int ,
    unsigned int
);
extern int XSaveContext(
    Display* ,
    XID ,
    XContext ,
    const char*
);
extern int XSetClassHint(
    Display* ,
    Window ,
    XClassHint*
);
extern int XSetIconSizes(
    Display* ,
    Window ,
    XIconSize* ,
    int
);
extern int XSetNormalHints(
    Display* ,
    Window ,
    XSizeHints*
);
extern void XSetRGBColormaps(
    Display* ,
    Window ,
    XStandardColormap* ,
    int ,
    Atom
);
extern int XSetSizeHints(
    Display* ,
    Window ,
    XSizeHints* ,
    Atom
);
extern int XSetStandardProperties(
    Display* ,
    Window ,
    const char* ,
    const char* ,
    Pixmap ,
    char** ,
    int ,
    XSizeHints*
);
extern void XSetTextProperty(
    Display* ,
    Window ,
    XTextProperty* ,
    Atom
);
extern void XSetWMClientMachine(
    Display* ,
    Window ,
    XTextProperty*
);
extern int XSetWMHints(
    Display* ,
    Window ,
    XWMHints*
);
extern void XSetWMIconName(
    Display* ,
    Window ,
    XTextProperty*
);
extern void XSetWMName(
    Display* ,
    Window ,
    XTextProperty*
);
extern void XSetWMNormalHints(
    Display* ,
    Window ,
    XSizeHints*
);
extern void XSetWMProperties(
    Display* ,
    Window ,
    XTextProperty* ,
    XTextProperty* ,
    char** ,
    int ,
    XSizeHints* ,
    XWMHints* ,
    XClassHint*
);
extern void XmbSetWMProperties(
    Display* ,
    Window ,
    const char* ,
    const char* ,
    char** ,
    int ,
    XSizeHints* ,
    XWMHints* ,
    XClassHint*
);
extern void Xutf8SetWMProperties(
    Display* ,
    Window ,
    const char* ,
    const char* ,
    char** ,
    int ,
    XSizeHints* ,
    XWMHints* ,
    XClassHint*
);
extern void XSetWMSizeHints(
    Display* ,
    Window ,
    XSizeHints* ,
    Atom
);
extern int XSetRegion(
    Display* ,
    GC ,
    Region
);
extern void XSetStandardColormap(
    Display* ,
    Window ,
    XStandardColormap* ,
    Atom
);
extern int XSetZoomHints(
    Display* ,
    Window ,
    XSizeHints*
);
extern int XShrinkRegion(
    Region ,
    int ,
    int
);
extern int XStringListToTextProperty(
    char** ,
    int ,
    XTextProperty*
);
extern int XSubtractRegion(
    Region ,
    Region ,
    Region
);
extern int XmbTextListToTextProperty(
    Display* display,
    char** list,
    int count,
    XICCEncodingStyle style,
    XTextProperty* text_prop_return
);
extern int XwcTextListToTextProperty(
    Display* display,
    wchar_t** list,
    int count,
    XICCEncodingStyle style,
    XTextProperty* text_prop_return
);
extern int Xutf8TextListToTextProperty(
    Display* display,
    char** list,
    int count,
    XICCEncodingStyle style,
    XTextProperty* text_prop_return
);
extern void XwcFreeStringList(
    wchar_t** list
);
extern int XTextPropertyToStringList(
    XTextProperty* ,
    char*** ,
    int*
);
extern int XmbTextPropertyToTextList(
    Display* display,
    const XTextProperty* text_prop,
    char*** list_return,
    int* count_return
);
extern int XwcTextPropertyToTextList(
    Display* display,
    const XTextProperty* text_prop,
    wchar_t*** list_return,
    int* count_return
);
extern int Xutf8TextPropertyToTextList(
    Display* display,
    const XTextProperty* text_prop,
    char*** list_return,
    int* count_return
);
extern int XUnionRectWithRegion(
    XRectangle* ,
    Region ,
    Region
);
extern int XUnionRegion(
    Region ,
    Region ,
    Region
);
extern int XWMGeometry(
    Display* ,
    int ,
    const char* ,
    const char* ,
    unsigned int ,
    XSizeHints* ,
    int* ,
    int* ,
    int* ,
    int* ,
    int*
);
extern int XXorRegion(
    Region ,
    Region ,
    Region
);
extern char *Xpermalloc(
    unsigned int
);
typedef int XrmQuark, *XrmQuarkList;
typedef char *XrmString;
extern XrmQuark XrmStringToQuark(
    const char*
);
extern XrmQuark XrmPermStringToQuark(
    const char*
);
extern XrmString XrmQuarkToString(
    XrmQuark
);
extern XrmQuark XrmUniqueQuark(
    void
);
typedef enum {XrmBindTightly, XrmBindLoosely} XrmBinding, *XrmBindingList;
extern void XrmStringToQuarkList(
    const char* ,
    XrmQuarkList
);
extern void XrmStringToBindingQuarkList(
    const char* ,
    XrmBindingList ,
    XrmQuarkList
);
typedef XrmQuark XrmName;
typedef XrmQuarkList XrmNameList;
typedef XrmQuark XrmClass;
typedef XrmQuarkList XrmClassList;
typedef XrmQuark XrmRepresentation;
typedef struct {
    unsigned int size;
    XPointer addr;
} XrmValue, *XrmValuePtr;
typedef struct _XrmHashBucketRec *XrmHashBucket;
typedef XrmHashBucket *XrmHashTable;
typedef XrmHashTable XrmSearchList[];
typedef struct _XrmHashBucketRec *XrmDatabase;
extern void XrmDestroyDatabase(
    XrmDatabase
);
extern void XrmQPutResource(
    XrmDatabase* ,
    XrmBindingList ,
    XrmQuarkList ,
    XrmRepresentation ,
    XrmValue*
);
extern void XrmPutResource(
    XrmDatabase* ,
    const char* ,
    const char* ,
    XrmValue*
);
extern void XrmQPutStringResource(
    XrmDatabase* ,
    XrmBindingList ,
    XrmQuarkList ,
    const char*
);
extern void XrmPutStringResource(
    XrmDatabase* ,
    const char* ,
    const char*
);
extern void XrmPutLineResource(
    XrmDatabase* ,
    const char*
);
extern int XrmQGetResource(
    XrmDatabase ,
    XrmNameList ,
    XrmClassList ,
    XrmRepresentation* ,
    XrmValue*
);
extern int XrmGetResource(
    XrmDatabase ,
    const char* ,
    const char* ,
    char** ,
    XrmValue*
);
extern int XrmQGetSearchList(
    XrmDatabase ,
    XrmNameList ,
    XrmClassList ,
    XrmSearchList ,
    int
);
extern int XrmQGetSearchResource(
    XrmSearchList ,
    XrmName ,
    XrmClass ,
    XrmRepresentation* ,
    XrmValue*
);
extern void XrmSetDatabase(
    Display* ,
    XrmDatabase
);
extern XrmDatabase XrmGetDatabase(
    Display*
);
extern XrmDatabase XrmGetFileDatabase(
    const char*
);
extern int XrmCombineFileDatabase(
    const char* ,
    XrmDatabase* ,
    int
);
extern XrmDatabase XrmGetStringDatabase(
    const char*
);
extern void XrmPutFileDatabase(
    XrmDatabase ,
    const char*
);
extern void XrmMergeDatabases(
    XrmDatabase ,
    XrmDatabase*
);
extern void XrmCombineDatabase(
    XrmDatabase ,
    XrmDatabase* ,
    int
);
extern int XrmEnumerateDatabase(
    XrmDatabase ,
    XrmNameList ,
    XrmClassList ,
    int ,
    int (*)(
      XrmDatabase* ,
      XrmBindingList ,
      XrmQuarkList ,
      XrmRepresentation* ,
      XrmValue* ,
      XPointer
      ) ,
    XPointer
);
extern const char *XrmLocaleOfDatabase(
    XrmDatabase
);
typedef enum {
    XrmoptionNoArg,
    XrmoptionIsArg,
    XrmoptionStickyArg,
    XrmoptionSepArg,
    XrmoptionResArg,
    XrmoptionSkipArg,
    XrmoptionSkipLine,
    XrmoptionSkipNArgs
} XrmOptionKind;
typedef struct {
    char *option;
    char *specifier;
    XrmOptionKind argKind;
    XPointer value;
} XrmOptionDescRec, *XrmOptionDescList;
extern void XrmParseCommand(
    XrmDatabase* ,
    XrmOptionDescList ,
    int ,
    const char* ,
    int* ,
    char**
);
typedef GdkAppLaunchContext GdkX11AppLaunchContext;
typedef struct _GdkX11AppLaunchContextClass GdkX11AppLaunchContextClass;
extern
GType gdk_x11_app_launch_context_get_type (void);
typedef GdkCursor GdkX11Cursor;
typedef struct _GdkX11CursorClass GdkX11CursorClass;
extern
GType gdk_x11_cursor_get_type (void);
extern
Display *gdk_x11_cursor_get_xdisplay (GdkCursor *cursor);
extern
Cursor gdk_x11_cursor_get_xcursor (GdkCursor *cursor);
extern
gint gdk_x11_device_get_id (GdkDevice *device);
typedef struct _GdkX11DeviceCore GdkX11DeviceCore;
typedef struct _GdkX11DeviceCoreClass GdkX11DeviceCoreClass;
extern
GType gdk_x11_device_core_get_type (void) __attribute__((__const__));
typedef struct _GdkX11DeviceXI2 GdkX11DeviceXI2;
typedef struct _GdkX11DeviceXI2Class GdkX11DeviceXI2Class;
extern
GType gdk_x11_device_xi2_get_type (void) __attribute__((__const__));
extern
GdkDevice * gdk_x11_device_manager_lookup (GdkDeviceManager *device_manager,
                                           gint device_id);
typedef struct _GdkX11DeviceManagerCore GdkX11DeviceManagerCore;
typedef struct _GdkX11DeviceManagerCoreClass GdkX11DeviceManagerCoreClass;
extern
GType gdk_x11_device_manager_core_get_type (void) __attribute__((__const__));
typedef struct _GdkX11DeviceManagerXI2 GdkX11DeviceManagerXI2;
typedef struct _GdkX11DeviceManagerXI2Class GdkX11DeviceManagerXI2Class;
extern
GType gdk_x11_device_manager_xi2_get_type (void) __attribute__((__const__));
typedef GdkDisplay GdkX11Display;
typedef struct _GdkX11DisplayClass GdkX11DisplayClass;
extern
GType gdk_x11_display_get_type (void);
extern
Display *gdk_x11_display_get_xdisplay (GdkDisplay *display);
extern
guint32 gdk_x11_display_get_user_time (GdkDisplay *display);
extern
const gchar * gdk_x11_display_get_startup_notification_id (GdkDisplay *display);
extern
void gdk_x11_display_set_startup_notification_id (GdkDisplay *display,
                                                                   const gchar *startup_id);
extern
void gdk_x11_display_set_cursor_theme (GdkDisplay *display,
                                                const gchar *theme,
                                                const gint size);
extern
void gdk_x11_display_broadcast_startup_message (GdkDisplay *display,
                                                const char *message_type,
                                                ...) __attribute__((__sentinel__));
extern
GdkDisplay *gdk_x11_lookup_xdisplay (Display *xdisplay);
extern
void gdk_x11_display_grab (GdkDisplay *display);
extern
void gdk_x11_display_ungrab (GdkDisplay *display);
extern
void gdk_x11_display_set_window_scale (GdkDisplay *display,
                                              gint scale);
extern
void gdk_x11_display_error_trap_push (GdkDisplay *display);
extern
__attribute__((warn_unused_result)) gint gdk_x11_display_error_trap_pop (GdkDisplay *display);
extern
void gdk_x11_display_error_trap_pop_ignored (GdkDisplay *display);
extern
void gdk_x11_register_standard_event_type (GdkDisplay *display,
                                                  gint event_base,
                                                  gint n_events);
extern
void gdk_x11_set_sm_client_id (const gchar *sm_client_id);
typedef GdkDisplayManager GdkX11DisplayManager;
typedef struct _GdkX11DisplayManagerClass GdkX11DisplayManagerClass;
extern
GType gdk_x11_display_manager_get_type (void);
typedef GdkDragContext GdkX11DragContext;
typedef struct _GdkX11DragContextClass GdkX11DragContextClass;
extern
GType gdk_x11_drag_context_get_type (void);
typedef struct _GdkX11GLContext GdkX11GLContext;
typedef struct _GdkX11GLContextClass GdkX11GLContextClass;
extern
GType gdk_x11_gl_context_get_type (void) __attribute__((__const__));
extern
gboolean gdk_x11_display_get_glx_version (GdkDisplay *display,
                                                 gint *major,
                                                 gint *minor);
typedef GdkKeymap GdkX11Keymap;
typedef struct _GdkX11KeymapClass GdkX11KeymapClass;
extern
GType gdk_x11_keymap_get_type (void);
extern
gint gdk_x11_keymap_get_group_for_state (GdkKeymap *keymap,
                                         guint state);
extern
gboolean gdk_x11_keymap_key_is_modifier (GdkKeymap *keymap,
                                         guint keycode);
extern
Atom gdk_x11_atom_to_xatom_for_display (GdkDisplay *display,
                                                         GdkAtom atom);
extern
GdkAtom gdk_x11_xatom_to_atom_for_display (GdkDisplay *display,
                                                         Atom xatom);
extern
Atom gdk_x11_get_xatom_by_name_for_display (GdkDisplay *display,
                                                             const gchar *atom_name);
extern
const gchar * gdk_x11_get_xatom_name_for_display (GdkDisplay *display,
                                                          Atom xatom);
extern
Atom gdk_x11_atom_to_xatom (GdkAtom atom);
extern
GdkAtom gdk_x11_xatom_to_atom (Atom xatom);
extern
Atom gdk_x11_get_xatom_by_name (const gchar *atom_name);
extern
const gchar * gdk_x11_get_xatom_name (Atom xatom);
typedef GdkScreen GdkX11Screen;
typedef struct _GdkX11ScreenClass GdkX11ScreenClass;
extern
GType gdk_x11_screen_get_type (void);
extern
Screen * gdk_x11_screen_get_xscreen (GdkScreen *screen);
extern
int gdk_x11_screen_get_screen_number (GdkScreen *screen);
extern
const char* gdk_x11_screen_get_window_manager_name (GdkScreen *screen);
extern
gint gdk_x11_get_default_screen (void);
extern
gboolean gdk_x11_screen_supports_net_wm_hint (GdkScreen *screen,
                                              GdkAtom property);
extern
XID gdk_x11_screen_get_monitor_output (GdkScreen *screen,
                                              gint monitor_num);
extern
guint32 gdk_x11_screen_get_number_of_desktops (GdkScreen *screen);
extern
guint32 gdk_x11_screen_get_current_desktop (GdkScreen *screen);
extern
gint gdk_x11_display_text_property_to_text_list (GdkDisplay *display,
                                                     GdkAtom encoding,
                                                     gint format,
                                                     const guchar *text,
                                                     gint length,
                                                     gchar ***list);
extern
void gdk_x11_free_text_list (gchar **list);
extern
gint gdk_x11_display_string_to_compound_text (GdkDisplay *display,
                                                     const gchar *str,
                                                     GdkAtom *encoding,
                                                     gint *format,
                                                     guchar **ctext,
                                                     gint *length);
extern
gboolean gdk_x11_display_utf8_to_compound_text (GdkDisplay *display,
                                                     const gchar *str,
                                                     GdkAtom *encoding,
                                                     gint *format,
                                                     guchar **ctext,
                                                     gint *length);
extern
void gdk_x11_free_compound_text (guchar *ctext);
extern
Window gdk_x11_get_default_root_xwindow (void);
extern
Display *gdk_x11_get_default_xdisplay (void);
extern
void gdk_x11_grab_server (void);
extern
void gdk_x11_ungrab_server (void);
typedef GdkVisual GdkX11Visual;
typedef struct _GdkX11VisualClass GdkX11VisualClass;
extern
GType gdk_x11_visual_get_type (void);
extern
Visual * gdk_x11_visual_get_xvisual (GdkVisual *visual);
extern
GdkVisual* gdk_x11_screen_lookup_visual (GdkScreen *screen,
                                         VisualID xvisualid);
typedef GdkWindow GdkX11Window;
typedef struct _GdkX11WindowClass GdkX11WindowClass;
extern
GType gdk_x11_window_get_type (void);
extern
Window gdk_x11_window_get_xid (GdkWindow *window);
extern
void gdk_x11_window_set_user_time (GdkWindow *window,
                                           guint32 timestamp);
extern
void gdk_x11_window_set_utf8_property (GdkWindow *window,
           const gchar *name,
           const gchar *value);
extern
void gdk_x11_window_set_theme_variant (GdkWindow *window,
                                           char *variant);
extern
void gdk_x11_window_set_frame_extents (GdkWindow *window,
                                           int left,
                                           int right,
                                           int top,
                                           int bottom);
extern
void gdk_x11_window_set_hide_titlebar_when_maximized (GdkWindow *window,
                                                          gboolean hide_titlebar_when_maximized);
extern
void gdk_x11_window_move_to_current_desktop (GdkWindow *window);
extern
guint32 gdk_x11_window_get_desktop (GdkWindow *window);
extern
void gdk_x11_window_move_to_desktop (GdkWindow *window,
                                                 guint32 desktop);
extern
void gdk_x11_window_set_frame_sync_enabled (GdkWindow *window,
                                                gboolean frame_sync_enabled);
extern
guint32 gdk_x11_get_server_time (GdkWindow *window);
extern
GdkWindow *gdk_x11_window_foreign_new_for_display (GdkDisplay *display,
                                                    Window window);
extern
GdkWindow *gdk_x11_window_lookup_for_display (GdkDisplay *display,
                                                    Window window);
typedef GdkX11AppLaunchContext *GdkX11AppLaunchContext_autoptr;
 static inline void glib_autoptr_cleanup_GdkX11AppLaunchContext (GdkX11AppLaunchContext **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GdkX11Cursor *GdkX11Cursor_autoptr;
 static inline void glib_autoptr_cleanup_GdkX11Cursor (GdkX11Cursor **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GdkX11DeviceCore *GdkX11DeviceCore_autoptr;
 static inline void glib_autoptr_cleanup_GdkX11DeviceCore (GdkX11DeviceCore **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GdkX11DeviceManagerCore *GdkX11DeviceManagerCore_autoptr;
 static inline void glib_autoptr_cleanup_GdkX11DeviceManagerCore (GdkX11DeviceManagerCore **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GdkX11DeviceManagerXI2 *GdkX11DeviceManagerXI2_autoptr;
 static inline void glib_autoptr_cleanup_GdkX11DeviceManagerXI2 (GdkX11DeviceManagerXI2 **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GdkX11DeviceXI2 *GdkX11DeviceXI2_autoptr;
 static inline void glib_autoptr_cleanup_GdkX11DeviceXI2 (GdkX11DeviceXI2 **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GdkX11Display *GdkX11Display_autoptr;
 static inline void glib_autoptr_cleanup_GdkX11Display (GdkX11Display **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GdkX11DisplayManager *GdkX11DisplayManager_autoptr;
 static inline void glib_autoptr_cleanup_GdkX11DisplayManager (GdkX11DisplayManager **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GdkX11DragContext *GdkX11DragContext_autoptr;
 static inline void glib_autoptr_cleanup_GdkX11DragContext (GdkX11DragContext **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GdkX11GLContext *GdkX11GLContext_autoptr;
 static inline void glib_autoptr_cleanup_GdkX11GLContext (GdkX11GLContext **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GdkX11Keymap *GdkX11Keymap_autoptr;
 static inline void glib_autoptr_cleanup_GdkX11Keymap (GdkX11Keymap **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GdkX11Screen *GdkX11Screen_autoptr;
 static inline void glib_autoptr_cleanup_GdkX11Screen (GdkX11Screen **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GdkX11Visual *GdkX11Visual_autoptr;
 static inline void glib_autoptr_cleanup_GdkX11Visual (GdkX11Visual **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GdkX11Window *GdkX11Window_autoptr;
 static inline void glib_autoptr_cleanup_GdkX11Window (GdkX11Window **_ptr) { if (*_ptr) (g_object_unref) (*_ptr); }
typedef GtkWidget *xt_or_gtk_widget;
struct lconv
{
  char *decimal_point;
  char *thousands_sep;
  char *grouping;
  char *int_curr_symbol;
  char *currency_symbol;
  char *mon_decimal_point;
  char *mon_thousands_sep;
  char *mon_grouping;
  char *positive_sign;
  char *negative_sign;
  char int_frac_digits;
  char frac_digits;
  char p_cs_precedes;
  char p_sep_by_space;
  char n_cs_precedes;
  char n_sep_by_space;
  char p_sign_posn;
  char n_sign_posn;
  char int_p_cs_precedes;
  char int_p_sep_by_space;
  char int_n_cs_precedes;
  char int_n_sep_by_space;
  char int_p_sign_posn;
  char int_n_sign_posn;
};
extern char *setlocale (int __category, const char *__locale) __attribute__ ((__nothrow__ , __leaf__));
extern struct lconv *localeconv (void) __attribute__ ((__nothrow__ , __leaf__));
extern __locale_t newlocale (int __category_mask, const char *__locale,
        __locale_t __base) __attribute__ ((__nothrow__ , __leaf__));
extern __locale_t duplocale (__locale_t __dataset) __attribute__ ((__nothrow__ , __leaf__));
extern void freelocale (__locale_t __dataset) __attribute__ ((__nothrow__ , __leaf__));
extern __locale_t uselocale (__locale_t __dataset) __attribute__ ((__nothrow__ , __leaf__));
struct iovec
  {
    void *iov_base;
    size_t iov_len;
  };
extern ssize_t process_vm_readv (pid_t __pid, const struct iovec *__lvec,
     unsigned long int __liovcnt,
     const struct iovec *__rvec,
     unsigned long int __riovcnt,
     unsigned long int __flags)
  __attribute__ ((__nothrow__ , __leaf__));
extern ssize_t process_vm_writev (pid_t __pid, const struct iovec *__lvec,
      unsigned long int __liovcnt,
      const struct iovec *__rvec,
      unsigned long int __riovcnt,
      unsigned long int __flags)
  __attribute__ ((__nothrow__ , __leaf__));
extern ssize_t readv (int __fd, const struct iovec *__iovec, int __count)
  __attribute__ ((__warn_unused_result__));
extern ssize_t writev (int __fd, const struct iovec *__iovec, int __count)
  __attribute__ ((__warn_unused_result__));
extern ssize_t preadv (int __fd, const struct iovec *__iovec, int __count,
         __off_t __offset) __attribute__ ((__warn_unused_result__));
extern ssize_t pwritev (int __fd, const struct iovec *__iovec, int __count,
   __off_t __offset) __attribute__ ((__warn_unused_result__));
extern ssize_t preadv64 (int __fd, const struct iovec *__iovec, int __count,
    __off64_t __offset) __attribute__ ((__warn_unused_result__));
extern ssize_t pwritev64 (int __fd, const struct iovec *__iovec, int __count,
     __off64_t __offset) __attribute__ ((__warn_unused_result__));
typedef struct xcb_connection_t xcb_connection_t;
typedef struct {
    void *data;
    int rem;
    int index;
} xcb_generic_iterator_t;
typedef struct {
    uint8_t response_type;
    uint8_t pad0;
    uint16_t sequence;
    uint32_t length;
} xcb_generic_reply_t;
typedef struct {
    uint8_t response_type;
    uint8_t pad0;
    uint16_t sequence;
    uint32_t pad[7];
    uint32_t full_sequence;
} xcb_generic_event_t;
typedef struct {
    uint8_t response_type;
    uint8_t pad0;
    uint16_t sequence;
    uint32_t length;
    uint16_t event_type;
    uint16_t pad1;
    uint32_t pad[5];
    uint32_t full_sequence;
} xcb_ge_event_t;
typedef struct {
    uint8_t response_type;
    uint8_t error_code;
    uint16_t sequence;
    uint32_t resource_id;
    uint16_t minor_code;
    uint8_t major_code;
    uint8_t pad0;
    uint32_t pad[5];
    uint32_t full_sequence;
} xcb_generic_error_t;
typedef struct {
    unsigned int sequence;
} xcb_void_cookie_t;
typedef struct xcb_char2b_t {
    uint8_t byte1;
    uint8_t byte2;
} xcb_char2b_t;
typedef struct xcb_char2b_iterator_t {
    xcb_char2b_t *data;
    int rem;
    int index;
} xcb_char2b_iterator_t;
typedef uint32_t xcb_window_t;
typedef struct xcb_window_iterator_t {
    xcb_window_t *data;
    int rem;
    int index;
} xcb_window_iterator_t;
typedef uint32_t xcb_pixmap_t;
typedef struct xcb_pixmap_iterator_t {
    xcb_pixmap_t *data;
    int rem;
    int index;
} xcb_pixmap_iterator_t;
typedef uint32_t xcb_cursor_t;
typedef struct xcb_cursor_iterator_t {
    xcb_cursor_t *data;
    int rem;
    int index;
} xcb_cursor_iterator_t;
typedef uint32_t xcb_font_t;
typedef struct xcb_font_iterator_t {
    xcb_font_t *data;
    int rem;
    int index;
} xcb_font_iterator_t;
typedef uint32_t xcb_gcontext_t;
typedef struct xcb_gcontext_iterator_t {
    xcb_gcontext_t *data;
    int rem;
    int index;
} xcb_gcontext_iterator_t;
typedef uint32_t xcb_colormap_t;
typedef struct xcb_colormap_iterator_t {
    xcb_colormap_t *data;
    int rem;
    int index;
} xcb_colormap_iterator_t;
typedef uint32_t xcb_atom_t;
typedef struct xcb_atom_iterator_t {
    xcb_atom_t *data;
    int rem;
    int index;
} xcb_atom_iterator_t;
typedef uint32_t xcb_drawable_t;
typedef struct xcb_drawable_iterator_t {
    xcb_drawable_t *data;
    int rem;
    int index;
} xcb_drawable_iterator_t;
typedef uint32_t xcb_fontable_t;
typedef struct xcb_fontable_iterator_t {
    xcb_fontable_t *data;
    int rem;
    int index;
} xcb_fontable_iterator_t;
typedef uint32_t xcb_visualid_t;
typedef struct xcb_visualid_iterator_t {
    xcb_visualid_t *data;
    int rem;
    int index;
} xcb_visualid_iterator_t;
typedef uint32_t xcb_timestamp_t;
typedef struct xcb_timestamp_iterator_t {
    xcb_timestamp_t *data;
    int rem;
    int index;
} xcb_timestamp_iterator_t;
typedef uint32_t xcb_keysym_t;
typedef struct xcb_keysym_iterator_t {
    xcb_keysym_t *data;
    int rem;
    int index;
} xcb_keysym_iterator_t;
typedef uint8_t xcb_keycode_t;
typedef struct xcb_keycode_iterator_t {
    xcb_keycode_t *data;
    int rem;
    int index;
} xcb_keycode_iterator_t;
typedef uint8_t xcb_button_t;
typedef struct xcb_button_iterator_t {
    xcb_button_t *data;
    int rem;
    int index;
} xcb_button_iterator_t;
typedef struct xcb_point_t {
    int16_t x;
    int16_t y;
} xcb_point_t;
typedef struct xcb_point_iterator_t {
    xcb_point_t *data;
    int rem;
    int index;
} xcb_point_iterator_t;
typedef struct xcb_rectangle_t {
    int16_t x;
    int16_t y;
    uint16_t width;
    uint16_t height;
} xcb_rectangle_t;
typedef struct xcb_rectangle_iterator_t {
    xcb_rectangle_t *data;
    int rem;
    int index;
} xcb_rectangle_iterator_t;
typedef struct xcb_arc_t {
    int16_t x;
    int16_t y;
    uint16_t width;
    uint16_t height;
    int16_t angle1;
    int16_t angle2;
} xcb_arc_t;
typedef struct xcb_arc_iterator_t {
    xcb_arc_t *data;
    int rem;
    int index;
} xcb_arc_iterator_t;
typedef struct xcb_format_t {
    uint8_t depth;
    uint8_t bits_per_pixel;
    uint8_t scanline_pad;
    uint8_t pad0[5];
} xcb_format_t;
typedef struct xcb_format_iterator_t {
    xcb_format_t *data;
    int rem;
    int index;
} xcb_format_iterator_t;
typedef enum xcb_visual_class_t {
    XCB_VISUAL_CLASS_STATIC_GRAY = 0,
    XCB_VISUAL_CLASS_GRAY_SCALE = 1,
    XCB_VISUAL_CLASS_STATIC_COLOR = 2,
    XCB_VISUAL_CLASS_PSEUDO_COLOR = 3,
    XCB_VISUAL_CLASS_TRUE_COLOR = 4,
    XCB_VISUAL_CLASS_DIRECT_COLOR = 5
} xcb_visual_class_t;
typedef struct xcb_visualtype_t {
    xcb_visualid_t visual_id;
    uint8_t _class;
    uint8_t bits_per_rgb_value;
    uint16_t colormap_entries;
    uint32_t red_mask;
    uint32_t green_mask;
    uint32_t blue_mask;
    uint8_t pad0[4];
} xcb_visualtype_t;
typedef struct xcb_visualtype_iterator_t {
    xcb_visualtype_t *data;
    int rem;
    int index;
} xcb_visualtype_iterator_t;
typedef struct xcb_depth_t {
    uint8_t depth;
    uint8_t pad0;
    uint16_t visuals_len;
    uint8_t pad1[4];
} xcb_depth_t;
typedef struct xcb_depth_iterator_t {
    xcb_depth_t *data;
    int rem;
    int index;
} xcb_depth_iterator_t;
typedef enum xcb_event_mask_t {
    XCB_EVENT_MASK_NO_EVENT = 0,
    XCB_EVENT_MASK_KEY_PRESS = 1,
    XCB_EVENT_MASK_KEY_RELEASE = 2,
    XCB_EVENT_MASK_BUTTON_PRESS = 4,
    XCB_EVENT_MASK_BUTTON_RELEASE = 8,
    XCB_EVENT_MASK_ENTER_WINDOW = 16,
    XCB_EVENT_MASK_LEAVE_WINDOW = 32,
    XCB_EVENT_MASK_POINTER_MOTION = 64,
    XCB_EVENT_MASK_POINTER_MOTION_HINT = 128,
    XCB_EVENT_MASK_BUTTON_1_MOTION = 256,
    XCB_EVENT_MASK_BUTTON_2_MOTION = 512,
    XCB_EVENT_MASK_BUTTON_3_MOTION = 1024,
    XCB_EVENT_MASK_BUTTON_4_MOTION = 2048,
    XCB_EVENT_MASK_BUTTON_5_MOTION = 4096,
    XCB_EVENT_MASK_BUTTON_MOTION = 8192,
    XCB_EVENT_MASK_KEYMAP_STATE = 16384,
    XCB_EVENT_MASK_EXPOSURE = 32768,
    XCB_EVENT_MASK_VISIBILITY_CHANGE = 65536,
    XCB_EVENT_MASK_STRUCTURE_NOTIFY = 131072,
    XCB_EVENT_MASK_RESIZE_REDIRECT = 262144,
    XCB_EVENT_MASK_SUBSTRUCTURE_NOTIFY = 524288,
    XCB_EVENT_MASK_SUBSTRUCTURE_REDIRECT = 1048576,
    XCB_EVENT_MASK_FOCUS_CHANGE = 2097152,
    XCB_EVENT_MASK_PROPERTY_CHANGE = 4194304,
    XCB_EVENT_MASK_COLOR_MAP_CHANGE = 8388608,
    XCB_EVENT_MASK_OWNER_GRAB_BUTTON = 16777216
} xcb_event_mask_t;
typedef enum xcb_backing_store_t {
    XCB_BACKING_STORE_NOT_USEFUL = 0,
    XCB_BACKING_STORE_WHEN_MAPPED = 1,
    XCB_BACKING_STORE_ALWAYS = 2
} xcb_backing_store_t;
typedef struct xcb_screen_t {
    xcb_window_t root;
    xcb_colormap_t default_colormap;
    uint32_t white_pixel;
    uint32_t black_pixel;
    uint32_t current_input_masks;
    uint16_t width_in_pixels;
    uint16_t height_in_pixels;
    uint16_t width_in_millimeters;
    uint16_t height_in_millimeters;
    uint16_t min_installed_maps;
    uint16_t max_installed_maps;
    xcb_visualid_t root_visual;
    uint8_t backing_stores;
    uint8_t save_unders;
    uint8_t root_depth;
    uint8_t allowed_depths_len;
} xcb_screen_t;
typedef struct xcb_screen_iterator_t {
    xcb_screen_t *data;
    int rem;
    int index;
} xcb_screen_iterator_t;
typedef struct xcb_setup_request_t {
    uint8_t byte_order;
    uint8_t pad0;
    uint16_t protocol_major_version;
    uint16_t protocol_minor_version;
    uint16_t authorization_protocol_name_len;
    uint16_t authorization_protocol_data_len;
    uint8_t pad1[2];
} xcb_setup_request_t;
typedef struct xcb_setup_request_iterator_t {
    xcb_setup_request_t *data;
    int rem;
    int index;
} xcb_setup_request_iterator_t;
typedef struct xcb_setup_failed_t {
    uint8_t status;
    uint8_t reason_len;
    uint16_t protocol_major_version;
    uint16_t protocol_minor_version;
    uint16_t length;
} xcb_setup_failed_t;
typedef struct xcb_setup_failed_iterator_t {
    xcb_setup_failed_t *data;
    int rem;
    int index;
} xcb_setup_failed_iterator_t;
typedef struct xcb_setup_authenticate_t {
    uint8_t status;
    uint8_t pad0[5];
    uint16_t length;
} xcb_setup_authenticate_t;
typedef struct xcb_setup_authenticate_iterator_t {
    xcb_setup_authenticate_t *data;
    int rem;
    int index;
} xcb_setup_authenticate_iterator_t;
typedef enum xcb_image_order_t {
    XCB_IMAGE_ORDER_LSB_FIRST = 0,
    XCB_IMAGE_ORDER_MSB_FIRST = 1
} xcb_image_order_t;
typedef struct xcb_setup_t {
    uint8_t status;
    uint8_t pad0;
    uint16_t protocol_major_version;
    uint16_t protocol_minor_version;
    uint16_t length;
    uint32_t release_number;
    uint32_t resource_id_base;
    uint32_t resource_id_mask;
    uint32_t motion_buffer_size;
    uint16_t vendor_len;
    uint16_t maximum_request_length;
    uint8_t roots_len;
    uint8_t pixmap_formats_len;
    uint8_t image_byte_order;
    uint8_t bitmap_format_bit_order;
    uint8_t bitmap_format_scanline_unit;
    uint8_t bitmap_format_scanline_pad;
    xcb_keycode_t min_keycode;
    xcb_keycode_t max_keycode;
    uint8_t pad1[4];
} xcb_setup_t;
typedef struct xcb_setup_iterator_t {
    xcb_setup_t *data;
    int rem;
    int index;
} xcb_setup_iterator_t;
typedef enum xcb_mod_mask_t {
    XCB_MOD_MASK_SHIFT = 1,
    XCB_MOD_MASK_LOCK = 2,
    XCB_MOD_MASK_CONTROL = 4,
    XCB_MOD_MASK_1 = 8,
    XCB_MOD_MASK_2 = 16,
    XCB_MOD_MASK_3 = 32,
    XCB_MOD_MASK_4 = 64,
    XCB_MOD_MASK_5 = 128,
    XCB_MOD_MASK_ANY = 32768
} xcb_mod_mask_t;
typedef enum xcb_key_but_mask_t {
    XCB_KEY_BUT_MASK_SHIFT = 1,
    XCB_KEY_BUT_MASK_LOCK = 2,
    XCB_KEY_BUT_MASK_CONTROL = 4,
    XCB_KEY_BUT_MASK_MOD_1 = 8,
    XCB_KEY_BUT_MASK_MOD_2 = 16,
    XCB_KEY_BUT_MASK_MOD_3 = 32,
    XCB_KEY_BUT_MASK_MOD_4 = 64,
    XCB_KEY_BUT_MASK_MOD_5 = 128,
    XCB_KEY_BUT_MASK_BUTTON_1 = 256,
    XCB_KEY_BUT_MASK_BUTTON_2 = 512,
    XCB_KEY_BUT_MASK_BUTTON_3 = 1024,
    XCB_KEY_BUT_MASK_BUTTON_4 = 2048,
    XCB_KEY_BUT_MASK_BUTTON_5 = 4096
} xcb_key_but_mask_t;
typedef enum xcb_window_enum_t {
    XCB_WINDOW_NONE = 0
} xcb_window_enum_t;
typedef struct xcb_key_press_event_t {
    uint8_t response_type;
    xcb_keycode_t detail;
    uint16_t sequence;
    xcb_timestamp_t time;
    xcb_window_t root;
    xcb_window_t event;
    xcb_window_t child;
    int16_t root_x;
    int16_t root_y;
    int16_t event_x;
    int16_t event_y;
    uint16_t state;
    uint8_t same_screen;
    uint8_t pad0;
} xcb_key_press_event_t;
typedef xcb_key_press_event_t xcb_key_release_event_t;
typedef enum xcb_button_mask_t {
    XCB_BUTTON_MASK_1 = 256,
    XCB_BUTTON_MASK_2 = 512,
    XCB_BUTTON_MASK_3 = 1024,
    XCB_BUTTON_MASK_4 = 2048,
    XCB_BUTTON_MASK_5 = 4096,
    XCB_BUTTON_MASK_ANY = 32768
} xcb_button_mask_t;
typedef struct xcb_button_press_event_t {
    uint8_t response_type;
    xcb_button_t detail;
    uint16_t sequence;
    xcb_timestamp_t time;
    xcb_window_t root;
    xcb_window_t event;
    xcb_window_t child;
    int16_t root_x;
    int16_t root_y;
    int16_t event_x;
    int16_t event_y;
    uint16_t state;
    uint8_t same_screen;
    uint8_t pad0;
} xcb_button_press_event_t;
typedef xcb_button_press_event_t xcb_button_release_event_t;
typedef enum xcb_motion_t {
    XCB_MOTION_NORMAL = 0,
    XCB_MOTION_HINT = 1
} xcb_motion_t;
typedef struct xcb_motion_notify_event_t {
    uint8_t response_type;
    uint8_t detail;
    uint16_t sequence;
    xcb_timestamp_t time;
    xcb_window_t root;
    xcb_window_t event;
    xcb_window_t child;
    int16_t root_x;
    int16_t root_y;
    int16_t event_x;
    int16_t event_y;
    uint16_t state;
    uint8_t same_screen;
    uint8_t pad0;
} xcb_motion_notify_event_t;
typedef enum xcb_notify_detail_t {
    XCB_NOTIFY_DETAIL_ANCESTOR = 0,
    XCB_NOTIFY_DETAIL_VIRTUAL = 1,
    XCB_NOTIFY_DETAIL_INFERIOR = 2,
    XCB_NOTIFY_DETAIL_NONLINEAR = 3,
    XCB_NOTIFY_DETAIL_NONLINEAR_VIRTUAL = 4,
    XCB_NOTIFY_DETAIL_POINTER = 5,
    XCB_NOTIFY_DETAIL_POINTER_ROOT = 6,
    XCB_NOTIFY_DETAIL_NONE = 7
} xcb_notify_detail_t;
typedef enum xcb_notify_mode_t {
    XCB_NOTIFY_MODE_NORMAL = 0,
    XCB_NOTIFY_MODE_GRAB = 1,
    XCB_NOTIFY_MODE_UNGRAB = 2,
    XCB_NOTIFY_MODE_WHILE_GRABBED = 3
} xcb_notify_mode_t;
typedef struct xcb_enter_notify_event_t {
    uint8_t response_type;
    uint8_t detail;
    uint16_t sequence;
    xcb_timestamp_t time;
    xcb_window_t root;
    xcb_window_t event;
    xcb_window_t child;
    int16_t root_x;
    int16_t root_y;
    int16_t event_x;
    int16_t event_y;
    uint16_t state;
    uint8_t mode;
    uint8_t same_screen_focus;
} xcb_enter_notify_event_t;
typedef xcb_enter_notify_event_t xcb_leave_notify_event_t;
typedef struct xcb_focus_in_event_t {
    uint8_t response_type;
    uint8_t detail;
    uint16_t sequence;
    xcb_window_t event;
    uint8_t mode;
    uint8_t pad0[3];
} xcb_focus_in_event_t;
typedef xcb_focus_in_event_t xcb_focus_out_event_t;
typedef struct xcb_keymap_notify_event_t {
    uint8_t response_type;
    uint8_t keys[31];
} xcb_keymap_notify_event_t;
typedef struct xcb_expose_event_t {
    uint8_t response_type;
    uint8_t pad0;
    uint16_t sequence;
    xcb_window_t window;
    uint16_t x;
    uint16_t y;
    uint16_t width;
    uint16_t height;
    uint16_t count;
    uint8_t pad1[2];
} xcb_expose_event_t;
typedef struct xcb_graphics_exposure_event_t {
    uint8_t response_type;
    uint8_t pad0;
    uint16_t sequence;
    xcb_drawable_t drawable;
    uint16_t x;
    uint16_t y;
    uint16_t width;
    uint16_t height;
    uint16_t minor_opcode;
    uint16_t count;
    uint8_t major_opcode;
    uint8_t pad1[3];
} xcb_graphics_exposure_event_t;
typedef struct xcb_no_exposure_event_t {
    uint8_t response_type;
    uint8_t pad0;
    uint16_t sequence;
    xcb_drawable_t drawable;
    uint16_t minor_opcode;
    uint8_t major_opcode;
    uint8_t pad1;
} xcb_no_exposure_event_t;
typedef enum xcb_visibility_t {
    XCB_VISIBILITY_UNOBSCURED = 0,
    XCB_VISIBILITY_PARTIALLY_OBSCURED = 1,
    XCB_VISIBILITY_FULLY_OBSCURED = 2
} xcb_visibility_t;
typedef struct xcb_visibility_notify_event_t {
    uint8_t response_type;
    uint8_t pad0;
    uint16_t sequence;
    xcb_window_t window;
    uint8_t state;
    uint8_t pad1[3];
} xcb_visibility_notify_event_t;
typedef struct xcb_create_notify_event_t {
    uint8_t response_type;
    uint8_t pad0;
    uint16_t sequence;
    xcb_window_t parent;
    xcb_window_t window;
    int16_t x;
    int16_t y;
    uint16_t width;
    uint16_t height;
    uint16_t border_width;
    uint8_t override_redirect;
    uint8_t pad1;
} xcb_create_notify_event_t;
typedef struct xcb_destroy_notify_event_t {
    uint8_t response_type;
    uint8_t pad0;
    uint16_t sequence;
    xcb_window_t event;
    xcb_window_t window;
} xcb_destroy_notify_event_t;
typedef struct xcb_unmap_notify_event_t {
    uint8_t response_type;
    uint8_t pad0;
    uint16_t sequence;
    xcb_window_t event;
    xcb_window_t window;
    uint8_t from_configure;
    uint8_t pad1[3];
} xcb_unmap_notify_event_t;
typedef struct xcb_map_notify_event_t {
    uint8_t response_type;
    uint8_t pad0;
    uint16_t sequence;
    xcb_window_t event;
    xcb_window_t window;
    uint8_t override_redirect;
    uint8_t pad1[3];
} xcb_map_notify_event_t;
typedef struct xcb_map_request_event_t {
    uint8_t response_type;
    uint8_t pad0;
    uint16_t sequence;
    xcb_window_t parent;
    xcb_window_t window;
} xcb_map_request_event_t;
typedef struct xcb_reparent_notify_event_t {
    uint8_t response_type;
    uint8_t pad0;
    uint16_t sequence;
    xcb_window_t event;
    xcb_window_t window;
    xcb_window_t parent;
    int16_t x;
    int16_t y;
    uint8_t override_redirect;
    uint8_t pad1[3];
} xcb_reparent_notify_event_t;
typedef struct xcb_configure_notify_event_t {
    uint8_t response_type;
    uint8_t pad0;
    uint16_t sequence;
    xcb_window_t event;
    xcb_window_t window;
    xcb_window_t above_sibling;
    int16_t x;
    int16_t y;
    uint16_t width;
    uint16_t height;
    uint16_t border_width;
    uint8_t override_redirect;
    uint8_t pad1;
} xcb_configure_notify_event_t;
typedef struct xcb_configure_request_event_t {
    uint8_t response_type;
    uint8_t stack_mode;
    uint16_t sequence;
    xcb_window_t parent;
    xcb_window_t window;
    xcb_window_t sibling;
    int16_t x;
    int16_t y;
    uint16_t width;
    uint16_t height;
    uint16_t border_width;
    uint16_t value_mask;
} xcb_configure_request_event_t;
typedef struct xcb_gravity_notify_event_t {
    uint8_t response_type;
    uint8_t pad0;
    uint16_t sequence;
    xcb_window_t event;
    xcb_window_t window;
    int16_t x;
    int16_t y;
} xcb_gravity_notify_event_t;
typedef struct xcb_resize_request_event_t {
    uint8_t response_type;
    uint8_t pad0;
    uint16_t sequence;
    xcb_window_t window;
    uint16_t width;
    uint16_t height;
} xcb_resize_request_event_t;
typedef enum xcb_place_t {
    XCB_PLACE_ON_TOP = 0,
    XCB_PLACE_ON_BOTTOM = 1
} xcb_place_t;
typedef struct xcb_circulate_notify_event_t {
    uint8_t response_type;
    uint8_t pad0;
    uint16_t sequence;
    xcb_window_t event;
    xcb_window_t window;
    uint8_t pad1[4];
    uint8_t place;
    uint8_t pad2[3];
} xcb_circulate_notify_event_t;
typedef xcb_circulate_notify_event_t xcb_circulate_request_event_t;
typedef enum xcb_property_t {
    XCB_PROPERTY_NEW_VALUE = 0,
    XCB_PROPERTY_DELETE = 1
} xcb_property_t;
typedef struct xcb_property_notify_event_t {
    uint8_t response_type;
    uint8_t pad0;
    uint16_t sequence;
    xcb_window_t window;
    xcb_atom_t atom;
    xcb_timestamp_t time;
    uint8_t state;
    uint8_t pad1[3];
} xcb_property_notify_event_t;
typedef struct xcb_selection_clear_event_t {
    uint8_t response_type;
    uint8_t pad0;
    uint16_t sequence;
    xcb_timestamp_t time;
    xcb_window_t owner;
    xcb_atom_t selection;
} xcb_selection_clear_event_t;
typedef enum xcb_time_t {
    XCB_TIME_CURRENT_TIME = 0
} xcb_time_t;
typedef enum xcb_atom_enum_t {
    XCB_ATOM_NONE = 0,
    XCB_ATOM_ANY = 0,
    XCB_ATOM_PRIMARY = 1,
    XCB_ATOM_SECONDARY = 2,
    XCB_ATOM_ARC = 3,
    XCB_ATOM_ATOM = 4,
    XCB_ATOM_BITMAP = 5,
    XCB_ATOM_CARDINAL = 6,
    XCB_ATOM_COLORMAP = 7,
    XCB_ATOM_CURSOR = 8,
    XCB_ATOM_CUT_BUFFER0 = 9,
    XCB_ATOM_CUT_BUFFER1 = 10,
    XCB_ATOM_CUT_BUFFER2 = 11,
    XCB_ATOM_CUT_BUFFER3 = 12,
    XCB_ATOM_CUT_BUFFER4 = 13,
    XCB_ATOM_CUT_BUFFER5 = 14,
    XCB_ATOM_CUT_BUFFER6 = 15,
    XCB_ATOM_CUT_BUFFER7 = 16,
    XCB_ATOM_DRAWABLE = 17,
    XCB_ATOM_FONT = 18,
    XCB_ATOM_INTEGER = 19,
    XCB_ATOM_PIXMAP = 20,
    XCB_ATOM_POINT = 21,
    XCB_ATOM_RECTANGLE = 22,
    XCB_ATOM_RESOURCE_MANAGER = 23,
    XCB_ATOM_RGB_COLOR_MAP = 24,
    XCB_ATOM_RGB_BEST_MAP = 25,
    XCB_ATOM_RGB_BLUE_MAP = 26,
    XCB_ATOM_RGB_DEFAULT_MAP = 27,
    XCB_ATOM_RGB_GRAY_MAP = 28,
    XCB_ATOM_RGB_GREEN_MAP = 29,
    XCB_ATOM_RGB_RED_MAP = 30,
    XCB_ATOM_STRING = 31,
    XCB_ATOM_VISUALID = 32,
    XCB_ATOM_WINDOW = 33,
    XCB_ATOM_WM_COMMAND = 34,
    XCB_ATOM_WM_HINTS = 35,
    XCB_ATOM_WM_CLIENT_MACHINE = 36,
    XCB_ATOM_WM_ICON_NAME = 37,
    XCB_ATOM_WM_ICON_SIZE = 38,
    XCB_ATOM_WM_NAME = 39,
    XCB_ATOM_WM_NORMAL_HINTS = 40,
    XCB_ATOM_WM_SIZE_HINTS = 41,
    XCB_ATOM_WM_ZOOM_HINTS = 42,
    XCB_ATOM_MIN_SPACE = 43,
    XCB_ATOM_NORM_SPACE = 44,
    XCB_ATOM_MAX_SPACE = 45,
    XCB_ATOM_END_SPACE = 46,
    XCB_ATOM_SUPERSCRIPT_X = 47,
    XCB_ATOM_SUPERSCRIPT_Y = 48,
    XCB_ATOM_SUBSCRIPT_X = 49,
    XCB_ATOM_SUBSCRIPT_Y = 50,
    XCB_ATOM_UNDERLINE_POSITION = 51,
    XCB_ATOM_UNDERLINE_THICKNESS = 52,
    XCB_ATOM_STRIKEOUT_ASCENT = 53,
    XCB_ATOM_STRIKEOUT_DESCENT = 54,
    XCB_ATOM_ITALIC_ANGLE = 55,
    XCB_ATOM_X_HEIGHT = 56,
    XCB_ATOM_QUAD_WIDTH = 57,
    XCB_ATOM_WEIGHT = 58,
    XCB_ATOM_POINT_SIZE = 59,
    XCB_ATOM_RESOLUTION = 60,
    XCB_ATOM_COPYRIGHT = 61,
    XCB_ATOM_NOTICE = 62,
    XCB_ATOM_FONT_NAME = 63,
    XCB_ATOM_FAMILY_NAME = 64,
    XCB_ATOM_FULL_NAME = 65,
    XCB_ATOM_CAP_HEIGHT = 66,
    XCB_ATOM_WM_CLASS = 67,
    XCB_ATOM_WM_TRANSIENT_FOR = 68
} xcb_atom_enum_t;
typedef struct xcb_selection_request_event_t {
    uint8_t response_type;
    uint8_t pad0;
    uint16_t sequence;
    xcb_timestamp_t time;
    xcb_window_t owner;
    xcb_window_t requestor;
    xcb_atom_t selection;
    xcb_atom_t target;
    xcb_atom_t property;
} xcb_selection_request_event_t;
typedef struct xcb_selection_notify_event_t {
    uint8_t response_type;
    uint8_t pad0;
    uint16_t sequence;
    xcb_timestamp_t time;
    xcb_window_t requestor;
    xcb_atom_t selection;
    xcb_atom_t target;
    xcb_atom_t property;
} xcb_selection_notify_event_t;
typedef enum xcb_colormap_state_t {
    XCB_COLORMAP_STATE_UNINSTALLED = 0,
    XCB_COLORMAP_STATE_INSTALLED = 1
} xcb_colormap_state_t;
typedef enum xcb_colormap_enum_t {
    XCB_COLORMAP_NONE = 0
} xcb_colormap_enum_t;
typedef struct xcb_colormap_notify_event_t {
    uint8_t response_type;
    uint8_t pad0;
    uint16_t sequence;
    xcb_window_t window;
    xcb_colormap_t colormap;
    uint8_t _new;
    uint8_t state;
    uint8_t pad1[2];
} xcb_colormap_notify_event_t;
typedef union xcb_client_message_data_t {
    uint8_t data8[20];
    uint16_t data16[10];
    uint32_t data32[5];
} xcb_client_message_data_t;
typedef struct xcb_client_message_data_iterator_t {
    xcb_client_message_data_t *data;
    int rem;
    int index;
} xcb_client_message_data_iterator_t;
typedef struct xcb_client_message_event_t {
    uint8_t response_type;
    uint8_t format;
    uint16_t sequence;
    xcb_window_t window;
    xcb_atom_t type;
    xcb_client_message_data_t data;
} xcb_client_message_event_t;
typedef enum xcb_mapping_t {
    XCB_MAPPING_MODIFIER = 0,
    XCB_MAPPING_KEYBOARD = 1,
    XCB_MAPPING_POINTER = 2
} xcb_mapping_t;
typedef struct xcb_mapping_notify_event_t {
    uint8_t response_type;
    uint8_t pad0;
    uint16_t sequence;
    uint8_t request;
    xcb_keycode_t first_keycode;
    uint8_t count;
    uint8_t pad1;
} xcb_mapping_notify_event_t;
typedef struct xcb_ge_generic_event_t {
    uint8_t response_type;
    uint8_t extension;
    uint16_t sequence;
    uint32_t length;
    uint16_t event_type;
    uint8_t pad0[22];
    uint32_t full_sequence;
} xcb_ge_generic_event_t;
typedef struct xcb_request_error_t {
    uint8_t response_type;
    uint8_t error_code;
    uint16_t sequence;
    uint32_t bad_value;
    uint16_t minor_opcode;
    uint8_t major_opcode;
    uint8_t pad0;
} xcb_request_error_t;
typedef struct xcb_value_error_t {
    uint8_t response_type;
    uint8_t error_code;
    uint16_t sequence;
    uint32_t bad_value;
    uint16_t minor_opcode;
    uint8_t major_opcode;
    uint8_t pad0;
} xcb_value_error_t;
typedef xcb_value_error_t xcb_window_error_t;
typedef xcb_value_error_t xcb_pixmap_error_t;
typedef xcb_value_error_t xcb_atom_error_t;
typedef xcb_value_error_t xcb_cursor_error_t;
typedef xcb_value_error_t xcb_font_error_t;
typedef xcb_request_error_t xcb_match_error_t;
typedef xcb_value_error_t xcb_drawable_error_t;
typedef xcb_request_error_t xcb_access_error_t;
typedef xcb_request_error_t xcb_alloc_error_t;
typedef xcb_value_error_t xcb_colormap_error_t;
typedef xcb_value_error_t xcb_g_context_error_t;
typedef xcb_value_error_t xcb_id_choice_error_t;
typedef xcb_request_error_t xcb_name_error_t;
typedef xcb_request_error_t xcb_length_error_t;
typedef xcb_request_error_t xcb_implementation_error_t;
typedef enum xcb_window_class_t {
    XCB_WINDOW_CLASS_COPY_FROM_PARENT = 0,
    XCB_WINDOW_CLASS_INPUT_OUTPUT = 1,
    XCB_WINDOW_CLASS_INPUT_ONLY = 2
} xcb_window_class_t;
typedef enum xcb_cw_t {
    XCB_CW_BACK_PIXMAP = 1,
    XCB_CW_BACK_PIXEL = 2,
    XCB_CW_BORDER_PIXMAP = 4,
    XCB_CW_BORDER_PIXEL = 8,
    XCB_CW_BIT_GRAVITY = 16,
    XCB_CW_WIN_GRAVITY = 32,
    XCB_CW_BACKING_STORE = 64,
    XCB_CW_BACKING_PLANES = 128,
    XCB_CW_BACKING_PIXEL = 256,
    XCB_CW_OVERRIDE_REDIRECT = 512,
    XCB_CW_SAVE_UNDER = 1024,
    XCB_CW_EVENT_MASK = 2048,
    XCB_CW_DONT_PROPAGATE = 4096,
    XCB_CW_COLORMAP = 8192,
    XCB_CW_CURSOR = 16384
} xcb_cw_t;
typedef enum xcb_back_pixmap_t {
    XCB_BACK_PIXMAP_NONE = 0,
    XCB_BACK_PIXMAP_PARENT_RELATIVE = 1
} xcb_back_pixmap_t;
typedef enum xcb_gravity_t {
    XCB_GRAVITY_BIT_FORGET = 0,
    XCB_GRAVITY_WIN_UNMAP = 0,
    XCB_GRAVITY_NORTH_WEST = 1,
    XCB_GRAVITY_NORTH = 2,
    XCB_GRAVITY_NORTH_EAST = 3,
    XCB_GRAVITY_WEST = 4,
    XCB_GRAVITY_CENTER = 5,
    XCB_GRAVITY_EAST = 6,
    XCB_GRAVITY_SOUTH_WEST = 7,
    XCB_GRAVITY_SOUTH = 8,
    XCB_GRAVITY_SOUTH_EAST = 9,
    XCB_GRAVITY_STATIC = 10
} xcb_gravity_t;
typedef struct xcb_create_window_request_t {
    uint8_t major_opcode;
    uint8_t depth;
    uint16_t length;
    xcb_window_t wid;
    xcb_window_t parent;
    int16_t x;
    int16_t y;
    uint16_t width;
    uint16_t height;
    uint16_t border_width;
    uint16_t _class;
    xcb_visualid_t visual;
    uint32_t value_mask;
} xcb_create_window_request_t;
typedef struct xcb_change_window_attributes_request_t {
    uint8_t major_opcode;
    uint8_t pad0;
    uint16_t length;
    xcb_window_t window;
    uint32_t value_mask;
} xcb_change_window_attributes_request_t;
typedef enum xcb_map_state_t {
    XCB_MAP_STATE_UNMAPPED = 0,
    XCB_MAP_STATE_UNVIEWABLE = 1,
    XCB_MAP_STATE_VIEWABLE = 2
} xcb_map_state_t;
typedef struct xcb_get_window_attributes_cookie_t {
    unsigned int sequence;
} xcb_get_window_attributes_cookie_t;
typedef struct xcb_get_window_attributes_request_t {
    uint8_t major_opcode;
    uint8_t pad0;
    uint16_t length;
    xcb_window_t window;
} xcb_get_window_attributes_request_t;
typedef struct xcb_get_window_attributes_reply_t {
    uint8_t response_type;
    uint8_t backing_store;
    uint16_t sequence;
    uint32_t length;
    xcb_visualid_t visual;
    uint16_t _class;
    uint8_t bit_gravity;
    uint8_t win_gravity;
    uint32_t backing_planes;
    uint32_t backing_pixel;
    uint8_t save_under;
    uint8_t map_is_installed;
    uint8_t map_state;
    uint8_t override_redirect;
    xcb_colormap_t colormap;
    uint32_t all_event_masks;
    uint32_t your_event_mask;
    uint16_t do_not_propagate_mask;
    uint8_t pad0[2];
} xcb_get_window_attributes_reply_t;
typedef struct xcb_destroy_window_request_t {
    uint8_t major_opcode;
    uint8_t pad0;
    uint16_t length;
    xcb_window_t window;
} xcb_destroy_window_request_t;
typedef struct xcb_destroy_subwindows_request_t {
    uint8_t major_opcode;
    uint8_t pad0;
    uint16_t length;
    xcb_window_t window;
} xcb_destroy_subwindows_request_t;
typedef enum xcb_set_mode_t {
    XCB_SET_MODE_INSERT = 0,
    XCB_SET_MODE_DELETE = 1
} xcb_set_mode_t;
typedef struct xcb_change_save_set_request_t {
    uint8_t major_opcode;
    uint8_t mode;
    uint16_t length;
    xcb_window_t window;
} xcb_change_save_set_request_t;
typedef struct xcb_reparent_window_request_t {
    uint8_t major_opcode;
    uint8_t pad0;
    uint16_t length;
    xcb_window_t window;
    xcb_window_t parent;
    int16_t x;
    int16_t y;
} xcb_reparent_window_request_t;
typedef struct xcb_map_window_request_t {
    uint8_t major_opcode;
    uint8_t pad0;
    uint16_t length;
    xcb_window_t window;
} xcb_map_window_request_t;
typedef struct xcb_map_subwindows_request_t {
    uint8_t major_opcode;
    uint8_t pad0;
    uint16_t length;
    xcb_window_t window;
} xcb_map_subwindows_request_t;
typedef struct xcb_unmap_window_request_t {
    uint8_t major_opcode;
    uint8_t pad0;
    uint16_t length;
    xcb_window_t window;
} xcb_unmap_window_request_t;
typedef struct xcb_unmap_subwindows_request_t {
    uint8_t major_opcode;
    uint8_t pad0;
    uint16_t length;
    xcb_window_t window;
} xcb_unmap_subwindows_request_t;
typedef enum xcb_config_window_t {
    XCB_CONFIG_WINDOW_X = 1,
    XCB_CONFIG_WINDOW_Y = 2,
    XCB_CONFIG_WINDOW_WIDTH = 4,
    XCB_CONFIG_WINDOW_HEIGHT = 8,
    XCB_CONFIG_WINDOW_BORDER_WIDTH = 16,
    XCB_CONFIG_WINDOW_SIBLING = 32,
    XCB_CONFIG_WINDOW_STACK_MODE = 64
} xcb_config_window_t;
typedef enum xcb_stack_mode_t {
    XCB_STACK_MODE_ABOVE = 0,
    XCB_STACK_MODE_BELOW = 1,
    XCB_STACK_MODE_TOP_IF = 2,
    XCB_STACK_MODE_BOTTOM_IF = 3,
    XCB_STACK_MODE_OPPOSITE = 4
} xcb_stack_mode_t;
typedef struct xcb_configure_window_request_t {
    uint8_t major_opcode;
    uint8_t pad0;
    uint16_t length;
    xcb_window_t window;
    uint16_t value_mask;
    uint8_t pad1[2];
} xcb_configure_window_request_t;
typedef enum xcb_circulate_t {
    XCB_CIRCULATE_RAISE_LOWEST = 0,
    XCB_CIRCULATE_LOWER_HIGHEST = 1
} xcb_circulate_t;
typedef struct xcb_circulate_window_request_t {
    uint8_t major_opcode;
    uint8_t direction;
    uint16_t length;
    xcb_window_t window;
} xcb_circulate_window_request_t;
typedef struct xcb_get_geometry_cookie_t {
    unsigned int sequence;
} xcb_get_geometry_cookie_t;
typedef struct xcb_get_geometry_request_t {
    uint8_t major_opcode;
    uint8_t pad0;
    uint16_t length;
    xcb_drawable_t drawable;
} xcb_get_geometry_request_t;
typedef struct xcb_get_geometry_reply_t {
    uint8_t response_type;
    uint8_t depth;
    uint16_t sequence;
    uint32_t length;
    xcb_window_t root;
    int16_t x;
    int16_t y;
    uint16_t width;
    uint16_t height;
    uint16_t border_width;
    uint8_t pad0[2];
} xcb_get_geometry_reply_t;
typedef struct xcb_query_tree_cookie_t {
    unsigned int sequence;
} xcb_query_tree_cookie_t;
typedef struct xcb_query_tree_request_t {
    uint8_t major_opcode;
    uint8_t pad0;
    uint16_t length;
    xcb_window_t window;
} xcb_query_tree_request_t;
typedef struct xcb_query_tree_reply_t {
    uint8_t response_type;
    uint8_t pad0;
    uint16_t sequence;
    uint32_t length;
    xcb_window_t root;
    xcb_window_t parent;
    uint16_t children_len;
    uint8_t pad1[14];
} xcb_query_tree_reply_t;
typedef struct xcb_intern_atom_cookie_t {
    unsigned int sequence;
} xcb_intern_atom_cookie_t;
typedef struct xcb_intern_atom_request_t {
    uint8_t major_opcode;
    uint8_t only_if_exists;
    uint16_t length;
    uint16_t name_len;
    uint8_t pad0[2];
} xcb_intern_atom_request_t;
typedef struct xcb_intern_atom_reply_t {
    uint8_t response_type;
    uint8_t pad0;
    uint16_t sequence;
    uint32_t length;
    xcb_atom_t atom;
} xcb_intern_atom_reply_t;
typedef struct xcb_get_atom_name_cookie_t {
    unsigned int sequence;
} xcb_get_atom_name_cookie_t;
typedef struct xcb_get_atom_name_request_t {
    uint8_t major_opcode;
    uint8_t pad0;
    uint16_t length;
    xcb_atom_t atom;
} xcb_get_atom_name_request_t;
typedef struct xcb_get_atom_name_reply_t {
    uint8_t response_type;
    uint8_t pad0;
    uint16_t sequence;
    uint32_t length;
    uint16_t name_len;
    uint8_t pad1[22];
} xcb_get_atom_name_reply_t;
typedef enum xcb_prop_mode_t {
    XCB_PROP_MODE_REPLACE = 0,
    XCB_PROP_MODE_PREPEND = 1,
    XCB_PROP_MODE_APPEND = 2
} xcb_prop_mode_t;
typedef struct xcb_change_property_request_t {
    uint8_t major_opcode;
    uint8_t mode;
    uint16_t length;
    xcb_window_t window;
    xcb_atom_t property;
    xcb_atom_t type;
    uint8_t format;
    uint8_t pad0[3];
    uint32_t data_len;
} xcb_change_property_request_t;
typedef struct xcb_delete_property_request_t {
    uint8_t major_opcode;
    uint8_t pad0;
    uint16_t length;
    xcb_window_t window;
    xcb_atom_t property;
} xcb_delete_property_request_t;
typedef enum xcb_get_property_type_t {
    XCB_GET_PROPERTY_TYPE_ANY = 0
} xcb_get_property_type_t;
typedef struct xcb_get_property_cookie_t {
    unsigned int sequence;
} xcb_get_property_cookie_t;
typedef struct xcb_get_property_request_t {
    uint8_t major_opcode;
    uint8_t _delete;
    uint16_t length;
    xcb_window_t window;
    xcb_atom_t property;
    xcb_atom_t type;
    uint32_t long_offset;
    uint32_t long_length;
} xcb_get_property_request_t;
typedef struct xcb_get_property_reply_t {
    uint8_t response_type;
    uint8_t format;
    uint16_t sequence;
    uint32_t length;
    xcb_atom_t type;
    uint32_t bytes_after;
    uint32_t value_len;
    uint8_t pad0[12];
} xcb_get_property_reply_t;
typedef struct xcb_list_properties_cookie_t {
    unsigned int sequence;
} xcb_list_properties_cookie_t;
typedef struct xcb_list_properties_request_t {
    uint8_t major_opcode;
    uint8_t pad0;
    uint16_t length;
    xcb_window_t window;
} xcb_list_properties_request_t;
typedef struct xcb_list_properties_reply_t {
    uint8_t response_type;
    uint8_t pad0;
    uint16_t sequence;
    uint32_t length;
    uint16_t atoms_len;
    uint8_t pad1[22];
} xcb_list_properties_reply_t;
typedef struct xcb_set_selection_owner_request_t {
    uint8_t major_opcode;
    uint8_t pad0;
    uint16_t length;
    xcb_window_t owner;
    xcb_atom_t selection;
    xcb_timestamp_t time;
} xcb_set_selection_owner_request_t;
typedef struct xcb_get_selection_owner_cookie_t {
    unsigned int sequence;
} xcb_get_selection_owner_cookie_t;
typedef struct xcb_get_selection_owner_request_t {
    uint8_t major_opcode;
    uint8_t pad0;
    uint16_t length;
    xcb_atom_t selection;
} xcb_get_selection_owner_request_t;
typedef struct xcb_get_selection_owner_reply_t {
    uint8_t response_type;
    uint8_t pad0;
    uint16_t sequence;
    uint32_t length;
    xcb_window_t owner;
} xcb_get_selection_owner_reply_t;
typedef struct xcb_convert_selection_request_t {
    uint8_t major_opcode;
    uint8_t pad0;
    uint16_t length;
    xcb_window_t requestor;
    xcb_atom_t selection;
    xcb_atom_t target;
    xcb_atom_t property;
    xcb_timestamp_t time;
} xcb_convert_selection_request_t;
typedef enum xcb_send_event_dest_t {
    XCB_SEND_EVENT_DEST_POINTER_WINDOW = 0,
    XCB_SEND_EVENT_DEST_ITEM_FOCUS = 1
} xcb_send_event_dest_t;
typedef struct xcb_send_event_request_t {
    uint8_t major_opcode;
    uint8_t propagate;
    uint16_t length;
    xcb_window_t destination;
    uint32_t event_mask;
    char event[32];
} xcb_send_event_request_t;
typedef enum xcb_grab_mode_t {
    XCB_GRAB_MODE_SYNC = 0,
    XCB_GRAB_MODE_ASYNC = 1
} xcb_grab_mode_t;
typedef enum xcb_grab_status_t {
    XCB_GRAB_STATUS_SUCCESS = 0,
    XCB_GRAB_STATUS_ALREADY_GRABBED = 1,
    XCB_GRAB_STATUS_INVALID_TIME = 2,
    XCB_GRAB_STATUS_NOT_VIEWABLE = 3,
    XCB_GRAB_STATUS_FROZEN = 4
} xcb_grab_status_t;
typedef enum xcb_cursor_enum_t {
    XCB_CURSOR_NONE = 0
} xcb_cursor_enum_t;
typedef struct xcb_grab_pointer_cookie_t {
    unsigned int sequence;
} xcb_grab_pointer_cookie_t;
typedef struct xcb_grab_pointer_request_t {
    uint8_t major_opcode;
    uint8_t owner_events;
    uint16_t length;
    xcb_window_t grab_window;
    uint16_t event_mask;
    uint8_t pointer_mode;
    uint8_t keyboard_mode;
    xcb_window_t confine_to;
    xcb_cursor_t cursor;
    xcb_timestamp_t time;
} xcb_grab_pointer_request_t;
typedef struct xcb_grab_pointer_reply_t {
    uint8_t response_type;
    uint8_t status;
    uint16_t sequence;
    uint32_t length;
} xcb_grab_pointer_reply_t;
typedef struct xcb_ungrab_pointer_request_t {
    uint8_t major_opcode;
    uint8_t pad0;
    uint16_t length;
    xcb_timestamp_t time;
} xcb_ungrab_pointer_request_t;
typedef enum xcb_button_index_t {
    XCB_BUTTON_INDEX_ANY = 0,
    XCB_BUTTON_INDEX_1 = 1,
    XCB_BUTTON_INDEX_2 = 2,
    XCB_BUTTON_INDEX_3 = 3,
    XCB_BUTTON_INDEX_4 = 4,
    XCB_BUTTON_INDEX_5 = 5
} xcb_button_index_t;
typedef struct xcb_grab_button_request_t {
    uint8_t major_opcode;
    uint8_t owner_events;
    uint16_t length;
    xcb_window_t grab_window;
    uint16_t event_mask;
    uint8_t pointer_mode;
    uint8_t keyboard_mode;
    xcb_window_t confine_to;
    xcb_cursor_t cursor;
    uint8_t button;
    uint8_t pad0;
    uint16_t modifiers;
} xcb_grab_button_request_t;
typedef struct xcb_ungrab_button_request_t {
    uint8_t major_opcode;
    uint8_t button;
    uint16_t length;
    xcb_window_t grab_window;
    uint16_t modifiers;
    uint8_t pad0[2];
} xcb_ungrab_button_request_t;
typedef struct xcb_change_active_pointer_grab_request_t {
    uint8_t major_opcode;
    uint8_t pad0;
    uint16_t length;
    xcb_cursor_t cursor;
    xcb_timestamp_t time;
    uint16_t event_mask;
    uint8_t pad1[2];
} xcb_change_active_pointer_grab_request_t;
typedef struct xcb_grab_keyboard_cookie_t {
    unsigned int sequence;
} xcb_grab_keyboard_cookie_t;
typedef struct xcb_grab_keyboard_request_t {
    uint8_t major_opcode;
    uint8_t owner_events;
    uint16_t length;
    xcb_window_t grab_window;
    xcb_timestamp_t time;
    uint8_t pointer_mode;
    uint8_t keyboard_mode;
    uint8_t pad0[2];
} xcb_grab_keyboard_request_t;
typedef struct xcb_grab_keyboard_reply_t {
    uint8_t response_type;
    uint8_t status;
    uint16_t sequence;
    uint32_t length;
} xcb_grab_keyboard_reply_t;
typedef struct xcb_ungrab_keyboard_request_t {
    uint8_t major_opcode;
    uint8_t pad0;
    uint16_t length;
    xcb_timestamp_t time;
} xcb_ungrab_keyboard_request_t;
typedef enum xcb_grab_t {
    XCB_GRAB_ANY = 0
} xcb_grab_t;
typedef struct xcb_grab_key_request_t {
    uint8_t major_opcode;
    uint8_t owner_events;
    uint16_t length;
    xcb_window_t grab_window;
    uint16_t modifiers;
    xcb_keycode_t key;
    uint8_t pointer_mode;
    uint8_t keyboard_mode;
    uint8_t pad0[3];
} xcb_grab_key_request_t;
typedef struct xcb_ungrab_key_request_t {
    uint8_t major_opcode;
    xcb_keycode_t key;
    uint16_t length;
    xcb_window_t grab_window;
    uint16_t modifiers;
    uint8_t pad0[2];
} xcb_ungrab_key_request_t;
typedef enum xcb_allow_t {
    XCB_ALLOW_ASYNC_POINTER = 0,
    XCB_ALLOW_SYNC_POINTER = 1,
    XCB_ALLOW_REPLAY_POINTER = 2,
    XCB_ALLOW_ASYNC_KEYBOARD = 3,
    XCB_ALLOW_SYNC_KEYBOARD = 4,
    XCB_ALLOW_REPLAY_KEYBOARD = 5,
    XCB_ALLOW_ASYNC_BOTH = 6,
    XCB_ALLOW_SYNC_BOTH = 7
} xcb_allow_t;
typedef struct xcb_allow_events_request_t {
    uint8_t major_opcode;
    uint8_t mode;
    uint16_t length;
    xcb_timestamp_t time;
} xcb_allow_events_request_t;
typedef struct xcb_grab_server_request_t {
    uint8_t major_opcode;
    uint8_t pad0;
    uint16_t length;
} xcb_grab_server_request_t;
typedef struct xcb_ungrab_server_request_t {
    uint8_t major_opcode;
    uint8_t pad0;
    uint16_t length;
} xcb_ungrab_server_request_t;
typedef struct xcb_query_pointer_cookie_t {
    unsigned int sequence;
} xcb_query_pointer_cookie_t;
typedef struct xcb_query_pointer_request_t {
    uint8_t major_opcode;
    uint8_t pad0;
    uint16_t length;
    xcb_window_t window;
} xcb_query_pointer_request_t;
typedef struct xcb_query_pointer_reply_t {
    uint8_t response_type;
    uint8_t same_screen;
    uint16_t sequence;
    uint32_t length;
    xcb_window_t root;
    xcb_window_t child;
    int16_t root_x;
    int16_t root_y;
    int16_t win_x;
    int16_t win_y;
    uint16_t mask;
    uint8_t pad0[2];
} xcb_query_pointer_reply_t;
typedef struct xcb_timecoord_t {
    xcb_timestamp_t time;
    int16_t x;
    int16_t y;
} xcb_timecoord_t;
typedef struct xcb_timecoord_iterator_t {
    xcb_timecoord_t *data;
    int rem;
    int index;
} xcb_timecoord_iterator_t;
typedef struct xcb_get_motion_events_cookie_t {
    unsigned int sequence;
} xcb_get_motion_events_cookie_t;
typedef struct xcb_get_motion_events_request_t {
    uint8_t major_opcode;
    uint8_t pad0;
    uint16_t length;
    xcb_window_t window;
    xcb_timestamp_t start;
    xcb_timestamp_t stop;
} xcb_get_motion_events_request_t;
typedef struct xcb_get_motion_events_reply_t {
    uint8_t response_type;
    uint8_t pad0;
    uint16_t sequence;
    uint32_t length;
    uint32_t events_len;
    uint8_t pad1[20];
} xcb_get_motion_events_reply_t;
typedef struct xcb_translate_coordinates_cookie_t {
    unsigned int sequence;
} xcb_translate_coordinates_cookie_t;
typedef struct xcb_translate_coordinates_request_t {
    uint8_t major_opcode;
    uint8_t pad0;
    uint16_t length;
    xcb_window_t src_window;
    xcb_window_t dst_window;
    int16_t src_x;
    int16_t src_y;
} xcb_translate_coordinates_request_t;
typedef struct xcb_translate_coordinates_reply_t {
    uint8_t response_type;
    uint8_t same_screen;
    uint16_t sequence;
    uint32_t length;
    xcb_window_t child;
    int16_t dst_x;
    int16_t dst_y;
} xcb_translate_coordinates_reply_t;
typedef struct xcb_warp_pointer_request_t {
    uint8_t major_opcode;
    uint8_t pad0;
    uint16_t length;
    xcb_window_t src_window;
    xcb_window_t dst_window;
    int16_t src_x;
    int16_t src_y;
    uint16_t src_width;
    uint16_t src_height;
    int16_t dst_x;
    int16_t dst_y;
} xcb_warp_pointer_request_t;
typedef enum xcb_input_focus_t {
    XCB_INPUT_FOCUS_NONE = 0,
    XCB_INPUT_FOCUS_POINTER_ROOT = 1,
    XCB_INPUT_FOCUS_PARENT = 2,
    XCB_INPUT_FOCUS_FOLLOW_KEYBOARD = 3
} xcb_input_focus_t;
typedef struct xcb_set_input_focus_request_t {
    uint8_t major_opcode;
    uint8_t revert_to;
    uint16_t length;
    xcb_window_t focus;
    xcb_timestamp_t time;
} xcb_set_input_focus_request_t;
typedef struct xcb_get_input_focus_cookie_t {
    unsigned int sequence;
} xcb_get_input_focus_cookie_t;
typedef struct xcb_get_input_focus_request_t {
    uint8_t major_opcode;
    uint8_t pad0;
    uint16_t length;
} xcb_get_input_focus_request_t;
typedef struct xcb_get_input_focus_reply_t {
    uint8_t response_type;
    uint8_t revert_to;
    uint16_t sequence;
    uint32_t length;
    xcb_window_t focus;
} xcb_get_input_focus_reply_t;
typedef struct xcb_query_keymap_cookie_t {
    unsigned int sequence;
} xcb_query_keymap_cookie_t;
typedef struct xcb_query_keymap_request_t {
    uint8_t major_opcode;
    uint8_t pad0;
    uint16_t length;
} xcb_query_keymap_request_t;
typedef struct xcb_query_keymap_reply_t {
    uint8_t response_type;
    uint8_t pad0;
    uint16_t sequence;
    uint32_t length;
    uint8_t keys[32];
} xcb_query_keymap_reply_t;
typedef struct xcb_open_font_request_t {
    uint8_t major_opcode;
    uint8_t pad0;
    uint16_t length;
    xcb_font_t fid;
    uint16_t name_len;
    uint8_t pad1[2];
} xcb_open_font_request_t;
typedef struct xcb_close_font_request_t {
    uint8_t major_opcode;
    uint8_t pad0;
    uint16_t length;
    xcb_font_t font;
} xcb_close_font_request_t;
typedef enum xcb_font_draw_t {
    XCB_FONT_DRAW_LEFT_TO_RIGHT = 0,
    XCB_FONT_DRAW_RIGHT_TO_LEFT = 1
} xcb_font_draw_t;
typedef struct xcb_fontprop_t {
    xcb_atom_t name;
    uint32_t value;
} xcb_fontprop_t;
typedef struct xcb_fontprop_iterator_t {
    xcb_fontprop_t *data;
    int rem;
    int index;
} xcb_fontprop_iterator_t;
typedef struct xcb_charinfo_t {
    int16_t left_side_bearing;
    int16_t right_side_bearing;
    int16_t character_width;
    int16_t ascent;
    int16_t descent;
    uint16_t attributes;
} xcb_charinfo_t;
typedef struct xcb_charinfo_iterator_t {
    xcb_charinfo_t *data;
    int rem;
    int index;
} xcb_charinfo_iterator_t;
typedef struct xcb_query_font_cookie_t {
    unsigned int sequence;
} xcb_query_font_cookie_t;
typedef struct xcb_query_font_request_t {
    uint8_t major_opcode;
    uint8_t pad0;
    uint16_t length;
    xcb_fontable_t font;
} xcb_query_font_request_t;
typedef struct xcb_query_font_reply_t {
    uint8_t response_type;
    uint8_t pad0;
    uint16_t sequence;
    uint32_t length;
    xcb_charinfo_t min_bounds;
    uint8_t pad1[4];
    xcb_charinfo_t max_bounds;
    uint8_t pad2[4];
    uint16_t min_char_or_byte2;
    uint16_t max_char_or_byte2;
    uint16_t default_char;
    uint16_t properties_len;
    uint8_t draw_direction;
    uint8_t min_byte1;
    uint8_t max_byte1;
    uint8_t all_chars_exist;
    int16_t font_ascent;
    int16_t font_descent;
    uint32_t char_infos_len;
} xcb_query_font_reply_t;
typedef struct xcb_query_text_extents_cookie_t {
    unsigned int sequence;
} xcb_query_text_extents_cookie_t;
typedef struct xcb_query_text_extents_request_t {
    uint8_t major_opcode;
    uint8_t odd_length;
    uint16_t length;
    xcb_fontable_t font;
} xcb_query_text_extents_request_t;
typedef struct xcb_query_text_extents_reply_t {
    uint8_t response_type;
    uint8_t draw_direction;
    uint16_t sequence;
    uint32_t length;
    int16_t font_ascent;
    int16_t font_descent;
    int16_t overall_ascent;
    int16_t overall_descent;
    int32_t overall_width;
    int32_t overall_left;
    int32_t overall_right;
} xcb_query_text_extents_reply_t;
typedef struct xcb_str_t {
    uint8_t name_len;
} xcb_str_t;
typedef struct xcb_str_iterator_t {
    xcb_str_t *data;
    int rem;
    int index;
} xcb_str_iterator_t;
typedef struct xcb_list_fonts_cookie_t {
    unsigned int sequence;
} xcb_list_fonts_cookie_t;
typedef struct xcb_list_fonts_request_t {
    uint8_t major_opcode;
    uint8_t pad0;
    uint16_t length;
    uint16_t max_names;
    uint16_t pattern_len;
} xcb_list_fonts_request_t;
typedef struct xcb_list_fonts_reply_t {
    uint8_t response_type;
    uint8_t pad0;
    uint16_t sequence;
    uint32_t length;
    uint16_t names_len;
    uint8_t pad1[22];
} xcb_list_fonts_reply_t;
typedef struct xcb_list_fonts_with_info_cookie_t {
    unsigned int sequence;
} xcb_list_fonts_with_info_cookie_t;
typedef struct xcb_list_fonts_with_info_request_t {
    uint8_t major_opcode;
    uint8_t pad0;
    uint16_t length;
    uint16_t max_names;
    uint16_t pattern_len;
} xcb_list_fonts_with_info_request_t;
typedef struct xcb_list_fonts_with_info_reply_t {
    uint8_t response_type;
    uint8_t name_len;
    uint16_t sequence;
    uint32_t length;
    xcb_charinfo_t min_bounds;
    uint8_t pad0[4];
    xcb_charinfo_t max_bounds;
    uint8_t pad1[4];
    uint16_t min_char_or_byte2;
    uint16_t max_char_or_byte2;
    uint16_t default_char;
    uint16_t properties_len;
    uint8_t draw_direction;
    uint8_t min_byte1;
    uint8_t max_byte1;
    uint8_t all_chars_exist;
    int16_t font_ascent;
    int16_t font_descent;
    uint32_t replies_hint;
} xcb_list_fonts_with_info_reply_t;
typedef struct xcb_set_font_path_request_t {
    uint8_t major_opcode;
    uint8_t pad0;
    uint16_t length;
    uint16_t font_qty;
    uint8_t pad1[2];
} xcb_set_font_path_request_t;
typedef struct xcb_get_font_path_cookie_t {
    unsigned int sequence;
} xcb_get_font_path_cookie_t;
typedef struct xcb_get_font_path_request_t {
    uint8_t major_opcode;
    uint8_t pad0;
    uint16_t length;
} xcb_get_font_path_request_t;
typedef struct xcb_get_font_path_reply_t {
    uint8_t response_type;
    uint8_t pad0;
    uint16_t sequence;
    uint32_t length;
    uint16_t path_len;
    uint8_t pad1[22];
} xcb_get_font_path_reply_t;
typedef struct xcb_create_pixmap_request_t {
    uint8_t major_opcode;
    uint8_t depth;
    uint16_t length;
    xcb_pixmap_t pid;
    xcb_drawable_t drawable;
    uint16_t width;
    uint16_t height;
} xcb_create_pixmap_request_t;
typedef struct xcb_free_pixmap_request_t {
    uint8_t major_opcode;
    uint8_t pad0;
    uint16_t length;
    xcb_pixmap_t pixmap;
} xcb_free_pixmap_request_t;
typedef enum xcb_gc_t {
    XCB_GC_FUNCTION = 1,
    XCB_GC_PLANE_MASK = 2,
    XCB_GC_FOREGROUND = 4,
    XCB_GC_BACKGROUND = 8,
    XCB_GC_LINE_WIDTH = 16,
    XCB_GC_LINE_STYLE = 32,
    XCB_GC_CAP_STYLE = 64,
    XCB_GC_JOIN_STYLE = 128,
    XCB_GC_FILL_STYLE = 256,
    XCB_GC_FILL_RULE = 512,
    XCB_GC_TILE = 1024,
    XCB_GC_STIPPLE = 2048,
    XCB_GC_TILE_STIPPLE_ORIGIN_X = 4096,
    XCB_GC_TILE_STIPPLE_ORIGIN_Y = 8192,
    XCB_GC_FONT = 16384,
    XCB_GC_SUBWINDOW_MODE = 32768,
    XCB_GC_GRAPHICS_EXPOSURES = 65536,
    XCB_GC_CLIP_ORIGIN_X = 131072,
    XCB_GC_CLIP_ORIGIN_Y = 262144,
    XCB_GC_CLIP_MASK = 524288,
    XCB_GC_DASH_OFFSET = 1048576,
    XCB_GC_DASH_LIST = 2097152,
    XCB_GC_ARC_MODE = 4194304
} xcb_gc_t;
typedef enum xcb_gx_t {
    XCB_GX_CLEAR = 0,
    XCB_GX_AND = 1,
    XCB_GX_AND_REVERSE = 2,
    XCB_GX_COPY = 3,
    XCB_GX_AND_INVERTED = 4,
    XCB_GX_NOOP = 5,
    XCB_GX_XOR = 6,
    XCB_GX_OR = 7,
    XCB_GX_NOR = 8,
    XCB_GX_EQUIV = 9,
    XCB_GX_INVERT = 10,
    XCB_GX_OR_REVERSE = 11,
    XCB_GX_COPY_INVERTED = 12,
    XCB_GX_OR_INVERTED = 13,
    XCB_GX_NAND = 14,
    XCB_GX_SET = 15
} xcb_gx_t;
typedef enum xcb_line_style_t {
    XCB_LINE_STYLE_SOLID = 0,
    XCB_LINE_STYLE_ON_OFF_DASH = 1,
    XCB_LINE_STYLE_DOUBLE_DASH = 2
} xcb_line_style_t;
typedef enum xcb_cap_style_t {
    XCB_CAP_STYLE_NOT_LAST = 0,
    XCB_CAP_STYLE_BUTT = 1,
    XCB_CAP_STYLE_ROUND = 2,
    XCB_CAP_STYLE_PROJECTING = 3
} xcb_cap_style_t;
typedef enum xcb_join_style_t {
    XCB_JOIN_STYLE_MITER = 0,
    XCB_JOIN_STYLE_ROUND = 1,
    XCB_JOIN_STYLE_BEVEL = 2
} xcb_join_style_t;
typedef enum xcb_fill_style_t {
    XCB_FILL_STYLE_SOLID = 0,
    XCB_FILL_STYLE_TILED = 1,
    XCB_FILL_STYLE_STIPPLED = 2,
    XCB_FILL_STYLE_OPAQUE_STIPPLED = 3
} xcb_fill_style_t;
typedef enum xcb_fill_rule_t {
    XCB_FILL_RULE_EVEN_ODD = 0,
    XCB_FILL_RULE_WINDING = 1
} xcb_fill_rule_t;
typedef enum xcb_subwindow_mode_t {
    XCB_SUBWINDOW_MODE_CLIP_BY_CHILDREN = 0,
    XCB_SUBWINDOW_MODE_INCLUDE_INFERIORS = 1
} xcb_subwindow_mode_t;
typedef enum xcb_arc_mode_t {
    XCB_ARC_MODE_CHORD = 0,
    XCB_ARC_MODE_PIE_SLICE = 1
} xcb_arc_mode_t;
typedef struct xcb_create_gc_request_t {
    uint8_t major_opcode;
    uint8_t pad0;
    uint16_t length;
    xcb_gcontext_t cid;
    xcb_drawable_t drawable;
    uint32_t value_mask;
} xcb_create_gc_request_t;
typedef struct xcb_change_gc_request_t {
    uint8_t major_opcode;
    uint8_t pad0;
    uint16_t length;
    xcb_gcontext_t gc;
    uint32_t value_mask;
} xcb_change_gc_request_t;
typedef struct xcb_copy_gc_request_t {
    uint8_t major_opcode;
    uint8_t pad0;
    uint16_t length;
    xcb_gcontext_t src_gc;
    xcb_gcontext_t dst_gc;
    uint32_t value_mask;
} xcb_copy_gc_request_t;
typedef struct xcb_set_dashes_request_t {
    uint8_t major_opcode;
    uint8_t pad0;
    uint16_t length;
    xcb_gcontext_t gc;
    uint16_t dash_offset;
    uint16_t dashes_len;
} xcb_set_dashes_request_t;
typedef enum xcb_clip_ordering_t {
    XCB_CLIP_ORDERING_UNSORTED = 0,
    XCB_CLIP_ORDERING_Y_SORTED = 1,
    XCB_CLIP_ORDERING_YX_SORTED = 2,
    XCB_CLIP_ORDERING_YX_BANDED = 3
} xcb_clip_ordering_t;
typedef struct xcb_set_clip_rectangles_request_t {
    uint8_t major_opcode;
    uint8_t ordering;
    uint16_t length;
    xcb_gcontext_t gc;
    int16_t clip_x_origin;
    int16_t clip_y_origin;
} xcb_set_clip_rectangles_request_t;
typedef struct xcb_free_gc_request_t {
    uint8_t major_opcode;
    uint8_t pad0;
    uint16_t length;
    xcb_gcontext_t gc;
} xcb_free_gc_request_t;
typedef struct xcb_clear_area_request_t {
    uint8_t major_opcode;
    uint8_t exposures;
    uint16_t length;
    xcb_window_t window;
    int16_t x;
    int16_t y;
    uint16_t width;
    uint16_t height;
} xcb_clear_area_request_t;
typedef struct xcb_copy_area_request_t {
    uint8_t major_opcode;
    uint8_t pad0;
    uint16_t length;
    xcb_drawable_t src_drawable;
    xcb_drawable_t dst_drawable;
    xcb_gcontext_t gc;
    int16_t src_x;
    int16_t src_y;
    int16_t dst_x;
    int16_t dst_y;
    uint16_t width;
    uint16_t height;
} xcb_copy_area_request_t;
typedef struct xcb_copy_plane_request_t {
    uint8_t major_opcode;
    uint8_t pad0;
    uint16_t length;
    xcb_drawable_t src_drawable;
    xcb_drawable_t dst_drawable;
    xcb_gcontext_t gc;
    int16_t src_x;
    int16_t src_y;
    int16_t dst_x;
    int16_t dst_y;
    uint16_t width;
    uint16_t height;
    uint32_t bit_plane;
} xcb_copy_plane_request_t;
typedef enum xcb_coord_mode_t {
    XCB_COORD_MODE_ORIGIN = 0,
    XCB_COORD_MODE_PREVIOUS = 1
} xcb_coord_mode_t;
typedef struct xcb_poly_point_request_t {
    uint8_t major_opcode;
    uint8_t coordinate_mode;
    uint16_t length;
    xcb_drawable_t drawable;
    xcb_gcontext_t gc;
} xcb_poly_point_request_t;
typedef struct xcb_poly_line_request_t {
    uint8_t major_opcode;
    uint8_t coordinate_mode;
    uint16_t length;
    xcb_drawable_t drawable;
    xcb_gcontext_t gc;
} xcb_poly_line_request_t;
typedef struct xcb_segment_t {
    int16_t x1;
    int16_t y1;
    int16_t x2;
    int16_t y2;
} xcb_segment_t;
typedef struct xcb_segment_iterator_t {
    xcb_segment_t *data;
    int rem;
    int index;
} xcb_segment_iterator_t;
typedef struct xcb_poly_segment_request_t {
    uint8_t major_opcode;
    uint8_t pad0;
    uint16_t length;
    xcb_drawable_t drawable;
    xcb_gcontext_t gc;
} xcb_poly_segment_request_t;
typedef struct xcb_poly_rectangle_request_t {
    uint8_t major_opcode;
    uint8_t pad0;
    uint16_t length;
    xcb_drawable_t drawable;
    xcb_gcontext_t gc;
} xcb_poly_rectangle_request_t;
typedef struct xcb_poly_arc_request_t {
    uint8_t major_opcode;
    uint8_t pad0;
    uint16_t length;
    xcb_drawable_t drawable;
    xcb_gcontext_t gc;
} xcb_poly_arc_request_t;
typedef enum xcb_poly_shape_t {
    XCB_POLY_SHAPE_COMPLEX = 0,
    XCB_POLY_SHAPE_NONCONVEX = 1,
    XCB_POLY_SHAPE_CONVEX = 2
} xcb_poly_shape_t;
typedef struct xcb_fill_poly_request_t {
    uint8_t major_opcode;
    uint8_t pad0;
    uint16_t length;
    xcb_drawable_t drawable;
    xcb_gcontext_t gc;
    uint8_t shape;
    uint8_t coordinate_mode;
    uint8_t pad1[2];
} xcb_fill_poly_request_t;
typedef struct xcb_poly_fill_rectangle_request_t {
    uint8_t major_opcode;
    uint8_t pad0;
    uint16_t length;
    xcb_drawable_t drawable;
    xcb_gcontext_t gc;
} xcb_poly_fill_rectangle_request_t;
typedef struct xcb_poly_fill_arc_request_t {
    uint8_t major_opcode;
    uint8_t pad0;
    uint16_t length;
    xcb_drawable_t drawable;
    xcb_gcontext_t gc;
} xcb_poly_fill_arc_request_t;
typedef enum xcb_image_format_t {
    XCB_IMAGE_FORMAT_XY_BITMAP = 0,
    XCB_IMAGE_FORMAT_XY_PIXMAP = 1,
    XCB_IMAGE_FORMAT_Z_PIXMAP = 2
} xcb_image_format_t;
typedef struct xcb_put_image_request_t {
    uint8_t major_opcode;
    uint8_t format;
    uint16_t length;
    xcb_drawable_t drawable;
    xcb_gcontext_t gc;
    uint16_t width;
    uint16_t height;
    int16_t dst_x;
    int16_t dst_y;
    uint8_t left_pad;
    uint8_t depth;
    uint8_t pad0[2];
} xcb_put_image_request_t;
typedef struct xcb_get_image_cookie_t {
    unsigned int sequence;
} xcb_get_image_cookie_t;
typedef struct xcb_get_image_request_t {
    uint8_t major_opcode;
    uint8_t format;
    uint16_t length;
    xcb_drawable_t drawable;
    int16_t x;
    int16_t y;
    uint16_t width;
    uint16_t height;
    uint32_t plane_mask;
} xcb_get_image_request_t;
typedef struct xcb_get_image_reply_t {
    uint8_t response_type;
    uint8_t depth;
    uint16_t sequence;
    uint32_t length;
    xcb_visualid_t visual;
    uint8_t pad0[20];
} xcb_get_image_reply_t;
typedef struct xcb_poly_text_8_request_t {
    uint8_t major_opcode;
    uint8_t pad0;
    uint16_t length;
    xcb_drawable_t drawable;
    xcb_gcontext_t gc;
    int16_t x;
    int16_t y;
} xcb_poly_text_8_request_t;
typedef struct xcb_poly_text_16_request_t {
    uint8_t major_opcode;
    uint8_t pad0;
    uint16_t length;
    xcb_drawable_t drawable;
    xcb_gcontext_t gc;
    int16_t x;
    int16_t y;
} xcb_poly_text_16_request_t;
typedef struct xcb_image_text_8_request_t {
    uint8_t major_opcode;
    uint8_t string_len;
    uint16_t length;
    xcb_drawable_t drawable;
    xcb_gcontext_t gc;
    int16_t x;
    int16_t y;
} xcb_image_text_8_request_t;
typedef struct xcb_image_text_16_request_t {
    uint8_t major_opcode;
    uint8_t string_len;
    uint16_t length;
    xcb_drawable_t drawable;
    xcb_gcontext_t gc;
    int16_t x;
    int16_t y;
} xcb_image_text_16_request_t;
typedef enum xcb_colormap_alloc_t {
    XCB_COLORMAP_ALLOC_NONE = 0,
    XCB_COLORMAP_ALLOC_ALL = 1
} xcb_colormap_alloc_t;
typedef struct xcb_create_colormap_request_t {
    uint8_t major_opcode;
    uint8_t alloc;
    uint16_t length;
    xcb_colormap_t mid;
    xcb_window_t window;
    xcb_visualid_t visual;
} xcb_create_colormap_request_t;
typedef struct xcb_free_colormap_request_t {
    uint8_t major_opcode;
    uint8_t pad0;
    uint16_t length;
    xcb_colormap_t cmap;
} xcb_free_colormap_request_t;
typedef struct xcb_copy_colormap_and_free_request_t {
    uint8_t major_opcode;
    uint8_t pad0;
    uint16_t length;
    xcb_colormap_t mid;
    xcb_colormap_t src_cmap;
} xcb_copy_colormap_and_free_request_t;
typedef struct xcb_install_colormap_request_t {
    uint8_t major_opcode;
    uint8_t pad0;
    uint16_t length;
    xcb_colormap_t cmap;
} xcb_install_colormap_request_t;
typedef struct xcb_uninstall_colormap_request_t {
    uint8_t major_opcode;
    uint8_t pad0;
    uint16_t length;
    xcb_colormap_t cmap;
} xcb_uninstall_colormap_request_t;
typedef struct xcb_list_installed_colormaps_cookie_t {
    unsigned int sequence;
} xcb_list_installed_colormaps_cookie_t;
typedef struct xcb_list_installed_colormaps_request_t {
    uint8_t major_opcode;
    uint8_t pad0;
    uint16_t length;
    xcb_window_t window;
} xcb_list_installed_colormaps_request_t;
typedef struct xcb_list_installed_colormaps_reply_t {
    uint8_t response_type;
    uint8_t pad0;
    uint16_t sequence;
    uint32_t length;
    uint16_t cmaps_len;
    uint8_t pad1[22];
} xcb_list_installed_colormaps_reply_t;
typedef struct xcb_alloc_color_cookie_t {
    unsigned int sequence;
} xcb_alloc_color_cookie_t;
typedef struct xcb_alloc_color_request_t {
    uint8_t major_opcode;
    uint8_t pad0;
    uint16_t length;
    xcb_colormap_t cmap;
    uint16_t red;
    uint16_t green;
    uint16_t blue;
    uint8_t pad1[2];
} xcb_alloc_color_request_t;
typedef struct xcb_alloc_color_reply_t {
    uint8_t response_type;
    uint8_t pad0;
    uint16_t sequence;
    uint32_t length;
    uint16_t red;
    uint16_t green;
    uint16_t blue;
    uint8_t pad1[2];
    uint32_t pixel;
} xcb_alloc_color_reply_t;
typedef struct xcb_alloc_named_color_cookie_t {
    unsigned int sequence;
} xcb_alloc_named_color_cookie_t;
typedef struct xcb_alloc_named_color_request_t {
    uint8_t major_opcode;
    uint8_t pad0;
    uint16_t length;
    xcb_colormap_t cmap;
    uint16_t name_len;
    uint8_t pad1[2];
} xcb_alloc_named_color_request_t;
typedef struct xcb_alloc_named_color_reply_t {
    uint8_t response_type;
    uint8_t pad0;
    uint16_t sequence;
    uint32_t length;
    uint32_t pixel;
    uint16_t exact_red;
    uint16_t exact_green;
    uint16_t exact_blue;
    uint16_t visual_red;
    uint16_t visual_green;
    uint16_t visual_blue;
} xcb_alloc_named_color_reply_t;
typedef struct xcb_alloc_color_cells_cookie_t {
    unsigned int sequence;
} xcb_alloc_color_cells_cookie_t;
typedef struct xcb_alloc_color_cells_request_t {
    uint8_t major_opcode;
    uint8_t contiguous;
    uint16_t length;
    xcb_colormap_t cmap;
    uint16_t colors;
    uint16_t planes;
} xcb_alloc_color_cells_request_t;
typedef struct xcb_alloc_color_cells_reply_t {
    uint8_t response_type;
    uint8_t pad0;
    uint16_t sequence;
    uint32_t length;
    uint16_t pixels_len;
    uint16_t masks_len;
    uint8_t pad1[20];
} xcb_alloc_color_cells_reply_t;
typedef struct xcb_alloc_color_planes_cookie_t {
    unsigned int sequence;
} xcb_alloc_color_planes_cookie_t;
typedef struct xcb_alloc_color_planes_request_t {
    uint8_t major_opcode;
    uint8_t contiguous;
    uint16_t length;
    xcb_colormap_t cmap;
    uint16_t colors;
    uint16_t reds;
    uint16_t greens;
    uint16_t blues;
} xcb_alloc_color_planes_request_t;
typedef struct xcb_alloc_color_planes_reply_t {
    uint8_t response_type;
    uint8_t pad0;
    uint16_t sequence;
    uint32_t length;
    uint16_t pixels_len;
    uint8_t pad1[2];
    uint32_t red_mask;
    uint32_t green_mask;
    uint32_t blue_mask;
    uint8_t pad2[8];
} xcb_alloc_color_planes_reply_t;
typedef struct xcb_free_colors_request_t {
    uint8_t major_opcode;
    uint8_t pad0;
    uint16_t length;
    xcb_colormap_t cmap;
    uint32_t plane_mask;
} xcb_free_colors_request_t;
typedef enum xcb_color_flag_t {
    XCB_COLOR_FLAG_RED = 1,
    XCB_COLOR_FLAG_GREEN = 2,
    XCB_COLOR_FLAG_BLUE = 4
} xcb_color_flag_t;
typedef struct xcb_coloritem_t {
    uint32_t pixel;
    uint16_t red;
    uint16_t green;
    uint16_t blue;
    uint8_t flags;
    uint8_t pad0;
} xcb_coloritem_t;
typedef struct xcb_coloritem_iterator_t {
    xcb_coloritem_t *data;
    int rem;
    int index;
} xcb_coloritem_iterator_t;
typedef struct xcb_store_colors_request_t {
    uint8_t major_opcode;
    uint8_t pad0;
    uint16_t length;
    xcb_colormap_t cmap;
} xcb_store_colors_request_t;
typedef struct xcb_store_named_color_request_t {
    uint8_t major_opcode;
    uint8_t flags;
    uint16_t length;
    xcb_colormap_t cmap;
    uint32_t pixel;
    uint16_t name_len;
    uint8_t pad0[2];
} xcb_store_named_color_request_t;
typedef struct xcb_rgb_t {
    uint16_t red;
    uint16_t green;
    uint16_t blue;
    uint8_t pad0[2];
} xcb_rgb_t;
typedef struct xcb_rgb_iterator_t {
    xcb_rgb_t *data;
    int rem;
    int index;
} xcb_rgb_iterator_t;
typedef struct xcb_query_colors_cookie_t {
    unsigned int sequence;
} xcb_query_colors_cookie_t;
typedef struct xcb_query_colors_request_t {
    uint8_t major_opcode;
    uint8_t pad0;
    uint16_t length;
    xcb_colormap_t cmap;
} xcb_query_colors_request_t;
typedef struct xcb_query_colors_reply_t {
    uint8_t response_type;
    uint8_t pad0;
    uint16_t sequence;
    uint32_t length;
    uint16_t colors_len;
    uint8_t pad1[22];
} xcb_query_colors_reply_t;
typedef struct xcb_lookup_color_cookie_t {
    unsigned int sequence;
} xcb_lookup_color_cookie_t;
typedef struct xcb_lookup_color_request_t {
    uint8_t major_opcode;
    uint8_t pad0;
    uint16_t length;
    xcb_colormap_t cmap;
    uint16_t name_len;
    uint8_t pad1[2];
} xcb_lookup_color_request_t;
typedef struct xcb_lookup_color_reply_t {
    uint8_t response_type;
    uint8_t pad0;
    uint16_t sequence;
    uint32_t length;
    uint16_t exact_red;
    uint16_t exact_green;
    uint16_t exact_blue;
    uint16_t visual_red;
    uint16_t visual_green;
    uint16_t visual_blue;
} xcb_lookup_color_reply_t;
typedef enum xcb_pixmap_enum_t {
    XCB_PIXMAP_NONE = 0
} xcb_pixmap_enum_t;
typedef struct xcb_create_cursor_request_t {
    uint8_t major_opcode;
    uint8_t pad0;
    uint16_t length;
    xcb_cursor_t cid;
    xcb_pixmap_t source;
    xcb_pixmap_t mask;
    uint16_t fore_red;
    uint16_t fore_green;
    uint16_t fore_blue;
    uint16_t back_red;
    uint16_t back_green;
    uint16_t back_blue;
    uint16_t x;
    uint16_t y;
} xcb_create_cursor_request_t;
typedef enum xcb_font_enum_t {
    XCB_FONT_NONE = 0
} xcb_font_enum_t;
typedef struct xcb_create_glyph_cursor_request_t {
    uint8_t major_opcode;
    uint8_t pad0;
    uint16_t length;
    xcb_cursor_t cid;
    xcb_font_t source_font;
    xcb_font_t mask_font;
    uint16_t source_char;
    uint16_t mask_char;
    uint16_t fore_red;
    uint16_t fore_green;
    uint16_t fore_blue;
    uint16_t back_red;
    uint16_t back_green;
    uint16_t back_blue;
} xcb_create_glyph_cursor_request_t;
typedef struct xcb_free_cursor_request_t {
    uint8_t major_opcode;
    uint8_t pad0;
    uint16_t length;
    xcb_cursor_t cursor;
} xcb_free_cursor_request_t;
typedef struct xcb_recolor_cursor_request_t {
    uint8_t major_opcode;
    uint8_t pad0;
    uint16_t length;
    xcb_cursor_t cursor;
    uint16_t fore_red;
    uint16_t fore_green;
    uint16_t fore_blue;
    uint16_t back_red;
    uint16_t back_green;
    uint16_t back_blue;
} xcb_recolor_cursor_request_t;
typedef enum xcb_query_shape_of_t {
    XCB_QUERY_SHAPE_OF_LARGEST_CURSOR = 0,
    XCB_QUERY_SHAPE_OF_FASTEST_TILE = 1,
    XCB_QUERY_SHAPE_OF_FASTEST_STIPPLE = 2
} xcb_query_shape_of_t;
typedef struct xcb_query_best_size_cookie_t {
    unsigned int sequence;
} xcb_query_best_size_cookie_t;
typedef struct xcb_query_best_size_request_t {
    uint8_t major_opcode;
    uint8_t _class;
    uint16_t length;
    xcb_drawable_t drawable;
    uint16_t width;
    uint16_t height;
} xcb_query_best_size_request_t;
typedef struct xcb_query_best_size_reply_t {
    uint8_t response_type;
    uint8_t pad0;
    uint16_t sequence;
    uint32_t length;
    uint16_t width;
    uint16_t height;
} xcb_query_best_size_reply_t;
typedef struct xcb_query_extension_cookie_t {
    unsigned int sequence;
} xcb_query_extension_cookie_t;
typedef struct xcb_query_extension_request_t {
    uint8_t major_opcode;
    uint8_t pad0;
    uint16_t length;
    uint16_t name_len;
    uint8_t pad1[2];
} xcb_query_extension_request_t;
typedef struct xcb_query_extension_reply_t {
    uint8_t response_type;
    uint8_t pad0;
    uint16_t sequence;
    uint32_t length;
    uint8_t present;
    uint8_t major_opcode;
    uint8_t first_event;
    uint8_t first_error;
} xcb_query_extension_reply_t;
typedef struct xcb_list_extensions_cookie_t {
    unsigned int sequence;
} xcb_list_extensions_cookie_t;
typedef struct xcb_list_extensions_request_t {
    uint8_t major_opcode;
    uint8_t pad0;
    uint16_t length;
} xcb_list_extensions_request_t;
typedef struct xcb_list_extensions_reply_t {
    uint8_t response_type;
    uint8_t names_len;
    uint16_t sequence;
    uint32_t length;
    uint8_t pad0[24];
} xcb_list_extensions_reply_t;
typedef struct xcb_change_keyboard_mapping_request_t {
    uint8_t major_opcode;
    uint8_t keycode_count;
    uint16_t length;
    xcb_keycode_t first_keycode;
    uint8_t keysyms_per_keycode;
    uint8_t pad0[2];
} xcb_change_keyboard_mapping_request_t;
typedef struct xcb_get_keyboard_mapping_cookie_t {
    unsigned int sequence;
} xcb_get_keyboard_mapping_cookie_t;
typedef struct xcb_get_keyboard_mapping_request_t {
    uint8_t major_opcode;
    uint8_t pad0;
    uint16_t length;
    xcb_keycode_t first_keycode;
    uint8_t count;
} xcb_get_keyboard_mapping_request_t;
typedef struct xcb_get_keyboard_mapping_reply_t {
    uint8_t response_type;
    uint8_t keysyms_per_keycode;
    uint16_t sequence;
    uint32_t length;
    uint8_t pad0[24];
} xcb_get_keyboard_mapping_reply_t;
typedef enum xcb_kb_t {
    XCB_KB_KEY_CLICK_PERCENT = 1,
    XCB_KB_BELL_PERCENT = 2,
    XCB_KB_BELL_PITCH = 4,
    XCB_KB_BELL_DURATION = 8,
    XCB_KB_LED = 16,
    XCB_KB_LED_MODE = 32,
    XCB_KB_KEY = 64,
    XCB_KB_AUTO_REPEAT_MODE = 128
} xcb_kb_t;
typedef enum xcb_led_mode_t {
    XCB_LED_MODE_OFF = 0,
    XCB_LED_MODE_ON = 1
} xcb_led_mode_t;
typedef enum xcb_auto_repeat_mode_t {
    XCB_AUTO_REPEAT_MODE_OFF = 0,
    XCB_AUTO_REPEAT_MODE_ON = 1,
    XCB_AUTO_REPEAT_MODE_DEFAULT = 2
} xcb_auto_repeat_mode_t;
typedef struct xcb_change_keyboard_control_request_t {
    uint8_t major_opcode;
    uint8_t pad0;
    uint16_t length;
    uint32_t value_mask;
} xcb_change_keyboard_control_request_t;
typedef struct xcb_get_keyboard_control_cookie_t {
    unsigned int sequence;
} xcb_get_keyboard_control_cookie_t;
typedef struct xcb_get_keyboard_control_request_t {
    uint8_t major_opcode;
    uint8_t pad0;
    uint16_t length;
} xcb_get_keyboard_control_request_t;
typedef struct xcb_get_keyboard_control_reply_t {
    uint8_t response_type;
    uint8_t global_auto_repeat;
    uint16_t sequence;
    uint32_t length;
    uint32_t led_mask;
    uint8_t key_click_percent;
    uint8_t bell_percent;
    uint16_t bell_pitch;
    uint16_t bell_duration;
    uint8_t pad0[2];
    uint8_t auto_repeats[32];
} xcb_get_keyboard_control_reply_t;
typedef struct xcb_bell_request_t {
    uint8_t major_opcode;
    int8_t percent;
    uint16_t length;
} xcb_bell_request_t;
typedef struct xcb_change_pointer_control_request_t {
    uint8_t major_opcode;
    uint8_t pad0;
    uint16_t length;
    int16_t acceleration_numerator;
    int16_t acceleration_denominator;
    int16_t threshold;
    uint8_t do_acceleration;
    uint8_t do_threshold;
} xcb_change_pointer_control_request_t;
typedef struct xcb_get_pointer_control_cookie_t {
    unsigned int sequence;
} xcb_get_pointer_control_cookie_t;
typedef struct xcb_get_pointer_control_request_t {
    uint8_t major_opcode;
    uint8_t pad0;
    uint16_t length;
} xcb_get_pointer_control_request_t;
typedef struct xcb_get_pointer_control_reply_t {
    uint8_t response_type;
    uint8_t pad0;
    uint16_t sequence;
    uint32_t length;
    uint16_t acceleration_numerator;
    uint16_t acceleration_denominator;
    uint16_t threshold;
    uint8_t pad1[18];
} xcb_get_pointer_control_reply_t;
typedef enum xcb_blanking_t {
    XCB_BLANKING_NOT_PREFERRED = 0,
    XCB_BLANKING_PREFERRED = 1,
    XCB_BLANKING_DEFAULT = 2
} xcb_blanking_t;
typedef enum xcb_exposures_t {
    XCB_EXPOSURES_NOT_ALLOWED = 0,
    XCB_EXPOSURES_ALLOWED = 1,
    XCB_EXPOSURES_DEFAULT = 2
} xcb_exposures_t;
typedef struct xcb_set_screen_saver_request_t {
    uint8_t major_opcode;
    uint8_t pad0;
    uint16_t length;
    int16_t timeout;
    int16_t interval;
    uint8_t prefer_blanking;
    uint8_t allow_exposures;
} xcb_set_screen_saver_request_t;
typedef struct xcb_get_screen_saver_cookie_t {
    unsigned int sequence;
} xcb_get_screen_saver_cookie_t;
typedef struct xcb_get_screen_saver_request_t {
    uint8_t major_opcode;
    uint8_t pad0;
    uint16_t length;
} xcb_get_screen_saver_request_t;
typedef struct xcb_get_screen_saver_reply_t {
    uint8_t response_type;
    uint8_t pad0;
    uint16_t sequence;
    uint32_t length;
    uint16_t timeout;
    uint16_t interval;
    uint8_t prefer_blanking;
    uint8_t allow_exposures;
    uint8_t pad1[18];
} xcb_get_screen_saver_reply_t;
typedef enum xcb_host_mode_t {
    XCB_HOST_MODE_INSERT = 0,
    XCB_HOST_MODE_DELETE = 1
} xcb_host_mode_t;
typedef enum xcb_family_t {
    XCB_FAMILY_INTERNET = 0,
    XCB_FAMILY_DECNET = 1,
    XCB_FAMILY_CHAOS = 2,
    XCB_FAMILY_SERVER_INTERPRETED = 5,
    XCB_FAMILY_INTERNET_6 = 6
} xcb_family_t;
typedef struct xcb_change_hosts_request_t {
    uint8_t major_opcode;
    uint8_t mode;
    uint16_t length;
    uint8_t family;
    uint8_t pad0;
    uint16_t address_len;
} xcb_change_hosts_request_t;
typedef struct xcb_host_t {
    uint8_t family;
    uint8_t pad0;
    uint16_t address_len;
} xcb_host_t;
typedef struct xcb_host_iterator_t {
    xcb_host_t *data;
    int rem;
    int index;
} xcb_host_iterator_t;
typedef struct xcb_list_hosts_cookie_t {
    unsigned int sequence;
} xcb_list_hosts_cookie_t;
typedef struct xcb_list_hosts_request_t {
    uint8_t major_opcode;
    uint8_t pad0;
    uint16_t length;
} xcb_list_hosts_request_t;
typedef struct xcb_list_hosts_reply_t {
    uint8_t response_type;
    uint8_t mode;
    uint16_t sequence;
    uint32_t length;
    uint16_t hosts_len;
    uint8_t pad0[22];
} xcb_list_hosts_reply_t;
typedef enum xcb_access_control_t {
    XCB_ACCESS_CONTROL_DISABLE = 0,
    XCB_ACCESS_CONTROL_ENABLE = 1
} xcb_access_control_t;
typedef struct xcb_set_access_control_request_t {
    uint8_t major_opcode;
    uint8_t mode;
    uint16_t length;
} xcb_set_access_control_request_t;
typedef enum xcb_close_down_t {
    XCB_CLOSE_DOWN_DESTROY_ALL = 0,
    XCB_CLOSE_DOWN_RETAIN_PERMANENT = 1,
    XCB_CLOSE_DOWN_RETAIN_TEMPORARY = 2
} xcb_close_down_t;
typedef struct xcb_set_close_down_mode_request_t {
    uint8_t major_opcode;
    uint8_t mode;
    uint16_t length;
} xcb_set_close_down_mode_request_t;
typedef enum xcb_kill_t {
    XCB_KILL_ALL_TEMPORARY = 0
} xcb_kill_t;
typedef struct xcb_kill_client_request_t {
    uint8_t major_opcode;
    uint8_t pad0;
    uint16_t length;
    uint32_t resource;
} xcb_kill_client_request_t;
typedef struct xcb_rotate_properties_request_t {
    uint8_t major_opcode;
    uint8_t pad0;
    uint16_t length;
    xcb_window_t window;
    uint16_t atoms_len;
    int16_t delta;
} xcb_rotate_properties_request_t;
typedef enum xcb_screen_saver_t {
    XCB_SCREEN_SAVER_RESET = 0,
    XCB_SCREEN_SAVER_ACTIVE = 1
} xcb_screen_saver_t;
typedef struct xcb_force_screen_saver_request_t {
    uint8_t major_opcode;
    uint8_t mode;
    uint16_t length;
} xcb_force_screen_saver_request_t;
typedef enum xcb_mapping_status_t {
    XCB_MAPPING_STATUS_SUCCESS = 0,
    XCB_MAPPING_STATUS_BUSY = 1,
    XCB_MAPPING_STATUS_FAILURE = 2
} xcb_mapping_status_t;
typedef struct xcb_set_pointer_mapping_cookie_t {
    unsigned int sequence;
} xcb_set_pointer_mapping_cookie_t;
typedef struct xcb_set_pointer_mapping_request_t {
    uint8_t major_opcode;
    uint8_t map_len;
    uint16_t length;
} xcb_set_pointer_mapping_request_t;
typedef struct xcb_set_pointer_mapping_reply_t {
    uint8_t response_type;
    uint8_t status;
    uint16_t sequence;
    uint32_t length;
} xcb_set_pointer_mapping_reply_t;
typedef struct xcb_get_pointer_mapping_cookie_t {
    unsigned int sequence;
} xcb_get_pointer_mapping_cookie_t;
typedef struct xcb_get_pointer_mapping_request_t {
    uint8_t major_opcode;
    uint8_t pad0;
    uint16_t length;
} xcb_get_pointer_mapping_request_t;
typedef struct xcb_get_pointer_mapping_reply_t {
    uint8_t response_type;
    uint8_t map_len;
    uint16_t sequence;
    uint32_t length;
    uint8_t pad0[24];
} xcb_get_pointer_mapping_reply_t;
typedef enum xcb_map_index_t {
    XCB_MAP_INDEX_SHIFT = 0,
    XCB_MAP_INDEX_LOCK = 1,
    XCB_MAP_INDEX_CONTROL = 2,
    XCB_MAP_INDEX_1 = 3,
    XCB_MAP_INDEX_2 = 4,
    XCB_MAP_INDEX_3 = 5,
    XCB_MAP_INDEX_4 = 6,
    XCB_MAP_INDEX_5 = 7
} xcb_map_index_t;
typedef struct xcb_set_modifier_mapping_cookie_t {
    unsigned int sequence;
} xcb_set_modifier_mapping_cookie_t;
typedef struct xcb_set_modifier_mapping_request_t {
    uint8_t major_opcode;
    uint8_t keycodes_per_modifier;
    uint16_t length;
} xcb_set_modifier_mapping_request_t;
typedef struct xcb_set_modifier_mapping_reply_t {
    uint8_t response_type;
    uint8_t status;
    uint16_t sequence;
    uint32_t length;
} xcb_set_modifier_mapping_reply_t;
typedef struct xcb_get_modifier_mapping_cookie_t {
    unsigned int sequence;
} xcb_get_modifier_mapping_cookie_t;
typedef struct xcb_get_modifier_mapping_request_t {
    uint8_t major_opcode;
    uint8_t pad0;
    uint16_t length;
} xcb_get_modifier_mapping_request_t;
typedef struct xcb_get_modifier_mapping_reply_t {
    uint8_t response_type;
    uint8_t keycodes_per_modifier;
    uint16_t sequence;
    uint32_t length;
    uint8_t pad0[24];
} xcb_get_modifier_mapping_reply_t;
typedef struct xcb_no_operation_request_t {
    uint8_t major_opcode;
    uint8_t pad0;
    uint16_t length;
} xcb_no_operation_request_t;
void
xcb_char2b_next (xcb_char2b_iterator_t *i );
xcb_generic_iterator_t
xcb_char2b_end (xcb_char2b_iterator_t i );
void
xcb_window_next (xcb_window_iterator_t *i );
xcb_generic_iterator_t
xcb_window_end (xcb_window_iterator_t i );
void
xcb_pixmap_next (xcb_pixmap_iterator_t *i );
xcb_generic_iterator_t
xcb_pixmap_end (xcb_pixmap_iterator_t i );
void
xcb_cursor_next (xcb_cursor_iterator_t *i );
xcb_generic_iterator_t
xcb_cursor_end (xcb_cursor_iterator_t i );
void
xcb_font_next (xcb_font_iterator_t *i );
xcb_generic_iterator_t
xcb_font_end (xcb_font_iterator_t i );
void
xcb_gcontext_next (xcb_gcontext_iterator_t *i );
xcb_generic_iterator_t
xcb_gcontext_end (xcb_gcontext_iterator_t i );
void
xcb_colormap_next (xcb_colormap_iterator_t *i );
xcb_generic_iterator_t
xcb_colormap_end (xcb_colormap_iterator_t i );
void
xcb_atom_next (xcb_atom_iterator_t *i );
xcb_generic_iterator_t
xcb_atom_end (xcb_atom_iterator_t i );
void
xcb_drawable_next (xcb_drawable_iterator_t *i );
xcb_generic_iterator_t
xcb_drawable_end (xcb_drawable_iterator_t i );
void
xcb_fontable_next (xcb_fontable_iterator_t *i );
xcb_generic_iterator_t
xcb_fontable_end (xcb_fontable_iterator_t i );
void
xcb_visualid_next (xcb_visualid_iterator_t *i );
xcb_generic_iterator_t
xcb_visualid_end (xcb_visualid_iterator_t i );
void
xcb_timestamp_next (xcb_timestamp_iterator_t *i );
xcb_generic_iterator_t
xcb_timestamp_end (xcb_timestamp_iterator_t i );
void
xcb_keysym_next (xcb_keysym_iterator_t *i );
xcb_generic_iterator_t
xcb_keysym_end (xcb_keysym_iterator_t i );
void
xcb_keycode_next (xcb_keycode_iterator_t *i );
xcb_generic_iterator_t
xcb_keycode_end (xcb_keycode_iterator_t i );
void
xcb_button_next (xcb_button_iterator_t *i );
xcb_generic_iterator_t
xcb_button_end (xcb_button_iterator_t i );
void
xcb_point_next (xcb_point_iterator_t *i );
xcb_generic_iterator_t
xcb_point_end (xcb_point_iterator_t i );
void
xcb_rectangle_next (xcb_rectangle_iterator_t *i );
xcb_generic_iterator_t
xcb_rectangle_end (xcb_rectangle_iterator_t i );
void
xcb_arc_next (xcb_arc_iterator_t *i );
xcb_generic_iterator_t
xcb_arc_end (xcb_arc_iterator_t i );
void
xcb_format_next (xcb_format_iterator_t *i );
xcb_generic_iterator_t
xcb_format_end (xcb_format_iterator_t i );
void
xcb_visualtype_next (xcb_visualtype_iterator_t *i );
xcb_generic_iterator_t
xcb_visualtype_end (xcb_visualtype_iterator_t i );
int
xcb_depth_sizeof (const void *_buffer );
xcb_visualtype_t *
xcb_depth_visuals (const xcb_depth_t *R );
int
xcb_depth_visuals_length (const xcb_depth_t *R );
xcb_visualtype_iterator_t
xcb_depth_visuals_iterator (const xcb_depth_t *R );
void
xcb_depth_next (xcb_depth_iterator_t *i );
xcb_generic_iterator_t
xcb_depth_end (xcb_depth_iterator_t i );
int
xcb_screen_sizeof (const void *_buffer );
int
xcb_screen_allowed_depths_length (const xcb_screen_t *R );
xcb_depth_iterator_t
xcb_screen_allowed_depths_iterator (const xcb_screen_t *R );
void
xcb_screen_next (xcb_screen_iterator_t *i );
xcb_generic_iterator_t
xcb_screen_end (xcb_screen_iterator_t i );
int
xcb_setup_request_sizeof (const void *_buffer );
char *
xcb_setup_request_authorization_protocol_name (const xcb_setup_request_t *R );
int
xcb_setup_request_authorization_protocol_name_length (const xcb_setup_request_t *R );
xcb_generic_iterator_t
xcb_setup_request_authorization_protocol_name_end (const xcb_setup_request_t *R );
char *
xcb_setup_request_authorization_protocol_data (const xcb_setup_request_t *R );
int
xcb_setup_request_authorization_protocol_data_length (const xcb_setup_request_t *R );
xcb_generic_iterator_t
xcb_setup_request_authorization_protocol_data_end (const xcb_setup_request_t *R );
void
xcb_setup_request_next (xcb_setup_request_iterator_t *i );
xcb_generic_iterator_t
xcb_setup_request_end (xcb_setup_request_iterator_t i );
int
xcb_setup_failed_sizeof (const void *_buffer );
char *
xcb_setup_failed_reason (const xcb_setup_failed_t *R );
int
xcb_setup_failed_reason_length (const xcb_setup_failed_t *R );
xcb_generic_iterator_t
xcb_setup_failed_reason_end (const xcb_setup_failed_t *R );
void
xcb_setup_failed_next (xcb_setup_failed_iterator_t *i );
xcb_generic_iterator_t
xcb_setup_failed_end (xcb_setup_failed_iterator_t i );
int
xcb_setup_authenticate_sizeof (const void *_buffer );
char *
xcb_setup_authenticate_reason (const xcb_setup_authenticate_t *R );
int
xcb_setup_authenticate_reason_length (const xcb_setup_authenticate_t *R );
xcb_generic_iterator_t
xcb_setup_authenticate_reason_end (const xcb_setup_authenticate_t *R );
void
xcb_setup_authenticate_next (xcb_setup_authenticate_iterator_t *i );
xcb_generic_iterator_t
xcb_setup_authenticate_end (xcb_setup_authenticate_iterator_t i );
int
xcb_setup_sizeof (const void *_buffer );
char *
xcb_setup_vendor (const xcb_setup_t *R );
int
xcb_setup_vendor_length (const xcb_setup_t *R );
xcb_generic_iterator_t
xcb_setup_vendor_end (const xcb_setup_t *R );
xcb_format_t *
xcb_setup_pixmap_formats (const xcb_setup_t *R );
int
xcb_setup_pixmap_formats_length (const xcb_setup_t *R );
xcb_format_iterator_t
xcb_setup_pixmap_formats_iterator (const xcb_setup_t *R );
int
xcb_setup_roots_length (const xcb_setup_t *R );
xcb_screen_iterator_t
xcb_setup_roots_iterator (const xcb_setup_t *R );
void
xcb_setup_next (xcb_setup_iterator_t *i );
xcb_generic_iterator_t
xcb_setup_end (xcb_setup_iterator_t i );
void
xcb_client_message_data_next (xcb_client_message_data_iterator_t *i );
xcb_generic_iterator_t
xcb_client_message_data_end (xcb_client_message_data_iterator_t i );
int
xcb_create_window_sizeof (const void *_buffer );
xcb_void_cookie_t
xcb_create_window_checked (xcb_connection_t *c ,
                           uint8_t depth ,
                           xcb_window_t wid ,
                           xcb_window_t parent ,
                           int16_t x ,
                           int16_t y ,
                           uint16_t width ,
                           uint16_t height ,
                           uint16_t border_width ,
                           uint16_t _class ,
                           xcb_visualid_t visual ,
                           uint32_t value_mask ,
                           const uint32_t *value_list );
xcb_void_cookie_t
xcb_create_window (xcb_connection_t *c ,
                   uint8_t depth ,
                   xcb_window_t wid ,
                   xcb_window_t parent ,
                   int16_t x ,
                   int16_t y ,
                   uint16_t width ,
                   uint16_t height ,
                   uint16_t border_width ,
                   uint16_t _class ,
                   xcb_visualid_t visual ,
                   uint32_t value_mask ,
                   const uint32_t *value_list );
int
xcb_change_window_attributes_sizeof (const void *_buffer );
xcb_void_cookie_t
xcb_change_window_attributes_checked (xcb_connection_t *c ,
                                      xcb_window_t window ,
                                      uint32_t value_mask ,
                                      const uint32_t *value_list );
xcb_void_cookie_t
xcb_change_window_attributes (xcb_connection_t *c ,
                              xcb_window_t window ,
                              uint32_t value_mask ,
                              const uint32_t *value_list );
xcb_get_window_attributes_cookie_t
xcb_get_window_attributes (xcb_connection_t *c ,
                           xcb_window_t window );
xcb_get_window_attributes_cookie_t
xcb_get_window_attributes_unchecked (xcb_connection_t *c ,
                                     xcb_window_t window );
xcb_get_window_attributes_reply_t *
xcb_get_window_attributes_reply (xcb_connection_t *c ,
                                 xcb_get_window_attributes_cookie_t cookie ,
                                 xcb_generic_error_t **e );
xcb_void_cookie_t
xcb_destroy_window_checked (xcb_connection_t *c ,
                            xcb_window_t window );
xcb_void_cookie_t
xcb_destroy_window (xcb_connection_t *c ,
                    xcb_window_t window );
xcb_void_cookie_t
xcb_destroy_subwindows_checked (xcb_connection_t *c ,
                                xcb_window_t window );
xcb_void_cookie_t
xcb_destroy_subwindows (xcb_connection_t *c ,
                        xcb_window_t window );
xcb_void_cookie_t
xcb_change_save_set_checked (xcb_connection_t *c ,
                             uint8_t mode ,
                             xcb_window_t window );
xcb_void_cookie_t
xcb_change_save_set (xcb_connection_t *c ,
                     uint8_t mode ,
                     xcb_window_t window );
xcb_void_cookie_t
xcb_reparent_window_checked (xcb_connection_t *c ,
                             xcb_window_t window ,
                             xcb_window_t parent ,
                             int16_t x ,
                             int16_t y );
xcb_void_cookie_t
xcb_reparent_window (xcb_connection_t *c ,
                     xcb_window_t window ,
                     xcb_window_t parent ,
                     int16_t x ,
                     int16_t y );
xcb_void_cookie_t
xcb_map_window_checked (xcb_connection_t *c ,
                        xcb_window_t window );
xcb_void_cookie_t
xcb_map_window (xcb_connection_t *c ,
                xcb_window_t window );
xcb_void_cookie_t
xcb_map_subwindows_checked (xcb_connection_t *c ,
                            xcb_window_t window );
xcb_void_cookie_t
xcb_map_subwindows (xcb_connection_t *c ,
                    xcb_window_t window );
xcb_void_cookie_t
xcb_unmap_window_checked (xcb_connection_t *c ,
                          xcb_window_t window );
xcb_void_cookie_t
xcb_unmap_window (xcb_connection_t *c ,
                  xcb_window_t window );
xcb_void_cookie_t
xcb_unmap_subwindows_checked (xcb_connection_t *c ,
                              xcb_window_t window );
xcb_void_cookie_t
xcb_unmap_subwindows (xcb_connection_t *c ,
                      xcb_window_t window );
int
xcb_configure_window_sizeof (const void *_buffer );
xcb_void_cookie_t
xcb_configure_window_checked (xcb_connection_t *c ,
                              xcb_window_t window ,
                              uint16_t value_mask ,
                              const uint32_t *value_list );
xcb_void_cookie_t
xcb_configure_window (xcb_connection_t *c ,
                      xcb_window_t window ,
                      uint16_t value_mask ,
                      const uint32_t *value_list );
xcb_void_cookie_t
xcb_circulate_window_checked (xcb_connection_t *c ,
                              uint8_t direction ,
                              xcb_window_t window );
xcb_void_cookie_t
xcb_circulate_window (xcb_connection_t *c ,
                      uint8_t direction ,
                      xcb_window_t window );
xcb_get_geometry_cookie_t
xcb_get_geometry (xcb_connection_t *c ,
                  xcb_drawable_t drawable );
xcb_get_geometry_cookie_t
xcb_get_geometry_unchecked (xcb_connection_t *c ,
                            xcb_drawable_t drawable );
xcb_get_geometry_reply_t *
xcb_get_geometry_reply (xcb_connection_t *c ,
                        xcb_get_geometry_cookie_t cookie ,
                        xcb_generic_error_t **e );
int
xcb_query_tree_sizeof (const void *_buffer );
xcb_query_tree_cookie_t
xcb_query_tree (xcb_connection_t *c ,
                xcb_window_t window );
xcb_query_tree_cookie_t
xcb_query_tree_unchecked (xcb_connection_t *c ,
                          xcb_window_t window );
xcb_window_t *
xcb_query_tree_children (const xcb_query_tree_reply_t *R );
int
xcb_query_tree_children_length (const xcb_query_tree_reply_t *R );
xcb_generic_iterator_t
xcb_query_tree_children_end (const xcb_query_tree_reply_t *R );
xcb_query_tree_reply_t *
xcb_query_tree_reply (xcb_connection_t *c ,
                      xcb_query_tree_cookie_t cookie ,
                      xcb_generic_error_t **e );
int
xcb_intern_atom_sizeof (const void *_buffer );
xcb_intern_atom_cookie_t
xcb_intern_atom (xcb_connection_t *c ,
                 uint8_t only_if_exists ,
                 uint16_t name_len ,
                 const char *name );
xcb_intern_atom_cookie_t
xcb_intern_atom_unchecked (xcb_connection_t *c ,
                           uint8_t only_if_exists ,
                           uint16_t name_len ,
                           const char *name );
xcb_intern_atom_reply_t *
xcb_intern_atom_reply (xcb_connection_t *c ,
                       xcb_intern_atom_cookie_t cookie ,
                       xcb_generic_error_t **e );
int
xcb_get_atom_name_sizeof (const void *_buffer );
xcb_get_atom_name_cookie_t
xcb_get_atom_name (xcb_connection_t *c ,
                   xcb_atom_t atom );
xcb_get_atom_name_cookie_t
xcb_get_atom_name_unchecked (xcb_connection_t *c ,
                             xcb_atom_t atom );
char *
xcb_get_atom_name_name (const xcb_get_atom_name_reply_t *R );
int
xcb_get_atom_name_name_length (const xcb_get_atom_name_reply_t *R );
xcb_generic_iterator_t
xcb_get_atom_name_name_end (const xcb_get_atom_name_reply_t *R );
xcb_get_atom_name_reply_t *
xcb_get_atom_name_reply (xcb_connection_t *c ,
                         xcb_get_atom_name_cookie_t cookie ,
                         xcb_generic_error_t **e );
int
xcb_change_property_sizeof (const void *_buffer );
xcb_void_cookie_t
xcb_change_property_checked (xcb_connection_t *c ,
                             uint8_t mode ,
                             xcb_window_t window ,
                             xcb_atom_t property ,
                             xcb_atom_t type ,
                             uint8_t format ,
                             uint32_t data_len ,
                             const void *data );
xcb_void_cookie_t
xcb_change_property (xcb_connection_t *c ,
                     uint8_t mode ,
                     xcb_window_t window ,
                     xcb_atom_t property ,
                     xcb_atom_t type ,
                     uint8_t format ,
                     uint32_t data_len ,
                     const void *data );
xcb_void_cookie_t
xcb_delete_property_checked (xcb_connection_t *c ,
                             xcb_window_t window ,
                             xcb_atom_t property );
xcb_void_cookie_t
xcb_delete_property (xcb_connection_t *c ,
                     xcb_window_t window ,
                     xcb_atom_t property );
int
xcb_get_property_sizeof (const void *_buffer );
xcb_get_property_cookie_t
xcb_get_property (xcb_connection_t *c ,
                  uint8_t _delete ,
                  xcb_window_t window ,
                  xcb_atom_t property ,
                  xcb_atom_t type ,
                  uint32_t long_offset ,
                  uint32_t long_length );
xcb_get_property_cookie_t
xcb_get_property_unchecked (xcb_connection_t *c ,
                            uint8_t _delete ,
                            xcb_window_t window ,
                            xcb_atom_t property ,
                            xcb_atom_t type ,
                            uint32_t long_offset ,
                            uint32_t long_length );
void *
xcb_get_property_value (const xcb_get_property_reply_t *R );
int
xcb_get_property_value_length (const xcb_get_property_reply_t *R );
xcb_generic_iterator_t
xcb_get_property_value_end (const xcb_get_property_reply_t *R );
xcb_get_property_reply_t *
xcb_get_property_reply (xcb_connection_t *c ,
                        xcb_get_property_cookie_t cookie ,
                        xcb_generic_error_t **e );
int
xcb_list_properties_sizeof (const void *_buffer );
xcb_list_properties_cookie_t
xcb_list_properties (xcb_connection_t *c ,
                     xcb_window_t window );
xcb_list_properties_cookie_t
xcb_list_properties_unchecked (xcb_connection_t *c ,
                               xcb_window_t window );
xcb_atom_t *
xcb_list_properties_atoms (const xcb_list_properties_reply_t *R );
int
xcb_list_properties_atoms_length (const xcb_list_properties_reply_t *R );
xcb_generic_iterator_t
xcb_list_properties_atoms_end (const xcb_list_properties_reply_t *R );
xcb_list_properties_reply_t *
xcb_list_properties_reply (xcb_connection_t *c ,
                           xcb_list_properties_cookie_t cookie ,
                           xcb_generic_error_t **e );
xcb_void_cookie_t
xcb_set_selection_owner_checked (xcb_connection_t *c ,
                                 xcb_window_t owner ,
                                 xcb_atom_t selection ,
                                 xcb_timestamp_t time );
xcb_void_cookie_t
xcb_set_selection_owner (xcb_connection_t *c ,
                         xcb_window_t owner ,
                         xcb_atom_t selection ,
                         xcb_timestamp_t time );
xcb_get_selection_owner_cookie_t
xcb_get_selection_owner (xcb_connection_t *c ,
                         xcb_atom_t selection );
xcb_get_selection_owner_cookie_t
xcb_get_selection_owner_unchecked (xcb_connection_t *c ,
                                   xcb_atom_t selection );
xcb_get_selection_owner_reply_t *
xcb_get_selection_owner_reply (xcb_connection_t *c ,
                               xcb_get_selection_owner_cookie_t cookie ,
                               xcb_generic_error_t **e );
xcb_void_cookie_t
xcb_convert_selection_checked (xcb_connection_t *c ,
                               xcb_window_t requestor ,
                               xcb_atom_t selection ,
                               xcb_atom_t target ,
                               xcb_atom_t property ,
                               xcb_timestamp_t time );
xcb_void_cookie_t
xcb_convert_selection (xcb_connection_t *c ,
                       xcb_window_t requestor ,
                       xcb_atom_t selection ,
                       xcb_atom_t target ,
                       xcb_atom_t property ,
                       xcb_timestamp_t time );
xcb_void_cookie_t
xcb_send_event_checked (xcb_connection_t *c ,
                        uint8_t propagate ,
                        xcb_window_t destination ,
                        uint32_t event_mask ,
                        const char *event );
xcb_void_cookie_t
xcb_send_event (xcb_connection_t *c ,
                uint8_t propagate ,
                xcb_window_t destination ,
                uint32_t event_mask ,
                const char *event );
xcb_grab_pointer_cookie_t
xcb_grab_pointer (xcb_connection_t *c ,
                  uint8_t owner_events ,
                  xcb_window_t grab_window ,
                  uint16_t event_mask ,
                  uint8_t pointer_mode ,
                  uint8_t keyboard_mode ,
                  xcb_window_t confine_to ,
                  xcb_cursor_t cursor ,
                  xcb_timestamp_t time );
xcb_grab_pointer_cookie_t
xcb_grab_pointer_unchecked (xcb_connection_t *c ,
                            uint8_t owner_events ,
                            xcb_window_t grab_window ,
                            uint16_t event_mask ,
                            uint8_t pointer_mode ,
                            uint8_t keyboard_mode ,
                            xcb_window_t confine_to ,
                            xcb_cursor_t cursor ,
                            xcb_timestamp_t time );
xcb_grab_pointer_reply_t *
xcb_grab_pointer_reply (xcb_connection_t *c ,
                        xcb_grab_pointer_cookie_t cookie ,
                        xcb_generic_error_t **e );
xcb_void_cookie_t
xcb_ungrab_pointer_checked (xcb_connection_t *c ,
                            xcb_timestamp_t time );
xcb_void_cookie_t
xcb_ungrab_pointer (xcb_connection_t *c ,
                    xcb_timestamp_t time );
xcb_void_cookie_t
xcb_grab_button_checked (xcb_connection_t *c ,
                         uint8_t owner_events ,
                         xcb_window_t grab_window ,
                         uint16_t event_mask ,
                         uint8_t pointer_mode ,
                         uint8_t keyboard_mode ,
                         xcb_window_t confine_to ,
                         xcb_cursor_t cursor ,
                         uint8_t button ,
                         uint16_t modifiers );
xcb_void_cookie_t
xcb_grab_button (xcb_connection_t *c ,
                 uint8_t owner_events ,
                 xcb_window_t grab_window ,
                 uint16_t event_mask ,
                 uint8_t pointer_mode ,
                 uint8_t keyboard_mode ,
                 xcb_window_t confine_to ,
                 xcb_cursor_t cursor ,
                 uint8_t button ,
                 uint16_t modifiers );
xcb_void_cookie_t
xcb_ungrab_button_checked (xcb_connection_t *c ,
                           uint8_t button ,
                           xcb_window_t grab_window ,
                           uint16_t modifiers );
xcb_void_cookie_t
xcb_ungrab_button (xcb_connection_t *c ,
                   uint8_t button ,
                   xcb_window_t grab_window ,
                   uint16_t modifiers );
xcb_void_cookie_t
xcb_change_active_pointer_grab_checked (xcb_connection_t *c ,
                                        xcb_cursor_t cursor ,
                                        xcb_timestamp_t time ,
                                        uint16_t event_mask );
xcb_void_cookie_t
xcb_change_active_pointer_grab (xcb_connection_t *c ,
                                xcb_cursor_t cursor ,
                                xcb_timestamp_t time ,
                                uint16_t event_mask );
xcb_grab_keyboard_cookie_t
xcb_grab_keyboard (xcb_connection_t *c ,
                   uint8_t owner_events ,
                   xcb_window_t grab_window ,
                   xcb_timestamp_t time ,
                   uint8_t pointer_mode ,
                   uint8_t keyboard_mode );
xcb_grab_keyboard_cookie_t
xcb_grab_keyboard_unchecked (xcb_connection_t *c ,
                             uint8_t owner_events ,
                             xcb_window_t grab_window ,
                             xcb_timestamp_t time ,
                             uint8_t pointer_mode ,
                             uint8_t keyboard_mode );
xcb_grab_keyboard_reply_t *
xcb_grab_keyboard_reply (xcb_connection_t *c ,
                         xcb_grab_keyboard_cookie_t cookie ,
                         xcb_generic_error_t **e );
xcb_void_cookie_t
xcb_ungrab_keyboard_checked (xcb_connection_t *c ,
                             xcb_timestamp_t time );
xcb_void_cookie_t
xcb_ungrab_keyboard (xcb_connection_t *c ,
                     xcb_timestamp_t time );
xcb_void_cookie_t
xcb_grab_key_checked (xcb_connection_t *c ,
                      uint8_t owner_events ,
                      xcb_window_t grab_window ,
                      uint16_t modifiers ,
                      xcb_keycode_t key ,
                      uint8_t pointer_mode ,
                      uint8_t keyboard_mode );
xcb_void_cookie_t
xcb_grab_key (xcb_connection_t *c ,
              uint8_t owner_events ,
              xcb_window_t grab_window ,
              uint16_t modifiers ,
              xcb_keycode_t key ,
              uint8_t pointer_mode ,
              uint8_t keyboard_mode );
xcb_void_cookie_t
xcb_ungrab_key_checked (xcb_connection_t *c ,
                        xcb_keycode_t key ,
                        xcb_window_t grab_window ,
                        uint16_t modifiers );
xcb_void_cookie_t
xcb_ungrab_key (xcb_connection_t *c ,
                xcb_keycode_t key ,
                xcb_window_t grab_window ,
                uint16_t modifiers );
xcb_void_cookie_t
xcb_allow_events_checked (xcb_connection_t *c ,
                          uint8_t mode ,
                          xcb_timestamp_t time );
xcb_void_cookie_t
xcb_allow_events (xcb_connection_t *c ,
                  uint8_t mode ,
                  xcb_timestamp_t time );
xcb_void_cookie_t
xcb_grab_server_checked (xcb_connection_t *c );
xcb_void_cookie_t
xcb_grab_server (xcb_connection_t *c );
xcb_void_cookie_t
xcb_ungrab_server_checked (xcb_connection_t *c );
xcb_void_cookie_t
xcb_ungrab_server (xcb_connection_t *c );
xcb_query_pointer_cookie_t
xcb_query_pointer (xcb_connection_t *c ,
                   xcb_window_t window );
xcb_query_pointer_cookie_t
xcb_query_pointer_unchecked (xcb_connection_t *c ,
                             xcb_window_t window );
xcb_query_pointer_reply_t *
xcb_query_pointer_reply (xcb_connection_t *c ,
                         xcb_query_pointer_cookie_t cookie ,
                         xcb_generic_error_t **e );
void
xcb_timecoord_next (xcb_timecoord_iterator_t *i );
xcb_generic_iterator_t
xcb_timecoord_end (xcb_timecoord_iterator_t i );
int
xcb_get_motion_events_sizeof (const void *_buffer );
xcb_get_motion_events_cookie_t
xcb_get_motion_events (xcb_connection_t *c ,
                       xcb_window_t window ,
                       xcb_timestamp_t start ,
                       xcb_timestamp_t stop );
xcb_get_motion_events_cookie_t
xcb_get_motion_events_unchecked (xcb_connection_t *c ,
                                 xcb_window_t window ,
                                 xcb_timestamp_t start ,
                                 xcb_timestamp_t stop );
xcb_timecoord_t *
xcb_get_motion_events_events (const xcb_get_motion_events_reply_t *R );
int
xcb_get_motion_events_events_length (const xcb_get_motion_events_reply_t *R );
xcb_timecoord_iterator_t
xcb_get_motion_events_events_iterator (const xcb_get_motion_events_reply_t *R );
xcb_get_motion_events_reply_t *
xcb_get_motion_events_reply (xcb_connection_t *c ,
                             xcb_get_motion_events_cookie_t cookie ,
                             xcb_generic_error_t **e );
xcb_translate_coordinates_cookie_t
xcb_translate_coordinates (xcb_connection_t *c ,
                           xcb_window_t src_window ,
                           xcb_window_t dst_window ,
                           int16_t src_x ,
                           int16_t src_y );
xcb_translate_coordinates_cookie_t
xcb_translate_coordinates_unchecked (xcb_connection_t *c ,
                                     xcb_window_t src_window ,
                                     xcb_window_t dst_window ,
                                     int16_t src_x ,
                                     int16_t src_y );
xcb_translate_coordinates_reply_t *
xcb_translate_coordinates_reply (xcb_connection_t *c ,
                                 xcb_translate_coordinates_cookie_t cookie ,
                                 xcb_generic_error_t **e );
xcb_void_cookie_t
xcb_warp_pointer_checked (xcb_connection_t *c ,
                          xcb_window_t src_window ,
                          xcb_window_t dst_window ,
                          int16_t src_x ,
                          int16_t src_y ,
                          uint16_t src_width ,
                          uint16_t src_height ,
                          int16_t dst_x ,
                          int16_t dst_y );
xcb_void_cookie_t
xcb_warp_pointer (xcb_connection_t *c ,
                  xcb_window_t src_window ,
                  xcb_window_t dst_window ,
                  int16_t src_x ,
                  int16_t src_y ,
                  uint16_t src_width ,
                  uint16_t src_height ,
                  int16_t dst_x ,
                  int16_t dst_y );
xcb_void_cookie_t
xcb_set_input_focus_checked (xcb_connection_t *c ,
                             uint8_t revert_to ,
                             xcb_window_t focus ,
                             xcb_timestamp_t time );
xcb_void_cookie_t
xcb_set_input_focus (xcb_connection_t *c ,
                     uint8_t revert_to ,
                     xcb_window_t focus ,
                     xcb_timestamp_t time );
xcb_get_input_focus_cookie_t
xcb_get_input_focus (xcb_connection_t *c );
xcb_get_input_focus_cookie_t
xcb_get_input_focus_unchecked (xcb_connection_t *c );
xcb_get_input_focus_reply_t *
xcb_get_input_focus_reply (xcb_connection_t *c ,
                           xcb_get_input_focus_cookie_t cookie ,
                           xcb_generic_error_t **e );
xcb_query_keymap_cookie_t
xcb_query_keymap (xcb_connection_t *c );
xcb_query_keymap_cookie_t
xcb_query_keymap_unchecked (xcb_connection_t *c );
xcb_query_keymap_reply_t *
xcb_query_keymap_reply (xcb_connection_t *c ,
                        xcb_query_keymap_cookie_t cookie ,
                        xcb_generic_error_t **e );
int
xcb_open_font_sizeof (const void *_buffer );
xcb_void_cookie_t
xcb_open_font_checked (xcb_connection_t *c ,
                       xcb_font_t fid ,
                       uint16_t name_len ,
                       const char *name );
xcb_void_cookie_t
xcb_open_font (xcb_connection_t *c ,
               xcb_font_t fid ,
               uint16_t name_len ,
               const char *name );
xcb_void_cookie_t
xcb_close_font_checked (xcb_connection_t *c ,
                        xcb_font_t font );
xcb_void_cookie_t
xcb_close_font (xcb_connection_t *c ,
                xcb_font_t font );
void
xcb_fontprop_next (xcb_fontprop_iterator_t *i );
xcb_generic_iterator_t
xcb_fontprop_end (xcb_fontprop_iterator_t i );
void
xcb_charinfo_next (xcb_charinfo_iterator_t *i );
xcb_generic_iterator_t
xcb_charinfo_end (xcb_charinfo_iterator_t i );
int
xcb_query_font_sizeof (const void *_buffer );
xcb_query_font_cookie_t
xcb_query_font (xcb_connection_t *c ,
                xcb_fontable_t font );
xcb_query_font_cookie_t
xcb_query_font_unchecked (xcb_connection_t *c ,
                          xcb_fontable_t font );
xcb_fontprop_t *
xcb_query_font_properties (const xcb_query_font_reply_t *R );
int
xcb_query_font_properties_length (const xcb_query_font_reply_t *R );
xcb_fontprop_iterator_t
xcb_query_font_properties_iterator (const xcb_query_font_reply_t *R );
xcb_charinfo_t *
xcb_query_font_char_infos (const xcb_query_font_reply_t *R );
int
xcb_query_font_char_infos_length (const xcb_query_font_reply_t *R );
xcb_charinfo_iterator_t
xcb_query_font_char_infos_iterator (const xcb_query_font_reply_t *R );
xcb_query_font_reply_t *
xcb_query_font_reply (xcb_connection_t *c ,
                      xcb_query_font_cookie_t cookie ,
                      xcb_generic_error_t **e );
int
xcb_query_text_extents_sizeof (const void *_buffer ,
                               uint32_t string_len );
xcb_query_text_extents_cookie_t
xcb_query_text_extents (xcb_connection_t *c ,
                        xcb_fontable_t font ,
                        uint32_t string_len ,
                        const xcb_char2b_t *string );
xcb_query_text_extents_cookie_t
xcb_query_text_extents_unchecked (xcb_connection_t *c ,
                                  xcb_fontable_t font ,
                                  uint32_t string_len ,
                                  const xcb_char2b_t *string );
xcb_query_text_extents_reply_t *
xcb_query_text_extents_reply (xcb_connection_t *c ,
                              xcb_query_text_extents_cookie_t cookie ,
                              xcb_generic_error_t **e );
int
xcb_str_sizeof (const void *_buffer );
char *
xcb_str_name (const xcb_str_t *R );
int
xcb_str_name_length (const xcb_str_t *R );
xcb_generic_iterator_t
xcb_str_name_end (const xcb_str_t *R );
void
xcb_str_next (xcb_str_iterator_t *i );
xcb_generic_iterator_t
xcb_str_end (xcb_str_iterator_t i );
int
xcb_list_fonts_sizeof (const void *_buffer );
xcb_list_fonts_cookie_t
xcb_list_fonts (xcb_connection_t *c ,
                uint16_t max_names ,
                uint16_t pattern_len ,
                const char *pattern );
xcb_list_fonts_cookie_t
xcb_list_fonts_unchecked (xcb_connection_t *c ,
                          uint16_t max_names ,
                          uint16_t pattern_len ,
                          const char *pattern );
int
xcb_list_fonts_names_length (const xcb_list_fonts_reply_t *R );
xcb_str_iterator_t
xcb_list_fonts_names_iterator (const xcb_list_fonts_reply_t *R );
xcb_list_fonts_reply_t *
xcb_list_fonts_reply (xcb_connection_t *c ,
                      xcb_list_fonts_cookie_t cookie ,
                      xcb_generic_error_t **e );
int
xcb_list_fonts_with_info_sizeof (const void *_buffer );
xcb_list_fonts_with_info_cookie_t
xcb_list_fonts_with_info (xcb_connection_t *c ,
                          uint16_t max_names ,
                          uint16_t pattern_len ,
                          const char *pattern );
xcb_list_fonts_with_info_cookie_t
xcb_list_fonts_with_info_unchecked (xcb_connection_t *c ,
                                    uint16_t max_names ,
                                    uint16_t pattern_len ,
                                    const char *pattern );
xcb_fontprop_t *
xcb_list_fonts_with_info_properties (const xcb_list_fonts_with_info_reply_t *R );
int
xcb_list_fonts_with_info_properties_length (const xcb_list_fonts_with_info_reply_t *R );
xcb_fontprop_iterator_t
xcb_list_fonts_with_info_properties_iterator (const xcb_list_fonts_with_info_reply_t *R );
char *
xcb_list_fonts_with_info_name (const xcb_list_fonts_with_info_reply_t *R );
int
xcb_list_fonts_with_info_name_length (const xcb_list_fonts_with_info_reply_t *R );
xcb_generic_iterator_t
xcb_list_fonts_with_info_name_end (const xcb_list_fonts_with_info_reply_t *R );
xcb_list_fonts_with_info_reply_t *
xcb_list_fonts_with_info_reply (xcb_connection_t *c ,
                                xcb_list_fonts_with_info_cookie_t cookie ,
                                xcb_generic_error_t **e );
int
xcb_set_font_path_sizeof (const void *_buffer );
xcb_void_cookie_t
xcb_set_font_path_checked (xcb_connection_t *c ,
                           uint16_t font_qty ,
                           const xcb_str_t *font );
xcb_void_cookie_t
xcb_set_font_path (xcb_connection_t *c ,
                   uint16_t font_qty ,
                   const xcb_str_t *font );
int
xcb_get_font_path_sizeof (const void *_buffer );
xcb_get_font_path_cookie_t
xcb_get_font_path (xcb_connection_t *c );
xcb_get_font_path_cookie_t
xcb_get_font_path_unchecked (xcb_connection_t *c );
int
xcb_get_font_path_path_length (const xcb_get_font_path_reply_t *R );
xcb_str_iterator_t
xcb_get_font_path_path_iterator (const xcb_get_font_path_reply_t *R );
xcb_get_font_path_reply_t *
xcb_get_font_path_reply (xcb_connection_t *c ,
                         xcb_get_font_path_cookie_t cookie ,
                         xcb_generic_error_t **e );
xcb_void_cookie_t
xcb_create_pixmap_checked (xcb_connection_t *c ,
                           uint8_t depth ,
                           xcb_pixmap_t pid ,
                           xcb_drawable_t drawable ,
                           uint16_t width ,
                           uint16_t height );
xcb_void_cookie_t
xcb_create_pixmap (xcb_connection_t *c ,
                   uint8_t depth ,
                   xcb_pixmap_t pid ,
                   xcb_drawable_t drawable ,
                   uint16_t width ,
                   uint16_t height );
xcb_void_cookie_t
xcb_free_pixmap_checked (xcb_connection_t *c ,
                         xcb_pixmap_t pixmap );
xcb_void_cookie_t
xcb_free_pixmap (xcb_connection_t *c ,
                 xcb_pixmap_t pixmap );
int
xcb_create_gc_sizeof (const void *_buffer );
xcb_void_cookie_t
xcb_create_gc_checked (xcb_connection_t *c ,
                       xcb_gcontext_t cid ,
                       xcb_drawable_t drawable ,
                       uint32_t value_mask ,
                       const uint32_t *value_list );
xcb_void_cookie_t
xcb_create_gc (xcb_connection_t *c ,
               xcb_gcontext_t cid ,
               xcb_drawable_t drawable ,
               uint32_t value_mask ,
               const uint32_t *value_list );
int
xcb_change_gc_sizeof (const void *_buffer );
xcb_void_cookie_t
xcb_change_gc_checked (xcb_connection_t *c ,
                       xcb_gcontext_t gc ,
                       uint32_t value_mask ,
                       const uint32_t *value_list );
xcb_void_cookie_t
xcb_change_gc (xcb_connection_t *c ,
               xcb_gcontext_t gc ,
               uint32_t value_mask ,
               const uint32_t *value_list );
xcb_void_cookie_t
xcb_copy_gc_checked (xcb_connection_t *c ,
                     xcb_gcontext_t src_gc ,
                     xcb_gcontext_t dst_gc ,
                     uint32_t value_mask );
xcb_void_cookie_t
xcb_copy_gc (xcb_connection_t *c ,
             xcb_gcontext_t src_gc ,
             xcb_gcontext_t dst_gc ,
             uint32_t value_mask );
int
xcb_set_dashes_sizeof (const void *_buffer );
xcb_void_cookie_t
xcb_set_dashes_checked (xcb_connection_t *c ,
                        xcb_gcontext_t gc ,
                        uint16_t dash_offset ,
                        uint16_t dashes_len ,
                        const uint8_t *dashes );
xcb_void_cookie_t
xcb_set_dashes (xcb_connection_t *c ,
                xcb_gcontext_t gc ,
                uint16_t dash_offset ,
                uint16_t dashes_len ,
                const uint8_t *dashes );
int
xcb_set_clip_rectangles_sizeof (const void *_buffer ,
                                uint32_t rectangles_len );
xcb_void_cookie_t
xcb_set_clip_rectangles_checked (xcb_connection_t *c ,
                                 uint8_t ordering ,
                                 xcb_gcontext_t gc ,
                                 int16_t clip_x_origin ,
                                 int16_t clip_y_origin ,
                                 uint32_t rectangles_len ,
                                 const xcb_rectangle_t *rectangles );
xcb_void_cookie_t
xcb_set_clip_rectangles (xcb_connection_t *c ,
                         uint8_t ordering ,
                         xcb_gcontext_t gc ,
                         int16_t clip_x_origin ,
                         int16_t clip_y_origin ,
                         uint32_t rectangles_len ,
                         const xcb_rectangle_t *rectangles );
xcb_void_cookie_t
xcb_free_gc_checked (xcb_connection_t *c ,
                     xcb_gcontext_t gc );
xcb_void_cookie_t
xcb_free_gc (xcb_connection_t *c ,
             xcb_gcontext_t gc );
xcb_void_cookie_t
xcb_clear_area_checked (xcb_connection_t *c ,
                        uint8_t exposures ,
                        xcb_window_t window ,
                        int16_t x ,
                        int16_t y ,
                        uint16_t width ,
                        uint16_t height );
xcb_void_cookie_t
xcb_clear_area (xcb_connection_t *c ,
                uint8_t exposures ,
                xcb_window_t window ,
                int16_t x ,
                int16_t y ,
                uint16_t width ,
                uint16_t height );
xcb_void_cookie_t
xcb_copy_area_checked (xcb_connection_t *c ,
                       xcb_drawable_t src_drawable ,
                       xcb_drawable_t dst_drawable ,
                       xcb_gcontext_t gc ,
                       int16_t src_x ,
                       int16_t src_y ,
                       int16_t dst_x ,
                       int16_t dst_y ,
                       uint16_t width ,
                       uint16_t height );
xcb_void_cookie_t
xcb_copy_area (xcb_connection_t *c ,
               xcb_drawable_t src_drawable ,
               xcb_drawable_t dst_drawable ,
               xcb_gcontext_t gc ,
               int16_t src_x ,
               int16_t src_y ,
               int16_t dst_x ,
               int16_t dst_y ,
               uint16_t width ,
               uint16_t height );
xcb_void_cookie_t
xcb_copy_plane_checked (xcb_connection_t *c ,
                        xcb_drawable_t src_drawable ,
                        xcb_drawable_t dst_drawable ,
                        xcb_gcontext_t gc ,
                        int16_t src_x ,
                        int16_t src_y ,
                        int16_t dst_x ,
                        int16_t dst_y ,
                        uint16_t width ,
                        uint16_t height ,
                        uint32_t bit_plane );
xcb_void_cookie_t
xcb_copy_plane (xcb_connection_t *c ,
                xcb_drawable_t src_drawable ,
                xcb_drawable_t dst_drawable ,
                xcb_gcontext_t gc ,
                int16_t src_x ,
                int16_t src_y ,
                int16_t dst_x ,
                int16_t dst_y ,
                uint16_t width ,
                uint16_t height ,
                uint32_t bit_plane );
int
xcb_poly_point_sizeof (const void *_buffer ,
                       uint32_t points_len );
xcb_void_cookie_t
xcb_poly_point_checked (xcb_connection_t *c ,
                        uint8_t coordinate_mode ,
                        xcb_drawable_t drawable ,
                        xcb_gcontext_t gc ,
                        uint32_t points_len ,
                        const xcb_point_t *points );
xcb_void_cookie_t
xcb_poly_point (xcb_connection_t *c ,
                uint8_t coordinate_mode ,
                xcb_drawable_t drawable ,
                xcb_gcontext_t gc ,
                uint32_t points_len ,
                const xcb_point_t *points );
int
xcb_poly_line_sizeof (const void *_buffer ,
                      uint32_t points_len );
xcb_void_cookie_t
xcb_poly_line_checked (xcb_connection_t *c ,
                       uint8_t coordinate_mode ,
                       xcb_drawable_t drawable ,
                       xcb_gcontext_t gc ,
                       uint32_t points_len ,
                       const xcb_point_t *points );
xcb_void_cookie_t
xcb_poly_line (xcb_connection_t *c ,
               uint8_t coordinate_mode ,
               xcb_drawable_t drawable ,
               xcb_gcontext_t gc ,
               uint32_t points_len ,
               const xcb_point_t *points );
void
xcb_segment_next (xcb_segment_iterator_t *i );
xcb_generic_iterator_t
xcb_segment_end (xcb_segment_iterator_t i );
int
xcb_poly_segment_sizeof (const void *_buffer ,
                         uint32_t segments_len );
xcb_void_cookie_t
xcb_poly_segment_checked (xcb_connection_t *c ,
                          xcb_drawable_t drawable ,
                          xcb_gcontext_t gc ,
                          uint32_t segments_len ,
                          const xcb_segment_t *segments );
xcb_void_cookie_t
xcb_poly_segment (xcb_connection_t *c ,
                  xcb_drawable_t drawable ,
                  xcb_gcontext_t gc ,
                  uint32_t segments_len ,
                  const xcb_segment_t *segments );
int
xcb_poly_rectangle_sizeof (const void *_buffer ,
                           uint32_t rectangles_len );
xcb_void_cookie_t
xcb_poly_rectangle_checked (xcb_connection_t *c ,
                            xcb_drawable_t drawable ,
                            xcb_gcontext_t gc ,
                            uint32_t rectangles_len ,
                            const xcb_rectangle_t *rectangles );
xcb_void_cookie_t
xcb_poly_rectangle (xcb_connection_t *c ,
                    xcb_drawable_t drawable ,
                    xcb_gcontext_t gc ,
                    uint32_t rectangles_len ,
                    const xcb_rectangle_t *rectangles );
int
xcb_poly_arc_sizeof (const void *_buffer ,
                     uint32_t arcs_len );
xcb_void_cookie_t
xcb_poly_arc_checked (xcb_connection_t *c ,
                      xcb_drawable_t drawable ,
                      xcb_gcontext_t gc ,
                      uint32_t arcs_len ,
                      const xcb_arc_t *arcs );
xcb_void_cookie_t
xcb_poly_arc (xcb_connection_t *c ,
              xcb_drawable_t drawable ,
              xcb_gcontext_t gc ,
              uint32_t arcs_len ,
              const xcb_arc_t *arcs );
int
xcb_fill_poly_sizeof (const void *_buffer ,
                      uint32_t points_len );
xcb_void_cookie_t
xcb_fill_poly_checked (xcb_connection_t *c ,
                       xcb_drawable_t drawable ,
                       xcb_gcontext_t gc ,
                       uint8_t shape ,
                       uint8_t coordinate_mode ,
                       uint32_t points_len ,
                       const xcb_point_t *points );
xcb_void_cookie_t
xcb_fill_poly (xcb_connection_t *c ,
               xcb_drawable_t drawable ,
               xcb_gcontext_t gc ,
               uint8_t shape ,
               uint8_t coordinate_mode ,
               uint32_t points_len ,
               const xcb_point_t *points );
int
xcb_poly_fill_rectangle_sizeof (const void *_buffer ,
                                uint32_t rectangles_len );
xcb_void_cookie_t
xcb_poly_fill_rectangle_checked (xcb_connection_t *c ,
                                 xcb_drawable_t drawable ,
                                 xcb_gcontext_t gc ,
                                 uint32_t rectangles_len ,
                                 const xcb_rectangle_t *rectangles );
xcb_void_cookie_t
xcb_poly_fill_rectangle (xcb_connection_t *c ,
                         xcb_drawable_t drawable ,
                         xcb_gcontext_t gc ,
                         uint32_t rectangles_len ,
                         const xcb_rectangle_t *rectangles );
int
xcb_poly_fill_arc_sizeof (const void *_buffer ,
                          uint32_t arcs_len );
xcb_void_cookie_t
xcb_poly_fill_arc_checked (xcb_connection_t *c ,
                           xcb_drawable_t drawable ,
                           xcb_gcontext_t gc ,
                           uint32_t arcs_len ,
                           const xcb_arc_t *arcs );
xcb_void_cookie_t
xcb_poly_fill_arc (xcb_connection_t *c ,
                   xcb_drawable_t drawable ,
                   xcb_gcontext_t gc ,
                   uint32_t arcs_len ,
                   const xcb_arc_t *arcs );
int
xcb_put_image_sizeof (const void *_buffer ,
                      uint32_t data_len );
xcb_void_cookie_t
xcb_put_image_checked (xcb_connection_t *c ,
                       uint8_t format ,
                       xcb_drawable_t drawable ,
                       xcb_gcontext_t gc ,
                       uint16_t width ,
                       uint16_t height ,
                       int16_t dst_x ,
                       int16_t dst_y ,
                       uint8_t left_pad ,
                       uint8_t depth ,
                       uint32_t data_len ,
                       const uint8_t *data );
xcb_void_cookie_t
xcb_put_image (xcb_connection_t *c ,
               uint8_t format ,
               xcb_drawable_t drawable ,
               xcb_gcontext_t gc ,
               uint16_t width ,
               uint16_t height ,
               int16_t dst_x ,
               int16_t dst_y ,
               uint8_t left_pad ,
               uint8_t depth ,
               uint32_t data_len ,
               const uint8_t *data );
int
xcb_get_image_sizeof (const void *_buffer );
xcb_get_image_cookie_t
xcb_get_image (xcb_connection_t *c ,
               uint8_t format ,
               xcb_drawable_t drawable ,
               int16_t x ,
               int16_t y ,
               uint16_t width ,
               uint16_t height ,
               uint32_t plane_mask );
xcb_get_image_cookie_t
xcb_get_image_unchecked (xcb_connection_t *c ,
                         uint8_t format ,
                         xcb_drawable_t drawable ,
                         int16_t x ,
                         int16_t y ,
                         uint16_t width ,
                         uint16_t height ,
                         uint32_t plane_mask );
uint8_t *
xcb_get_image_data (const xcb_get_image_reply_t *R );
int
xcb_get_image_data_length (const xcb_get_image_reply_t *R );
xcb_generic_iterator_t
xcb_get_image_data_end (const xcb_get_image_reply_t *R );
xcb_get_image_reply_t *
xcb_get_image_reply (xcb_connection_t *c ,
                     xcb_get_image_cookie_t cookie ,
                     xcb_generic_error_t **e );
int
xcb_poly_text_8_sizeof (const void *_buffer ,
                        uint32_t items_len );
xcb_void_cookie_t
xcb_poly_text_8_checked (xcb_connection_t *c ,
                         xcb_drawable_t drawable ,
                         xcb_gcontext_t gc ,
                         int16_t x ,
                         int16_t y ,
                         uint32_t items_len ,
                         const uint8_t *items );
xcb_void_cookie_t
xcb_poly_text_8 (xcb_connection_t *c ,
                 xcb_drawable_t drawable ,
                 xcb_gcontext_t gc ,
                 int16_t x ,
                 int16_t y ,
                 uint32_t items_len ,
                 const uint8_t *items );
int
xcb_poly_text_16_sizeof (const void *_buffer ,
                         uint32_t items_len );
xcb_void_cookie_t
xcb_poly_text_16_checked (xcb_connection_t *c ,
                          xcb_drawable_t drawable ,
                          xcb_gcontext_t gc ,
                          int16_t x ,
                          int16_t y ,
                          uint32_t items_len ,
                          const uint8_t *items );
xcb_void_cookie_t
xcb_poly_text_16 (xcb_connection_t *c ,
                  xcb_drawable_t drawable ,
                  xcb_gcontext_t gc ,
                  int16_t x ,
                  int16_t y ,
                  uint32_t items_len ,
                  const uint8_t *items );
int
xcb_image_text_8_sizeof (const void *_buffer );
xcb_void_cookie_t
xcb_image_text_8_checked (xcb_connection_t *c ,
                          uint8_t string_len ,
                          xcb_drawable_t drawable ,
                          xcb_gcontext_t gc ,
                          int16_t x ,
                          int16_t y ,
                          const char *string );
xcb_void_cookie_t
xcb_image_text_8 (xcb_connection_t *c ,
                  uint8_t string_len ,
                  xcb_drawable_t drawable ,
                  xcb_gcontext_t gc ,
                  int16_t x ,
                  int16_t y ,
                  const char *string );
int
xcb_image_text_16_sizeof (const void *_buffer );
xcb_void_cookie_t
xcb_image_text_16_checked (xcb_connection_t *c ,
                           uint8_t string_len ,
                           xcb_drawable_t drawable ,
                           xcb_gcontext_t gc ,
                           int16_t x ,
                           int16_t y ,
                           const xcb_char2b_t *string );
xcb_void_cookie_t
xcb_image_text_16 (xcb_connection_t *c ,
                   uint8_t string_len ,
                   xcb_drawable_t drawable ,
                   xcb_gcontext_t gc ,
                   int16_t x ,
                   int16_t y ,
                   const xcb_char2b_t *string );
xcb_void_cookie_t
xcb_create_colormap_checked (xcb_connection_t *c ,
                             uint8_t alloc ,
                             xcb_colormap_t mid ,
                             xcb_window_t window ,
                             xcb_visualid_t visual );
xcb_void_cookie_t
xcb_create_colormap (xcb_connection_t *c ,
                     uint8_t alloc ,
                     xcb_colormap_t mid ,
                     xcb_window_t window ,
                     xcb_visualid_t visual );
xcb_void_cookie_t
xcb_free_colormap_checked (xcb_connection_t *c ,
                           xcb_colormap_t cmap );
xcb_void_cookie_t
xcb_free_colormap (xcb_connection_t *c ,
                   xcb_colormap_t cmap );
xcb_void_cookie_t
xcb_copy_colormap_and_free_checked (xcb_connection_t *c ,
                                    xcb_colormap_t mid ,
                                    xcb_colormap_t src_cmap );
xcb_void_cookie_t
xcb_copy_colormap_and_free (xcb_connection_t *c ,
                            xcb_colormap_t mid ,
                            xcb_colormap_t src_cmap );
xcb_void_cookie_t
xcb_install_colormap_checked (xcb_connection_t *c ,
                              xcb_colormap_t cmap );
xcb_void_cookie_t
xcb_install_colormap (xcb_connection_t *c ,
                      xcb_colormap_t cmap );
xcb_void_cookie_t
xcb_uninstall_colormap_checked (xcb_connection_t *c ,
                                xcb_colormap_t cmap );
xcb_void_cookie_t
xcb_uninstall_colormap (xcb_connection_t *c ,
                        xcb_colormap_t cmap );
int
xcb_list_installed_colormaps_sizeof (const void *_buffer );
xcb_list_installed_colormaps_cookie_t
xcb_list_installed_colormaps (xcb_connection_t *c ,
                              xcb_window_t window );
xcb_list_installed_colormaps_cookie_t
xcb_list_installed_colormaps_unchecked (xcb_connection_t *c ,
                                        xcb_window_t window );
xcb_colormap_t *
xcb_list_installed_colormaps_cmaps (const xcb_list_installed_colormaps_reply_t *R );
int
xcb_list_installed_colormaps_cmaps_length (const xcb_list_installed_colormaps_reply_t *R );
xcb_generic_iterator_t
xcb_list_installed_colormaps_cmaps_end (const xcb_list_installed_colormaps_reply_t *R );
xcb_list_installed_colormaps_reply_t *
xcb_list_installed_colormaps_reply (xcb_connection_t *c ,
                                    xcb_list_installed_colormaps_cookie_t cookie ,
                                    xcb_generic_error_t **e );
xcb_alloc_color_cookie_t
xcb_alloc_color (xcb_connection_t *c ,
                 xcb_colormap_t cmap ,
                 uint16_t red ,
                 uint16_t green ,
                 uint16_t blue );
xcb_alloc_color_cookie_t
xcb_alloc_color_unchecked (xcb_connection_t *c ,
                           xcb_colormap_t cmap ,
                           uint16_t red ,
                           uint16_t green ,
                           uint16_t blue );
xcb_alloc_color_reply_t *
xcb_alloc_color_reply (xcb_connection_t *c ,
                       xcb_alloc_color_cookie_t cookie ,
                       xcb_generic_error_t **e );
int
xcb_alloc_named_color_sizeof (const void *_buffer );
xcb_alloc_named_color_cookie_t
xcb_alloc_named_color (xcb_connection_t *c ,
                       xcb_colormap_t cmap ,
                       uint16_t name_len ,
                       const char *name );
xcb_alloc_named_color_cookie_t
xcb_alloc_named_color_unchecked (xcb_connection_t *c ,
                                 xcb_colormap_t cmap ,
                                 uint16_t name_len ,
                                 const char *name );
xcb_alloc_named_color_reply_t *
xcb_alloc_named_color_reply (xcb_connection_t *c ,
                             xcb_alloc_named_color_cookie_t cookie ,
                             xcb_generic_error_t **e );
int
xcb_alloc_color_cells_sizeof (const void *_buffer );
xcb_alloc_color_cells_cookie_t
xcb_alloc_color_cells (xcb_connection_t *c ,
                       uint8_t contiguous ,
                       xcb_colormap_t cmap ,
                       uint16_t colors ,
                       uint16_t planes );
xcb_alloc_color_cells_cookie_t
xcb_alloc_color_cells_unchecked (xcb_connection_t *c ,
                                 uint8_t contiguous ,
                                 xcb_colormap_t cmap ,
                                 uint16_t colors ,
                                 uint16_t planes );
uint32_t *
xcb_alloc_color_cells_pixels (const xcb_alloc_color_cells_reply_t *R );
int
xcb_alloc_color_cells_pixels_length (const xcb_alloc_color_cells_reply_t *R );
xcb_generic_iterator_t
xcb_alloc_color_cells_pixels_end (const xcb_alloc_color_cells_reply_t *R );
uint32_t *
xcb_alloc_color_cells_masks (const xcb_alloc_color_cells_reply_t *R );
int
xcb_alloc_color_cells_masks_length (const xcb_alloc_color_cells_reply_t *R );
xcb_generic_iterator_t
xcb_alloc_color_cells_masks_end (const xcb_alloc_color_cells_reply_t *R );
xcb_alloc_color_cells_reply_t *
xcb_alloc_color_cells_reply (xcb_connection_t *c ,
                             xcb_alloc_color_cells_cookie_t cookie ,
                             xcb_generic_error_t **e );
int
xcb_alloc_color_planes_sizeof (const void *_buffer );
xcb_alloc_color_planes_cookie_t
xcb_alloc_color_planes (xcb_connection_t *c ,
                        uint8_t contiguous ,
                        xcb_colormap_t cmap ,
                        uint16_t colors ,
                        uint16_t reds ,
                        uint16_t greens ,
                        uint16_t blues );
xcb_alloc_color_planes_cookie_t
xcb_alloc_color_planes_unchecked (xcb_connection_t *c ,
                                  uint8_t contiguous ,
                                  xcb_colormap_t cmap ,
                                  uint16_t colors ,
                                  uint16_t reds ,
                                  uint16_t greens ,
                                  uint16_t blues );
uint32_t *
xcb_alloc_color_planes_pixels (const xcb_alloc_color_planes_reply_t *R );
int
xcb_alloc_color_planes_pixels_length (const xcb_alloc_color_planes_reply_t *R );
xcb_generic_iterator_t
xcb_alloc_color_planes_pixels_end (const xcb_alloc_color_planes_reply_t *R );
xcb_alloc_color_planes_reply_t *
xcb_alloc_color_planes_reply (xcb_connection_t *c ,
                              xcb_alloc_color_planes_cookie_t cookie ,
                              xcb_generic_error_t **e );
int
xcb_free_colors_sizeof (const void *_buffer ,
                        uint32_t pixels_len );
xcb_void_cookie_t
xcb_free_colors_checked (xcb_connection_t *c ,
                         xcb_colormap_t cmap ,
                         uint32_t plane_mask ,
                         uint32_t pixels_len ,
                         const uint32_t *pixels );
xcb_void_cookie_t
xcb_free_colors (xcb_connection_t *c ,
                 xcb_colormap_t cmap ,
                 uint32_t plane_mask ,
                 uint32_t pixels_len ,
                 const uint32_t *pixels );
void
xcb_coloritem_next (xcb_coloritem_iterator_t *i );
xcb_generic_iterator_t
xcb_coloritem_end (xcb_coloritem_iterator_t i );
int
xcb_store_colors_sizeof (const void *_buffer ,
                         uint32_t items_len );
xcb_void_cookie_t
xcb_store_colors_checked (xcb_connection_t *c ,
                          xcb_colormap_t cmap ,
                          uint32_t items_len ,
                          const xcb_coloritem_t *items );
xcb_void_cookie_t
xcb_store_colors (xcb_connection_t *c ,
                  xcb_colormap_t cmap ,
                  uint32_t items_len ,
                  const xcb_coloritem_t *items );
int
xcb_store_named_color_sizeof (const void *_buffer );
xcb_void_cookie_t
xcb_store_named_color_checked (xcb_connection_t *c ,
                               uint8_t flags ,
                               xcb_colormap_t cmap ,
                               uint32_t pixel ,
                               uint16_t name_len ,
                               const char *name );
xcb_void_cookie_t
xcb_store_named_color (xcb_connection_t *c ,
                       uint8_t flags ,
                       xcb_colormap_t cmap ,
                       uint32_t pixel ,
                       uint16_t name_len ,
                       const char *name );
void
xcb_rgb_next (xcb_rgb_iterator_t *i );
xcb_generic_iterator_t
xcb_rgb_end (xcb_rgb_iterator_t i );
int
xcb_query_colors_sizeof (const void *_buffer ,
                         uint32_t pixels_len );
xcb_query_colors_cookie_t
xcb_query_colors (xcb_connection_t *c ,
                  xcb_colormap_t cmap ,
                  uint32_t pixels_len ,
                  const uint32_t *pixels );
xcb_query_colors_cookie_t
xcb_query_colors_unchecked (xcb_connection_t *c ,
                            xcb_colormap_t cmap ,
                            uint32_t pixels_len ,
                            const uint32_t *pixels );
xcb_rgb_t *
xcb_query_colors_colors (const xcb_query_colors_reply_t *R );
int
xcb_query_colors_colors_length (const xcb_query_colors_reply_t *R );
xcb_rgb_iterator_t
xcb_query_colors_colors_iterator (const xcb_query_colors_reply_t *R );
xcb_query_colors_reply_t *
xcb_query_colors_reply (xcb_connection_t *c ,
                        xcb_query_colors_cookie_t cookie ,
                        xcb_generic_error_t **e );
int
xcb_lookup_color_sizeof (const void *_buffer );
xcb_lookup_color_cookie_t
xcb_lookup_color (xcb_connection_t *c ,
                  xcb_colormap_t cmap ,
                  uint16_t name_len ,
                  const char *name );
xcb_lookup_color_cookie_t
xcb_lookup_color_unchecked (xcb_connection_t *c ,
                            xcb_colormap_t cmap ,
                            uint16_t name_len ,
                            const char *name );
xcb_lookup_color_reply_t *
xcb_lookup_color_reply (xcb_connection_t *c ,
                        xcb_lookup_color_cookie_t cookie ,
                        xcb_generic_error_t **e );
xcb_void_cookie_t
xcb_create_cursor_checked (xcb_connection_t *c ,
                           xcb_cursor_t cid ,
                           xcb_pixmap_t source ,
                           xcb_pixmap_t mask ,
                           uint16_t fore_red ,
                           uint16_t fore_green ,
                           uint16_t fore_blue ,
                           uint16_t back_red ,
                           uint16_t back_green ,
                           uint16_t back_blue ,
                           uint16_t x ,
                           uint16_t y );
xcb_void_cookie_t
xcb_create_cursor (xcb_connection_t *c ,
                   xcb_cursor_t cid ,
                   xcb_pixmap_t source ,
                   xcb_pixmap_t mask ,
                   uint16_t fore_red ,
                   uint16_t fore_green ,
                   uint16_t fore_blue ,
                   uint16_t back_red ,
                   uint16_t back_green ,
                   uint16_t back_blue ,
                   uint16_t x ,
                   uint16_t y );
xcb_void_cookie_t
xcb_create_glyph_cursor_checked (xcb_connection_t *c ,
                                 xcb_cursor_t cid ,
                                 xcb_font_t source_font ,
                                 xcb_font_t mask_font ,
                                 uint16_t source_char ,
                                 uint16_t mask_char ,
                                 uint16_t fore_red ,
                                 uint16_t fore_green ,
                                 uint16_t fore_blue ,
                                 uint16_t back_red ,
                                 uint16_t back_green ,
                                 uint16_t back_blue );
xcb_void_cookie_t
xcb_create_glyph_cursor (xcb_connection_t *c ,
                         xcb_cursor_t cid ,
                         xcb_font_t source_font ,
                         xcb_font_t mask_font ,
                         uint16_t source_char ,
                         uint16_t mask_char ,
                         uint16_t fore_red ,
                         uint16_t fore_green ,
                         uint16_t fore_blue ,
                         uint16_t back_red ,
                         uint16_t back_green ,
                         uint16_t back_blue );
xcb_void_cookie_t
xcb_free_cursor_checked (xcb_connection_t *c ,
                         xcb_cursor_t cursor );
xcb_void_cookie_t
xcb_free_cursor (xcb_connection_t *c ,
                 xcb_cursor_t cursor );
xcb_void_cookie_t
xcb_recolor_cursor_checked (xcb_connection_t *c ,
                            xcb_cursor_t cursor ,
                            uint16_t fore_red ,
                            uint16_t fore_green ,
                            uint16_t fore_blue ,
                            uint16_t back_red ,
                            uint16_t back_green ,
                            uint16_t back_blue );
xcb_void_cookie_t
xcb_recolor_cursor (xcb_connection_t *c ,
                    xcb_cursor_t cursor ,
                    uint16_t fore_red ,
                    uint16_t fore_green ,
                    uint16_t fore_blue ,
                    uint16_t back_red ,
                    uint16_t back_green ,
                    uint16_t back_blue );
xcb_query_best_size_cookie_t
xcb_query_best_size (xcb_connection_t *c ,
                     uint8_t _class ,
                     xcb_drawable_t drawable ,
                     uint16_t width ,
                     uint16_t height );
xcb_query_best_size_cookie_t
xcb_query_best_size_unchecked (xcb_connection_t *c ,
                               uint8_t _class ,
                               xcb_drawable_t drawable ,
                               uint16_t width ,
                               uint16_t height );
xcb_query_best_size_reply_t *
xcb_query_best_size_reply (xcb_connection_t *c ,
                           xcb_query_best_size_cookie_t cookie ,
                           xcb_generic_error_t **e );
int
xcb_query_extension_sizeof (const void *_buffer );
xcb_query_extension_cookie_t
xcb_query_extension (xcb_connection_t *c ,
                     uint16_t name_len ,
                     const char *name );
xcb_query_extension_cookie_t
xcb_query_extension_unchecked (xcb_connection_t *c ,
                               uint16_t name_len ,
                               const char *name );
xcb_query_extension_reply_t *
xcb_query_extension_reply (xcb_connection_t *c ,
                           xcb_query_extension_cookie_t cookie ,
                           xcb_generic_error_t **e );
int
xcb_list_extensions_sizeof (const void *_buffer );
xcb_list_extensions_cookie_t
xcb_list_extensions (xcb_connection_t *c );
xcb_list_extensions_cookie_t
xcb_list_extensions_unchecked (xcb_connection_t *c );
int
xcb_list_extensions_names_length (const xcb_list_extensions_reply_t *R );
xcb_str_iterator_t
xcb_list_extensions_names_iterator (const xcb_list_extensions_reply_t *R );
xcb_list_extensions_reply_t *
xcb_list_extensions_reply (xcb_connection_t *c ,
                           xcb_list_extensions_cookie_t cookie ,
                           xcb_generic_error_t **e );
int
xcb_change_keyboard_mapping_sizeof (const void *_buffer );
xcb_void_cookie_t
xcb_change_keyboard_mapping_checked (xcb_connection_t *c ,
                                     uint8_t keycode_count ,
                                     xcb_keycode_t first_keycode ,
                                     uint8_t keysyms_per_keycode ,
                                     const xcb_keysym_t *keysyms );
xcb_void_cookie_t
xcb_change_keyboard_mapping (xcb_connection_t *c ,
                             uint8_t keycode_count ,
                             xcb_keycode_t first_keycode ,
                             uint8_t keysyms_per_keycode ,
                             const xcb_keysym_t *keysyms );
int
xcb_get_keyboard_mapping_sizeof (const void *_buffer );
xcb_get_keyboard_mapping_cookie_t
xcb_get_keyboard_mapping (xcb_connection_t *c ,
                          xcb_keycode_t first_keycode ,
                          uint8_t count );
xcb_get_keyboard_mapping_cookie_t
xcb_get_keyboard_mapping_unchecked (xcb_connection_t *c ,
                                    xcb_keycode_t first_keycode ,
                                    uint8_t count );
xcb_keysym_t *
xcb_get_keyboard_mapping_keysyms (const xcb_get_keyboard_mapping_reply_t *R );
int
xcb_get_keyboard_mapping_keysyms_length (const xcb_get_keyboard_mapping_reply_t *R );
xcb_generic_iterator_t
xcb_get_keyboard_mapping_keysyms_end (const xcb_get_keyboard_mapping_reply_t *R );
xcb_get_keyboard_mapping_reply_t *
xcb_get_keyboard_mapping_reply (xcb_connection_t *c ,
                                xcb_get_keyboard_mapping_cookie_t cookie ,
                                xcb_generic_error_t **e );
int
xcb_change_keyboard_control_sizeof (const void *_buffer );
xcb_void_cookie_t
xcb_change_keyboard_control_checked (xcb_connection_t *c ,
                                     uint32_t value_mask ,
                                     const uint32_t *value_list );
xcb_void_cookie_t
xcb_change_keyboard_control (xcb_connection_t *c ,
                             uint32_t value_mask ,
                             const uint32_t *value_list );
xcb_get_keyboard_control_cookie_t
xcb_get_keyboard_control (xcb_connection_t *c );
xcb_get_keyboard_control_cookie_t
xcb_get_keyboard_control_unchecked (xcb_connection_t *c );
xcb_get_keyboard_control_reply_t *
xcb_get_keyboard_control_reply (xcb_connection_t *c ,
                                xcb_get_keyboard_control_cookie_t cookie ,
                                xcb_generic_error_t **e );
xcb_void_cookie_t
xcb_bell_checked (xcb_connection_t *c ,
                  int8_t percent );
xcb_void_cookie_t
xcb_bell (xcb_connection_t *c ,
          int8_t percent );
xcb_void_cookie_t
xcb_change_pointer_control_checked (xcb_connection_t *c ,
                                    int16_t acceleration_numerator ,
                                    int16_t acceleration_denominator ,
                                    int16_t threshold ,
                                    uint8_t do_acceleration ,
                                    uint8_t do_threshold );
xcb_void_cookie_t
xcb_change_pointer_control (xcb_connection_t *c ,
                            int16_t acceleration_numerator ,
                            int16_t acceleration_denominator ,
                            int16_t threshold ,
                            uint8_t do_acceleration ,
                            uint8_t do_threshold );
xcb_get_pointer_control_cookie_t
xcb_get_pointer_control (xcb_connection_t *c );
xcb_get_pointer_control_cookie_t
xcb_get_pointer_control_unchecked (xcb_connection_t *c );
xcb_get_pointer_control_reply_t *
xcb_get_pointer_control_reply (xcb_connection_t *c ,
                               xcb_get_pointer_control_cookie_t cookie ,
                               xcb_generic_error_t **e );
xcb_void_cookie_t
xcb_set_screen_saver_checked (xcb_connection_t *c ,
                              int16_t timeout ,
                              int16_t interval ,
                              uint8_t prefer_blanking ,
                              uint8_t allow_exposures );
xcb_void_cookie_t
xcb_set_screen_saver (xcb_connection_t *c ,
                      int16_t timeout ,
                      int16_t interval ,
                      uint8_t prefer_blanking ,
                      uint8_t allow_exposures );
xcb_get_screen_saver_cookie_t
xcb_get_screen_saver (xcb_connection_t *c );
xcb_get_screen_saver_cookie_t
xcb_get_screen_saver_unchecked (xcb_connection_t *c );
xcb_get_screen_saver_reply_t *
xcb_get_screen_saver_reply (xcb_connection_t *c ,
                            xcb_get_screen_saver_cookie_t cookie ,
                            xcb_generic_error_t **e );
int
xcb_change_hosts_sizeof (const void *_buffer );
xcb_void_cookie_t
xcb_change_hosts_checked (xcb_connection_t *c ,
                          uint8_t mode ,
                          uint8_t family ,
                          uint16_t address_len ,
                          const uint8_t *address );
xcb_void_cookie_t
xcb_change_hosts (xcb_connection_t *c ,
                  uint8_t mode ,
                  uint8_t family ,
                  uint16_t address_len ,
                  const uint8_t *address );
int
xcb_host_sizeof (const void *_buffer );
uint8_t *
xcb_host_address (const xcb_host_t *R );
int
xcb_host_address_length (const xcb_host_t *R );
xcb_generic_iterator_t
xcb_host_address_end (const xcb_host_t *R );
void
xcb_host_next (xcb_host_iterator_t *i );
xcb_generic_iterator_t
xcb_host_end (xcb_host_iterator_t i );
int
xcb_list_hosts_sizeof (const void *_buffer );
xcb_list_hosts_cookie_t
xcb_list_hosts (xcb_connection_t *c );
xcb_list_hosts_cookie_t
xcb_list_hosts_unchecked (xcb_connection_t *c );
int
xcb_list_hosts_hosts_length (const xcb_list_hosts_reply_t *R );
xcb_host_iterator_t
xcb_list_hosts_hosts_iterator (const xcb_list_hosts_reply_t *R );
xcb_list_hosts_reply_t *
xcb_list_hosts_reply (xcb_connection_t *c ,
                      xcb_list_hosts_cookie_t cookie ,
                      xcb_generic_error_t **e );
xcb_void_cookie_t
xcb_set_access_control_checked (xcb_connection_t *c ,
                                uint8_t mode );
xcb_void_cookie_t
xcb_set_access_control (xcb_connection_t *c ,
                        uint8_t mode );
xcb_void_cookie_t
xcb_set_close_down_mode_checked (xcb_connection_t *c ,
                                 uint8_t mode );
xcb_void_cookie_t
xcb_set_close_down_mode (xcb_connection_t *c ,
                         uint8_t mode );
xcb_void_cookie_t
xcb_kill_client_checked (xcb_connection_t *c ,
                         uint32_t resource );
xcb_void_cookie_t
xcb_kill_client (xcb_connection_t *c ,
                 uint32_t resource );
int
xcb_rotate_properties_sizeof (const void *_buffer );
xcb_void_cookie_t
xcb_rotate_properties_checked (xcb_connection_t *c ,
                               xcb_window_t window ,
                               uint16_t atoms_len ,
                               int16_t delta ,
                               const xcb_atom_t *atoms );
xcb_void_cookie_t
xcb_rotate_properties (xcb_connection_t *c ,
                       xcb_window_t window ,
                       uint16_t atoms_len ,
                       int16_t delta ,
                       const xcb_atom_t *atoms );
xcb_void_cookie_t
xcb_force_screen_saver_checked (xcb_connection_t *c ,
                                uint8_t mode );
xcb_void_cookie_t
xcb_force_screen_saver (xcb_connection_t *c ,
                        uint8_t mode );
int
xcb_set_pointer_mapping_sizeof (const void *_buffer );
xcb_set_pointer_mapping_cookie_t
xcb_set_pointer_mapping (xcb_connection_t *c ,
                         uint8_t map_len ,
                         const uint8_t *map );
xcb_set_pointer_mapping_cookie_t
xcb_set_pointer_mapping_unchecked (xcb_connection_t *c ,
                                   uint8_t map_len ,
                                   const uint8_t *map );
xcb_set_pointer_mapping_reply_t *
xcb_set_pointer_mapping_reply (xcb_connection_t *c ,
                               xcb_set_pointer_mapping_cookie_t cookie ,
                               xcb_generic_error_t **e );
int
xcb_get_pointer_mapping_sizeof (const void *_buffer );
xcb_get_pointer_mapping_cookie_t
xcb_get_pointer_mapping (xcb_connection_t *c );
xcb_get_pointer_mapping_cookie_t
xcb_get_pointer_mapping_unchecked (xcb_connection_t *c );
uint8_t *
xcb_get_pointer_mapping_map (const xcb_get_pointer_mapping_reply_t *R );
int
xcb_get_pointer_mapping_map_length (const xcb_get_pointer_mapping_reply_t *R );
xcb_generic_iterator_t
xcb_get_pointer_mapping_map_end (const xcb_get_pointer_mapping_reply_t *R );
xcb_get_pointer_mapping_reply_t *
xcb_get_pointer_mapping_reply (xcb_connection_t *c ,
                               xcb_get_pointer_mapping_cookie_t cookie ,
                               xcb_generic_error_t **e );
int
xcb_set_modifier_mapping_sizeof (const void *_buffer );
xcb_set_modifier_mapping_cookie_t
xcb_set_modifier_mapping (xcb_connection_t *c ,
                          uint8_t keycodes_per_modifier ,
                          const xcb_keycode_t *keycodes );
xcb_set_modifier_mapping_cookie_t
xcb_set_modifier_mapping_unchecked (xcb_connection_t *c ,
                                    uint8_t keycodes_per_modifier ,
                                    const xcb_keycode_t *keycodes );
xcb_set_modifier_mapping_reply_t *
xcb_set_modifier_mapping_reply (xcb_connection_t *c ,
                                xcb_set_modifier_mapping_cookie_t cookie ,
                                xcb_generic_error_t **e );
int
xcb_get_modifier_mapping_sizeof (const void *_buffer );
xcb_get_modifier_mapping_cookie_t
xcb_get_modifier_mapping (xcb_connection_t *c );
xcb_get_modifier_mapping_cookie_t
xcb_get_modifier_mapping_unchecked (xcb_connection_t *c );
xcb_keycode_t *
xcb_get_modifier_mapping_keycodes (const xcb_get_modifier_mapping_reply_t *R );
int
xcb_get_modifier_mapping_keycodes_length (const xcb_get_modifier_mapping_reply_t *R );
xcb_generic_iterator_t
xcb_get_modifier_mapping_keycodes_end (const xcb_get_modifier_mapping_reply_t *R );
xcb_get_modifier_mapping_reply_t *
xcb_get_modifier_mapping_reply (xcb_connection_t *c ,
                                xcb_get_modifier_mapping_cookie_t cookie ,
                                xcb_generic_error_t **e );
xcb_void_cookie_t
xcb_no_operation_checked (xcb_connection_t *c );
xcb_void_cookie_t
xcb_no_operation (xcb_connection_t *c );
typedef struct xcb_auth_info_t {
    int namelen;
    char *name;
    int datalen;
    char *data;
} xcb_auth_info_t;
int xcb_flush(xcb_connection_t *c);
uint32_t xcb_get_maximum_request_length(xcb_connection_t *c);
void xcb_prefetch_maximum_request_length(xcb_connection_t *c);
xcb_generic_event_t *xcb_wait_for_event(xcb_connection_t *c);
xcb_generic_event_t *xcb_poll_for_event(xcb_connection_t *c);
xcb_generic_event_t *xcb_poll_for_queued_event(xcb_connection_t *c);
typedef struct xcb_special_event xcb_special_event_t;
xcb_generic_event_t *xcb_poll_for_special_event(xcb_connection_t *c,
                                                xcb_special_event_t *se);
xcb_generic_event_t *xcb_wait_for_special_event(xcb_connection_t *c,
                                                xcb_special_event_t *se);
typedef struct xcb_extension_t xcb_extension_t;
xcb_special_event_t *xcb_register_for_special_xge(xcb_connection_t *c,
                                                  xcb_extension_t *ext,
                                                  uint32_t eid,
                                                  uint32_t *stamp);
void xcb_unregister_for_special_event(xcb_connection_t *c,
                                      xcb_special_event_t *se);
xcb_generic_error_t *xcb_request_check(xcb_connection_t *c, xcb_void_cookie_t cookie);
void xcb_discard_reply(xcb_connection_t *c, unsigned int sequence);
void xcb_discard_reply64(xcb_connection_t *c, uint64_t sequence);
const struct xcb_query_extension_reply_t *xcb_get_extension_data(xcb_connection_t *c, xcb_extension_t *ext);
void xcb_prefetch_extension_data(xcb_connection_t *c, xcb_extension_t *ext);
const struct xcb_setup_t *xcb_get_setup(xcb_connection_t *c);
int xcb_get_file_descriptor(xcb_connection_t *c);
int xcb_connection_has_error(xcb_connection_t *c);
xcb_connection_t *xcb_connect_to_fd(int fd, xcb_auth_info_t *auth_info);
void xcb_disconnect(xcb_connection_t *c);
int xcb_parse_display(const char *name, char **host, int *display, int *screen);
xcb_connection_t *xcb_connect(const char *displayname, int *screenp);
xcb_connection_t *xcb_connect_to_display_with_auth_info(const char *display, xcb_auth_info_t *auth, int *screen);
uint32_t xcb_generate_id(xcb_connection_t *c);
xcb_connection_t *XGetXCBConnection(Display *dpy);
enum XEventQueueOwner { XlibOwnsEventQueue = 0, XCBOwnsEventQueue };
void XSetEventQueueOwner(Display *dpy, enum XEventQueueOwner owner);
enum
{
  NO_BREAK_SPACE = 0x00A0,
  SOFT_HYPHEN = 0x00AD,
  ZERO_WIDTH_NON_JOINER = 0x200C,
  ZERO_WIDTH_JOINER = 0x200D,
  HYPHEN = 0x2010,
  NON_BREAKING_HYPHEN = 0x2011,
  LEFT_SINGLE_QUOTATION_MARK = 0x2018,
  RIGHT_SINGLE_QUOTATION_MARK = 0x2019,
  PARAGRAPH_SEPARATOR = 0x2029,
  LEFT_POINTING_ANGLE_BRACKET = 0x2329,
  RIGHT_POINTING_ANGLE_BRACKET = 0x232A,
  LEFT_ANGLE_BRACKET = 0x3008,
  RIGHT_ANGLE_BRACKET = 0x3009,
  OBJECT_REPLACEMENT_CHARACTER = 0xFFFC,
};
inline int
sanitize_tab_width (EMACS_INT width)
{
  return 0 < width && width <= 1000 ? width : 8;
}
inline int
sanitize_char_width (EMACS_INT width)
{
  return 0 <= width && width <= 1000 ? width : 1000;
}
inline 
      _Bool
char_surrogate_p (int c)
{
  return 0xD800 <= c && c <= 0xDFFF;
}
typedef enum {
  UNICODE_CATEGORY_UNKNOWN = 0,
  UNICODE_CATEGORY_Lu,
  UNICODE_CATEGORY_Ll,
  UNICODE_CATEGORY_Lt,
  UNICODE_CATEGORY_Lm,
  UNICODE_CATEGORY_Lo,
  UNICODE_CATEGORY_Mn,
  UNICODE_CATEGORY_Mc,
  UNICODE_CATEGORY_Me,
  UNICODE_CATEGORY_Nd,
  UNICODE_CATEGORY_Nl,
  UNICODE_CATEGORY_No,
  UNICODE_CATEGORY_Pc,
  UNICODE_CATEGORY_Pd,
  UNICODE_CATEGORY_Ps,
  UNICODE_CATEGORY_Pe,
  UNICODE_CATEGORY_Pi,
  UNICODE_CATEGORY_Pf,
  UNICODE_CATEGORY_Po,
  UNICODE_CATEGORY_Sm,
  UNICODE_CATEGORY_Sc,
  UNICODE_CATEGORY_Sk,
  UNICODE_CATEGORY_So,
  UNICODE_CATEGORY_Zs,
  UNICODE_CATEGORY_Zl,
  UNICODE_CATEGORY_Zp,
  UNICODE_CATEGORY_Cc,
  UNICODE_CATEGORY_Cf,
  UNICODE_CATEGORY_Cs,
  UNICODE_CATEGORY_Co,
  UNICODE_CATEGORY_Cn
} unicode_category_t;
extern EMACS_INT char_resolve_modifier_mask (EMACS_INT) __attribute__ ((__const__));
extern int char_string (unsigned, unsigned char *);
extern int string_char (const unsigned char *,
                        const unsigned char **, int *);
extern int translate_char (Lisp_Object, int c);
extern ptrdiff_t count_size_as_multibyte (const unsigned char *, ptrdiff_t);
extern ptrdiff_t str_as_multibyte (unsigned char *, ptrdiff_t, ptrdiff_t,
       ptrdiff_t *);
extern ptrdiff_t str_to_multibyte (unsigned char *, ptrdiff_t, ptrdiff_t);
extern ptrdiff_t str_as_unibyte (unsigned char *, ptrdiff_t);
extern ptrdiff_t str_to_unibyte (const unsigned char *, unsigned char *,
                                 ptrdiff_t);
extern ptrdiff_t strwidth (const char *, ptrdiff_t);
extern ptrdiff_t c_string_width (const unsigned char *, ptrdiff_t, int,
     ptrdiff_t *, ptrdiff_t *);
extern ptrdiff_t lisp_string_width (Lisp_Object, ptrdiff_t,
        ptrdiff_t *, ptrdiff_t *);
extern Lisp_Object Vchar_unify_table;
extern Lisp_Object string_escape_byte8 (Lisp_Object);
extern 
      _Bool 
           alphabeticp (int);
extern 
      _Bool 
           alphanumericp (int);
extern 
      _Bool 
           graphicp (int);
extern 
      _Bool 
           printablep (int);
extern 
      _Bool 
           blankp (int);
extern 
      _Bool 
           confusable_symbol_character_p (int ch);
inline int
char_table_translate (Lisp_Object obj, int ch)
{
  ((void) (
 0 
 && ((((sizeof ((ch) + 0)) > (sizeof ((0x3FFFFF) + 0)) ? (sizeof ((ch) + 0)) : (sizeof ((0x3FFFFF) + 0))) <= sizeof (unsigned) ? ((ch) + (unsigned) 0) <= ((0x3FFFFF) + (unsigned) 0) : ((ch) + (uintmax_t) 0) <= ((0x3FFFFF) + (uintmax_t) 0)))));
  ((void) (
 0 
 && (CHAR_TABLE_P (obj))));
  obj = CHAR_TABLE_REF (obj, ch);
  return (NATNUMP (obj) && XFASTINT (obj) <= 0x3FFFFF) ? XINT (obj) : ch;
}
extern signed char const hexdigit[];
inline int
char_hexdigit (int c)
{
  return 0 <= c && c <= 
                       (0x7f * 2 + 1) 
                                 ? hexdigit[c] : -1;
}
extern int c_strcasecmp (const char *s1, const char *s2) 
                                                        __attribute__ ((__pure__))
                                                                          ;
extern int c_strncasecmp (const char *s1, const char *s2, size_t n)
 __attribute__ ((__pure__))
                   ;
inline int
xstrcasecmp (char const *a, char const *b)
{
  return c_strcasecmp (a, b);
}
typedef struct x_display_info Display_Info;
typedef XImage * XImagePtr;
typedef XImagePtr XImagePtr_or_DC;
struct face;
extern void free_face_fontset (struct frame *, struct face *);
extern int face_for_char (struct frame *, struct face *, int,
                          ptrdiff_t, Lisp_Object);
extern Lisp_Object font_for_char (struct face *, int, ptrdiff_t, Lisp_Object);
extern int make_fontset_for_ascii_face (struct frame *, int, struct face *);
extern int fontset_from_font (Lisp_Object);
extern int fs_query_fontset (Lisp_Object, int);
extern Lisp_Object list_fontsets (struct frame *, Lisp_Object, int);
extern Lisp_Object fontset_name (int);
extern Lisp_Object fontset_ascii (int);
extern int face_for_font (struct frame *, Lisp_Object, struct face *);
enum text_cursor_kinds
{
  DEFAULT_CURSOR = -2,
  NO_CURSOR = -1,
  FILLED_BOX_CURSOR,
  HOLLOW_BOX_CURSOR,
  BAR_CURSOR,
  HBAR_CURSOR
};
enum window_part
{
  ON_NOTHING,
  ON_TEXT,
  ON_MODE_LINE,
  ON_VERTICAL_BORDER,
  ON_HEADER_LINE,
  ON_LEFT_FRINGE,
  ON_RIGHT_FRINGE,
  ON_LEFT_MARGIN,
  ON_RIGHT_MARGIN,
  ON_VERTICAL_SCROLL_BAR,
  ON_HORIZONTAL_SCROLL_BAR,
  ON_RIGHT_DIVIDER,
  ON_BOTTOM_DIVIDER
};
struct text_pos
{
  ptrdiff_t charpos;
  ptrdiff_t bytepos;
};
struct display_pos
{
  struct text_pos pos;
  ptrdiff_t overlay_string_index;
  struct text_pos string_pos;
  int dpvec_index;
};
typedef struct {
  int ch;
  int face_id;
} GLYPH;
inline int GLYPH_CHAR (GLYPH glyph) { return glyph.ch; }
inline int GLYPH_FACE (GLYPH glyph) { return glyph.face_id; }
inline int
GLYPH_CODE_CHAR (Lisp_Object gc)
{
  return (CONSP (gc)
   ? XINT (XCAR (gc))
   : XINT (gc) & 0x3FFFFF);
}
inline int
GLYPH_CODE_FACE (Lisp_Object gc)
{
  return CONSP (gc) ? XINT (XCDR (gc)) : XINT (gc) >> CHARACTERBITS;
}
enum { GLYPH_MODE_LINE_FACE = 1 };
enum glyph_type
{
  CHAR_GLYPH,
  COMPOSITE_GLYPH,
  GLYPHLESS_GLYPH,
  IMAGE_GLYPH,
  STRETCH_GLYPH,
  XWIDGET_GLYPH
};
struct glyph_slice
{
  unsigned x : 16;
  unsigned y : 16;
  unsigned width : 16;
  unsigned height : 16;
};
struct glyph
{
  ptrdiff_t charpos;
  Lisp_Object object;
  short pixel_width;
  short ascent, descent;
  short voffset;
  unsigned type : 3;
  bool_bf multibyte_p : 1;
  bool_bf left_box_line_p : 1;
  bool_bf right_box_line_p : 1;
  bool_bf overlaps_vertically_p : 1;
  bool_bf padding_p : 1;
  bool_bf glyph_not_available_p : 1;
  bool_bf avoid_cursor_p : 1;
  unsigned resolved_level : 7;
  unsigned bidi_type : 3;
  unsigned face_id : 20;
  unsigned font_type : 3;
  union
  {
    struct glyph_slice img;
    struct { int from, to; } cmp;
    struct {
      short upper_xoff, upper_yoff;
      short lower_xoff, lower_yoff;
    } glyphless;
  } slice;
  union
  {
    unsigned ch;
    struct
    {
      bool_bf automatic : 1;
      unsigned id : 31;
    } cmp;
    int img_id;
    struct
    {
      unsigned height : 16;
      unsigned ascent : 16;
    }
    stretch;
    struct
    {
      unsigned method : 2;
      bool_bf for_no_font : 1;
      unsigned len : 4;
      unsigned ch : 25;
    } glyphless;
    unsigned val;
  } u;
};
struct glyph_pool
{
  struct glyph *glyphs;
  ptrdiff_t nglyphs;
  int nrows, ncolumns;
};
struct glyph_matrix
{
  struct glyph_pool *pool;
  struct glyph_row *rows;
  ptrdiff_t rows_allocated;
  int nrows;
  int matrix_x, matrix_y;
  int matrix_w, matrix_h;
  int window_pixel_left, window_pixel_top;
  int window_height, window_width;
  int window_vscroll;
  int left_margin_glyphs, right_margin_glyphs;
  bool_bf no_scrolling_p : 1;
  bool_bf header_line_p : 1;
  struct buffer *buffer;
  ptrdiff_t begv, zv;
};
enum glyph_row_area
{
  ANY_AREA = -1,
  LEFT_MARGIN_AREA,
  TEXT_AREA,
  RIGHT_MARGIN_AREA,
  LAST_AREA
};
struct glyph_row
{
  struct glyph *glyphs[1 + LAST_AREA];
  short used[1 + LAST_AREA];
  unsigned hash;
  int x, y;
  int pixel_width;
  int ascent, height;
  int phys_ascent, phys_height;
  int visible_height;
  int extra_line_spacing;
  struct display_pos start;
  struct display_pos end;
  struct text_pos minpos, maxpos;
  int overlay_arrow_bitmap;
  unsigned left_user_fringe_bitmap : 16;
  unsigned right_user_fringe_bitmap : 16;
  unsigned left_fringe_bitmap : 16;
  unsigned right_fringe_bitmap : 16;
  unsigned left_user_fringe_face_id : 20;
  unsigned right_user_fringe_face_id : 20;
  unsigned left_fringe_face_id : 20;
  unsigned right_fringe_face_id : 20;
  signed left_fringe_offset : 8;
  signed right_fringe_offset : 8;
  bool_bf fringe_bitmap_periodic_p : 1;
  bool_bf redraw_fringe_bitmaps_p : 1;
  bool_bf enabled_p : 1;
  bool_bf truncated_on_left_p : 1;
  bool_bf truncated_on_right_p : 1;
  bool_bf continued_p : 1;
  bool_bf displays_text_p : 1;
  bool_bf ends_at_zv_p : 1;
  bool_bf fill_line_p : 1;
  bool_bf indicate_empty_line_p : 1;
  bool_bf contains_overlapping_glyphs_p : 1;
  bool_bf full_width_p : 1;
  bool_bf mode_line_p : 1;
  bool_bf overlapped_p : 1;
  bool_bf ends_in_middle_of_char_p : 1;
  bool_bf starts_in_middle_of_char_p : 1;
  bool_bf overlapping_p : 1;
  bool_bf mouse_face_p : 1;
  bool_bf ends_in_newline_from_string_p : 1;
  bool_bf exact_window_width_line_p : 1;
  bool_bf cursor_in_fringe_p : 1;
  bool_bf ends_in_ellipsis_p : 1;
  bool_bf indicate_bob_p : 1;
  bool_bf indicate_top_line_p : 1;
  bool_bf indicate_eob_p : 1;
  bool_bf indicate_bottom_line_p : 1;
  bool_bf reversed_p : 1;
  int continuation_lines_width;
  XRectangle *clip;
};
extern struct glyph space_glyph;
extern 
      _Bool 
           display_completed;
enum draw_glyphs_face
{
  DRAW_NORMAL_TEXT,
  DRAW_INVERSE_VIDEO,
  DRAW_CURSOR,
  DRAW_MOUSE_FACE,
  DRAW_IMAGE_RAISED,
  DRAW_IMAGE_SUNKEN
};
struct glyph_string
{
  int x;
  int y, ybase;
  int width;
  int background_width;
  int height;
  int left_overhang;
  int right_overhang;
  struct frame *f;
  struct window *w;
  Display *display;
  struct glyph_row *row;
  enum glyph_row_area area;
  XChar2b *char2b;
  int nchars;
  enum draw_glyphs_face hl;
  struct face *face;
  struct font *font;
  struct composition *cmp;
  ptrdiff_t cmp_id;
  int cmp_from, cmp_to;
  bool_bf extends_to_end_of_line_p : 1;
  bool_bf background_filled_p : 1;
  bool_bf font_not_found_p : 1;
  bool_bf stippled_p : 1;
  unsigned for_overlaps : 3;
  bool_bf padding_p : 1;
  GC gc;
  struct glyph *first_glyph;
  struct image *img;
  struct xwidget *xwidget;
  struct glyph_slice slice;
  struct glyph_string *clip_head, *clip_tail;
  XRectangle clip[2];
  int num_clips;
  int underline_position;
  int underline_thickness;
  struct glyph_string *next, *prev;
};
enum lface_attribute_index
{
  LFACE_FAMILY_INDEX = 1,
  LFACE_FOUNDRY_INDEX,
  LFACE_SWIDTH_INDEX,
  LFACE_HEIGHT_INDEX,
  LFACE_WEIGHT_INDEX,
  LFACE_SLANT_INDEX,
  LFACE_UNDERLINE_INDEX,
  LFACE_INVERSE_INDEX,
  LFACE_FOREGROUND_INDEX,
  LFACE_BACKGROUND_INDEX,
  LFACE_STIPPLE_INDEX,
  LFACE_OVERLINE_INDEX,
  LFACE_STRIKE_THROUGH_INDEX,
  LFACE_BOX_INDEX,
  LFACE_FONT_INDEX,
  LFACE_INHERIT_INDEX,
  LFACE_FONTSET_INDEX,
  LFACE_DISTANT_FOREGROUND_INDEX,
  LFACE_VECTOR_SIZE
};
enum face_box_type
{
  FACE_NO_BOX,
  FACE_SIMPLE_BOX,
  FACE_RAISED_BOX,
  FACE_SUNKEN_BOX
};
enum face_underline_type
{
  FACE_UNDER_LINE,
  FACE_UNDER_WAVE
};
struct face
{
  Lisp_Object lface[LFACE_VECTOR_SIZE];
  int id;
  GC gc;
  ptrdiff_t stipple;
  unsigned long foreground;
  unsigned long background;
  unsigned long underline_color;
  unsigned long overline_color;
  unsigned long strike_through_color;
  unsigned long box_color;
  struct font *font;
  int fontset;
  int box_line_width;
  enum face_box_type box : 2;
  enum face_underline_type underline_type : 1;
  bool_bf use_box_color_for_shadows_p : 1;
  bool_bf underline_p : 1;
  bool_bf overline_p : 1;
  bool_bf strike_through_p : 1;
  bool_bf foreground_defaulted_p : 1;
  bool_bf background_defaulted_p : 1;
  bool_bf underline_defaulted_p : 1;
  bool_bf overline_color_defaulted_p : 1;
  bool_bf strike_through_color_defaulted_p : 1;
  bool_bf box_color_defaulted_p : 1;
  bool_bf tty_bold_p : 1;
  bool_bf tty_italic_p : 1;
  bool_bf tty_underline_p : 1;
  bool_bf tty_reverse_p : 1;
  bool_bf colors_copied_bitwise_p : 1;
  bool_bf overstrike : 1;
  unsigned hash;
  struct face *next, *prev;
  struct face *ascii_face;
  void *extra;
};
inline 
      _Bool
face_tty_specified_color (unsigned long color)
{
  return color < ((unsigned long) -3);
}
enum face_id
{
  DEFAULT_FACE_ID,
  MODE_LINE_FACE_ID,
  MODE_LINE_INACTIVE_FACE_ID,
  TOOL_BAR_FACE_ID,
  FRINGE_FACE_ID,
  HEADER_LINE_FACE_ID,
  SCROLL_BAR_FACE_ID,
  BORDER_FACE_ID,
  CURSOR_FACE_ID,
  MOUSE_FACE_ID,
  MENU_FACE_ID,
  VERTICAL_BORDER_FACE_ID,
  WINDOW_DIVIDER_FACE_ID,
  WINDOW_DIVIDER_FIRST_PIXEL_FACE_ID,
  WINDOW_DIVIDER_LAST_PIXEL_FACE_ID,
  INTERNAL_BORDER_FACE_ID,
  BASIC_FACE_ID_SENTINEL
};
struct face_cache
{
  struct face **buckets;
  struct frame *f;
  struct face **faces_by_id;
  ptrdiff_t size;
  int used;
  bool_bf menu_face_changed_p : 1;
};
inline 
      _Bool
FACE_SUITABLE_FOR_ASCII_CHAR_P (struct face *face)
{
  return face == face->ascii_face;
}
inline int
FACE_FOR_CHAR (struct frame *f, struct face *face, int character,
        ptrdiff_t pos, Lisp_Object object)
{
  return face_for_char (f, face, character, pos, object);
}
inline 
      _Bool
GLYPH_CHAR_VALID_P (GLYPH g)
{
  return (((sizeof ((GLYPH_CHAR (g)) + 0)) > (sizeof ((0x3FFFFF) + 0)) ? (sizeof ((GLYPH_CHAR (g)) + 0)) : (sizeof ((0x3FFFFF) + 0))) <= sizeof (unsigned) ? ((GLYPH_CHAR (g)) + (unsigned) 0) <= ((0x3FFFFF) + (unsigned) 0) : ((GLYPH_CHAR (g)) + (uintmax_t) 0) <= ((0x3FFFFF) + (uintmax_t) 0));
}
inline 
      _Bool
GLYPH_CODE_P (Lisp_Object gc)
{
  return (CONSP (gc)
   ? ((NATNUMP (XCAR (gc)) && XFASTINT (XCAR (gc)) <= 0x3FFFFF)
      && RANGED_INTEGERP (0, XCDR (gc), ((1 << 20) - 1)))
   : (RANGED_INTEGERP
      (0, gc,
       (((1 << 20) - 1) < ((EMACS_INT) (! (! ((EMACS_INT) 0 < (EMACS_INT) -1)) ? (EMACS_INT) -1 : ((((EMACS_INT) 1 << ((sizeof (EMACS_INT) * 8) - 2)) - 1) * 2 + 1))) >> CHARACTERBITS
        ? ((EMACS_INT) ((1 << 20) - 1) << CHARACTERBITS) | 0x3FFFFF
        : ((EMACS_INT) (! (! ((EMACS_INT) 0 < (EMACS_INT) -1)) ? (EMACS_INT) -1 : ((((EMACS_INT) 1 << ((sizeof (EMACS_INT) * 8) - 2)) - 1) * 2 + 1)))))));
}
extern 
      _Bool 
           face_change;
typedef enum {
  UNKNOWN_BT = 0,
  STRONG_L,
  STRONG_R,
  WEAK_EN,
  WEAK_AN,
  WEAK_BN,
  NEUTRAL_B,
  STRONG_AL,
  LRE,
  LRO,
  RLE,
  RLO,
  PDF,
  LRI,
  RLI,
  FSI,
  PDI,
  WEAK_ES,
  WEAK_ET,
  WEAK_CS,
  WEAK_NSM,
  NEUTRAL_S,
  NEUTRAL_WS,
  NEUTRAL_ON
} bidi_type_t;
typedef enum {
  BIDI_BRACKET_NONE = 1,
  BIDI_BRACKET_OPEN,
  BIDI_BRACKET_CLOSE
} bidi_bracket_type_t;
typedef enum { NEUTRAL_DIR = 0, L2R, R2L } bidi_dir_t;
struct bidi_saved_info {
  ptrdiff_t charpos;
  bidi_type_t type;
  bidi_type_t orig_type;
};
struct bidi_stack {
  ptrdiff_t next_for_neutral_pos;
  unsigned next_for_neutral_type : 3;
  unsigned last_strong_type : 3;
  unsigned prev_for_neutral_type : 3;
  unsigned char level;
  unsigned char flags;
};
struct bidi_string_data {
  Lisp_Object lstring;
  const unsigned char *s;
  ptrdiff_t schars;
  ptrdiff_t bufpos;
  bool_bf from_disp_str : 1;
  bool_bf unibyte : 1;
};
struct bidi_it {
  ptrdiff_t bytepos;
  ptrdiff_t charpos;
  int ch;
  ptrdiff_t nchars;
  ptrdiff_t ch_len;
  bidi_type_t type;
  bidi_type_t type_after_wn;
  bidi_type_t orig_type;
  signed char resolved_level;
  signed char isolate_level;
  ptrdiff_t invalid_levels;
  ptrdiff_t invalid_isolates;
  struct bidi_saved_info prev;
  struct bidi_saved_info last_strong;
  struct bidi_saved_info next_for_neutral;
  struct bidi_saved_info prev_for_neutral;
  struct bidi_saved_info next_for_ws;
  ptrdiff_t bracket_pairing_pos;
  bidi_type_t bracket_enclosed_type;
  ptrdiff_t next_en_pos;
  bidi_type_t next_en_type;
  bidi_dir_t sos;
  int scan_dir;
  ptrdiff_t disp_pos;
  int disp_prop;
  int stack_idx;
  struct bidi_stack level_stack[125 +2+1];
  struct bidi_string_data string;
  struct window *w;
  bidi_dir_t paragraph_dir;
  ptrdiff_t separator_limit;
  bool_bf first_elt : 1;
  bool_bf new_paragraph : 1;
  bool_bf frame_window_p : 1;
};
struct draw_fringe_bitmap_params
{
  int which;
  unsigned short *bits;
  int wd, h, dh;
  int x, y;
  int bx, nx, by, ny;
  bool_bf cursor_p : 1;
  bool_bf overlay_p : 1;
  struct face *face;
};
enum display_element_type
{
  IT_CHARACTER,
  IT_COMPOSITION,
  IT_GLYPHLESS,
  IT_IMAGE,
  IT_STRETCH,
  IT_EOB,
  IT_TRUNCATION,
  IT_CONTINUATION,
  IT_XWIDGET
};
enum prop_idx
{
  FONTIFIED_PROP_IDX,
  FACE_PROP_IDX,
  INVISIBLE_PROP_IDX,
  DISPLAY_PROP_IDX,
  COMPOSITION_PROP_IDX,
  OVERLAY_PROP_IDX,
  LAST_PROP_IDX
};
enum line_wrap_method
{
  TRUNCATE,
  WORD_WRAP,
  WINDOW_WRAP
};
enum glyphless_display_method
  {
    GLYPHLESS_DISPLAY_THIN_SPACE,
    GLYPHLESS_DISPLAY_EMPTY_BOX,
    GLYPHLESS_DISPLAY_ACRONYM,
    GLYPHLESS_DISPLAY_HEX_CODE
  };
struct it_slice
{
  Lisp_Object x;
  Lisp_Object y;
  Lisp_Object width;
  Lisp_Object height;
};
enum it_method {
  GET_FROM_BUFFER = 0,
  GET_FROM_DISPLAY_VECTOR,
  GET_FROM_STRING,
  GET_FROM_C_STRING,
  GET_FROM_IMAGE,
  GET_FROM_STRETCH,
  GET_FROM_XWIDGET,
  NUM_IT_METHODS
};
struct composition_it
{
  ptrdiff_t stop_pos;
  ptrdiff_t id;
  int ch;
  EMACS_INT rule_idx;
  ptrdiff_t lookback;
  int nglyphs;
 _Bool 
      reversed_p;
  ptrdiff_t charpos;
  int nchars, nbytes;
  int from, to;
  int width;
};
struct it
{
  Lisp_Object window;
  struct window *w;
  struct frame *f;
  enum it_method method;
  ptrdiff_t stop_charpos;
  ptrdiff_t prev_stop;
  ptrdiff_t base_level_stop;
  ptrdiff_t end_charpos;
  const unsigned char *s;
  ptrdiff_t string_nchars;
  ptrdiff_t redisplay_end_trigger_charpos;
  bool_bf multibyte_p : 1;
  bool_bf header_line_p : 1;
  bool_bf string_from_display_prop_p : 1;
  bool_bf string_from_prefix_prop_p : 1;
  bool_bf from_disp_prop_p : 1;
  bool_bf ellipsis_p : 1;
  bool_bf avoid_cursor_p : 1;
  struct Lisp_Char_Table *dp;
  Lisp_Object *dpvec, *dpend;
  int dpvec_char_len;
  int dpvec_face_id;
  int saved_face_id;
  Lisp_Object ctl_chars[16];
  struct display_pos start;
  struct display_pos current;
  ptrdiff_t n_overlay_strings;
  ptrdiff_t overlay_strings_charpos;
  Lisp_Object overlay_strings[16];
  Lisp_Object string_overlays[16];
  Lisp_Object string;
  Lisp_Object from_overlay;
  struct iterator_stack_entry
  {
    Lisp_Object string;
    int string_nchars;
    ptrdiff_t end_charpos;
    ptrdiff_t stop_charpos;
    ptrdiff_t prev_stop;
    ptrdiff_t base_level_stop;
    struct composition_it cmp_it;
    int face_id;
    union {
      struct {
 Lisp_Object object;
 struct it_slice slice;
 ptrdiff_t image_id;
      } image;
      struct {
 Lisp_Object object;
      } stretch;
      struct {
 Lisp_Object object;
      } xwidget;
    } u;
    struct text_pos position;
    struct display_pos current;
    Lisp_Object from_overlay;
    enum glyph_row_area area;
    enum it_method method;
    bidi_dir_t paragraph_embedding;
    bool_bf multibyte_p : 1;
    bool_bf string_from_display_prop_p : 1;
    bool_bf string_from_prefix_prop_p : 1;
    bool_bf display_ellipsis_p : 1;
    bool_bf avoid_cursor_p : 1;
    bool_bf bidi_p : 1;
    bool_bf from_disp_prop_p : 1;
    enum line_wrap_method line_wrap;
    short voffset;
    Lisp_Object space_width;
    Lisp_Object font_height;
  }
  stack[5];
  int sp;
  ptrdiff_t selective;
  enum display_element_type what;
  int face_id;
  bool_bf selective_display_ellipsis_p : 1;
  bool_bf ctl_arrow_p : 1;
  bool_bf face_box_p : 1;
  bool_bf start_of_box_run_p : 1;
  bool_bf end_of_box_run_p : 1;
  bool_bf overlay_strings_at_end_processed_p : 1;
  bool_bf ignore_overlay_strings_at_pos_p : 1;
  bool_bf glyph_not_available_p : 1;
  bool_bf starts_in_middle_of_char_p : 1;
  bool_bf face_before_selective_p : 1;
  bool_bf constrain_row_ascent_descent_p : 1;
  bool_bf line_number_produced_p : 1;
  enum line_wrap_method line_wrap;
  int base_face_id;
  int c, len;
  struct composition_it cmp_it;
  int char_to_display;
  enum glyphless_display_method glyphless_method;
  ptrdiff_t image_id;
  struct xwidget *xwidget;
  struct it_slice slice;
  Lisp_Object space_width;
  short voffset;
  short tab_width;
  Lisp_Object font_height;
  Lisp_Object object;
  struct text_pos position;
  short truncation_pixel_width, continuation_pixel_width;
  int first_visible_x, last_visible_x;
  int last_visible_y;
  int extra_line_spacing;
  int max_extra_line_spacing;
  int override_ascent, override_descent, override_boff;
  struct glyph_row *glyph_row;
  enum glyph_row_area area;
  int nglyphs;
  int pixel_width;
  int ascent, descent, max_ascent, max_descent;
  int phys_ascent, phys_descent, max_phys_ascent, max_phys_descent;
  int current_x;
  int continuation_lines_width;
  struct text_pos eol_pos;
  int current_y;
  int first_vpos;
  int vpos;
  int hpos;
  ptrdiff_t lnum;
  ptrdiff_t lnum_bytepos;
  int lnum_width;
  int lnum_pixel_width;
  ptrdiff_t pt_lnum;
  int tab_offset;
  unsigned left_user_fringe_bitmap : 16;
  unsigned right_user_fringe_bitmap : 16;
  unsigned left_user_fringe_face_id : 20;
  unsigned right_user_fringe_face_id : 20;
  bool_bf bidi_p : 1;
  struct bidi_it bidi_it;
  bidi_dir_t paragraph_embedding;
};
enum move_operation_enum
{
  MOVE_TO_X = 0x01,
  MOVE_TO_Y = 0x02,
  MOVE_TO_VPOS = 0x04,
  MOVE_TO_POS = 0x08
};
typedef struct {
  int mouse_face_beg_row, mouse_face_beg_col, mouse_face_beg_x;
  int mouse_face_end_row, mouse_face_end_col, mouse_face_end_x;
  Lisp_Object mouse_face_window;
  int mouse_face_face_id;
  Lisp_Object mouse_face_overlay;
  struct frame *mouse_face_mouse_frame;
  int mouse_face_mouse_x, mouse_face_mouse_y;
  bool_bf mouse_face_past_end : 1;
  bool_bf mouse_face_defer : 1;
  bool_bf mouse_face_hidden : 1;
} Mouse_HLInfo;
inline void
reset_mouse_highlight (Mouse_HLInfo *hlinfo)
{
    hlinfo->mouse_face_beg_row = hlinfo->mouse_face_beg_col = -1;
    hlinfo->mouse_face_end_row = hlinfo->mouse_face_end_col = -1;
    hlinfo->mouse_face_mouse_x = hlinfo->mouse_face_mouse_y = 0;
    hlinfo->mouse_face_beg_x = hlinfo->mouse_face_end_x = 0;
    hlinfo->mouse_face_face_id = DEFAULT_FACE_ID;
    hlinfo->mouse_face_mouse_frame = 
                                    ((void *)0)
                                        ;
    hlinfo->mouse_face_window = builtin_lisp_symbol (0);
    hlinfo->mouse_face_overlay = builtin_lisp_symbol (0);
    hlinfo->mouse_face_past_end = 
                                 0
                                      ;
    hlinfo->mouse_face_hidden = 
                               0
                                    ;
    hlinfo->mouse_face_defer = 
                              0
                                   ;
}
struct run
{
  int desired_y, current_y;
  int desired_vpos, current_vpos;
  int height, nrows;
};
typedef void (*frame_parm_handler) (struct frame *, Lisp_Object, Lisp_Object);
struct redisplay_interface
{
  frame_parm_handler *frame_parm_handlers;
  void (*produce_glyphs) (struct it *it);
  void (*write_glyphs) (struct window *w, struct glyph_row *row,
   struct glyph *string, enum glyph_row_area area,
   int len);
  void (*insert_glyphs) (struct window *w, struct glyph_row *row,
    struct glyph *start, enum glyph_row_area area,
    int len);
  void (*clear_end_of_line) (struct window *w, struct glyph_row *row,
        enum glyph_row_area area, int x);
  void (*scroll_run_hook) (struct window *w, struct run *run);
  void (*after_update_window_line_hook) (struct window *w,
      struct glyph_row *desired_row);
  void (*update_window_begin_hook) (struct window *w);
  void (*update_window_end_hook) (struct window *w, 
                                                   _Bool 
                                                        cursor_on_p,
                                 _Bool 
                                      mouse_face_overwritten_p);
  void (*flush_display) (struct frame *f);
  void (*clear_window_mouse_face) (struct window *w);
  void (*get_glyph_overhangs) (struct glyph *glyph, struct frame *f,
                               int *left, int *right);
  void (*fix_overlapping_area) (struct window *w, struct glyph_row *row,
                                enum glyph_row_area area, int);
  void (*draw_fringe_bitmap) (struct window *w, struct glyph_row *row,
                              struct draw_fringe_bitmap_params *p);
  void (*define_fringe_bitmap) (int which, unsigned short *bits,
                                int h, int wd);
  void (*destroy_fringe_bitmap) (int which);
  void (*compute_glyph_string_overhangs) (struct glyph_string *s);
  void (*draw_glyph_string) (struct glyph_string *s);
  void (*define_frame_cursor) (struct frame *f, Cursor cursor);
  void (*clear_frame_area) (struct frame *f, int x, int y,
                            int width, int height);
  void (*draw_window_cursor) (struct window *w,
         struct glyph_row *glyph_row,
         int x, int y,
         enum text_cursor_kinds cursor_type,
         int cursor_width, 
                          _Bool 
                               on_p, 
                                     _Bool 
                                          active_p);
  void (*draw_vertical_window_border) (struct window *w,
                                       int x, int y_0, int y_1);
  void (*draw_window_divider) (struct window *w,
          int x_0, int x_1, int y_0, int y_1);
  void (*shift_glyphs_for_insert) (struct frame *f,
                                   int x, int y, int width,
                                   int height, int shift_by);
  void (*show_hourglass) (struct frame *f);
  void (*hide_hourglass) (struct frame *f);
};
struct image_type
{
  int type;
 _Bool 
      (* valid_p) (Lisp_Object spec);
 _Bool 
      (* load) (struct frame *f, struct image *img);
  void (* free) (struct frame *f, struct image *img);
 _Bool 
      (* init) (void);
  struct image_type *next;
};
struct image
{
  struct timespec timestamp;
  Pixmap pixmap, mask;
  XImagePtr ximg, mask_img;
  unsigned long *colors;
  int ncolors;
  unsigned long background;
  unsigned long frame_foreground, frame_background;
  bool_bf background_transparent : 1;
  bool_bf background_valid : 1, background_transparent_valid : 1;
  int width, height;
  int corners[4];
  int ascent;
  Lisp_Object spec;
  Lisp_Object dependencies;
  int relief;
  int hmargin, vmargin;
  struct image_type *type;
 _Bool 
      load_failed_p;
  Lisp_Object lisp_data;
  EMACS_UINT hash;
  ptrdiff_t id;
  struct image *next, *prev;
};
struct image_cache
{
  struct image **buckets;
  struct image **images;
  ptrdiff_t size;
  ptrdiff_t used;
  ptrdiff_t refcount;
};
enum tool_bar_item_idx
{
  TOOL_BAR_ITEM_KEY,
  TOOL_BAR_ITEM_ENABLED_P,
  TOOL_BAR_ITEM_SELECTED_P,
  TOOL_BAR_ITEM_CAPTION,
  TOOL_BAR_ITEM_IMAGES,
  TOOL_BAR_ITEM_BINDING,
  TOOL_BAR_ITEM_TYPE,
  TOOL_BAR_ITEM_HELP,
  TOOL_BAR_ITEM_RTL_IMAGE,
  TOOL_BAR_ITEM_LABEL,
  TOOL_BAR_ITEM_VERT_ONLY,
  TOOL_BAR_ITEM_NSLOTS
};
enum tool_bar_item_image
{
  TOOL_BAR_IMAGE_ENABLED_SELECTED,
  TOOL_BAR_IMAGE_ENABLED_DESELECTED,
  TOOL_BAR_IMAGE_DISABLED_SELECTED,
  TOOL_BAR_IMAGE_DISABLED_DESELECTED
};
extern void bidi_init_it (ptrdiff_t, ptrdiff_t, 
                                               _Bool
                                                   , struct bidi_it *);
extern void bidi_move_to_visually_next (struct bidi_it *);
extern void bidi_paragraph_init (bidi_dir_t, struct bidi_it *, 
                                                              _Bool
                                                                  );
extern int bidi_mirror_char (int);
extern void bidi_push_it (struct bidi_it *);
extern void bidi_pop_it (struct bidi_it *);
extern void *bidi_shelve_cache (void);
extern void bidi_unshelve_cache (void *, 
                                        _Bool
                                            );
extern ptrdiff_t bidi_find_first_overridden (struct bidi_it *);
struct glyph_row *row_containing_pos (struct window *, ptrdiff_t,
                                      struct glyph_row *,
                                      struct glyph_row *, int);
int line_bottom_y (struct it *);
int default_line_pixel_height (struct window *);
_Bool 
    display_prop_intangible_p (Lisp_Object, Lisp_Object, ptrdiff_t, ptrdiff_t);
void resize_echo_area_exactly (void);
_Bool 
    resize_mini_window (struct window *, 
                                         _Bool
                                             );
void set_vertical_scroll_bar (struct window *);
void set_horizontal_scroll_bar (struct window *);
int try_window (Lisp_Object, struct text_pos, int);
void window_box (struct window *, enum glyph_row_area,
   int *, int *, int *, int *);
int window_box_height (struct window *);
int window_text_bottom_y (struct window *);
int window_box_width (struct window *, enum glyph_row_area);
int window_box_left (struct window *, enum glyph_row_area);
int window_box_left_offset (struct window *, enum glyph_row_area);
int window_box_right (struct window *, enum glyph_row_area);
int estimate_mode_line_height (struct frame *, enum face_id);
int move_it_to (struct it *, ptrdiff_t, int, int, int, int);
void pixel_to_glyph_coords (struct frame *, int, int, int *, int *,
                            XRectangle *, 
                                              _Bool
                                                  );
void remember_mouse_glyph (struct frame *, int, int, XRectangle *);
void mark_window_display_accurate (Lisp_Object, 
                                               _Bool
                                                   );
void redisplay_preserve_echo_area (int);
void init_iterator (struct it *, struct window *, ptrdiff_t,
                    ptrdiff_t, struct glyph_row *, enum face_id);
void init_iterator_to_row_start (struct it *, struct window *,
                                 struct glyph_row *);
void start_display (struct it *, struct window *, struct text_pos);
void move_it_vertically (struct it *, int);
void move_it_vertically_backward (struct it *, int);
void move_it_by_lines (struct it *, ptrdiff_t);
void move_it_past_eol (struct it *);
void move_it_in_display_line (struct it *it,
         ptrdiff_t to_charpos, int to_x,
         enum move_operation_enum op);
int partial_line_height (struct it *it_origin);
_Bool 
    in_display_vector_p (struct it *);
int frame_mode_line_height (struct frame *);
extern 
      _Bool 
           redisplaying_p;
extern 
      _Bool 
           help_echo_showing_p;
extern Lisp_Object help_echo_string, help_echo_window;
extern Lisp_Object help_echo_object, previous_help_echo_string;
extern ptrdiff_t help_echo_pos;
extern int last_tool_bar_item;
extern void reseat_at_previous_visible_line_start (struct it *);
extern Lisp_Object lookup_glyphless_char_display (int, struct it *);
extern ptrdiff_t compute_display_string_pos (struct text_pos *,
          struct bidi_string_data *,
          struct window *, 
                          _Bool
                              , int *);
extern ptrdiff_t compute_display_string_end (ptrdiff_t,
          struct bidi_string_data *);
extern void produce_stretch_glyph (struct it *);
extern int merge_glyphless_glyph_face (struct it *);
extern void forget_escape_and_glyphless_faces (void);
extern void get_font_ascent_descent (struct font *, int *, int *);
extern void x_get_glyph_overhangs (struct glyph *, struct frame *,
                                   int *, int *);
extern struct font *font_for_underline_metrics (struct glyph_string *);
extern void x_produce_glyphs (struct it *);
extern void x_write_glyphs (struct window *, struct glyph_row *,
       struct glyph *, enum glyph_row_area, int);
extern void x_insert_glyphs (struct window *, struct glyph_row *,
        struct glyph *, enum glyph_row_area, int);
extern void x_clear_end_of_line (struct window *, struct glyph_row *,
     enum glyph_row_area, int);
extern void x_fix_overlapping_area (struct window *, struct glyph_row *,
                                    enum glyph_row_area, int);
extern void draw_phys_cursor_glyph (struct window *,
                                    struct glyph_row *,
                                    enum draw_glyphs_face);
extern void get_phys_cursor_geometry (struct window *, struct glyph_row *,
                                      struct glyph *, int *, int *, int *);
extern void erase_phys_cursor (struct window *);
extern void display_and_set_cursor (struct window *, 
                                                    _Bool
                                                        , int, int, int, int);
extern void x_update_cursor (struct frame *, 
                                            _Bool
                                                );
extern void x_clear_cursor (struct window *);
extern void x_draw_vertical_border (struct window *w);
extern void x_draw_right_divider (struct window *w);
extern int get_glyph_string_clip_rects (struct glyph_string *,
                                        XRectangle *, int);
extern void get_glyph_string_clip_rect (struct glyph_string *,
                                        XRectangle *nr);
extern Lisp_Object find_hot_spot (Lisp_Object, int, int);
extern void handle_tool_bar_click (struct frame *,
                                   int, int, 
                                            _Bool
                                                , int);
extern void expose_frame (struct frame *, int, int, int, int);
extern 
      _Bool 
           x_intersect_rectangles (XRectangle *, XRectangle *, XRectangle *);
extern void note_mouse_highlight (struct frame *, int, int);
extern void x_clear_window_mouse_face (struct window *);
extern void cancel_mouse_face (struct frame *);
extern 
      _Bool 
           clear_mouse_face (Mouse_HLInfo *);
extern 
      _Bool 
           cursor_in_mouse_face_p (struct window *w);
extern void tty_draw_row_with_mouse_face (struct window *, struct glyph_row *,
       int, int, enum draw_glyphs_face);
extern void display_tty_menu_item (const char *, int, int, int, int, 
                                                                    _Bool
                                                                        );
int lookup_fringe_bitmap (Lisp_Object);
void draw_fringe_bitmap (struct window *, struct glyph_row *, int);
void draw_row_fringe_bitmaps (struct window *, struct glyph_row *);
_Bool 
    draw_window_fringes (struct window *, 
                                          _Bool
                                              );
_Bool 
    update_window_fringes (struct window *, 
                                            _Bool
                                                );
extern unsigned row_hash (struct glyph_row *);
extern 
      _Bool 
           buffer_flipping_blocked_p (void);
extern ptrdiff_t x_bitmap_pixmap (struct frame *, ptrdiff_t);
extern void x_reference_bitmap (struct frame *, ptrdiff_t);
extern ptrdiff_t x_create_bitmap_from_data (struct frame *, char *,
         unsigned int, unsigned int);
extern ptrdiff_t x_create_bitmap_from_file (struct frame *, Lisp_Object);
extern void x_destroy_bitmap (struct frame *, ptrdiff_t);
extern void x_destroy_all_bitmaps (Display_Info *);
extern void x_create_bitmap_mask (struct frame *, ptrdiff_t);
extern Lisp_Object x_find_image_file (Lisp_Object);
void x_kill_gs_process (Pixmap, struct frame *);
struct image_cache *make_image_cache (void);
void free_image_cache (struct frame *);
void clear_image_caches (Lisp_Object);
void mark_image_cache (struct image_cache *);
_Bool 
    valid_image_p (Lisp_Object);
void prepare_image_for_display (struct frame *, struct image *);
ptrdiff_t lookup_image (struct frame *, Lisp_Object);
unsigned long image_background (struct image *, struct frame *,
                                XImagePtr_or_DC ximg);
int image_background_transparent (struct image *, struct frame *,
                                  XImagePtr_or_DC mask);
int image_ascent (struct image *, struct face *, struct glyph_slice *);
void get_tty_size (int, int *, int *);
void request_sigio (void);
void unrequest_sigio (void);
_Bool 
    tabs_safe_p (int);
void init_baud_rate (int);
void init_sigio (int);
void unload_color (struct frame *, unsigned long);
void x_free_colors (struct frame *, unsigned long *, int);
void update_face_from_frame_parameter (struct frame *, Lisp_Object,
                                       Lisp_Object);
Lisp_Object tty_color_name (struct frame *, int);
void clear_face_cache (
                      _Bool
                          );
unsigned long load_color (struct frame *, struct face *, Lisp_Object,
                          enum lface_attribute_index);
char *choose_face_font (struct frame *, Lisp_Object *, Lisp_Object,
                        int *);
void prepare_face_for_display (struct frame *, struct face *);
int lookup_named_face (struct frame *, Lisp_Object, 
                                                   _Bool
                                                       );
int lookup_basic_face (struct frame *, int);
int smaller_face (struct frame *, int, int);
int face_with_height (struct frame *, int, int);
int lookup_derived_face (struct frame *, Lisp_Object, int, 
                                                          _Bool
                                                              );
void init_frame_faces (struct frame *);
void free_frame_faces (struct frame *);
void recompute_basic_faces (struct frame *);
int face_at_buffer_position (struct window *, ptrdiff_t, ptrdiff_t *, ptrdiff_t,
                            _Bool
                                , int);
int face_for_overlay_string (struct window *, ptrdiff_t, ptrdiff_t *, ptrdiff_t,
                            _Bool
                                , Lisp_Object);
int face_at_string_position (struct window *, Lisp_Object, ptrdiff_t, ptrdiff_t,
                             ptrdiff_t *, enum face_id, 
                                                       _Bool
                                                           );
int merge_faces (struct frame *, Lisp_Object, int, int);
int compute_char_face (struct frame *, int, Lisp_Object);
void free_all_realized_faces (Lisp_Object);
extern char unspecified_fg[], unspecified_bg[];
void gamma_correct (struct frame *, XColor *);
void x_implicitly_set_name (struct frame *, Lisp_Object, Lisp_Object);
void x_change_tool_bar_height (struct frame *f, int);
extern frame_parm_handler x_frame_parm_handlers[];
extern void start_hourglass (void);
extern void cancel_hourglass (void);
int popup_activated (void);
extern Lisp_Object buffer_posn_from_coords (struct window *,
                                            int *, int *,
                                            struct display_pos *,
                                            Lisp_Object *,
                                            int *, int *, int *, int *);
extern Lisp_Object mode_line_string (struct window *, enum window_part,
                                     int *, int *, ptrdiff_t *,
                                     Lisp_Object *,
                                     int *, int *, int *, int *);
extern Lisp_Object marginal_area_string (struct window *, enum window_part,
                                         int *, int *, ptrdiff_t *,
                                         Lisp_Object *,
                                         int *, int *, int *, int *);
extern void redraw_frame (struct frame *);
extern 
      _Bool 
           update_frame (struct frame *, 
                                         _Bool
                                             , 
                                               _Bool
                                                   );
extern void update_frame_with_menu (struct frame *, int, int);
extern void bitch_at_user (void);
extern void adjust_frame_glyphs (struct frame *);
void free_glyphs (struct frame *);
void free_window_matrices (struct window *);
void check_glyph_memory (void);
void mirrored_line_dance (struct glyph_matrix *, int, int, int *, char *);
void clear_glyph_matrix (struct glyph_matrix *);
void clear_current_matrices (struct frame *f);
void clear_desired_matrices (struct frame *);
void shift_glyph_matrix (struct window *, struct glyph_matrix *,
                         int, int, int);
void rotate_matrix (struct glyph_matrix *, int, int, int);
void increment_matrix_positions (struct glyph_matrix *,
                                 int, int, ptrdiff_t, ptrdiff_t);
void blank_row (struct window *, struct glyph_row *, int);
void clear_glyph_matrix_rows (struct glyph_matrix *, int, int);
void clear_glyph_row (struct glyph_row *);
void prepare_desired_row (struct window *, struct glyph_row *, 
                                                              _Bool
                                                                  );
void update_single_window (struct window *);
void do_pending_window_change (
                              _Bool
                                  );
void change_frame_size (struct frame *, int, int, 
                                                 _Bool
                                                     , 
                                                       _Bool
                                                           , 
                                                             _Bool
                                                                 , 
                                                                   _Bool
                                                                       );
void init_display (void);
void syms_of_display (void);
extern void spec_glyph_lookup_face (struct window *, GLYPH *);
extern void fill_up_frame_row_with_spaces (struct glyph_row *, int);
extern void ring_bell (struct frame *);
extern void update_begin (struct frame *);
extern void update_end (struct frame *);
extern void set_terminal_window (struct frame *, int);
extern void cursor_to (struct frame *, int, int);
extern void raw_cursor_to (struct frame *, int, int);
extern void clear_to_end (struct frame *);
extern void clear_frame (struct frame *);
extern void clear_end_of_line (struct frame *, int);
extern void write_glyphs (struct frame *, struct glyph *, int);
extern void insert_glyphs (struct frame *, struct glyph *, int);
extern void delete_glyphs (struct frame *, int);
extern void ins_del_lines (struct frame *, int, int);
extern struct terminal *init_initial_terminal (void);
extern void tty_turn_off_insert (struct tty_display_info *);
extern int string_cost (const char *);
extern int per_line_cost (const char *);
extern void calculate_costs (struct frame *);
extern void produce_glyphs (struct it *);
extern 
      _Bool 
           tty_capable_p (struct tty_display_info *, unsigned);
extern void set_tty_color_mode (struct tty_display_info *, struct frame *);
extern void create_tty_output (struct frame *);
extern struct terminal *init_tty (const char *, const char *, 
                                                             _Bool
                                                                 );
extern void tty_append_glyph (struct it *);
extern int scrolling_max_lines_saved (int, int, unsigned *, unsigned *, int *);
extern void do_line_insertion_deletion_costs (struct frame *, const char *,
                                              const char *, const char *,
           const char *, const char *,
           const char *, int);
void scrolling_1 (struct frame *, int, int, int, int *, int *, unsigned *,
                  unsigned *, int);
enum resource_types
{
  RES_TYPE_NUMBER,
  RES_TYPE_FLOAT,
  RES_TYPE_BOOLEAN,
  RES_TYPE_STRING,
  RES_TYPE_SYMBOL,
  RES_TYPE_BOOLEAN_NUMBER
};
extern Display_Info *check_x_display_info (Lisp_Object);
extern Lisp_Object x_get_arg (Display_Info *, Lisp_Object,
                              Lisp_Object, const char *, const char *class,
                              enum resource_types);
extern Lisp_Object x_frame_get_and_record_arg (struct frame *, Lisp_Object,
                                               Lisp_Object,
            const char *, const char *,
                                               enum resource_types);
extern Lisp_Object x_default_parameter (struct frame *, Lisp_Object,
                                        Lisp_Object, Lisp_Object,
                                        const char *, const char *,
                                        enum resource_types);
extern char *x_get_string_resource (XrmDatabase, const char *,
        const char *);
extern 
      _Bool 
           x_mouse_grabbed (Display_Info *);
extern void x_redo_mouse_highlight (Display_Info *);
struct glyph;
enum scroll_bar_part {
  scroll_bar_nowhere,
  scroll_bar_above_handle,
  scroll_bar_handle,
  scroll_bar_below_handle,
  scroll_bar_up_arrow,
  scroll_bar_down_arrow,
  scroll_bar_to_top,
  scroll_bar_to_bottom,
  scroll_bar_end_scroll,
  scroll_bar_move_ratio,
  scroll_bar_before_handle,
  scroll_bar_horizontal_handle,
  scroll_bar_after_handle,
  scroll_bar_left_arrow,
  scroll_bar_right_arrow,
  scroll_bar_to_leftmost,
  scroll_bar_to_rightmost
};
enum output_method
{
  output_initial,
  output_termcap,
  output_x_window,
  output_msdos_raw,
  output_w32,
  output_ns
};
enum event_kind
{
  NO_EVENT,
  ASCII_KEYSTROKE_EVENT,
  MULTIBYTE_CHAR_KEYSTROKE_EVENT,
  NON_ASCII_KEYSTROKE_EVENT,
  TIMER_EVENT,
  MOUSE_CLICK_EVENT,
  WHEEL_EVENT,
  HORIZ_WHEEL_EVENT,
  SCROLL_BAR_CLICK_EVENT,
  HORIZONTAL_SCROLL_BAR_CLICK_EVENT,
  SELECTION_REQUEST_EVENT,
  SELECTION_CLEAR_EVENT,
  BUFFER_SWITCH_EVENT,
  DELETE_WINDOW_EVENT,
  MENU_BAR_EVENT,
  ICONIFY_EVENT,
  DEICONIFY_EVENT,
  MENU_BAR_ACTIVATE_EVENT,
  DRAG_N_DROP_EVENT,
  USER_SIGNAL_EVENT,
  HELP_EVENT,
  TOOL_BAR_EVENT,
  FOCUS_IN_EVENT,
  FOCUS_OUT_EVENT,
  MOVE_FRAME_EVENT,
  SELECT_WINDOW_EVENT,
  SAVE_SESSION_EVENT
  , GPM_CLICK_EVENT
  , DBUS_EVENT
  , CONFIG_CHANGED_EVENT
  , FILE_NOTIFY_EVENT
};
enum { EVENT_KIND_WIDTH = 16 };
struct input_event
{
  enum event_kind kind : EVENT_KIND_WIDTH;
  enum scroll_bar_part part : 16;
  unsigned code;
  unsigned modifiers;
  Lisp_Object x, y;
  Time timestamp;
  Lisp_Object frame_or_window;
  Lisp_Object arg;
};
enum {
  up_modifier = 1,
  down_modifier = 2,
  drag_modifier = 4,
  click_modifier= 8,
  double_modifier= 16,
  triple_modifier= 32,
  alt_modifier = CHAR_ALT,
  super_modifier= CHAR_SUPER,
  hyper_modifier= CHAR_HYPER,
  shift_modifier= CHAR_SHIFT,
  ctrl_modifier = CHAR_CTL,
  meta_modifier = CHAR_META
};
enum Gpm_Etype {
  GPM_MOVE=1,
  GPM_DRAG=2,
  GPM_DOWN=4,
  GPM_UP= 8,
  GPM_SINGLE=16,
  GPM_DOUBLE=32,
  GPM_TRIPLE=64,
  GPM_MFLAG=128,
  GPM_HARD=256,
  GPM_ENTER=512,
  GPM_LEAVE=1024
};
enum Gpm_Margin {GPM_TOP=1, GPM_BOT=2, GPM_LFT=4, GPM_RGT=8};
typedef struct Gpm_Event {
  unsigned char buttons, modifiers;
  unsigned short vc;
  short dx, dy, x, y;
  enum Gpm_Etype type;
  int clicks;
  enum Gpm_Margin margin;
  short wdx, wdy;
} Gpm_Event;
typedef int Gpm_Handler(Gpm_Event *event, void *clientdata);
typedef struct Gpm_Connect {
  unsigned short eventMask, defaultMask;
  unsigned short minMod, maxMod;
  int pid;
  int vc;
} Gpm_Connect;
typedef struct Gpm_Roi {
  short xMin,xMax;
  short yMin,yMax;
  unsigned short minMod, maxMod;
  unsigned short eventMask;
  unsigned short owned;
  Gpm_Handler *handler;
  void *clientdata;
  struct Gpm_Roi *prev;
  struct Gpm_Roi *next;
} Gpm_Roi;
extern int gpm_flag, gpm_ctlfd, gpm_fd, gpm_hflag, gpm_morekeys;
extern int gpm_zerobased;
extern int gpm_visiblepointer;
extern int gpm_mx, gpm_my;
extern struct timeval gpm_timeout;
extern unsigned char _gpm_buf[];
extern unsigned short * _gpm_arg;
extern Gpm_Handler *gpm_handler;
extern void *gpm_data;
extern Gpm_Handler *gpm_roi_handler;
extern void *gpm_roi_data;
extern Gpm_Roi *gpm_roi;
extern Gpm_Roi *gpm_current_roi;
struct winsize
  {
    unsigned short int ws_row;
    unsigned short int ws_col;
    unsigned short int ws_xpixel;
    unsigned short int ws_ypixel;
  };
struct termio
  {
    unsigned short int c_iflag;
    unsigned short int c_oflag;
    unsigned short int c_cflag;
    unsigned short int c_lflag;
    unsigned char c_line;
    unsigned char c_cc[8];
};
extern int ioctl (int __fd, unsigned long int __request, ...) __attribute__ ((__nothrow__ , __leaf__));
extern int Gpm_Open(Gpm_Connect *, int);
extern int Gpm_Close(void);
extern int Gpm_GetEvent(Gpm_Event *);
extern int Gpm_CharsQueued(void);
extern int Gpm_Getc(FILE *);
extern int Gpm_Repeat(int millisec);
extern int Gpm_FitValuesM(int *x, int *y, int margin);
extern int gpm_consolefd;
Gpm_Handler Gpm_HandleRoi;
Gpm_Roi *Gpm_PushRoi(int x, int y, int X, int Y, int mask,
                     Gpm_Handler *fun, void *xtradata);
Gpm_Roi * Gpm_PopRoi(Gpm_Roi *which);
Gpm_Roi * Gpm_RaiseRoi(Gpm_Roi *which, Gpm_Roi *before);
Gpm_Roi * Gpm_LowerRoi(Gpm_Roi *which, Gpm_Roi *after);
extern int Gpm_Wgetch();
char *Gpm_GetLibVersion(int *where);
char *Gpm_GetServerVersion(int *where);
int Gpm_GetSnapshot(Gpm_Event *ePtr);
char *Gpm_get_console( void );
int Gpm_x_high_y(int base, int pot_y);
int Gpm_cnt_digits(int number);
void gpm_oops(int line, char *file, char *text, ... );
void gpm_report(int line, char *file, int stat, char *text, ... );
extern int handle_one_term_event (struct tty_display_info *, Gpm_Event *, struct input_event *);
extern struct tty_display_info *gpm_tty;
struct terminal
{
  union vectorlike_header header;
  Lisp_Object param_alist;
  Lisp_Object charset_list;
  Lisp_Object Vselection_alist;
  Lisp_Object glyph_code_table;
  struct terminal *next_terminal;
  int id;
  int reference_count;
  enum output_method type;
  char *name;
  struct kboard *kboard;
  struct image_cache *image_cache;
  union display_info
  {
    struct tty_display_info *tty;
    struct x_display_info *x;
    struct w32_display_info *w32;
    struct ns_display_info *ns;
  } display_info;
  struct coding_system *terminal_coding;
  struct coding_system *keyboard_coding;
  struct redisplay_interface *rif;
  void (*cursor_to_hook) (struct frame *f, int vpos, int hpos);
  void (*raw_cursor_to_hook) (struct frame *, int, int);
  void (*clear_to_end_hook) (struct frame *);
  void (*clear_frame_hook) (struct frame *);
  void (*clear_end_of_line_hook) (struct frame *, int);
  void (*ins_del_lines_hook) (struct frame *f, int, int);
  void (*insert_glyphs_hook) (struct frame *f, struct glyph *s, int n);
  void (*write_glyphs_hook) (struct frame *f, struct glyph *s, int n);
  void (*delete_glyphs_hook) (struct frame *, int);
  void (*ring_bell_hook) (struct frame *f);
  void (*toggle_invisible_pointer_hook) (struct frame *f, 
                                                         _Bool 
                                                              invisible);
  void (*reset_terminal_modes_hook) (struct terminal *);
  void (*set_terminal_modes_hook) (struct terminal *);
  void (*update_begin_hook) (struct frame *);
  void (*update_end_hook) (struct frame *);
  void (*set_terminal_window_hook) (struct frame *, int);
  void (*mouse_position_hook) (struct frame **f, int,
                               Lisp_Object *bar_window,
                               enum scroll_bar_part *part,
                               Lisp_Object *x,
                               Lisp_Object *y,
                               Time *);
  void (*frame_rehighlight_hook) (struct frame *);
  void (*frame_raise_lower_hook) (struct frame *f, 
                                                  _Bool 
                                                       raise_flag);
  void (*fullscreen_hook) (struct frame *f);
  Lisp_Object (*menu_show_hook) (struct frame *f, int x, int y, int menuflags,
     Lisp_Object title, const char **error_name);
  Lisp_Object (*popup_dialog_hook) (struct frame *f, Lisp_Object header,
        Lisp_Object contents);
  void (*set_vertical_scroll_bar_hook) (struct window *window,
                                        int portion, int whole,
                                        int position);
  void (*set_horizontal_scroll_bar_hook) (struct window *window,
       int portion, int whole,
       int position);
  void (*condemn_scroll_bars_hook) (struct frame *frame);
  void (*redeem_scroll_bar_hook) (struct window *window);
  void (*judge_scroll_bars_hook) (struct frame *FRAME);
  int (*read_socket_hook) (struct terminal *terminal,
                           struct input_event *hold_quit);
  void (*frame_up_to_date_hook) (struct frame *);
  void (*buffer_flipping_unblocked_hook) (struct frame *);
  void (*delete_frame_hook) (struct frame *);
  void (*delete_terminal_hook) (struct terminal *);
};
inline 
      _Bool
TERMINALP (Lisp_Object a)
{
  return PSEUDOVECTORP (a, PVEC_TERMINAL);
}
inline struct terminal *
XTERMINAL (Lisp_Object a)
{
  ((void) (
 0 
 && (TERMINALP (a))));
  return XUNTAG (a, Lisp_Vectorlike);
}
inline void
tset_charset_list (struct terminal *t, Lisp_Object val)
{
  t->charset_list = val;
}
inline void
tset_selection_alist (struct terminal *t, Lisp_Object val)
{
  t->Vselection_alist = val;
}
extern struct terminal *terminal_list;
extern struct terminal *decode_live_terminal (Lisp_Object);
extern struct terminal *decode_tty_terminal (Lisp_Object);
extern struct terminal *get_named_terminal (const char *);
extern struct terminal *create_terminal (enum output_method,
      struct redisplay_interface *);
extern void delete_terminal (struct terminal *);
extern Lisp_Object terminal_glyph_code (struct terminal *, int);
extern struct terminal *initial_terminal;
extern unsigned char *encode_terminal_code (struct glyph *, int,
         struct coding_system *);
extern void close_gpm (int gpm_fd);
struct xim_inst_t
{
  struct x_display_info *dpyinfo;
  char *resource_name;
};
struct x_bitmap_record
{
  Pixmap pixmap;
 _Bool 
      have_mask;
  Pixmap mask;
  char *file;
  int refcount;
  int height, width, depth;
};
struct color_name_cache_entry
{
  struct color_name_cache_entry *next;
  XColor rgb;
  char *name;
};
int 
      x_parse_color (struct frame *f, const char *color_name,
        XColor *color);
struct x_display_info
{
  struct x_display_info *next;
  struct terminal *terminal;
  Display *display;
  int connection;
  Lisp_Object name_list_element;
  int reference_count;
  Screen *screen;
  double resx, resy;
  Visual *visual;
  Colormap cmap;
  int n_planes;
  int grabbed;
  ptrdiff_t icon_bitmap_id;
  Window root_window;
  Window client_leader_window;
  Cursor vertical_scroll_bar_cursor;
  Cursor horizontal_scroll_bar_cursor;
  Cursor invisible_cursor;
  void (*toggle_visible_pointer) (struct frame *, 
                                                 _Bool
                                                     );
  GdkCursor *xg_cursor;
  XrmDatabase xrdb;
  int smallest_char_width;
  int smallest_font_height;
  GC scratch_cursor_gc;
  Mouse_HLInfo mouse_highlight;
  unsigned x_id;
  char *x_id_name;
  int n_fonts;
  struct x_bitmap_record *bitmaps;
  ptrdiff_t bitmaps_size;
  ptrdiff_t bitmaps_last;
  int meta_mod_mask, shift_lock_mask;
  int alt_mod_mask, super_mod_mask, hyper_mod_mask;
  Atom Xatom_wm_protocols;
  Atom Xatom_wm_take_focus;
  Atom Xatom_wm_save_yourself;
  Atom Xatom_wm_delete_window;
  Atom Xatom_wm_change_state;
  Atom Xatom_wm_configure_denied;
  Atom Xatom_wm_window_moved;
  Atom Xatom_wm_client_leader;
  Atom Xatom_editres;
  Atom Xatom_CLIPBOARD, Xatom_TIMESTAMP, Xatom_TEXT, Xatom_DELETE,
  Xatom_COMPOUND_TEXT, Xatom_UTF8_STRING,
  Xatom_MULTIPLE, Xatom_INCR, Xatom_EMACS_TMP, Xatom_TARGETS, Xatom_NULL,
  Xatom_ATOM, Xatom_ATOM_PAIR, Xatom_CLIPBOARD_MANAGER;
  Atom Xatom_PIXEL_SIZE, Xatom_AVERAGE_WIDTH,
  Xatom_MULE_BASELINE_OFFSET, Xatom_MULE_RELATIVE_COMPOSE,
  Xatom_MULE_DEFAULT_ASCENT;
  Atom Xatom_DONE, Xatom_PAGE;
  Atom Xatom_Scrollbar, Xatom_Horizontal_Scrollbar;
  Atom Xatom_XEMBED, Xatom_XEMBED_INFO;
  struct frame *x_focus_frame;
  struct frame *x_focus_event_frame;
  struct frame *x_highlight_frame;
  struct frame *x_pending_autoraise_frame;
  struct frame *last_mouse_frame;
  struct frame *last_mouse_glyph_frame;
  struct frame *last_mouse_motion_frame;
  struct scroll_bar *last_mouse_scroll_bar;
  Time last_user_time;
  int last_mouse_motion_x;
  int last_mouse_motion_y;
  XRectangle last_mouse_glyph;
  Time last_mouse_movement_time;
  Pixmap gray;
  XIM xim;
  XIMStyles *xim_styles;
  struct xim_inst_t *xim_callback_data;
  struct color_name_cache_entry *color_names;
  XColor *color_cells;
  int ncolor_cells;
  int red_bits, blue_bits, green_bits;
  int red_offset, blue_offset, green_offset;
  enum
    {
      X_WMTYPE_UNKNOWN,
      X_WMTYPE_A,
      X_WMTYPE_B
    } wm_type;
  Atom *x_dnd_atoms;
  ptrdiff_t x_dnd_atoms_size;
  ptrdiff_t x_dnd_atoms_length;
  Atom Xatom_net_supported, Xatom_net_supporting_wm_check;
  Atom *net_supported_atoms;
  int nr_net_supported_atoms;
  Window net_supported_window;
  Atom Xatom_net_window_type, Xatom_net_window_type_tooltip;
  Atom Xatom_net_active_window;
  Atom Xatom_net_wm_state, Xatom_net_wm_state_fullscreen,
    Xatom_net_wm_state_maximized_horz, Xatom_net_wm_state_maximized_vert,
    Xatom_net_wm_state_sticky, Xatom_net_wm_state_above, Xatom_net_wm_state_below,
    Xatom_net_wm_state_hidden, Xatom_net_wm_state_skip_taskbar,
    Xatom_net_frame_extents, Xatom_net_current_desktop, Xatom_net_workarea;
  Atom Xatom_xsettings_sel, Xatom_xsettings_prop, Xatom_xsettings_mgr;
  Window xsettings_window;
  Atom Xatom_net_wm_name, Xatom_net_wm_icon_name;
  Atom Xatom_net_wm_window_opacity;
  Atom Xatom_SM_CLIENT_ID;
  int xrandr_major_version;
  int xrandr_minor_version;
  xcb_connection_t *xcb_connection;
 _Bool 
      supports_xdbe;
};
extern 
      _Bool 
           use_xim;
extern struct x_display_info *x_display_list;
extern struct x_display_info *x_display_info_for_display (Display *);
extern struct frame *x_top_window_to_frame (struct x_display_info *, int);
extern struct x_display_info *x_term_init (Lisp_Object, char *, char *);
extern 
      _Bool 
           x_display_ok (const char *);
extern void select_visual (struct x_display_info *);
extern Window tip_window;
struct x_output
{
  int menubar_height;
  int toolbar_top_height, toolbar_bottom_height;
  int toolbar_left_width, toolbar_right_width;
  Pixmap border_tile;
  GC normal_gc;
  GC reverse_gc;
  GC cursor_gc;
  Window window_desc;
  Drawable draw_desc;
 _Bool 
      need_buffer_flip;
  Window icon_desc;
  Window parent_desc;
  GtkWidget *widget;
  GtkWidget *edit_widget;
  GtkWidget *vbox_widget;
  GtkWidget *hbox_widget;
  GtkWidget *menubar_widget;
  GtkWidget *toolbar_widget;
  bool_bf toolbar_in_hbox : 1;
  bool_bf toolbar_is_packed : 1;
  GdkGeometry size_hints;
  long hint_flags;
  GtkTooltip *ttip_widget;
  GtkWidget *ttip_lbl;
  GtkWindow *ttip_window;
  ptrdiff_t icon_bitmap;
  struct font *font;
  int baseline_offset;
  int fontset;
  unsigned long cursor_pixel;
  unsigned long border_pixel;
  unsigned long mouse_pixel;
  unsigned long cursor_foreground_pixel;
  unsigned long scroll_bar_foreground_pixel;
  unsigned long scroll_bar_background_pixel;
  Cursor text_cursor;
  Cursor nontext_cursor;
  Cursor modeline_cursor;
  Cursor hand_cursor;
  Cursor hourglass_cursor;
  Cursor horizontal_drag_cursor;
  Cursor vertical_drag_cursor;
  Cursor current_cursor;
  Cursor left_edge_cursor;
  Cursor top_left_corner_cursor;
  Cursor top_edge_cursor;
  Cursor top_right_corner_cursor;
  Cursor right_edge_cursor;
  Cursor bottom_right_corner_cursor;
  Cursor bottom_edge_cursor;
  Cursor bottom_left_corner_cursor;
  Window hourglass_window;
  XWMHints wm_hints;
  struct x_display_info *display_info;
  XEvent *saved_menu_event;
  bool_bf hourglass_p : 1;
  bool_bf explicit_parent : 1;
  bool_bf asked_for_visible : 1;
  bool_bf has_been_visible : 1;
  bool_bf wait_for_wm : 1;
  XIC xic;
  XIMStyle xic_style;
  XFontSet xic_xfs;
  struct relief
  {
    GC gc;
    unsigned long pixel;
  }
  black_relief, white_relief;
  unsigned long relief_background;
  int focus_state;
  int move_offset_top;
  int move_offset_left;
};
enum
{
  FOCUS_NONE = 0,
  FOCUS_IMPLICIT = 1,
  FOCUS_EXPLICIT = 2
};
extern void x_mark_frame_dirty (struct frame *f);
struct scroll_bar
{
  union vectorlike_header header;
  Lisp_Object window;
  Lisp_Object next, prev;
  Window x_window;
  int top, left, width, height;
  int start, end;
  int dragging;
 _Bool 
      horizontal;
};
struct selection_input_event
{
  enum event_kind kind : EVENT_KIND_WIDTH;
  struct x_display_info *dpyinfo;
  Window requestor;
  Atom selection, target, property;
  Time time;
};
inline Display *
SELECTION_EVENT_DISPLAY (struct selection_input_event *ev)
{
  return ev->dpyinfo->display;
}
extern void x_free_gcs (struct frame *);
extern void x_relative_mouse_position (struct frame *, int *, int *);
extern void x_real_pos_and_offsets (struct frame *f,
                                    int *left_offset_x,
                                    int *right_offset_x,
                                    int *top_offset_y,
                                    int *bottom_offset_y,
                                    int *x_pixels_diff,
                                    int *y_pixels_diff,
                                    int *xptr,
                                    int *yptr,
                                    int *outer_border);
XrmDatabase x_load_resources (Display *, const char *, const char *,
         const char *);
typedef void (*x_special_error_handler)(Display *, XErrorEvent *, char *,
     void *);
extern 
      _Bool 
           x_text_icon (struct frame *, const char *);
extern void x_catch_errors (Display *);
extern void x_catch_errors_with_handler (Display *, x_special_error_handler,
      void *);
extern void x_check_errors (Display *, const char *)
  __attribute__ ((__format__ (__printf__, 2, 0)));
extern 
      _Bool 
           x_had_errors_p (Display *);
extern void x_uncatch_errors (void);
extern void x_uncatch_errors_after_check (void);
extern void x_clear_errors (Display *);
extern void xembed_request_focus (struct frame *);
extern void x_ewmh_activate_frame (struct frame *);
extern void x_delete_terminal (struct terminal *terminal);
extern unsigned long x_copy_color (struct frame *, unsigned long);
extern 
      _Bool 
           x_alloc_nearest_color (struct frame *, Colormap, XColor *);
extern void x_query_color (struct frame *f, XColor *);
extern void x_clear_area (struct frame *f, int, int, int, int);
extern int x_x_to_emacs_modifiers (struct x_display_info *, int);
inline int
x_display_pixel_height (struct x_display_info *dpyinfo)
{
  return 
        ((
        dpyinfo->screen
        )->height)
                                        ;
}
inline int
x_display_pixel_width (struct x_display_info *dpyinfo)
{
  return 
        ((
        dpyinfo->screen
        )->width)
                                       ;
}
inline void
x_display_set_last_user_time (struct x_display_info *dpyinfo, Time t)
{
  dpyinfo->last_user_time = t;
}
inline unsigned long
x_make_truecolor_pixel (struct x_display_info *dpyinfo, int r, int g, int b)
{
  unsigned long pr, pg, pb;
  pr = (r >> (16 - dpyinfo->red_bits)) << dpyinfo->red_offset;
  pg = (g >> (16 - dpyinfo->green_bits)) << dpyinfo->green_offset;
  pb = (b >> (16 - dpyinfo->blue_bits)) << dpyinfo->blue_offset;
  return pr | pg | pb;
}
inline 
      _Bool
x_mutable_colormap (Visual *visual)
{
  int class = visual->class;
  return (class != 
                  2 
                              && class != 
                                          0 
                                                     && class != 
                                                                 4
                                                                          );
}
extern void x_set_sticky (struct frame *, Lisp_Object, Lisp_Object);
extern void x_set_skip_taskbar (struct frame *, Lisp_Object, Lisp_Object);
extern void x_set_z_group (struct frame *, Lisp_Object, Lisp_Object);
extern 
      _Bool 
           x_wm_supports (struct frame *, Atom);
extern void x_wait_for_event (struct frame *, int);
extern void x_clear_under_internal_border (struct frame *f);
extern void tear_down_x_back_buffer (struct frame *f);
extern void initial_set_up_x_back_buffer (struct frame *f);
extern void x_handle_property_notify (const XPropertyEvent *);
extern void x_handle_selection_notify (const XSelectionEvent *);
extern void x_handle_selection_event (struct selection_input_event *);
extern void x_clear_frame_selections (struct frame *);
extern void x_send_client_event (Lisp_Object display,
                                 Lisp_Object dest,
                                 Lisp_Object from,
                                 Atom message_type,
                                 Lisp_Object format,
                                 Lisp_Object values);
extern 
      _Bool 
           x_handle_dnd_message (struct frame *,
      const XClientMessageEvent *,
      struct x_display_info *,
      struct input_event *);
extern int x_check_property_data (Lisp_Object);
extern void x_fill_property_data (Display *,
                                  Lisp_Object,
                                  void *,
                                  int);
extern Lisp_Object x_property_data_to_lisp (struct frame *,
                                            const unsigned char *,
                                            Atom,
                                            int,
                                            unsigned long);
extern void x_clipboard_manager_save_frame (Lisp_Object);
extern void x_clipboard_manager_save_all (void);
extern 
      _Bool 
           xg_set_icon (struct frame *, Lisp_Object);
extern 
      _Bool 
           xg_set_icon_from_xpm_data (struct frame *, const char **);
extern void xic_free_xfontset (struct frame *);
extern void create_frame_xic (struct frame *);
extern void destroy_frame_xic (struct frame *);
extern void xic_set_preeditarea (struct window *, int, int);
extern void xic_set_statusarea (struct frame *);
extern void xic_set_xfontset (struct frame *, const char *);
extern 
      _Bool 
           x_defined_color (struct frame *, const char *, XColor *, 
                                                                    _Bool
                                                                        );
extern void free_frame_xic (struct frame *);
extern Lisp_Object xw_popup_dialog (struct frame *, Lisp_Object, Lisp_Object);
extern void x_menu_set_in_use (
                              _Bool
                                  );
extern void x_menu_wait_for_event (void *data);
extern void initialize_frame_menubar (struct frame *);
extern void x_session_initialize (struct x_display_info *dpyinfo);
extern 
      _Bool 
           x_session_have_connection (void);
extern void x_session_close (void);
typedef struct xg_list_node_
{
  struct xg_list_node_ *prev;
  struct xg_list_node_ *next;
} xg_list_node;
typedef struct xg_menu_cb_data_
{
  xg_list_node ptrs;
  struct frame *f;
  Lisp_Object menu_bar_vector;
  int menu_bar_items_used;
  GCallback highlight_cb;
  int ref_count;
} xg_menu_cb_data;
typedef struct xg_menu_item_cb_data_
{
  xg_list_node ptrs;
  gulong select_id;
  Lisp_Object help;
  gpointer call_data;
  xg_menu_cb_data *cl_data;
} xg_menu_item_cb_data;
extern 
      _Bool 
           xg_uses_old_file_dialog (void);
extern char *xg_get_file_name (struct frame *f,
                               char *prompt,
                               char *default_filename,
                              _Bool 
                                   mustmatch_p,
                              _Bool 
                                   only_dir_p);
extern Lisp_Object xg_get_font (struct frame *f, const char *);
extern GtkWidget *xg_create_widget (const char *type,
                                    const char *name,
                                    struct frame *f,
                                    struct _widget_value *val,
                                    GCallback select_cb,
                                    GCallback deactivate_cb,
                                    GCallback highlight_cb);
extern void xg_modify_menubar_widgets (GtkWidget *menubar,
                                       struct frame *f,
                                       struct _widget_value *val,
                                      _Bool 
                                           deep_p,
                                       GCallback select_cb,
                                       GCallback deactivate_cb,
                                       GCallback highlight_cb);
extern void xg_update_frame_menubar (struct frame *f);
extern 
      _Bool 
           xg_event_is_for_menubar (struct frame *, const XEvent *);
extern ptrdiff_t xg_get_scroll_id_for_window (Display *dpy, Window wid);
extern void xg_create_scroll_bar (struct frame *f,
                                  struct scroll_bar *bar,
                                  GCallback scroll_callback,
                                  GCallback end_callback,
                                  const char *scroll_bar_name);
extern void xg_create_horizontal_scroll_bar (struct frame *f,
          struct scroll_bar *bar,
          GCallback scroll_callback,
          GCallback end_callback,
          const char *scroll_bar_name);
extern void xg_remove_scroll_bar (struct frame *f, ptrdiff_t scrollbar_id);
extern void xg_update_scrollbar_pos (struct frame *f,
                                     ptrdiff_t scrollbar_id,
                                     int top,
                                     int left,
                                     int width,
                                     int height);
extern void xg_update_horizontal_scrollbar_pos (struct frame *f,
      ptrdiff_t scrollbar_id,
      int top,
      int left,
      int width,
      int height);
extern void xg_set_toolkit_scroll_bar_thumb (struct scroll_bar *bar,
                                             int portion,
                                             int position,
                                             int whole);
extern void xg_set_toolkit_horizontal_scroll_bar_thumb (struct scroll_bar *bar,
       int portion,
       int position,
       int whole);
extern 
      _Bool 
           xg_event_is_for_scrollbar (struct frame *, const XEvent *);
extern int xg_get_default_scrollbar_width (struct frame *f);
extern int xg_get_default_scrollbar_height (struct frame *f);
extern void update_frame_tool_bar (struct frame *f);
extern void free_frame_tool_bar (struct frame *f);
extern void xg_change_toolbar_position (struct frame *f, Lisp_Object pos);
extern void xg_frame_resized (struct frame *f,
                              int pixelwidth,
                              int pixelheight);
extern void xg_frame_set_char_size (struct frame *f, int width, int height);
extern GtkWidget * xg_win_to_widget (Display *dpy, Window wdesc);
extern int xg_get_scale (struct frame *f);
extern void xg_display_open (char *display_name, Display **dpy);
extern void xg_display_close (Display *dpy);
extern GdkCursor * xg_create_default_cursor (Display *dpy);
extern 
      _Bool 
           xg_create_frame_widgets (struct frame *f);
extern void xg_free_frame_widgets (struct frame *f);
extern void xg_set_background_color (struct frame *f, unsigned long bg);
extern 
      _Bool 
           xg_check_special_colors (struct frame *f,
         const char *color_name,
         XColor *color);
extern void xg_set_frame_icon (struct frame *f,
                               Pixmap icon_pixmap,
                               Pixmap icon_mask);
extern void xg_set_undecorated (struct frame *f, Lisp_Object undecorated);
extern void xg_frame_restack (struct frame *f1, struct frame *f2, 
                                                                 _Bool 
                                                                      above);
extern void xg_set_skip_taskbar (struct frame *f, Lisp_Object skip_taskbar);
extern void xg_set_no_focus_on_map (struct frame *f, Lisp_Object no_focus_on_map);
extern void xg_set_no_accept_focus (struct frame *f, Lisp_Object no_accept_focus);
extern void xg_set_override_redirect (struct frame *f, Lisp_Object override_redirect);
extern 
      _Bool 
           xg_prepare_tooltip (struct frame *f,
    Lisp_Object string,
    int *width,
    int *height);
extern void xg_show_tooltip (struct frame *f, int root_x, int root_y);
extern 
      _Bool 
           xg_hide_tooltip (struct frame *f);
extern void xg_mark_data (void);
extern void xg_initialize (void);
extern 
      _Bool 
           xg_ignore_gtk_scrollbar;
extern void set_point (ptrdiff_t);
extern void temp_set_point (struct buffer *, ptrdiff_t);
extern void set_point_both (ptrdiff_t, ptrdiff_t);
extern void temp_set_point_both (struct buffer *,
     ptrdiff_t, ptrdiff_t);
extern void set_point_from_marker (Lisp_Object);
extern void enlarge_buffer_text (struct buffer *, ptrdiff_t);
struct buffer_text
  {
    unsigned char *beg;
    ptrdiff_t gpt;
    ptrdiff_t z;
    ptrdiff_t gpt_byte;
    ptrdiff_t z_byte;
    ptrdiff_t gap_size;
    EMACS_INT modiff;
    EMACS_INT chars_modiff;
    EMACS_INT save_modiff;
    EMACS_INT overlay_modiff;
    EMACS_INT compact;
    ptrdiff_t beg_unchanged;
    ptrdiff_t end_unchanged;
    EMACS_INT unchanged_modified;
    EMACS_INT overlay_unchanged_modified;
    INTERVAL intervals;
    struct Lisp_Marker *markers;
    bool_bf inhibit_shrinking : 1;
    bool_bf redisplay : 1;
  };
struct buffer
{
  union vectorlike_header header;
  Lisp_Object name_;
  Lisp_Object filename_;
  Lisp_Object directory_;
  Lisp_Object backed_up_;
  Lisp_Object save_length_;
  Lisp_Object auto_save_file_name_;
  Lisp_Object read_only_;
  Lisp_Object mark_;
  Lisp_Object local_var_alist_;
  Lisp_Object major_mode_;
  Lisp_Object mode_name_;
  Lisp_Object mode_line_format_;
  Lisp_Object header_line_format_;
  Lisp_Object keymap_;
  Lisp_Object abbrev_table_;
  Lisp_Object syntax_table_;
  Lisp_Object category_table_;
  Lisp_Object case_fold_search_;
  Lisp_Object tab_width_;
  Lisp_Object fill_column_;
  Lisp_Object left_margin_;
  Lisp_Object auto_fill_function_;
  Lisp_Object downcase_table_;
  Lisp_Object upcase_table_;
  Lisp_Object case_canon_table_;
  Lisp_Object case_eqv_table_;
  Lisp_Object truncate_lines_;
  Lisp_Object word_wrap_;
  Lisp_Object ctl_arrow_;
  Lisp_Object bidi_display_reordering_;
  Lisp_Object bidi_paragraph_direction_;
  Lisp_Object bidi_paragraph_separate_re_;
  Lisp_Object bidi_paragraph_start_re_;
  Lisp_Object selective_display_;
  Lisp_Object selective_display_ellipses_;
  Lisp_Object minor_modes_;
  Lisp_Object overwrite_mode_;
  Lisp_Object abbrev_mode_;
  Lisp_Object display_table_;
  Lisp_Object mark_active_;
  Lisp_Object enable_multibyte_characters_;
  Lisp_Object buffer_file_coding_system_;
  Lisp_Object file_format_;
  Lisp_Object auto_save_file_format_;
  Lisp_Object cache_long_scans_;
  Lisp_Object width_table_;
  Lisp_Object pt_marker_;
  Lisp_Object begv_marker_;
  Lisp_Object zv_marker_;
  Lisp_Object point_before_scroll_;
  Lisp_Object file_truename_;
  Lisp_Object invisibility_spec_;
  Lisp_Object last_selected_window_;
  Lisp_Object display_count_;
  Lisp_Object left_margin_cols_;
  Lisp_Object right_margin_cols_;
  Lisp_Object left_fringe_width_;
  Lisp_Object right_fringe_width_;
  Lisp_Object fringes_outside_margins_;
  Lisp_Object scroll_bar_width_;
  Lisp_Object scroll_bar_height_;
  Lisp_Object vertical_scroll_bar_type_;
  Lisp_Object horizontal_scroll_bar_type_;
  Lisp_Object indicate_empty_lines_;
  Lisp_Object indicate_buffer_boundaries_;
  Lisp_Object fringe_indicator_alist_;
  Lisp_Object fringe_cursor_alist_;
  Lisp_Object display_time_;
  Lisp_Object scroll_up_aggressively_;
  Lisp_Object scroll_down_aggressively_;
  Lisp_Object cursor_type_;
  Lisp_Object extra_line_spacing_;
  Lisp_Object cursor_in_non_selected_windows_;
  struct buffer_text own_text;
  struct buffer_text *text;
  struct buffer *next;
  ptrdiff_t pt;
  ptrdiff_t pt_byte;
  ptrdiff_t begv;
  ptrdiff_t begv_byte;
  ptrdiff_t zv;
  ptrdiff_t zv_byte;
  struct buffer *base_buffer;
  int indirections;
  int window_count;
  char local_flags[50];
  struct timespec modtime;
  off_t modtime_size;
  EMACS_INT auto_save_modified;
  EMACS_INT display_error_modiff;
  time_t auto_save_failure_time;
  ptrdiff_t last_window_start;
  struct region_cache *newline_cache;
  struct region_cache *width_run_cache;
  struct region_cache *bidi_paragraph_cache;
  bool_bf prevent_redisplay_optimizations_p : 1;
  bool_bf clip_changed : 1;
  struct Lisp_Overlay *overlays_before;
  struct Lisp_Overlay *overlays_after;
  ptrdiff_t overlay_center;
  Lisp_Object undo_list_;
};
inline 
      _Bool
BUFFERP (Lisp_Object a)
{
  return PSEUDOVECTORP (a, PVEC_BUFFER);
}
inline void
CHECK_BUFFER (Lisp_Object x)
{
  CHECK_TYPE (BUFFERP (x), builtin_lisp_symbol (276), x);
}
inline struct buffer *
XBUFFER (Lisp_Object a)
{
  ((void) (
 0 
 && (BUFFERP (a))));
  return XUNTAG (a, Lisp_Vectorlike);
}
inline void
bset_bidi_paragraph_direction (struct buffer *b, Lisp_Object val)
{
  b->bidi_paragraph_direction_ = val;
}
inline void
bset_cache_long_scans (struct buffer *b, Lisp_Object val)
{
  b->cache_long_scans_ = val;
}
inline void
bset_case_canon_table (struct buffer *b, Lisp_Object val)
{
  b->case_canon_table_ = val;
}
inline void
bset_case_eqv_table (struct buffer *b, Lisp_Object val)
{
  b->case_eqv_table_ = val;
}
inline void
bset_directory (struct buffer *b, Lisp_Object val)
{
  b->directory_ = val;
}
inline void
bset_display_count (struct buffer *b, Lisp_Object val)
{
  b->display_count_ = val;
}
inline void
bset_left_margin_cols (struct buffer *b, Lisp_Object val)
{
  b->left_margin_cols_ = val;
}
inline void
bset_right_margin_cols (struct buffer *b, Lisp_Object val)
{
  b->right_margin_cols_ = val;
}
inline void
bset_display_time (struct buffer *b, Lisp_Object val)
{
  b->display_time_ = val;
}
inline void
bset_downcase_table (struct buffer *b, Lisp_Object val)
{
  b->downcase_table_ = val;
}
inline void
bset_enable_multibyte_characters (struct buffer *b, Lisp_Object val)
{
  b->enable_multibyte_characters_ = val;
}
inline void
bset_filename (struct buffer *b, Lisp_Object val)
{
  b->filename_ = val;
}
inline void
bset_keymap (struct buffer *b, Lisp_Object val)
{
  b->keymap_ = val;
}
inline void
bset_last_selected_window (struct buffer *b, Lisp_Object val)
{
  b->last_selected_window_ = val;
}
inline void
bset_local_var_alist (struct buffer *b, Lisp_Object val)
{
  b->local_var_alist_ = val;
}
inline void
bset_mark_active (struct buffer *b, Lisp_Object val)
{
  b->mark_active_ = val;
}
inline void
bset_point_before_scroll (struct buffer *b, Lisp_Object val)
{
  b->point_before_scroll_ = val;
}
inline void
bset_read_only (struct buffer *b, Lisp_Object val)
{
  b->read_only_ = val;
}
inline void
bset_truncate_lines (struct buffer *b, Lisp_Object val)
{
  b->truncate_lines_ = val;
}
inline void
bset_undo_list (struct buffer *b, Lisp_Object val)
{
  b->undo_list_ = val;
}
inline void
bset_upcase_table (struct buffer *b, Lisp_Object val)
{
  b->upcase_table_ = val;
}
inline void
bset_width_table (struct buffer *b, Lisp_Object val)
{
  b->width_table_ = val;
}
extern struct buffer *all_buffers;
extern struct buffer buffer_defaults;
extern struct buffer buffer_local_flags;
extern struct buffer buffer_local_symbols;
extern void delete_all_overlays (struct buffer *);
extern void reset_buffer (struct buffer *);
extern void compact_buffer (struct buffer *);
extern void evaporate_overlays (ptrdiff_t);
extern ptrdiff_t overlays_at (EMACS_INT, 
                                        _Bool
                                            , Lisp_Object **,
         ptrdiff_t *, ptrdiff_t *, ptrdiff_t *, 
                                               _Bool
                                                   );
extern ptrdiff_t sort_overlays (Lisp_Object *, ptrdiff_t, struct window *);
extern void recenter_overlay_lists (struct buffer *, ptrdiff_t);
extern ptrdiff_t overlay_strings (ptrdiff_t, struct window *, unsigned char **);
extern void validate_region (Lisp_Object *, Lisp_Object *);
extern void set_buffer_internal_1 (struct buffer *);
extern void set_buffer_internal_2 (struct buffer *);
extern void set_buffer_temp (struct buffer *);
extern Lisp_Object buffer_local_value (Lisp_Object, Lisp_Object);
extern void record_buffer (Lisp_Object);
extern void fix_overlays_before (struct buffer *, ptrdiff_t, ptrdiff_t);
extern void mmap_set_vars (
                          _Bool
                              );
extern void restore_buffer (Lisp_Object);
extern void set_buffer_if_live (Lisp_Object);
inline struct buffer *
decode_buffer (Lisp_Object b)
{
  return NILP (b) ? (current_thread->m_current_buffer) : (CHECK_BUFFER (b), XBUFFER (b));
}
inline void
set_buffer_internal (struct buffer *b)
{
  if ((current_thread->m_current_buffer) != b)
    set_buffer_internal_1 (b);
}
inline void
record_unwind_current_buffer (void)
{
  record_unwind_protect (set_buffer_if_live, Fcurrent_buffer ());
}
extern Lisp_Object Vbuffer_alist;
inline INTERVAL
buffer_intervals (struct buffer *b)
{
  ((void) (
 0 
 && (b->text != 
 ((void *)0)
 )));
  return b->text->intervals;
}
inline void
set_buffer_intervals (struct buffer *b, INTERVAL i)
{
  ((void) (
 0 
 && (b->text != 
 ((void *)0)
 )));
  b->text->intervals = i;
}
inline 
      _Bool
buffer_has_overlays (void)
{
  return (current_thread->m_current_buffer)->overlays_before || (current_thread->m_current_buffer)->overlays_after;
}
inline int
FETCH_MULTIBYTE_CHAR (ptrdiff_t pos)
{
  unsigned char *p = (((pos) >= ((current_thread->m_current_buffer)->text->gpt_byte) ? ((current_thread->m_current_buffer)->text->gap_size) : 0) + (pos) + ((current_thread->m_current_buffer)->text->beg) - ((1)));
  return (!((p)[0] & 0x80) ? (p)[0] : ! ((p)[0] & 0x20) ? (((((p)[0] & 0x1F) << 6) | ((p)[1] & 0x3F)) + (((unsigned char) (p)[0]) < 0xC2 ? 0x3FFF80 : 0)) : ! ((p)[0] & 0x10) ? ((((p)[0] & 0x0F) << 12) | (((p)[1] & 0x3F) << 6) | ((p)[2] & 0x3F)) : string_char ((p), 
        ((void *)0)
        , 
        ((void *)0)
        ));
}
inline int
BUF_FETCH_MULTIBYTE_CHAR (struct buffer *buf, ptrdiff_t pos)
{
  unsigned char *p
    = ((pos >= ((buf)->text->gpt_byte) ? ((buf)->text->gap_size) : 0)
       + pos + ((buf)->text->beg) - ((1)));
  return (!((p)[0] & 0x80) ? (p)[0] : ! ((p)[0] & 0x20) ? (((((p)[0] & 0x1F) << 6) | ((p)[1] & 0x3F)) + (((unsigned char) (p)[0]) < 0xC2 ? 0x3FFF80 : 0)) : ! ((p)[0] & 0x10) ? ((((p)[0] & 0x0F) << 12) | (((p)[1] & 0x3F) << 6) | ((p)[2] & 0x3F)) : string_char ((p), 
        ((void *)0)
        , 
        ((void *)0)
        ));
}
inline int
buffer_window_count (struct buffer *b)
{
  if (b->base_buffer)
    b = b->base_buffer;
  ((void) (
 0 
 && (b->window_count >= 0)));
  return b->window_count;
}
extern int last_per_buffer_idx;
inline Lisp_Object
per_buffer_default (int offset)
{
  return *(Lisp_Object *)(offset + (char *) &buffer_defaults);
}
inline void
set_per_buffer_default (int offset, Lisp_Object value)
{
  *(Lisp_Object *)(offset + (char *) &buffer_defaults) = value;
}
inline Lisp_Object
per_buffer_value (struct buffer *b, int offset)
{
  return *(Lisp_Object *)(offset + (char *) b);
}
inline void
set_per_buffer_value (struct buffer *b, int offset, Lisp_Object value)
{
  *(Lisp_Object *)(offset + (char *) b) = value;
}
inline int
downcase (int c)
{
  Lisp_Object downcase_table = (((current_thread->m_current_buffer))->downcase_table_);
  Lisp_Object down = CHAR_TABLE_REF (downcase_table, c);
  return NATNUMP (down) ? XFASTINT (down) : c;
}
inline int
upcase (int c)
{
  Lisp_Object upcase_table = (((current_thread->m_current_buffer))->upcase_table_);
  Lisp_Object up = CHAR_TABLE_REF (upcase_table, c);
  return NATNUMP (up) ? XFASTINT (up) : c;
}
inline 
      _Bool
uppercasep (int c)
{
  return downcase (c) != c;
}
inline 
      _Bool
lowercasep (int c)
{
  return !uppercasep (c) && upcase (c) != c;
}
enum define_coding_system_arg_index
  {
    coding_arg_name,
    coding_arg_mnemonic,
    coding_arg_coding_type,
    coding_arg_charset_list,
    coding_arg_ascii_compatible_p,
    coding_arg_decode_translation_table,
    coding_arg_encode_translation_table,
    coding_arg_post_read_conversion,
    coding_arg_pre_write_conversion,
    coding_arg_default_char,
    coding_arg_for_unibyte,
    coding_arg_plist,
    coding_arg_eol_type,
    coding_arg_max
  };
enum define_coding_iso2022_arg_index
  {
    coding_arg_iso2022_initial = coding_arg_max,
    coding_arg_iso2022_reg_usage,
    coding_arg_iso2022_request,
    coding_arg_iso2022_flags,
    coding_arg_iso2022_max
  };
enum define_coding_utf8_arg_index
  {
    coding_arg_utf8_bom = coding_arg_max,
    coding_arg_utf8_max
  };
enum define_coding_utf16_arg_index
  {
    coding_arg_utf16_bom = coding_arg_max,
    coding_arg_utf16_endian,
    coding_arg_utf16_max
  };
enum define_coding_ccl_arg_index
  {
    coding_arg_ccl_decoder = coding_arg_max,
    coding_arg_ccl_encoder,
    coding_arg_ccl_valids,
    coding_arg_ccl_max
  };
enum define_coding_undecided_arg_index
  {
    coding_arg_undecided_inhibit_null_byte_detection = coding_arg_max,
    coding_arg_undecided_inhibit_iso_escape_detection,
    coding_arg_undecided_prefer_utf_8,
    coding_arg_undecided_max
  };
extern Lisp_Object Vcoding_system_hash_table;
enum coding_attr_index
  {
    coding_attr_base_name,
    coding_attr_docstring,
    coding_attr_mnemonic,
    coding_attr_type,
    coding_attr_charset_list,
    coding_attr_ascii_compat,
    coding_attr_decode_tbl,
    coding_attr_encode_tbl,
    coding_attr_trans_tbl,
    coding_attr_post_read,
    coding_attr_pre_write,
    coding_attr_default_char,
    coding_attr_for_unibyte,
    coding_attr_plist,
    coding_attr_category,
    coding_attr_safe_charsets,
    coding_attr_charset_valids,
    coding_attr_ccl_decoder,
    coding_attr_ccl_encoder,
    coding_attr_ccl_valids,
    coding_attr_iso_initial,
    coding_attr_iso_usage,
    coding_attr_iso_request,
    coding_attr_iso_flags,
    coding_attr_utf_bom,
    coding_attr_utf_16_endian,
    coding_attr_emacs_mule_full,
    coding_attr_undecided_inhibit_null_byte_detection,
    coding_attr_undecided_inhibit_iso_escape_detection,
    coding_attr_undecided_prefer_utf_8,
    coding_attr_last_index
  };
enum coding_result_code
  {
    CODING_RESULT_SUCCESS,
    CODING_RESULT_INSUFFICIENT_SRC,
    CODING_RESULT_INSUFFICIENT_DST,
    CODING_RESULT_INVALID_SRC,
    CODING_RESULT_INTERRUPT
  };
struct composition_it;
struct face;
struct glyph_string;
enum font_property_index
  {
    FONT_TYPE_INDEX,
    FONT_FOUNDRY_INDEX,
    FONT_FAMILY_INDEX,
    FONT_ADSTYLE_INDEX,
    FONT_REGISTRY_INDEX,
    FONT_WEIGHT_INDEX,
    FONT_SLANT_INDEX,
    FONT_WIDTH_INDEX,
    FONT_SIZE_INDEX,
    FONT_DPI_INDEX,
    FONT_SPACING_INDEX,
    FONT_AVGWIDTH_INDEX,
    FONT_EXTRA_INDEX,
    FONT_SPEC_MAX,
    FONT_OBJLIST_INDEX = FONT_SPEC_MAX,
    FONT_ENTITY_MAX,
    FONT_NAME_INDEX = FONT_ENTITY_MAX,
    FONT_FULLNAME_INDEX,
    FONT_FILE_INDEX,
    FONT_OBJECT_MAX
  };
struct font_spec
{
  union vectorlike_header header;
  Lisp_Object props[FONT_SPEC_MAX];
};
struct font_entity
{
  union vectorlike_header header;
  Lisp_Object props[FONT_ENTITY_MAX];
};
struct font
{
  union vectorlike_header header;
  Lisp_Object props[FONT_OBJECT_MAX];
  int min_width;
  int max_width;
  int pixel_size;
  int height;
  int space_width;
  int average_width;
  int ascent, descent;
  int underline_thickness;
  int underline_position;
 _Bool 
      vertical_centering;
  int baseline_offset;
  int relative_compose;
  int default_ascent;
  int encoding_charset;
  int repertory_charset;
  struct font_driver const *driver;
};
enum font_spacing
  {
    FONT_SPACING_PROPORTIONAL = 0,
    FONT_SPACING_DUAL = 90,
    FONT_SPACING_MONO = 100,
    FONT_SPACING_CHARCELL = 110
  };
struct font_metrics
{
  short lbearing, rbearing, width, ascent, descent;
};
struct font_bitmap
{
  int bits_per_pixel;
  int rows;
  int width;
  int pitch;
  unsigned char *buffer;
  int left;
  int top;
  int advance;
};
inline 
      _Bool
FONTP (Lisp_Object x)
{
  return PSEUDOVECTORP (x, PVEC_FONT);
}
inline 
      _Bool
FONT_SPEC_P (Lisp_Object x)
{
  return FONTP (x) && PVSIZE (x) == FONT_SPEC_MAX;
}
inline 
      _Bool
GC_FONT_SPEC_P (Lisp_Object x)
{
  return FONTP (x) && (gc_asize (x) & PSEUDOVECTOR_SIZE_MASK) == FONT_SPEC_MAX;
}
inline 
      _Bool
FONT_ENTITY_P (Lisp_Object x)
{
  return FONTP (x) && PVSIZE (x) == FONT_ENTITY_MAX;
}
inline 
      _Bool
GC_FONT_ENTITY_P (Lisp_Object x)
{
  return FONTP (x) && (gc_asize (x) & PSEUDOVECTOR_SIZE_MASK) == FONT_ENTITY_MAX;
}
inline 
      _Bool
FONT_OBJECT_P (Lisp_Object x)
{
  return FONTP (x) && PVSIZE (x) == FONT_OBJECT_MAX;
}
inline 
      _Bool
GC_FONT_OBJECT_P (Lisp_Object x)
{
  return FONTP (x) && (gc_asize (x) & PSEUDOVECTOR_SIZE_MASK) == FONT_OBJECT_MAX;
}
inline void
CHECK_FONT (Lisp_Object x)
{
  CHECK_TYPE (FONTP (x), builtin_lisp_symbol (511), x);
}
inline void
CHECK_FONT_SPEC (Lisp_Object x)
{
  CHECK_TYPE (FONT_SPEC_P (x), builtin_lisp_symbol (518), x);
}
inline void
CHECK_FONT_ENTITY (Lisp_Object x)
{
  CHECK_TYPE (FONT_ENTITY_P (x), builtin_lisp_symbol (513), x);
}
inline void
CHECK_FONT_OBJECT (Lisp_Object x)
{
  CHECK_TYPE (FONT_OBJECT_P (x), builtin_lisp_symbol (515), x);
}
inline struct font_spec *
XFONT_SPEC (Lisp_Object p)
{
  ((void) (
 0 
 && (FONT_SPEC_P (p))));
  return XUNTAG (p, Lisp_Vectorlike);
}
inline struct font_spec *
GC_XFONT_SPEC (Lisp_Object p)
{
  ((void) (
 0 
 && (GC_FONT_SPEC_P (p))));
  return XUNTAG (p, Lisp_Vectorlike);
}
inline struct font_entity *
XFONT_ENTITY (Lisp_Object p)
{
  ((void) (
 0 
 && (FONT_ENTITY_P (p))));
  return XUNTAG (p, Lisp_Vectorlike);
}
inline struct font_entity *
GC_XFONT_ENTITY (Lisp_Object p)
{
  ((void) (
 0 
 && (GC_FONT_ENTITY_P (p))));
  return XUNTAG (p, Lisp_Vectorlike);
}
inline struct font *
XFONT_OBJECT (Lisp_Object p)
{
  ((void) (
 0 
 && (FONT_OBJECT_P (p))));
  return XUNTAG (p, Lisp_Vectorlike);
}
inline struct font *
GC_XFONT_OBJECT (Lisp_Object p)
{
  ((void) (
 0 
 && (GC_FONT_OBJECT_P (p))));
  return XUNTAG (p, Lisp_Vectorlike);
}
inline struct font *
CHECK_FONT_GET_OBJECT (Lisp_Object x)
{
  CHECK_FONT_OBJECT (x);
  return XFONT_OBJECT (x);
}
struct font_driver
{
  Lisp_Object type;
 _Bool 
      case_sensitive;
  Lisp_Object (*get_cache) (struct frame *f);
  Lisp_Object (*list) (struct frame *frame, Lisp_Object font_spec);
  Lisp_Object (*match) (struct frame *f, Lisp_Object spec);
  Lisp_Object (*list_family) (struct frame *f);
  void (*free_entity) (Lisp_Object font_entity);
  Lisp_Object (*open) (struct frame *f, Lisp_Object font_entity,
                       int pixel_size);
  void (*close) (struct font *font);
  void (*prepare_face) (struct frame *f, struct face *face);
  void (*done_face) (struct frame *f, struct face *face);
  int (*has_char) (Lisp_Object font, int c);
  unsigned (*encode_char) (struct font *font, int c);
  void (*text_extents) (struct font *font,
   unsigned *code, int nglyphs,
   struct font_metrics *metrics);
  int (*draw) (struct glyph_string *s, int from, int to,
               int x, int y, 
                            _Bool 
                                 with_background);
  int (*get_bitmap) (struct font *font, unsigned code,
                     struct font_bitmap *bitmap,
                     int bits_per_pixel);
  void (*free_bitmap) (struct font *font, struct font_bitmap *bitmap);
  int (*anchor_point) (struct font *font, unsigned code, int index,
                       int *x, int *y);
  Lisp_Object (*otf_capability) (struct font *font);
  int (*otf_drive) (struct font *font, Lisp_Object features,
                    Lisp_Object gstring_in, int from, int to,
                    Lisp_Object gstring_out, int idx, 
                                                     _Bool 
                                                          alternate_subst);
  int (*start_for_frame) (struct frame *f);
  int (*end_for_frame) (struct frame *f);
  Lisp_Object (*shape) (Lisp_Object lgstring);
  int (*check) (struct frame *f, struct font *font);
  int (*get_variation_glyphs) (struct font *font,
                               int c, unsigned variations[256]);
  void (*filter_properties) (Lisp_Object font, Lisp_Object properties);
 _Bool 
      (*cached_font_ok) (struct frame *f,
                          Lisp_Object font_object,
                          Lisp_Object entity);
  Lisp_Object (*combining_capability) (struct font *font);
  void (*drop_xrender_surfaces) (struct frame *f);
};
struct font_driver_list
{
 _Bool 
      on;
  struct font_driver const *driver;
  struct font_driver_list *next;
};
extern Lisp_Object copy_font_spec (Lisp_Object);
extern Lisp_Object merge_font_spec (Lisp_Object, Lisp_Object);
extern Lisp_Object font_make_entity (void);
extern Lisp_Object font_make_object (int, Lisp_Object, int);
extern Lisp_Object font_build_object (int, Lisp_Object, Lisp_Object, double);
extern Lisp_Object find_font_encoding (Lisp_Object);
extern int font_registry_charsets (Lisp_Object, struct charset **,
                                   struct charset **);
extern int font_style_to_value (enum font_property_index prop,
                                Lisp_Object name, 
                                                 _Bool 
                                                      noerror);
extern Lisp_Object font_style_symbolic (Lisp_Object font,
                                        enum font_property_index prop,
                                       _Bool 
                                            for_face);
extern 
      _Bool 
           font_match_p (Lisp_Object spec, Lisp_Object font);
extern Lisp_Object font_list_entities (struct frame *, Lisp_Object);
extern Lisp_Object font_get_name (Lisp_Object font_object);
extern Lisp_Object font_spec_from_name (Lisp_Object font_name);
extern Lisp_Object font_get_frame (Lisp_Object font_object);
extern int font_has_char (struct frame *, Lisp_Object, int);
extern void font_clear_prop (Lisp_Object *attrs,
                             enum font_property_index prop);
extern Lisp_Object font_find_for_lface (struct frame *f, Lisp_Object *lface,
                                        Lisp_Object spec, int c);
extern Lisp_Object font_open_for_lface (struct frame *f, Lisp_Object entity,
                                        Lisp_Object *lface,
                                        Lisp_Object spec);
extern Lisp_Object font_load_for_lface (struct frame *f, Lisp_Object *lface,
                                        Lisp_Object spec);
extern void font_prepare_for_face (struct frame *f, struct face *face);
extern void font_done_for_face (struct frame *f, struct face *face);
extern void clear_font_cache (struct frame *);
extern Lisp_Object font_open_by_spec (struct frame *f, Lisp_Object spec);
extern Lisp_Object font_open_by_name (struct frame *f, Lisp_Object name);
extern Lisp_Object font_intern_prop (const char *str, ptrdiff_t len,
        _Bool 
             force_symbol);
extern void font_update_sort_order (int *order);
extern void font_parse_family_registry (Lisp_Object family,
                                        Lisp_Object registry,
                                        Lisp_Object spec);
extern int font_parse_xlfd (char *name, ptrdiff_t len, Lisp_Object font);
extern ptrdiff_t font_unparse_xlfd (Lisp_Object font, int pixel_size,
        char *name, int bytes);
extern void register_font_driver (struct font_driver const *, struct frame *);
extern void free_font_driver_list (struct frame *f);
inline 
      _Bool
valid_font_driver (struct font_driver const *d)
{
  return 
        1
            ;
}
extern Lisp_Object font_update_drivers (struct frame *f, Lisp_Object list);
extern Lisp_Object font_range (ptrdiff_t, ptrdiff_t, ptrdiff_t *,
          struct window *, struct face *,
          Lisp_Object);
extern void font_fill_lglyph_metrics (Lisp_Object, Lisp_Object);
extern Lisp_Object font_put_extra (Lisp_Object font, Lisp_Object prop,
                                   Lisp_Object val);
extern void font_put_frame_data (struct frame *, Lisp_Object, void *);
extern void *font_get_frame_data (struct frame *f, Lisp_Object);
extern void font_filter_properties (Lisp_Object font,
        Lisp_Object alist,
        const char *const boolean_properties[],
                                    const char *const non_boolean_properties[]);
extern void font_drop_xrender_surfaces (struct frame *f);
extern int ftfont_anchor_point (struct font *, unsigned int, int,
    int *, int *);
extern int ftfont_get_bitmap (struct font *, unsigned int,
         struct font_bitmap *, int);
extern int ftfont_has_char (Lisp_Object, int);
extern int ftfont_variation_glyphs (struct font *, int, unsigned[256]);
extern Lisp_Object ftfont_combining_capability (struct font *);
extern Lisp_Object ftfont_get_cache (struct frame *);
extern Lisp_Object ftfont_list (struct frame *, Lisp_Object);
extern Lisp_Object ftfont_list_family (struct frame *);
extern Lisp_Object ftfont_match (struct frame *, Lisp_Object);
extern Lisp_Object ftfont_open (struct frame *, Lisp_Object, int);
extern Lisp_Object ftfont_otf_capability (struct font *);
extern Lisp_Object ftfont_shape (Lisp_Object);
extern unsigned ftfont_encode_char (struct font *, int);
extern void ftfont_close (struct font *);
extern void ftfont_filter_properties (Lisp_Object, Lisp_Object);
extern void ftfont_text_extents (struct font *, unsigned *, int,
     struct font_metrics *);
extern void syms_of_ftfont (void);
extern struct font_driver const xfont_driver;
extern Lisp_Object xfont_get_cache (struct frame *);
extern void syms_of_xfont (void);
extern void syms_of_ftxfont (void);
extern struct font_driver const xftfont_driver;
extern struct font_driver const ftxfont_driver;
extern void syms_of_xftfont (void);
extern void font_add_log (const char *, Lisp_Object, Lisp_Object);
extern void font_deferred_log (const char *, Lisp_Object, Lisp_Object);
inline 
      _Bool
font_data_structures_may_be_ill_formed (void)
{
  return 
        0
             ;
}
enum composition_method {
  COMPOSITION_RELATIVE,
  COMPOSITION_WITH_RULE,
  COMPOSITION_WITH_ALTCHARS,
  COMPOSITION_WITH_RULE_ALTCHARS,
  COMPOSITION_NO
};
inline 
      _Bool
composition_registered_p (Lisp_Object prop)
{
  return INTEGERP (XCAR (prop));
}
struct composition {
  int glyph_len;
  short pixel_width, ascent, descent;
  short lbearing, rbearing;
  int width;
  enum composition_method method;
  ptrdiff_t hash_index;
  void *font;
  short *offsets;
};
extern struct composition **composition_table;
extern ptrdiff_t n_compositions;
extern Lisp_Object composition_hash_table;
extern ptrdiff_t get_composition_id (ptrdiff_t, ptrdiff_t, ptrdiff_t,
         Lisp_Object, Lisp_Object);
extern 
      _Bool 
           find_composition (ptrdiff_t, ptrdiff_t, ptrdiff_t *, ptrdiff_t *,
         Lisp_Object *, Lisp_Object);
extern void update_compositions (ptrdiff_t, ptrdiff_t, int);
extern void make_composition_value_copy (Lisp_Object);
extern void syms_of_composite (void);
extern void compose_text (ptrdiff_t, ptrdiff_t, Lisp_Object, Lisp_Object,
                          Lisp_Object);
inline enum composition_method
composition_method (Lisp_Object prop)
{
  if (composition_registered_p (prop))
    return composition_table[XINT (XCAR (prop))]->method;
  else
    {
      Lisp_Object temp = XCDR (XCAR (prop));
      return (NILP (temp)
       ? COMPOSITION_RELATIVE
       : INTEGERP (temp) || STRINGP (temp)
       ? COMPOSITION_WITH_ALTCHARS
       : COMPOSITION_WITH_RULE_ALTCHARS);
    }
}
inline 
      _Bool
composition_valid_p (ptrdiff_t start, ptrdiff_t end, Lisp_Object prop)
{
  return (CONSP (prop)
   && (composition_registered_p (prop)
       ? (XINT (XCAR (prop)) >= 0
   && XINT (XCAR (prop)) <= n_compositions
   && CONSP (XCDR (prop)))
       : (CONSP (XCAR (prop))
    && (NILP (XCDR (XCAR (prop)))
        || STRINGP (XCDR (XCAR (prop)))
        || VECTORP (XCDR (XCAR (prop)))
        || INTEGERP (XCDR (XCAR (prop)))
        || CONSP (XCDR (XCAR (prop))))))
   && (composition_registered_p (prop) ? XINT (XCAR (XCDR (prop))) : XINT (XCAR (XCAR (prop)))) == end - start);
}
inline Lisp_Object *
lgstring_glyph_addr (Lisp_Object lgs, ptrdiff_t idx)
{
  return aref_addr (lgs, idx + 2);
}
enum lglyph_indices
  {
    LGLYPH_IX_FROM, LGLYPH_IX_TO, LGLYPH_IX_CHAR, LGLYPH_IX_CODE,
    LGLYPH_IX_WIDTH, LGLYPH_IX_LBEARING, LGLYPH_IX_RBEARING,
    LGLYPH_IX_ASCENT, LGLYPH_IX_DESCENT, LGLYPH_IX_ADJUSTMENT,
    LGLYPH_SIZE
  };
extern Lisp_Object composition_gstring_put_cache (Lisp_Object, ptrdiff_t);
extern Lisp_Object composition_gstring_from_id (ptrdiff_t);
extern 
      _Bool 
           composition_gstring_p (Lisp_Object);
extern int composition_gstring_width (Lisp_Object, ptrdiff_t, ptrdiff_t,
                                      struct font_metrics *);
extern void composition_compute_stop_pos (struct composition_it *,
                                          ptrdiff_t, ptrdiff_t, ptrdiff_t,
                                          Lisp_Object);
extern 
      _Bool 
           composition_reseat_it (struct composition_it *, ptrdiff_t,
       ptrdiff_t, ptrdiff_t, struct window *,
       struct face *, Lisp_Object);
extern int composition_update_it (struct composition_it *,
                                  ptrdiff_t, ptrdiff_t, Lisp_Object);
extern ptrdiff_t composition_adjust_point (ptrdiff_t, ptrdiff_t);
enum composition_state
  {
    COMPOSING_NO,
    COMPOSING_CHAR,
    COMPOSING_RULE,
    COMPOSING_COMPONENT_CHAR,
    COMPOSING_COMPONENT_RULE
  };
struct composition_status
{
  enum composition_state state;
  enum composition_method method;
 _Bool 
      old_form;
  int length;
  int nchars;
  int ncomps;
  int carryover[4
  + 16 * 3 - 2
  + 2
  + 16
  ];
};
struct iso_2022_spec
{
  unsigned flags;
  int current_invocation[2];
  int current_designation[4];
  int ctext_extended_segment_len;
  bool_bf single_shifting : 1;
  bool_bf bol : 1;
  bool_bf embedded_utf_8 : 1;
  struct composition_status cmp_status;
};
struct emacs_mule_spec
{
  struct composition_status cmp_status;
};
struct undecided_spec
{
  int inhibit_nbd;
  int inhibit_ied;
 _Bool 
      prefer_utf_8;
};
enum utf_bom_type
  {
    utf_detect_bom,
    utf_without_bom,
    utf_with_bom
  };
enum utf_16_endian_type
  {
    utf_16_big_endian,
    utf_16_little_endian
  };
struct utf_16_spec
{
  enum utf_bom_type bom;
  enum utf_16_endian_type endian;
  int surrogate;
};
struct coding_detection_info
{
  int checked;
  int found;
  int rejected;
};
struct coding_system
{
  ptrdiff_t id;
  unsigned common_flags : 14;
  unsigned mode : 5;
  bool_bf src_multibyte : 1;
  bool_bf dst_multibyte : 1;
  bool_bf chars_at_source : 1;
  bool_bf raw_destination : 1;
  bool_bf annotated : 1;
  unsigned eol_seen : 3;
  enum coding_result_code result : 3;
  int max_charset_id;
  union
    {
      struct iso_2022_spec iso_2022;
      struct ccl_spec *ccl;
      struct utf_16_spec utf_16;
      enum utf_bom_type utf_8_bom;
      struct emacs_mule_spec emacs_mule;
      struct undecided_spec undecided;
    } spec;
  unsigned char *safe_charsets;
  ptrdiff_t head_ascii;
  ptrdiff_t detected_utf8_bytes, detected_utf8_chars;
  ptrdiff_t produced, produced_char, consumed, consumed_char;
  ptrdiff_t src_pos, src_pos_byte, src_chars, src_bytes;
  Lisp_Object src_object;
  const unsigned char *source;
  ptrdiff_t dst_pos, dst_pos_byte, dst_bytes;
  Lisp_Object dst_object;
  unsigned char *destination;
  int *charbuf;
  int charbuf_size, charbuf_used;
  unsigned char carryover[64];
  int carryover_bytes;
  int default_char;
 _Bool 
      (*detector) (struct coding_system *, struct coding_detection_info *);
  void (*decoder) (struct coding_system *);
 _Bool 
      (*encoder) (struct coding_system *);
};
extern Lisp_Object code_conversion_save (
                                        _Bool
                                            , 
                                              _Bool
                                                  );
extern 
      _Bool 
           encode_coding_utf_8 (struct coding_system *);
extern 
      _Bool 
           utf8_string_p (Lisp_Object);
extern void setup_coding_system (Lisp_Object, struct coding_system *);
extern Lisp_Object coding_charset_list (struct coding_system *);
extern Lisp_Object coding_system_charset_list (Lisp_Object);
extern Lisp_Object code_convert_string (Lisp_Object, Lisp_Object,
                                        Lisp_Object, 
                                                    _Bool
                                                        , 
                                                          _Bool
                                                              , 
                                                                _Bool
                                                                    );
extern Lisp_Object code_convert_string_norecord (Lisp_Object, Lisp_Object,
                                                _Bool
                                                    );
extern Lisp_Object encode_file_name (Lisp_Object);
extern Lisp_Object decode_file_name (Lisp_Object);
extern Lisp_Object raw_text_coding_system (Lisp_Object);
extern 
      _Bool 
           raw_text_coding_system_p (struct coding_system *);
extern Lisp_Object coding_inherit_eol_type (Lisp_Object, Lisp_Object);
extern Lisp_Object complement_process_encoding_system (Lisp_Object);
extern void decode_coding_gap (struct coding_system *,
          ptrdiff_t, ptrdiff_t);
extern void decode_coding_object (struct coding_system *,
                                  Lisp_Object, ptrdiff_t, ptrdiff_t,
                                  ptrdiff_t, ptrdiff_t, Lisp_Object);
extern void encode_coding_object (struct coding_system *,
                                  Lisp_Object, ptrdiff_t, ptrdiff_t,
                                  ptrdiff_t, ptrdiff_t, Lisp_Object);
inline int surrogates_to_codepoint (int, int);
inline int
surrogates_to_codepoint (int low, int high)
{
  ((void) (
 0 
 && (0 <= low && low <= 0xFFFF)));
  ((void) (
 0 
 && (0 <= high && high <= 0xFFFF)));
  ((void) (
 0 
 && ((((low) & 0xFC00) == 0xDC00))));
  ((void) (
 0 
 && ((((high) & 0xFC00) == 0xD800))));
  return 0x10000 + (low - 0xDC00) + ((high - 0xD800) * 0x400);
}
extern Lisp_Object preferred_coding_system (void);
extern struct coding_system safe_terminal_coding;
extern char emacs_mule_bytes[256];
typedef struct kboard KBOARD;
struct kboard
  {
    KBOARD *next_kboard;
    Lisp_Object Voverriding_terminal_local_map_;
    Lisp_Object Vlast_command_;
    Lisp_Object Vreal_last_command_;
    Lisp_Object Vkeyboard_translate_table_;
    Lisp_Object Vlast_repeatable_command_;
    Lisp_Object Vprefix_arg_;
    Lisp_Object Vlast_prefix_arg_;
    Lisp_Object kbd_queue_;
    Lisp_Object defining_kbd_macro_;
    Lisp_Object *kbd_macro_buffer;
    Lisp_Object *kbd_macro_ptr;
    Lisp_Object *kbd_macro_end;
    ptrdiff_t kbd_macro_bufsize;
    Lisp_Object Vlast_kbd_macro_;
    Lisp_Object Vsystem_key_alist_;
    Lisp_Object system_key_syms_;
    Lisp_Object Vwindow_system_;
    Lisp_Object Vlocal_function_key_map_;
    Lisp_Object Vinput_decode_map_;
    Lisp_Object Vdefault_minibuffer_frame_;
    int reference_count;
    Lisp_Object echo_string_;
    bool_bf kbd_queue_has_data;
    bool_bf immediate_echo : 1;
    Lisp_Object echo_prompt_;
  };
inline void
kset_default_minibuffer_frame (struct kboard *kb, Lisp_Object val)
{
  kb->Vdefault_minibuffer_frame_ = val;
}
inline void
kset_defining_kbd_macro (struct kboard *kb, Lisp_Object val)
{
  kb->defining_kbd_macro_ = val;
}
inline void
kset_input_decode_map (struct kboard *kb, Lisp_Object val)
{
  kb->Vinput_decode_map_ = val;
}
inline void
kset_last_command (struct kboard *kb, Lisp_Object val)
{
  kb->Vlast_command_ = val;
}
inline void
kset_last_kbd_macro (struct kboard *kb, Lisp_Object val)
{
  kb->Vlast_kbd_macro_ = val;
}
inline void
kset_prefix_arg (struct kboard *kb, Lisp_Object val)
{
  kb->Vprefix_arg_ = val;
}
inline void
kset_system_key_alist (struct kboard *kb, Lisp_Object val)
{
  kb->Vsystem_key_alist_ = val;
}
inline void
kset_window_system (struct kboard *kb, Lisp_Object val)
{
  kb->Vwindow_system_ = val;
}
union buffered_input_event
{
  enum event_kind kind : EVENT_KIND_WIDTH;
  struct input_event ie;
  struct selection_input_event sie;
};
extern KBOARD *initial_kboard;
extern KBOARD *current_kboard;
extern uintmax_t num_input_events;
extern ptrdiff_t point_before_last_command_or_undo;
extern struct buffer *buffer_before_last_command_or_undo;
extern struct buffer *prev_buffer;
extern int poll_suppress_count;
extern Lisp_Object this_command_keys;
extern ptrdiff_t this_command_key_count;
extern Lisp_Object internal_last_event_frame;
extern Lisp_Object item_properties;
extern Lisp_Object menu_items;
extern Lisp_Object menu_items_inuse;
extern int menu_items_allocated;
extern int menu_items_used;
extern int menu_items_n_panes;
enum menu_item_idx
{
  MENU_ITEMS_ITEM_NAME = 0,
  MENU_ITEMS_ITEM_ENABLE,
  MENU_ITEMS_ITEM_VALUE,
  MENU_ITEMS_ITEM_EQUIV_KEY,
  MENU_ITEMS_ITEM_DEFINITION,
  MENU_ITEMS_ITEM_TYPE,
  MENU_ITEMS_ITEM_SELECTED,
  MENU_ITEMS_ITEM_HELP,
  MENU_ITEMS_ITEM_LENGTH
};
extern void unuse_menu_items (void);
extern struct timespec *input_available_clear_time;
extern 
      _Bool 
           ignore_mouse_drag_p;
extern Lisp_Object parse_modifiers (Lisp_Object);
extern Lisp_Object reorder_modifiers (Lisp_Object);
extern Lisp_Object read_char (int, Lisp_Object, Lisp_Object,
                             _Bool 
                                  *, struct timespec *);
extern int parse_solitary_modifier (Lisp_Object symbol);
extern Lisp_Object real_this_command;
extern int quit_char;
extern unsigned int timers_run;
extern 
      _Bool 
           menu_separator_name_p (const char *);
extern 
      _Bool 
           parse_menu_item (Lisp_Object, int);
extern void init_raw_keybuf_count (void);
extern KBOARD *allocate_kboard (Lisp_Object);
extern void delete_kboard (KBOARD *);
extern void not_single_kboard_state (KBOARD *);
extern void push_kboard (struct kboard *);
extern void push_frame_kboard (struct frame *);
extern void pop_kboard (void);
extern void temporarily_switch_to_single_kboard (struct frame *);
extern void record_asynch_buffer_change (void);
extern void input_poll_signal (int);
extern void start_polling (void);
extern void stop_polling (void);
extern void set_poll_suppress_count (int);
extern int gobble_input (void);
extern 
      _Bool 
           input_polling_used (void);
extern void clear_input_pending (void);
extern 
      _Bool 
           requeued_events_pending_p (void);
extern void bind_polling_period (int);
extern int make_ctrl_char (int) __attribute__ ((__const__));
extern void stuff_buffered_input (Lisp_Object);
extern void clear_waiting_for_input (void);
extern void swallow_events (
                           _Bool
                               );
extern 
      _Bool 
           lucid_event_type_list_p (Lisp_Object);
extern void kbd_buffer_store_event (struct input_event *);
extern void kbd_buffer_store_buffered_event (union buffered_input_event *,
          struct input_event *);
inline void
kbd_buffer_store_event_hold (struct input_event *event,
        struct input_event *hold_quit)
{
  _Static_assert (
 _Alignof 
 (struct input_event) == 
 _Alignof 
 (union buffered_input_event) && sizeof (struct input_event) == sizeof (union buffered_input_event), "verify (" "alignof (struct input_event) == alignof (union buffered_input_event) && sizeof (struct input_event) == sizeof (union buffered_input_event)" ")")
                                                                         ;
  kbd_buffer_store_buffered_event ((union buffered_input_event *) event,
       hold_quit);
}
extern void kbd_buffer_unget_event (struct selection_input_event *);
extern void poll_for_input_1 (void);
extern void show_help_echo (Lisp_Object, Lisp_Object, Lisp_Object,
                            Lisp_Object);
extern void gen_help_event (Lisp_Object, Lisp_Object, Lisp_Object,
                            Lisp_Object, ptrdiff_t);
extern void kbd_buffer_store_help_event (Lisp_Object, Lisp_Object);
extern Lisp_Object menu_item_eval_property (Lisp_Object);
extern 
      _Bool 
           kbd_buffer_events_waiting (void);
extern void add_user_signal (int, const char *);
extern int tty_read_avail_input (struct terminal *, struct input_event *);
extern 
      _Bool 
           volatile pending_signals;
extern void process_pending_signals (void);
extern struct timespec timer_check (void);
extern void mark_kboards (void);
extern char const DEV_TTY[];
struct cursor_pos
{
  int x, y;
  int hpos, vpos;
};
struct window
  {
    union vectorlike_header header;
    Lisp_Object frame;
    Lisp_Object next;
    Lisp_Object prev;
    Lisp_Object parent;
    Lisp_Object normal_lines;
    Lisp_Object normal_cols;
    Lisp_Object new_total;
    Lisp_Object new_normal;
    Lisp_Object new_pixel;
    Lisp_Object contents;
    Lisp_Object start;
    Lisp_Object pointm;
    Lisp_Object old_pointm;
    Lisp_Object temslot;
    Lisp_Object vertical_scroll_bar;
    Lisp_Object vertical_scroll_bar_type;
    Lisp_Object horizontal_scroll_bar;
    Lisp_Object horizontal_scroll_bar_type;
    Lisp_Object display_table;
    Lisp_Object dedicated;
    Lisp_Object redisplay_end_trigger;
    Lisp_Object combination_limit;
    Lisp_Object window_parameters;
    Lisp_Object mode_line_help_echo;
    struct glyph_matrix *current_matrix;
    struct glyph_matrix *desired_matrix;
    Lisp_Object prev_buffers;
    Lisp_Object next_buffers;
    EMACS_INT use_time;
    EMACS_INT sequence_number;
    int pixel_left;
    int pixel_top;
    int left_col;
    int top_line;
    int pixel_width;
    int pixel_height;
    int pixel_width_before_size_change;
    int pixel_height_before_size_change;
    int total_cols;
    int total_lines;
    ptrdiff_t hscroll;
    ptrdiff_t min_hscroll;
    ptrdiff_t hscroll_whole;
    EMACS_INT last_modified;
    EMACS_INT last_overlay_modified;
    ptrdiff_t last_point;
    ptrdiff_t base_line_number;
    ptrdiff_t base_line_pos;
    ptrdiff_t column_number_displayed;
    int nrows_scale_factor, ncols_scale_factor;
    struct cursor_pos cursor;
    struct cursor_pos phys_cursor;
    struct cursor_pos output_cursor;
    int last_cursor_vpos;
    enum text_cursor_kinds phys_cursor_type;
    int phys_cursor_width;
    int phys_cursor_ascent, phys_cursor_height;
    int left_fringe_width;
    int right_fringe_width;
    int left_margin_cols;
    int right_margin_cols;
    int scroll_bar_width;
    int scroll_bar_height;
    int mode_line_height;
    int header_line_height;
    ptrdiff_t window_end_pos;
    int window_end_vpos;
    bool_bf mini : 1;
    bool_bf horizontal : 1;
    bool_bf update_mode_line : 1;
    bool_bf last_had_star : 1;
    bool_bf start_at_line_beg : 1;
    bool_bf force_start : 1;
    bool_bf optional_new_start : 1;
    bool_bf phys_cursor_on_p : 1;
    bool_bf cursor_off_p : 1;
    bool_bf last_cursor_off_p : 1;
    bool_bf must_be_updated_p : 1;
    bool_bf pseudo_window_p : 1;
    bool_bf fringes_outside_margins : 1;
    bool_bf window_end_valid : 1;
    bool_bf redisplay : 1;
    bool_bf suspend_auto_hscroll : 1;
    int vscroll;
    ptrdiff_t window_end_bytepos;
  };
inline 
      _Bool
WINDOWP (Lisp_Object a)
{
  return PSEUDOVECTORP (a, PVEC_WINDOW);
}
inline void
CHECK_WINDOW (Lisp_Object x)
{
  CHECK_TYPE (WINDOWP (x), builtin_lisp_symbol (1178), x);
}
inline struct window *
XWINDOW (Lisp_Object a)
{
  ((void) (
 0 
 && (WINDOWP (a))));
  return XUNTAG (a, Lisp_Vectorlike);
}
inline void
wset_frame (struct window *w, Lisp_Object val)
{
  w->frame = val;
}
inline void
wset_next (struct window *w, Lisp_Object val)
{
  w->next = val;
}
inline void
wset_prev (struct window *w, Lisp_Object val)
{
  w->prev = val;
}
inline void
wset_redisplay_end_trigger (struct window *w, Lisp_Object val)
{
  w->redisplay_end_trigger = val;
}
inline void
wset_mode_line_help_echo (struct window *w, Lisp_Object val)
{
  w->mode_line_help_echo = val;
}
inline void
wset_new_pixel (struct window *w, Lisp_Object val)
{
  w->new_pixel = val;
}
inline void
wset_vertical_scroll_bar (struct window *w, Lisp_Object val)
{
  w->vertical_scroll_bar = val;
}
inline void
wset_horizontal_scroll_bar (struct window *w, Lisp_Object val)
{
  w->horizontal_scroll_bar = val;
}
inline void
wset_horizontal_scroll_bar_type (struct window *w, Lisp_Object val)
{
  w->horizontal_scroll_bar_type = val;
}
inline void
wset_prev_buffers (struct window *w, Lisp_Object val)
{
  w->prev_buffers = val;
}
inline void
wset_next_buffers (struct window *w, Lisp_Object val)
{
  w->next_buffers = val;
}
extern Lisp_Object selected_window;
extern EMACS_INT window_select_count;
extern Lisp_Object minibuf_window;
extern Lisp_Object minibuf_selected_window;
extern Lisp_Object make_window (void);
extern Lisp_Object window_from_coordinates (struct frame *, int, int,
                                            enum window_part *, 
                                                               _Bool
                                                                   );
extern void resize_frame_windows (struct frame *, int, 
                                                      _Bool
                                                          , 
                                                            _Bool
                                                                );
extern void restore_window_configuration (Lisp_Object);
extern void delete_all_child_windows (Lisp_Object);
extern void grow_mini_window (struct window *, int, 
                                                   _Bool
                                                       );
extern void shrink_mini_window (struct window *, 
                                                _Bool
                                                    );
extern int window_relative_x_coord (struct window *, enum window_part, int);
void run_window_size_change_functions (Lisp_Object);
void set_window_buffer (Lisp_Object window, Lisp_Object buffer,
                       _Bool 
                            run_hooks_p, 
                                         _Bool 
                                              keep_margins_p);
extern Lisp_Object echo_area_window;
extern EMACS_INT command_loop_level;
extern EMACS_INT minibuf_level;
extern int update_mode_lines;
extern int windows_or_buffers_changed;
extern void wset_redisplay (struct window *w);
extern void fset_redisplay (struct frame *f);
extern void bset_redisplay (struct buffer *b);
extern void bset_update_mode_line (struct buffer *b);
extern void redisplay_other_windows (void);
struct glyph *get_phys_cursor_glyph (struct window *w);
extern Lisp_Object Vwindow_list;
extern Lisp_Object window_list (void);
extern Lisp_Object window_parameter (struct window *, Lisp_Object parameter);
extern struct window *decode_live_window (Lisp_Object);
extern struct window *decode_any_window (Lisp_Object);
extern 
      _Bool 
           compare_window_configurations (Lisp_Object, Lisp_Object, 
                                                                    _Bool
                                                                        );
extern void mark_window_cursors_off (struct window *);
extern 
      _Bool 
           window_wants_mode_line (struct window *);
extern 
      _Bool 
           window_wants_header_line (struct window *);
extern int window_internal_height (struct window *);
extern int window_body_width (struct window *w, 
                                               _Bool
                                                   );
enum margin_unit { MARGIN_IN_LINES, MARGIN_IN_PIXELS };
extern int window_scroll_margin (struct window *, enum margin_unit);
extern void temp_output_buffer_show (Lisp_Object);
extern void replace_buffer_in_windows (Lisp_Object);
extern void replace_buffer_in_windows_safely (Lisp_Object);
extern void sanitize_window_sizes (Lisp_Object horizontal);
extern void wset_buffer (struct window *, Lisp_Object);
extern 
      _Bool 
           window_outdated (struct window *);
extern void init_window_once (void);
extern void init_window (void);
extern void syms_of_window (void);
extern void keys_of_window (void);
inline void
output_cursor_to (struct window *w, int vpos, int hpos, int y, int x)
{
  ((void) (
 0 
 && (w)));
  w->output_cursor.hpos = hpos;
  w->output_cursor.vpos = vpos;
  w->output_cursor.x = x;
  w->output_cursor.y = y;
}
enum vertical_scroll_bar_type
{
  vertical_scroll_bar_none,
  vertical_scroll_bar_left,
  vertical_scroll_bar_right
};
enum fullscreen_type
{
  FULLSCREEN_NONE,
  FULLSCREEN_WIDTH = 0x1,
  FULLSCREEN_HEIGHT = 0x2,
  FULLSCREEN_BOTH = 0x3,
  FULLSCREEN_MAXIMIZED = 0x4,
};
enum z_group
{
  z_group_none,
  z_group_above,
  z_group_below,
  z_group_above_suspended,
};
enum internal_border_part
  {
   INTERNAL_BORDER_NONE,
   INTERNAL_BORDER_LEFT_EDGE,
   INTERNAL_BORDER_TOP_LEFT_CORNER,
   INTERNAL_BORDER_TOP_EDGE,
   INTERNAL_BORDER_TOP_RIGHT_CORNER,
   INTERNAL_BORDER_RIGHT_EDGE,
   INTERNAL_BORDER_BOTTOM_RIGHT_CORNER,
   INTERNAL_BORDER_BOTTOM_EDGE,
   INTERNAL_BORDER_BOTTOM_LEFT_CORNER,
  };
struct frame
{
  union vectorlike_header header;
  Lisp_Object name;
  Lisp_Object icon_name;
  Lisp_Object title;
  Lisp_Object parent_frame;
  Lisp_Object focus_frame;
  Lisp_Object root_window;
  Lisp_Object selected_window;
  Lisp_Object minibuffer_window;
  Lisp_Object param_alist;
  Lisp_Object scroll_bars;
  Lisp_Object condemned_scroll_bars;
  Lisp_Object menu_bar_items;
  Lisp_Object face_alist;
  Lisp_Object menu_bar_vector;
  Lisp_Object buffer_predicate;
  Lisp_Object buffer_list;
  Lisp_Object buried_buffer_list;
  Lisp_Object tool_bar_items;
  Lisp_Object tool_bar_position;
  Lisp_Object font_data;
  struct face_cache *face_cache;
  int menu_bar_items_used;
  struct glyph_pool *current_pool;
  struct glyph_pool *desired_pool;
  struct glyph_matrix *desired_matrix;
  struct glyph_matrix *current_matrix;
  bool_bf glyphs_initialized_p : 1;
  bool_bf resized_p : 1;
  bool_bf default_face_done_p : 1;
  bool_bf already_hscrolled_p : 1;
  bool_bf updated_p : 1;
  bool_bf external_tool_bar : 1;
  bool_bf fonts_changed : 1;
  bool_bf cursor_type_changed : 1;
  bool_bf redisplay : 1;
  bool_bf external_menu_bar : 1;
  unsigned visible : 2;
  bool_bf iconified : 1;
  bool_bf garbaged : 1;
  bool_bf wants_modeline : 1;
  bool_bf auto_raise : 1;
  bool_bf auto_lower : 1;
  bool_bf no_split : 1;
  bool_bf explicit_name : 1;
  bool_bf window_configuration_changed : 1;
  bool_bf mouse_moved : 1;
  bool_bf pointer_invisible : 1;
  bool_bf frozen_window_starts : 1;
  enum output_method output_method : 3;
  bool_bf tooltip : 1;
  enum fullscreen_type want_fullscreen : 4;
  enum vertical_scroll_bar_type vertical_scroll_bar_type : 2;
  bool_bf horizontal_scroll_bars : 1;
  bool_bf undecorated : 1;
  bool_bf override_redirect : 1;
  bool_bf skip_taskbar : 1;
  bool_bf no_focus_on_map : 1;
  bool_bf no_accept_focus : 1;
  enum z_group z_group : 2;
  bool_bf no_special_glyphs : 1;
  bool_bf new_pixelwise : 1;
  bool_bf can_x_set_window_size : 1;
  bool_bf after_make_frame : 1;
  bool_bf tool_bar_redisplayed : 1;
  bool_bf tool_bar_resized : 1;
  bool_bf inhibit_horizontal_resize : 1;
  bool_bf inhibit_vertical_resize : 1;
  bool_bf face_change : 1;
  int tool_bar_lines;
  int tool_bar_height;
  int n_tool_bar_rows;
  int n_tool_bar_items;
  char *decode_mode_spec_buffer;
  int *insert_line_cost;
  int *delete_line_cost;
  int *insert_n_lines_cost;
  int *delete_n_lines_cost;
  int text_cols, text_lines;
  int total_cols, total_lines;
  int text_width, text_height;
  int new_width, new_height;
  int left_pos, top_pos;
  int pixel_width, pixel_height;
  int win_gravity;
  int size_hint_flags;
  int border_width;
  int internal_border_width;
  int right_divider_width, bottom_divider_width;
  int left_fringe_width, right_fringe_width;
  int fringe_cols;
  int menu_bar_lines;
  int menu_bar_height;
  int column_width;
  int line_height;
  struct terminal *terminal;
  union output_data
  {
    struct tty_output *tty;
    struct x_output *x;
    struct w32_output *w32;
    struct ns_output *ns;
    intptr_t nothing;
  }
  output_data;
  struct font_driver_list *font_driver_list;
  int wait_event_type;
  enum text_cursor_kinds desired_cursor;
  int cursor_width;
  enum text_cursor_kinds blink_off_cursor;
  int blink_off_cursor_width;
  int config_scroll_bar_width;
  int config_scroll_bar_cols;
  int config_scroll_bar_height;
  int config_scroll_bar_lines;
  int cost_calculation_baud_rate;
  double alpha[2];
  double gamma;
  int extra_line_spacing;
  unsigned long background_pixel;
  unsigned long foreground_pixel;
};
inline void
fset_buffer_list (struct frame *f, Lisp_Object val)
{
  f->buffer_list = val;
}
inline void
fset_buried_buffer_list (struct frame *f, Lisp_Object val)
{
  f->buried_buffer_list = val;
}
inline void
fset_condemned_scroll_bars (struct frame *f, Lisp_Object val)
{
  f->condemned_scroll_bars = val;
}
inline void
fset_face_alist (struct frame *f, Lisp_Object val)
{
  f->face_alist = val;
}
inline void
fset_parent_frame (struct frame *f, Lisp_Object val)
{
  f->parent_frame = val;
}
inline void
fset_focus_frame (struct frame *f, Lisp_Object val)
{
  f->focus_frame = val;
}
inline void
fset_icon_name (struct frame *f, Lisp_Object val)
{
  f->icon_name = val;
}
inline void
fset_menu_bar_items (struct frame *f, Lisp_Object val)
{
  f->menu_bar_items = val;
}
inline void
fset_menu_bar_vector (struct frame *f, Lisp_Object val)
{
  f->menu_bar_vector = val;
}
inline void
fset_name (struct frame *f, Lisp_Object val)
{
  f->name = val;
}
inline void
fset_param_alist (struct frame *f, Lisp_Object val)
{
  f->param_alist = val;
}
inline void
fset_root_window (struct frame *f, Lisp_Object val)
{
  f->root_window = val;
}
inline void
fset_scroll_bars (struct frame *f, Lisp_Object val)
{
  f->scroll_bars = val;
}
inline void
fset_selected_window (struct frame *f, Lisp_Object val)
{
  f->selected_window = val;
}
inline void
fset_title (struct frame *f, Lisp_Object val)
{
  f->title = val;
}
inline void
fset_tool_bar_items (struct frame *f, Lisp_Object val)
{
  f->tool_bar_items = val;
}
inline void
fset_tool_bar_position (struct frame *f, Lisp_Object val)
{
  f->tool_bar_position = val;
}
inline double
NUMVAL (Lisp_Object x)
{
  return NUMBERP (x) ? XFLOATINT (x) : -1;
}
inline double
default_pixels_per_inch_x (void)
{
  Lisp_Object v = (CONSP (globals.f_Vdisplay_pixels_per_inch)
     ? XCAR (globals.f_Vdisplay_pixels_per_inch)
     : globals.f_Vdisplay_pixels_per_inch);
  return NUMVAL (v) > 0 ? NUMVAL (v) : 72.0;
}
inline double
default_pixels_per_inch_y (void)
{
  Lisp_Object v = (CONSP (globals.f_Vdisplay_pixels_per_inch)
     ? XCDR (globals.f_Vdisplay_pixels_per_inch)
     : globals.f_Vdisplay_pixels_per_inch);
  return NUMVAL (v) > 0 ? NUMVAL (v) : 72.0;
}
extern 
      _Bool 
           frame_garbaged;
inline void
SET_FRAME_VISIBLE (struct frame *f, int v)
{
  ((void) (
 0 
 && (0 <= v && v <= 2)));
  if (v)
    {
      if (v == 1 && f->visible != 1)
 redisplay_other_windows ();
      if ((f)->garbaged)
 frame_garbaged = 
                 1
                     ;
    }
  f->visible = v;
}
extern Lisp_Object selected_frame;
extern struct frame *
  decode_window_system_frame (Lisp_Object);
extern struct frame *decode_live_frame (Lisp_Object);
extern struct frame *decode_any_frame (Lisp_Object);
extern struct frame *make_initial_frame (void);
extern struct frame *make_frame (
                                _Bool
                                    );
extern struct frame *make_minibuffer_frame (void);
extern struct frame *make_frame_without_minibuffer (Lisp_Object,
                                                    struct kboard *,
                                                    Lisp_Object);
extern 
      _Bool 
           display_available (void);
inline 
      _Bool
window_system_available (struct frame *f)
{
  return f ? ((f)->output_method == output_x_window) || 
                                  0 
                                                    : display_available ();
}
extern void check_window_system (struct frame *);
extern void frame_make_pointer_invisible (struct frame *);
extern void frame_make_pointer_visible (struct frame *);
extern Lisp_Object delete_frame (Lisp_Object, Lisp_Object);
extern 
      _Bool 
           frame_inhibit_resize (struct frame *, 
                                                 _Bool
                                                     , Lisp_Object);
extern void adjust_frame_size (struct frame *, int, int, int, 
                                                             _Bool
                                                                 , Lisp_Object);
extern void frame_size_history_add (struct frame *f, Lisp_Object fun_symbol,
        int width, int height, Lisp_Object rest);
extern Lisp_Object Vframe_list;
inline int
frame_dimension (int x)
{
  return x;
}
inline int
FRAME_FRINGE_COLS (struct frame *f)
{
  return frame_dimension (f->fringe_cols);
}
inline int
FRAME_LEFT_FRINGE_WIDTH (struct frame *f)
{
  return frame_dimension (f->left_fringe_width);
}
inline int
FRAME_RIGHT_FRINGE_WIDTH (struct frame *f)
{
  return frame_dimension (f->right_fringe_width);
}
inline int
FRAME_TOTAL_FRINGE_WIDTH (struct frame *f)
{
  return FRAME_LEFT_FRINGE_WIDTH (f) + FRAME_RIGHT_FRINGE_WIDTH (f);
}
inline int
FRAME_INTERNAL_BORDER_WIDTH (struct frame *f)
{
  return frame_dimension (f->internal_border_width);
}
inline int
FRAME_RIGHT_DIVIDER_WIDTH (struct frame *f)
{
  return frame_dimension (f->right_divider_width);
}
inline int
FRAME_BOTTOM_DIVIDER_WIDTH (struct frame *f)
{
  return frame_dimension (f->bottom_divider_width);
}
extern void x_set_scroll_bar_default_width (struct frame *);
extern void x_set_scroll_bar_default_height (struct frame *);
extern void x_set_offset (struct frame *, int, int, int);
extern void x_wm_set_size_hint (struct frame *f, long flags, 
                                                            _Bool 
                                                                 user_position);
extern Lisp_Object x_new_font (struct frame *, Lisp_Object, int);
extern void x_set_frame_parameters (struct frame *, Lisp_Object);
extern void x_set_fullscreen (struct frame *, Lisp_Object, Lisp_Object);
extern void x_set_line_spacing (struct frame *, Lisp_Object, Lisp_Object);
extern void x_set_screen_gamma (struct frame *, Lisp_Object, Lisp_Object);
extern void x_set_font (struct frame *, Lisp_Object, Lisp_Object);
extern void x_set_font_backend (struct frame *, Lisp_Object, Lisp_Object);
extern void x_set_left_fringe (struct frame *, Lisp_Object, Lisp_Object);
extern void x_set_right_fringe (struct frame *, Lisp_Object, Lisp_Object);
extern void x_set_border_width (struct frame *, Lisp_Object, Lisp_Object);
extern void x_set_right_divider_width (struct frame *, Lisp_Object,
           Lisp_Object);
extern void x_set_bottom_divider_width (struct frame *, Lisp_Object,
     Lisp_Object);
extern void x_set_visibility (struct frame *, Lisp_Object, Lisp_Object);
extern void x_set_autoraise (struct frame *, Lisp_Object, Lisp_Object);
extern void x_set_autolower (struct frame *, Lisp_Object, Lisp_Object);
extern void x_set_unsplittable (struct frame *, Lisp_Object, Lisp_Object);
extern void x_set_vertical_scroll_bars (struct frame *, Lisp_Object, Lisp_Object);
extern void x_set_horizontal_scroll_bars (struct frame *, Lisp_Object, Lisp_Object);
extern void x_set_scroll_bar_width (struct frame *, Lisp_Object, Lisp_Object);
extern void x_set_scroll_bar_height (struct frame *, Lisp_Object, Lisp_Object);
extern long x_figure_window_size (struct frame *, Lisp_Object, 
                                                              _Bool
                                                                  , int *, int *);
extern void x_set_alpha (struct frame *, Lisp_Object, Lisp_Object);
extern void x_set_no_special_glyphs (struct frame *, Lisp_Object, Lisp_Object);
extern void validate_x_resource_name (void);
extern Lisp_Object display_x_get_resource (Display_Info *,
        Lisp_Object attribute,
        Lisp_Object class,
        Lisp_Object component,
        Lisp_Object subclass);
extern void set_frame_menubar (struct frame *f, 
                                               _Bool 
                                                    first_time, 
                                                                _Bool 
                                                                     deep_p);
extern void x_set_window_size (struct frame *f, 
                                               _Bool 
                                                    change_gravity,
          int width, int height, 
                                _Bool 
                                     pixelwise);
extern Lisp_Object x_get_focus_frame (struct frame *);
extern void frame_set_mouse_pixel_position (struct frame *f, int pix_x, int pix_y);
extern void x_make_frame_visible (struct frame *f);
extern void x_make_frame_invisible (struct frame *f);
extern void x_iconify_frame (struct frame *f);
extern void x_set_frame_alpha (struct frame *f);
extern void x_activate_menubar (struct frame *);
extern void x_real_positions (struct frame *, int *, int *);
extern void free_frame_menubar (struct frame *);
extern void x_free_frame_resources (struct frame *);
extern 
      _Bool 
           frame_ancestor_p (struct frame *af, struct frame *df);
extern enum internal_border_part frame_internal_border_part (struct frame *f, int x, int y);
extern void x_wm_set_icon_position (struct frame *, int, int);
extern char *x_get_resource_string (const char *, const char *);
extern void x_sync (struct frame *);
extern void x_query_colors (struct frame *f, XColor *, int);
extern void x_focus_frame (struct frame *, 
                                          _Bool
                                              );
extern 
      _Bool 
           x_bitmap_icon (struct frame *, Lisp_Object);
inline void
x_set_bitmap_icon (struct frame *f)
{
  Lisp_Object obj = assq_no_quit (builtin_lisp_symbol (612), f->param_alist);
  if (CONSP (obj) && !NILP (XCDR (obj)))
    x_bitmap_icon (f, XCDR (obj));
}
inline void
flush_frame (struct frame *f)
{
  struct redisplay_interface *rif = ((f)->terminal->rif);
  if (rif && rif->flush_display)
    rif->flush_display (f);
}
struct MonitorInfo {
  XRectangle geom, work;
  int mm_width, mm_height;
  char *name;
};
extern void free_monitors (struct MonitorInfo *monitors, int n_monitors);
extern Lisp_Object make_monitor_attribute_list (struct MonitorInfo *monitors,
                                                int n_monitors,
                                                int primary_monitor,
                                                Lisp_Object monitor_frames,
                                                const char *source);
extern volatile int interrupt_input_blocked;
inline void
block_input (void)
{
  interrupt_input_blocked++;
}
extern void unblock_input (void);
extern void totally_unblock_input (void);
extern void unblock_input_to (int);
inline 
      _Bool
input_blocked_p (void)
{
  return interrupt_input_blocked > 0;
}
struct tty_output
{
  struct tty_display_info *display_info;
};
enum { TERMCAP_BUFFER_SIZE = 4096 };
struct tty_display_info
{
  struct tty_display_info *next;
  char *name;
  char *type;
  FILE *input;
  FILE *output;
  FILE *termscript;
  struct emacs_tty *old_tty;
  bool_bf term_initted : 1;
  int reference_count;
  struct terminal *terminal;
  struct cm *Wcm;
  Lisp_Object top_frame;
  struct frame *previous_frame;
  int previous_color_mode;
  Mouse_HLInfo mouse_highlight;
  char termcap_term_buffer[TERMCAP_BUFFER_SIZE];
  char termcap_strings_buffer[TERMCAP_BUFFER_SIZE];
  const char *TS_ins_line;
  const char *TS_ins_multi_lines;
  const char *TS_bell;
  const char *TS_clr_to_bottom;
  const char *TS_clr_line;
  const char *TS_clr_frame;
  const char *TS_set_scroll_region;
  const char *TS_set_scroll_region_1;
  const char *TS_del_char;
  const char *TS_del_multi_chars;
  const char *TS_del_line;
  const char *TS_del_multi_lines;
  const char *TS_delete_mode;
  const char *TS_end_delete_mode;
  const char *TS_end_insert_mode;
  const char *TS_ins_char;
  const char *TS_ins_multi_chars;
  const char *TS_insert_mode;
  const char *TS_pad_inserted_char;
  const char *TS_end_keypad_mode;
  const char *TS_keypad_mode;
  const char *TS_pad_char;
  const char *TS_repeat;
  const char *TS_end_standout_mode;
  const char *TS_fwd_scroll;
  const char *TS_standout_mode;
  const char *TS_rev_scroll;
  const char *TS_end_termcap_modes;
  const char *TS_termcap_modes;
  const char *TS_visible_bell;
  const char *TS_cursor_normal;
  const char *TS_cursor_visible;
  const char *TS_cursor_invisible;
  const char *TS_set_window;
  const char *TS_enter_bold_mode;
  const char *TS_enter_italic_mode;
  const char *TS_enter_dim_mode;
  const char *TS_enter_reverse_mode;
  const char *TS_exit_underline_mode;
  const char *TS_enter_underline_mode;
  const char *TS_enter_alt_charset_mode;
  const char *TS_exit_alt_charset_mode;
  const char *TS_exit_attribute_mode;
  int TN_no_color_video;
  int TN_max_colors;
  const char *TS_orig_pair;
  const char *TS_set_foreground;
  const char *TS_set_background;
  int TF_hazeltine;
  int TF_insmode_motion;
  int TF_standout_motion;
  int TF_underscore;
  int TF_teleray;
  int RPov;
  bool_bf delete_in_insert_mode : 1;
  bool_bf costs_set : 1;
  bool_bf insert_mode : 1;
  bool_bf standout_mode : 1;
  int meta_key;
  int specified_window;
  bool_bf cursor_hidden : 1;
  bool_bf flow_control : 1;
  bool_bf showing_menu : 1;
  bool_bf must_write_spaces : 1;
  bool_bf line_ins_del_ok : 1;
  bool_bf char_ins_del_ok : 1;
  bool_bf scroll_region_ok : 1;
  bool_bf memory_below_frame : 1;
  int scroll_region_cost;
};
extern struct tty_display_info *tty_list;
struct parmcap
  {
    int mincost, maxcost;
  };
struct cm
  {
    int cm_curY;
    int cm_curX;
    const char *cm_up;
    const char *cm_down;
    const char *cm_left;
    const char *cm_right;
    const char *cm_home;
    const char *cm_cr;
    const char *cm_ll;
    const char *cm_tab;
    const char *cm_backtab;
    char *cm_abs;
    const char *cm_habs;
    const char *cm_vabs;
    const char *cm_multiup;
    const char *cm_multidown;
    const char *cm_multileft;
    const char *cm_multiright;
    int cm_cols;
    int cm_rows;
    int cm_tabwidth;
    bool_bf cm_autowrap : 1;
    bool_bf cm_magicwrap : 1;
    bool_bf cm_usetabs : 1;
    bool_bf cm_losewrap : 1;
    bool_bf cm_autolf : 1;
    int cc_up;
    int cc_down;
    int cc_left;
    int cc_right;
    int cc_home;
    int cc_cr;
    int cc_ll;
    int cc_tab;
    int cc_backtab;
    int cc_abs;
    int cc_habs;
    int cc_vabs;
  };
extern int cost;
extern int evalcost (int c);
extern struct tty_display_info *current_tty;
extern void cmcheckmagic (struct tty_display_info *);
extern int cmputc (int);
extern void cmcostinit (struct tty_display_info *);
extern void cmgoto (struct tty_display_info *, int, int);
extern void Wcm_clear (struct tty_display_info *);
extern int Wcm_init (struct tty_display_info *);
Lisp_Object selected_frame;
static struct frame *last_nonminibuf_frame;
_Bool 
    frame_garbaged;
enum { frame_default_tool_bar_height = 0 };
static void x_report_frame_params (struct frame *, Lisp_Object *);
static void
fset_buffer_predicate (struct frame *f, Lisp_Object val)
{
  f->buffer_predicate = val;
}
static void
fset_minibuffer_window (struct frame *f, Lisp_Object val)
{
  f->minibuffer_window = val;
}
struct frame *
decode_live_frame (register Lisp_Object frame)
{
  if (NILP (frame))
    frame = selected_frame;
  CHECK_TYPE (FRAMEP (frame) && (((((void) (
 0 
 && (FRAMEP (frame)))), (struct frame *) XUNTAG (frame, Lisp_Vectorlike)))->terminal != 0), builtin_lisp_symbol (532), frame);
  return (((void) (
        0 
        && (FRAMEP (frame)))), (struct frame *) XUNTAG (frame, Lisp_Vectorlike));
}
struct frame *
decode_any_frame (register Lisp_Object frame)
{
  if (NILP (frame))
    frame = selected_frame;
  CHECK_TYPE (FRAMEP (frame), builtin_lisp_symbol (536), frame);
  return (((void) (
        0 
        && (FRAMEP (frame)))), (struct frame *) XUNTAG (frame, Lisp_Vectorlike));
}
_Bool
display_available (void)
{
  return x_display_list != 
                          ((void *)0)
                              ;
}
struct frame *
decode_window_system_frame (Lisp_Object frame)
{
  struct frame *f = decode_live_frame (frame);
  check_window_system (f);
  return f;
}
void
check_window_system (struct frame *f)
{
  if (window_system_available (f))
    return;
  error (f ? "Window system frame should be used"
  : "Window system is not in use or not initialized");
}
Lisp_Object
get_frame_param (register struct frame *frame, Lisp_Object prop)
{
  register Lisp_Object tem;
  tem = Fassq (prop, frame->param_alist);
  if (EQ (tem, builtin_lisp_symbol (0)))
    return tem;
  return Fcdr (tem);
}
void
frame_size_history_add (struct frame *f, Lisp_Object fun_symbol,
   int width, int height, Lisp_Object rest)
{
  Lisp_Object frame;
  ((((frame) = make_lisp_ptr (f, Lisp_Vectorlike)), ((void) (
 0 
 && (((((union vectorlike_header *) XUNTAG (frame, Lisp_Vectorlike)) ->size) & ((
 (9223372036854775807L) 
 - 
 (9223372036854775807L) 
 / 2) | PVEC_TYPE_MASK)) == ((
 (9223372036854775807L) 
 - 
 (9223372036854775807L) 
 / 2) | (PVEC_FRAME << PSEUDOVECTOR_AREA_BITS)))))));
  if (CONSP (globals.f_frame_size_history)
      && INTEGERP (XCAR (globals.f_frame_size_history))
      && 0 < XINT (XCAR (globals.f_frame_size_history)))
    globals.f_frame_size_history =
      Fcons (make_number (XINT (XCAR (globals.f_frame_size_history)) - 1),
      Fcons (list4
      (frame, fun_symbol,
       ((width > 0)
        ? list4 (make_number ((f)->text_width),
          make_number ((f)->text_height),
          make_number (width),
          make_number (height))
        : builtin_lisp_symbol (0)),
       rest),
      XCDR (globals.f_frame_size_history)));
}
_Bool
frame_inhibit_resize (struct frame *f, 
                                      _Bool 
                                           horizontal, Lisp_Object parameter)
{
  Lisp_Object fullscreen = get_frame_param (f, builtin_lisp_symbol (547));
 _Bool 
      inhibit
    = (f->after_make_frame
       ? (EQ (globals.f_frame_inhibit_implied_resize, builtin_lisp_symbol (1028))
   || (CONSP (globals.f_frame_inhibit_implied_resize)
       && !NILP (Fmemq (parameter, globals.f_frame_inhibit_implied_resize)))
   || (horizontal
       && !EQ (fullscreen, builtin_lisp_symbol (0)) && !EQ (fullscreen, builtin_lisp_symbol (546)))
   || (!horizontal
       && !EQ (fullscreen, builtin_lisp_symbol (0)) && !EQ (fullscreen, builtin_lisp_symbol (548)))
   || ((f)->output_method == output_termcap) || 
                            0
                                             )
       : ((horizontal && f->inhibit_horizontal_resize)
   || (!horizontal && f->inhibit_vertical_resize)));
  if (inhibit && !((f)->output_method == output_termcap) && !
                                         0
                                                          )
    frame_size_history_add
      (f, builtin_lisp_symbol (531), 0, 0,
       list5 (horizontal ? builtin_lisp_symbol (1028) : builtin_lisp_symbol (0), parameter,
       f->after_make_frame ? builtin_lisp_symbol (1028) : builtin_lisp_symbol (0),
       globals.f_frame_inhibit_implied_resize,
       fullscreen));
  return inhibit;
}
static void
set_menu_bar_lines (struct frame *f, Lisp_Object value, Lisp_Object oldval)
{
  int nlines;
  int olines = (f)->menu_bar_lines;
  if (EQ (f->root_window, f->minibuffer_window))
    return;
  if ((INTEGERP (value) && ((! ((int) 0 < (int) -1)) ? ((int) ~ ((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))) <= XINT (value) : 0 <= XINT (value)) && XINT (value) <= ((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))))
    nlines = XINT (value);
  else
    nlines = 0;
  if (nlines != olines)
    {
      windows_or_buffers_changed = 14;
      (f)->menu_bar_lines = nlines;
      (f)->menu_bar_height = nlines * ((f)->line_height);
      change_frame_size (f, (f)->text_cols,
    (f)->text_lines + olines - nlines,
    0, 1, 0, 0);
    }
}
Lisp_Object Vframe_list;
static struct Lisp_Subr Sframep = { { PVEC_SUBR << PSEUDOVECTOR_AREA_BITS }, { .a1 = Fframep }, 1, 1, "framep", 0, 0}; Lisp_Object Fframep
  (Lisp_Object object)
{
  if (!FRAMEP (object))
    return builtin_lisp_symbol (0);
  switch ((((void) (
         0 
         && (FRAMEP (object)))), (struct frame *) XUNTAG (object, Lisp_Vectorlike))->output_method)
    {
    case output_initial:
    case output_termcap:
      return builtin_lisp_symbol (1028);
    case output_x_window:
      return builtin_lisp_symbol (1186);
    case output_w32:
      return builtin_lisp_symbol (1149);
    case output_msdos_raw:
      return builtin_lisp_symbol (858);
    case output_ns:
      return builtin_lisp_symbol (819);
    default:
      emacs_abort ();
    }
}
static struct Lisp_Subr Sframe_live_p = { { PVEC_SUBR << PSEUDOVECTOR_AREA_BITS }, { .a1 = Fframe_live_p }, 1, 1, "frame-live-p", 0, 0}; Lisp_Object Fframe_live_p
  (Lisp_Object object)
{
  return ((FRAMEP (object)
    && (((((void) (
      0 
      && (FRAMEP (object)))), (struct frame *) XUNTAG (object, Lisp_Vectorlike)))->terminal != 0))
   ? Fframep (object)
   : builtin_lisp_symbol (0));
}
static struct Lisp_Subr Swindow_system = { { PVEC_SUBR << PSEUDOVECTOR_AREA_BITS }, { .a1 = Fwindow_system }, 0, 1, "window-system", 0, 0}; Lisp_Object Fwindow_system
  (Lisp_Object frame)
{
  Lisp_Object type;
  if (NILP (frame))
    frame = selected_frame;
  type = Fframep (frame);
  if (NILP (type))
    wrong_type_argument (builtin_lisp_symbol (536), frame);
  if (EQ (type, builtin_lisp_symbol (1028)))
    return builtin_lisp_symbol (0);
  else
    return type;
}
static struct Lisp_Subr Sframe_windows_min_size = { { PVEC_SUBR << PSEUDOVECTOR_AREA_BITS }, { .a4 = Fframe_windows_min_size }, 4, 4, "frame-windows-min-size", 0, 0}; Lisp_Object Fframe_windows_min_size
     (Lisp_Object frame, Lisp_Object horizontal,
      Lisp_Object ignore, Lisp_Object pixelwise)
{
  return make_number (0);
}
static int
frame_windows_min_size (Lisp_Object frame, Lisp_Object horizontal,
   Lisp_Object ignore, Lisp_Object pixelwise)
{
  struct frame *f = (((void) (
                   0 
                   && (FRAMEP (frame)))), (struct frame *) XUNTAG (frame, Lisp_Vectorlike));
  Lisp_Object par_size;
  int retval;
  if ((!NILP (horizontal)
       && NUMBERP (par_size = get_frame_param (f, builtin_lisp_symbol (758))))
      || (NILP (horizontal)
   && NUMBERP (par_size = get_frame_param (f, builtin_lisp_symbol (757)))))
    {
      int min_size = XINT (par_size);
      if (min_size < 1)
 min_size = 1;
      retval = (NILP (pixelwise)
  ? min_size
  : min_size * (NILP (horizontal)
         ? ((f)->line_height)
         : ((f)->column_width)));
    }
  else
    retval = XINT (call4 (builtin_lisp_symbol (535), frame, horizontal,
     ignore, pixelwise));
  if ((((f)->output_method == output_termcap) || 
                             0
                                              ) && NILP (horizontal))
    {
      int min_height = ((f)->menu_bar_lines
   + (f)->wants_modeline
   + 2);
      if (retval < min_height)
 retval = min_height;
    }
  return retval;
}
static void
keep_ratio (struct frame *f, struct frame *p, int old_width, int old_height,
     int new_width, int new_height)
{
  Lisp_Object keep_ratio = get_frame_param (f, builtin_lisp_symbol (674));
  if (!NILP (keep_ratio))
    {
      double width_factor = (double)new_width / (double)old_width;
      double height_factor = (double)new_height / (double)old_height;
      int pixel_width, pixel_height, pos_x, pos_y;
      if (!CONSP (keep_ratio) || !NILP (Fcdr (keep_ratio)))
 {
   if (CONSP (keep_ratio) && EQ (Fcdr (keep_ratio), builtin_lisp_symbol (1064)))
     pos_x = f->left_pos;
   else
     {
       pos_x = (int)(f->left_pos * width_factor + 0.5);
       if (CONSP (keep_ratio)
    && (NILP (Fcar (keep_ratio))
        || EQ (Fcar (keep_ratio), builtin_lisp_symbol (595)))
    && p->pixel_width - f->pixel_width < pos_x)
  {
    int p_f_width = p->pixel_width - f->pixel_width;
    if (p_f_width <= 0)
      pos_x = 0;
    else
      pos_x = (int)(p_f_width * width_factor * 0.5 + 0.5);
  }
       f->left_pos = pos_x;
     }
   if (CONSP (keep_ratio) && EQ (Fcdr (keep_ratio), builtin_lisp_symbol (700)))
     pos_y = f->top_pos;
   else
     {
       pos_y = (int)(f->top_pos * height_factor + 0.5);
       if (CONSP (keep_ratio)
    && (NILP (Fcar (keep_ratio))
        || EQ (Fcar (keep_ratio), builtin_lisp_symbol (1159)))
    && p->pixel_height - f->pixel_height < pos_y)
  {
    int p_f_height = p->pixel_height - f->pixel_height;
    if (p_f_height <= 0)
      pos_y = 0;
    else
      pos_y = (int)(p_f_height * height_factor * 0.5 + 0.5);
  }
       f->top_pos = pos_y;
     }
   x_set_offset (f, pos_x, pos_y, -1);
 }
      if (!CONSP (keep_ratio) || !NILP (Fcar (keep_ratio)))
 {
   if (CONSP (keep_ratio) && EQ (Fcar (keep_ratio), builtin_lisp_symbol (595)))
     pixel_width = -1;
   else
     {
       pixel_width = (int)(f->pixel_width * width_factor + 0.5);
       pixel_width = ((pixel_width) - (((f)->vertical_scroll_bar_type != vertical_scroll_bar_none) ? ((f)->config_scroll_bar_width) : 0) - FRAME_TOTAL_FRINGE_WIDTH (f) - 2 * FRAME_INTERNAL_BORDER_WIDTH (f));
     }
   if (CONSP (keep_ratio) && EQ (Fcar (keep_ratio), builtin_lisp_symbol (1159)))
     pixel_height = -1;
   else
     {
       pixel_height = (int)(f->pixel_height * height_factor + 0.5);
       pixel_height = ((pixel_height) - ((f)->menu_bar_height + (f)->tool_bar_height) - (((f)->horizontal_scroll_bars) ? ((f)->config_scroll_bar_height) : 0) - 2 * FRAME_INTERNAL_BORDER_WIDTH (f));
     }
   adjust_frame_size (f, pixel_width, pixel_height, 1, 0,
        builtin_lisp_symbol (674));
 }
    }
}
void
adjust_frame_size (struct frame *f, int new_width, int new_height, int inhibit,
    _Bool 
         pretend, Lisp_Object parameter)
{
  int unit_width = ((f)->column_width);
  int unit_height = ((f)->line_height);
  int old_pixel_width = ((f)->pixel_width);
  int old_pixel_height = ((f)->pixel_height);
  int old_cols = (f)->text_cols;
  int old_lines = (f)->text_lines;
  int new_pixel_width, new_pixel_height;
  int windows_width = (((f)->pixel_width) - 2 * FRAME_INTERNAL_BORDER_WIDTH (f));
  int windows_height = (((f)->pixel_height) - ((f)->menu_bar_height + (f)->tool_bar_height) - 2 * FRAME_INTERNAL_BORDER_WIDTH (f));
  int min_windows_width, min_windows_height;
  struct window *r = XWINDOW (f->root_window);
  int old_windows_width = (r)->pixel_width;
  int old_windows_height
    = ((r)->pixel_height
       + (((WINDOWP (f->minibuffer_window) && (((void) (
          0 
          && (FRAMEP (XWINDOW (f->minibuffer_window)->frame)))), (struct frame *) XUNTAG (XWINDOW (f->minibuffer_window)->frame, Lisp_Vectorlike)) == f) && !EQ (f->root_window, f->minibuffer_window))
   ? (XWINDOW (f->minibuffer_window))->pixel_height
   : 0));
  int new_windows_width, new_windows_height;
  int old_text_width = (f)->text_width;
  int old_text_height = (f)->text_height;
  int new_text_width = (new_width >= 0) ? new_width : old_text_width;
  int new_text_height = (new_height >= 0) ? new_height : old_text_height;
  int new_cols, new_lines;
 _Bool 
      inhibit_horizontal, inhibit_vertical;
  Lisp_Object frame;
  ((((frame) = make_lisp_ptr (f, Lisp_Vectorlike)), ((void) (
 0 
 && (((((union vectorlike_header *) XUNTAG (frame, Lisp_Vectorlike)) ->size) & ((
 (9223372036854775807L) 
 - 
 (9223372036854775807L) 
 / 2) | PVEC_TYPE_MASK)) == ((
 (9223372036854775807L) 
 - 
 (9223372036854775807L) 
 / 2) | (PVEC_FRAME << PSEUDOVECTOR_AREA_BITS)))))));
  frame_size_history_add
    (f, builtin_lisp_symbol (205), new_text_width, new_text_height,
     list2 (parameter, make_number (inhibit)));
  min_windows_width
    = frame_windows_min_size (frame, builtin_lisp_symbol (1028), (inhibit == 5) ? builtin_lisp_symbol (1028) : builtin_lisp_symbol (0), builtin_lisp_symbol (1028));
  min_windows_height
    = frame_windows_min_size (frame, builtin_lisp_symbol (0), (inhibit == 5) ? builtin_lisp_symbol (1028) : builtin_lisp_symbol (0), builtin_lisp_symbol (1028));
  if (inhibit >= 2 && inhibit <= 4)
    {
      inhibit_horizontal = (windows_width >= min_windows_width
                            && (inhibit == 4
                                || frame_inhibit_resize (f, 
                                                           1
                                                               , parameter)));
      inhibit_vertical = (windows_height >= min_windows_height
                          && (inhibit == 4
                              || frame_inhibit_resize (f, 
                                                         0
                                                              , parameter)));
    }
  else
    inhibit_horizontal = inhibit_vertical = inhibit == 5;
  new_pixel_width = ((inhibit_horizontal && (inhibit < 5))
       ? old_pixel_width
       : ((((new_text_width) + (((f)->vertical_scroll_bar_type != vertical_scroll_bar_none) ? ((f)->config_scroll_bar_width) : 0) + FRAME_TOTAL_FRINGE_WIDTH (f) + 2 * FRAME_INTERNAL_BORDER_WIDTH (f))) > (min_windows_width + 2 * FRAME_INTERNAL_BORDER_WIDTH (f)) ? (((new_text_width) + (((f)->vertical_scroll_bar_type != vertical_scroll_bar_none) ? ((f)->config_scroll_bar_width) : 0) + FRAME_TOTAL_FRINGE_WIDTH (f) + 2 * FRAME_INTERNAL_BORDER_WIDTH (f))) : (min_windows_width + 2 * FRAME_INTERNAL_BORDER_WIDTH (f)))
                                             );
  new_windows_width = new_pixel_width - 2 * FRAME_INTERNAL_BORDER_WIDTH (f);
  new_text_width = ((new_pixel_width) - (((f)->vertical_scroll_bar_type != vertical_scroll_bar_none) ? ((f)->config_scroll_bar_width) : 0) - FRAME_TOTAL_FRINGE_WIDTH (f) - 2 * FRAME_INTERNAL_BORDER_WIDTH (f));
  new_cols = new_text_width / unit_width;
  new_pixel_height = ((inhibit_vertical && (inhibit < 5))
        ? old_pixel_height
        : ((((new_text_height) + ((f)->menu_bar_height + (f)->tool_bar_height) + (((f)->horizontal_scroll_bars) ? ((f)->config_scroll_bar_height) : 0) + 2 * FRAME_INTERNAL_BORDER_WIDTH (f))) > (min_windows_height + ((f)->menu_bar_height + (f)->tool_bar_height) + 2 * FRAME_INTERNAL_BORDER_WIDTH (f)) ? (((new_text_height) + ((f)->menu_bar_height + (f)->tool_bar_height) + (((f)->horizontal_scroll_bars) ? ((f)->config_scroll_bar_height) : 0) + 2 * FRAME_INTERNAL_BORDER_WIDTH (f))) : (min_windows_height + ((f)->menu_bar_height + (f)->tool_bar_height) + 2 * FRAME_INTERNAL_BORDER_WIDTH (f)))
                                              );
  new_windows_height = (new_pixel_height
   - ((f)->menu_bar_height + (f)->tool_bar_height)
   - 2 * FRAME_INTERNAL_BORDER_WIDTH (f));
  new_text_height = ((new_pixel_height) - ((f)->menu_bar_height + (f)->tool_bar_height) - (((f)->horizontal_scroll_bars) ? ((f)->config_scroll_bar_height) : 0) - 2 * FRAME_INTERNAL_BORDER_WIDTH (f));
  new_lines = new_text_height / unit_height;
  if (((f)->output_method == output_x_window)
      && f->can_x_set_window_size
      && ((!inhibit_horizontal
    && (new_pixel_width != old_pixel_width
        || inhibit == 0 || inhibit == 2))
   || (!inhibit_vertical
       && (new_pixel_height != old_pixel_height
    || inhibit == 0 || inhibit == 2))))
    {
      if (inhibit_horizontal)
 new_text_width = old_text_width;
      else if (inhibit_vertical)
 new_text_height = old_text_height;
      frame_size_history_add
 (f, builtin_lisp_symbol (206), new_text_width, new_text_height,
  list2 (inhibit_horizontal ? builtin_lisp_symbol (1028) : builtin_lisp_symbol (0),
  inhibit_vertical ? builtin_lisp_symbol (1028) : builtin_lisp_symbol (0)));
      x_set_window_size (f, 0, new_text_width, new_text_height, 1);
      f->resized_p = 
                    1
                        ;
      return;
    }
  if (new_text_width == old_text_width
      && new_text_height == old_text_height
      && new_windows_width == old_windows_width
      && new_windows_height == old_windows_height
      && new_pixel_width == old_pixel_width
      && new_pixel_height == old_pixel_height
      && new_cols == old_cols
      && new_lines == old_lines)
    {
      sanitize_window_sizes (builtin_lisp_symbol (1028));
      sanitize_window_sizes (builtin_lisp_symbol (0));
      return;
    }
  block_input ();
  if (new_windows_width != old_windows_width)
    {
      resize_frame_windows (f, new_windows_width, 1, 1);
      if ((((f)->output_method == output_termcap) && !pretend) || 
                                              0
                                                               )
 ((((f)->output_method == output_termcap || (f)->output_method == output_msdos_raw) ? (f)->terminal->display_info.tty : (emacs_abort (), (struct tty_display_info *) 0)))->Wcm->cm_cols = new_cols;
    }
  else if (new_cols != old_cols)
    call2 (builtin_lisp_symbol (1161), frame, builtin_lisp_symbol (1028));
  if (new_windows_height != old_windows_height
      || (r)->pixel_top != ((f)->menu_bar_height + (f)->tool_bar_height))
    {
      resize_frame_windows (f, new_windows_height, 0, 1);
      if ((((f)->output_method == output_termcap) && !pretend) || 
                                              0
                                                               )
 ((((f)->output_method == output_termcap || (f)->output_method == output_msdos_raw) ? (f)->terminal->display_info.tty : (emacs_abort (), (struct tty_display_info *) 0)))->Wcm->cm_rows = new_lines + ((f)->menu_bar_lines + (f)->tool_bar_lines);
    }
  else if (new_lines != old_lines)
    call2 (builtin_lisp_symbol (1161), frame, builtin_lisp_symbol (0));
  frame_size_history_add
    (f, builtin_lisp_symbol (207), new_text_width, new_text_height,
     list4 (make_number (old_pixel_width), make_number (old_pixel_height),
     make_number (new_pixel_width), make_number (new_pixel_height)));
  (f)->text_width = new_text_width;
  (f)->text_height = new_text_height;
  ((f)->pixel_width) = new_pixel_width;
  ((f)->pixel_height) = new_pixel_height;
  ((f)->text_cols = (new_cols), (f)->total_cols = ((new_cols) + (((f)->vertical_scroll_bar_type != vertical_scroll_bar_none) ? ((f)->config_scroll_bar_cols) : 0) + FRAME_FRINGE_COLS (f)));
  ((f)->text_lines = (new_lines), (f)->total_lines = ((new_lines) + ((f)->menu_bar_lines + (f)->tool_bar_lines) + (((f)->horizontal_scroll_bars) ? ((f)->config_scroll_bar_lines) : 0)));
  {
    struct window *w = XWINDOW (f->selected_window);
    int text_area_x, text_area_y, text_area_width, text_area_height;
    window_box (w, TEXT_AREA, &text_area_x, &text_area_y, &text_area_width,
  &text_area_height);
    if (w->cursor.x >= text_area_x + text_area_width)
      w->cursor.hpos = w->cursor.x = 0;
    if (w->cursor.y >= text_area_y + text_area_height)
      w->cursor.vpos = w->cursor.y = 0;
  }
  sanitize_window_sizes (builtin_lisp_symbol (1028));
  sanitize_window_sizes (builtin_lisp_symbol (0));
  adjust_frame_glyphs (f);
  calculate_costs (f);
  (frame_garbaged = 
 1
 , fset_redisplay (f), f->garbaged = 
 1
 );
  f->resized_p = (new_pixel_width != old_pixel_width
    || new_pixel_height != old_pixel_height);
  unblock_input ();
  {
    Lisp_Object frames, frame1;
    for ((frames) = Vframe_list; (CONSP (frames) && (frame1 = XCAR (frames), 
   1
   )); frames = XCDR (frames))
      if ((NILP (((((void) (
         0 
         && (FRAMEP (frame1)))), (struct frame *) XUNTAG (frame1, Lisp_Vectorlike)))->parent_frame) ? 
         ((void *)0) 
         : (((void) (
         0 
         && (FRAMEP (((((void) (
         0 
         && (FRAMEP (frame1)))), (struct frame *) XUNTAG (frame1, Lisp_Vectorlike)))->parent_frame)))), (struct frame *) XUNTAG (((((void) (
         0 
         && (FRAMEP (frame1)))), (struct frame *) XUNTAG (frame1, Lisp_Vectorlike)))->parent_frame, Lisp_Vectorlike))) == f)
 keep_ratio ((((void) (
            0 
            && (FRAMEP (frame1)))), (struct frame *) XUNTAG (frame1, Lisp_Vectorlike)), f, old_pixel_width, old_pixel_height,
      new_pixel_width, new_pixel_height);
  }
}
static struct frame *
allocate_frame (void)
{
  return ((struct frame *) allocate_pseudovector (((sizeof (struct frame) - header_size + word_size - 1) / word_size), ((
        __builtin_offsetof (
        struct frame
        , 
        face_cache
        ) 
        - header_size) / word_size), ((sizeof (struct frame) - header_size + word_size - 1) / word_size), PVEC_FRAME));
}
struct frame *
make_frame (
           _Bool 
                mini_p)
{
  Lisp_Object frame;
  struct frame *f;
  struct window *rw, *mw = {0,};
  Lisp_Object root_window;
  Lisp_Object mini_window;
  f = allocate_frame ();
  ((((frame) = make_lisp_ptr (f, Lisp_Vectorlike)), ((void) (
 0 
 && (((((union vectorlike_header *) XUNTAG (frame, Lisp_Vectorlike)) ->size) & ((
 (9223372036854775807L) 
 - 
 (9223372036854775807L) 
 / 2) | PVEC_TYPE_MASK)) == ((
 (9223372036854775807L) 
 - 
 (9223372036854775807L) 
 / 2) | (PVEC_FRAME << PSEUDOVECTOR_AREA_BITS)))))));
  fset_tool_bar_position (f, builtin_lisp_symbol (1058));
  f->wants_modeline = 
                     1
                         ;
  f->redisplay = 
                1
                    ;
  f->garbaged = 
               1
                   ;
  f->can_x_set_window_size = 
                            0
                                 ;
  f->after_make_frame = 
                       0
                            ;
  f->inhibit_horizontal_resize = 
                                0
                                     ;
  f->inhibit_vertical_resize = 
                              0
                                   ;
  f->tool_bar_redisplayed = 
                           0
                                ;
  f->tool_bar_resized = 
                       0
                            ;
  f->column_width = 1;
  f->line_height = 1;
  f->vertical_scroll_bar_type = vertical_scroll_bar_none;
  f->horizontal_scroll_bars = 
                             0
                                  ;
  f->want_fullscreen = FULLSCREEN_NONE;
  f->undecorated = 
                  0
                       ;
  f->no_special_glyphs = 
                        0
                             ;
  f->override_redirect = 
                        0
                             ;
  f->skip_taskbar = 
                   0
                        ;
  f->no_focus_on_map = 
                      0
                           ;
  f->no_accept_focus = 
                      0
                           ;
  f->z_group = z_group_none;
  f->tooltip = 
              0
                   ;
  root_window = make_window ();
  rw = XWINDOW (root_window);
  if (mini_p)
    {
      mini_window = make_window ();
      mw = XWINDOW (mini_window);
      wset_next (rw, mini_window);
      wset_prev (mw, root_window);
      mw->mini = 1;
      wset_frame (mw, frame);
      fset_minibuffer_window (f, mini_window);
      store_frame_param (f, builtin_lisp_symbol (760), builtin_lisp_symbol (1028));
    }
  else
    {
      mini_window = builtin_lisp_symbol (0);
      wset_next (rw, builtin_lisp_symbol (0));
      fset_minibuffer_window (f, builtin_lisp_symbol (0));
    }
  wset_frame (rw, frame);
  ((f)->text_cols = (10), (f)->total_cols = ((10) + (((f)->vertical_scroll_bar_type != vertical_scroll_bar_none) ? ((f)->config_scroll_bar_cols) : 0) + FRAME_FRINGE_COLS (f)));
  ((f)->text_lines = (10), (f)->total_lines = ((10) + ((f)->menu_bar_lines + (f)->tool_bar_lines) + (((f)->horizontal_scroll_bars) ? ((f)->config_scroll_bar_lines) : 0)));
  ((f)->text_width = ((f)->text_cols * ((f)->column_width)), (f)->pixel_width = (((f)->text_cols * ((f)->column_width)) + (((f)->vertical_scroll_bar_type != vertical_scroll_bar_none) ? ((f)->config_scroll_bar_width) : 0) + FRAME_TOTAL_FRINGE_WIDTH (f) + 2 * FRAME_INTERNAL_BORDER_WIDTH (f)));
  ((f)->text_height = ((f)->text_lines * ((f)->line_height)), (f)->pixel_height = (((f)->text_lines * ((f)->line_height)) + ((f)->menu_bar_height + (f)->tool_bar_height) + (((f)->horizontal_scroll_bars) ? ((f)->config_scroll_bar_height) : 0) + 2 * FRAME_INTERNAL_BORDER_WIDTH (f)));
  rw->total_cols = 10;
  rw->pixel_width = rw->total_cols * ((f)->column_width);
  rw->total_lines = mini_p ? 9 : 10;
  rw->pixel_height = rw->total_lines * ((f)->line_height);
  if (mini_p)
    {
      mw->top_line = rw->total_lines;
      mw->pixel_top = rw->pixel_height;
      mw->total_cols = rw->total_cols;
      mw->pixel_width = rw->pixel_width;
      mw->total_lines = 1;
      mw->pixel_height = ((f)->line_height);
    }
  {
    Lisp_Object buf = Fcurrent_buffer ();
    if ((SREF (((XBUFFER (buf))->name_), 0) == ' '))
      buf = other_buffer_safely (buf);
    set_window_buffer (root_window, buf, 0, 0);
    fset_buffer_list (f, list1 (buf));
  }
  if (mini_p)
    {
      set_window_buffer (mini_window,
    (NILP (Vminibuffer_list)
     ? get_minibuffer (0)
     : Fcar (Vminibuffer_list)),
    0, 0);
      wset_horizontal_scroll_bar (mw, builtin_lisp_symbol (0));
    }
  fset_root_window (f, root_window);
  fset_selected_window (f, root_window);
  XWINDOW (f->selected_window)->use_time = ++window_select_count;
  return f;
}
struct frame *
make_frame_without_minibuffer (Lisp_Object mini_window, KBOARD *kb,
          Lisp_Object display)
{
  struct frame *f;
  if (!NILP (mini_window))
    CHECK_TYPE ((WINDOWP (mini_window) && BUFFERP (XWINDOW (mini_window)->contents)), builtin_lisp_symbol (1173), mini_window);
  if (!NILP (mini_window)
      && (((((void) (
        0 
        && (FRAMEP (XWINDOW (mini_window)->frame)))), (struct frame *) XUNTAG (XWINDOW (mini_window)->frame, Lisp_Vectorlike)))->terminal->kboard) != kb)
    error ("Frame and minibuffer must be on the same terminal");
  f = make_frame (0);
  if (NILP (mini_window))
    {
      if (!FRAMEP (((kb)->Vdefault_minibuffer_frame_))
   || ! (((((void) (
       0 
       && (FRAMEP (((kb)->Vdefault_minibuffer_frame_))))), (struct frame *) XUNTAG (((kb)->Vdefault_minibuffer_frame_), Lisp_Vectorlike)))->terminal != 0))
 {
          Lisp_Object frame_dummy;
          ((((frame_dummy) = make_lisp_ptr (f, Lisp_Vectorlike)), ((void) (
         0 
         && (((((union vectorlike_header *) XUNTAG (frame_dummy, Lisp_Vectorlike)) ->size) & ((
         (9223372036854775807L) 
         - 
         (9223372036854775807L) 
         / 2) | PVEC_TYPE_MASK)) == ((
         (9223372036854775807L) 
         - 
         (9223372036854775807L) 
         / 2) | (PVEC_FRAME << PSEUDOVECTOR_AREA_BITS)))))));
   kset_default_minibuffer_frame
     (kb, call1 (intern ("make-initial-minibuffer-frame"), display));
 }
      mini_window
 = (((void) (
  0 
  && (FRAMEP (((kb)->Vdefault_minibuffer_frame_))))), (struct frame *) XUNTAG (((kb)->Vdefault_minibuffer_frame_), Lisp_Vectorlike))->minibuffer_window;
    }
  fset_minibuffer_window (f, mini_window);
  store_frame_param (f, builtin_lisp_symbol (760), mini_window);
  if (NILP (Fmemq (XWINDOW (mini_window)->contents, Vminibuffer_list)))
    set_window_buffer (mini_window,
         (NILP (Vminibuffer_list)
   ? get_minibuffer (0)
   : Fcar (Vminibuffer_list)), 0, 0);
  return f;
}
struct frame *
make_minibuffer_frame (void)
{
  register struct frame *f = make_frame (0);
  register Lisp_Object mini_window;
  register Lisp_Object frame;
  ((((frame) = make_lisp_ptr (f, Lisp_Vectorlike)), ((void) (
 0 
 && (((((union vectorlike_header *) XUNTAG (frame, Lisp_Vectorlike)) ->size) & ((
 (9223372036854775807L) 
 - 
 (9223372036854775807L) 
 / 2) | PVEC_TYPE_MASK)) == ((
 (9223372036854775807L) 
 - 
 (9223372036854775807L) 
 / 2) | (PVEC_FRAME << PSEUDOVECTOR_AREA_BITS)))))));
  f->auto_raise = 0;
  f->auto_lower = 0;
  f->no_split = 1;
  f->wants_modeline = 0;
  mini_window = f->root_window;
  fset_minibuffer_window (f, mini_window);
  store_frame_param (f, builtin_lisp_symbol (760), builtin_lisp_symbol (829));
  XWINDOW (mini_window)->mini = 1;
  wset_next (XWINDOW (mini_window), builtin_lisp_symbol (0));
  wset_prev (XWINDOW (mini_window), builtin_lisp_symbol (0));
  wset_frame (XWINDOW (mini_window), frame);
  set_window_buffer (mini_window,
       (NILP (Vminibuffer_list)
        ? get_minibuffer (0)
        : Fcar (Vminibuffer_list)), 0, 0);
  return f;
}
static printmax_t tty_frame_count;
struct frame *
make_initial_frame (void)
{
  struct frame *f;
  struct terminal *terminal;
  Lisp_Object frame;
  ((void) (
 0 
 && (initial_kboard)));
  if (! (NILP (Vframe_list) || CONSP (Vframe_list)))
    Vframe_list = builtin_lisp_symbol (0);
  terminal = init_initial_terminal ();
  f = make_frame (1);
  ((((frame) = make_lisp_ptr (f, Lisp_Vectorlike)), ((void) (
 0 
 && (((((union vectorlike_header *) XUNTAG (frame, Lisp_Vectorlike)) ->size) & ((
 (9223372036854775807L) 
 - 
 (9223372036854775807L) 
 / 2) | PVEC_TYPE_MASK)) == ((
 (9223372036854775807L) 
 - 
 (9223372036854775807L) 
 / 2) | (PVEC_FRAME << PSEUDOVECTOR_AREA_BITS)))))));
  Vframe_list = Fcons (frame, Vframe_list);
  tty_frame_count = 1;
  fset_name (f, build_pure_c_string ("F1"));
  SET_FRAME_VISIBLE (f, 1);
  f->output_method = terminal->type;
  f->terminal = terminal;
  f->terminal->reference_count++;
  f->output_data.nothing = 0;
  ((f)->foreground_pixel) = ((unsigned long) -2);
  ((f)->background_pixel) = ((unsigned long) -3);
  f->vertical_scroll_bar_type = vertical_scroll_bar_none;
  f->horizontal_scroll_bars = 
                             0
                                  ;
  set_menu_bar_lines (f, make_number (1), builtin_lisp_symbol (0));
  adjust_frame_glyphs (f);
  if (!noninteractive)
    init_frame_faces (f);
  last_nonminibuf_frame = f;
  f->can_x_set_window_size = 
                            1
                                ;
  f->after_make_frame = 
                       1
                           ;
  return f;
}
static struct frame *
make_terminal_frame (struct terminal *terminal)
{
  register struct frame *f;
  Lisp_Object frame;
  char name[sizeof "F" + (((((sizeof (printmax_t) * 8) - (! ((__typeof__ (printmax_t)) 0 < (__typeof__ (printmax_t)) -1))) * 146 + 484) / 485) + (! ((__typeof__ (printmax_t)) 0 < (__typeof__ (printmax_t)) -1)))];
  if (!terminal->name)
    error ("Terminal is not live, can't create new frames on it");
  f = make_frame (1);
  ((((frame) = make_lisp_ptr (f, Lisp_Vectorlike)), ((void) (
 0 
 && (((((union vectorlike_header *) XUNTAG (frame, Lisp_Vectorlike)) ->size) & ((
 (9223372036854775807L) 
 - 
 (9223372036854775807L) 
 / 2) | PVEC_TYPE_MASK)) == ((
 (9223372036854775807L) 
 - 
 (9223372036854775807L) 
 / 2) | (PVEC_FRAME << PSEUDOVECTOR_AREA_BITS)))))));
  Vframe_list = Fcons (frame, Vframe_list);
  fset_name (f, make_formatted_string (name, "F%"
                                                "l" "d"
                                                   , ++tty_frame_count));
  SET_FRAME_VISIBLE (f, 1);
  f->terminal = terminal;
  f->terminal->reference_count++;
  f->output_method = output_termcap;
  create_tty_output (f);
  ((f)->foreground_pixel) = ((unsigned long) -2);
  ((f)->background_pixel) = ((unsigned long) -3);
  f->vertical_scroll_bar_type = vertical_scroll_bar_none;
  f->horizontal_scroll_bars = 
                             0
                                  ;
  (f)->menu_bar_lines = NILP (globals.f_Vmenu_bar_mode) ? 0 : 1;
  (f)->text_lines = (f)->text_lines - (f)->menu_bar_lines;
  (f)->menu_bar_height = (f)->menu_bar_lines * ((f)->line_height);
  (f)->text_height = (f)->text_height - (f)->menu_bar_height;
  if (FRAMEP ((((f)->output_method == output_termcap || (f)->output_method == output_msdos_raw) ? (f)->terminal->display_info.tty : (emacs_abort (), (struct tty_display_info *) 0))->top_frame)
      && (((((void) (
        0 
        && (FRAMEP ((((f)->output_method == output_termcap || (f)->output_method == output_msdos_raw) ? (f)->terminal->display_info.tty : (emacs_abort (), (struct tty_display_info *) 0))->top_frame)))), (struct frame *) XUNTAG ((((f)->output_method == output_termcap || (f)->output_method == output_msdos_raw) ? (f)->terminal->display_info.tty : (emacs_abort (), (struct tty_display_info *) 0))->top_frame, Lisp_Vectorlike)))->terminal != 0))
    SET_FRAME_VISIBLE ((((void) (
                      0 
                      && (FRAMEP ((((f)->output_method == output_termcap || (f)->output_method == output_msdos_raw) ? (f)->terminal->display_info.tty : (emacs_abort (), (struct tty_display_info *) 0))->top_frame)))), (struct frame *) XUNTAG ((((f)->output_method == output_termcap || (f)->output_method == output_msdos_raw) ? (f)->terminal->display_info.tty : (emacs_abort (), (struct tty_display_info *) 0))->top_frame, Lisp_Vectorlike)), 2);
  (((f)->output_method == output_termcap || (f)->output_method == output_msdos_raw) ? (f)->terminal->display_info.tty : (emacs_abort (), (struct tty_display_info *) 0))->top_frame = frame;
  if (!noninteractive)
    init_frame_faces (f);
  return f;
}
static Lisp_Object
get_future_frame_param (Lisp_Object parameter,
                        Lisp_Object supplied_parms,
                        char *current_value)
{
  Lisp_Object result;
  result = Fassq (parameter, supplied_parms);
  if (NILP (result))
    result = Fassq (parameter, (((void) (
                              0 
                              && (FRAMEP (selected_frame)))), (struct frame *) XUNTAG (selected_frame, Lisp_Vectorlike))->param_alist);
  if (NILP (result) && current_value != 
                                       ((void *)0)
                                           )
    result = build_string (current_value);
  if (!NILP (result) && !STRINGP (result))
    result = XCDR (result);
  if (NILP (result) || !STRINGP (result))
    result = builtin_lisp_symbol (0);
  return result;
}
static struct Lisp_Subr Smake_terminal_frame = { { PVEC_SUBR << PSEUDOVECTOR_AREA_BITS }, { .a1 = Fmake_terminal_frame }, 1, 1, "make-terminal-frame", 0, 0}; Lisp_Object Fmake_terminal_frame
  (Lisp_Object parms)
{
  struct frame *f;
  struct terminal *t = 
                      ((void *)0)
                          ;
  Lisp_Object frame, tem;
  struct frame *sf = ((FRAMEP (selected_frame) && (((((void) (
                    0 
                    && (FRAMEP (selected_frame)))), (struct frame *) XUNTAG (selected_frame, Lisp_Vectorlike)))->terminal != 0)) ? (((void) (
                    0 
                    && (FRAMEP (selected_frame)))), (struct frame *) XUNTAG (selected_frame, Lisp_Vectorlike)) : (emacs_abort (), (struct frame *) 0));
  {
    Lisp_Object terminal;
    terminal = Fassq (builtin_lisp_symbol (1033), parms);
    if (CONSP (terminal))
      {
        terminal = XCDR (terminal);
        t = decode_live_terminal (terminal);
      }
  }
  if (!t)
    {
      char *name = 0, *type = 0;
      Lisp_Object tty, tty_type;
      ptrdiff_t sa_avail = MAX_ALLOCA; ptrdiff_t sa_count = SPECPDL_INDEX (); 
     _Bool 
     sa_must_free = 
     0
                    ;
      tty = get_future_frame_param
        (builtin_lisp_symbol (1073), parms, ((((((void) (
                      0 
                      && (FRAMEP (selected_frame)))), (struct frame *) XUNTAG (selected_frame, Lisp_Vectorlike)))->output_method == output_termcap)
                       ? ((((((void) (
                        0 
                        && (FRAMEP (selected_frame)))), (struct frame *) XUNTAG (selected_frame, Lisp_Vectorlike)))->output_method == output_termcap || ((((void) (
                        0 
                        && (FRAMEP (selected_frame)))), (struct frame *) XUNTAG (selected_frame, Lisp_Vectorlike)))->output_method == output_msdos_raw) ? ((((void) (
                        0 
                        && (FRAMEP (selected_frame)))), (struct frame *) XUNTAG (selected_frame, Lisp_Vectorlike)))->terminal->display_info.tty : (emacs_abort (), (struct tty_display_info *) 0))->name
                       : 
                        ((void *)0)
                            ));
      if (!NILP (tty))
 do { (name) = ((SBYTES (tty) + 1) <= sa_avail ? (sa_avail -= (SBYTES (tty) + 1), 
__builtin_alloca (
SBYTES (tty) + 1
)
) : (sa_must_free = 
1
, record_xmalloc (SBYTES (tty) + 1))); memcpy (name, SDATA (tty), SBYTES (tty) + 1); } while (
0
);
      tty_type = get_future_frame_param
        (builtin_lisp_symbol (1090), parms, ((((((void) (
                           0 
                           && (FRAMEP (selected_frame)))), (struct frame *) XUNTAG (selected_frame, Lisp_Vectorlike)))->output_method == output_termcap)
                            ? ((((((void) (
                             0 
                             && (FRAMEP (selected_frame)))), (struct frame *) XUNTAG (selected_frame, Lisp_Vectorlike)))->output_method == output_termcap || ((((void) (
                             0 
                             && (FRAMEP (selected_frame)))), (struct frame *) XUNTAG (selected_frame, Lisp_Vectorlike)))->output_method == output_msdos_raw) ? ((((void) (
                             0 
                             && (FRAMEP (selected_frame)))), (struct frame *) XUNTAG (selected_frame, Lisp_Vectorlike)))->terminal->display_info.tty : (emacs_abort (), (struct tty_display_info *) 0))->type
                            : 
                             ((void *)0)
                                 ));
      if (!NILP (tty_type))
 do { (type) = ((SBYTES (tty_type) + 1) <= sa_avail ? (sa_avail -= (SBYTES (tty_type) + 1), 
__builtin_alloca (
SBYTES (tty_type) + 1
)
) : (sa_must_free = 
1
, record_xmalloc (SBYTES (tty_type) + 1))); memcpy (type, SDATA (tty_type), SBYTES (tty_type) + 1); } while (
0
);
      t = init_tty (name, type, 0);
      do { if (sa_must_free) { sa_must_free = 
     0
     ; unbind_to (sa_count, builtin_lisp_symbol (0)); } } while (
     0
     );
    }
  f = make_terminal_frame (t);
  {
    int width, height;
    get_tty_size (fileno ((((f)->output_method == output_termcap || (f)->output_method == output_msdos_raw) ? (f)->terminal->display_info.tty : (emacs_abort (), (struct tty_display_info *) 0))->input), &width, &height);
    adjust_frame_size (f, width, height - (f)->menu_bar_lines,
         5, 0, builtin_lisp_symbol (1034));
  }
  adjust_frame_glyphs (f);
  calculate_costs (f);
  ((((frame) = make_lisp_ptr (f, Lisp_Vectorlike)), ((void) (
 0 
 && (((((union vectorlike_header *) XUNTAG (frame, Lisp_Vectorlike)) ->size) & ((
 (9223372036854775807L) 
 - 
 (9223372036854775807L) 
 / 2) | PVEC_TYPE_MASK)) == ((
 (9223372036854775807L) 
 - 
 (9223372036854775807L) 
 / 2) | (PVEC_FRAME << PSEUDOVECTOR_AREA_BITS)))))));
  store_in_alist (&parms, builtin_lisp_symbol (1090), build_string (t->display_info.tty->type));
  store_in_alist (&parms, builtin_lisp_symbol (1073),
    (t->display_info.tty->name
     ? build_string (t->display_info.tty->name)
     : builtin_lisp_symbol (0)));
  store_in_alist (&parms, builtin_lisp_symbol (760), builtin_lisp_symbol (1028));
  Fmodify_frame_parameters (frame, parms);
  fset_face_alist (f, Fcopy_alist (sf->face_alist));
  for (tem = f->face_alist; CONSP (tem); tem = XCDR (tem))
    XSETCDR (XCAR (tem), Fcopy_sequence (XCDR (XCAR (tem))));
  f->can_x_set_window_size = 
                            1
                                ;
  f->after_make_frame = 
                       1
                           ;
  return frame;
}
Lisp_Object
do_switch_frame (Lisp_Object frame, int track, int for_deletion, Lisp_Object norecord)
{
  struct frame *sf = ((FRAMEP (selected_frame) && (((((void) (
                    0 
                    && (FRAMEP (selected_frame)))), (struct frame *) XUNTAG (selected_frame, Lisp_Vectorlike)))->terminal != 0)) ? (((void) (
                    0 
                    && (FRAMEP (selected_frame)))), (struct frame *) XUNTAG (selected_frame, Lisp_Vectorlike)) : (emacs_abort (), (struct frame *) 0)), *f;
  if (CONSP (frame)
      && EQ (XCAR (frame), builtin_lisp_symbol (1021))
      && CONSP (XCDR (frame)))
    frame = XCAR (XCDR (frame));
  CHECK_TYPE (FRAMEP (frame), builtin_lisp_symbol (536), frame);
  f = (((void) (
     0 
     && (FRAMEP (frame)))), (struct frame *) XUNTAG (frame, Lisp_Vectorlike));
  if (!((f)->terminal != 0))
    return builtin_lisp_symbol (0);
  else if (f == sf)
    return frame;
  if (track && ((f)->output_method == output_x_window))
    {
      Lisp_Object focus, xfocus;
      xfocus = x_get_focus_frame (f);
      if (FRAMEP (xfocus))
 {
   focus = (((void) (
          0 
          && (FRAMEP (xfocus)))), (struct frame *) XUNTAG (xfocus, Lisp_Vectorlike))->focus_frame;
   if ((FRAMEP (focus) && (((void) (
                         0 
                         && (FRAMEP (focus)))), (struct frame *) XUNTAG (focus, Lisp_Vectorlike)) == ((FRAMEP (selected_frame) && (((((void) (
                                           0 
                                           && (FRAMEP (selected_frame)))), (struct frame *) XUNTAG (selected_frame, Lisp_Vectorlike)))->terminal != 0)) ? (((void) (
                                           0 
                                           && (FRAMEP (selected_frame)))), (struct frame *) XUNTAG (selected_frame, Lisp_Vectorlike)) : (emacs_abort (), (struct frame *) 0)))
       || (NILP (focus)
    && EQ (f->minibuffer_window, sf->selected_window)))
     Fredirect_frame_focus (xfocus, frame);
 }
    }
  if (!for_deletion && (WINDOWP (sf->minibuffer_window) && (((void) (
                      0 
                      && (FRAMEP (XWINDOW (sf->minibuffer_window)->frame)))), (struct frame *) XUNTAG (XWINDOW (sf->minibuffer_window)->frame, Lisp_Vectorlike)) == sf))
    resize_mini_window (XWINDOW (sf->minibuffer_window), 1);
  if (((f)->output_method == output_termcap) || 
                            0
                                             )
    {
      struct tty_display_info *tty = (((f)->output_method == output_termcap || (f)->output_method == output_msdos_raw) ? (f)->terminal->display_info.tty : (emacs_abort (), (struct tty_display_info *) 0));
      Lisp_Object top_frame = tty->top_frame;
      if (!EQ (frame, top_frame))
 {
   if (FRAMEP (top_frame))
     SET_FRAME_VISIBLE ((((void) (
                       0 
                       && (FRAMEP (top_frame)))), (struct frame *) XUNTAG (top_frame, Lisp_Vectorlike)), 2);
   SET_FRAME_VISIBLE (f, 1);
   if ((f)->text_cols != (tty)->Wcm->cm_cols)
     (tty)->Wcm->cm_cols = (f)->text_cols;
   if (((f)->total_lines) != (tty)->Wcm->cm_rows)
     (tty)->Wcm->cm_rows = ((f)->total_lines);
 }
      tty->top_frame = frame;
    }
  selected_frame = frame;
  if (! EQ ((((void) (
       0 
       && (FRAMEP (selected_frame)))), (struct frame *) XUNTAG (selected_frame, Lisp_Vectorlike))->root_window, (((void) (
       0 
       && (FRAMEP (selected_frame)))), (struct frame *) XUNTAG (selected_frame, Lisp_Vectorlike))->minibuffer_window))
    last_nonminibuf_frame = (((void) (
                           0 
                           && (FRAMEP (selected_frame)))), (struct frame *) XUNTAG (selected_frame, Lisp_Vectorlike));
  Fselect_window (f->selected_window, norecord);
  if (!frame_ancestor_p (f, sf))
    internal_last_event_frame = builtin_lisp_symbol (0);
  return frame;
}
static struct Lisp_Subr Sselect_frame = { { PVEC_SUBR << PSEUDOVECTOR_AREA_BITS }, { .a2 = Fselect_frame }, 1, 2, "select-frame", "e", 0}; Lisp_Object Fselect_frame
  (Lisp_Object frame, Lisp_Object norecord)
{
  return do_switch_frame (frame, 1, 0, norecord);
}
static struct Lisp_Subr Shandle_switch_frame = { { PVEC_SUBR << PSEUDOVECTOR_AREA_BITS }, { .a1 = Fhandle_switch_frame }, 1, 1, "handle-switch-frame", "^e", 0}; Lisp_Object Fhandle_switch_frame
  (Lisp_Object event)
{
  Lisp_Object value;
  kset_prefix_arg (current_kboard, globals.f_Vcurrent_prefix_arg);
  run_hook (builtin_lisp_symbol (791));
  value = do_switch_frame (event, 0, 0, builtin_lisp_symbol (0));
  call1 (intern ("handle-focus-in"), event);
  return value;
}
static struct Lisp_Subr Sselected_frame = { { PVEC_SUBR << PSEUDOVECTOR_AREA_BITS }, { .a0 = Fselected_frame }, 0, 0, "selected-frame", 0, 0}; Lisp_Object Fselected_frame
  (void)
{
  return selected_frame;
}
static struct Lisp_Subr Sframe_list = { { PVEC_SUBR << PSEUDOVECTOR_AREA_BITS }, { .a0 = Fframe_list }, 0, 0, "frame-list", 0, 0}; Lisp_Object Fframe_list
  (void)
{
  Lisp_Object list = builtin_lisp_symbol (0), tail, frame;
  for ((tail) = Vframe_list; (CONSP (tail) && (frame = XCAR (tail), 
 1
 )); tail = XCDR (tail))
    if (!(((((void) (
        0 
        && (FRAMEP (frame)))), (struct frame *) XUNTAG (frame, Lisp_Vectorlike)))->tooltip))
      list = Fcons (frame, list);
  return Fnreverse (list);
}
static struct Lisp_Subr Sframe_parent = { { PVEC_SUBR << PSEUDOVECTOR_AREA_BITS }, { .a1 = Fframe_parent }, 0, 1, "frame-parent", 0, 0}; Lisp_Object Fframe_parent
     (Lisp_Object frame)
{
  struct frame *f = decode_live_frame (frame);
  struct frame *p = (NILP ((f)->parent_frame) ? 
                   ((void *)0) 
                   : (((void) (
                   0 
                   && (FRAMEP ((f)->parent_frame)))), (struct frame *) XUNTAG ((f)->parent_frame, Lisp_Vectorlike)));
  Lisp_Object parent;
  if (p)
    {
      ((((parent) = make_lisp_ptr (p, Lisp_Vectorlike)), ((void) (
     0 
     && (((((union vectorlike_header *) XUNTAG (parent, Lisp_Vectorlike)) ->size) & ((
     (9223372036854775807L) 
     - 
     (9223372036854775807L) 
     / 2) | PVEC_TYPE_MASK)) == ((
     (9223372036854775807L) 
     - 
     (9223372036854775807L) 
     / 2) | (PVEC_FRAME << PSEUDOVECTOR_AREA_BITS)))))));
      return parent;
    }
  else
    return builtin_lisp_symbol (0);
}
_Bool
frame_ancestor_p (struct frame *af, struct frame *df)
{
  struct frame *pf = (NILP ((df)->parent_frame) ? 
                    ((void *)0) 
                    : (((void) (
                    0 
                    && (FRAMEP ((df)->parent_frame)))), (struct frame *) XUNTAG ((df)->parent_frame, Lisp_Vectorlike)));
  while (pf)
    {
      if (pf == af)
 return 
       1
           ;
      else
 pf = (NILP ((pf)->parent_frame) ? 
     ((void *)0) 
     : (((void) (
     0 
     && (FRAMEP ((pf)->parent_frame)))), (struct frame *) XUNTAG ((pf)->parent_frame, Lisp_Vectorlike)));
    }
  return 
        0
             ;
}
static struct Lisp_Subr Sframe_ancestor_p = { { PVEC_SUBR << PSEUDOVECTOR_AREA_BITS }, { .a2 = Fframe_ancestor_p }, 2, 2, "frame-ancestor-p", 0, 0}; Lisp_Object Fframe_ancestor_p
     (Lisp_Object ancestor, Lisp_Object descendant)
{
  struct frame *af = decode_live_frame (ancestor);
  struct frame *df = decode_live_frame (descendant);
  return frame_ancestor_p (af, df) ? builtin_lisp_symbol (1028) : builtin_lisp_symbol (0);
  }
static Lisp_Object
candidate_frame (Lisp_Object candidate, Lisp_Object frame, Lisp_Object minibuf)
{
  struct frame *c = (((void) (
                   0 
                   && (FRAMEP (candidate)))), (struct frame *) XUNTAG (candidate, Lisp_Vectorlike)), *f = (((void) (
                                            0 
                                            && (FRAMEP (frame)))), (struct frame *) XUNTAG (frame, Lisp_Vectorlike));
  if ((!((c)->output_method == output_termcap) && !((f)->output_method == output_termcap)
       && ((c)->terminal->kboard) == ((f)->terminal->kboard))
      || (((c)->output_method == output_termcap) && ((f)->output_method == output_termcap)
   && (((c)->output_method == output_termcap || (c)->output_method == output_msdos_raw) ? (c)->terminal->display_info.tty : (emacs_abort (), (struct tty_display_info *) 0)) == (((f)->output_method == output_termcap || (f)->output_method == output_msdos_raw) ? (f)->terminal->display_info.tty : (emacs_abort (), (struct tty_display_info *) 0))))
    {
      if (!NILP (get_frame_param (c, builtin_lisp_symbol (811))))
 return builtin_lisp_symbol (0);
      else if (NILP (minibuf))
 {
   if (!EQ (c->root_window, c->minibuffer_window))
     return candidate;
 }
      else if (EQ (minibuf, builtin_lisp_symbol (1144)))
 {
   if ((c)->visible)
     return candidate;
 }
      else if (WINDOWP (minibuf))
 {
   if (EQ (c->minibuffer_window, minibuf)
       || EQ (((XWINDOW (minibuf))->frame), candidate)
       || EQ (((XWINDOW (minibuf))->frame),
       c->focus_frame))
     return candidate;
 }
      else if (INTEGERP (minibuf) && XINT (minibuf) == 0)
 {
   if ((c)->visible || (c)->iconified)
     return candidate;
 }
      else
 return candidate;
    }
  return builtin_lisp_symbol (0);
}
static Lisp_Object
next_frame (Lisp_Object frame, Lisp_Object minibuf)
{
  Lisp_Object f, tail;
  int passed = 0;
  ((CONSP (Vframe_list)) ? (void) 0 : __builtin_unreachable ());
  while (passed < 2)
    for ((tail) = Vframe_list; (CONSP (tail) && (f = XCAR (tail), 
   1
   )); tail = XCDR (tail))
      {
 if (passed)
   {
     f = candidate_frame (f, frame, minibuf);
     if (!NILP (f))
       return f;
   }
 if (EQ (frame, f))
   passed++;
      }
  return frame;
}
static Lisp_Object
prev_frame (Lisp_Object frame, Lisp_Object minibuf)
{
  Lisp_Object f, tail, prev = builtin_lisp_symbol (0);
  ((CONSP (Vframe_list)) ? (void) 0 : __builtin_unreachable ());
  for ((tail) = Vframe_list; (CONSP (tail) && (f = XCAR (tail), 
 1
 )); tail = XCDR (tail))
    {
      if (EQ (frame, f) && !NILP (prev))
 return prev;
      f = candidate_frame (f, frame, minibuf);
      if (!NILP (f))
 prev = f;
    }
  if (NILP (prev))
    return frame;
  else
    return prev;
}
static struct Lisp_Subr Snext_frame = { { PVEC_SUBR << PSEUDOVECTOR_AREA_BITS }, { .a2 = Fnext_frame }, 0, 2, "next-frame", 0, 0}; Lisp_Object Fnext_frame
  (Lisp_Object frame, Lisp_Object miniframe)
{
  if (NILP (frame))
    frame = selected_frame;
  CHECK_TYPE (FRAMEP (frame) && (((((void) (
 0 
 && (FRAMEP (frame)))), (struct frame *) XUNTAG (frame, Lisp_Vectorlike)))->terminal != 0), builtin_lisp_symbol (532), frame);
  return next_frame (frame, miniframe);
}
static struct Lisp_Subr Sprevious_frame = { { PVEC_SUBR << PSEUDOVECTOR_AREA_BITS }, { .a2 = Fprevious_frame }, 0, 2, "previous-frame", 0, 0}; Lisp_Object Fprevious_frame
  (Lisp_Object frame, Lisp_Object miniframe)
{
  if (NILP (frame))
    frame = selected_frame;
  CHECK_TYPE (FRAMEP (frame) && (((((void) (
 0 
 && (FRAMEP (frame)))), (struct frame *) XUNTAG (frame, Lisp_Vectorlike)))->terminal != 0), builtin_lisp_symbol (532), frame);
  return prev_frame (frame, miniframe);
}
static struct Lisp_Subr Slast_nonminibuf_frame = { { PVEC_SUBR << PSEUDOVECTOR_AREA_BITS }, { .a0 = Flast_nonminibuf_frame }, 0, 0, "last-nonminibuffer-frame", 0, 0}; Lisp_Object Flast_nonminibuf_frame
  (void)
{
  Lisp_Object frame = builtin_lisp_symbol (0);
  if (last_nonminibuf_frame)
    ((((frame) = make_lisp_ptr (last_nonminibuf_frame, Lisp_Vectorlike)), ((void) (
   0 
   && (((((union vectorlike_header *) XUNTAG (frame, Lisp_Vectorlike)) ->size) & ((
   (9223372036854775807L) 
   - 
   (9223372036854775807L) 
   / 2) | PVEC_TYPE_MASK)) == ((
   (9223372036854775807L) 
   - 
   (9223372036854775807L) 
   / 2) | (PVEC_FRAME << PSEUDOVECTOR_AREA_BITS)))))));
  return frame;
}
static 
      _Bool
other_frames (struct frame *f, 
                              _Bool 
                                   invisible, 
                                              _Bool 
                                                   force)
{
  Lisp_Object frames, frame, frame1;
  Lisp_Object minibuffer_window = f->minibuffer_window;
  ((((frame) = make_lisp_ptr (f, Lisp_Vectorlike)), ((void) (
 0 
 && (((((union vectorlike_header *) XUNTAG (frame, Lisp_Vectorlike)) ->size) & ((
 (9223372036854775807L) 
 - 
 (9223372036854775807L) 
 / 2) | PVEC_TYPE_MASK)) == ((
 (9223372036854775807L) 
 - 
 (9223372036854775807L) 
 / 2) | (PVEC_FRAME << PSEUDOVECTOR_AREA_BITS)))))));
  if (WINDOWP (minibuffer_window)
      && !EQ (frame, ((XWINDOW (minibuffer_window))->frame)))
    minibuffer_window = builtin_lisp_symbol (0);
  for ((frames) = Vframe_list; (CONSP (frames) && (frame1 = XCAR (frames), 
 1
 )); frames = XCDR (frames))
    {
      struct frame *f1 = (((void) (
                        0 
                        && (FRAMEP (frame1)))), (struct frame *) XUNTAG (frame1, Lisp_Vectorlike));
      if (f != f1)
 {
   if (((f1)->output_method == output_x_window))
     x_sync (f1);
   if (!((f1)->tooltip)
       && !(NILP ((f1)->parent_frame) ? 
          ((void *)0) 
          : (((void) (
          0 
          && (FRAMEP ((f1)->parent_frame)))), (struct frame *) XUNTAG ((f1)->parent_frame, Lisp_Vectorlike)))
       && (invisible || NILP (get_frame_param (f1, builtin_lisp_symbol (391))))
       && ((f1)->visible || (f1)->iconified
    || (!invisible
        && (force
     || (((f1)->output_method == output_x_window) && !((f)->output_method == output_x_window))))))
     return 
           1
               ;
 }
    }
  return 
        0
             ;
}
static void
check_minibuf_window (Lisp_Object frame, int select)
{
  struct frame *f = decode_live_frame (frame);
  ((((frame) = make_lisp_ptr (f, Lisp_Vectorlike)), ((void) (
 0 
 && (((((union vectorlike_header *) XUNTAG (frame, Lisp_Vectorlike)) ->size) & ((
 (9223372036854775807L) 
 - 
 (9223372036854775807L) 
 / 2) | PVEC_TYPE_MASK)) == ((
 (9223372036854775807L) 
 - 
 (9223372036854775807L) 
 / 2) | (PVEC_FRAME << PSEUDOVECTOR_AREA_BITS)))))));
  if (WINDOWP (minibuf_window) && EQ (f->minibuffer_window, minibuf_window))
    {
      Lisp_Object frames, this, window = make_number (0);
      if (!EQ (frame, selected_frame)
   && (WINDOWP ((((void) (
     0 
     && (FRAMEP (selected_frame)))), (struct frame *) XUNTAG (selected_frame, Lisp_Vectorlike))->minibuffer_window) && (((void) (
     0 
     && (FRAMEP (XWINDOW ((((void) (
     0 
     && (FRAMEP (selected_frame)))), (struct frame *) XUNTAG (selected_frame, Lisp_Vectorlike))->minibuffer_window)->frame)))), (struct frame *) XUNTAG (XWINDOW ((((void) (
     0 
     && (FRAMEP (selected_frame)))), (struct frame *) XUNTAG (selected_frame, Lisp_Vectorlike))->minibuffer_window)->frame, Lisp_Vectorlike)) == (((void) (
     0 
     && (FRAMEP (selected_frame)))), (struct frame *) XUNTAG (selected_frame, Lisp_Vectorlike))))
 window = (((void) (
         0 
         && (FRAMEP (selected_frame)))), (struct frame *) XUNTAG (selected_frame, Lisp_Vectorlike))->minibuffer_window;
      else
 for ((frames) = Vframe_list; (CONSP (frames) && (this = XCAR (frames), 
1
)); frames = XCDR (frames))
   {
     if (!EQ (this, frame) && (WINDOWP ((((void) (
                             0 
                             && (FRAMEP (this)))), (struct frame *) XUNTAG (this, Lisp_Vectorlike))->minibuffer_window) && (((void) (
                             0 
                             && (FRAMEP (XWINDOW ((((void) (
                             0 
                             && (FRAMEP (this)))), (struct frame *) XUNTAG (this, Lisp_Vectorlike))->minibuffer_window)->frame)))), (struct frame *) XUNTAG (XWINDOW ((((void) (
                             0 
                             && (FRAMEP (this)))), (struct frame *) XUNTAG (this, Lisp_Vectorlike))->minibuffer_window)->frame, Lisp_Vectorlike)) == (((void) (
                             0 
                             && (FRAMEP (this)))), (struct frame *) XUNTAG (this, Lisp_Vectorlike))))
       {
  window = (((void) (
          0 
          && (FRAMEP (this)))), (struct frame *) XUNTAG (this, Lisp_Vectorlike))->minibuffer_window;
  break;
       }
   }
      if (WINDOWP (window))
 {
   set_window_buffer (window, XWINDOW (minibuf_window)->contents, 0, 0);
   minibuf_window = window;
   if (select)
     Fselect_window (minibuf_window, builtin_lisp_symbol (0));
 }
    }
}
Lisp_Object
delete_frame (Lisp_Object frame, Lisp_Object force)
{
  struct frame *f = decode_any_frame (frame);
  struct frame *sf;
  struct kboard *kb;
  Lisp_Object frames, frame1;
  int minibuffer_selected, is_tooltip_frame;
 _Bool 
      nochild = !(NILP ((f)->parent_frame) ? 
                 ((void *)0) 
                 : (((void) (
                 0 
                 && (FRAMEP ((f)->parent_frame)))), (struct frame *) XUNTAG ((f)->parent_frame, Lisp_Vectorlike)));
  if (!((f)->terminal != 0))
    return builtin_lisp_symbol (0);
  else if (!EQ (force, builtin_lisp_symbol (815)) && !other_frames (f, 
                                                     0
                                                          , !NILP (force)))
    {
      if (NILP (force))
 error ("Attempt to delete the sole visible or iconified frame");
      else
 error ("Attempt to delete the only frame");
    }
  ((((frame) = make_lisp_ptr (f, Lisp_Vectorlike)), ((void) (
 0 
 && (((((union vectorlike_header *) XUNTAG (frame, Lisp_Vectorlike)) ->size) & ((
 (9223372036854775807L) 
 - 
 (9223372036854775807L) 
 / 2) | PVEC_TYPE_MASK)) == ((
 (9223372036854775807L) 
 - 
 (9223372036854775807L) 
 / 2) | (PVEC_FRAME << PSEUDOVECTOR_AREA_BITS)))))));
  for ((frames) = Vframe_list; (CONSP (frames) && (frame1 = XCAR (frames), 
 1
 )); frames = XCDR (frames))
    if ((NILP (((((void) (
       0 
       && (FRAMEP (frame1)))), (struct frame *) XUNTAG (frame1, Lisp_Vectorlike)))->parent_frame) ? 
       ((void *)0) 
       : (((void) (
       0 
       && (FRAMEP (((((void) (
       0 
       && (FRAMEP (frame1)))), (struct frame *) XUNTAG (frame1, Lisp_Vectorlike)))->parent_frame)))), (struct frame *) XUNTAG (((((void) (
       0 
       && (FRAMEP (frame1)))), (struct frame *) XUNTAG (frame1, Lisp_Vectorlike)))->parent_frame, Lisp_Vectorlike))) == f
 || (nochild
     && EQ (get_frame_param ((((void) (
                            0 
                            && (FRAMEP (frame1)))), (struct frame *) XUNTAG (frame1, Lisp_Vectorlike)), builtin_lisp_symbol (391)), frame)))
      delete_frame (frame1, builtin_lisp_symbol (0));
  if ((WINDOWP (f->minibuffer_window) && (((void) (
     0 
     && (FRAMEP (XWINDOW (f->minibuffer_window)->frame)))), (struct frame *) XUNTAG (XWINDOW (f->minibuffer_window)->frame, Lisp_Vectorlike)) == f))
    {
      for ((frames) = Vframe_list; (CONSP (frames) && (frame1 = XCAR (frames), 
     1
     )); frames = XCDR (frames))
 {
   Lisp_Object fminiw;
   if (EQ (frame1, frame))
     continue;
   fminiw = (((void) (
           0 
           && (FRAMEP (frame1)))), (struct frame *) XUNTAG (frame1, Lisp_Vectorlike))->minibuffer_window;
   if (WINDOWP (fminiw) && EQ (frame, ((XWINDOW (fminiw))->frame)))
     {
       if (EQ (force, builtin_lisp_symbol (815)))
  delete_frame (frame1, builtin_lisp_symbol (815));
       else
  error ("Attempt to delete a surrogate minibuffer frame");
     }
 }
    }
  is_tooltip_frame = ((f)->tooltip);
  if (NILP (Vrun_hooks) || is_tooltip_frame)
    ;
  else if (EQ (force, builtin_lisp_symbol (815)))
    pending_funcalls
      = Fcons (list3 (builtin_lisp_symbol (940), builtin_lisp_symbol (396), frame),
        pending_funcalls);
  else
    {
      x_clipboard_manager_save_frame (frame);
      safe_call2 (builtin_lisp_symbol (940), builtin_lisp_symbol (396), frame);
    }
  if (!((f)->terminal != 0))
    return builtin_lisp_symbol (0);
  else if (!EQ (force, builtin_lisp_symbol (815)) && !other_frames (f, 
                                                     0
                                                          , !NILP (force)))
    {
      if (NILP (force))
 error ("Attempt to delete the sole visible or iconified frame");
      else
 error ("Attempt to delete the only frame");
    }
  minibuffer_selected = EQ (minibuf_window, selected_window);
  sf = ((FRAMEP (selected_frame) && (((((void) (
      0 
      && (FRAMEP (selected_frame)))), (struct frame *) XUNTAG (selected_frame, Lisp_Vectorlike)))->terminal != 0)) ? (((void) (
      0 
      && (FRAMEP (selected_frame)))), (struct frame *) XUNTAG (selected_frame, Lisp_Vectorlike)) : (emacs_abort (), (struct frame *) 0));
  if (f == sf)
    {
      Lisp_Object tail;
      ((CONSP (Vframe_list)) ? (void) 0 : __builtin_unreachable ());
      for ((tail) = Vframe_list; (CONSP (tail) && (frame1 = XCAR (tail), 
     1
     )); tail = XCDR (tail))
 {
   struct frame *f1 = (((void) (
                     0 
                     && (FRAMEP (frame1)))), (struct frame *) XUNTAG (frame1, Lisp_Vectorlike));
   if (!EQ (frame, frame1)
       && !((f1)->tooltip)
       && ((f)->terminal) == ((f1)->terminal)
       && (f1)->visible)
     break;
 }
      if (NILP (frame1) || EQ (frame1, frame))
 {
   for ((tail) = Vframe_list; (CONSP (tail) && (frame1 = XCAR (tail), 
  1
  )); tail = XCDR (tail))
     {
       struct frame *f1 = (((void) (
                         0 
                         && (FRAMEP (frame1)))), (struct frame *) XUNTAG (frame1, Lisp_Vectorlike));
       if (!EQ (frame, frame1)
    && ((f1)->terminal != 0)
    && !((f1)->tooltip))
  {
    if (((f1)->output_method == output_termcap) || 
                               0
                                                 )
      {
        Lisp_Object top_frame = (((f1)->output_method == output_termcap || (f1)->output_method == output_msdos_raw) ? (f1)->terminal->display_info.tty : (emacs_abort (), (struct tty_display_info *) 0))->top_frame;
        if (!EQ (top_frame, frame))
   frame1 = top_frame;
      }
    break;
  }
     }
 }
      do_switch_frame (frame1, 0, 1, builtin_lisp_symbol (0));
      sf = ((FRAMEP (selected_frame) && (((((void) (
          0 
          && (FRAMEP (selected_frame)))), (struct frame *) XUNTAG (selected_frame, Lisp_Vectorlike)))->terminal != 0)) ? (((void) (
          0 
          && (FRAMEP (selected_frame)))), (struct frame *) XUNTAG (selected_frame, Lisp_Vectorlike)) : (emacs_abort (), (struct frame *) 0));
    }
  check_minibuf_window (frame, minibuffer_selected);
  if (EQ (f->minibuffer_window, echo_area_window))
    echo_area_window = sf->minibuffer_window;
  if (((f)->output_method == output_x_window))
    x_clear_frame_selections (f);
  free_glyphs (f);
  font_update_drivers (f, builtin_lisp_symbol (0));
  delete_all_child_windows (f->root_window);
  fset_root_window (f, builtin_lisp_symbol (0));
  Vframe_list = Fdelq (frame, Vframe_list);
  SET_FRAME_VISIBLE (f, 0);
  fset_menu_bar_vector (f, builtin_lisp_symbol (0));
  fset_buffer_list (f, builtin_lisp_symbol (0));
  fset_buried_buffer_list (f, builtin_lisp_symbol (0));
  free_font_driver_list (f);
  xfree (f->decode_mode_spec_buffer);
  xfree ((f)->insert_line_cost);
  xfree ((f)->delete_n_lines_cost);
  xfree ((f)->insert_n_lines_cost);
  xfree ((f)->delete_line_cost);
  {
    struct terminal *terminal;
    block_input ();
    if (((f)->terminal)->delete_frame_hook)
      (*((f)->terminal)->delete_frame_hook) (f);
    terminal = ((f)->terminal);
    f->output_data.nothing = 0;
    f->terminal = 0;
    unblock_input ();
    terminal->reference_count--;
    if (terminal->reference_count == 0 && terminal->type == output_x_window)
      terminal->reference_count = 1;
    if (terminal->reference_count == 0)
      {
 Lisp_Object tmp;
 ((((tmp) = make_lisp_ptr (terminal, Lisp_Vectorlike)), ((void) (
0 
&& (((((union vectorlike_header *) XUNTAG (tmp, Lisp_Vectorlike)) ->size) & ((
(9223372036854775807L) 
- 
(9223372036854775807L) 
/ 2) | PVEC_TYPE_MASK)) == ((
(9223372036854775807L) 
- 
(9223372036854775807L) 
/ 2) | (PVEC_TERMINAL << PSEUDOVECTOR_AREA_BITS)))))));
        kb = 
            ((void *)0)
                ;
 Fdelete_terminal (tmp, NILP (force) ? builtin_lisp_symbol (1028) : force);
      }
    else
      kb = terminal->kboard;
  }
  if (f == last_nonminibuf_frame)
    {
      last_nonminibuf_frame = 0;
      for ((frames) = Vframe_list; (CONSP (frames) && (frame1 = XCAR (frames), 
     1
     )); frames = XCDR (frames))
 {
   struct frame *f1 = (((void) (
                     0 
                     && (FRAMEP (frame1)))), (struct frame *) XUNTAG (frame1, Lisp_Vectorlike));
   if (!EQ (f1->root_window, f1->minibuffer_window))
     {
       last_nonminibuf_frame = f1;
       break;
     }
 }
    }
  if (kb != 
           ((void *)0)
               )
    {
      Lisp_Object frame_on_same_kboard = builtin_lisp_symbol (0);
      for ((frames) = Vframe_list; (CONSP (frames) && (frame1 = XCAR (frames), 
     1
     )); frames = XCDR (frames))
 if (kb == (((((void) (
          0 
          && (FRAMEP (frame1)))), (struct frame *) XUNTAG (frame1, Lisp_Vectorlike)))->terminal->kboard))
   frame_on_same_kboard = frame1;
      if (NILP (frame_on_same_kboard))
 not_single_kboard_state (kb);
    }
  if (kb != 
           ((void *)0) 
                && EQ (frame, ((kb)->Vdefault_minibuffer_frame_)))
    {
      Lisp_Object frame_with_minibuf = builtin_lisp_symbol (0);
      Lisp_Object frame_on_same_kboard = builtin_lisp_symbol (0);
      for ((frames) = Vframe_list; (CONSP (frames) && (frame1 = XCAR (frames), 
     1
     )); frames = XCDR (frames))
 {
   struct frame *f1 = (((void) (
                     0 
                     && (FRAMEP (frame1)))), (struct frame *) XUNTAG (frame1, Lisp_Vectorlike));
   if (kb == ((f1)->terminal->kboard)
       && (WINDOWP (f1->minibuffer_window) && (((void) (
         0 
         && (FRAMEP (XWINDOW (f1->minibuffer_window)->frame)))), (struct frame *) XUNTAG (XWINDOW (f1->minibuffer_window)->frame, Lisp_Vectorlike)) == f1))
     {
       frame_with_minibuf = frame1;
       if (EQ (f1->root_window, f1->minibuffer_window))
  break;
     }
   if (kb == ((f1)->terminal->kboard))
     frame_on_same_kboard = frame1;
 }
      if (!NILP (frame_on_same_kboard))
 {
   if (NILP (frame_with_minibuf))
     emacs_abort ();
   kset_default_minibuffer_frame (kb, frame_with_minibuf);
 }
      else
 kset_default_minibuffer_frame (kb, builtin_lisp_symbol (0));
    }
  if (!is_tooltip_frame)
    update_mode_lines = 15;
  return builtin_lisp_symbol (0);
}
static struct Lisp_Subr Sdelete_frame = { { PVEC_SUBR << PSEUDOVECTOR_AREA_BITS }, { .a2 = Fdelete_frame }, 0, 2, "delete-frame", "", 0}; Lisp_Object Fdelete_frame
  (Lisp_Object frame, Lisp_Object force)
{
  return delete_frame (frame, !NILP (force) ? builtin_lisp_symbol (1028) : builtin_lisp_symbol (0));
}
enum internal_border_part
frame_internal_border_part (struct frame *f, int x, int y)
{
  int border = FRAME_INTERNAL_BORDER_WIDTH (f);
  int offset = ((f)->line_height);
  int width = ((f)->pixel_width);
  int height = ((f)->pixel_height);
  enum internal_border_part part = INTERNAL_BORDER_NONE;
  if (offset < border)
    offset = border;
  if (offset < x && x < width - offset)
    {
      if (0 <= y && y <= border)
 part = INTERNAL_BORDER_TOP_EDGE;
      else if (height - border <= y && y <= height)
 part = INTERNAL_BORDER_BOTTOM_EDGE;
    }
  else if (offset < y && y < height - offset)
    {
      if (0 <= x && x <= border)
 part = INTERNAL_BORDER_LEFT_EDGE;
      else if (width - border <= x && x <= width)
 part = INTERNAL_BORDER_RIGHT_EDGE;
    }
  else
    {
      int half_width = width / 2;
      int half_height = height / 2;
      if (0 <= x && x <= border)
 {
   if (0 <= y && y <= half_height)
      part = INTERNAL_BORDER_TOP_LEFT_CORNER;
   else if (half_height < y && y <= height)
      part = INTERNAL_BORDER_BOTTOM_LEFT_CORNER;
 }
      else if (width - border <= x && x <= width)
 {
   if (0 <= y && y <= half_height)
      part = INTERNAL_BORDER_TOP_RIGHT_CORNER;
   else if (half_height < y && y <= height)
      part = INTERNAL_BORDER_BOTTOM_RIGHT_CORNER;
 }
      else if (0 <= y && y <= border)
 {
   if (0 <= x && x <= half_width)
      part = INTERNAL_BORDER_TOP_LEFT_CORNER;
   else if (half_width < x && x <= width)
     part = INTERNAL_BORDER_TOP_RIGHT_CORNER;
 }
      else if (height - border <= y && y <= height)
 {
   if (0 <= x && x <= half_width)
      part = INTERNAL_BORDER_BOTTOM_LEFT_CORNER;
   else if (half_width < x && x <= width)
     part = INTERNAL_BORDER_BOTTOM_RIGHT_CORNER;
 }
    }
  return part;
}
static struct Lisp_Subr Smouse_position = { { PVEC_SUBR << PSEUDOVECTOR_AREA_BITS }, { .a0 = Fmouse_position }, 0, 0, "mouse-position", 0, 0}; Lisp_Object Fmouse_position
  (void)
{
  struct frame *f;
  Lisp_Object lispy_dummy;
  Lisp_Object x, y, retval;
  f = ((FRAMEP (selected_frame) && (((((void) (
     0 
     && (FRAMEP (selected_frame)))), (struct frame *) XUNTAG (selected_frame, Lisp_Vectorlike)))->terminal != 0)) ? (((void) (
     0 
     && (FRAMEP (selected_frame)))), (struct frame *) XUNTAG (selected_frame, Lisp_Vectorlike)) : (emacs_abort (), (struct frame *) 0));
  x = y = builtin_lisp_symbol (0);
  if (((f)->terminal)->mouse_position_hook)
    {
      enum scroll_bar_part party_dummy;
      Time time_dummy;
      (*((f)->terminal)->mouse_position_hook) (&f, -1,
        &lispy_dummy, &party_dummy,
        &x, &y,
        &time_dummy);
    }
  if (! NILP (x))
    {
      int col = XINT (x);
      int row = XINT (y);
      pixel_to_glyph_coords (f, col, row, &col, &row, 
                                                     ((void *)0)
                                                         , 1);
      ((x) = make_number (col));
      ((y) = make_number (row));
    }
  ((((lispy_dummy) = make_lisp_ptr (f, Lisp_Vectorlike)), ((void) (
 0 
 && (((((union vectorlike_header *) XUNTAG (lispy_dummy, Lisp_Vectorlike)) ->size) & ((
 (9223372036854775807L) 
 - 
 (9223372036854775807L) 
 / 2) | PVEC_TYPE_MASK)) == ((
 (9223372036854775807L) 
 - 
 (9223372036854775807L) 
 / 2) | (PVEC_FRAME << PSEUDOVECTOR_AREA_BITS)))))));
  retval = Fcons (lispy_dummy, Fcons (x, y));
  if (!NILP (globals.f_Vmouse_position_function))
    retval = call1 (globals.f_Vmouse_position_function, retval);
  return retval;
}
static struct Lisp_Subr Smouse_pixel_position = { { PVEC_SUBR << PSEUDOVECTOR_AREA_BITS }, { .a0 = Fmouse_pixel_position }, 0, 0, "mouse-pixel-position", 0, 0}; Lisp_Object Fmouse_pixel_position
  (void)
{
  struct frame *f;
  Lisp_Object lispy_dummy;
  Lisp_Object x, y, retval;
  f = ((FRAMEP (selected_frame) && (((((void) (
     0 
     && (FRAMEP (selected_frame)))), (struct frame *) XUNTAG (selected_frame, Lisp_Vectorlike)))->terminal != 0)) ? (((void) (
     0 
     && (FRAMEP (selected_frame)))), (struct frame *) XUNTAG (selected_frame, Lisp_Vectorlike)) : (emacs_abort (), (struct frame *) 0));
  x = y = builtin_lisp_symbol (0);
  if (((f)->terminal)->mouse_position_hook)
    {
      enum scroll_bar_part party_dummy;
      Time time_dummy;
      (*((f)->terminal)->mouse_position_hook) (&f, -1,
        &lispy_dummy, &party_dummy,
        &x, &y,
        &time_dummy);
    }
  ((((lispy_dummy) = make_lisp_ptr (f, Lisp_Vectorlike)), ((void) (
 0 
 && (((((union vectorlike_header *) XUNTAG (lispy_dummy, Lisp_Vectorlike)) ->size) & ((
 (9223372036854775807L) 
 - 
 (9223372036854775807L) 
 / 2) | PVEC_TYPE_MASK)) == ((
 (9223372036854775807L) 
 - 
 (9223372036854775807L) 
 / 2) | (PVEC_FRAME << PSEUDOVECTOR_AREA_BITS)))))));
  retval = Fcons (lispy_dummy, Fcons (x, y));
  if (!NILP (globals.f_Vmouse_position_function))
    retval = call1 (globals.f_Vmouse_position_function, retval);
  return retval;
}
static void
frame_char_to_pixel_position (struct frame *f, int x, int y,
         int *pix_x, int *pix_y)
{
  *pix_x = (FRAME_INTERNAL_BORDER_WIDTH (f) + (x) * ((f)->column_width)) + ((f)->column_width) / 2;
  *pix_y = (((y) < ((f)->menu_bar_lines + (f)->tool_bar_lines) ? 0 : FRAME_INTERNAL_BORDER_WIDTH (f)) + (y) * ((f)->line_height)) + ((f)->line_height) / 2;
  if (*pix_x < 0)
    *pix_x = 0;
  if (*pix_x > ((f)->pixel_width))
    *pix_x = ((f)->pixel_width);
  if (*pix_y < 0)
    *pix_y = 0;
  if (*pix_y > ((f)->pixel_height))
    *pix_y = ((f)->pixel_height);
}
static void
frame_set_mouse_position (struct frame *f, int x, int y)
{
  int pix_x, pix_y;
  frame_char_to_pixel_position (f, x, y, &pix_x, &pix_y);
  frame_set_mouse_pixel_position (f, pix_x, pix_y);
}
static struct Lisp_Subr Sset_mouse_position = { { PVEC_SUBR << PSEUDOVECTOR_AREA_BITS }, { .a3 = Fset_mouse_position }, 3, 3, "set-mouse-position", 0, 0}; Lisp_Object Fset_mouse_position
  (Lisp_Object frame, Lisp_Object x, Lisp_Object y)
{
  CHECK_TYPE (FRAMEP (frame) && (((((void) (
 0 
 && (FRAMEP (frame)))), (struct frame *) XUNTAG (frame, Lisp_Vectorlike)))->terminal != 0), builtin_lisp_symbol (532), frame);
  do { if ((! ((int) 0 < (int) -1))) do { CHECK_NUMBER (x); if (! ((((int) ~ ((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1))))) <= XINT (x) && XINT (x) <= (((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))))) args_out_of_range_3 (x, make_number ((((int) ~ ((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1))))) < 0 && (((int) ~ ((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1))))) < (-1 - (0x7fffffffffffffffL >> INTTYPEBITS)) ? (-1 - (0x7fffffffffffffffL >> INTTYPEBITS)) : (((int) ~ ((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))))), make_number (((((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))) < ((0x7fffffffffffffffL >> INTTYPEBITS)) ? (((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))) : ((0x7fffffffffffffffL >> INTTYPEBITS))))); } while (
 0
 ); else do { CHECK_NUMBER (x); if (! ((0) <= XINT (x) && XINT (x) <= (((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))))) args_out_of_range_3 (x, make_number ((0) < 0 && (0) < (-1 - (0x7fffffffffffffffL >> INTTYPEBITS)) ? (-1 - (0x7fffffffffffffffL >> INTTYPEBITS)) : (0)), make_number (((((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))) < ((0x7fffffffffffffffL >> INTTYPEBITS)) ? (((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))) : ((0x7fffffffffffffffL >> INTTYPEBITS))))); } while (
 0
 ); } while (
 0
 );
  do { if ((! ((int) 0 < (int) -1))) do { CHECK_NUMBER (y); if (! ((((int) ~ ((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1))))) <= XINT (y) && XINT (y) <= (((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))))) args_out_of_range_3 (y, make_number ((((int) ~ ((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1))))) < 0 && (((int) ~ ((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1))))) < (-1 - (0x7fffffffffffffffL >> INTTYPEBITS)) ? (-1 - (0x7fffffffffffffffL >> INTTYPEBITS)) : (((int) ~ ((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))))), make_number (((((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))) < ((0x7fffffffffffffffL >> INTTYPEBITS)) ? (((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))) : ((0x7fffffffffffffffL >> INTTYPEBITS))))); } while (
 0
 ); else do { CHECK_NUMBER (y); if (! ((0) <= XINT (y) && XINT (y) <= (((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))))) args_out_of_range_3 (y, make_number ((0) < 0 && (0) < (-1 - (0x7fffffffffffffffL >> INTTYPEBITS)) ? (-1 - (0x7fffffffffffffffL >> INTTYPEBITS)) : (0)), make_number (((((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))) < ((0x7fffffffffffffffL >> INTTYPEBITS)) ? (((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))) : ((0x7fffffffffffffffL >> INTTYPEBITS))))); } while (
 0
 ); } while (
 0
 );
  if ((((((void) (
     0 
     && (FRAMEP (frame)))), (struct frame *) XUNTAG (frame, Lisp_Vectorlike)))->output_method == output_x_window))
    frame_set_mouse_position ((((void) (
                             0 
                             && (FRAMEP (frame)))), (struct frame *) XUNTAG (frame, Lisp_Vectorlike)), XINT (x), XINT (y));
  return builtin_lisp_symbol (0);
}
static struct Lisp_Subr Sset_mouse_pixel_position = { { PVEC_SUBR << PSEUDOVECTOR_AREA_BITS }, { .a3 = Fset_mouse_pixel_position }, 3, 3, "set-mouse-pixel-position", 0, 0}; Lisp_Object Fset_mouse_pixel_position
  (Lisp_Object frame, Lisp_Object x, Lisp_Object y)
{
  CHECK_TYPE (FRAMEP (frame) && (((((void) (
 0 
 && (FRAMEP (frame)))), (struct frame *) XUNTAG (frame, Lisp_Vectorlike)))->terminal != 0), builtin_lisp_symbol (532), frame);
  do { if ((! ((int) 0 < (int) -1))) do { CHECK_NUMBER (x); if (! ((((int) ~ ((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1))))) <= XINT (x) && XINT (x) <= (((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))))) args_out_of_range_3 (x, make_number ((((int) ~ ((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1))))) < 0 && (((int) ~ ((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1))))) < (-1 - (0x7fffffffffffffffL >> INTTYPEBITS)) ? (-1 - (0x7fffffffffffffffL >> INTTYPEBITS)) : (((int) ~ ((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))))), make_number (((((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))) < ((0x7fffffffffffffffL >> INTTYPEBITS)) ? (((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))) : ((0x7fffffffffffffffL >> INTTYPEBITS))))); } while (
 0
 ); else do { CHECK_NUMBER (x); if (! ((0) <= XINT (x) && XINT (x) <= (((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))))) args_out_of_range_3 (x, make_number ((0) < 0 && (0) < (-1 - (0x7fffffffffffffffL >> INTTYPEBITS)) ? (-1 - (0x7fffffffffffffffL >> INTTYPEBITS)) : (0)), make_number (((((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))) < ((0x7fffffffffffffffL >> INTTYPEBITS)) ? (((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))) : ((0x7fffffffffffffffL >> INTTYPEBITS))))); } while (
 0
 ); } while (
 0
 );
  do { if ((! ((int) 0 < (int) -1))) do { CHECK_NUMBER (y); if (! ((((int) ~ ((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1))))) <= XINT (y) && XINT (y) <= (((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))))) args_out_of_range_3 (y, make_number ((((int) ~ ((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1))))) < 0 && (((int) ~ ((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1))))) < (-1 - (0x7fffffffffffffffL >> INTTYPEBITS)) ? (-1 - (0x7fffffffffffffffL >> INTTYPEBITS)) : (((int) ~ ((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))))), make_number (((((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))) < ((0x7fffffffffffffffL >> INTTYPEBITS)) ? (((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))) : ((0x7fffffffffffffffL >> INTTYPEBITS))))); } while (
 0
 ); else do { CHECK_NUMBER (y); if (! ((0) <= XINT (y) && XINT (y) <= (((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))))) args_out_of_range_3 (y, make_number ((0) < 0 && (0) < (-1 - (0x7fffffffffffffffL >> INTTYPEBITS)) ? (-1 - (0x7fffffffffffffffL >> INTTYPEBITS)) : (0)), make_number (((((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))) < ((0x7fffffffffffffffL >> INTTYPEBITS)) ? (((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))) : ((0x7fffffffffffffffL >> INTTYPEBITS))))); } while (
 0
 ); } while (
 0
 );
  if ((((((void) (
     0 
     && (FRAMEP (frame)))), (struct frame *) XUNTAG (frame, Lisp_Vectorlike)))->output_method == output_x_window))
    frame_set_mouse_pixel_position ((((void) (
                                   0 
                                   && (FRAMEP (frame)))), (struct frame *) XUNTAG (frame, Lisp_Vectorlike)), XINT (x), XINT (y));
  return builtin_lisp_symbol (0);
}
static void make_frame_visible_1 (Lisp_Object);
static struct Lisp_Subr Smake_frame_visible = { { PVEC_SUBR << PSEUDOVECTOR_AREA_BITS }, { .a1 = Fmake_frame_visible }, 0, 1, "make-frame-visible", "", 0}; Lisp_Object Fmake_frame_visible
  (Lisp_Object frame)
{
  struct frame *f = decode_live_frame (frame);
  if (((f)->output_method == output_x_window))
    x_make_frame_visible (f);
  make_frame_visible_1 (f->root_window);
  ((((frame) = make_lisp_ptr (f, Lisp_Vectorlike)), ((void) (
 0 
 && (((((union vectorlike_header *) XUNTAG (frame, Lisp_Vectorlike)) ->size) & ((
 (9223372036854775807L) 
 - 
 (9223372036854775807L) 
 / 2) | PVEC_TYPE_MASK)) == ((
 (9223372036854775807L) 
 - 
 (9223372036854775807L) 
 / 2) | (PVEC_FRAME << PSEUDOVECTOR_AREA_BITS)))))));
  return frame;
}
static void
make_frame_visible_1 (Lisp_Object window)
{
  struct window *w;
  for (; !NILP (window); window = w->next)
    {
      w = XWINDOW (window);
      if (WINDOWP (w->contents))
 make_frame_visible_1 (w->contents);
      else
 bset_display_time (XBUFFER (w->contents), Fcurrent_time ());
    }
}
static struct Lisp_Subr Smake_frame_invisible = { { PVEC_SUBR << PSEUDOVECTOR_AREA_BITS }, { .a2 = Fmake_frame_invisible }, 0, 2, "make-frame-invisible", "", 0}; Lisp_Object Fmake_frame_invisible
  (Lisp_Object frame, Lisp_Object force)
{
  struct frame *f = decode_live_frame (frame);
  if (NILP (force) && !other_frames (f, 
                                       1
                                           , 
                                             0
                                                  ))
    error ("Attempt to make invisible the sole visible or iconified frame");
  check_minibuf_window (frame, EQ (minibuf_window, selected_window));
  if (((f)->output_method == output_x_window))
    x_make_frame_invisible (f);
  windows_or_buffers_changed = 16;
  return builtin_lisp_symbol (0);
}
static struct Lisp_Subr Siconify_frame = { { PVEC_SUBR << PSEUDOVECTOR_AREA_BITS }, { .a1 = Ficonify_frame }, 0, 1, "iconify-frame", "", 0}; Lisp_Object Ficonify_frame
  (Lisp_Object frame)
{
  struct frame *f = decode_live_frame (frame);
  Lisp_Object parent = f->parent_frame;
  if (!NILP (parent))
    {
      if (NILP (globals.f_iconify_child_frame))
 return builtin_lisp_symbol (0);
      else if (EQ (globals.f_iconify_child_frame, builtin_lisp_symbol (614)))
 {
   Ficonify_frame (parent);
   return builtin_lisp_symbol (0);
 }
      else if (EQ (globals.f_iconify_child_frame, builtin_lisp_symbol (736)))
 {
   Fmake_frame_invisible (frame, builtin_lisp_symbol (0));
   return builtin_lisp_symbol (0);
 }
    }
  check_minibuf_window (frame, EQ (minibuf_window, selected_window));
  if (((f)->output_method == output_x_window))
    {
      x_iconify_frame (f);
    }
  return builtin_lisp_symbol (0);
}
static struct Lisp_Subr Sframe_visible_p = { { PVEC_SUBR << PSEUDOVECTOR_AREA_BITS }, { .a1 = Fframe_visible_p }, 1, 1, "frame-visible-p", 0, 0}; Lisp_Object Fframe_visible_p
  (Lisp_Object frame)
{
  CHECK_TYPE (FRAMEP (frame) && (((((void) (
 0 
 && (FRAMEP (frame)))), (struct frame *) XUNTAG (frame, Lisp_Vectorlike)))->terminal != 0), builtin_lisp_symbol (532), frame);
  if (((((void) (
     0 
     && (FRAMEP (frame)))), (struct frame *) XUNTAG (frame, Lisp_Vectorlike)))->visible)
    return builtin_lisp_symbol (1028);
  if (((((void) (
     0 
     && (FRAMEP (frame)))), (struct frame *) XUNTAG (frame, Lisp_Vectorlike)))->iconified)
    return builtin_lisp_symbol (608);
  return builtin_lisp_symbol (0);
}
static struct Lisp_Subr Svisible_frame_list = { { PVEC_SUBR << PSEUDOVECTOR_AREA_BITS }, { .a0 = Fvisible_frame_list }, 0, 0, "visible-frame-list", 0, 0}; Lisp_Object Fvisible_frame_list
  (void)
{
  Lisp_Object tail, frame, value = builtin_lisp_symbol (0);
  for ((tail) = Vframe_list; (CONSP (tail) && (frame = XCAR (tail), 
 1
 )); tail = XCDR (tail))
    if (((((void) (
       0 
       && (FRAMEP (frame)))), (struct frame *) XUNTAG (frame, Lisp_Vectorlike)))->visible)
      value = Fcons (frame, value);
  return value;
}
static struct Lisp_Subr Sraise_frame = { { PVEC_SUBR << PSEUDOVECTOR_AREA_BITS }, { .a1 = Fraise_frame }, 0, 1, "raise-frame", "", 0}; Lisp_Object Fraise_frame
  (Lisp_Object frame)
{
  struct frame *f = decode_live_frame (frame);
  ((((frame) = make_lisp_ptr (f, Lisp_Vectorlike)), ((void) (
 0 
 && (((((union vectorlike_header *) XUNTAG (frame, Lisp_Vectorlike)) ->size) & ((
 (9223372036854775807L) 
 - 
 (9223372036854775807L) 
 / 2) | PVEC_TYPE_MASK)) == ((
 (9223372036854775807L) 
 - 
 (9223372036854775807L) 
 / 2) | (PVEC_FRAME << PSEUDOVECTOR_AREA_BITS)))))));
  if (((f)->output_method == output_termcap))
    Fselect_frame (frame, builtin_lisp_symbol (0));
  else
    Fmake_frame_visible (frame);
  if (((f)->terminal)->frame_raise_lower_hook)
    (*((f)->terminal)->frame_raise_lower_hook) (f, 1);
  return builtin_lisp_symbol (0);
}
static struct Lisp_Subr Slower_frame = { { PVEC_SUBR << PSEUDOVECTOR_AREA_BITS }, { .a1 = Flower_frame }, 0, 1, "lower-frame", "", 0}; Lisp_Object Flower_frame
  (Lisp_Object frame)
{
  struct frame *f = decode_live_frame (frame);
  if (((f)->terminal)->frame_raise_lower_hook)
    (*((f)->terminal)->frame_raise_lower_hook) (f, 0);
  return builtin_lisp_symbol (0);
}
static struct Lisp_Subr Sredirect_frame_focus = { { PVEC_SUBR << PSEUDOVECTOR_AREA_BITS }, { .a2 = Fredirect_frame_focus }, 1, 2, "redirect-frame-focus", 0, 0}; Lisp_Object Fredirect_frame_focus
  (Lisp_Object frame, Lisp_Object focus_frame)
{
  struct frame *f = decode_any_frame (frame);
  if (! NILP (focus_frame))
    CHECK_TYPE (FRAMEP (focus_frame) && (((((void) (
   0 
   && (FRAMEP (focus_frame)))), (struct frame *) XUNTAG (focus_frame, Lisp_Vectorlike)))->terminal != 0), builtin_lisp_symbol (532), focus_frame);
  fset_focus_frame (f, focus_frame);
  if (((f)->terminal)->frame_rehighlight_hook)
    (*((f)->terminal)->frame_rehighlight_hook) (f);
  return builtin_lisp_symbol (0);
}
static struct Lisp_Subr Sframe_focus = { { PVEC_SUBR << PSEUDOVECTOR_AREA_BITS }, { .a1 = Fframe_focus }, 0, 1, "frame-focus", 0, 0}; Lisp_Object Fframe_focus
  (Lisp_Object frame)
{
  return decode_live_frame (frame)->focus_frame;
}
static struct Lisp_Subr Sx_focus_frame = { { PVEC_SUBR << PSEUDOVECTOR_AREA_BITS }, { .a2 = Fx_focus_frame }, 1, 2, "x-focus-frame", 0, 0}; Lisp_Object Fx_focus_frame
     (Lisp_Object frame, Lisp_Object noactivate)
{
  x_focus_frame (decode_window_system_frame (frame), !NILP (noactivate));
  return builtin_lisp_symbol (0);
}
static struct Lisp_Subr Sframe_after_make_frame = { { PVEC_SUBR << PSEUDOVECTOR_AREA_BITS }, { .a2 = Fframe_after_make_frame }, 2, 2, "frame-after-make-frame", 0, 0}; Lisp_Object Fframe_after_make_frame
  (Lisp_Object frame, Lisp_Object made)
{
  struct frame *f = decode_live_frame (frame);
  f->after_make_frame = !NILP (made);
  f->inhibit_horizontal_resize = 
                                0
                                     ;
  f->inhibit_vertical_resize = 
                              0
                                   ;
  return made;
}
void
frames_discard_buffer (Lisp_Object buffer)
{
  Lisp_Object frame, tail;
  for ((tail) = Vframe_list; (CONSP (tail) && (frame = XCAR (tail), 
 1
 )); tail = XCDR (tail))
    {
      fset_buffer_list
 ((((void) (
 0 
 && (FRAMEP (frame)))), (struct frame *) XUNTAG (frame, Lisp_Vectorlike)), Fdelq (buffer, (((void) (
                                0 
                                && (FRAMEP (frame)))), (struct frame *) XUNTAG (frame, Lisp_Vectorlike))->buffer_list));
      fset_buried_buffer_list
 ((((void) (
 0 
 && (FRAMEP (frame)))), (struct frame *) XUNTAG (frame, Lisp_Vectorlike)), Fdelq (buffer, (((void) (
                                0 
                                && (FRAMEP (frame)))), (struct frame *) XUNTAG (frame, Lisp_Vectorlike))->buried_buffer_list));
    }
}
void
store_in_alist (Lisp_Object *alistptr, Lisp_Object prop, Lisp_Object val)
{
  register Lisp_Object tem;
  tem = Fassq (prop, *alistptr);
  if (EQ (tem, builtin_lisp_symbol (0)))
    *alistptr = Fcons (Fcons (prop, val), *alistptr);
  else
    Fsetcdr (tem, val);
}
static int
frame_name_fnn_p (char *str, ptrdiff_t len)
{
  if (len > 1 && str[0] == 'F' && '0' <= str[1] && str[1] <= '9')
    {
      char *p = str + 2;
      while ('0' <= *p && *p <= '9')
 p++;
      if (p == str + len)
 return 1;
    }
  return 0;
}
static void
set_term_frame_name (struct frame *f, Lisp_Object name)
{
  f->explicit_name = ! NILP (name);
  if (NILP (name))
    {
      char namebuf[sizeof "F" + (((((sizeof (printmax_t) * 8) - (! ((__typeof__ (printmax_t)) 0 < (__typeof__ (printmax_t)) -1))) * 146 + 484) / 485) + (! ((__typeof__ (printmax_t)) 0 < (__typeof__ (printmax_t)) -1)))];
      if (frame_name_fnn_p (SSDATA (f->name), SBYTES (f->name)))
 return;
      name = make_formatted_string (namebuf, "F%"
                                                "l" "d"
                                                   , ++tty_frame_count);
    }
  else
    {
      CHECK_STRING (name);
      if (! NILP (Fstring_equal (name, f->name)))
 return;
      if (frame_name_fnn_p (SSDATA (name), SBYTES (name)))
 error ("Frame names of the form F<num> are usurped by Emacs");
    }
  fset_name (f, name);
  update_mode_lines = 16;
}
void
store_frame_param (struct frame *f, Lisp_Object prop, Lisp_Object val)
{
  register Lisp_Object old_alist_elt;
  if (EQ (prop, builtin_lisp_symbol (760)))
    {
      if (WINDOWP (val))
 {
   if (!((XWINDOW (val))->mini))
     error ("The `minibuffer' parameter does not specify a valid minibuffer window");
   else if (EQ (f->root_window, f->minibuffer_window))
     {
       if (EQ (val, f->minibuffer_window))
  val = builtin_lisp_symbol (829);
       else
  error ("Can't change the minibuffer window of a minibuffer-only frame");
     }
   else if ((WINDOWP (f->minibuffer_window) && (((void) (
           0 
           && (FRAMEP (XWINDOW (f->minibuffer_window)->frame)))), (struct frame *) XUNTAG (XWINDOW (f->minibuffer_window)->frame, Lisp_Vectorlike)) == f))
     {
       if (EQ (val, f->minibuffer_window))
  val = builtin_lisp_symbol (1028);
       else
  error ("Can't change the minibuffer window of a frame with its own minibuffer");
     }
   else
     fset_minibuffer_window (f, val);
 }
      else
 {
   Lisp_Object old_val = Fcdr (Fassq (builtin_lisp_symbol (760), f->param_alist));
   if (!NILP (old_val))
     {
       if (WINDOWP (old_val) && NILP (val))
  val = old_val;
       else if (!EQ (old_val, val))
  error ("Can't change the `minibuffer' parameter of this frame");
     }
 }
    }
  else if (EQ (prop, builtin_lisp_symbol (855)) || EQ (prop, builtin_lisp_symbol (391)))
    {
      Lisp_Object oldval = Fcdr (Fassq (prop, f->param_alist));
      if (!EQ (oldval, val) && !NILP (val))
 {
   Lisp_Object frame;
   Lisp_Object frame1 = val;
   if (!FRAMEP (frame1) || !(((((void) (
                           0 
                           && (FRAMEP (frame1)))), (struct frame *) XUNTAG (frame1, Lisp_Vectorlike)))->terminal != 0))
     error ("Invalid `%s' frame parameter",
     SSDATA (SYMBOL_NAME (prop)));
   ((((frame) = make_lisp_ptr (f, Lisp_Vectorlike)), ((void) (
  0 
  && (((((union vectorlike_header *) XUNTAG (frame, Lisp_Vectorlike)) ->size) & ((
  (9223372036854775807L) 
  - 
  (9223372036854775807L) 
  / 2) | PVEC_TYPE_MASK)) == ((
  (9223372036854775807L) 
  - 
  (9223372036854775807L) 
  / 2) | (PVEC_FRAME << PSEUDOVECTOR_AREA_BITS)))))));
   while (FRAMEP (frame1) && (((((void) (
                            0 
                            && (FRAMEP (frame1)))), (struct frame *) XUNTAG (frame1, Lisp_Vectorlike)))->terminal != 0))
     if (EQ (frame1, frame))
       error ("Circular specification of `%s' frame parameter",
       SSDATA (SYMBOL_NAME (prop)));
     else
       frame1 = get_frame_param ((((void) (
                                0 
                                && (FRAMEP (frame1)))), (struct frame *) XUNTAG (frame1, Lisp_Vectorlike)), prop);
 }
    }
  else if (EQ (prop, builtin_lisp_symbol (269)))
    {
      Lisp_Object list = builtin_lisp_symbol (0);
      for (; CONSP (val); val = XCDR (val))
 if (!NILP (Fbuffer_live_p (XCAR (val))))
   list = Fcons (XCAR (val), list);
      fset_buffer_list (f, Fnreverse (list));
      return;
    }
  else if (EQ (prop, builtin_lisp_symbol (278)))
    {
      Lisp_Object list = builtin_lisp_symbol (0);
      for (; CONSP (val); val = XCDR (val))
 if (!NILP (Fbuffer_live_p (XCAR (val))))
   list = Fcons (XCAR (val), list);
      fset_buried_buffer_list (f, Fnreverse (list));
      return;
    }
  if (((f)->output_method == output_termcap) && EQ (prop, builtin_lisp_symbol (1077))
      && f == (((f)->output_method == output_termcap || (f)->output_method == output_msdos_raw) ? (f)->terminal->display_info.tty : (emacs_abort (), (struct tty_display_info *) 0))->previous_frame)
    (((f)->output_method == output_termcap || (f)->output_method == output_msdos_raw) ? (f)->terminal->display_info.tty : (emacs_abort (), (struct tty_display_info *) 0))->previous_frame = 
                                   ((void *)0)
                                       ;
  old_alist_elt = Fassq (prop, f->param_alist);
  if (EQ (old_alist_elt, builtin_lisp_symbol (0)))
    fset_param_alist (f, Fcons (Fcons (prop, val), f->param_alist));
  else
    Fsetcdr (old_alist_elt, val);
  if (EQ (prop, builtin_lisp_symbol (274)))
    fset_buffer_predicate (f, val);
  if (! ((f)->output_method == output_x_window))
    {
      if (EQ (prop, builtin_lisp_symbol (750)))
 set_menu_bar_lines (f, val, make_number ((f)->menu_bar_lines));
      else if (EQ (prop, builtin_lisp_symbol (802)))
 set_term_frame_name (f, val);
    }
}
static Lisp_Object
frame_unspecified_color (struct frame *f, Lisp_Object unspec)
{
  return (!
          (__extension__ (__builtin_constant_p (
          SBYTES (unspec)
          ) && ((__builtin_constant_p (
          SSDATA (unspec)
          ) && strlen (
          SSDATA (unspec)
          ) < ((size_t) (
          SBYTES (unspec)
          ))) || (__builtin_constant_p (
          unspecified_bg
          ) && strlen (
          unspecified_bg
          ) < ((size_t) (
          SBYTES (unspec)
          )))) ? __extension__ ({ size_t __s1_len, __s2_len; (__builtin_constant_p (
          SSDATA (unspec)
          ) && __builtin_constant_p (
          unspecified_bg
          ) && (__s1_len = __builtin_strlen (
          SSDATA (unspec)
          ), __s2_len = __builtin_strlen (
          unspecified_bg
          ), (!((size_t)(const void *)((
          SSDATA (unspec)
          ) + 1) - (size_t)(const void *)(
          SSDATA (unspec)
          ) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((
          unspecified_bg
          ) + 1) - (size_t)(const void *)(
          unspecified_bg
          ) == 1) || __s2_len >= 4)) ? __builtin_strcmp (
          SSDATA (unspec)
          , 
          unspecified_bg
          ) : (__builtin_constant_p (
          SSDATA (unspec)
          ) && ((size_t)(const void *)((
          SSDATA (unspec)
          ) + 1) - (size_t)(const void *)(
          SSDATA (unspec)
          ) == 1) && (__s1_len = __builtin_strlen (
          SSDATA (unspec)
          ), __s1_len < 4) ? (__builtin_constant_p (
          unspecified_bg
          ) && ((size_t)(const void *)((
          unspecified_bg
          ) + 1) - (size_t)(const void *)(
          unspecified_bg
          ) == 1) ? __builtin_strcmp (
          SSDATA (unspec)
          , 
          unspecified_bg
          ) : (__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
          unspecified_bg
          ); int __result = (((const unsigned char *) (const char *) (
          SSDATA (unspec)
          ))[0] - __s2[0]); if (__s1_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
          SSDATA (unspec)
          ))[1] - __s2[1]); if (__s1_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
          SSDATA (unspec)
          ))[2] - __s2[2]); if (__s1_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
          SSDATA (unspec)
          ))[3] - __s2[3]); } } __result; }))) : (__builtin_constant_p (
          unspecified_bg
          ) && ((size_t)(const void *)((
          unspecified_bg
          ) + 1) - (size_t)(const void *)(
          unspecified_bg
          ) == 1) && (__s2_len = __builtin_strlen (
          unspecified_bg
          ), __s2_len < 4) ? (__builtin_constant_p (
          SSDATA (unspec)
          ) && ((size_t)(const void *)((
          SSDATA (unspec)
          ) + 1) - (size_t)(const void *)(
          SSDATA (unspec)
          ) == 1) ? __builtin_strcmp (
          SSDATA (unspec)
          , 
          unspecified_bg
          ) : (- (__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
          SSDATA (unspec)
          ); int __result = (((const unsigned char *) (const char *) (
          unspecified_bg
          ))[0] - __s2[0]); if (__s2_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
          unspecified_bg
          ))[1] - __s2[1]); if (__s2_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
          unspecified_bg
          ))[2] - __s2[2]); if (__s2_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
          unspecified_bg
          ))[3] - __s2[3]); } } __result; })))) : __builtin_strcmp (
          SSDATA (unspec)
          , 
          unspecified_bg
          )))); }) : strncmp (
          SSDATA (unspec)
          , 
          unspecified_bg
          , 
          SBYTES (unspec)
          )))
  ? tty_color_name (f, ((f)->background_pixel))
   : (!
      (__extension__ (__builtin_constant_p (
      SBYTES (unspec)
      ) && ((__builtin_constant_p (
      SSDATA (unspec)
      ) && strlen (
      SSDATA (unspec)
      ) < ((size_t) (
      SBYTES (unspec)
      ))) || (__builtin_constant_p (
      unspecified_fg
      ) && strlen (
      unspecified_fg
      ) < ((size_t) (
      SBYTES (unspec)
      )))) ? __extension__ ({ size_t __s1_len, __s2_len; (__builtin_constant_p (
      SSDATA (unspec)
      ) && __builtin_constant_p (
      unspecified_fg
      ) && (__s1_len = __builtin_strlen (
      SSDATA (unspec)
      ), __s2_len = __builtin_strlen (
      unspecified_fg
      ), (!((size_t)(const void *)((
      SSDATA (unspec)
      ) + 1) - (size_t)(const void *)(
      SSDATA (unspec)
      ) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((
      unspecified_fg
      ) + 1) - (size_t)(const void *)(
      unspecified_fg
      ) == 1) || __s2_len >= 4)) ? __builtin_strcmp (
      SSDATA (unspec)
      , 
      unspecified_fg
      ) : (__builtin_constant_p (
      SSDATA (unspec)
      ) && ((size_t)(const void *)((
      SSDATA (unspec)
      ) + 1) - (size_t)(const void *)(
      SSDATA (unspec)
      ) == 1) && (__s1_len = __builtin_strlen (
      SSDATA (unspec)
      ), __s1_len < 4) ? (__builtin_constant_p (
      unspecified_fg
      ) && ((size_t)(const void *)((
      unspecified_fg
      ) + 1) - (size_t)(const void *)(
      unspecified_fg
      ) == 1) ? __builtin_strcmp (
      SSDATA (unspec)
      , 
      unspecified_fg
      ) : (__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
      unspecified_fg
      ); int __result = (((const unsigned char *) (const char *) (
      SSDATA (unspec)
      ))[0] - __s2[0]); if (__s1_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
      SSDATA (unspec)
      ))[1] - __s2[1]); if (__s1_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
      SSDATA (unspec)
      ))[2] - __s2[2]); if (__s1_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
      SSDATA (unspec)
      ))[3] - __s2[3]); } } __result; }))) : (__builtin_constant_p (
      unspecified_fg
      ) && ((size_t)(const void *)((
      unspecified_fg
      ) + 1) - (size_t)(const void *)(
      unspecified_fg
      ) == 1) && (__s2_len = __builtin_strlen (
      unspecified_fg
      ), __s2_len < 4) ? (__builtin_constant_p (
      SSDATA (unspec)
      ) && ((size_t)(const void *)((
      SSDATA (unspec)
      ) + 1) - (size_t)(const void *)(
      SSDATA (unspec)
      ) == 1) ? __builtin_strcmp (
      SSDATA (unspec)
      , 
      unspecified_fg
      ) : (- (__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
      SSDATA (unspec)
      ); int __result = (((const unsigned char *) (const char *) (
      unspecified_fg
      ))[0] - __s2[0]); if (__s2_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
      unspecified_fg
      ))[1] - __s2[1]); if (__s2_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
      unspecified_fg
      ))[2] - __s2[2]); if (__s2_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
      unspecified_fg
      ))[3] - __s2[3]); } } __result; })))) : __builtin_strcmp (
      SSDATA (unspec)
      , 
      unspecified_fg
      )))); }) : strncmp (
      SSDATA (unspec)
      , 
      unspecified_fg
      , 
      SBYTES (unspec)
      )))
     ? tty_color_name (f, ((f)->foreground_pixel)) : builtin_lisp_symbol (0)));
}
static struct Lisp_Subr Sframe_parameters = { { PVEC_SUBR << PSEUDOVECTOR_AREA_BITS }, { .a1 = Fframe_parameters }, 0, 1, "frame-parameters", 0, 0}; Lisp_Object Fframe_parameters
  (Lisp_Object frame)
{
  Lisp_Object alist;
  struct frame *f = decode_any_frame (frame);
  int height, width;
  if (!((f)->terminal != 0))
    return builtin_lisp_symbol (0);
  alist = Fcopy_alist (f->param_alist);
  if (!((f)->output_method == output_x_window))
    {
      Lisp_Object elt;
      elt = Fassq (builtin_lisp_symbol (523), alist);
      if (CONSP (elt) && STRINGP (XCDR (elt)))
 {
   elt = frame_unspecified_color (f, XCDR (elt));
   if (!NILP (elt))
     store_in_alist (&alist, builtin_lisp_symbol (523), elt);
 }
      else
 store_in_alist (&alist, builtin_lisp_symbol (523),
   tty_color_name (f, ((f)->foreground_pixel)));
      elt = Fassq (builtin_lisp_symbol (236), alist);
      if (CONSP (elt) && STRINGP (XCDR (elt)))
 {
   elt = frame_unspecified_color (f, XCDR (elt));
   if (!NILP (elt))
     store_in_alist (&alist, builtin_lisp_symbol (236), elt);
 }
      else
 store_in_alist (&alist, builtin_lisp_symbol (236),
   tty_color_name (f, ((f)->background_pixel)));
      store_in_alist (&alist, builtin_lisp_symbol (511),
        build_string (
                     0
       ? "ms-dos"
        : 
         0 
                         ? "w32term"
        :"tty"));
    }
  store_in_alist (&alist, builtin_lisp_symbol (802), f->name);
  height = (f->new_height
     ? (f->new_pixelwise
        ? (f->new_height / ((f)->line_height))
        : f->new_height)
     : (f)->text_lines);
  store_in_alist (&alist, builtin_lisp_symbol (594), make_number (height));
  width = (f->new_width
    ? (f->new_pixelwise
       ? (f->new_width / ((f)->column_width))
       : f->new_width)
    : (f)->text_cols);
  store_in_alist (&alist, builtin_lisp_symbol (1158), make_number (width));
  store_in_alist (&alist, builtin_lisp_symbol (776), ((f)->wants_modeline ? builtin_lisp_symbol (1028) : builtin_lisp_symbol (0)));
  store_in_alist (&alist, builtin_lisp_symbol (1113), ((f)->no_split ? builtin_lisp_symbol (1028) : builtin_lisp_symbol (0)));
  store_in_alist (&alist, builtin_lisp_symbol (269), f->buffer_list);
  store_in_alist (&alist, builtin_lisp_symbol (278), f->buried_buffer_list);
  if (((f)->output_method == output_x_window))
    x_report_frame_params (f, &alist);
  else
    {
      Lisp_Object lines;
      ((lines) = make_natnum ((f)->menu_bar_lines));
      store_in_alist (&alist, builtin_lisp_symbol (750), lines);
    }
  return alist;
}
static struct Lisp_Subr Sframe_parameter = { { PVEC_SUBR << PSEUDOVECTOR_AREA_BITS }, { .a2 = Fframe_parameter }, 2, 2, "frame-parameter", 0, 0}; Lisp_Object Fframe_parameter
  (Lisp_Object frame, Lisp_Object parameter)
{
  struct frame *f = decode_any_frame (frame);
  Lisp_Object value = builtin_lisp_symbol (0);
  CHECK_SYMBOL (parameter);
  ((((frame) = make_lisp_ptr (f, Lisp_Vectorlike)), ((void) (
 0 
 && (((((union vectorlike_header *) XUNTAG (frame, Lisp_Vectorlike)) ->size) & ((
 (9223372036854775807L) 
 - 
 (9223372036854775807L) 
 / 2) | PVEC_TYPE_MASK)) == ((
 (9223372036854775807L) 
 - 
 (9223372036854775807L) 
 / 2) | (PVEC_FRAME << PSEUDOVECTOR_AREA_BITS)))))));
  if (((f)->terminal != 0))
    {
      if (EQ (parameter, builtin_lisp_symbol (802)))
 value = f->name;
      else if (EQ (parameter, builtin_lisp_symbol (1142)))
 value = (f->vertical_scroll_bar_type == vertical_scroll_bar_none
   ? builtin_lisp_symbol (0)
   : (f->vertical_scroll_bar_type == vertical_scroll_bar_left
      ? builtin_lisp_symbol (696) : builtin_lisp_symbol (929)));
      else if (EQ (parameter, builtin_lisp_symbol (605)))
 value = f->horizontal_scroll_bars ? builtin_lisp_symbol (1028) : builtin_lisp_symbol (0);
      else if (EQ (parameter, builtin_lisp_symbol (716)) && f->extra_line_spacing == 0)
 value = make_number (0);
      else if (EQ (parameter, builtin_lisp_symbol (511)) && ((f)->output_method == output_x_window))
 value = ((f)->output_data.x->font)->props[FONT_NAME_INDEX];
      else if (EQ (parameter, builtin_lisp_symbol (406)) && ((f)->output_method == output_x_window))
 value = XCAR (((f)->output_data.x->display_info)->name_list_element);
      else if (EQ (parameter, builtin_lisp_symbol (236))
        || EQ (parameter, builtin_lisp_symbol (523)))
 {
   value = Fassq (parameter, f->param_alist);
   if (CONSP (value))
     {
       value = XCDR (value);
       if (STRINGP (value) && !((f)->output_method == output_x_window))
  {
    Lisp_Object tem = frame_unspecified_color (f, value);
    if (!NILP (tem))
      value = tem;
  }
     }
   else
     value = Fcdr (Fassq (parameter, Fframe_parameters (frame)));
 }
      else if (EQ (parameter, builtin_lisp_symbol (414))
        || EQ (parameter, builtin_lisp_symbol (237)))
 value = Fcdr (Fassq (parameter, f->param_alist));
      else
 value = Fcdr (Fassq (parameter, Fframe_parameters (frame)));
    }
  return value;
}
static struct Lisp_Subr Smodify_frame_parameters = { { PVEC_SUBR << PSEUDOVECTOR_AREA_BITS }, { .a2 = Fmodify_frame_parameters }, 2, 2, "modify-frame-parameters", 0, 0}; Lisp_Object Fmodify_frame_parameters
  (Lisp_Object frame, Lisp_Object alist)
{
  struct frame *f = decode_live_frame (frame);
  Lisp_Object prop, val;
  if (((f)->output_method == output_x_window))
    x_set_frame_parameters (f, alist);
  else
    {
      EMACS_INT length = XFASTINT (Flength (alist));
      ptrdiff_t i;
      Lisp_Object *parms;
      Lisp_Object *values;
      ptrdiff_t sa_avail = MAX_ALLOCA; ptrdiff_t sa_count = SPECPDL_INDEX (); 
     _Bool 
     sa_must_free = 
     0
                    ;
      do { ptrdiff_t alloca_nbytes; if (__builtin_mul_overflow (2 * length, word_size, &alloca_nbytes) || __builtin_add_overflow (alloca_nbytes, 0, &alloca_nbytes) || 
     (18446744073709551615UL) 
     < alloca_nbytes) memory_full (
     (18446744073709551615UL)
     ); else if (alloca_nbytes <= sa_avail) (parms) = (sa_avail -= (alloca_nbytes), 
     __builtin_alloca (
     alloca_nbytes
     )
     ); else { Lisp_Object arg_; (parms) = xmalloc (alloca_nbytes); arg_ = make_save_memory (parms, 2 * length); sa_must_free = 
     1
     ; record_unwind_protect (free_save_value, arg_); } } while (
     0
     );
      values = parms + length;
      for (i = 0; CONSP (alist); alist = XCDR (alist))
 {
   Lisp_Object elt;
   elt = XCAR (alist);
   parms[i] = Fcar (elt);
   values[i] = Fcdr (elt);
   i++;
 }
      while (--i >= 0)
 {
   prop = parms[i];
   val = values[i];
   store_frame_param (f, prop, val);
   if (EQ (prop, builtin_lisp_symbol (523))
       || EQ (prop, builtin_lisp_symbol (236)))
     update_face_from_frame_parameter (f, prop, val);
 }
      do { if (sa_must_free) { sa_must_free = 
     0
     ; unbind_to (sa_count, builtin_lisp_symbol (0)); } } while (
     0
     );
    }
  return builtin_lisp_symbol (0);
}
static struct Lisp_Subr Sframe_char_height = { { PVEC_SUBR << PSEUDOVECTOR_AREA_BITS }, { .a1 = Fframe_char_height }, 0, 1, "frame-char-height", 0, 0}; Lisp_Object Fframe_char_height
  (Lisp_Object frame)
{
  struct frame *f = decode_any_frame (frame);
  if (((f)->output_method == output_x_window))
    return make_number (((f)->line_height));
  else
    return make_number (1);
}
static struct Lisp_Subr Sframe_char_width = { { PVEC_SUBR << PSEUDOVECTOR_AREA_BITS }, { .a1 = Fframe_char_width }, 0, 1, "frame-char-width", 0, 0}; Lisp_Object Fframe_char_width
  (Lisp_Object frame)
{
  struct frame *f = decode_any_frame (frame);
  if (((f)->output_method == output_x_window))
    return make_number (((f)->column_width));
  else
    return make_number (1);
}
static struct Lisp_Subr Sframe_native_width = { { PVEC_SUBR << PSEUDOVECTOR_AREA_BITS }, { .a1 = Fframe_native_width }, 0, 1, "frame-native-width", 0, 0}; Lisp_Object Fframe_native_width
  (Lisp_Object frame)
{
  struct frame *f = decode_any_frame (frame);
  if (((f)->output_method == output_x_window))
    return make_number (((f)->pixel_width));
  else
    return make_number (((f)->total_cols));
}
static struct Lisp_Subr Sframe_native_height = { { PVEC_SUBR << PSEUDOVECTOR_AREA_BITS }, { .a1 = Fframe_native_height }, 0, 1, "frame-native-height", 0, 0}; Lisp_Object Fframe_native_height
  (Lisp_Object frame)
{
  struct frame *f = decode_any_frame (frame);
  if (((f)->output_method == output_x_window))
    return make_number (((f)->pixel_height));
  else
    return make_number (((f)->total_lines));
}
static struct Lisp_Subr Stool_bar_pixel_width = { { PVEC_SUBR << PSEUDOVECTOR_AREA_BITS }, { .a1 = Ftool_bar_pixel_width }, 0, 1, "tool-bar-pixel-width", 0, 0}; Lisp_Object Ftool_bar_pixel_width
  (Lisp_Object frame)
{
  struct frame *f = decode_any_frame (frame);
  if (((f)->output_method == output_x_window))
    return make_number ((((f)->output_data.x->toolbar_left_width) + ((f)->output_data.x->toolbar_right_width)));
  return make_number (0);
}
static struct Lisp_Subr Sframe_text_cols = { { PVEC_SUBR << PSEUDOVECTOR_AREA_BITS }, { .a1 = Fframe_text_cols }, 0, 1, "frame-text-cols", 0, 0}; Lisp_Object Fframe_text_cols
  (Lisp_Object frame)
{
  return make_number ((decode_any_frame (frame))->text_cols);
}
static struct Lisp_Subr Sframe_text_lines = { { PVEC_SUBR << PSEUDOVECTOR_AREA_BITS }, { .a1 = Fframe_text_lines }, 0, 1, "frame-text-lines", 0, 0}; Lisp_Object Fframe_text_lines
  (Lisp_Object frame)
{
  return make_number ((decode_any_frame (frame))->text_lines);
}
static struct Lisp_Subr Sframe_total_cols = { { PVEC_SUBR << PSEUDOVECTOR_AREA_BITS }, { .a1 = Fframe_total_cols }, 0, 1, "frame-total-cols", 0, 0}; Lisp_Object Fframe_total_cols
  (Lisp_Object frame)
{
  return make_number (((decode_any_frame (frame))->total_cols));
}
static struct Lisp_Subr Sframe_total_lines = { { PVEC_SUBR << PSEUDOVECTOR_AREA_BITS }, { .a1 = Fframe_total_lines }, 0, 1, "frame-total-lines", 0, 0}; Lisp_Object Fframe_total_lines
  (Lisp_Object frame)
{
  return make_number (((decode_any_frame (frame))->total_lines));
}
static struct Lisp_Subr Sframe_text_width = { { PVEC_SUBR << PSEUDOVECTOR_AREA_BITS }, { .a1 = Fframe_text_width }, 0, 1, "frame-text-width", 0, 0}; Lisp_Object Fframe_text_width
  (Lisp_Object frame)
{
  return make_number ((decode_any_frame (frame))->text_width);
}
static struct Lisp_Subr Sframe_text_height = { { PVEC_SUBR << PSEUDOVECTOR_AREA_BITS }, { .a1 = Fframe_text_height }, 0, 1, "frame-text-height", 0, 0}; Lisp_Object Fframe_text_height
  (Lisp_Object frame)
{
  return make_number ((decode_any_frame (frame))->text_height);
}
static struct Lisp_Subr Sscroll_bar_width = { { PVEC_SUBR << PSEUDOVECTOR_AREA_BITS }, { .a1 = Fscroll_bar_width }, 0, 1, "frame-scroll-bar-width", 0, 0}; Lisp_Object Fscroll_bar_width
  (Lisp_Object frame)
{
  return make_number ((((decode_any_frame (frame))->vertical_scroll_bar_type != vertical_scroll_bar_none) ? ((decode_any_frame (frame))->config_scroll_bar_width) : 0));
}
static struct Lisp_Subr Sscroll_bar_height = { { PVEC_SUBR << PSEUDOVECTOR_AREA_BITS }, { .a1 = Fscroll_bar_height }, 0, 1, "frame-scroll-bar-height", 0, 0}; Lisp_Object Fscroll_bar_height
  (Lisp_Object frame)
{
  return make_number ((((decode_any_frame (frame))->horizontal_scroll_bars) ? ((decode_any_frame (frame))->config_scroll_bar_height) : 0));
}
static struct Lisp_Subr Sfringe_width = { { PVEC_SUBR << PSEUDOVECTOR_AREA_BITS }, { .a1 = Ffringe_width }, 0, 1, "frame-fringe-width", 0, 0}; Lisp_Object Ffringe_width
  (Lisp_Object frame)
{
  return make_number (FRAME_TOTAL_FRINGE_WIDTH (decode_any_frame (frame)));
}
static struct Lisp_Subr Sframe_internal_border_width = { { PVEC_SUBR << PSEUDOVECTOR_AREA_BITS }, { .a1 = Fframe_internal_border_width }, 0, 1, "frame-internal-border-width", 0, 0}; Lisp_Object Fframe_internal_border_width
  (Lisp_Object frame)
{
  return make_number (FRAME_INTERNAL_BORDER_WIDTH (decode_any_frame (frame)));
}
static struct Lisp_Subr Sright_divider_width = { { PVEC_SUBR << PSEUDOVECTOR_AREA_BITS }, { .a1 = Fright_divider_width }, 0, 1, "frame-right-divider-width", 0, 0}; Lisp_Object Fright_divider_width
  (Lisp_Object frame)
{
  return make_number (FRAME_RIGHT_DIVIDER_WIDTH (decode_any_frame (frame)));
}
static struct Lisp_Subr Sbottom_divider_width = { { PVEC_SUBR << PSEUDOVECTOR_AREA_BITS }, { .a1 = Fbottom_divider_width }, 0, 1, "frame-bottom-divider-width", 0, 0}; Lisp_Object Fbottom_divider_width
  (Lisp_Object frame)
{
  return make_number (FRAME_BOTTOM_DIVIDER_WIDTH (decode_any_frame (frame)));
}
static struct Lisp_Subr Sset_frame_height = { { PVEC_SUBR << PSEUDOVECTOR_AREA_BITS }, { .a4 = Fset_frame_height }, 2, 4, "set-frame-height", 0, 0}; Lisp_Object Fset_frame_height
  (Lisp_Object frame, Lisp_Object height, Lisp_Object pretend, Lisp_Object pixelwise)
{
  struct frame *f = decode_live_frame (frame);
  int pixel_height;
  do { if ((! ((int) 0 < (int) -1))) do { CHECK_NUMBER (height); if (! ((((int) ~ ((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1))))) <= XINT (height) && XINT (height) <= (((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))))) args_out_of_range_3 (height, make_number ((((int) ~ ((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1))))) < 0 && (((int) ~ ((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1))))) < (-1 - (0x7fffffffffffffffL >> INTTYPEBITS)) ? (-1 - (0x7fffffffffffffffL >> INTTYPEBITS)) : (((int) ~ ((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))))), make_number (((((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))) < ((0x7fffffffffffffffL >> INTTYPEBITS)) ? (((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))) : ((0x7fffffffffffffffL >> INTTYPEBITS))))); } while (
 0
 ); else do { CHECK_NUMBER (height); if (! ((0) <= XINT (height) && XINT (height) <= (((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))))) args_out_of_range_3 (height, make_number ((0) < 0 && (0) < (-1 - (0x7fffffffffffffffL >> INTTYPEBITS)) ? (-1 - (0x7fffffffffffffffL >> INTTYPEBITS)) : (0)), make_number (((((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))) < ((0x7fffffffffffffffL >> INTTYPEBITS)) ? (((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))) : ((0x7fffffffffffffffL >> INTTYPEBITS))))); } while (
 0
 ); } while (
 0
 );
  pixel_height = (!NILP (pixelwise)
    ? XINT (height)
    : XINT (height) * ((f)->line_height));
  adjust_frame_size (f, -1, pixel_height, 1, !NILP (pretend), builtin_lisp_symbol (594));
  return builtin_lisp_symbol (0);
}
static struct Lisp_Subr Sset_frame_width = { { PVEC_SUBR << PSEUDOVECTOR_AREA_BITS }, { .a4 = Fset_frame_width }, 2, 4, "set-frame-width", 0, 0}; Lisp_Object Fset_frame_width
  (Lisp_Object frame, Lisp_Object width, Lisp_Object pretend, Lisp_Object pixelwise)
{
  struct frame *f = decode_live_frame (frame);
  int pixel_width;
  do { if ((! ((int) 0 < (int) -1))) do { CHECK_NUMBER (width); if (! ((((int) ~ ((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1))))) <= XINT (width) && XINT (width) <= (((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))))) args_out_of_range_3 (width, make_number ((((int) ~ ((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1))))) < 0 && (((int) ~ ((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1))))) < (-1 - (0x7fffffffffffffffL >> INTTYPEBITS)) ? (-1 - (0x7fffffffffffffffL >> INTTYPEBITS)) : (((int) ~ ((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))))), make_number (((((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))) < ((0x7fffffffffffffffL >> INTTYPEBITS)) ? (((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))) : ((0x7fffffffffffffffL >> INTTYPEBITS))))); } while (
 0
 ); else do { CHECK_NUMBER (width); if (! ((0) <= XINT (width) && XINT (width) <= (((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))))) args_out_of_range_3 (width, make_number ((0) < 0 && (0) < (-1 - (0x7fffffffffffffffL >> INTTYPEBITS)) ? (-1 - (0x7fffffffffffffffL >> INTTYPEBITS)) : (0)), make_number (((((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))) < ((0x7fffffffffffffffL >> INTTYPEBITS)) ? (((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))) : ((0x7fffffffffffffffL >> INTTYPEBITS))))); } while (
 0
 ); } while (
 0
 );
  pixel_width = (!NILP (pixelwise)
   ? XINT (width)
   : XINT (width) * ((f)->column_width));
  adjust_frame_size (f, pixel_width, -1, 1, !NILP (pretend), builtin_lisp_symbol (1158));
  return builtin_lisp_symbol (0);
}
static struct Lisp_Subr Sset_frame_size = { { PVEC_SUBR << PSEUDOVECTOR_AREA_BITS }, { .a4 = Fset_frame_size }, 3, 4, "set-frame-size", 0, 0}; Lisp_Object Fset_frame_size
  (Lisp_Object frame, Lisp_Object width, Lisp_Object height, Lisp_Object pixelwise)
{
  struct frame *f = decode_live_frame (frame);
  int pixel_width, pixel_height;
  do { if ((! ((int) 0 < (int) -1))) do { CHECK_NUMBER (width); if (! ((((int) ~ ((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1))))) <= XINT (width) && XINT (width) <= (((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))))) args_out_of_range_3 (width, make_number ((((int) ~ ((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1))))) < 0 && (((int) ~ ((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1))))) < (-1 - (0x7fffffffffffffffL >> INTTYPEBITS)) ? (-1 - (0x7fffffffffffffffL >> INTTYPEBITS)) : (((int) ~ ((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))))), make_number (((((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))) < ((0x7fffffffffffffffL >> INTTYPEBITS)) ? (((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))) : ((0x7fffffffffffffffL >> INTTYPEBITS))))); } while (
 0
 ); else do { CHECK_NUMBER (width); if (! ((0) <= XINT (width) && XINT (width) <= (((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))))) args_out_of_range_3 (width, make_number ((0) < 0 && (0) < (-1 - (0x7fffffffffffffffL >> INTTYPEBITS)) ? (-1 - (0x7fffffffffffffffL >> INTTYPEBITS)) : (0)), make_number (((((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))) < ((0x7fffffffffffffffL >> INTTYPEBITS)) ? (((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))) : ((0x7fffffffffffffffL >> INTTYPEBITS))))); } while (
 0
 ); } while (
 0
 );
  do { if ((! ((int) 0 < (int) -1))) do { CHECK_NUMBER (height); if (! ((((int) ~ ((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1))))) <= XINT (height) && XINT (height) <= (((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))))) args_out_of_range_3 (height, make_number ((((int) ~ ((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1))))) < 0 && (((int) ~ ((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1))))) < (-1 - (0x7fffffffffffffffL >> INTTYPEBITS)) ? (-1 - (0x7fffffffffffffffL >> INTTYPEBITS)) : (((int) ~ ((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))))), make_number (((((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))) < ((0x7fffffffffffffffL >> INTTYPEBITS)) ? (((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))) : ((0x7fffffffffffffffL >> INTTYPEBITS))))); } while (
 0
 ); else do { CHECK_NUMBER (height); if (! ((0) <= XINT (height) && XINT (height) <= (((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))))) args_out_of_range_3 (height, make_number ((0) < 0 && (0) < (-1 - (0x7fffffffffffffffL >> INTTYPEBITS)) ? (-1 - (0x7fffffffffffffffL >> INTTYPEBITS)) : (0)), make_number (((((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))) < ((0x7fffffffffffffffL >> INTTYPEBITS)) ? (((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))) : ((0x7fffffffffffffffL >> INTTYPEBITS))))); } while (
 0
 ); } while (
 0
 );
  pixel_width = (!NILP (pixelwise)
   ? XINT (width)
   : XINT (width) * ((f)->column_width));
  pixel_height = (!NILP (pixelwise)
    ? XINT (height)
    : XINT (height) * ((f)->line_height));
  adjust_frame_size (f, pixel_width, pixel_height, 1, 0, builtin_lisp_symbol (986));
  return builtin_lisp_symbol (0);
}
static struct Lisp_Subr Sframe_position = { { PVEC_SUBR << PSEUDOVECTOR_AREA_BITS }, { .a1 = Fframe_position }, 0, 1, "frame-position", 0, 0}; Lisp_Object Fframe_position
     (Lisp_Object frame)
{
  register struct frame *f = decode_live_frame (frame);
  return Fcons (make_number (f->left_pos), make_number (f->top_pos));
}
static struct Lisp_Subr Sset_frame_position = { { PVEC_SUBR << PSEUDOVECTOR_AREA_BITS }, { .a3 = Fset_frame_position }, 3, 3, "set-frame-position", 0, 0}; Lisp_Object Fset_frame_position
  (Lisp_Object frame, Lisp_Object x, Lisp_Object y)
{
  struct frame *f = decode_live_frame (frame);
  do { if ((! ((int) 0 < (int) -1))) do { CHECK_NUMBER (x); if (! ((((int) ~ ((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1))))) <= XINT (x) && XINT (x) <= (((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))))) args_out_of_range_3 (x, make_number ((((int) ~ ((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1))))) < 0 && (((int) ~ ((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1))))) < (-1 - (0x7fffffffffffffffL >> INTTYPEBITS)) ? (-1 - (0x7fffffffffffffffL >> INTTYPEBITS)) : (((int) ~ ((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))))), make_number (((((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))) < ((0x7fffffffffffffffL >> INTTYPEBITS)) ? (((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))) : ((0x7fffffffffffffffL >> INTTYPEBITS))))); } while (
 0
 ); else do { CHECK_NUMBER (x); if (! ((0) <= XINT (x) && XINT (x) <= (((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))))) args_out_of_range_3 (x, make_number ((0) < 0 && (0) < (-1 - (0x7fffffffffffffffL >> INTTYPEBITS)) ? (-1 - (0x7fffffffffffffffL >> INTTYPEBITS)) : (0)), make_number (((((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))) < ((0x7fffffffffffffffL >> INTTYPEBITS)) ? (((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))) : ((0x7fffffffffffffffL >> INTTYPEBITS))))); } while (
 0
 ); } while (
 0
 );
  do { if ((! ((int) 0 < (int) -1))) do { CHECK_NUMBER (y); if (! ((((int) ~ ((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1))))) <= XINT (y) && XINT (y) <= (((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))))) args_out_of_range_3 (y, make_number ((((int) ~ ((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1))))) < 0 && (((int) ~ ((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1))))) < (-1 - (0x7fffffffffffffffL >> INTTYPEBITS)) ? (-1 - (0x7fffffffffffffffL >> INTTYPEBITS)) : (((int) ~ ((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))))), make_number (((((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))) < ((0x7fffffffffffffffL >> INTTYPEBITS)) ? (((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))) : ((0x7fffffffffffffffL >> INTTYPEBITS))))); } while (
 0
 ); else do { CHECK_NUMBER (y); if (! ((0) <= XINT (y) && XINT (y) <= (((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))))) args_out_of_range_3 (y, make_number ((0) < 0 && (0) < (-1 - (0x7fffffffffffffffL >> INTTYPEBITS)) ? (-1 - (0x7fffffffffffffffL >> INTTYPEBITS)) : (0)), make_number (((((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))) < ((0x7fffffffffffffffL >> INTTYPEBITS)) ? (((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))) : ((0x7fffffffffffffffL >> INTTYPEBITS))))); } while (
 0
 ); } while (
 0
 );
  if (((f)->output_method == output_x_window))
    {
      x_set_offset (f, XINT (x), XINT (y), 1);
    }
  return builtin_lisp_symbol (1028);
}
struct frame_parm_table {
  const char *name;
  int sym;
};
static const struct frame_parm_table frame_parms[] =
{
  {"auto-raise", 233},
  {"auto-lower", 232},
  {"background-color", -1},
  {"border-color", 253},
  {"border-width", 254},
  {"cursor-color", 363},
  {"cursor-type", 365},
  {"font", -1},
  {"foreground-color", -1},
  {"icon-name", 610},
  {"icon-type", 612},
  {"internal-border-width", 648},
  {"right-divider-width", 931},
  {"bottom-divider-width", 259},
  {"menu-bar-lines", 750},
  {"mouse-color", 788},
  {"name", 802},
  {"scroll-bar-width", 954},
  {"scroll-bar-height", 952},
  {"title", 1048},
  {"unsplittable", 1113},
  {"vertical-scroll-bars", 1142},
  {"horizontal-scroll-bars", 605},
  {"visibility", 1143},
  {"tool-bar-lines", 1053},
  {"scroll-bar-foreground", 951},
  {"scroll-bar-background", 950},
  {"screen-gamma", 948},
  {"line-spacing", 716},
  {"left-fringe", 698},
  {"right-fringe", 933},
  {"wait-for-wm", 1150},
  {"fullscreen", 547},
  {"font-backend", 512},
  {"alpha", 213},
  {"sticky", 1004},
  {"tool-bar-position", 1054},
  {"inhibit-double-buffering", 622},
  {"undecorated", 1094},
  {"parent-frame", 855},
  {"skip-taskbar", 987},
  {"no-focus-on-map", 810},
  {"no-accept-focus", 807},
  {"z-group", 1216},
  {"override-redirect", 847},
  {"no-special-glyphs", 812},
};
enum frame_float_type
{
 FRAME_FLOAT_WIDTH,
 FRAME_FLOAT_HEIGHT,
 FRAME_FLOAT_LEFT,
 FRAME_FLOAT_TOP
};
static int
frame_float (struct frame *f, Lisp_Object val, enum frame_float_type what,
      int *parent_done, int *outer_done, int default_value)
{
  double d_val = XFLOAT_DATA (val);
  if (d_val < 0.0 || d_val > 1.0)
    return default_value;
  else
    {
      static unsigned parent_width, parent_height;
      static int parent_left, parent_top;
      static unsigned outer_minus_text_width, outer_minus_text_height;
      struct frame *p = (NILP ((f)->parent_frame) ? 
                       ((void *)0) 
                       : (((void) (
                       0 
                       && (FRAMEP ((f)->parent_frame)))), (struct frame *) XUNTAG ((f)->parent_frame, Lisp_Vectorlike)));
      if (*parent_done == 1)
 ;
      else if (p)
 {
   parent_width = ((p)->pixel_width);
   parent_height = ((p)->pixel_height);
   *parent_done = 1;
 }
      else
 {
   if (*parent_done == 0)
     return default_value;
   else if (*parent_done == -1)
     {
       Lisp_Object monitor_attributes;
       Lisp_Object workarea;
       Lisp_Object frame;
       ((((frame) = make_lisp_ptr (f, Lisp_Vectorlike)), ((void) (
      0 
      && (((((union vectorlike_header *) XUNTAG (frame, Lisp_Vectorlike)) ->size) & ((
      (9223372036854775807L) 
      - 
      (9223372036854775807L) 
      / 2) | PVEC_TYPE_MASK)) == ((
      (9223372036854775807L) 
      - 
      (9223372036854775807L) 
      / 2) | (PVEC_FRAME << PSEUDOVECTOR_AREA_BITS)))))));
       monitor_attributes = Fcar (call1 (builtin_lisp_symbol (412), frame));
       if (NILP (monitor_attributes))
  {
    *parent_done = 0;
    return default_value;
  }
       workarea = Fcdr (Fassq (builtin_lisp_symbol (1179), monitor_attributes));
       if (NILP (workarea))
  {
    *parent_done = 0;
    return default_value;
  }
       parent_left = XINT (Fnth (make_number (0), workarea));
       parent_top = XINT (Fnth (make_number (1), workarea));
       parent_width = XINT (Fnth (make_number (2), workarea));
       parent_height = XINT (Fnth (make_number (3), workarea));
       *parent_done = 1;
     }
 }
      if (*outer_done == 1)
 ;
      else if (((f)->undecorated))
 {
   outer_minus_text_width
     = ((f)->pixel_width) - (f)->text_width;
   outer_minus_text_height
     = ((f)->pixel_height) - (f)->text_height;
   *outer_done = 1;
 }
      else if (*outer_done == 0)
 return default_value;
      else if (*outer_done == -1)
 {
   Lisp_Object frame, outer_edges;
   ((((frame) = make_lisp_ptr (f, Lisp_Vectorlike)), ((void) (
  0 
  && (((((union vectorlike_header *) XUNTAG (frame, Lisp_Vectorlike)) ->size) & ((
  (9223372036854775807L) 
  - 
  (9223372036854775807L) 
  / 2) | PVEC_TYPE_MASK)) == ((
  (9223372036854775807L) 
  - 
  (9223372036854775807L) 
  / 2) | (PVEC_FRAME << PSEUDOVECTOR_AREA_BITS)))))));
   outer_edges = call2 (builtin_lisp_symbol (530), frame, builtin_lisp_symbol (837));
   if (!NILP (outer_edges))
     {
       outer_minus_text_width
  = (XINT (Fnth (make_number (2), outer_edges))
     - XINT (Fnth (make_number (0), outer_edges))
     - (f)->text_width);
       outer_minus_text_height
  = (XINT (Fnth (make_number (3), outer_edges))
     - XINT (Fnth (make_number (1), outer_edges))
     - (f)->text_height);
     }
   else
     {
       outer_minus_text_width
  = ((f)->pixel_width) - (f)->text_width;
       outer_minus_text_height
  = ((f)->pixel_height) - (f)->text_height;
     }
   *outer_done = 1;
 }
      switch (what)
 {
 case FRAME_FLOAT_WIDTH:
   return parent_width * d_val - outer_minus_text_width;
 case FRAME_FLOAT_HEIGHT:
   return parent_height * d_val - outer_minus_text_height;
 case FRAME_FLOAT_LEFT:
   {
     int rest_width = (parent_width
         - (f)->text_width
         - outer_minus_text_width);
     if (p)
       return (rest_width <= 0 ? 0 : d_val * rest_width);
     else
       return (rest_width <= 0
        ? parent_left
        : parent_left + d_val * rest_width);
   }
 case FRAME_FLOAT_TOP:
   {
     int rest_height = (parent_height
          - (f)->text_height
          - outer_minus_text_height);
     if (p)
       return (rest_height <= 0 ? 0 : d_val * rest_height);
     else
       return (rest_height <= 0
        ? parent_top
        : parent_top + d_val * rest_height);
   }
 default:
   emacs_abort ();
 }
    }
}
void
x_set_frame_parameters (struct frame *f, Lisp_Object alist)
{
  Lisp_Object tail, frame;
  int width = -1, height = -1;
  Lisp_Object left, top;
  Lisp_Object icon_left, icon_top;
  Lisp_Object fullscreen;
 _Bool 
      fullscreen_change = 
                          0
                               ;
  Lisp_Object *parms;
  Lisp_Object *values;
  ptrdiff_t i, j, size;
 _Bool 
      left_no_change = 0, top_no_change = 0;
 _Bool 
      icon_left_no_change = 0, icon_top_no_change = 0;
  int parent_done = -1, outer_done = -1;
  ((((frame) = make_lisp_ptr (f, Lisp_Vectorlike)), ((void) (
 0 
 && (((((union vectorlike_header *) XUNTAG (frame, Lisp_Vectorlike)) ->size) & ((
 (9223372036854775807L) 
 - 
 (9223372036854775807L) 
 / 2) | PVEC_TYPE_MASK)) == ((
 (9223372036854775807L) 
 - 
 (9223372036854775807L) 
 / 2) | (PVEC_FRAME << PSEUDOVECTOR_AREA_BITS)))))));
  for (size = 0, tail = alist; CONSP (tail); tail = XCDR (tail))
    size++;
  CHECK_LIST_END (tail, alist);
  ptrdiff_t sa_avail = MAX_ALLOCA; ptrdiff_t sa_count = SPECPDL_INDEX (); 
 _Bool 
 sa_must_free = 
 0
                ;
  do { ptrdiff_t alloca_nbytes; if (__builtin_mul_overflow (2 * size, word_size, &alloca_nbytes) || __builtin_add_overflow (alloca_nbytes, 0, &alloca_nbytes) || 
 (18446744073709551615UL) 
 < alloca_nbytes) memory_full (
 (18446744073709551615UL)
 ); else if (alloca_nbytes <= sa_avail) (parms) = (sa_avail -= (alloca_nbytes), 
 __builtin_alloca (
 alloca_nbytes
 )
 ); else { Lisp_Object arg_; (parms) = xmalloc (alloca_nbytes); arg_ = make_save_memory (parms, 2 * size); sa_must_free = 
 1
 ; record_unwind_protect (free_save_value, arg_); } } while (
 0
 );
  values = parms + size;
  i = 0, j = size - 1;
  for (tail = alist; CONSP (tail); tail = XCDR (tail))
    {
      Lisp_Object elt = XCAR (tail), prop = Fcar (elt), val = Fcdr (elt);
      if (EQ (prop, builtin_lisp_symbol (523))
   || EQ (prop, builtin_lisp_symbol (236))
   || EQ (prop, builtin_lisp_symbol (511)))
 {
   parms[j] = prop;
   values[j] = val;
   j--;
 }
      else
 {
   parms[i] = prop;
   values[i] = val;
   i++;
 }
    }
  alist = tail = builtin_lisp_symbol (0);
  top = left = builtin_lisp_symbol (1092);
  icon_left = icon_top = builtin_lisp_symbol (1092);
  for (i = size - 1; i >= 0; i--)
    {
      Lisp_Object prop, val;
      prop = parms[i];
      val = values[i];
      if (EQ (prop, builtin_lisp_symbol (1158)))
        {
   if (RANGED_INTEGERP (0, val, 0x7fffffff))
     width = XFASTINT (val) * ((f)->column_width) ;
   else if (CONSP (val) && EQ (XCAR (val), builtin_lisp_symbol (1039))
     && RANGED_INTEGERP (0, XCDR (val), 0x7fffffff))
     width = XFASTINT (XCDR (val));
   else if (FLOATP (val))
     width = frame_float (f, val, FRAME_FLOAT_WIDTH, &parent_done,
     &outer_done, -1);
        }
      else if (EQ (prop, builtin_lisp_symbol (594)))
        {
   if (RANGED_INTEGERP (0, val, 0x7fffffff))
     height = XFASTINT (val) * ((f)->line_height);
   else if (CONSP (val) && EQ (XCAR (val), builtin_lisp_symbol (1039))
     && RANGED_INTEGERP (0, XCDR (val), 0x7fffffff))
     height = XFASTINT (XCDR (val));
   else if (FLOATP (val))
     height = frame_float (f, val, FRAME_FLOAT_HEIGHT, &parent_done,
     &outer_done, -1);
        }
      else if (EQ (prop, builtin_lisp_symbol (1058)))
 top = val;
      else if (EQ (prop, builtin_lisp_symbol (696)))
 left = val;
      else if (EQ (prop, builtin_lisp_symbol (611)))
 icon_top = val;
      else if (EQ (prop, builtin_lisp_symbol (609)))
 icon_left = val;
      else if (EQ (prop, builtin_lisp_symbol (547)))
 {
   fullscreen = val;
   fullscreen_change = 
                      1
                          ;
 }
      else
 {
   register Lisp_Object param_index, old_value;
   old_value = get_frame_param (f, prop);
   store_frame_param (f, prop, val);
   param_index = Fget (prop, builtin_lisp_symbol (1190));
   if (NATNUMP (param_index)
       && XFASTINT (param_index) < (sizeof (frame_parms) / sizeof (frame_parms)[0])
       && ((f)->terminal->rif)->frame_parm_handlers[XINT (param_index)])
     (*(((f)->terminal->rif)->frame_parm_handlers[XINT (param_index)])) (f, val, old_value);
 }
    }
  if (EQ (left, builtin_lisp_symbol (1092)))
    {
      left_no_change = 1;
      if (f->left_pos < 0)
 left = list2 (builtin_lisp_symbol (867), make_number (f->left_pos));
      else
 ((left) = make_number (f->left_pos));
    }
  if (EQ (top, builtin_lisp_symbol (1092)))
    {
      top_no_change = 1;
      if (f->top_pos < 0)
 top = list2 (builtin_lisp_symbol (867), make_number (f->top_pos));
      else
 ((top) = make_number (f->top_pos));
    }
  if (! (INTEGERP (icon_left) && ((! ((int) 0 < (int) -1)) ? ((int) ~ ((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))) <= XINT (icon_left) : 0 <= XINT (icon_left)) && XINT (icon_left) <= ((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))))
    {
      icon_left_no_change = 1;
      icon_left = Fcdr (Fassq (builtin_lisp_symbol (609), f->param_alist));
      if (NILP (icon_left))
 ((icon_left) = make_number (0));
    }
  if (! (INTEGERP (icon_top) && ((! ((int) 0 < (int) -1)) ? ((int) ~ ((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))) <= XINT (icon_top) : 0 <= XINT (icon_top)) && XINT (icon_top) <= ((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))))
    {
      icon_top_no_change = 1;
      icon_top = Fcdr (Fassq (builtin_lisp_symbol (611), f->param_alist));
      if (NILP (icon_top))
 ((icon_top) = make_number (0));
    }
  if ((width != -1 && width != (f)->text_width)
      || (height != -1 && height != (f)->text_height))
    adjust_frame_size (f, width, height, 1, 0, builtin_lisp_symbol (1197));
  if ((!NILP (left) || !NILP (top))
      && ! (left_no_change && top_no_change)
      && ! (NUMBERP (left) && XINT (left) == f->left_pos
     && NUMBERP (top) && XINT (top) == f->top_pos))
    {
      int leftpos = 0;
      int toppos = 0;
      f->size_hint_flags &= ~ (
                              0x0010 
                                        | 
                                          0x0020
                                                   );
      if (EQ (left, builtin_lisp_symbol (768)))
 f->size_hint_flags |= 
                      0x0010
                               ;
      else if ((INTEGERP (left) && ((! ((int) 0 < (int) -1)) ? ((int) ~ ((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))) <= XINT (left) : 0 <= XINT (left)) && XINT (left) <= ((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))))
 {
   leftpos = XINT (left);
   if (leftpos < 0)
     f->size_hint_flags |= 
                          0x0010
                                   ;
 }
      else if (CONSP (left) && EQ (XCAR (left), builtin_lisp_symbol (768))
        && CONSP (XCDR (left))
        && RANGED_INTEGERP (-0x7fffffff, XCAR (XCDR (left)), 0x7fffffff))
 {
   leftpos = - XINT (XCAR (XCDR (left)));
   f->size_hint_flags |= 
                        0x0010
                                 ;
 }
      else if (CONSP (left) && EQ (XCAR (left), builtin_lisp_symbol (867))
        && CONSP (XCDR (left))
        && (INTEGERP (XCAR (XCDR (left))) && ((! ((int) 0 < (int) -1)) ? ((int) ~ ((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))) <= XINT (XCAR (XCDR (left))) : 0 <= XINT (XCAR (XCDR (left)))) && XINT (XCAR (XCDR (left))) <= ((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))))
 leftpos = XINT (XCAR (XCDR (left)));
      else if (FLOATP (left))
 leftpos = frame_float (f, left, FRAME_FLOAT_LEFT, &parent_done,
          &outer_done, 0);
      if (EQ (top, builtin_lisp_symbol (768)))
 f->size_hint_flags |= 
                      0x0020
                               ;
      else if ((INTEGERP (top) && ((! ((int) 0 < (int) -1)) ? ((int) ~ ((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))) <= XINT (top) : 0 <= XINT (top)) && XINT (top) <= ((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))))
 {
   toppos = XINT (top);
   if (toppos < 0)
     f->size_hint_flags |= 
                          0x0020
                                   ;
 }
      else if (CONSP (top) && EQ (XCAR (top), builtin_lisp_symbol (768))
        && CONSP (XCDR (top))
        && RANGED_INTEGERP (-0x7fffffff, XCAR (XCDR (top)), 0x7fffffff))
 {
   toppos = - XINT (XCAR (XCDR (top)));
   f->size_hint_flags |= 
                        0x0020
                                 ;
 }
      else if (CONSP (top) && EQ (XCAR (top), builtin_lisp_symbol (867))
        && CONSP (XCDR (top))
        && (INTEGERP (XCAR (XCDR (top))) && ((! ((int) 0 < (int) -1)) ? ((int) ~ ((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))) <= XINT (XCAR (XCDR (top))) : 0 <= XINT (XCAR (XCDR (top)))) && XINT (XCAR (XCDR (top))) <= ((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))))
 toppos = XINT (XCAR (XCDR (top)));
      else if (FLOATP (top))
 toppos = frame_float (f, top, FRAME_FLOAT_TOP, &parent_done,
         &outer_done, 0);
      f->top_pos = toppos;
      f->left_pos = leftpos;
      f->win_gravity = 
                      1
                                      ;
      x_set_offset (f, leftpos, toppos, -1);
    }
  if (fullscreen_change)
    {
      Lisp_Object old_value = get_frame_param (f, builtin_lisp_symbol (547));
      frame_size_history_add
 (f, builtin_lisp_symbol (1198), 0, 0, list2 (old_value, fullscreen));
      store_frame_param (f, builtin_lisp_symbol (547), fullscreen);
      if (!EQ (fullscreen, old_value))
 x_set_fullscreen (f, fullscreen, old_value);
    }
  if ((!NILP (icon_left) || !NILP (icon_top))
      && ! (icon_left_no_change && icon_top_no_change))
    x_wm_set_icon_position (f, XINT (icon_left), XINT (icon_top));
  do { if (sa_must_free) { sa_must_free = 
 0
 ; unbind_to (sa_count, builtin_lisp_symbol (0)); } } while (
 0
 );
}
void
x_report_frame_params (struct frame *f, Lisp_Object *alistptr)
{
  Lisp_Object tem;
  uprintmax_t w;
  char buf[((((((sizeof (w) * 8) - (! ((__typeof__ (w)) 0 < (__typeof__ (w)) -1))) * 146 + 484) / 485) + (! ((__typeof__ (w)) 0 < (__typeof__ (w)) -1))) + 1)];
  ((tem) = make_number (f->left_pos));
  if (f->left_pos >= 0)
    store_in_alist (alistptr, builtin_lisp_symbol (696), tem);
  else
    store_in_alist (alistptr, builtin_lisp_symbol (696), list2 (builtin_lisp_symbol (867), tem));
  ((tem) = make_number (f->top_pos));
  if (f->top_pos >= 0)
    store_in_alist (alistptr, builtin_lisp_symbol (1058), tem);
  else
    store_in_alist (alistptr, builtin_lisp_symbol (1058), list2 (builtin_lisp_symbol (867), tem));
  store_in_alist (alistptr, builtin_lisp_symbol (254),
    make_number (f->border_width));
  store_in_alist (alistptr, builtin_lisp_symbol (648),
    make_number (FRAME_INTERNAL_BORDER_WIDTH (f)));
  store_in_alist (alistptr, builtin_lisp_symbol (931),
    make_number (FRAME_RIGHT_DIVIDER_WIDTH (f)));
  store_in_alist (alistptr, builtin_lisp_symbol (259),
    make_number (FRAME_BOTTOM_DIVIDER_WIDTH (f)));
  store_in_alist (alistptr, builtin_lisp_symbol (698),
    make_number (FRAME_LEFT_FRINGE_WIDTH (f)));
  store_in_alist (alistptr, builtin_lisp_symbol (933),
    make_number (FRAME_RIGHT_FRINGE_WIDTH (f)));
  store_in_alist (alistptr, builtin_lisp_symbol (954),
    (! ((f)->vertical_scroll_bar_type != vertical_scroll_bar_none)
     ? make_number (0)
     : ((f)->config_scroll_bar_width) > 0
     ? make_number (((f)->config_scroll_bar_width))
     : builtin_lisp_symbol (0)));
  store_in_alist (alistptr, builtin_lisp_symbol (952),
    (! ((f)->horizontal_scroll_bars)
     ? make_number (0)
     : ((f)->config_scroll_bar_height) > 0
     ? make_number (((f)->config_scroll_bar_height))
     : builtin_lisp_symbol (0)));
  w = (uintptr_t) ((f)->output_data.x->window_desc);
  store_in_alist (alistptr, builtin_lisp_symbol (1172),
    make_formatted_string (buf, "%"
                                  "l" "u"
                                     , w));
    w = (uintptr_t) (((f)->output_data.x->widget) ? ((((f)->output_data.x->widget)) && gtk_widget_get_window (((f)->output_data.x->widget)) ? 
                   (gdk_x11_window_get_xid (
                   gtk_widget_get_window (((f)->output_data.x->widget))
                   )) 
                   : 0) : ((f)->output_data.x->window_desc));
  store_in_alist (alistptr, builtin_lisp_symbol (840),
    make_formatted_string (buf, "%"
                                  "l" "u"
                                     , w));
  store_in_alist (alistptr, builtin_lisp_symbol (610), f->icon_name);
  store_in_alist (alistptr, builtin_lisp_symbol (1143),
    ((f)->visible ? builtin_lisp_symbol (1028)
     : (f)->iconified ? builtin_lisp_symbol (608) : builtin_lisp_symbol (0)));
  store_in_alist (alistptr, builtin_lisp_symbol (406),
    XCAR (((f)->output_data.x->display_info)->name_list_element));
  if (((f)->output_data.x)->parent_desc == ((f)->output_data.x->display_info)->root_window)
    tem = builtin_lisp_symbol (0);
  else
    tem = make_natnum ((uintptr_t) ((f)->output_data.x)->parent_desc);
  store_in_alist (alistptr, builtin_lisp_symbol (459), (f->explicit_name ? builtin_lisp_symbol (1028) : builtin_lisp_symbol (0)));
  store_in_alist (alistptr, builtin_lisp_symbol (856), tem);
  store_in_alist (alistptr, builtin_lisp_symbol (1054), (f)->tool_bar_position);
}
void
x_set_fullscreen (struct frame *f, Lisp_Object new_value, Lisp_Object old_value)
{
  if (NILP (new_value))
    f->want_fullscreen = FULLSCREEN_NONE;
  else if (EQ (new_value, builtin_lisp_symbol (545)) || EQ (new_value, builtin_lisp_symbol (547)))
    f->want_fullscreen = FULLSCREEN_BOTH;
  else if (EQ (new_value, builtin_lisp_symbol (548)))
    f->want_fullscreen = FULLSCREEN_WIDTH;
  else if (EQ (new_value, builtin_lisp_symbol (546)))
    f->want_fullscreen = FULLSCREEN_HEIGHT;
  else if (EQ (new_value, builtin_lisp_symbol (745)))
    f->want_fullscreen = FULLSCREEN_MAXIMIZED;
  if (((f)->terminal)->fullscreen_hook != 
                                            ((void *)0)
                                                )
    ((f)->terminal)->fullscreen_hook (f);
}
void
x_set_line_spacing (struct frame *f, Lisp_Object new_value, Lisp_Object old_value)
{
  if (NILP (new_value))
    f->extra_line_spacing = 0;
  else if (RANGED_INTEGERP (0, new_value, 0x7fffffff))
    f->extra_line_spacing = XFASTINT (new_value);
  else if (FLOATP (new_value))
    {
      int new_spacing = XFLOAT_DATA (new_value) * ((f)->line_height) + 0.5;
      if (new_spacing >= 0)
 f->extra_line_spacing = new_spacing;
      else
 signal_error ("Invalid line-spacing", new_value);
    }
  else
    signal_error ("Invalid line-spacing", new_value);
  if ((f)->visible)
    redraw_frame (f);
}
void
x_set_screen_gamma (struct frame *f, Lisp_Object new_value, Lisp_Object old_value)
{
  Lisp_Object bgcolor;
  if (NILP (new_value))
    f->gamma = 0;
  else if (NUMBERP (new_value) && XFLOATINT (new_value) > 0)
    f->gamma = 1.0 / (0.4545 * XFLOATINT (new_value));
  else
    signal_error ("Invalid screen-gamma", new_value);
  bgcolor = Fassq (builtin_lisp_symbol (236), f->param_alist);
  if (CONSP (bgcolor) && (bgcolor = XCDR (bgcolor), STRINGP (bgcolor)))
    {
      Lisp_Object parm_index = Fget (builtin_lisp_symbol (236), builtin_lisp_symbol (1190));
      if (NATNUMP (parm_index)
   && XFASTINT (parm_index) < (sizeof (frame_parms) / sizeof (frame_parms)[0])
   && ((f)->terminal->rif)->frame_parm_handlers[XFASTINT (parm_index)])
   (*((f)->terminal->rif)->frame_parm_handlers[XFASTINT (parm_index)])
     (f, bgcolor, builtin_lisp_symbol (0));
    }
  clear_face_cache (
                   1
                       );
  fset_redisplay (f);
}
void
x_set_font (struct frame *f, Lisp_Object arg, Lisp_Object oldval)
{
  Lisp_Object font_object;
  int fontset = -1;
  Lisp_Object font_param = arg;
  store_frame_param (f, builtin_lisp_symbol (511), oldval);
  if (STRINGP (arg))
    {
      fontset = fs_query_fontset (arg, 0);
      if (fontset < 0)
 {
   font_object = font_open_by_name (f, arg);
   if (NILP (font_object))
     error ("Font `%s' is not defined", SSDATA (arg));
   arg = AREF (font_object, FONT_NAME_INDEX);
 }
      else if (fontset > 0)
 {
   font_object = font_open_by_name (f, fontset_ascii (fontset));
   if (NILP (font_object))
     error ("Font `%s' is not defined", SDATA (arg));
   arg = AREF (font_object, FONT_NAME_INDEX);
 }
      else
 error ("The default fontset can't be used for a frame font");
    }
  else if (CONSP (arg) && STRINGP (XCAR (arg)) && FONT_OBJECT_P (XCDR (arg)))
    {
      fontset = fs_query_fontset (XCAR (arg), 0);
      if (fontset < 0)
 error ("Unknown fontset: %s", SDATA (XCAR (arg)));
      font_object = XCDR (arg);
      arg = AREF (font_object, FONT_NAME_INDEX);
      font_param = Ffont_get (font_object, builtin_lisp_symbol (106));
    }
  else if (FONT_OBJECT_P (arg))
    {
      font_object = arg;
      font_param = Ffont_get (font_object, builtin_lisp_symbol (106));
      arg = AREF (font_object, FONT_NAME_INDEX);
      fontset = ((f)->output_data.x->fontset);
      if (fontset >= 0)
 {
   Lisp_Object ascii_font = fontset_ascii (fontset);
   Lisp_Object spec = font_spec_from_name (ascii_font);
   if (NILP (spec) || ! font_match_p (spec, font_object))
     fontset = -1;
 }
    }
  else
    signal_error ("Invalid font", arg);
  if (! NILP (Fequal (font_object, oldval)))
    return;
  x_new_font (f, font_object, fontset);
  store_frame_param (f, builtin_lisp_symbol (511), arg);
  store_frame_param (f, builtin_lisp_symbol (516), font_param);
  f->n_tool_bar_rows = 0;
  clear_current_matrices (f);
  (frame_garbaged = 
 1
 , fset_redisplay (f), f->garbaged = 
 1
 );
  f->fonts_changed = 
                    1
                        ;
  recompute_basic_faces (f);
  do_pending_window_change (0);
}
void
x_set_font_backend (struct frame *f, Lisp_Object new_value, Lisp_Object old_value)
{
  if (! NILP (new_value)
      && !CONSP (new_value))
    {
      char *p0, *p1;
      CHECK_STRING (new_value);
      p0 = p1 = SSDATA (new_value);
      new_value = builtin_lisp_symbol (0);
      while (*p0)
 {
   while (*p1 && ! c_isspace (*p1) && *p1 != ',') p1++;
   if (p0 < p1)
     new_value = Fcons (Fintern (make_string (p0, p1 - p0), builtin_lisp_symbol (0)),
          new_value);
   if (*p1)
     {
       int c;
       while ((c = *++p1) && c_isspace (c));
     }
   p0 = p1;
 }
      new_value = Fnreverse (new_value);
    }
  if (! NILP (old_value) && ! NILP (Fequal (old_value, new_value)))
    return;
  if (((f)->output_data.x->font))
    free_all_realized_faces (builtin_lisp_symbol (0));
  new_value = font_update_drivers (f, NILP (new_value) ? builtin_lisp_symbol (1028) : new_value);
  if (NILP (new_value))
    {
      if (NILP (old_value))
 error ("No font backend available");
      font_update_drivers (f, old_value);
      error ("None of specified font backends are available");
    }
  store_frame_param (f, builtin_lisp_symbol (512), new_value);
  if (((f)->output_data.x->font))
    {
      Lisp_Object frame;
      ((((frame) = make_lisp_ptr (f, Lisp_Vectorlike)), ((void) (
     0 
     && (((((union vectorlike_header *) XUNTAG (frame, Lisp_Vectorlike)) ->size) & ((
     (9223372036854775807L) 
     - 
     (9223372036854775807L) 
     / 2) | PVEC_TYPE_MASK)) == ((
     (9223372036854775807L) 
     - 
     (9223372036854775807L) 
     / 2) | (PVEC_FRAME << PSEUDOVECTOR_AREA_BITS)))))));
      x_set_font (f, Fframe_parameter (frame, builtin_lisp_symbol (511)), builtin_lisp_symbol (0));
      face_change = 
                   1
                       ;
      windows_or_buffers_changed = 18;
    }
}
void
x_set_left_fringe (struct frame *f, Lisp_Object new_value, Lisp_Object old_value)
{
  int unit = ((f)->column_width);
  int old_width = FRAME_LEFT_FRINGE_WIDTH (f);
  int new_width;
  new_width = (RANGED_INTEGERP (-0x7fffffff, new_value, 0x7fffffff)
        ? ((XINT (new_value)) < 0 ? -(XINT (new_value)) : (XINT (new_value))) : 8);
  if (new_width != old_width)
    {
      f->left_fringe_width = new_width;
      f->fringe_cols
 = (new_width + FRAME_RIGHT_FRINGE_WIDTH (f) + unit - 1) / unit;
      if (((f)->output_data.x->window_desc) != 0)
 adjust_frame_size (f, -1, -1, 3, 0, builtin_lisp_symbol (698));
      (frame_garbaged = 
     1
     , fset_redisplay (f), f->garbaged = 
     1
     );
    }
}
void
x_set_right_fringe (struct frame *f, Lisp_Object new_value, Lisp_Object old_value)
{
  int unit = ((f)->column_width);
  int old_width = FRAME_RIGHT_FRINGE_WIDTH (f);
  int new_width;
  new_width = (RANGED_INTEGERP (-0x7fffffff, new_value, 0x7fffffff)
        ? ((XINT (new_value)) < 0 ? -(XINT (new_value)) : (XINT (new_value))) : 8);
  if (new_width != old_width)
    {
      f->right_fringe_width = new_width;
      f->fringe_cols
 = (new_width + FRAME_LEFT_FRINGE_WIDTH (f) + unit - 1) / unit;
      if (((f)->output_data.x->window_desc) != 0)
 adjust_frame_size (f, -1, -1, 3, 0, builtin_lisp_symbol (933));
      (frame_garbaged = 
     1
     , fset_redisplay (f), f->garbaged = 
     1
     );
    }
}
void
x_set_border_width (struct frame *f, Lisp_Object arg, Lisp_Object oldval)
{
  do { if ((! ((int) 0 < (int) -1))) do { CHECK_NUMBER (arg); if (! ((((int) ~ ((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1))))) <= XINT (arg) && XINT (arg) <= (((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))))) args_out_of_range_3 (arg, make_number ((((int) ~ ((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1))))) < 0 && (((int) ~ ((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1))))) < (-1 - (0x7fffffffffffffffL >> INTTYPEBITS)) ? (-1 - (0x7fffffffffffffffL >> INTTYPEBITS)) : (((int) ~ ((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))))), make_number (((((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))) < ((0x7fffffffffffffffL >> INTTYPEBITS)) ? (((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))) : ((0x7fffffffffffffffL >> INTTYPEBITS))))); } while (
 0
 ); else do { CHECK_NUMBER (arg); if (! ((0) <= XINT (arg) && XINT (arg) <= (((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))))) args_out_of_range_3 (arg, make_number ((0) < 0 && (0) < (-1 - (0x7fffffffffffffffL >> INTTYPEBITS)) ? (-1 - (0x7fffffffffffffffL >> INTTYPEBITS)) : (0)), make_number (((((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))) < ((0x7fffffffffffffffL >> INTTYPEBITS)) ? (((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))) : ((0x7fffffffffffffffL >> INTTYPEBITS))))); } while (
 0
 ); } while (
 0
 );
  if (XINT (arg) == f->border_width)
    return;
  if (((f)->output_data.x->window_desc) != 0)
    error ("Cannot change the border width of a frame");
  f->border_width = XINT (arg);
}
void
x_set_right_divider_width (struct frame *f, Lisp_Object arg, Lisp_Object oldval)
{
  int old = FRAME_RIGHT_DIVIDER_WIDTH (f);
  do { if ((! ((int) 0 < (int) -1))) do { CHECK_NUMBER (arg); if (! ((((int) ~ ((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1))))) <= XINT (arg) && XINT (arg) <= (((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))))) args_out_of_range_3 (arg, make_number ((((int) ~ ((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1))))) < 0 && (((int) ~ ((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1))))) < (-1 - (0x7fffffffffffffffL >> INTTYPEBITS)) ? (-1 - (0x7fffffffffffffffL >> INTTYPEBITS)) : (((int) ~ ((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))))), make_number (((((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))) < ((0x7fffffffffffffffL >> INTTYPEBITS)) ? (((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))) : ((0x7fffffffffffffffL >> INTTYPEBITS))))); } while (
 0
 ); else do { CHECK_NUMBER (arg); if (! ((0) <= XINT (arg) && XINT (arg) <= (((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))))) args_out_of_range_3 (arg, make_number ((0) < 0 && (0) < (-1 - (0x7fffffffffffffffL >> INTTYPEBITS)) ? (-1 - (0x7fffffffffffffffL >> INTTYPEBITS)) : (0)), make_number (((((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))) < ((0x7fffffffffffffffL >> INTTYPEBITS)) ? (((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))) : ((0x7fffffffffffffffL >> INTTYPEBITS))))); } while (
 0
 ); } while (
 0
 );
  int new = ((0) > (XINT (arg)) ? (0) : (XINT (arg)));
  if (new != old)
    {
      f->right_divider_width = new;
      adjust_frame_size (f, -1, -1, 4, 0, builtin_lisp_symbol (931));
      adjust_frame_glyphs (f);
      (frame_garbaged = 
     1
     , fset_redisplay (f), f->garbaged = 
     1
     );
    }
}
void
x_set_bottom_divider_width (struct frame *f, Lisp_Object arg, Lisp_Object oldval)
{
  int old = FRAME_BOTTOM_DIVIDER_WIDTH (f);
  do { if ((! ((int) 0 < (int) -1))) do { CHECK_NUMBER (arg); if (! ((((int) ~ ((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1))))) <= XINT (arg) && XINT (arg) <= (((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))))) args_out_of_range_3 (arg, make_number ((((int) ~ ((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1))))) < 0 && (((int) ~ ((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1))))) < (-1 - (0x7fffffffffffffffL >> INTTYPEBITS)) ? (-1 - (0x7fffffffffffffffL >> INTTYPEBITS)) : (((int) ~ ((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))))), make_number (((((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))) < ((0x7fffffffffffffffL >> INTTYPEBITS)) ? (((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))) : ((0x7fffffffffffffffL >> INTTYPEBITS))))); } while (
 0
 ); else do { CHECK_NUMBER (arg); if (! ((0) <= XINT (arg) && XINT (arg) <= (((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))))) args_out_of_range_3 (arg, make_number ((0) < 0 && (0) < (-1 - (0x7fffffffffffffffL >> INTTYPEBITS)) ? (-1 - (0x7fffffffffffffffL >> INTTYPEBITS)) : (0)), make_number (((((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))) < ((0x7fffffffffffffffL >> INTTYPEBITS)) ? (((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))) : ((0x7fffffffffffffffL >> INTTYPEBITS))))); } while (
 0
 ); } while (
 0
 );
  int new = ((0) > (XINT (arg)) ? (0) : (XINT (arg)));
  if (new != old)
    {
      f->bottom_divider_width = new;
      adjust_frame_size (f, -1, -1, 4, 0, builtin_lisp_symbol (259));
      adjust_frame_glyphs (f);
      (frame_garbaged = 
     1
     , fset_redisplay (f), f->garbaged = 
     1
     );
    }
}
void
x_set_visibility (struct frame *f, Lisp_Object value, Lisp_Object oldval)
{
  Lisp_Object frame;
  ((((frame) = make_lisp_ptr (f, Lisp_Vectorlike)), ((void) (
 0 
 && (((((union vectorlike_header *) XUNTAG (frame, Lisp_Vectorlike)) ->size) & ((
 (9223372036854775807L) 
 - 
 (9223372036854775807L) 
 / 2) | PVEC_TYPE_MASK)) == ((
 (9223372036854775807L) 
 - 
 (9223372036854775807L) 
 / 2) | (PVEC_FRAME << PSEUDOVECTOR_AREA_BITS)))))));
  if (NILP (value))
    Fmake_frame_invisible (frame, builtin_lisp_symbol (1028));
  else if (EQ (value, builtin_lisp_symbol (608)))
    Ficonify_frame (frame);
  else
    Fmake_frame_visible (frame);
}
void
x_set_autoraise (struct frame *f, Lisp_Object arg, Lisp_Object oldval)
{
  f->auto_raise = !EQ (builtin_lisp_symbol (0), arg);
}
void
x_set_autolower (struct frame *f, Lisp_Object arg, Lisp_Object oldval)
{
  f->auto_lower = !EQ (builtin_lisp_symbol (0), arg);
}
void
x_set_unsplittable (struct frame *f, Lisp_Object arg, Lisp_Object oldval)
{
  f->no_split = !NILP (arg);
}
void
x_set_vertical_scroll_bars (struct frame *f, Lisp_Object arg, Lisp_Object oldval)
{
  if ((EQ (arg, builtin_lisp_symbol (696)) && ((f)->vertical_scroll_bar_type == vertical_scroll_bar_right))
      || (EQ (arg, builtin_lisp_symbol (929)) && ((f)->vertical_scroll_bar_type == vertical_scroll_bar_left))
      || (NILP (arg) && ((f)->vertical_scroll_bar_type != vertical_scroll_bar_none))
      || (!NILP (arg) && !((f)->vertical_scroll_bar_type != vertical_scroll_bar_none)))
    {
      ((f)->vertical_scroll_bar_type)
 = (NILP (arg)
    ? vertical_scroll_bar_none
    : EQ (builtin_lisp_symbol (696), arg)
    ? vertical_scroll_bar_left
    : EQ (builtin_lisp_symbol (929), arg)
    ? vertical_scroll_bar_right
    : EQ (builtin_lisp_symbol (696), globals.f_Vdefault_frame_scroll_bars)
    ? vertical_scroll_bar_left
    : EQ (builtin_lisp_symbol (929), globals.f_Vdefault_frame_scroll_bars)
    ? vertical_scroll_bar_right
    : vertical_scroll_bar_none);
      if (((f)->output_data.x->window_desc))
 adjust_frame_size (f, -1, -1, 3, 0, builtin_lisp_symbol (1142));
      (frame_garbaged = 
     1
     , fset_redisplay (f), f->garbaged = 
     1
     );
    }
}
void
x_set_horizontal_scroll_bars (struct frame *f, Lisp_Object arg, Lisp_Object oldval)
{
  if ((NILP (arg) && ((f)->horizontal_scroll_bars))
      || (!NILP (arg) && !((f)->horizontal_scroll_bars)))
    {
      f->horizontal_scroll_bars = NILP (arg) ? 
                                              0 
                                                    : 
                                                      1
                                                          ;
      if (((f)->output_data.x->window_desc))
 adjust_frame_size (f, -1, -1, 3, 0, builtin_lisp_symbol (605));
      (frame_garbaged = 
     1
     , fset_redisplay (f), f->garbaged = 
     1
     );
    }
}
void
x_set_scroll_bar_width (struct frame *f, Lisp_Object arg, Lisp_Object oldval)
{
  int unit = ((f)->column_width);
  if (NILP (arg))
    {
      x_set_scroll_bar_default_width (f);
      if (((f)->output_data.x->window_desc))
 adjust_frame_size (f, -1, -1, 3, 0, builtin_lisp_symbol (954));
      (frame_garbaged = 
     1
     , fset_redisplay (f), f->garbaged = 
     1
     );
    }
  else if (RANGED_INTEGERP (1, arg, 0x7fffffff)
    && XFASTINT (arg) != ((f)->config_scroll_bar_width))
    {
      ((f)->config_scroll_bar_width) = XFASTINT (arg);
      ((f)->config_scroll_bar_cols) = (XFASTINT (arg) + unit - 1) / unit;
      if (((f)->output_data.x->window_desc))
 adjust_frame_size (f, -1, -1, 3, 0, builtin_lisp_symbol (954));
      (frame_garbaged = 
     1
     , fset_redisplay (f), f->garbaged = 
     1
     );
    }
  XWINDOW (f->selected_window)->cursor.hpos = 0;
  XWINDOW (f->selected_window)->cursor.x = 0;
}
void
x_set_scroll_bar_height (struct frame *f, Lisp_Object arg, Lisp_Object oldval)
{
  int unit = ((f)->line_height);
  if (NILP (arg))
    {
      x_set_scroll_bar_default_height (f);
      if (((f)->output_data.x->window_desc))
 adjust_frame_size (f, -1, -1, 3, 0, builtin_lisp_symbol (952));
      (frame_garbaged = 
     1
     , fset_redisplay (f), f->garbaged = 
     1
     );
    }
  else if (RANGED_INTEGERP (1, arg, 0x7fffffff)
    && XFASTINT (arg) != ((f)->config_scroll_bar_height))
    {
      ((f)->config_scroll_bar_height) = XFASTINT (arg);
      ((f)->config_scroll_bar_lines) = (XFASTINT (arg) + unit - 1) / unit;
      if (((f)->output_data.x->window_desc))
 adjust_frame_size (f, -1, -1, 3, 0, builtin_lisp_symbol (952));
      (frame_garbaged = 
     1
     , fset_redisplay (f), f->garbaged = 
     1
     );
    }
  XWINDOW (f->selected_window)->cursor.vpos = 0;
  XWINDOW (f->selected_window)->cursor.y = 0;
}
void
x_set_alpha (struct frame *f, Lisp_Object arg, Lisp_Object oldval)
{
  double alpha = 1.0;
  double newval[2];
  int i;
  Lisp_Object item;
  for (i = 0; i < 2; i++)
    {
      newval[i] = 1.0;
      if (CONSP (arg))
        {
          item = CAR (arg);
          arg = CDR (arg);
        }
      else
        item = arg;
      if (NILP (item))
 alpha = - 1.0;
      else if (FLOATP (item))
 {
   alpha = XFLOAT_DATA (item);
   if (! (0 <= alpha && alpha <= 1.0))
     args_out_of_range (make_float (0.0), make_float (1.0));
 }
      else if (INTEGERP (item))
 {
   EMACS_INT ialpha = XINT (item);
   if (! (0 <= ialpha && ialpha <= 100))
     args_out_of_range (make_number (0), make_number (100));
   alpha = ialpha / 100.0;
 }
      else
 wrong_type_argument (builtin_lisp_symbol (825), item);
      newval[i] = alpha;
    }
  for (i = 0; i < 2; i++)
    f->alpha[i] = newval[i];
  block_input ();
  x_set_frame_alpha (f);
  unblock_input ();
  return;
}
void
x_set_no_special_glyphs (struct frame *f, Lisp_Object new_value, Lisp_Object old_value)
{
  if (!EQ (new_value, old_value))
    ((f)->no_special_glyphs) = !NILP (new_value);
}
_Bool 
    x_mouse_grabbed (Display_Info *dpyinfo)
{
  return (dpyinfo->grabbed
   && dpyinfo->last_mouse_frame
   && ((dpyinfo->last_mouse_frame)->terminal != 0));
}
void
x_redo_mouse_highlight (Display_Info *dpyinfo)
{
  if (dpyinfo->last_mouse_motion_frame
      && ((dpyinfo->last_mouse_motion_frame)->terminal != 0))
    note_mouse_highlight (dpyinfo->last_mouse_motion_frame,
     dpyinfo->last_mouse_motion_x,
     dpyinfo->last_mouse_motion_y);
}
void
validate_x_resource_name (void)
{
  ptrdiff_t len = 0;
  ptrdiff_t good_count = 0;
  ptrdiff_t bad_count = 0;
  Lisp_Object new;
  ptrdiff_t i;
  if (!STRINGP (globals.f_Vx_resource_class))
    globals.f_Vx_resource_class = build_string ("Emacs");
  if (STRINGP (globals.f_Vx_resource_name))
    {
      unsigned char *p = SDATA (globals.f_Vx_resource_name);
      len = SBYTES (globals.f_Vx_resource_name);
      for (i = 0; i < len; i++)
 {
   int c = p[i];
   if (! ((c >= 'a' && c <= 'z')
   || (c >= 'A' && c <= 'Z')
   || (c >= '0' && c <= '9')
   || c == '-' || c == '_'))
     bad_count++;
   else
     good_count++;
 }
    }
  else
    bad_count = 5, good_count = 0;
  if (bad_count == 0)
    return;
  if (good_count < 2 || MAX_ALLOCA - sizeof ".customization" < len)
    {
      globals.f_Vx_resource_name = build_string ("emacs");
      return;
    }
  globals.f_Vx_resource_name = new = Fcopy_sequence (globals.f_Vx_resource_name);
  for (i = 0; i < len; i++)
    {
      int c = SREF (new, i);
      if (! ((c >= 'a' && c <= 'z')
      || (c >= 'A' && c <= 'Z')
      || (c >= '0' && c <= '9')
      || c == '-' || c == '_'))
 SSET (new, i, '_');
    }
}
static Lisp_Object
xrdb_get_resource (XrmDatabase rdb, Lisp_Object attribute, Lisp_Object class, Lisp_Object component, Lisp_Object subclass)
{
  CHECK_STRING (attribute);
  CHECK_STRING (class);
  if (!NILP (component))
    CHECK_STRING (component);
  if (!NILP (subclass))
    CHECK_STRING (subclass);
  if (NILP (component) != NILP (subclass))
    error ("x-get-resource: must specify both COMPONENT and SUBCLASS or neither");
  validate_x_resource_name ();
  ptrdiff_t name_keysize = (SBYTES (globals.f_Vx_resource_name)
       + (STRINGP (component)
          ? SBYTES (component) : 0)
       + SBYTES (attribute)
       + 3);
  ptrdiff_t class_keysize = (SBYTES (globals.f_Vx_resource_class)
        + SBYTES (class)
        + (STRINGP (subclass)
    ? SBYTES (subclass) : 0)
        + 3);
  ptrdiff_t sa_avail = MAX_ALLOCA; ptrdiff_t sa_count = SPECPDL_INDEX (); 
 _Bool 
 sa_must_free = 
 0
                ;
  char *name_key = ((name_keysize + class_keysize) <= sa_avail ? (sa_avail -= (name_keysize + class_keysize), 
                  __builtin_alloca (
                  name_keysize + class_keysize
                  )
                  ) : (sa_must_free = 
                  1
                  , record_xmalloc (name_keysize + class_keysize)));
  char *class_key = name_key + name_keysize;
  name_key = ((void) (size_t) {name_keysize}, name_key);
  class_key = ((void) (size_t) {class_keysize}, class_key);
  char *nz = lispstpcpy (name_key, globals.f_Vx_resource_name);
  char *cz = lispstpcpy (class_key, globals.f_Vx_resource_class);
  *cz++ = '.';
  cz = lispstpcpy (cz, class);
  if (!NILP (component))
    {
      *cz++ = '.';
      lispstpcpy (cz, subclass);
      *nz++ = '.';
      nz = lispstpcpy (nz, component);
    }
  *nz++ = '.';
  lispstpcpy (nz, attribute);
  char *value = x_get_string_resource (rdb, name_key, class_key);
  do { if (sa_must_free) { sa_must_free = 
 0
 ; unbind_to (sa_count, builtin_lisp_symbol (0)); } } while (
 0
 );
  if (value && *value)
    return build_string (value);
  else
    return builtin_lisp_symbol (0);
}
static struct Lisp_Subr Sx_get_resource = { { PVEC_SUBR << PSEUDOVECTOR_AREA_BITS }, { .a4 = Fx_get_resource }, 2, 4, "x-get-resource", 0, 0}; Lisp_Object Fx_get_resource
  (Lisp_Object attribute, Lisp_Object class, Lisp_Object component,
   Lisp_Object subclass)
{
  check_window_system (
                      ((void *)0)
                          );
  return xrdb_get_resource (check_x_display_info (builtin_lisp_symbol (0))->xrdb,
       attribute, class, component, subclass);
}
Lisp_Object
display_x_get_resource (Display_Info *dpyinfo, Lisp_Object attribute,
   Lisp_Object class, Lisp_Object component,
   Lisp_Object subclass)
{
  return xrdb_get_resource (dpyinfo->xrdb,
       attribute, class, component, subclass);
}
Lisp_Object
x_get_arg (Display_Info *dpyinfo, Lisp_Object alist, Lisp_Object param,
    const char *attribute, const char *class, enum resource_types type)
{
  Lisp_Object tem;
  tem = Fassq (param, alist);
  if (!NILP (tem))
    {
      Lisp_Object tail;
      XSETCAR (tem, builtin_lisp_symbol (0));
      for (tail = alist; CONSP (tail); tail = XCDR (tail))
 if (CONSP (XCAR (tail))
     && EQ (XCAR (XCAR (tail)), param))
   XSETCAR (XCAR (tail), builtin_lisp_symbol (0));
    }
  else
    tem = Fassq (param, globals.f_Vdefault_frame_alist);
  if (EQ (tem, builtin_lisp_symbol (0)))
    {
      if (attribute && dpyinfo)
 {
   Lisp_Object at = (USE_STACK_STRING ? (make_lisp_ptr ((&(struct Lisp_String) {{{strlen (attribute), -1, 0, (unsigned char *) (attribute)}}}), Lisp_String)) : make_unibyte_string (attribute, strlen (attribute)));
   Lisp_Object cl = (USE_STACK_STRING ? (make_lisp_ptr ((&(struct Lisp_String) {{{strlen (class), -1, 0, (unsigned char *) (class)}}}), Lisp_String)) : make_unibyte_string (class, strlen (class)));
   tem = display_x_get_resource (dpyinfo, at, cl, builtin_lisp_symbol (0), builtin_lisp_symbol (0));
   if (NILP (tem))
     return builtin_lisp_symbol (1092);
   switch (type)
     {
     case RES_TYPE_NUMBER:
       return make_number (atoi (SSDATA (tem)));
     case RES_TYPE_BOOLEAN_NUMBER:
       if (!
           __extension__ ({ size_t __s1_len, __s2_len; (__builtin_constant_p (
           SSDATA (tem)
           ) && __builtin_constant_p (
           "on"
           ) && (__s1_len = __builtin_strlen (
           SSDATA (tem)
           ), __s2_len = __builtin_strlen (
           "on"
           ), (!((size_t)(const void *)((
           SSDATA (tem)
           ) + 1) - (size_t)(const void *)(
           SSDATA (tem)
           ) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((
           "on"
           ) + 1) - (size_t)(const void *)(
           "on"
           ) == 1) || __s2_len >= 4)) ? __builtin_strcmp (
           SSDATA (tem)
           , 
           "on"
           ) : (__builtin_constant_p (
           SSDATA (tem)
           ) && ((size_t)(const void *)((
           SSDATA (tem)
           ) + 1) - (size_t)(const void *)(
           SSDATA (tem)
           ) == 1) && (__s1_len = __builtin_strlen (
           SSDATA (tem)
           ), __s1_len < 4) ? (__builtin_constant_p (
           "on"
           ) && ((size_t)(const void *)((
           "on"
           ) + 1) - (size_t)(const void *)(
           "on"
           ) == 1) ? __builtin_strcmp (
           SSDATA (tem)
           , 
           "on"
           ) : (__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
           "on"
           ); int __result = (((const unsigned char *) (const char *) (
           SSDATA (tem)
           ))[0] - __s2[0]); if (__s1_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
           SSDATA (tem)
           ))[1] - __s2[1]); if (__s1_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
           SSDATA (tem)
           ))[2] - __s2[2]); if (__s1_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
           SSDATA (tem)
           ))[3] - __s2[3]); } } __result; }))) : (__builtin_constant_p (
           "on"
           ) && ((size_t)(const void *)((
           "on"
           ) + 1) - (size_t)(const void *)(
           "on"
           ) == 1) && (__s2_len = __builtin_strlen (
           "on"
           ), __s2_len < 4) ? (__builtin_constant_p (
           SSDATA (tem)
           ) && ((size_t)(const void *)((
           SSDATA (tem)
           ) + 1) - (size_t)(const void *)(
           SSDATA (tem)
           ) == 1) ? __builtin_strcmp (
           SSDATA (tem)
           , 
           "on"
           ) : (- (__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
           SSDATA (tem)
           ); int __result = (((const unsigned char *) (const char *) (
           "on"
           ))[0] - __s2[0]); if (__s2_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
           "on"
           ))[1] - __s2[1]); if (__s2_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
           "on"
           ))[2] - __s2[2]); if (__s2_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
           "on"
           ))[3] - __s2[3]); } } __result; })))) : __builtin_strcmp (
           SSDATA (tem)
           , 
           "on"
           )))); })
   || !
       __extension__ ({ size_t __s1_len, __s2_len; (__builtin_constant_p (
       SSDATA (tem)
       ) && __builtin_constant_p (
       "true"
       ) && (__s1_len = __builtin_strlen (
       SSDATA (tem)
       ), __s2_len = __builtin_strlen (
       "true"
       ), (!((size_t)(const void *)((
       SSDATA (tem)
       ) + 1) - (size_t)(const void *)(
       SSDATA (tem)
       ) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((
       "true"
       ) + 1) - (size_t)(const void *)(
       "true"
       ) == 1) || __s2_len >= 4)) ? __builtin_strcmp (
       SSDATA (tem)
       , 
       "true"
       ) : (__builtin_constant_p (
       SSDATA (tem)
       ) && ((size_t)(const void *)((
       SSDATA (tem)
       ) + 1) - (size_t)(const void *)(
       SSDATA (tem)
       ) == 1) && (__s1_len = __builtin_strlen (
       SSDATA (tem)
       ), __s1_len < 4) ? (__builtin_constant_p (
       "true"
       ) && ((size_t)(const void *)((
       "true"
       ) + 1) - (size_t)(const void *)(
       "true"
       ) == 1) ? __builtin_strcmp (
       SSDATA (tem)
       , 
       "true"
       ) : (__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
       "true"
       ); int __result = (((const unsigned char *) (const char *) (
       SSDATA (tem)
       ))[0] - __s2[0]); if (__s1_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
       SSDATA (tem)
       ))[1] - __s2[1]); if (__s1_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
       SSDATA (tem)
       ))[2] - __s2[2]); if (__s1_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
       SSDATA (tem)
       ))[3] - __s2[3]); } } __result; }))) : (__builtin_constant_p (
       "true"
       ) && ((size_t)(const void *)((
       "true"
       ) + 1) - (size_t)(const void *)(
       "true"
       ) == 1) && (__s2_len = __builtin_strlen (
       "true"
       ), __s2_len < 4) ? (__builtin_constant_p (
       SSDATA (tem)
       ) && ((size_t)(const void *)((
       SSDATA (tem)
       ) + 1) - (size_t)(const void *)(
       SSDATA (tem)
       ) == 1) ? __builtin_strcmp (
       SSDATA (tem)
       , 
       "true"
       ) : (- (__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
       SSDATA (tem)
       ); int __result = (((const unsigned char *) (const char *) (
       "true"
       ))[0] - __s2[0]); if (__s2_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
       "true"
       ))[1] - __s2[1]); if (__s2_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
       "true"
       ))[2] - __s2[2]); if (__s2_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
       "true"
       ))[3] - __s2[3]); } } __result; })))) : __builtin_strcmp (
       SSDATA (tem)
       , 
       "true"
       )))); })
                                    )
  return make_number (1);
       return make_number (atoi (SSDATA (tem)));
              break;
     case RES_TYPE_FLOAT:
       return make_float (atof (SSDATA (tem)));
     case RES_TYPE_BOOLEAN:
       tem = Fdowncase (tem);
       if (!
           __extension__ ({ size_t __s1_len, __s2_len; (__builtin_constant_p (
           SSDATA (tem)
           ) && __builtin_constant_p (
           "on"
           ) && (__s1_len = __builtin_strlen (
           SSDATA (tem)
           ), __s2_len = __builtin_strlen (
           "on"
           ), (!((size_t)(const void *)((
           SSDATA (tem)
           ) + 1) - (size_t)(const void *)(
           SSDATA (tem)
           ) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((
           "on"
           ) + 1) - (size_t)(const void *)(
           "on"
           ) == 1) || __s2_len >= 4)) ? __builtin_strcmp (
           SSDATA (tem)
           , 
           "on"
           ) : (__builtin_constant_p (
           SSDATA (tem)
           ) && ((size_t)(const void *)((
           SSDATA (tem)
           ) + 1) - (size_t)(const void *)(
           SSDATA (tem)
           ) == 1) && (__s1_len = __builtin_strlen (
           SSDATA (tem)
           ), __s1_len < 4) ? (__builtin_constant_p (
           "on"
           ) && ((size_t)(const void *)((
           "on"
           ) + 1) - (size_t)(const void *)(
           "on"
           ) == 1) ? __builtin_strcmp (
           SSDATA (tem)
           , 
           "on"
           ) : (__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
           "on"
           ); int __result = (((const unsigned char *) (const char *) (
           SSDATA (tem)
           ))[0] - __s2[0]); if (__s1_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
           SSDATA (tem)
           ))[1] - __s2[1]); if (__s1_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
           SSDATA (tem)
           ))[2] - __s2[2]); if (__s1_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
           SSDATA (tem)
           ))[3] - __s2[3]); } } __result; }))) : (__builtin_constant_p (
           "on"
           ) && ((size_t)(const void *)((
           "on"
           ) + 1) - (size_t)(const void *)(
           "on"
           ) == 1) && (__s2_len = __builtin_strlen (
           "on"
           ), __s2_len < 4) ? (__builtin_constant_p (
           SSDATA (tem)
           ) && ((size_t)(const void *)((
           SSDATA (tem)
           ) + 1) - (size_t)(const void *)(
           SSDATA (tem)
           ) == 1) ? __builtin_strcmp (
           SSDATA (tem)
           , 
           "on"
           ) : (- (__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
           SSDATA (tem)
           ); int __result = (((const unsigned char *) (const char *) (
           "on"
           ))[0] - __s2[0]); if (__s2_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
           "on"
           ))[1] - __s2[1]); if (__s2_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
           "on"
           ))[2] - __s2[2]); if (__s2_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
           "on"
           ))[3] - __s2[3]); } } __result; })))) : __builtin_strcmp (
           SSDATA (tem)
           , 
           "on"
           )))); })
   || !
       __extension__ ({ size_t __s1_len, __s2_len; (__builtin_constant_p (
       SSDATA (tem)
       ) && __builtin_constant_p (
       "true"
       ) && (__s1_len = __builtin_strlen (
       SSDATA (tem)
       ), __s2_len = __builtin_strlen (
       "true"
       ), (!((size_t)(const void *)((
       SSDATA (tem)
       ) + 1) - (size_t)(const void *)(
       SSDATA (tem)
       ) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((
       "true"
       ) + 1) - (size_t)(const void *)(
       "true"
       ) == 1) || __s2_len >= 4)) ? __builtin_strcmp (
       SSDATA (tem)
       , 
       "true"
       ) : (__builtin_constant_p (
       SSDATA (tem)
       ) && ((size_t)(const void *)((
       SSDATA (tem)
       ) + 1) - (size_t)(const void *)(
       SSDATA (tem)
       ) == 1) && (__s1_len = __builtin_strlen (
       SSDATA (tem)
       ), __s1_len < 4) ? (__builtin_constant_p (
       "true"
       ) && ((size_t)(const void *)((
       "true"
       ) + 1) - (size_t)(const void *)(
       "true"
       ) == 1) ? __builtin_strcmp (
       SSDATA (tem)
       , 
       "true"
       ) : (__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
       "true"
       ); int __result = (((const unsigned char *) (const char *) (
       SSDATA (tem)
       ))[0] - __s2[0]); if (__s1_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
       SSDATA (tem)
       ))[1] - __s2[1]); if (__s1_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
       SSDATA (tem)
       ))[2] - __s2[2]); if (__s1_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
       SSDATA (tem)
       ))[3] - __s2[3]); } } __result; }))) : (__builtin_constant_p (
       "true"
       ) && ((size_t)(const void *)((
       "true"
       ) + 1) - (size_t)(const void *)(
       "true"
       ) == 1) && (__s2_len = __builtin_strlen (
       "true"
       ), __s2_len < 4) ? (__builtin_constant_p (
       SSDATA (tem)
       ) && ((size_t)(const void *)((
       SSDATA (tem)
       ) + 1) - (size_t)(const void *)(
       SSDATA (tem)
       ) == 1) ? __builtin_strcmp (
       SSDATA (tem)
       , 
       "true"
       ) : (- (__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
       SSDATA (tem)
       ); int __result = (((const unsigned char *) (const char *) (
       "true"
       ))[0] - __s2[0]); if (__s2_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
       "true"
       ))[1] - __s2[1]); if (__s2_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
       "true"
       ))[2] - __s2[2]); if (__s2_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
       "true"
       ))[3] - __s2[3]); } } __result; })))) : __builtin_strcmp (
       SSDATA (tem)
       , 
       "true"
       )))); })
                                    )
  return builtin_lisp_symbol (1028);
       else
  return builtin_lisp_symbol (0);
     case RES_TYPE_STRING:
       return tem;
     case RES_TYPE_SYMBOL:
       {
  Lisp_Object lower;
  lower = Fdowncase (tem);
  if (!
      __extension__ ({ size_t __s1_len, __s2_len; (__builtin_constant_p (
      SSDATA (lower)
      ) && __builtin_constant_p (
      "on"
      ) && (__s1_len = __builtin_strlen (
      SSDATA (lower)
      ), __s2_len = __builtin_strlen (
      "on"
      ), (!((size_t)(const void *)((
      SSDATA (lower)
      ) + 1) - (size_t)(const void *)(
      SSDATA (lower)
      ) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((
      "on"
      ) + 1) - (size_t)(const void *)(
      "on"
      ) == 1) || __s2_len >= 4)) ? __builtin_strcmp (
      SSDATA (lower)
      , 
      "on"
      ) : (__builtin_constant_p (
      SSDATA (lower)
      ) && ((size_t)(const void *)((
      SSDATA (lower)
      ) + 1) - (size_t)(const void *)(
      SSDATA (lower)
      ) == 1) && (__s1_len = __builtin_strlen (
      SSDATA (lower)
      ), __s1_len < 4) ? (__builtin_constant_p (
      "on"
      ) && ((size_t)(const void *)((
      "on"
      ) + 1) - (size_t)(const void *)(
      "on"
      ) == 1) ? __builtin_strcmp (
      SSDATA (lower)
      , 
      "on"
      ) : (__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
      "on"
      ); int __result = (((const unsigned char *) (const char *) (
      SSDATA (lower)
      ))[0] - __s2[0]); if (__s1_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
      SSDATA (lower)
      ))[1] - __s2[1]); if (__s1_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
      SSDATA (lower)
      ))[2] - __s2[2]); if (__s1_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
      SSDATA (lower)
      ))[3] - __s2[3]); } } __result; }))) : (__builtin_constant_p (
      "on"
      ) && ((size_t)(const void *)((
      "on"
      ) + 1) - (size_t)(const void *)(
      "on"
      ) == 1) && (__s2_len = __builtin_strlen (
      "on"
      ), __s2_len < 4) ? (__builtin_constant_p (
      SSDATA (lower)
      ) && ((size_t)(const void *)((
      SSDATA (lower)
      ) + 1) - (size_t)(const void *)(
      SSDATA (lower)
      ) == 1) ? __builtin_strcmp (
      SSDATA (lower)
      , 
      "on"
      ) : (- (__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
      SSDATA (lower)
      ); int __result = (((const unsigned char *) (const char *) (
      "on"
      ))[0] - __s2[0]); if (__s2_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
      "on"
      ))[1] - __s2[1]); if (__s2_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
      "on"
      ))[2] - __s2[2]); if (__s2_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
      "on"
      ))[3] - __s2[3]); } } __result; })))) : __builtin_strcmp (
      SSDATA (lower)
      , 
      "on"
      )))); })
     || !
         __extension__ ({ size_t __s1_len, __s2_len; (__builtin_constant_p (
         SSDATA (lower)
         ) && __builtin_constant_p (
         "true"
         ) && (__s1_len = __builtin_strlen (
         SSDATA (lower)
         ), __s2_len = __builtin_strlen (
         "true"
         ), (!((size_t)(const void *)((
         SSDATA (lower)
         ) + 1) - (size_t)(const void *)(
         SSDATA (lower)
         ) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((
         "true"
         ) + 1) - (size_t)(const void *)(
         "true"
         ) == 1) || __s2_len >= 4)) ? __builtin_strcmp (
         SSDATA (lower)
         , 
         "true"
         ) : (__builtin_constant_p (
         SSDATA (lower)
         ) && ((size_t)(const void *)((
         SSDATA (lower)
         ) + 1) - (size_t)(const void *)(
         SSDATA (lower)
         ) == 1) && (__s1_len = __builtin_strlen (
         SSDATA (lower)
         ), __s1_len < 4) ? (__builtin_constant_p (
         "true"
         ) && ((size_t)(const void *)((
         "true"
         ) + 1) - (size_t)(const void *)(
         "true"
         ) == 1) ? __builtin_strcmp (
         SSDATA (lower)
         , 
         "true"
         ) : (__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
         "true"
         ); int __result = (((const unsigned char *) (const char *) (
         SSDATA (lower)
         ))[0] - __s2[0]); if (__s1_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
         SSDATA (lower)
         ))[1] - __s2[1]); if (__s1_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
         SSDATA (lower)
         ))[2] - __s2[2]); if (__s1_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
         SSDATA (lower)
         ))[3] - __s2[3]); } } __result; }))) : (__builtin_constant_p (
         "true"
         ) && ((size_t)(const void *)((
         "true"
         ) + 1) - (size_t)(const void *)(
         "true"
         ) == 1) && (__s2_len = __builtin_strlen (
         "true"
         ), __s2_len < 4) ? (__builtin_constant_p (
         SSDATA (lower)
         ) && ((size_t)(const void *)((
         SSDATA (lower)
         ) + 1) - (size_t)(const void *)(
         SSDATA (lower)
         ) == 1) ? __builtin_strcmp (
         SSDATA (lower)
         , 
         "true"
         ) : (- (__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
         SSDATA (lower)
         ); int __result = (((const unsigned char *) (const char *) (
         "true"
         ))[0] - __s2[0]); if (__s2_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
         "true"
         ))[1] - __s2[1]); if (__s2_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
         "true"
         ))[2] - __s2[2]); if (__s2_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
         "true"
         ))[3] - __s2[3]); } } __result; })))) : __builtin_strcmp (
         SSDATA (lower)
         , 
         "true"
         )))); })
                                        )
    return builtin_lisp_symbol (1028);
  else if (!
           __extension__ ({ size_t __s1_len, __s2_len; (__builtin_constant_p (
           SSDATA (lower)
           ) && __builtin_constant_p (
           "off"
           ) && (__s1_len = __builtin_strlen (
           SSDATA (lower)
           ), __s2_len = __builtin_strlen (
           "off"
           ), (!((size_t)(const void *)((
           SSDATA (lower)
           ) + 1) - (size_t)(const void *)(
           SSDATA (lower)
           ) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((
           "off"
           ) + 1) - (size_t)(const void *)(
           "off"
           ) == 1) || __s2_len >= 4)) ? __builtin_strcmp (
           SSDATA (lower)
           , 
           "off"
           ) : (__builtin_constant_p (
           SSDATA (lower)
           ) && ((size_t)(const void *)((
           SSDATA (lower)
           ) + 1) - (size_t)(const void *)(
           SSDATA (lower)
           ) == 1) && (__s1_len = __builtin_strlen (
           SSDATA (lower)
           ), __s1_len < 4) ? (__builtin_constant_p (
           "off"
           ) && ((size_t)(const void *)((
           "off"
           ) + 1) - (size_t)(const void *)(
           "off"
           ) == 1) ? __builtin_strcmp (
           SSDATA (lower)
           , 
           "off"
           ) : (__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
           "off"
           ); int __result = (((const unsigned char *) (const char *) (
           SSDATA (lower)
           ))[0] - __s2[0]); if (__s1_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
           SSDATA (lower)
           ))[1] - __s2[1]); if (__s1_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
           SSDATA (lower)
           ))[2] - __s2[2]); if (__s1_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
           SSDATA (lower)
           ))[3] - __s2[3]); } } __result; }))) : (__builtin_constant_p (
           "off"
           ) && ((size_t)(const void *)((
           "off"
           ) + 1) - (size_t)(const void *)(
           "off"
           ) == 1) && (__s2_len = __builtin_strlen (
           "off"
           ), __s2_len < 4) ? (__builtin_constant_p (
           SSDATA (lower)
           ) && ((size_t)(const void *)((
           SSDATA (lower)
           ) + 1) - (size_t)(const void *)(
           SSDATA (lower)
           ) == 1) ? __builtin_strcmp (
           SSDATA (lower)
           , 
           "off"
           ) : (- (__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
           SSDATA (lower)
           ); int __result = (((const unsigned char *) (const char *) (
           "off"
           ))[0] - __s2[0]); if (__s2_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
           "off"
           ))[1] - __s2[1]); if (__s2_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
           "off"
           ))[2] - __s2[2]); if (__s2_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
           "off"
           ))[3] - __s2[3]); } } __result; })))) : __builtin_strcmp (
           SSDATA (lower)
           , 
           "off"
           )))); })
       || !
           __extension__ ({ size_t __s1_len, __s2_len; (__builtin_constant_p (
           SSDATA (lower)
           ) && __builtin_constant_p (
           "false"
           ) && (__s1_len = __builtin_strlen (
           SSDATA (lower)
           ), __s2_len = __builtin_strlen (
           "false"
           ), (!((size_t)(const void *)((
           SSDATA (lower)
           ) + 1) - (size_t)(const void *)(
           SSDATA (lower)
           ) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((
           "false"
           ) + 1) - (size_t)(const void *)(
           "false"
           ) == 1) || __s2_len >= 4)) ? __builtin_strcmp (
           SSDATA (lower)
           , 
           "false"
           ) : (__builtin_constant_p (
           SSDATA (lower)
           ) && ((size_t)(const void *)((
           SSDATA (lower)
           ) + 1) - (size_t)(const void *)(
           SSDATA (lower)
           ) == 1) && (__s1_len = __builtin_strlen (
           SSDATA (lower)
           ), __s1_len < 4) ? (__builtin_constant_p (
           "false"
           ) && ((size_t)(const void *)((
           "false"
           ) + 1) - (size_t)(const void *)(
           "false"
           ) == 1) ? __builtin_strcmp (
           SSDATA (lower)
           , 
           "false"
           ) : (__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
           "false"
           ); int __result = (((const unsigned char *) (const char *) (
           SSDATA (lower)
           ))[0] - __s2[0]); if (__s1_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
           SSDATA (lower)
           ))[1] - __s2[1]); if (__s1_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
           SSDATA (lower)
           ))[2] - __s2[2]); if (__s1_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
           SSDATA (lower)
           ))[3] - __s2[3]); } } __result; }))) : (__builtin_constant_p (
           "false"
           ) && ((size_t)(const void *)((
           "false"
           ) + 1) - (size_t)(const void *)(
           "false"
           ) == 1) && (__s2_len = __builtin_strlen (
           "false"
           ), __s2_len < 4) ? (__builtin_constant_p (
           SSDATA (lower)
           ) && ((size_t)(const void *)((
           SSDATA (lower)
           ) + 1) - (size_t)(const void *)(
           SSDATA (lower)
           ) == 1) ? __builtin_strcmp (
           SSDATA (lower)
           , 
           "false"
           ) : (- (__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
           SSDATA (lower)
           ); int __result = (((const unsigned char *) (const char *) (
           "false"
           ))[0] - __s2[0]); if (__s2_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
           "false"
           ))[1] - __s2[1]); if (__s2_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
           "false"
           ))[2] - __s2[2]); if (__s2_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
           "false"
           ))[3] - __s2[3]); } } __result; })))) : __builtin_strcmp (
           SSDATA (lower)
           , 
           "false"
           )))); })
                                           )
    return builtin_lisp_symbol (0);
  else
    return Fintern (tem, builtin_lisp_symbol (0));
       }
     default:
       emacs_abort ();
     }
 }
      else
 return builtin_lisp_symbol (1092);
    }
  return Fcdr (tem);
}
static Lisp_Object
x_frame_get_arg (struct frame *f, Lisp_Object alist, Lisp_Object param,
   const char *attribute, const char *class,
   enum resource_types type)
{
  return x_get_arg (((f)->output_data.x->display_info),
      alist, param, attribute, class, type);
}
Lisp_Object
x_frame_get_and_record_arg (struct frame *f, Lisp_Object alist,
       Lisp_Object param,
       const char *attribute, const char *class,
       enum resource_types type)
{
  Lisp_Object value;
  value = x_get_arg (((f)->output_data.x->display_info), alist, param,
       attribute, class, type);
  if (! NILP (value) && ! EQ (value, builtin_lisp_symbol (1092)))
    store_frame_param (f, param, value);
  return value;
}
Lisp_Object
x_default_parameter (struct frame *f, Lisp_Object alist, Lisp_Object prop,
       Lisp_Object deflt, const char *xprop, const char *xclass,
       enum resource_types type)
{
  Lisp_Object tem;
  tem = x_frame_get_arg (f, alist, prop, xprop, xclass, type);
  if (EQ (tem, builtin_lisp_symbol (1092)))
    tem = deflt;
  Lisp_Object arg = (USE_STACK_CONS ? make_lisp_ptr (&((struct Lisp_Cons) {{{(USE_STACK_CONS ? make_lisp_ptr (&((struct Lisp_Cons) {{{prop, {tem}}}}), Lisp_Cons) : Fcons (prop, tem)), {builtin_lisp_symbol (0)}}}}), Lisp_Cons) : list1 ((USE_STACK_CONS ? make_lisp_ptr (&((struct Lisp_Cons) {{{prop, {tem}}}}), Lisp_Cons) : Fcons (prop, tem))));
  x_set_frame_parameters (f, arg);
  return tem;
}
static struct Lisp_Subr Sx_parse_geometry = { { PVEC_SUBR << PSEUDOVECTOR_AREA_BITS }, { .a1 = Fx_parse_geometry }, 1, 1, "x-parse-geometry", 0, 0}; Lisp_Object Fx_parse_geometry
  (Lisp_Object string)
{
  int geometry, x, y;
  unsigned int width, height;
  Lisp_Object result;
  CHECK_STRING (string);
  geometry = XParseGeometry (SSDATA (string),
        &x, &y, &width, &height);
  result = builtin_lisp_symbol (0);
  if (geometry & 
                0x0001
                      )
    {
      Lisp_Object element;
      if (x >= 0 && (geometry & 
                               0x0010
                                        ))
 element = list3 (builtin_lisp_symbol (696), builtin_lisp_symbol (768), make_number (-x));
      else if (x < 0 && ! (geometry & 
                                     0x0010
                                              ))
 element = list3 (builtin_lisp_symbol (696), builtin_lisp_symbol (867), make_number (x));
      else
 element = Fcons (builtin_lisp_symbol (696), make_number (x));
      result = Fcons (element, result);
    }
  if (geometry & 
                0x0002
                      )
    {
      Lisp_Object element;
      if (y >= 0 && (geometry & 
                               0x0020
                                        ))
 element = list3 (builtin_lisp_symbol (1058), builtin_lisp_symbol (768), make_number (-y));
      else if (y < 0 && ! (geometry & 
                                     0x0020
                                              ))
 element = list3 (builtin_lisp_symbol (1058), builtin_lisp_symbol (867), make_number (y));
      else
 element = Fcons (builtin_lisp_symbol (1058), make_number (y));
      result = Fcons (element, result);
    }
  if (geometry & 
                0x0004
                          )
    result = Fcons (Fcons (builtin_lisp_symbol (1158), make_number (width)), result);
  if (geometry & 
                0x0008
                           )
    result = Fcons (Fcons (builtin_lisp_symbol (594), make_number (height)), result);
  return result;
}
long
x_figure_window_size (struct frame *f, Lisp_Object parms, 
                                                         _Bool 
                                                              toolbar_p, int *x_width, int *x_height)
{
  Lisp_Object height, width, user_size, top, left, user_position;
  long window_prompting = 0;
  Display_Info *dpyinfo = ((f)->output_data.x->display_info);
  int parent_done = -1, outer_done = -1;
  ((f)->text_width = (80 * ((f)->column_width)), (f)->pixel_width = ((80 * ((f)->column_width)) + (((f)->vertical_scroll_bar_type != vertical_scroll_bar_none) ? ((f)->config_scroll_bar_width) : 0) + FRAME_TOTAL_FRINGE_WIDTH (f) + 2 * FRAME_INTERNAL_BORDER_WIDTH (f)));
  ((f)->text_cols = (80), (f)->total_cols = ((80) + (((f)->vertical_scroll_bar_type != vertical_scroll_bar_none) ? ((f)->config_scroll_bar_cols) : 0) + FRAME_FRINGE_COLS (f)));
  ((f)->text_height = (36 * ((f)->line_height)), (f)->pixel_height = ((36 * ((f)->line_height)) + ((f)->menu_bar_height + (f)->tool_bar_height) + (((f)->horizontal_scroll_bars) ? ((f)->config_scroll_bar_height) : 0) + 2 * FRAME_INTERNAL_BORDER_WIDTH (f)));
  ((f)->text_lines = (36), (f)->total_lines = ((36) + ((f)->menu_bar_lines + (f)->tool_bar_lines) + (((f)->horizontal_scroll_bars) ? ((f)->config_scroll_bar_lines) : 0)));
  f->top_pos = 0;
  f->left_pos = 0;
  if (toolbar_p && (f)->tool_bar_lines)
    {
      if (frame_default_tool_bar_height)
 (f)->tool_bar_height = frame_default_tool_bar_height;
      else
 {
   int margin, relief;
   relief = (globals.f_tool_bar_button_relief >= 0
      ? globals.f_tool_bar_button_relief
      : 1);
   if (RANGED_INTEGERP (1, globals.f_Vtool_bar_button_margin, 0x7fffffff))
     margin = XFASTINT (globals.f_Vtool_bar_button_margin);
   else if (CONSP (globals.f_Vtool_bar_button_margin)
     && RANGED_INTEGERP (1, XCDR (globals.f_Vtool_bar_button_margin), 0x7fffffff))
     margin = XFASTINT (XCDR (globals.f_Vtool_bar_button_margin));
   else
     margin = 0;
   (f)->tool_bar_height
     = 24 + 2 * margin + 2 * relief;
 }
    }
  f->new_width = f->new_height = 0;
  height = x_get_arg (dpyinfo, parms, builtin_lisp_symbol (594), 0, 0, RES_TYPE_NUMBER);
  width = x_get_arg (dpyinfo, parms, builtin_lisp_symbol (1158), 0, 0, RES_TYPE_NUMBER);
  if (!EQ (width, builtin_lisp_symbol (1092)) || !EQ (height, builtin_lisp_symbol (1092)))
    {
      if (!EQ (width, builtin_lisp_symbol (1092)))
 {
   if (CONSP (width) && EQ (XCAR (width), builtin_lisp_symbol (1039)))
     {
       CHECK_NUMBER (XCDR (width));
       if ((XINT (XCDR (width)) < 0 || XINT (XCDR (width)) > 0x7fffffff))
  xsignal1 (builtin_lisp_symbol (220), XCDR (width));
       ((f)->text_width = (XINT (XCDR (width))), (f)->pixel_width = ((XINT (XCDR (width))) + (((f)->vertical_scroll_bar_type != vertical_scroll_bar_none) ? ((f)->config_scroll_bar_width) : 0) + FRAME_TOTAL_FRINGE_WIDTH (f) + 2 * FRAME_INTERNAL_BORDER_WIDTH (f)));
       f->inhibit_horizontal_resize = 
                                     1
                                         ;
       *x_width = XINT (XCDR (width));
     }
   else if (FLOATP (width))
     {
       double d_width = XFLOAT_DATA (width);
       if (d_width < 0.0 || d_width > 1.0)
  xsignal1 (builtin_lisp_symbol (220), width);
       else
  {
    int new_width = frame_float (f, width, FRAME_FLOAT_WIDTH,
            &parent_done, &outer_done, -1);
    if (new_width > -1)
      ((f)->text_width = (new_width), (f)->pixel_width = ((new_width) + (((f)->vertical_scroll_bar_type != vertical_scroll_bar_none) ? ((f)->config_scroll_bar_width) : 0) + FRAME_TOTAL_FRINGE_WIDTH (f) + 2 * FRAME_INTERNAL_BORDER_WIDTH (f)));
  }
     }
   else
     {
       CHECK_NUMBER (width);
       if ((XINT (width) < 0 || XINT (width) > 0x7fffffff))
  xsignal1 (builtin_lisp_symbol (220), width);
       ((f)->text_width = (XINT (width) * ((f)->column_width)), (f)->pixel_width = ((XINT (width) * ((f)->column_width)) + (((f)->vertical_scroll_bar_type != vertical_scroll_bar_none) ? ((f)->config_scroll_bar_width) : 0) + FRAME_TOTAL_FRINGE_WIDTH (f) + 2 * FRAME_INTERNAL_BORDER_WIDTH (f)));
     }
 }
      if (!EQ (height, builtin_lisp_symbol (1092)))
 {
   if (CONSP (height) && EQ (XCAR (height), builtin_lisp_symbol (1039)))
     {
       CHECK_NUMBER (XCDR (height));
       if ((XINT (XCDR (height)) < 0 || XINT (XCDR (height)) > 0x7fffffff))
  xsignal1 (builtin_lisp_symbol (220), XCDR (height));
       ((f)->text_height = (XINT (XCDR (height))), (f)->pixel_height = ((XINT (XCDR (height))) + ((f)->menu_bar_height + (f)->tool_bar_height) + (((f)->horizontal_scroll_bars) ? ((f)->config_scroll_bar_height) : 0) + 2 * FRAME_INTERNAL_BORDER_WIDTH (f)));
       f->inhibit_vertical_resize = 
                                   1
                                       ;
       *x_height = XINT (XCDR (height));
     }
   else if (FLOATP (height))
     {
       double d_height = XFLOAT_DATA (height);
       if (d_height < 0.0 || d_height > 1.0)
  xsignal1 (builtin_lisp_symbol (220), height);
       else
  {
    int new_height = frame_float (f, height, FRAME_FLOAT_HEIGHT,
      &parent_done, &outer_done, -1);
    if (new_height > -1)
      ((f)->text_height = (new_height), (f)->pixel_height = ((new_height) + ((f)->menu_bar_height + (f)->tool_bar_height) + (((f)->horizontal_scroll_bars) ? ((f)->config_scroll_bar_height) : 0) + 2 * FRAME_INTERNAL_BORDER_WIDTH (f)));
  }
     }
   else
     {
       CHECK_NUMBER (height);
       if ((XINT (height) < 0) || (XINT (height) > 0x7fffffff))
  xsignal1 (builtin_lisp_symbol (220), height);
       ((f)->text_height = (XINT (height) * ((f)->line_height)), (f)->pixel_height = ((XINT (height) * ((f)->line_height)) + ((f)->menu_bar_height + (f)->tool_bar_height) + (((f)->horizontal_scroll_bars) ? ((f)->config_scroll_bar_height) : 0) + 2 * FRAME_INTERNAL_BORDER_WIDTH (f)));
     }
 }
      user_size = x_get_arg (dpyinfo, parms, builtin_lisp_symbol (1123), 0, 0, RES_TYPE_NUMBER);
      if (!NILP (user_size) && !EQ (user_size, builtin_lisp_symbol (1092)))
 window_prompting |= 
                    (1L << 1)
                          ;
      else
 window_prompting |= 
                    (1L << 3)
                         ;
    }
  top = x_get_arg (dpyinfo, parms, builtin_lisp_symbol (1058), 0, 0, RES_TYPE_NUMBER);
  left = x_get_arg (dpyinfo, parms, builtin_lisp_symbol (696), 0, 0, RES_TYPE_NUMBER);
  user_position = x_get_arg (dpyinfo, parms, builtin_lisp_symbol (1119), 0, 0, RES_TYPE_NUMBER);
  if (! EQ (top, builtin_lisp_symbol (1092)) || ! EQ (left, builtin_lisp_symbol (1092)))
    {
      if (EQ (top, builtin_lisp_symbol (768)))
 {
   f->top_pos = 0;
   window_prompting |= 
                      0x0020
                               ;
 }
      else if (CONSP (top) && EQ (XCAR (top), builtin_lisp_symbol (768))
        && CONSP (XCDR (top))
        && RANGED_INTEGERP (-0x7fffffff, XCAR (XCDR (top)), 0x7fffffff))
 {
   f->top_pos = - XINT (XCAR (XCDR (top)));
   window_prompting |= 
                      0x0020
                               ;
 }
      else if (CONSP (top) && EQ (XCAR (top), builtin_lisp_symbol (867))
        && CONSP (XCDR (top))
        && (INTEGERP (XCAR (XCDR (top))) && ((! ((int) 0 < (int) -1)) ? ((int) ~ ((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))) <= XINT (XCAR (XCDR (top))) : 0 <= XINT (XCAR (XCDR (top)))) && XINT (XCAR (XCDR (top))) <= ((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))))
 {
   f->top_pos = XINT (XCAR (XCDR (top)));
 }
      else if (FLOATP (top))
 f->top_pos = frame_float (f, top, FRAME_FLOAT_TOP, &parent_done,
      &outer_done, 0);
      else if (EQ (top, builtin_lisp_symbol (1092)))
 f->top_pos = 0;
      else
 {
   do { if ((! ((int) 0 < (int) -1))) do { CHECK_NUMBER (top); if (! ((((int) ~ ((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1))))) <= XINT (top) && XINT (top) <= (((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))))) args_out_of_range_3 (top, make_number ((((int) ~ ((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1))))) < 0 && (((int) ~ ((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1))))) < (-1 - (0x7fffffffffffffffL >> INTTYPEBITS)) ? (-1 - (0x7fffffffffffffffL >> INTTYPEBITS)) : (((int) ~ ((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))))), make_number (((((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))) < ((0x7fffffffffffffffL >> INTTYPEBITS)) ? (((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))) : ((0x7fffffffffffffffL >> INTTYPEBITS))))); } while (
  0
  ); else do { CHECK_NUMBER (top); if (! ((0) <= XINT (top) && XINT (top) <= (((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))))) args_out_of_range_3 (top, make_number ((0) < 0 && (0) < (-1 - (0x7fffffffffffffffL >> INTTYPEBITS)) ? (-1 - (0x7fffffffffffffffL >> INTTYPEBITS)) : (0)), make_number (((((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))) < ((0x7fffffffffffffffL >> INTTYPEBITS)) ? (((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))) : ((0x7fffffffffffffffL >> INTTYPEBITS))))); } while (
  0
  ); } while (
  0
  );
   f->top_pos = XINT (top);
   if (f->top_pos < 0)
     window_prompting |= 
                        0x0020
                                 ;
 }
      if (EQ (left, builtin_lisp_symbol (768)))
 {
   f->left_pos = 0;
   window_prompting |= 
                      0x0010
                               ;
 }
      else if (CONSP (left) && EQ (XCAR (left), builtin_lisp_symbol (768))
        && CONSP (XCDR (left))
        && RANGED_INTEGERP (-0x7fffffff, XCAR (XCDR (left)), 0x7fffffff))
 {
   f->left_pos = - XINT (XCAR (XCDR (left)));
   window_prompting |= 
                      0x0010
                               ;
 }
      else if (CONSP (left) && EQ (XCAR (left), builtin_lisp_symbol (867))
        && CONSP (XCDR (left))
        && (INTEGERP (XCAR (XCDR (left))) && ((! ((int) 0 < (int) -1)) ? ((int) ~ ((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))) <= XINT (XCAR (XCDR (left))) : 0 <= XINT (XCAR (XCDR (left)))) && XINT (XCAR (XCDR (left))) <= ((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))))
 {
   f->left_pos = XINT (XCAR (XCDR (left)));
 }
      else if (FLOATP (left))
 f->left_pos = frame_float (f, left, FRAME_FLOAT_LEFT, &parent_done,
       &outer_done, 0);
      else if (EQ (left, builtin_lisp_symbol (1092)))
 f->left_pos = 0;
      else
 {
   do { if ((! ((int) 0 < (int) -1))) do { CHECK_NUMBER (left); if (! ((((int) ~ ((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1))))) <= XINT (left) && XINT (left) <= (((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))))) args_out_of_range_3 (left, make_number ((((int) ~ ((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1))))) < 0 && (((int) ~ ((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1))))) < (-1 - (0x7fffffffffffffffL >> INTTYPEBITS)) ? (-1 - (0x7fffffffffffffffL >> INTTYPEBITS)) : (((int) ~ ((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))))), make_number (((((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))) < ((0x7fffffffffffffffL >> INTTYPEBITS)) ? (((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))) : ((0x7fffffffffffffffL >> INTTYPEBITS))))); } while (
  0
  ); else do { CHECK_NUMBER (left); if (! ((0) <= XINT (left) && XINT (left) <= (((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))))) args_out_of_range_3 (left, make_number ((0) < 0 && (0) < (-1 - (0x7fffffffffffffffL >> INTTYPEBITS)) ? (-1 - (0x7fffffffffffffffL >> INTTYPEBITS)) : (0)), make_number (((((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))) < ((0x7fffffffffffffffL >> INTTYPEBITS)) ? (((int) (! (! ((int) 0 < (int) -1)) ? (int) -1 : ((((int) 1 << ((sizeof (int) * 8) - 2)) - 1) * 2 + 1)))) : ((0x7fffffffffffffffL >> INTTYPEBITS))))); } while (
  0
  ); } while (
  0
  );
   f->left_pos = XINT (left);
   if (f->left_pos < 0)
     window_prompting |= 
                        0x0010
                                 ;
 }
      if (!NILP (user_position) && ! EQ (user_position, builtin_lisp_symbol (1092)))
 window_prompting |= 
                    (1L << 0)
                              ;
      else
 window_prompting |= 
                    (1L << 2)
                             ;
    }
  if (window_prompting & 
                        0x0010
                                 )
    {
      if (window_prompting & 
                            0x0020
                                     )
 f->win_gravity = 
                 9
                                 ;
      else
 f->win_gravity = 
                 3
                                 ;
    }
  else
    {
      if (window_prompting & 
                            0x0020
                                     )
 f->win_gravity = 
                 7
                                 ;
      else
 f->win_gravity = 
                 1
                                 ;
    }
  f->size_hint_flags = window_prompting;
  return window_prompting;
}
void
frame_make_pointer_invisible (struct frame *f)
{
  if (! NILP (globals.f_Vmake_pointer_invisible))
    {
      if (f && ((f)->terminal != 0) && !f->pointer_invisible
          && ((f)->terminal)->toggle_invisible_pointer_hook)
        {
          f->mouse_moved = 0;
          ((f)->terminal)->toggle_invisible_pointer_hook (f, 1);
          f->pointer_invisible = 1;
        }
    }
}
void
frame_make_pointer_visible (struct frame *f)
{
  if (f && ((f)->terminal != 0) && f->pointer_invisible && f->mouse_moved
      && ((f)->terminal)->toggle_invisible_pointer_hook)
    {
      ((f)->terminal)->toggle_invisible_pointer_hook (f, 0);
      f->pointer_invisible = 0;
    }
}
static struct Lisp_Subr Sframe_pointer_visible_p = { { PVEC_SUBR << PSEUDOVECTOR_AREA_BITS }, { .a1 = Fframe_pointer_visible_p }, 0, 1, "frame-pointer-visible-p", 0, 0}; Lisp_Object Fframe_pointer_visible_p
  (Lisp_Object frame)
{
  return decode_any_frame (frame)->pointer_invisible ? builtin_lisp_symbol (0) : builtin_lisp_symbol (1028);
}
Lisp_Object
make_monitor_attribute_list (struct MonitorInfo *monitors,
                             int n_monitors,
                             int primary_monitor,
                             Lisp_Object monitor_frames,
                             const char *source)
{
  Lisp_Object attributes_list = builtin_lisp_symbol (0);
  Lisp_Object primary_monitor_attributes = builtin_lisp_symbol (0);
  int i;
  for (i = 0; i < n_monitors; ++i)
    {
      Lisp_Object geometry, workarea, attributes = builtin_lisp_symbol (0);
      struct MonitorInfo *mi = &monitors[i];
      if (mi->geom.width == 0) continue;
      workarea = list4i (mi->work.x, mi->work.y,
    mi->work.width, mi->work.height);
      geometry = list4i (mi->geom.x, mi->geom.y,
    mi->geom.width, mi->geom.height);
      attributes = Fcons (Fcons (builtin_lisp_symbol (990), build_string (source)),
                          attributes);
      attributes = Fcons (Fcons (builtin_lisp_symbol (537), AREF (monitor_frames, i)),
     attributes);
      attributes = Fcons (Fcons (builtin_lisp_symbol (770),
                                 list2i (mi->mm_width, mi->mm_height)),
                          attributes);
      attributes = Fcons (Fcons (builtin_lisp_symbol (1179), workarea), attributes);
      attributes = Fcons (Fcons (builtin_lisp_symbol (557), geometry), attributes);
      if (mi->name)
        attributes = Fcons (Fcons (builtin_lisp_symbol (802), make_string (mi->name,
                                                       strlen (mi->name))),
                            attributes);
      if (i == primary_monitor)
        primary_monitor_attributes = attributes;
      else
        attributes_list = Fcons (attributes, attributes_list);
    }
  if (!NILP (primary_monitor_attributes))
    attributes_list = Fcons (primary_monitor_attributes, attributes_list);
  return attributes_list;
}
void
syms_of_frame (void)
{
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  {
    int i;
    for (i = 0; i < (sizeof (frame_parms) / sizeof (frame_parms)[0]); i++)
      {
 Lisp_Object v = (frame_parms[i].sym < 0
    ? intern_c_string (frame_parms[i].name)
    : builtin_lisp_symbol (frame_parms[i].sym));
 Fput (v, builtin_lisp_symbol (1190), make_number (i));
      }
  }
  do { static struct Lisp_Objfwd o_fwd; defvar_lisp (&o_fwd, "x-resource-name", &globals.f_Vx_resource_name); } while (
 0
 )
                                                                    ;
  globals.f_Vx_resource_name = builtin_lisp_symbol (0);
  do { static struct Lisp_Objfwd o_fwd; defvar_lisp (&o_fwd, "x-resource-class", &globals.f_Vx_resource_class); } while (
 0
 )
                                                                        ;
  globals.f_Vx_resource_class = build_string ("Emacs");
  do { static struct Lisp_Objfwd o_fwd; defvar_lisp (&o_fwd, "frame-alpha-lower-limit", &globals.f_Vframe_alpha_lower_limit); } while (
 0
 )
                                                            ;
  globals.f_Vframe_alpha_lower_limit = make_number (20);
  do { static struct Lisp_Objfwd o_fwd; defvar_lisp (&o_fwd, "default-frame-alist", &globals.f_Vdefault_frame_alist); } while (
 0
 )
                                                                          ;
  globals.f_Vdefault_frame_alist = builtin_lisp_symbol (0);
  do { static struct Lisp_Objfwd o_fwd; defvar_lisp (&o_fwd, "default-frame-scroll-bars", &globals.f_Vdefault_frame_scroll_bars); } while (
 0
 )
                                                                                    ;
  globals.f_Vdefault_frame_scroll_bars = builtin_lisp_symbol (929);
  do { static struct Lisp_Boolfwd b_fwd; defvar_bool (&b_fwd, "scroll-bar-adjust-thumb-portion", &globals.f_scroll_bar_adjust_thumb_portion_p); } while (
 0
 )
                                                      ;
  globals.f_scroll_bar_adjust_thumb_portion_p = 1;
  do { static struct Lisp_Objfwd o_fwd; defvar_lisp (&o_fwd, "terminal-frame", &globals.f_Vterminal_frame); } while (
 0
 )
                                                                                      ;
  do { static struct Lisp_Objfwd o_fwd; defvar_lisp (&o_fwd, "mouse-position-function", &globals.f_Vmouse_position_function); } while (
 0
 )
                                                       ;
  globals.f_Vmouse_position_function = builtin_lisp_symbol (0);
  do { static struct Lisp_Objfwd o_fwd; defvar_lisp (&o_fwd, "mouse-highlight", &globals.f_Vmouse_highlight); } while (
 0
 )
                                           ;
  globals.f_Vmouse_highlight = builtin_lisp_symbol (1028);
  do { static struct Lisp_Objfwd o_fwd; defvar_lisp (&o_fwd, "make-pointer-invisible", &globals.f_Vmake_pointer_invisible); } while (
 0
 )
                                                               ;
  globals.f_Vmake_pointer_invisible = builtin_lisp_symbol (1028);
  do { static struct Lisp_Objfwd o_fwd; defvar_lisp (&o_fwd, "focus-in-hook", &globals.f_Vfocus_in_hook); } while (
 0
 )
                                                                      ;
  globals.f_Vfocus_in_hook = builtin_lisp_symbol (0);
  do { static struct Lisp_Objfwd o_fwd; defvar_lisp (&o_fwd, "focus-out-hook", &globals.f_Vfocus_out_hook); } while (
 0
 )
                                                                             ;
  globals.f_Vfocus_out_hook = builtin_lisp_symbol (0);
  do { static struct Lisp_Objfwd o_fwd; defvar_lisp (&o_fwd, "move-frame-functions", &globals.f_Vmove_frame_functions); } while (
 0
 )
                                                              ;
  globals.f_Vmove_frame_functions = builtin_lisp_symbol (0);
  do { static struct Lisp_Objfwd o_fwd; defvar_lisp (&o_fwd, "delete-frame-functions", &globals.f_Vdelete_frame_functions); } while (
 0
 )
                  ;
  globals.f_Vdelete_frame_functions = builtin_lisp_symbol (0);
  ;
  do { static struct Lisp_Objfwd o_fwd; defvar_lisp (&o_fwd, "menu-bar-mode", &globals.f_Vmenu_bar_mode); } while (
 0
 )
                                          ;
  globals.f_Vmenu_bar_mode = builtin_lisp_symbol (1028);
  do { static struct Lisp_Objfwd o_fwd; defvar_lisp (&o_fwd, "tool-bar-mode", &globals.f_Vtool_bar_mode); } while (
 0
 )
                                          ;
  globals.f_Vtool_bar_mode = builtin_lisp_symbol (1028);
  do { static struct Lisp_Kboard_Objfwd ko_fwd; defvar_kboard (&ko_fwd, "default-minibuffer-frame", 
 __builtin_offsetof (
 KBOARD
 , 
 Vdefault_minibuffer_frame_
 )
 ); } while (
 0
 )
                                                                               ;
  do { static struct Lisp_Objfwd o_fwd; defvar_lisp (&o_fwd, "focus-follows-mouse", &globals.f_focus_follows_mouse); } while (
 0
 )
                                                               ;
  globals.f_focus_follows_mouse = builtin_lisp_symbol (0);
  do { static struct Lisp_Boolfwd b_fwd; defvar_bool (&b_fwd, "frame-resize-pixelwise", &globals.f_frame_resize_pixelwise); } while (
 0
 )
                                       ;
  globals.f_frame_resize_pixelwise = 0;
  do { static struct Lisp_Objfwd o_fwd; defvar_lisp (&o_fwd, "frame-inhibit-implied-resize", &globals.f_frame_inhibit_implied_resize); } while (
 0
 )
                                    ;
  globals.f_frame_inhibit_implied_resize = builtin_lisp_symbol (0);
  do { static struct Lisp_Objfwd o_fwd; defvar_lisp (&o_fwd, "frame-size-history", &globals.f_frame_size_history); } while (
 0
 )
                             ;
    globals.f_frame_size_history = builtin_lisp_symbol (0);
  do { static struct Lisp_Boolfwd b_fwd; defvar_bool (&b_fwd, "tooltip-reuse-hidden-frame", &globals.f_tooltip_reuse_hidden_frame); } while (
 0
 )
                                                ;
  globals.f_tooltip_reuse_hidden_frame = 
                              0
                                   ;
  do { static struct Lisp_Objfwd o_fwd; defvar_lisp (&o_fwd, "iconify-child-frame", &globals.f_iconify_child_frame); } while (
 0
 )
                                         ;
  globals.f_iconify_child_frame = builtin_lisp_symbol (614);
  staticpro (&Vframe_list);
  defsubr (&Sframep);
  defsubr (&Sframe_live_p);
  defsubr (&Swindow_system);
  defsubr (&Sframe_windows_min_size);
  defsubr (&Smake_terminal_frame);
  defsubr (&Shandle_switch_frame);
  defsubr (&Sselect_frame);
  defsubr (&Sselected_frame);
  defsubr (&Sframe_list);
  defsubr (&Sframe_parent);
  defsubr (&Sframe_ancestor_p);
  defsubr (&Snext_frame);
  defsubr (&Sprevious_frame);
  defsubr (&Slast_nonminibuf_frame);
  defsubr (&Sdelete_frame);
  defsubr (&Smouse_position);
  defsubr (&Smouse_pixel_position);
  defsubr (&Sset_mouse_position);
  defsubr (&Sset_mouse_pixel_position);
  defsubr (&Smake_frame_visible);
  defsubr (&Smake_frame_invisible);
  defsubr (&Siconify_frame);
  defsubr (&Sframe_visible_p);
  defsubr (&Svisible_frame_list);
  defsubr (&Sraise_frame);
  defsubr (&Slower_frame);
  defsubr (&Sx_focus_frame);
  defsubr (&Sframe_after_make_frame);
  defsubr (&Sredirect_frame_focus);
  defsubr (&Sframe_focus);
  defsubr (&Sframe_parameters);
  defsubr (&Sframe_parameter);
  defsubr (&Smodify_frame_parameters);
  defsubr (&Sframe_char_height);
  defsubr (&Sframe_char_width);
  defsubr (&Sframe_native_height);
  defsubr (&Sframe_native_width);
  defsubr (&Sframe_text_cols);
  defsubr (&Sframe_text_lines);
  defsubr (&Sframe_total_cols);
  defsubr (&Sframe_total_lines);
  defsubr (&Sframe_text_width);
  defsubr (&Sframe_text_height);
  defsubr (&Sscroll_bar_width);
  defsubr (&Sscroll_bar_height);
  defsubr (&Sfringe_width);
  defsubr (&Sframe_internal_border_width);
  defsubr (&Sright_divider_width);
  defsubr (&Sbottom_divider_width);
  defsubr (&Stool_bar_pixel_width);
  defsubr (&Sset_frame_height);
  defsubr (&Sset_frame_width);
  defsubr (&Sset_frame_size);
  defsubr (&Sframe_position);
  defsubr (&Sset_frame_position);
  defsubr (&Sframe_pointer_visible_p);
  defsubr (&Sx_get_resource);
  defsubr (&Sx_parse_geometry);
}
