# 1 "valarith.c"
# 1 "/var/root/apple-gdb-1824/src/gdb//"
# 1 "<built-in>"
#define __STDC__ 1
#define __cplusplus 199711L
#define __STDC_HOSTED__ 1
#define __GNUC__ 7
#define __GNUC_MINOR__ 0
#define __GNUC_PATCHLEVEL__ 0
#define __VERSION__ "7.0.0 20160426 (experimental)"
#define __ATOMIC_RELAXED 0
#define __ATOMIC_SEQ_CST 5
#define __ATOMIC_ACQUIRE 2
#define __ATOMIC_RELEASE 3
#define __ATOMIC_ACQ_REL 4
#define __ATOMIC_CONSUME 1
#define __pic__ 2
#define __PIC__ 2
#define __OPTIMIZE__ 1
#define __FAST_MATH__ 1
#define __NO_MATH_ERRNO__ 1
#define __FINITE_MATH_ONLY__ 1
#define __SIZEOF_INT__ 4
#define __SIZEOF_LONG__ 4
#define __SIZEOF_LONG_LONG__ 8
#define __SIZEOF_SHORT__ 2
#define __SIZEOF_FLOAT__ 4
#define __SIZEOF_DOUBLE__ 8
#define __SIZEOF_LONG_DOUBLE__ 16
#define __SIZEOF_SIZE_T__ 4
#define __CHAR_BIT__ 8
#define __BIGGEST_ALIGNMENT__ 16
#define __ORDER_LITTLE_ENDIAN__ 1234
#define __ORDER_BIG_ENDIAN__ 4321
#define __ORDER_PDP_ENDIAN__ 3412
#define __BYTE_ORDER__ __ORDER_LITTLE_ENDIAN__
#define __FLOAT_WORD_ORDER__ __ORDER_LITTLE_ENDIAN__
#define __SIZEOF_POINTER__ 4
#define __GNUG__ 7
#define __SIZE_TYPE__ long unsigned int
#define __PTRDIFF_TYPE__ int
#define __WCHAR_TYPE__ int
#define __WINT_TYPE__ int
#define __INTMAX_TYPE__ long long int
#define __UINTMAX_TYPE__ long long unsigned int
#define __CHAR16_TYPE__ short unsigned int
#define __CHAR32_TYPE__ unsigned int
#define __SIG_ATOMIC_TYPE__ int
#define __INT8_TYPE__ signed char
#define __INT16_TYPE__ short int
#define __INT32_TYPE__ int
#define __INT64_TYPE__ long long int
#define __UINT8_TYPE__ unsigned char
#define __UINT16_TYPE__ short unsigned int
#define __UINT32_TYPE__ unsigned int
#define __UINT64_TYPE__ long long unsigned int
#define __INT_LEAST8_TYPE__ signed char
#define __INT_LEAST16_TYPE__ short int
#define __INT_LEAST32_TYPE__ int
#define __INT_LEAST64_TYPE__ long long int
#define __UINT_LEAST8_TYPE__ unsigned char
#define __UINT_LEAST16_TYPE__ short unsigned int
#define __UINT_LEAST32_TYPE__ unsigned int
#define __UINT_LEAST64_TYPE__ long long unsigned int
#define __INT_FAST8_TYPE__ signed char
#define __INT_FAST16_TYPE__ short int
#define __INT_FAST32_TYPE__ int
#define __INT_FAST64_TYPE__ long long int
#define __UINT_FAST8_TYPE__ unsigned char
#define __UINT_FAST16_TYPE__ short unsigned int
#define __UINT_FAST32_TYPE__ unsigned int
#define __UINT_FAST64_TYPE__ long long unsigned int
#define __INTPTR_TYPE__ long int
#define __UINTPTR_TYPE__ long unsigned int
#define __has_include(STR) __has_include__(STR)
#define __has_include_next(STR) __has_include_next__(STR)
#define __GXX_WEAK__ 1
#define __DEPRECATED 1
#define __GXX_RTTI 1
#define __cpp_rtti 199711
#define __cpp_hex_float 201603
#define __EXCEPTIONS 1
#define __cpp_exceptions 199711
#define __GXX_ABI_VERSION 1010
#define __SCHAR_MAX__ 0x7f
#define __SHRT_MAX__ 0x7fff
#define __INT_MAX__ 0x7fffffff
#define __LONG_MAX__ 0x7fffffffL
#define __LONG_LONG_MAX__ 0x7fffffffffffffffLL
#define __WCHAR_MAX__ 0x7fffffff
#define __WCHAR_MIN__ (-__WCHAR_MAX__ - 1)
#define __WINT_MAX__ 0x7fffffff
#define __WINT_MIN__ (-__WINT_MAX__ - 1)
#define __PTRDIFF_MAX__ 0x7fffffff
#define __SIZE_MAX__ 0xffffffffUL
#define __INTMAX_MAX__ 0x7fffffffffffffffLL
#define __INTMAX_C(c) c ## LL
#define __UINTMAX_MAX__ 0xffffffffffffffffULL
#define __UINTMAX_C(c) c ## ULL
#define __SIG_ATOMIC_MAX__ 0x7fffffff
#define __SIG_ATOMIC_MIN__ (-__SIG_ATOMIC_MAX__ - 1)
#define __INT8_MAX__ 0x7f
#define __INT16_MAX__ 0x7fff
#define __INT32_MAX__ 0x7fffffff
#define __INT64_MAX__ 0x7fffffffffffffffLL
#define __UINT8_MAX__ 0xff
#define __UINT16_MAX__ 0xffff
#define __UINT32_MAX__ 0xffffffffU
#define __UINT64_MAX__ 0xffffffffffffffffULL
#define __INT_LEAST8_MAX__ 0x7f
#define __INT8_C(c) c
#define __INT_LEAST16_MAX__ 0x7fff
#define __INT16_C(c) c
#define __INT_LEAST32_MAX__ 0x7fffffff
#define __INT32_C(c) c
#define __INT_LEAST64_MAX__ 0x7fffffffffffffffLL
#define __INT64_C(c) c ## LL
#define __UINT_LEAST8_MAX__ 0xff
#define __UINT8_C(c) c
#define __UINT_LEAST16_MAX__ 0xffff
#define __UINT16_C(c) c
#define __UINT_LEAST32_MAX__ 0xffffffffU
#define __UINT32_C(c) c ## U
#define __UINT_LEAST64_MAX__ 0xffffffffffffffffULL
#define __UINT64_C(c) c ## ULL
#define __INT_FAST8_MAX__ 0x7f
#define __INT_FAST16_MAX__ 0x7fff
#define __INT_FAST32_MAX__ 0x7fffffff
#define __INT_FAST64_MAX__ 0x7fffffffffffffffLL
#define __UINT_FAST8_MAX__ 0xff
#define __UINT_FAST16_MAX__ 0xffff
#define __UINT_FAST32_MAX__ 0xffffffffU
#define __UINT_FAST64_MAX__ 0xffffffffffffffffULL
#define __INTPTR_MAX__ 0x7fffffffL
#define __UINTPTR_MAX__ 0xffffffffUL
#define __GCC_IEC_559 0
#define __GCC_IEC_559_COMPLEX 0
#define __FLT_EVAL_METHOD__ 0
#define __DEC_EVAL_METHOD__ 2
#define __FLT_RADIX__ 2
#define __FLT_MANT_DIG__ 24
#define __FLT_DIG__ 6
#define __FLT_MIN_EXP__ (-125)
#define __FLT_MIN_10_EXP__ (-37)
#define __FLT_MAX_EXP__ 128
#define __FLT_MAX_10_EXP__ 38
#define __FLT_DECIMAL_DIG__ 9
#define __FLT_MAX__ 3.40282346638528859812e+38F
#define __FLT_MIN__ 1.17549435082228750797e-38F
#define __FLT_EPSILON__ 1.19209289550781250000e-7F
#define __FLT_DENORM_MIN__ 1.40129846432481707092e-45F
#define __FLT_HAS_DENORM__ 1
#define __FLT_HAS_INFINITY__ 1
#define __FLT_HAS_QUIET_NAN__ 1
#define __DBL_MANT_DIG__ 53
#define __DBL_DIG__ 15
#define __DBL_MIN_EXP__ (-1021)
#define __DBL_MIN_10_EXP__ (-307)
#define __DBL_MAX_EXP__ 1024
#define __DBL_MAX_10_EXP__ 308
#define __DBL_DECIMAL_DIG__ 17
#define __DBL_MAX__ double(1.79769313486231570815e+308L)
#define __DBL_MIN__ double(2.22507385850720138309e-308L)
#define __DBL_EPSILON__ double(2.22044604925031308085e-16L)
#define __DBL_DENORM_MIN__ double(4.94065645841246544177e-324L)
#define __DBL_HAS_DENORM__ 1
#define __DBL_HAS_INFINITY__ 1
#define __DBL_HAS_QUIET_NAN__ 1
#define __LDBL_MANT_DIG__ 64
#define __LDBL_DIG__ 18
#define __LDBL_MIN_EXP__ (-16381)
#define __LDBL_MIN_10_EXP__ (-4931)
#define __LDBL_MAX_EXP__ 16384
#define __LDBL_MAX_10_EXP__ 4932
#define __DECIMAL_DIG__ 21
#define __LDBL_MAX__ 1.18973149535723176502e+4932L
#define __LDBL_MIN__ 3.36210314311209350626e-4932L
#define __LDBL_EPSILON__ 1.08420217248550443401e-19L
#define __LDBL_DENORM_MIN__ 3.64519953188247460253e-4951L
#define __LDBL_HAS_DENORM__ 1
#define __LDBL_HAS_INFINITY__ 1
#define __LDBL_HAS_QUIET_NAN__ 1
#define __DEC32_MANT_DIG__ 7
#define __DEC32_MIN_EXP__ (-94)
#define __DEC32_MAX_EXP__ 97
#define __DEC32_MIN__ 1E-95DF
#define __DEC32_MAX__ 9.999999E96DF
#define __DEC32_EPSILON__ 1E-6DF
#define __DEC32_SUBNORMAL_MIN__ 0.000001E-95DF
#define __DEC64_MANT_DIG__ 16
#define __DEC64_MIN_EXP__ (-382)
#define __DEC64_MAX_EXP__ 385
#define __DEC64_MIN__ 1E-383DD
#define __DEC64_MAX__ 9.999999999999999E384DD
#define __DEC64_EPSILON__ 1E-15DD
#define __DEC64_SUBNORMAL_MIN__ 0.000000000000001E-383DD
#define __DEC128_MANT_DIG__ 34
#define __DEC128_MIN_EXP__ (-6142)
#define __DEC128_MAX_EXP__ 6145
#define __DEC128_MIN__ 1E-6143DL
#define __DEC128_MAX__ 9.999999999999999999999999999999999E6144DL
#define __DEC128_EPSILON__ 1E-33DL
#define __DEC128_SUBNORMAL_MIN__ 0.000000000000000000000000000000001E-6143DL
#define __REGISTER_PREFIX__ 
#define __USER_LABEL_PREFIX__ _
#define __GNUC_GNU_INLINE__ 1
#define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1 1
#define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2 1
#define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4 1
#define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8 1
#define __GCC_ATOMIC_BOOL_LOCK_FREE 2
#define __GCC_ATOMIC_CHAR_LOCK_FREE 2
#define __GCC_ATOMIC_CHAR16_T_LOCK_FREE 2
#define __GCC_ATOMIC_CHAR32_T_LOCK_FREE 2
#define __GCC_ATOMIC_WCHAR_T_LOCK_FREE 2
#define __GCC_ATOMIC_SHORT_LOCK_FREE 2
#define __GCC_ATOMIC_INT_LOCK_FREE 2
#define __GCC_ATOMIC_LONG_LOCK_FREE 2
#define __GCC_ATOMIC_LLONG_LOCK_FREE 2
#define __GCC_ATOMIC_TEST_AND_SET_TRUEVAL 1
#define __GCC_ATOMIC_POINTER_LOCK_FREE 2
#define __PRAGMA_REDEFINE_EXTNAME 1
#define __SIZEOF_WCHAR_T__ 4
#define __SIZEOF_WINT_T__ 4
#define __SIZEOF_PTRDIFF_T__ 4
#define __i386 1
#define __i386__ 1
#define i386 1
#define __SIZEOF_FLOAT80__ 16
#define __SIZEOF_FLOAT128__ 16
#define __ATOMIC_HLE_ACQUIRE 65536
#define __ATOMIC_HLE_RELEASE 131072
#define __GCC_ASM_FLAG_OUTPUTS__ 1
#define __i686 1
#define __i686__ 1
#define __pentiumpro 1
#define __pentiumpro__ 1
#define __tune_core2__ 1
#define __code_model_32__ 1
#define __MMX__ 1
#define __SSE__ 1
#define __SSE2__ 1
#define __SSE3__ 1
#define __SSE_MATH__ 1
#define __SSE2_MATH__ 1
#define __SEG_FS 1
#define __SEG_GS 1
#define __LITTLE_ENDIAN__ 1
#define __MACH__ 1
#define __APPLE__ 1
#define __APPLE_CC__ 1
#define __CONSTANT_CFSTRINGS__ 1
#define __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ 1050
#define __strong 
#define __weak 
# 1 "<command-line>"
#define __DYNAMIC__ 1
#define TARGET_I386 1
#define WITH_CFM 0
#define USE_PTHREADS 1
#define _DARWIN_UNLIMITED_STREAMS 1
#define HAVE_CONFIG_H 1
#define HAVE_SYS_TYPES_H 1
#define LOCALEDIR "/usr/local/share/locale"
#define MI_OUT 1
#define __MigTypeCheck 1
#define __DARWIN_UNIX03 1
# 1 "valarith.c"
# 24 "valarith.c"
# 1 "defs.h" 1
# 25 "defs.h"
#define DEFS_H 



#define __GDB_DEFS_H__ 1



# 1 "config.h" 1
# 79 "config.h"
#define __CONFIG_H__ 1

#define __GDB_CONFIG_H__ 1





# 1 "/usr/include/sys/types.h" 1 3 4
# 70 "/usr/include/sys/types.h" 3 4
#define _SYS_TYPES_H_ 

# 1 "/usr/include/sys/appleapiopts.h" 1 3 4
# 30 "/usr/include/sys/appleapiopts.h" 3 4
#define __SYS_APPLEAPIOPTS_H__ 



#define __APPLE_API_STANDARD 



#define __APPLE_API_STABLE 





#define __APPLE_API_EVOLVING 



#define __APPLE_API_UNSTABLE 



#define __APPLE_API_PRIVATE 



#define __APPLE_API_OBSOLETE 
# 73 "/usr/include/sys/types.h" 2 3 4


# 1 "/usr/include/sys/cdefs.h" 1 3 4
# 68 "/usr/include/sys/cdefs.h" 3 4
#define _CDEFS_H_ 


#define __BEGIN_DECLS extern "C" {
#define __END_DECLS }
# 86 "/usr/include/sys/cdefs.h" 3 4
#define __P(protos) protos
#define __CONCAT(x,y) x ## y
#define __STRING(x) #x

#define __const const
#define __signed signed
#define __volatile volatile

#define __inline inline
# 140 "/usr/include/sys/cdefs.h" 3 4
#define __dead2 __attribute__((__noreturn__))
#define __pure2 __attribute__((__const__))



#define __unused __attribute__((__unused__))
# 158 "/usr/include/sys/cdefs.h" 3 4
#define __dead 
#define __pure 
# 175 "/usr/include/sys/cdefs.h" 3 4
#define __restrict 
# 190 "/usr/include/sys/cdefs.h" 3 4
#define __printflike(fmtarg,firstvararg) __attribute__((__format__ (__printf__, fmtarg, firstvararg)))

#define __scanflike(fmtarg,firstvararg) __attribute__((__format__ (__scanf__, fmtarg, firstvararg)))






#define __IDSTRING(name,string) static const char name[] __unused = string


#define __COPYRIGHT(s) __IDSTRING(copyright,s)



#define __RCSID(s) __IDSTRING(rcsid,s)



#define __SCCSID(s) __IDSTRING(sccsid,s)



#define __PROJECT_VERSION(s) __IDSTRING(project_version,s)
# 295 "/usr/include/sys/cdefs.h" 3 4
#define __DARWIN_64_BIT_INO_T 0




#define __DARWIN_NON_CANCELABLE 0




#define __DARWIN_VERS_1050 1
# 316 "/usr/include/sys/cdefs.h" 3 4
#define __DARWIN_SUF_UNIX03 "$UNIX2003"
#define __DARWIN_SUF_UNIX03_SET 1
# 326 "/usr/include/sys/cdefs.h" 3 4
#define __DARWIN_SUF_64_BIT_INO_T 





#define __DARWIN_SUF_NON_CANCELABLE 



#define __DARWIN_SUF_1050 "$1050"
# 349 "/usr/include/sys/cdefs.h" 3 4
#define __DARWIN_SUF_EXTSN "$DARWIN_EXTSN"




#define __DARWIN_ALIAS(sym) __asm("_" __STRING(sym) __DARWIN_SUF_UNIX03)
#define __DARWIN_ALIAS_C(sym) __asm("_" __STRING(sym) __DARWIN_SUF_NON_CANCELABLE __DARWIN_SUF_UNIX03)
#define __DARWIN_ALIAS_I(sym) __asm("_" __STRING(sym) __DARWIN_SUF_64_BIT_INO_T __DARWIN_SUF_UNIX03)
#define __DARWIN_INODE64(sym) __asm("_" __STRING(sym) __DARWIN_SUF_64_BIT_INO_T)

#define __DARWIN_1050(sym) __asm("_" __STRING(sym) __DARWIN_SUF_1050)
#define __DARWIN_1050ALIAS(sym) __asm("_" __STRING(sym) __DARWIN_SUF_1050 __DARWIN_SUF_UNIX03)
#define __DARWIN_1050ALIAS_C(sym) __asm("_" __STRING(sym) __DARWIN_SUF_1050 __DARWIN_SUF_NON_CANCELABLE __DARWIN_SUF_UNIX03)
#define __DARWIN_1050ALIAS_I(sym) __asm("_" __STRING(sym) __DARWIN_SUF_1050 __DARWIN_SUF_64_BIT_INO_T __DARWIN_SUF_UNIX03)
#define __DARWIN_1050INODE64(sym) __asm("_" __STRING(sym) __DARWIN_SUF_1050 __DARWIN_SUF_64_BIT_INO_T)

#define __DARWIN_EXTSN(sym) __asm("_" __STRING(sym) __DARWIN_SUF_EXTSN)
#define __DARWIN_EXTSN_C(sym) __asm("_" __STRING(sym) __DARWIN_SUF_EXTSN __DARWIN_SUF_NON_CANCELABLE)
# 424 "/usr/include/sys/cdefs.h" 3 4
#define __DARWIN_NO_LONG_LONG (defined(__STRICT_ANSI__) && (__STDC_VERSION__-0 < 199901L) && !defined(__GNUG__))
# 450 "/usr/include/sys/cdefs.h" 3 4
#define __DARWIN_LDBL_COMPAT(x) 
#define __DARWIN_LDBL_COMPAT2(x) 
#define __DARWIN_LONG_DOUBLE_IS_DOUBLE 0
# 461 "/usr/include/sys/cdefs.h" 3 4
#define __deprecated __attribute__((deprecated))
# 483 "/usr/include/sys/cdefs.h" 3 4
#define _DARWIN_FEATURE_UNIX_CONFORMANCE 3
# 76 "/usr/include/sys/types.h" 2 3 4


# 1 "/usr/include/machine/types.h" 1 3 4
# 32 "/usr/include/machine/types.h" 3 4
#define _BSD_MACHINE_TYPES_H_ 




# 1 "/usr/include/i386/types.h" 1 3 4
# 67 "/usr/include/i386/types.h" 3 4
#define _MACHTYPES_H_ 


# 1 "/usr/include/i386/_types.h" 1 3 4
# 29 "/usr/include/i386/_types.h" 3 4
#define _BSD_I386__TYPES_H_ 








# 37 "/usr/include/i386/_types.h" 3 4
typedef signed char __int8_t;



typedef unsigned char __uint8_t;
typedef short __int16_t;
typedef unsigned short __uint16_t;
typedef int __int32_t;
typedef unsigned int __uint32_t;
typedef long long __int64_t;
typedef unsigned long long __uint64_t;

typedef long __darwin_intptr_t;
typedef unsigned int __darwin_natural_t;
# 70 "/usr/include/i386/_types.h" 3 4
typedef int __darwin_ct_rune_t;





typedef union {
 char __mbstate8[128];
 long long _mbstateL;
} __mbstate_t;

typedef __mbstate_t __darwin_mbstate_t;


typedef int __darwin_ptrdiff_t;





typedef long unsigned int __darwin_size_t;





typedef __builtin_va_list __darwin_va_list;





typedef int __darwin_wchar_t;




typedef __darwin_wchar_t __darwin_rune_t;


typedef int __darwin_wint_t;




typedef unsigned long __darwin_clock_t;
typedef __uint32_t __darwin_socklen_t;
typedef long __darwin_ssize_t;
typedef long __darwin_time_t;
# 71 "/usr/include/i386/types.h" 2 3 4






#define _INT8_T 
typedef signed char int8_t;

typedef unsigned char u_int8_t;

#define _INT16_T 
typedef short int16_t;

typedef unsigned short u_int16_t;

#define _INT32_T 
typedef int int32_t;

typedef unsigned int u_int32_t;

#define _INT64_T 
typedef long long int64_t;

typedef unsigned long long u_int64_t;




typedef int32_t register_t;



#define _INTPTR_T 
typedef __darwin_intptr_t intptr_t;


#define _UINTPTR_T 
typedef unsigned long int uintptr_t;




typedef u_int64_t user_addr_t;
typedef u_int64_t user_size_t;
typedef int64_t user_ssize_t;
typedef int64_t user_long_t;
typedef u_int64_t user_ulong_t;
typedef int64_t user_time_t;
#define USER_ADDR_NULL ((user_addr_t) 0)
#define CAST_USER_ADDR_T(a_ptr) ((user_addr_t)((uintptr_t)(a_ptr)))



typedef u_int64_t syscall_arg_t;


#define __offsetof(type,field) ((size_t)(&((type *)0)->field))
# 38 "/usr/include/machine/types.h" 2 3 4
# 79 "/usr/include/sys/types.h" 2 3 4
# 1 "/usr/include/sys/_types.h" 1 3 4
# 30 "/usr/include/sys/_types.h" 3 4
#define _SYS__TYPES_H_ 


# 1 "/usr/include/machine/_types.h" 1 3 4
# 29 "/usr/include/machine/_types.h" 3 4
#define _BSD_MACHINE__TYPES_H_ 
# 34 "/usr/include/sys/_types.h" 2 3 4
# 47 "/usr/include/sys/_types.h" 3 4
#define __PTHREAD_SIZE__ 596
#define __PTHREAD_ATTR_SIZE__ 36
#define __PTHREAD_MUTEXATTR_SIZE__ 8
#define __PTHREAD_MUTEX_SIZE__ 40
#define __PTHREAD_CONDATTR_SIZE__ 4
#define __PTHREAD_COND_SIZE__ 24
#define __PTHREAD_ONCE_SIZE__ 4
#define __PTHREAD_RWLOCK_SIZE__ 124
#define __PTHREAD_RWLOCKATTR_SIZE__ 12


struct __darwin_pthread_handler_rec
{
 void (*__routine)(void *);
 void *__arg;
 struct __darwin_pthread_handler_rec *__next;
};
struct _opaque_pthread_attr_t { long __sig; char __opaque[36]; };
struct _opaque_pthread_cond_t { long __sig; char __opaque[24]; };
struct _opaque_pthread_condattr_t { long __sig; char __opaque[4]; };
struct _opaque_pthread_mutex_t { long __sig; char __opaque[40]; };
struct _opaque_pthread_mutexattr_t { long __sig; char __opaque[8]; };
struct _opaque_pthread_once_t { long __sig; char __opaque[4]; };
struct _opaque_pthread_rwlock_t { long __sig; char __opaque[124]; };
struct _opaque_pthread_rwlockattr_t { long __sig; char __opaque[12]; };
struct _opaque_pthread_t { long __sig; struct __darwin_pthread_handler_rec *__cleanup_stack; char __opaque[596]; };
# 82 "/usr/include/sys/_types.h" 3 4
#define __DARWIN_NULL __null
# 94 "/usr/include/sys/_types.h" 3 4
typedef __int64_t __darwin_blkcnt_t;
typedef __int32_t __darwin_blksize_t;
typedef __int32_t __darwin_dev_t;
typedef unsigned int __darwin_fsblkcnt_t;
typedef unsigned int __darwin_fsfilcnt_t;
typedef __uint32_t __darwin_gid_t;
typedef __uint32_t __darwin_id_t;
typedef __uint64_t __darwin_ino64_t;



typedef __uint32_t __darwin_ino_t;

typedef __darwin_natural_t __darwin_mach_port_name_t;
typedef __darwin_mach_port_name_t __darwin_mach_port_t;
typedef __uint16_t __darwin_mode_t;
typedef __int64_t __darwin_off_t;
typedef __int32_t __darwin_pid_t;
typedef struct _opaque_pthread_attr_t
   __darwin_pthread_attr_t;
typedef struct _opaque_pthread_cond_t
   __darwin_pthread_cond_t;
typedef struct _opaque_pthread_condattr_t
   __darwin_pthread_condattr_t;
typedef unsigned long __darwin_pthread_key_t;
typedef struct _opaque_pthread_mutex_t
   __darwin_pthread_mutex_t;
typedef struct _opaque_pthread_mutexattr_t
   __darwin_pthread_mutexattr_t;
typedef struct _opaque_pthread_once_t
   __darwin_pthread_once_t;
typedef struct _opaque_pthread_rwlock_t
   __darwin_pthread_rwlock_t;
typedef struct _opaque_pthread_rwlockattr_t
   __darwin_pthread_rwlockattr_t;
typedef struct _opaque_pthread_t
   *__darwin_pthread_t;
typedef __uint32_t __darwin_sigset_t;
typedef __int32_t __darwin_suseconds_t;
typedef __uint32_t __darwin_uid_t;
typedef __uint32_t __darwin_useconds_t;
typedef unsigned char __darwin_uuid_t[16];
# 80 "/usr/include/sys/types.h" 2 3 4

# 1 "/usr/include/machine/endian.h" 1 3 4
# 32 "/usr/include/machine/endian.h" 3 4
#define _BSD_MACHINE_ENDIAN_H_ 




# 1 "/usr/include/i386/endian.h" 1 3 4
# 67 "/usr/include/i386/endian.h" 3 4
#define _I386__ENDIAN_H_ 
# 78 "/usr/include/i386/endian.h" 3 4
#define _QUAD_HIGHWORD 1
#define _QUAD_LOWWORD 0





#define __DARWIN_LITTLE_ENDIAN 1234
#define __DARWIN_BIG_ENDIAN 4321
#define __DARWIN_PDP_ENDIAN 3412

#define __DARWIN_BYTE_ORDER __DARWIN_LITTLE_ENDIAN



#define LITTLE_ENDIAN __DARWIN_LITTLE_ENDIAN
#define BIG_ENDIAN __DARWIN_BIG_ENDIAN
#define PDP_ENDIAN __DARWIN_PDP_ENDIAN

#define BYTE_ORDER __DARWIN_BYTE_ORDER

# 1 "/usr/include/sys/_endian.h" 1 3 4
# 91 "/usr/include/sys/_endian.h" 3 4
#define _SYS__ENDIAN_H_ 
# 124 "/usr/include/sys/_endian.h" 3 4
# 1 "/usr/include/libkern/_OSByteOrder.h" 1 3 4
# 30 "/usr/include/libkern/_OSByteOrder.h" 3 4
#define _OS__OSBYTEORDER_H 
# 43 "/usr/include/libkern/_OSByteOrder.h" 3 4
#define __DARWIN_OSSwapConstInt16(x) ((__uint16_t)((((__uint16_t)(x) & 0xff00) >> 8) | (((__uint16_t)(x) & 0x00ff) << 8)))



#define __DARWIN_OSSwapConstInt32(x) ((__uint32_t)((((__uint32_t)(x) & 0xff000000) >> 24) | (((__uint32_t)(x) & 0x00ff0000) >> 8) | (((__uint32_t)(x) & 0x0000ff00) << 8) | (((__uint32_t)(x) & 0x000000ff) << 24)))





#define __DARWIN_OSSwapConstInt64(x) ((__uint64_t)((((__uint64_t)(x) & 0xff00000000000000ULL) >> 56) | (((__uint64_t)(x) & 0x00ff000000000000ULL) >> 40) | (((__uint64_t)(x) & 0x0000ff0000000000ULL) >> 24) | (((__uint64_t)(x) & 0x000000ff00000000ULL) >> 8) | (((__uint64_t)(x) & 0x00000000ff000000ULL) << 8) | (((__uint64_t)(x) & 0x0000000000ff0000ULL) << 24) | (((__uint64_t)(x) & 0x000000000000ff00ULL) << 40) | (((__uint64_t)(x) & 0x00000000000000ffULL) << 56)))
# 66 "/usr/include/libkern/_OSByteOrder.h" 3 4
# 1 "/usr/include/libkern/i386/_OSByteOrder.h" 1 3 4
# 30 "/usr/include/libkern/i386/_OSByteOrder.h" 3 4
#define _OS__OSBYTEORDERI386_H 





#define __DARWIN_OS_INLINE static inline







static inline
__uint16_t
_OSSwapInt16(
    __uint16_t _data
)
{
    return ((_data << 8) | (_data >> 8));
}

static inline
__uint32_t
_OSSwapInt32(
    __uint32_t _data
)
{
    __asm__ ("bswap   %0" : "+r" (_data));
    return _data;
}


static inline
__uint64_t
_OSSwapInt64(
    __uint64_t _data
)
{
    __asm__ ("bswap   %%eax\n\t"
             "bswap   %%edx\n\t"
             "xchgl   %%eax, %%edx"
             : "+A" (_data));
    return _data;
}
# 67 "/usr/include/libkern/_OSByteOrder.h" 2 3 4







#define __DARWIN_OSSwapInt16(x) (__builtin_constant_p(x) ? __DARWIN_OSSwapConstInt16(x) : _OSSwapInt16(x))


#define __DARWIN_OSSwapInt32(x) (__builtin_constant_p(x) ? __DARWIN_OSSwapConstInt32(x) : _OSSwapInt32(x))


#define __DARWIN_OSSwapInt64(x) (__builtin_constant_p(x) ? __DARWIN_OSSwapConstInt64(x) : _OSSwapInt64(x))
# 125 "/usr/include/sys/_endian.h" 2 3 4

#define ntohs(x) __DARWIN_OSSwapInt16(x)
#define htons(x) __DARWIN_OSSwapInt16(x)

#define ntohl(x) __DARWIN_OSSwapInt32(x)
#define htonl(x) __DARWIN_OSSwapInt32(x)


#define NTOHL(x) (x) = ntohl((__uint32_t)x)
#define NTOHS(x) (x) = ntohs((__uint16_t)x)
#define HTONL(x) (x) = htonl((__uint32_t)x)
#define HTONS(x) (x) = htons((__uint16_t)x)
# 100 "/usr/include/i386/endian.h" 2 3 4
# 38 "/usr/include/machine/endian.h" 2 3 4
# 82 "/usr/include/sys/types.h" 2 3 4


typedef unsigned char u_char;
typedef unsigned short u_short;
typedef unsigned int u_int;

typedef unsigned long u_long;
#define _U_LONG 

typedef unsigned short ushort;
typedef unsigned int uint;


typedef u_int64_t u_quad_t;
typedef int64_t quad_t;
typedef quad_t * qaddr_t;

typedef char * caddr_t;
typedef int32_t daddr_t;


typedef __darwin_dev_t dev_t;
#define _DEV_T 


typedef u_int32_t fixpt_t;


typedef __darwin_blkcnt_t blkcnt_t;
#define _BLKCNT_T 



typedef __darwin_blksize_t blksize_t;
#define _BLKSIZE_T 



typedef __darwin_gid_t gid_t;
#define _GID_T 



#define _IN_ADDR_T 
typedef __uint32_t in_addr_t;



#define _IN_PORT_T 
typedef __uint16_t in_port_t;



typedef __darwin_ino_t ino_t;
#define _INO_T 




typedef __darwin_ino64_t ino64_t;
#define _INO64_T 




#define _KEY_T 
typedef __int32_t key_t;



typedef __darwin_mode_t mode_t;
#define _MODE_T 



typedef __uint16_t nlink_t;
#define _NLINK_T 



#define _ID_T 
typedef __darwin_id_t id_t;



typedef __darwin_pid_t pid_t;
#define _PID_T 



typedef __darwin_off_t off_t;
#define _OFF_T 


typedef int32_t segsz_t;
typedef int32_t swblk_t;


typedef __darwin_uid_t uid_t;
#define _UID_T 
# 197 "/usr/include/sys/types.h" 3 4
static inline __int32_t major(__uint32_t _x)
{
 return (__int32_t)(((__uint32_t)_x >> 24) & 0xff);
}

static inline __int32_t minor(__uint32_t _x)
{
 return (__int32_t)((_x) & 0xffffff);
}

static inline dev_t makedev(__uint32_t _major, __uint32_t _minor)
{
 return (dev_t)(((_major) << 24) | (_minor));
}
# 222 "/usr/include/sys/types.h" 3 4
#define _CLOCK_T 
typedef __darwin_clock_t clock_t;



#define _SIZE_T 


typedef __darwin_size_t size_t;



#define _SSIZE_T 
typedef __darwin_ssize_t ssize_t;



#define _TIME_T 
typedef __darwin_time_t time_t;



#define _USECONDS_T 
typedef __darwin_useconds_t useconds_t;



#define _SUSECONDS_T 
typedef __darwin_suseconds_t suseconds_t;
# 259 "/usr/include/sys/types.h" 3 4
#define __need_fd_set 
# 1 "/usr/include/sys/_structs.h" 1 3 4
# 165 "/usr/include/sys/_structs.h" 3 4
#undef __need_fd_set

#define _FD_SET 
# 177 "/usr/include/sys/_structs.h" 3 4
#define __DARWIN_FD_SETSIZE 1024

#define __DARWIN_NBBY 8
#define __DARWIN_NFDBITS (sizeof(__int32_t) * __DARWIN_NBBY)
#define __DARWIN_howmany(x,y) (((x) + ((y) - 1)) / (y))

extern "C" {
typedef struct fd_set {
 __int32_t fds_bits[(((1024) + (((sizeof(__int32_t) * 8)) - 1)) / ((sizeof(__int32_t) * 8)))];
} fd_set;
}


static inline int
__darwin_fd_isset(int _n, struct fd_set *_p)
{
 return (_p->fds_bits[_n/(sizeof(__int32_t) * 8)] & (1<<(_n % (sizeof(__int32_t) * 8))));
}

#define __DARWIN_FD_SET(n,p) do { int __fd = (n); ((p)->fds_bits[__fd/__DARWIN_NFDBITS] |= (1<<(__fd % __DARWIN_NFDBITS))); } while(0)
#define __DARWIN_FD_CLR(n,p) do { int __fd = (n); ((p)->fds_bits[__fd/__DARWIN_NFDBITS] &= ~(1<<(__fd % __DARWIN_NFDBITS))); } while(0)
#define __DARWIN_FD_ISSET(n,p) __darwin_fd_isset((n), (p))






#define __DARWIN_FD_ZERO(p) __builtin_bzero(p, sizeof(*(p)))




#define __DARWIN_FD_COPY(f,t) bcopy(f, t, sizeof(*(f)))
# 261 "/usr/include/sys/types.h" 2 3 4

#define NBBY __DARWIN_NBBY
#define NFDBITS __DARWIN_NFDBITS
#define howmany(x,y) __DARWIN_howmany(x, y)
typedef __int32_t fd_mask;
# 274 "/usr/include/sys/types.h" 3 4
#define FD_SETSIZE __DARWIN_FD_SETSIZE


#define FD_SET(n,p) __DARWIN_FD_SET(n, p)


#define FD_CLR(n,p) __DARWIN_FD_CLR(n, p)


#define FD_ISSET(n,p) __DARWIN_FD_ISSET(n, p)


#define FD_ZERO(p) __DARWIN_FD_ZERO(p)



#define FD_COPY(f,t) __DARWIN_FD_COPY(f, t)
# 317 "/usr/include/sys/types.h" 3 4
#define _PTHREAD_ATTR_T 
typedef __darwin_pthread_attr_t pthread_attr_t;


#define _PTHREAD_COND_T 
typedef __darwin_pthread_cond_t pthread_cond_t;


#define _PTHREAD_CONDATTR_T 
typedef __darwin_pthread_condattr_t pthread_condattr_t;


#define _PTHREAD_MUTEX_T 
typedef __darwin_pthread_mutex_t pthread_mutex_t;


#define _PTHREAD_MUTEXATTR_T 
typedef __darwin_pthread_mutexattr_t pthread_mutexattr_t;


#define _PTHREAD_ONCE_T 
typedef __darwin_pthread_once_t pthread_once_t;


#define _PTHREAD_RWLOCK_T 
typedef __darwin_pthread_rwlock_t pthread_rwlock_t;


#define _PTHREAD_RWLOCKATTR_T 
typedef __darwin_pthread_rwlockattr_t pthread_rwlockattr_t;


#define _PTHREAD_T 
typedef __darwin_pthread_t pthread_t;





#define _PTHREAD_KEY_T 
typedef __darwin_pthread_key_t pthread_key_t;




#define _FSBLKCNT_T 
typedef __darwin_fsblkcnt_t fsblkcnt_t;



#define _FSFILCNT_T 
typedef __darwin_fsfilcnt_t fsfilcnt_t;
# 88 "config.h" 2
# 96 "config.h"
#define ALIGNOF_CHAR 1


#define ALIGNOF_INT 4


#define ALIGNOF_LONG 4


#define ALIGNOF_LONG_LONG 4


#define ALIGNOF_SHORT 2


#define ALIGNOF_WCHAR_T 4
# 129 "config.h"
#define CC_HAS_LONG_LONG 1
# 143 "config.h"
#define DEBUGDIR "/usr/local/lib/debug"


#define DEFAULT_BFD_ARCH bfd_i386_arch


#define DEFAULT_BFD_VEC mach_o_le_vec


#define ENABLE_NLS 1
# 161 "config.h"
#define FLEXIBLE_ARRAY_MEMBER 


#define GDBINIT ".gdbinit"





#define GDB_HOST_DOUBLE_FORMAT &floatformat_ieee_double_little


#define GDB_HOST_FLOAT_FORMAT &floatformat_ieee_single_little


#define GDB_HOST_LONG_DOUBLE_FORMAT &floatformat_i387_ext


#define GDB_NM_FILE "config/i386/nm-i386-macosx.h"





#define GDB_TM_FILE "config/i386/tm-i386-macosx.h"


#define GDB_XM_FILE "config/i386/xm-i386-macosx.h"


#define GETPGRP_VOID 1
# 201 "config.h"
#define HAVE_64_BIT_MACH_EXCEPTIONS 1


#define HAVE_64_BIT_STACK_LOGGING 1


#define HAVE_ALARM 1


#define HAVE_ALLOCA 1



#define HAVE_ALLOCA_H 1


#define HAVE_ARCHITECTURE_BYTE_ORDER_H 1





#define HAVE_ARPA_INET_H 1





#define HAVE_ASSERT_H 1


#define HAVE_ATEXIT 1


#define HAVE_ATOF 1


#define HAVE_AVAILABILITYMACROS_H 1


#define HAVE_AVAILABILITY_H 1





#define HAVE_BCOPY 1





#define HAVE_BSEARCH 1


#define HAVE_BTOWC 1


#define HAVE_BZERO 1


#define HAVE_CADDR_T 1
# 274 "config.h"
#define HAVE_CLNT_PCREATEERROR 1





#define HAVE_CONNECT 1



#define HAVE_COREFOUNDATION_CFPROPERTYLIST_H 1


#define HAVE_COREFOUNDATION_CFURLACCESS_H 1



#define HAVE_COREFOUNDATION_COREFOUNDATION_H 1


#define HAVE_CRT_EXTERNS_H 1


#define HAVE_CTYPE_H 1





#define HAVE_CURSES_H 1


#define HAVE_C_BACKSLASH_A 1


#define HAVE_C_VARARRAYS 1
# 319 "config.h"
#define HAVE_DECL_ADDR_NO_RANDOMIZE 0



#define HAVE_DECL_ALLOCA 1



#define HAVE_DECL_ASPRINTF 1



#define HAVE_DECL_ATOF 1



#define HAVE_DECL_BASENAME 0



#define HAVE_DECL_CLOSE 1


#define HAVE_DECL_FFS 1



#define HAVE_DECL_FREE 1



#define HAVE_DECL_GETOPT 1



#define HAVE_DECL_MALLOC 1



#define HAVE_DECL_NAME_SERVER_PORT 1



#define HAVE_DECL_POSIX_SPAWN_SETEXEC 0



#define HAVE_DECL_PTRACE 1



#define HAVE_DECL_REALLOC 1



#define HAVE_DECL_SNPRINTF 1



#define HAVE_DECL_STRCHR 1



#define HAVE_DECL_STRERROR 1



#define HAVE_DECL_STRPBRK 1



#define HAVE_DECL_STRSTR 1



#define HAVE_DECL_STRTOL 1



#define HAVE_DECL_STRTOLL 1



#define HAVE_DECL_STRTOUL 1



#define HAVE_DECL_STRTOULL 1



#define HAVE_DECL_STRVERSCMP 0



#define HAVE_DECL_SYS_SIGLIST 1



#define HAVE_DECL_TIMERADD 1



#define HAVE_DECL_TIMERCLEAR 1



#define HAVE_DECL_TIMERSUB 1







#define HAVE_DECL_UNW_SLT_MEMORY 0



#define HAVE_DECL_UNW_SLT_NONE 0



#define HAVE_DECL_UNW_SLT_REG 0



#define HAVE_DECL_VASPRINTF 1



#define HAVE_DECL_VSNPRINTF 1







#define HAVE_DECL___LITTLE_ENDIAN 0



#define HAVE_DIRENT_H 1


#define HAVE_DLFCN_H 1
# 474 "config.h"
#define HAVE_DUP2 1





#define HAVE_ERRNO_H 1


#define HAVE_EXIT 1


#define HAVE_FCNTL_H 1


#define HAVE_FFLUSH 1


#define HAVE_FGETS 1


#define HAVE_FORK 1





#define HAVE_FPRINTF 1


#define HAVE_FWRITE 1


#define HAVE_GETCWD 1


#define HAVE_GETGID 1


#define HAVE_GETHOSTBYADDR 1


#define HAVE_GETHOSTBYNAME 1


#define HAVE_GETHOSTNAME 1


#define HAVE_GETPAGESIZE 1


#define HAVE_GETPASS 1


#define HAVE_GETRLIMIT 1


#define HAVE_GETRUSAGE 1


#define HAVE_GETS 1





#define HAVE_GETTEXT_H 1


#define HAVE_GETTIMEOFDAY 1


#define HAVE_GETUID 1
# 567 "config.h"
#define HAVE_INET_ADDR 1


#define HAVE_INET_NTOA 1


#define HAVE_INTMAX_T 1


#define HAVE_INTTYPES_H 1


#define HAVE_ISASCII 1


#define HAVE_ISHEXNUMBER 1


#define HAVE_ISNUMBER 1


#define HAVE_ISSPACE 1


#define HAVE_KERN_RETURN_T 1





#define HAVE_LANGINFO_CODESET 1


#define HAVE_LANGINFO_H 1





#define HAVE_LIBBABELTRACE 1





#define HAVE_LIBC 1





#define HAVE_LIBGEN_H 1


#define HAVE_LIBGETTEXT_H 1
# 633 "config.h"
#define HAVE_LIBINTL 1


#define HAVE_LIBINTL_H 1





#define HAVE_LIBM 1





#define HAVE_LIBREADLINE 1
# 666 "config.h"
#define HAVE_LIBXML2 1


#define HAVE_LIBXML_PARSER_H 1


#define HAVE_LIBXML_TREE_H 1


#define HAVE_LIBZ 1


#define HAVE_LIMITS_H 1
# 691 "config.h"
#define HAVE_LOCALE_H 1


#define HAVE_LONG_DOUBLE 1



#define HAVE_LONG_DOUBLE_WIDER 1


#define HAVE_LONG_FILE_NAMES 1


#define HAVE_LONG_LONG 1


#define HAVE_LONG_LONG_INT 1
# 726 "config.h"
#define HAVE_MACH_ERROR_STRING 1





#define HAVE_MACH_KERN_RETURN_H 1


#define HAVE_MACH_KMOD_H 1


#define HAVE_MACH_MACH_ERROR_H 1


#define HAVE_MACH_MACH_H 1


#define HAVE_MACH_MACH_INIT_H 1


#define HAVE_MACH_MACH_PORT_H 1


#define HAVE_MACH_MACH_VM_H 1


#define HAVE_MACH_MESSAGE_H 1


#define HAVE_MACH_MSG_HEADER_T 1





#define HAVE_MACH_O_LOADER_H 1


#define HAVE_MACH_O_NLIST_H 1





#define HAVE_MACH_PORT_H 1


#define HAVE_MACH_PORT_T 1


#define HAVE_MACH_TASK_H 1


#define HAVE_MACH_THREAD_INFO_H 1


#define HAVE_MACH_THREAD_STATUS_H 1


#define HAVE_MACH_VM_ADDRESS_T 1


#define HAVE_MACH_VM_TYPES_H 1



#define HAVE_MALLOC 1





#define HAVE_MALLOC_MALLOC_H 1


#define HAVE_MATH_H 1


#define HAVE_MBRTOWC 1





#define HAVE_MEMCHR 1


#define HAVE_MEMCMP 1


#define HAVE_MEMCPY 1


#define HAVE_MEMMOVE 1


#define HAVE_MEMORY_H 1





#define HAVE_MEMSET 1





#define HAVE_MKDIR 1


#define HAVE_MMAP 1


#define HAVE_MONSTARTUP 1


#define HAVE_MUNMAP 1


#define HAVE_NCURSES_H 1
# 859 "config.h"
#define HAVE_NETDB_H 1


#define HAVE_NETINET_IN_H 1


#define HAVE_NETNAME_LOOK_UP 1


#define HAVE_NLIST_H 1


#define HAVE_NL_LANGINFO 1


#define HAVE_NL_TYPES_H 1





#define HAVE_PATHCONF 1


#define HAVE_PATHS_H 1


#define HAVE_PCLOSE 1
# 895 "config.h"
#define HAVE_PIPE 1


#define HAVE_POLL 1


#define HAVE_POLL_H 1


#define HAVE_POPEN 1


#define HAVE_POSIX_MADVISE 1





#define HAVE_POSIX_SPAWNP 1


#define HAVE_POW 1


#define HAVE_PREAD 1
# 964 "config.h"
#define HAVE_PTHREAD_H 1





#define HAVE_PTRACE 1
# 985 "config.h"
#define HAVE_PTRDIFF_T 1
# 994 "config.h"
#define HAVE_PUTENV 1


#define HAVE_PWRITE 1





#define HAVE_QSORT 1


#define HAVE_QSORT_R 1


#define HAVE_RAW_DECL_FFSL 1
# 1027 "config.h"
#define HAVE_RAW_DECL_STPCPY 1





#define HAVE_RAW_DECL_STRCASESTR 1





#define HAVE_RAW_DECL_STRDUP 1


#define HAVE_RAW_DECL_STRERROR_R 1


#define HAVE_RAW_DECL_STRNCAT 1
# 1054 "config.h"
#define HAVE_RAW_DECL_STRPBRK 1


#define HAVE_RAW_DECL_STRSEP 1


#define HAVE_RAW_DECL_STRSIGNAL 1


#define HAVE_RAW_DECL_STRTOK_R 1





#define HAVE_READDIR 1



#define HAVE_REALLOC 1


#define HAVE_REALPATH 1


#define HAVE_RECV 1


#define HAVE_REGCOMP 1


#define HAVE_REGEX_H 1


#define HAVE_REGEX_T 1





#define HAVE_RPC_CLNT_H 1


#define HAVE_RPC_RPC_H 1





#define HAVE_SA_FAMILY_T 1


#define HAVE_SBRK 1


#define HAVE_SECURITY_SECURITY_H 1


#define HAVE_SELECT 1


#define HAVE_SEND 1


#define HAVE_SERVERS_NETNAME_DEFS_H 1


#define HAVE_SERVERS_NETNAME_H 1


#define HAVE_SETENV 1


#define HAVE_SETITIMER 1


#define HAVE_SETJMP_H 1


#define HAVE_SETLOCALE 1


#define HAVE_SETPGID 1


#define HAVE_SETPGRP 1


#define HAVE_SETRLIMIT 1


#define HAVE_SETSID 1


#define HAVE_SGTTY_H 1


#define HAVE_SIGACTION 1
# 1163 "config.h"
#define HAVE_SIGPROCMASK 1


#define HAVE_SIGSETJMP 1


#define HAVE_SIGSETMASK 1


#define HAVE_SNPRINTF 1


#define HAVE_SOCKET 1


#define HAVE_SOCKETPAIR 1


#define HAVE_SOCKLEN_T 1


#define HAVE_SPAWN_H 1
# 1194 "config.h"
#define HAVE_STDARG_H 1


#define HAVE_STDBOOL_H 1


#define HAVE_STDDEF_H 1


#define HAVE_STDINT_H 1


#define HAVE_STDIO_H 1


#define HAVE_STDLIB_H 1


#define HAVE_STPCPY 1


#define HAVE_STRCASECMP 1


#define HAVE_STRCAT 1


#define HAVE_STRCHR 1


#define HAVE_STRCPY 1


#define HAVE_STRCSPN 1


#define HAVE_STRDUP 1


#define HAVE_STRERROR 1


#define HAVE_STRFTIME 1


#define HAVE_STRINGIZE 1


#define HAVE_STRINGS_H 1


#define HAVE_STRING_H 1


#define HAVE_STRLCAT 1


#define HAVE_STRLCPY 1


#define HAVE_STRLEN 1


#define HAVE_STRNCASECMP 1


#define HAVE_STRNCAT 1


#define HAVE_STRNCMP 1


#define HAVE_STRNCPY 1





#define HAVE_STRPBRK 1


#define HAVE_STRRCHR 1


#define HAVE_STRSPN 1


#define HAVE_STRSTR 1


#define HAVE_STRTOK 1


#define HAVE_STRTOK_R 1


#define HAVE_STRTOL 1


#define HAVE_STRTOUL 1
# 1323 "config.h"
#define HAVE_STRUCT_STAT_ST_BLKSIZE 1


#define HAVE_STRUCT_STAT_ST_BLOCKS 1


#define HAVE_STRUCT_STAT_ST_RDEV 1





#define HAVE_STRUCT_TM_TM_ZONE 1
# 1345 "config.h"
#define HAVE_ST_BLOCKS 1


#define HAVE_SYSCALL 1
# 1367 "config.h"
#define HAVE_SYS_FILE_H 1


#define HAVE_SYS_FILIO_H 1





#define HAVE_SYS_IOCTL_H 1






#define HAVE_SYS_PARAM_H 1


#define HAVE_SYS_POLL_H 1
# 1395 "config.h"
#define HAVE_SYS_PTRACE_H 1





#define HAVE_SYS_RESOURCE_H 1


#define HAVE_SYS_SELECT_H 1


#define HAVE_SYS_SOCKET_H 1


#define HAVE_SYS_STAT_H 1


#define HAVE_SYS_SYSCALL_H 1


#define HAVE_SYS_SYSCTL_H 1


#define HAVE_SYS_TERMIOS_H 1


#define HAVE_SYS_TIME_H 1


#define HAVE_SYS_TYPES_H 1


#define HAVE_SYS_UIO_H 1


#define HAVE_SYS_USER_H 1


#define HAVE_SYS_UTSNAME_H 1


#define HAVE_SYS_WAIT_H 1





#define HAVE_TASK_T 1


#define HAVE_TERMIOS_H 1





#define HAVE_TERM_H 1
# 1476 "config.h"
#define HAVE_TIME_H 1






#define HAVE_TM_ZONE 1
# 1493 "config.h"
#define HAVE_UINTMAX_T 1


#define HAVE_UINTPTR_T 1


#define HAVE_UNAME 1


#define HAVE_UNISTD_H 1


#define HAVE_UNSIGNED_LONG_LONG_INT 1
# 1526 "config.h"
#define HAVE_UTMP_H 1


#define HAVE_UUID_T 1


#define HAVE_UUID_UUID_H 1
# 1541 "config.h"
#define HAVE_VASPRINTF 1


#define HAVE_VFORK 1





#define HAVE_VM_ADDRESS_T 1


#define HAVE_VPRINTF 1






#define HAVE_WAITPID 1





#define HAVE_WBORDER 1


#define HAVE_WCHAR_H 1


#define HAVE_WCHAR_T 1


#define HAVE_WCTYPE_H 1


#define HAVE_WCWIDTH 1


#define HAVE_WORKING_FORK 1


#define HAVE_WORKING_VFORK 1


#define HAVE_WRESIZE 1


#define HAVE_X86_DEBUG_STATE32_T 1


#define HAVE_X86_DEBUG_STATE_T 1


#define HAVE_ZLIB_H 1


#define HAVE__BOOL 1
# 1621 "config.h"
#define HAVE___MACH_STACK_LOGGING_ENUMERATE_RECORDS 1


#define HOST_OPERATING_SYSTEM "Darwin"





#define LIBXML2_IS_USABLE 1






#define LT_OBJDIR ".libs/"


#define MMCHECK_FORCE 1
# 1650 "config.h"
#define PACKAGE "gdb"


#define PACKAGE_BUGREPORT "jmolenda@apple.com"


#define PACKAGE_NAME "gdb"


#define PACKAGE_STRING "gdb 1824"


#define PACKAGE_TARNAME "gdb"


#define PACKAGE_URL ""


#define PACKAGE_VERSION "1824"


#define PKGVERSION "(GDB) "
# 1680 "config.h"
#define PRINTF_HAS_LONG_DOUBLE 1


#define PRINTF_HAS_LONG_LONG 1






#define PROTOTYPES 1


#define PTRACE_TYPE_ARG3 caddr_t





#define PTRACE_TYPE_RET int






#define REPORT_BUGS_TO "<http://www.gnu.org/software/gdb/bugs/>"


#define RETSIGTYPE void


#define SCANF_HAS_LONG_DOUBLE 1


#define SELECT_TYPE_ARG1 int


#define SELECT_TYPE_ARG234 (fd_set *)


#define SELECT_TYPE_ARG5 (struct timeval *)


#define SETPGRP_VOID 1






#define SIZEOF_CHAR 1


#define SIZEOF_INT 4


#define SIZEOF_LONG 4


#define SIZEOF_LONG_LONG 8


#define SIZEOF_SHORT 2


#define SIZEOF_WCHAR_T 4
# 1767 "config.h"
#define STDC_HEADERS 1
# 1779 "config.h"
#define TIME_WITH_SYS_TIME 1





#define USE_ARCH_FOR_EXEC 1


#define USE_CARBON_FRAMEWORK 1


#define USE_DEBUG_SYMBOLS_FRAMEWORK 1


#define USE_INCLUDED_REGEX 1


#define USE_MMALLOC 1


#define USE_POSIX_SPAWN 1



#define _ALL_SOURCE 1



#define _DARWIN_C_SOURCE 1



#define _GNU_SOURCE 1



#define __USE_MINGW_ANSI_STDIO 1



#define _POSIX_PTHREAD_SEMANTICS 1



#define _TANDEM_SOURCE 1
# 1834 "config.h"
#define __EXTENSIONS__ 1
# 1844 "config.h"
#define VERSION "1824"
# 1877 "config.h"
#define YYTEXT_POINTER 1



#define _DARWIN_USE_64_BIT_INODE 1
# 1935 "config.h"
#define __PROTOTYPES 1
# 1980 "config.h"
#define _GL_EXTERN_INLINE_STDHEADER_BUG 
# 2002 "config.h"
#define _GL_INLINE static _GL_UNUSED
#define _GL_EXTERN_INLINE static _GL_UNUSED
# 2015 "config.h"
#define _GL_INLINE_HEADER_CONST_PRAGMA _Pragma ("GCC diagnostic ignored \"-Wsuggest-attribute=const\"")


#define _GL_INLINE_HEADER_BEGIN _Pragma ("GCC diagnostic push") _Pragma ("GCC diagnostic ignored \"-Wmissing-prototypes\"") _Pragma ("GCC diagnostic ignored \"-Wmissing-declarations\"") _GL_INLINE_HEADER_CONST_PRAGMA




#define _GL_INLINE_HEADER_END _Pragma ("GCC diagnostic pop")
# 2080 "config.h"
#define restrict __restrict
# 34 "defs.h" 2
# 49 "defs.h"
# 1 "/usr/include/stdio.h" 1 3 4
# 62 "/usr/include/stdio.h" 3 4
#define _STDIO_H_ 

# 1 "/usr/include/_types.h" 1 3 4
# 25 "/usr/include/_types.h" 3 4
#define __TYPES_H_ 



typedef int __darwin_nl_item;
typedef int __darwin_wctrans_t;



typedef unsigned long __darwin_wctype_t;



#define __DARWIN_WCHAR_MAX __WCHAR_MAX__





#define __DARWIN_WCHAR_MIN (-0x7fffffff - 1)



#define __DARWIN_WEOF ((__darwin_wint_t)-1)
# 65 "/usr/include/stdio.h" 2 3 4


#define _VA_LIST 


typedef __darwin_va_list va_list;
# 84 "/usr/include/stdio.h" 3 4
#define NULL __DARWIN_NULL


typedef __darwin_off_t fpos_t;

#define _FSTDIO 
# 98 "/usr/include/stdio.h" 3 4
struct __sbuf {
 unsigned char *_base;
 int _size;
};


struct __sFILEX;
# 132 "/usr/include/stdio.h" 3 4
typedef struct __sFILE {
 unsigned char *_p;
 int _r;
 int _w;
 short _flags;
 short _file;
 struct __sbuf _bf;
 int _lbfsize;


 void *_cookie;
 int (*_close)(void *);
 int (*_read) (void *, char *, int);
 fpos_t (*_seek) (void *, fpos_t, int);
 int (*_write)(void *, const char *, int);


 struct __sbuf _ub;
 struct __sFILEX *_extra;
 int _ur;


 unsigned char _ubuf[3];
 unsigned char _nbuf[1];


 struct __sbuf _lb;


 int _blksize;
 fpos_t _offset;
} FILE;

extern "C" {

extern FILE *__stdinp;
extern FILE *__stdoutp;
extern FILE *__stderrp;



}

#define __SLBF 0x0001
#define __SNBF 0x0002
#define __SRD 0x0004
#define __SWR 0x0008

#define __SRW 0x0010
#define __SEOF 0x0020
#define __SERR 0x0040
#define __SMBF 0x0080
#define __SAPP 0x0100
#define __SSTR 0x0200
#define __SOPT 0x0400
#define __SNPT 0x0800
#define __SOFF 0x1000
#define __SMOD 0x2000
#define __SALC 0x4000
#define __SIGN 0x8000
# 202 "/usr/include/stdio.h" 3 4
#define _IOFBF 0
#define _IOLBF 1
#define _IONBF 2

#define BUFSIZ 1024
#define EOF (-1)







#define FOPEN_MAX 20
#define FILENAME_MAX 1024



#define P_tmpdir "/var/tmp/"

#define L_tmpnam 1024
#define TMP_MAX 308915776


#define SEEK_SET 0


#define SEEK_CUR 1


#define SEEK_END 2



#define stdin __stdinp
#define stdout __stdoutp
#define stderr __stderrp
# 248 "/usr/include/stdio.h" 3 4
extern "C" {
void clearerr(FILE *);
int fclose(FILE *);
int feof(FILE *);
int ferror(FILE *);
int fflush(FILE *);
int fgetc(FILE *);
int fgetpos(FILE * , fpos_t *);
char *fgets(char * , int, FILE *);
FILE *fopen(const char * , const char * );
int fprintf(FILE * , const char * , ...) ;
int fputc(int, FILE *);
int fputs(const char * , FILE * ) __asm("_" "fputs" "$UNIX2003");
size_t fread(void * , size_t, size_t, FILE * );
FILE *freopen(const char * , const char * ,
     FILE * ) __asm("_" "freopen" "$UNIX2003");
int fscanf(FILE * , const char * , ...) ;
int fseek(FILE *, long, int);
int fsetpos(FILE *, const fpos_t *);
long ftell(FILE *);
size_t fwrite(const void * , size_t, size_t, FILE * ) __asm("_" "fwrite" "$UNIX2003");
int getc(FILE *);
int getchar(void);
char *gets(char *);

extern const int sys_nerr;
extern const char *const sys_errlist[];

void perror(const char *);
int printf(const char * , ...) ;
int putc(int, FILE *);
int putchar(int);
int puts(const char *);
int remove(const char *);
int rename (const char *, const char *);
void rewind(FILE *);
int scanf(const char * , ...) ;
void setbuf(FILE * , char * );
int setvbuf(FILE * , char * , int, size_t);
int sprintf(char * , const char * , ...) ;
int sscanf(const char * , const char * , ...) ;
FILE *tmpfile(void);
char *tmpnam(char *);
int ungetc(int, FILE *);
int vfprintf(FILE * , const char * , va_list) ;
int vprintf(const char * , va_list) ;
int vsprintf(char * , const char * , va_list) ;

int asprintf(char **, const char *, ...) ;
int vasprintf(char **, const char *, va_list) ;

}





#define L_ctermid 1024

extern "C" {
char *ctermid(char *);

char *ctermid_r(char *);

FILE *fdopen(int, const char *);

char *fgetln(FILE *, size_t *);

int fileno(FILE *);
void flockfile(FILE *);

const char
 *fmtcheck(const char *, const char *);
int fpurge(FILE *);

int fseeko(FILE *, off_t, int);
off_t ftello(FILE *);
int ftrylockfile(FILE *);
void funlockfile(FILE *);
int getc_unlocked(FILE *);
int getchar_unlocked(void);

int getw(FILE *);

int pclose(FILE *);
FILE *popen(const char *, const char *);
int putc_unlocked(int, FILE *);
int putchar_unlocked(int);

int putw(int, FILE *);
void setbuffer(FILE *, char *, int);
int setlinebuf(FILE *);

int snprintf(char * , size_t, const char * , ...) ;
char *tempnam(const char *, const char *) __asm("_" "tempnam" "$UNIX2003");
int vfscanf(FILE * , const char * , va_list) ;
int vscanf(const char * , va_list) ;
int vsnprintf(char * , size_t, const char * , va_list) ;
int vsscanf(const char * , const char * , va_list) ;

FILE *zopen(const char *, const char *, int);

}





extern "C" {
FILE *funopen(const void *,
  int (*)(void *, char *, int),
  int (*)(void *, const char *, int),
  fpos_t (*)(void *, fpos_t, int),
  int (*)(void *));
}
#define fropen(cookie,fn) funopen(cookie, fn, 0, 0, 0)
#define fwopen(cookie,fn) funopen(cookie, 0, fn, 0, 0)






extern "C" {
int __srget(FILE *);
int __svfscanf(FILE *, const char *, va_list) ;
int __swbuf(int, FILE *);
}





#define __sgetc(p) (--(p)->_r < 0 ? __srget(p) : (int)(*(p)->_p++))

static inline int __sputc(int _c, FILE *_p) {
 if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
  return (*_p->_p++ = _c);
 else
  return (__swbuf(_c, _p));
}
# 403 "/usr/include/stdio.h" 3 4
#define __sfeof(p) (((p)->_flags & __SEOF) != 0)
#define __sferror(p) (((p)->_flags & __SERR) != 0)
#define __sclearerr(p) ((void)((p)->_flags &= ~(__SERR|__SEOF)))
#define __sfileno(p) ((p)->_file)



#define feof_unlocked(p) __sfeof(p)
#define ferror_unlocked(p) __sferror(p)
#define clearerr_unlocked(p) __sclearerr(p)
#define fileno_unlocked(p) __sfileno(p)



#define getc_unlocked(fp) __sgetc(fp)
#define putc_unlocked(x,fp) __sputc(x, fp)


#define getchar_unlocked() getc_unlocked(stdin)
#define putchar_unlocked(x) putc_unlocked(x, stdout)
# 50 "defs.h" 2






# 1 "/usr/include/errno.h" 1 3 4
# 23 "/usr/include/errno.h" 3 4
# 1 "/usr/include/sys/errno.h" 1 3 4
# 70 "/usr/include/sys/errno.h" 3 4
#define _SYS_ERRNO_H_ 


extern "C" {
extern int * __error(void);
#define errno (*__error())
}





#define EPERM 1
#define ENOENT 2
#define ESRCH 3
#define EINTR 4
#define EIO 5
#define ENXIO 6
#define E2BIG 7
#define ENOEXEC 8
#define EBADF 9
#define ECHILD 10
#define EDEADLK 11

#define ENOMEM 12
#define EACCES 13
#define EFAULT 14

#define ENOTBLK 15

#define EBUSY 16
#define EEXIST 17
#define EXDEV 18
#define ENODEV 19
#define ENOTDIR 20
#define EISDIR 21
#define EINVAL 22
#define ENFILE 23
#define EMFILE 24
#define ENOTTY 25
#define ETXTBSY 26
#define EFBIG 27
#define ENOSPC 28
#define ESPIPE 29
#define EROFS 30
#define EMLINK 31
#define EPIPE 32


#define EDOM 33
#define ERANGE 34


#define EAGAIN 35
#define EWOULDBLOCK EAGAIN
#define EINPROGRESS 36
#define EALREADY 37


#define ENOTSOCK 38
#define EDESTADDRREQ 39
#define EMSGSIZE 40
#define EPROTOTYPE 41
#define ENOPROTOOPT 42
#define EPROTONOSUPPORT 43

#define ESOCKTNOSUPPORT 44

#define ENOTSUP 45
# 152 "/usr/include/sys/errno.h" 3 4
#define EPFNOSUPPORT 46

#define EAFNOSUPPORT 47
#define EADDRINUSE 48
#define EADDRNOTAVAIL 49


#define ENETDOWN 50
#define ENETUNREACH 51
#define ENETRESET 52
#define ECONNABORTED 53
#define ECONNRESET 54
#define ENOBUFS 55
#define EISCONN 56
#define ENOTCONN 57

#define ESHUTDOWN 58
#define ETOOMANYREFS 59

#define ETIMEDOUT 60
#define ECONNREFUSED 61

#define ELOOP 62
#define ENAMETOOLONG 63



#define EHOSTDOWN 64

#define EHOSTUNREACH 65
#define ENOTEMPTY 66



#define EPROCLIM 67
#define EUSERS 68

#define EDQUOT 69


#define ESTALE 70

#define EREMOTE 71
#define EBADRPC 72
#define ERPCMISMATCH 73
#define EPROGUNAVAIL 74
#define EPROGMISMATCH 75
#define EPROCUNAVAIL 76


#define ENOLCK 77
#define ENOSYS 78


#define EFTYPE 79
#define EAUTH 80
#define ENEEDAUTH 81


#define EPWROFF 82
#define EDEVERR 83


#define EOVERFLOW 84



#define EBADEXEC 85
#define EBADARCH 86
#define ESHLIBVERS 87
#define EBADMACHO 88


#define ECANCELED 89

#define EIDRM 90
#define ENOMSG 91
#define EILSEQ 92

#define ENOATTR 93


#define EBADMSG 94
#define EMULTIHOP 95
#define ENODATA 96
#define ENOLINK 97
#define ENOSR 98
#define ENOSTR 99
#define EPROTO 100
#define ETIME 101



#define EOPNOTSUPP 102


#define ENOPOLICY 103


#define ELAST 103
# 24 "/usr/include/errno.h" 2 3 4
# 57 "defs.h" 2






# 1 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include-fixed/limits.h" 1 3 4
# 30 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include-fixed/limits.h" 3 4
#define _GCC_LIMITS_H_ 



# 1 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include-fixed/syslimits.h" 1 3 4





#define _GCC_NEXT_LIMITS_H 
# 1 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include-fixed/limits.h" 1 3 4
# 168 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include-fixed/limits.h" 3 4
# 1 "/usr/include/limits.h" 1 3 4
# 61 "/usr/include/limits.h" 3 4
#define _LIMITS_H_ 


# 1 "/usr/include/machine/limits.h" 1 3 4







# 1 "/usr/include/i386/limits.h" 1 3 4
# 37 "/usr/include/i386/limits.h" 3 4
#define _I386_LIMITS_H_ 


# 1 "/usr/include/i386/_limits.h" 1 3 4
# 23 "/usr/include/i386/_limits.h" 3 4
#define _I386__LIMITS_H_ 

#define __DARWIN_CLK_TCK 100
# 41 "/usr/include/i386/limits.h" 2 3 4

#define CHAR_BIT 8
#define MB_LEN_MAX 6


#define CLK_TCK __DARWIN_CLK_TCK
# 59 "/usr/include/i386/limits.h" 3 4
#define SCHAR_MAX 127
#define SCHAR_MIN (-128)

#define UCHAR_MAX 255
#define CHAR_MAX 127
#define CHAR_MIN (-128)

#define USHRT_MAX 65535
#define SHRT_MAX 32767
#define SHRT_MIN (-32768)

#define UINT_MAX 0xffffffff
#define INT_MAX 2147483647
#define INT_MIN (-2147483647-1)






#define ULONG_MAX 0xffffffffUL
#define LONG_MAX 2147483647L
#define LONG_MIN (-2147483647L-1)


#define ULLONG_MAX 0xffffffffffffffffULL
#define LLONG_MAX 0x7fffffffffffffffLL
#define LLONG_MIN (-0x7fffffffffffffffLL-1)





#define LONG_BIT 32

#define SSIZE_MAX LONG_MAX
#define WORD_BIT 32


#define SIZE_T_MAX ULONG_MAX

#define UQUAD_MAX ULLONG_MAX
#define QUAD_MAX LLONG_MAX
#define QUAD_MIN LLONG_MIN
# 9 "/usr/include/machine/limits.h" 2 3 4
# 65 "/usr/include/limits.h" 2 3 4
# 1 "/usr/include/sys/syslimits.h" 1 3 4
# 66 "/usr/include/sys/syslimits.h" 3 4
#define _SYS_SYSLIMITS_H_ 
# 75 "/usr/include/sys/syslimits.h" 3 4
#define ARG_MAX (256 * 1024)
#define CHILD_MAX 266

#define GID_MAX 2147483647U

#define LINK_MAX 32767
#define MAX_CANON 1024
#define MAX_INPUT 1024
#define NAME_MAX 255
#define NGROUPS_MAX 16

#define UID_MAX 2147483647U

#define OPEN_MAX 10240


#define PATH_MAX 1024
#define PIPE_BUF 512

#define BC_BASE_MAX 99
#define BC_DIM_MAX 2048
#define BC_SCALE_MAX 99
#define BC_STRING_MAX 1000
#define CHARCLASS_NAME_MAX 14
#define COLL_WEIGHTS_MAX 2
#define EQUIV_CLASS_MAX 2
#define EXPR_NEST_MAX 32
#define LINE_MAX 2048
#define RE_DUP_MAX 255


#define NZERO 20
# 66 "/usr/include/limits.h" 2 3 4


#define _POSIX_AIO_LISTIO_MAX 2
#define _POSIX_AIO_MAX 1
#define _POSIX_DELAYTIMER_MAX 32
#define _POSIX_HOST_NAME_MAX 255
#define _POSIX_LOGIN_NAME_MAX 9
#define _POSIX_MQ_OPEN_MAX 8
#define _POSIX_MQ_PRIO_MAX 32

#define _POSIX_ARG_MAX 4096
#define _POSIX_CHILD_MAX 25
#define _POSIX_LINK_MAX 8
#define _POSIX_MAX_CANON 255
#define _POSIX_MAX_INPUT 255
#define _POSIX_NAME_MAX 14
#define _POSIX_NGROUPS_MAX 8
#define _POSIX_OPEN_MAX 20
#define _POSIX_PATH_MAX 256
#define _POSIX_PIPE_BUF 512
#define _POSIX_SSIZE_MAX 32767
#define _POSIX_STREAM_MAX 8
#define _POSIX_TZNAME_MAX 6

#define _POSIX_RE_DUP_MAX 255
#define _POSIX_RTSIG_MAX 8
#define _POSIX_SEM_NSEMS_MAX 256
#define _POSIX_SEM_VALUE_MAX 32767
#define _POSIX_SIGQUEUE_MAX 32
#define _POSIX_SS_REPL_MAX 4
#define _POSIX_SYMLINK_MAX 255
#define _POSIX_SYMLOOP_MAX 8
#define _POSIX_THREAD_DESTRUCTOR_ITERATIONS 4
#define _POSIX_THREAD_KEYS_MAX 128
#define _POSIX_THREAD_THREADS_MAX 64
#define _POSIX_TIMER_MAX 32
#define _POSIX_TRACE_EVENT_NAME_MAX 30
#define _POSIX_TRACE_NAME_MAX 8
#define _POSIX_TRACE_SYS_MAX 8
#define _POSIX_TRACE_USER_EVENT_MAX 32
#define _POSIX_TTY_NAME_MAX 9

#define _POSIX2_BC_BASE_MAX 99
#define _POSIX2_BC_DIM_MAX 2048
#define _POSIX2_BC_SCALE_MAX 99
#define _POSIX2_BC_STRING_MAX 1000
#define _POSIX2_CHARCLASS_NAME_MAX 14
#define _POSIX2_COLL_WEIGHTS_MAX 2
#define _POSIX2_EQUIV_CLASS_MAX 2
#define _POSIX2_EXPR_NEST_MAX 32
#define _POSIX2_LINE_MAX 2048
#define _POSIX2_RE_DUP_MAX 255

#define PTHREAD_STACK_MIN 8192
#define PTHREAD_DESTRUCTOR_ITERATIONS 4
#define PTHREAD_KEYS_MAX 512


#define PASS_MAX 128


#define NL_ARGMAX 9
#define NL_LANGMAX 14
#define NL_MSGMAX 32767
#define NL_NMAX 1
#define NL_SETMAX 255
#define NL_TEXTMAX 2048

#define _XOPEN_IOV_MAX 16
#define IOV_MAX 1024
#define _XOPEN_NAME_MAX 255
#define _XOPEN_PATH_MAX 1024
# 169 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include-fixed/limits.h" 2 3 4
# 8 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include-fixed/syslimits.h" 2 3 4
#undef _GCC_NEXT_LIMITS_H
# 35 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include-fixed/limits.h" 2 3 4
# 60 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include-fixed/limits.h" 3 4
#define _LIMITS_H___ 


#undef CHAR_BIT
#define CHAR_BIT __CHAR_BIT__







#undef SCHAR_MIN
#define SCHAR_MIN (-SCHAR_MAX - 1)
#undef SCHAR_MAX
#define SCHAR_MAX __SCHAR_MAX__


#undef UCHAR_MAX



#define UCHAR_MAX (SCHAR_MAX * 2 + 1)
# 96 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include-fixed/limits.h" 3 4
#undef CHAR_MIN
#define CHAR_MIN SCHAR_MIN
#undef CHAR_MAX
#define CHAR_MAX SCHAR_MAX



#undef SHRT_MIN
#define SHRT_MIN (-SHRT_MAX - 1)
#undef SHRT_MAX
#define SHRT_MAX __SHRT_MAX__


#undef USHRT_MAX



#define USHRT_MAX (SHRT_MAX * 2 + 1)



#undef INT_MIN
#define INT_MIN (-INT_MAX - 1)
#undef INT_MAX
#define INT_MAX __INT_MAX__


#undef UINT_MAX
#define UINT_MAX (INT_MAX * 2U + 1U)



#undef LONG_MIN
#define LONG_MIN (-LONG_MAX - 1L)
#undef LONG_MAX
#define LONG_MAX __LONG_MAX__


#undef ULONG_MAX
#define ULONG_MAX (LONG_MAX * 2UL + 1UL)
# 151 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include-fixed/limits.h" 3 4
#undef LONG_LONG_MIN
#define LONG_LONG_MIN (-LONG_LONG_MAX - 1LL)
#undef LONG_LONG_MAX
#define LONG_LONG_MAX __LONG_LONG_MAX__


#undef ULONG_LONG_MAX
#define ULONG_LONG_MAX (LONG_LONG_MAX * 2ULL + 1ULL)
# 64 "defs.h" 2






# 1 "/usr/include/string.h" 1 3 4
# 59 "/usr/include/string.h" 3 4
#define _STRING_H_ 
# 80 "/usr/include/string.h" 3 4
extern "C" {
void *memchr(const void *, int, size_t);
int memcmp(const void *, const void *, size_t);
void *memcpy(void *, const void *, size_t);
void *memmove(void *, const void *, size_t);
void *memset(void *, int, size_t);

char *stpcpy(char *, const char *);
char *strcasestr(const char *, const char *);

char *strcat(char *, const char *);
char *strchr(const char *, int);
int strcmp(const char *, const char *);
int strcoll(const char *, const char *);
char *strcpy(char *, const char *);
size_t strcspn(const char *, const char *);
char *strerror(int) __asm("_" "strerror" "$UNIX2003");
int strerror_r(int, char *, size_t);
size_t strlen(const char *);
char *strncat(char *, const char *, size_t);
int strncmp(const char *, const char *, size_t);
char *strncpy(char *, const char *, size_t);

char *strnstr(const char *, const char *, size_t);

char *strpbrk(const char *, const char *);
char *strrchr(const char *, int);
size_t strspn(const char *, const char *);
char *strstr(const char *, const char *);
char *strtok(char *, const char *);
size_t strxfrm(char *, const char *, size_t);



void *memccpy(void *, const void *, int, size_t);
char *strtok_r(char *, const char *, char **);
char *strdup(const char *);

int bcmp(const void *, const void *, size_t);
void bcopy(const void *, void *, size_t);
void bzero(void *, size_t);
int ffs(int);
int ffsl(long);
int fls(int);
int flsl(long);
char *index(const char *, int);
void memset_pattern4(void *, const void *, size_t);
void memset_pattern8(void *, const void *, size_t);
void memset_pattern16(void *, const void *, size_t);
char *rindex(const char *, int);
int strcasecmp(const char *, const char *);
size_t strlcat(char *, const char *, size_t);
size_t strlcpy(char *, const char *, size_t);
void strmode(int, char *);
int strncasecmp(const char *, const char *, size_t);
char *strsep(char **, const char *);
char *strsignal(int sig);
void swab(const void * , void * , ssize_t);


}
# 71 "defs.h" 2
# 81 "defs.h"
# 1 "/usr/include/regex.h" 1 3 4
# 63 "/usr/include/regex.h" 3 4
#define _REGEX_H_ 




typedef __darwin_off_t regoff_t;






typedef struct {
 int re_magic;
 size_t re_nsub;
 const char *re_endp;
 struct re_guts *re_g;
} regex_t;

typedef struct {
 regoff_t rm_so;
 regoff_t rm_eo;
} regmatch_t;



#define REG_BASIC 0000

#define REG_EXTENDED 0001
#define REG_ICASE 0002
#define REG_NOSUB 0004
#define REG_NEWLINE 0010

#define REG_NOSPEC 0020
#define REG_PEND 0040
#define REG_DUMP 0200



#define REG_ENOSYS (-1)
#define REG_NOMATCH 1
#define REG_BADPAT 2
#define REG_ECOLLATE 3
#define REG_ECTYPE 4
#define REG_EESCAPE 5
#define REG_ESUBREG 6
#define REG_EBRACK 7
#define REG_EPAREN 8
#define REG_EBRACE 9
#define REG_BADBR 10
#define REG_ERANGE 11
#define REG_ESPACE 12
#define REG_BADRPT 13

#define REG_EMPTY 14
#define REG_ASSERT 15
#define REG_INVARG 16
#define REG_ILLSEQ 17
#define REG_ATOI 255
#define REG_ITOA 0400



#define REG_NOTBOL 00001
#define REG_NOTEOL 00002

#define REG_STARTEND 00004
#define REG_TRACE 00400
#define REG_LARGE 01000
#define REG_BACKR 02000


extern "C" {
int regcomp(regex_t * , const char * , int) __asm("_" "regcomp" "$UNIX2003");
size_t regerror(int, const regex_t * , char * , size_t);




int regexec(const regex_t * , const char * , size_t,
     regmatch_t __pmatch[ ], int);
void regfree(regex_t *);
}
# 82 "defs.h" 2







# 1 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/stddef.h" 1 3 4
# 39 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/stddef.h" 3 4
#define _STDDEF_H 
#define _STDDEF_H_ 

#define _ANSI_STDDEF_H 
# 137 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/stddef.h" 3 4
#define _PTRDIFF_T 
#define _T_PTRDIFF_ 
#define _T_PTRDIFF 
#define __PTRDIFF_T 
#define _PTRDIFF_T_ 
#define _BSD_PTRDIFF_T_ 
#define ___int_ptrdiff_t_h 
#define _GCC_PTRDIFF_T 
#define _PTRDIFF_T_DECLARED 



typedef int ptrdiff_t;
# 161 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/stddef.h" 3 4
#undef __need_ptrdiff_t
# 238 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/stddef.h" 3 4
#undef __need_size_t
# 267 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/stddef.h" 3 4
#define __wchar_t__ 
#define __WCHAR_T__ 
#define _WCHAR_T 
#define _T_WCHAR_ 
#define _T_WCHAR 
#define __WCHAR_T 
#define _WCHAR_T_ 
#define _BSD_WCHAR_T_ 
#define _WCHAR_T_DEFINED_ 
#define _WCHAR_T_DEFINED 
#define _WCHAR_T_H 
#define ___int_wchar_t_h 
#define __INT_WCHAR_T_H 
#define _GCC_WCHAR_T 
#define _WCHAR_T_DECLARED 
# 294 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/stddef.h" 3 4
#undef _BSD_WCHAR_T_
# 347 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/stddef.h" 3 4
#undef __need_wchar_t
# 401 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/stddef.h" 3 4
#undef NULL

#define NULL __null
# 412 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/stddef.h" 3 4
#undef __need_NULL




#define offsetof(TYPE,MEMBER) __builtin_offsetof (TYPE, MEMBER)
# 90 "defs.h" 2







# 1 "/usr/include/unistd.h" 1 3 4
# 69 "/usr/include/unistd.h" 3 4
#define _UNISTD_H_ 


# 1 "/usr/include/sys/unistd.h" 1 3 4
# 65 "/usr/include/sys/unistd.h" 3 4
#define _SYS_UNISTD_H_ 
# 79 "/usr/include/sys/unistd.h" 3 4
#define _POSIX_VERSION 200112L
#define _POSIX2_VERSION 200112L




#define _POSIX_VDISABLE ((unsigned char)'\377')


#define _POSIX_THREAD_KEYS_MAX 128


#define F_OK 0
#define X_OK (1<<0)
#define W_OK (1<<1)
#define R_OK (1<<2)







#define _READ_OK (1<<9)
#define _WRITE_OK (1<<10)
#define _EXECUTE_OK (1<<11)
#define _DELETE_OK (1<<12)
#define _APPEND_OK (1<<13)
#define _RMFILE_OK (1<<14)
#define _RATTR_OK (1<<15)
#define _WATTR_OK (1<<16)
#define _REXT_OK (1<<17)
#define _WEXT_OK (1<<18)
#define _RPERM_OK (1<<19)
#define _WPERM_OK (1<<20)
#define _CHOWN_OK (1<<21)

#define _ACCESS_EXTENDED_MASK (_READ_OK | _WRITE_OK | _EXECUTE_OK | _DELETE_OK | _APPEND_OK | _RMFILE_OK | _REXT_OK | _WEXT_OK | _RATTR_OK | _WATTR_OK | _RPERM_OK | _WPERM_OK | _CHOWN_OK)
# 132 "/usr/include/sys/unistd.h" 3 4
#define L_SET SEEK_SET
#define L_INCR SEEK_CUR
#define L_XTND SEEK_END



struct accessx_descriptor {
 unsigned int ad_name_offset;
 int ad_flags;
 int ad_pad[2];
};
#define ACCESSX_MAX_DESCRIPTORS 100
#define ACCESSX_MAX_TABLESIZE (16 * 1024)



#define _PC_LINK_MAX 1
#define _PC_MAX_CANON 2
#define _PC_MAX_INPUT 3
#define _PC_NAME_MAX 4
#define _PC_PATH_MAX 5
#define _PC_PIPE_BUF 6
#define _PC_CHOWN_RESTRICTED 7
#define _PC_NO_TRUNC 8
#define _PC_VDISABLE 9


#define _PC_NAME_CHARS_MAX 10
#define _PC_CASE_SENSITIVE 11
#define _PC_CASE_PRESERVING 12
#define _PC_EXTENDED_SECURITY_NP 13
#define _PC_AUTH_OPAQUE_NP 14


#define _PC_2_SYMLINKS 15
#define _PC_ALLOC_SIZE_MIN 16
#define _PC_ASYNC_IO 17
#define _PC_FILESIZEBITS 18
#define _PC_PRIO_IO 19
#define _PC_REC_INCR_XFER_SIZE 20
#define _PC_REC_MAX_XFER_SIZE 21
#define _PC_REC_MIN_XFER_SIZE 22
#define _PC_REC_XFER_ALIGN 23
#define _PC_SYMLINK_MAX 24
#define _PC_SYNC_IO 25


#define _CS_PATH 1
# 73 "/usr/include/unistd.h" 2 3 4
# 132 "/usr/include/unistd.h" 3 4
#define _UUID_T 
typedef __darwin_uuid_t uuid_t;



#define STDIN_FILENO 0
#define STDOUT_FILENO 1
#define STDERR_FILENO 2







#define _XOPEN_VERSION 600
#define _XOPEN_XCU_VERSION 4



#define _POSIX_ADVISORY_INFO (-1)
#define _POSIX_ASYNCHRONOUS_IO (-1)
#define _POSIX_BARRIERS (-1)
#define _POSIX_CHOWN_RESTRICTED 200112L
#define _POSIX_CLOCK_SELECTION (-1)
#define _POSIX_CPUTIME (-1)
#define _POSIX_FSYNC 200112L
#define _POSIX_IPV6 200112L
#define _POSIX_JOB_CONTROL 200112L
#define _POSIX_MAPPED_FILES 200112L
#define _POSIX_MEMLOCK (-1)
#define _POSIX_MEMLOCK_RANGE (-1)
#define _POSIX_MEMORY_PROTECTION 200112L
#define _POSIX_MESSAGE_PASSING (-1)
#define _POSIX_MONOTONIC_CLOCK (-1)
#define _POSIX_NO_TRUNC 200112L
#define _POSIX_PRIORITIZED_IO (-1)
#define _POSIX_PRIORITY_SCHEDULING (-1)
#define _POSIX_RAW_SOCKETS (-1)
#define _POSIX_READER_WRITER_LOCKS 200112L
#define _POSIX_REALTIME_SIGNALS (-1)
#define _POSIX_REGEXP 200112L
#define _POSIX_SAVED_IDS 200112L
#define _POSIX_SEMAPHORES (-1)
#define _POSIX_SHARED_MEMORY_OBJECTS (-1)
#define _POSIX_SHELL 200112L
#define _POSIX_SPAWN (-1)
#define _POSIX_SPIN_LOCKS (-1)
#define _POSIX_SPORADIC_SERVER (-1)
#define _POSIX_SYNCHRONIZED_IO (-1)
#define _POSIX_THREAD_ATTR_STACKADDR 200112L
#define _POSIX_THREAD_ATTR_STACKSIZE 200112L
#define _POSIX_THREAD_CPUTIME (-1)
#define _POSIX_THREAD_PRIO_INHERIT (-1)
#define _POSIX_THREAD_PRIO_PROTECT (-1)
#define _POSIX_THREAD_PRIORITY_SCHEDULING (-1)
#define _POSIX_THREAD_PROCESS_SHARED 200112L
#define _POSIX_THREAD_SAFE_FUNCTIONS 200112L
#define _POSIX_THREAD_SPORADIC_SERVER (-1)
#define _POSIX_THREADS 200112L
#define _POSIX_TIMEOUTS (-1)
#define _POSIX_TIMERS (-1)
#define _POSIX_TRACE (-1)
#define _POSIX_TRACE_EVENT_FILTER (-1)
#define _POSIX_TRACE_INHERIT (-1)
#define _POSIX_TRACE_LOG (-1)
#define _POSIX_TYPED_MEMORY_OBJECTS (-1)




#define _POSIX2_C_BIND 200112L
#define _POSIX2_C_DEV 200112L
#define _POSIX2_CHAR_TERM 200112L
#define _POSIX2_FORT_DEV (-1)
#define _POSIX2_FORT_RUN 200112L
#define _POSIX2_LOCALEDEF 200112L
#define _POSIX2_PBS (-1)
#define _POSIX2_PBS_ACCOUNTING (-1)
#define _POSIX2_PBS_CHECKPOINT (-1)
#define _POSIX2_PBS_LOCATE (-1)
#define _POSIX2_PBS_MESSAGE (-1)
#define _POSIX2_PBS_TRACK (-1)
#define _POSIX2_SW_DEV 200112L
#define _POSIX2_UPE 200112L

#define _V6_ILP32_OFF32 (-1)
#define _V6_ILP32_OFFBIG (1)
#define _V6_LP64_OFF64 (-1)
#define _V6_LPBIG_OFFBIG (-1)

#define _XBS5_ILP32_OFF32 _V6_ILP32_OFF32
#define _XBS5_ILP32_OFFBIG _V6_ILP32_OFFBIG
#define _XBS5_LP64_OFF64 _V6_LP64_OFF64
#define _XBS5_LPBIG_OFFBIG _V6_LPBIG_OFFBIG

#define _XOPEN_CRYPT (1)
#define _XOPEN_ENH_I18N (1)
#define _XOPEN_LEGACY (-1)
#define _XOPEN_REALTIME (-1)
#define _XOPEN_REALTIME_THREADS (-1)
#define _XOPEN_SHM (1)
#define _XOPEN_STREAMS (-1)
#define _XOPEN_UNIX (1)


#define F_ULOCK 0
#define F_LOCK 1
#define F_TLOCK 2
#define F_TEST 3


#define _SC_ARG_MAX 1
#define _SC_CHILD_MAX 2
#define _SC_CLK_TCK 3
#define _SC_NGROUPS_MAX 4
#define _SC_OPEN_MAX 5
#define _SC_JOB_CONTROL 6
#define _SC_SAVED_IDS 7
#define _SC_VERSION 8
#define _SC_BC_BASE_MAX 9
#define _SC_BC_DIM_MAX 10
#define _SC_BC_SCALE_MAX 11
#define _SC_BC_STRING_MAX 12
#define _SC_COLL_WEIGHTS_MAX 13
#define _SC_EXPR_NEST_MAX 14
#define _SC_LINE_MAX 15
#define _SC_RE_DUP_MAX 16
#define _SC_2_VERSION 17
#define _SC_2_C_BIND 18
#define _SC_2_C_DEV 19
#define _SC_2_CHAR_TERM 20
#define _SC_2_FORT_DEV 21
#define _SC_2_FORT_RUN 22
#define _SC_2_LOCALEDEF 23
#define _SC_2_SW_DEV 24
#define _SC_2_UPE 25
#define _SC_STREAM_MAX 26
#define _SC_TZNAME_MAX 27
#define _SC_ASYNCHRONOUS_IO 28
#define _SC_PAGESIZE 29
#define _SC_MEMLOCK 30
#define _SC_MEMLOCK_RANGE 31
#define _SC_MEMORY_PROTECTION 32
#define _SC_MESSAGE_PASSING 33
#define _SC_PRIORITIZED_IO 34
#define _SC_PRIORITY_SCHEDULING 35
#define _SC_REALTIME_SIGNALS 36
#define _SC_SEMAPHORES 37
#define _SC_FSYNC 38
#define _SC_SHARED_MEMORY_OBJECTS 39
#define _SC_SYNCHRONIZED_IO 40
#define _SC_TIMERS 41
#define _SC_AIO_LISTIO_MAX 42
#define _SC_AIO_MAX 43
#define _SC_AIO_PRIO_DELTA_MAX 44
#define _SC_DELAYTIMER_MAX 45
#define _SC_MQ_OPEN_MAX 46
#define _SC_MAPPED_FILES 47
#define _SC_RTSIG_MAX 48
#define _SC_SEM_NSEMS_MAX 49
#define _SC_SEM_VALUE_MAX 50
#define _SC_SIGQUEUE_MAX 51
#define _SC_TIMER_MAX 52

#define _SC_NPROCESSORS_CONF 57
#define _SC_NPROCESSORS_ONLN 58

#define _SC_2_PBS 59
#define _SC_2_PBS_ACCOUNTING 60
#define _SC_2_PBS_CHECKPOINT 61
#define _SC_2_PBS_LOCATE 62
#define _SC_2_PBS_MESSAGE 63
#define _SC_2_PBS_TRACK 64
#define _SC_ADVISORY_INFO 65
#define _SC_BARRIERS 66
#define _SC_CLOCK_SELECTION 67
#define _SC_CPUTIME 68
#define _SC_FILE_LOCKING 69
#define _SC_GETGR_R_SIZE_MAX 70
#define _SC_GETPW_R_SIZE_MAX 71
#define _SC_HOST_NAME_MAX 72
#define _SC_LOGIN_NAME_MAX 73
#define _SC_MONOTONIC_CLOCK 74
#define _SC_MQ_PRIO_MAX 75
#define _SC_READER_WRITER_LOCKS 76
#define _SC_REGEXP 77
#define _SC_SHELL 78
#define _SC_SPAWN 79
#define _SC_SPIN_LOCKS 80
#define _SC_SPORADIC_SERVER 81
#define _SC_THREAD_ATTR_STACKADDR 82
#define _SC_THREAD_ATTR_STACKSIZE 83
#define _SC_THREAD_CPUTIME 84
#define _SC_THREAD_DESTRUCTOR_ITERATIONS 85
#define _SC_THREAD_KEYS_MAX 86
#define _SC_THREAD_PRIO_INHERIT 87
#define _SC_THREAD_PRIO_PROTECT 88
#define _SC_THREAD_PRIORITY_SCHEDULING 89
#define _SC_THREAD_PROCESS_SHARED 90
#define _SC_THREAD_SAFE_FUNCTIONS 91
#define _SC_THREAD_SPORADIC_SERVER 92
#define _SC_THREAD_STACK_MIN 93
#define _SC_THREAD_THREADS_MAX 94
#define _SC_TIMEOUTS 95
#define _SC_THREADS 96
#define _SC_TRACE 97
#define _SC_TRACE_EVENT_FILTER 98
#define _SC_TRACE_INHERIT 99
#define _SC_TRACE_LOG 100
#define _SC_TTY_NAME_MAX 101
#define _SC_TYPED_MEMORY_OBJECTS 102
#define _SC_V6_ILP32_OFF32 103
#define _SC_V6_ILP32_OFFBIG 104
#define _SC_V6_LP64_OFF64 105
#define _SC_V6_LPBIG_OFFBIG 106
#define _SC_IPV6 118
#define _SC_RAW_SOCKETS 119
#define _SC_SYMLOOP_MAX 120
#define _SC_ATEXIT_MAX 107
#define _SC_IOV_MAX 56
#define _SC_PAGE_SIZE _SC_PAGESIZE
#define _SC_XOPEN_CRYPT 108
#define _SC_XOPEN_ENH_I18N 109
#define _SC_XOPEN_LEGACY 110
#define _SC_XOPEN_REALTIME 111
#define _SC_XOPEN_REALTIME_THREADS 112
#define _SC_XOPEN_SHM 113
#define _SC_XOPEN_STREAMS 114
#define _SC_XOPEN_UNIX 115
#define _SC_XOPEN_VERSION 116
#define _SC_XOPEN_XCU_VERSION 121
#define _SC_XBS5_ILP32_OFF32 122
#define _SC_XBS5_ILP32_OFFBIG 123
#define _SC_XBS5_LP64_OFF64 124
#define _SC_XBS5_LPBIG_OFFBIG 125
#define _SC_SS_REPL_MAX 126
#define _SC_TRACE_EVENT_NAME_MAX 127
#define _SC_TRACE_NAME_MAX 128
#define _SC_TRACE_SYS_MAX 129
#define _SC_TRACE_USER_EVENT_MAX 130
#define _SC_PASS_MAX 131




#define _CS_POSIX_V6_ILP32_OFF32_CFLAGS 2
#define _CS_POSIX_V6_ILP32_OFF32_LDFLAGS 3
#define _CS_POSIX_V6_ILP32_OFF32_LIBS 4
#define _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS 5
#define _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS 6
#define _CS_POSIX_V6_ILP32_OFFBIG_LIBS 7
#define _CS_POSIX_V6_LP64_OFF64_CFLAGS 8
#define _CS_POSIX_V6_LP64_OFF64_LDFLAGS 9
#define _CS_POSIX_V6_LP64_OFF64_LIBS 10
#define _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS 11
#define _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS 12
#define _CS_POSIX_V6_LPBIG_OFFBIG_LIBS 13
#define _CS_POSIX_V6_WIDTH_RESTRICTED_ENVS 14


#define _CS_XBS5_ILP32_OFF32_CFLAGS 20
#define _CS_XBS5_ILP32_OFF32_LDFLAGS 21
#define _CS_XBS5_ILP32_OFF32_LIBS 22
#define _CS_XBS5_ILP32_OFF32_LINTFLAGS 23
#define _CS_XBS5_ILP32_OFFBIG_CFLAGS 24
#define _CS_XBS5_ILP32_OFFBIG_LDFLAGS 25
#define _CS_XBS5_ILP32_OFFBIG_LIBS 26
#define _CS_XBS5_ILP32_OFFBIG_LINTFLAGS 27
#define _CS_XBS5_LP64_OFF64_CFLAGS 28
#define _CS_XBS5_LP64_OFF64_LDFLAGS 29
#define _CS_XBS5_LP64_OFF64_LIBS 30
#define _CS_XBS5_LP64_OFF64_LINTFLAGS 31
#define _CS_XBS5_LPBIG_OFFBIG_CFLAGS 32
#define _CS_XBS5_LPBIG_OFFBIG_LDFLAGS 33
#define _CS_XBS5_LPBIG_OFFBIG_LIBS 34
#define _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS 35

#define _CS_DARWIN_USER_DIR 65536
#define _CS_DARWIN_USER_TEMP_DIR 65537
#define _CS_DARWIN_USER_CACHE_DIR 65538

extern "C" {

void _exit(int) __attribute__((__noreturn__));
int access(const char *, int);
unsigned int
  alarm(unsigned int);
int chdir(const char *);
int chown(const char *, uid_t, gid_t);
int close(int) __asm("_" "close" "$UNIX2003");
size_t confstr(int, char *, size_t) __asm("_" "confstr" "$UNIX2003");
char *crypt(const char *, const char *);
char *ctermid(char *);
int dup(int);
int dup2(int, int);

void encrypt(char *, int) __asm("_" "encrypt" "$UNIX2003");



int execl(const char *, const char *, ...);
int execle(const char *, const char *, ...);
int execlp(const char *, const char *, ...);
int execv(const char *, char * const *);
int execve(const char *, char * const *, char * const *);
int execvp(const char *, char * const *);
int fchown(int, uid_t, gid_t);
int fchdir(int);
pid_t fork(void);
long fpathconf(int, int);
int fsync(int) __asm("_" "fsync" "$UNIX2003");
int ftruncate(int, off_t);
char *getcwd(char *, size_t);
gid_t getegid(void);
uid_t geteuid(void);
gid_t getgid(void);
int getgroups(int, gid_t []);
long gethostid(void);
int gethostname(char *, size_t);
char *getlogin(void);
int getlogin_r(char *, size_t);
int getopt(int, char * const [], const char *) __asm("_" "getopt" "$UNIX2003");
pid_t getpgid(pid_t);
pid_t getpgrp(void);
pid_t getpid(void);
pid_t getppid(void);
pid_t getsid(pid_t);
uid_t getuid(void);
char *getwd(char *);
int isatty(int);
int lchown(const char *, uid_t, gid_t) __asm("_" "lchown" "$UNIX2003");
int link(const char *, const char *);
int lockf(int, int, off_t) __asm("_" "lockf" "$UNIX2003");
off_t lseek(int, off_t, int);
int nice(int) __asm("_" "nice" "$UNIX2003");
long pathconf(const char *, int);
int pause(void) __asm("_" "pause" "$UNIX2003");
int pipe(int [2]);
ssize_t pread(int, void *, size_t, off_t) __asm("_" "pread" "$UNIX2003");
ssize_t pwrite(int, const void *, size_t, off_t) __asm("_" "pwrite" "$UNIX2003");
ssize_t read(int, void *, size_t) __asm("_" "read" "$UNIX2003");
ssize_t readlink(const char * , char * , size_t);
int rmdir(const char *);
int setegid(gid_t);
int seteuid(uid_t);
int setgid(gid_t);
int setpgid(pid_t, pid_t);

pid_t setpgrp(void) __asm("_" "setpgrp" "$UNIX2003");



int setregid(gid_t, gid_t) __asm("_" "setregid" "$UNIX2003");
int setreuid(uid_t, uid_t) __asm("_" "setreuid" "$UNIX2003");
pid_t setsid(void);
int setuid(uid_t);
unsigned int
  sleep(unsigned int) __asm("_" "sleep" "$UNIX2003");
void swab(const void * , void * , ssize_t);
int symlink(const char *, const char *);
void sync(void);
long sysconf(int);
pid_t tcgetpgrp(int);
int tcsetpgrp(int, pid_t);
int truncate(const char *, off_t);
char *ttyname(int);

int ttyname_r(int, char *, size_t) __asm("_" "ttyname_r" "$UNIX2003");



useconds_t
  ualarm(useconds_t, useconds_t);
int unlink(const char *);
int usleep(useconds_t) __asm("_" "usleep" "$UNIX2003");
pid_t vfork(void);
ssize_t write(int, const void *, size_t) __asm("_" "write" "$UNIX2003");

extern char *optarg;
extern int optind, opterr, optopt;


# 1 "/usr/include/sys/select.h" 1 3 4
# 64 "/usr/include/sys/select.h" 3 4
#define _SYS_SELECT_H_ 
# 75 "/usr/include/sys/select.h" 3 4
#define __need_fd_set 
#define __need_struct_timespec 
#define __need_struct_timeval 
# 1 "/usr/include/sys/_structs.h" 1 3 4
# 85 "/usr/include/sys/_structs.h" 3 4
#undef __need_struct_timespec

#define _STRUCT_TIMESPEC struct timespec
struct timespec
{
 __darwin_time_t tv_sec;
 long tv_nsec;
};




#undef __need_struct_timeval

#define _STRUCT_TIMEVAL struct timeval
struct timeval
{
 __darwin_time_t tv_sec;
 __darwin_suseconds_t tv_usec;
};
# 165 "/usr/include/sys/_structs.h" 3 4
#undef __need_fd_set
# 79 "/usr/include/sys/select.h" 2 3 4
# 96 "/usr/include/sys/select.h" 3 4
#define _SIGSET_T 
typedef __darwin_sigset_t sigset_t;
# 134 "/usr/include/sys/select.h" 3 4
extern "C" {


int pselect(int, fd_set * , fd_set * ,
  fd_set * , const struct timespec * ,
  const sigset_t * )

  __asm("_" "pselect" "$DARWIN_EXTSN" )







  ;


# 1 "/usr/include/sys/_select.h" 1 3 4
# 37 "/usr/include/sys/_select.h" 3 4
#define _SYS__SELECT_H_ 

int select(int, fd_set * , fd_set * ,
  fd_set * , struct timeval * )

  __asm("_" "select" "$DARWIN_EXTSN" )







  ;
# 153 "/usr/include/sys/select.h" 2 3 4

}
# 516 "/usr/include/unistd.h" 2 3 4

void _Exit(int) __attribute__((__noreturn__));
int accessx_np(const struct accessx_descriptor *, size_t, int *, uid_t);
int acct(const char *);
int add_profil(char *, size_t, unsigned long, unsigned int);
void *brk(const void *);
int chroot(const char *);
void endusershell(void);
int execvP(const char *, const char *, char * const *);
char *fflagstostr(unsigned long);
int getdtablesize(void);
int getdomainname(char *, int);
int getgrouplist(const char *, int, int *, int *);
mode_t getmode(const void *, mode_t);
int getpagesize(void) __attribute__((__const__));
char *getpass(const char *);
int getpeereid(int, uid_t *, gid_t *);
int getpgid(pid_t _pid);
int getsgroups_np(int *, uuid_t);
int getsid(pid_t _pid);
char *getusershell(void);
int getwgroups_np(int *, uuid_t);
int initgroups(const char *, int);
int iruserok(unsigned long, int, const char *, const char *);
int iruserok_sa(const void *, int, int, const char *, const char *);
int issetugid(void);
char *mkdtemp(char *);
int mknod(const char *, mode_t, dev_t);
int mkstemp(char *);
int mkstemps(char *, int);
char *mktemp(char *);
int nfssvc(int, void *);
int profil(char *, size_t, unsigned long, unsigned int);
int pthread_setugid_np(uid_t, gid_t);
int pthread_getugid_np( uid_t *, gid_t *);
int rcmd(char **, int, const char *, const char *, const char *, int *);
int rcmd_af(char **, int, const char *, const char *, const char *, int *,
  int);
int reboot(int);
int revoke(const char *);
int rresvport(int *);
int rresvport_af(int *, int);
int ruserok(const char *, int, const char *, const char *);
void *sbrk(int);
int setdomainname(const char *, int);
int setgroups(int, const gid_t *);
void sethostid(long);
int sethostname(const char *, int);

void setkey(const char *) __asm("_" "setkey" "$UNIX2003");



int setlogin(const char *);
void *setmode(const char *);
int setrgid(gid_t);
int setruid(uid_t);
int setsgroups_np(int, const uuid_t);
void setusershell(void);
int setwgroups_np(int, const uuid_t);
int strtofflags(char **, unsigned long *, unsigned long *);
int swapon(const char *);
int syscall(int, ...);
int ttyslot(void);
int undelete(const char *);
int unwhiteout(const char *);
void *valloc(size_t);

extern char *suboptarg;
int getsubopt(char **, char * const *, char **);
# 597 "/usr/include/unistd.h" 3 4
int getattrlist(const char*,void*,void*,size_t,unsigned long) __asm("_" "getattrlist" "$UNIX2003");
int setattrlist(const char*,void*,void*,size_t,unsigned long) __asm("_" "setattrlist" "$UNIX2003");
int exchangedata(const char*,const char*,unsigned long);
int getdirentriesattr(int,void*,void*,size_t,unsigned long*,unsigned long*,unsigned long*,unsigned long);
int searchfs(const char*,void*,void*,unsigned long,unsigned long,void*);

int fsctl(const char *,unsigned long,void*,unsigned long);


extern int optreset;


}
# 98 "defs.h" 2
# 111 "defs.h"
# 1 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/stdint.h" 1 3 4
# 9 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/stdint.h" 3 4
# 1 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include-fixed/stdint.h" 1 3 4
# 16 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include-fixed/stdint.h" 3 4
#define _STDINT_H_ 




#define __WORDSIZE 32
# 48 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include-fixed/stdint.h" 3 4
#define _UINT8_T 
typedef unsigned char uint8_t;



#define _UINT16_T 
typedef unsigned short uint16_t;



#define _UINT32_T 
typedef unsigned int uint32_t;



#define _UINT64_T 
typedef unsigned long long uint64_t;



typedef int8_t int_least8_t;
typedef int16_t int_least16_t;
typedef int32_t int_least32_t;
typedef int64_t int_least64_t;
typedef uint8_t uint_least8_t;
typedef uint16_t uint_least16_t;
typedef uint32_t uint_least32_t;
typedef uint64_t uint_least64_t;



typedef int8_t int_fast8_t;
typedef int16_t int_fast16_t;
typedef int32_t int_fast32_t;
typedef int64_t int_fast64_t;
typedef uint8_t uint_fast8_t;
typedef uint16_t uint_fast16_t;
typedef uint32_t uint_fast32_t;
typedef uint64_t uint_fast64_t;
# 104 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include-fixed/stdint.h" 3 4
#define _INTMAX_T 

typedef long long int intmax_t;






#define _UINTMAX_T 

typedef long long unsigned int uintmax_t;
# 10 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/stdint.h" 2 3 4



#define _GCC_WRAP_STDINT_H 
# 112 "defs.h" 2
# 120 "defs.h"
# 1 "./../include/ansidecl.h" 1
# 115 "./../include/ansidecl.h"
#define _ANSIDECL_H 1



# 118 "./../include/ansidecl.h"
extern "C" {
# 147 "./../include/ansidecl.h"
#define GCC_VERSION (__GNUC__ * 1000 + __GNUC_MINOR__)
# 158 "./../include/ansidecl.h"
#define ANSI_PROTOTYPES 1
#define PTR void *
#define PTRCONST void *const
#define LONG_DOUBLE long double




#define PARAMS(ARGS) ARGS


#define VPARAMS(ARGS) ARGS
#define VA_START(VA_LIST,VAR) va_start(VA_LIST, VAR)





#define VA_OPEN(AP,VAR) { va_list AP; va_start(AP, VAR); { struct Qdmy
#define VA_CLOSE(AP) } va_end(AP); }
#define VA_FIXEDARG(AP,T,N) struct Qdmy

#undef const
#undef volatile
#undef signed



#undef inline




#define inline __inline__







#define CONST const
#define VOLATILE volatile
#define SIGNED signed

#define PROTO(type,name,arglist) type name arglist
#define EXFUN(name,proto) name proto
#define DEFUN(name,arglist,args) name(args)
#define DEFUN_VOID(name) name(void)
#define AND ,
#define DOTS , ...
#define NOARGS void
# 264 "./../include/ansidecl.h"
#define ATTRIBUTE_MALLOC __attribute__((__malloc__))
# 281 "./../include/ansidecl.h"
#define ATTRIBUTE_UNUSED_LABEL ATTRIBUTE_UNUSED ;
# 291 "./../include/ansidecl.h"
#define ATTRIBUTE_DEPRECATED __attribute__((__deprecated__))
# 300 "./../include/ansidecl.h"
#define ATTRIBUTE_DEPRECATED_FOR(f) __attribute__((__deprecated__("Use '" #f "' instead")))
# 315 "./../include/ansidecl.h"
#define ATTRIBUTE_GNU_INLINE 
# 324 "./../include/ansidecl.h"
#define ATTRIBUTE_UNUSED __attribute__((__unused__))
# 333 "./../include/ansidecl.h"
#define ATTRIBUTE_USED __attribute__((__used__))
# 342 "./../include/ansidecl.h"
#define ARG_UNUSED(NAME) NAME ATTRIBUTE_UNUSED






#define ATTRIBUTE_NOCLONE __attribute__((__noclone__))






#define ATTRIBUTE_NOINLINE __attribute__((__noinline__))



#define ATTRIBUTE_NORETURN __attribute__((__noreturn__))





#define ATTRIBUTE_NONNULL(m) __attribute__((__nonnull__(m)))
# 375 "./../include/ansidecl.h"
#define ATTRIBUTE_PURE __attribute__((__pure__))
# 384 "./../include/ansidecl.h"
#define ATTRIBUTE_CONST __attribute__((__const__))
# 395 "./../include/ansidecl.h"
#define ATTRIBUTE_PRINTF(m,n) __attribute__((__format__(__printf__, m, n))) ATTRIBUTE_NONNULL(m)
#define ATTRIBUTE_PRINTF_1 ATTRIBUTE_PRINTF(1, 2)
#define ATTRIBUTE_PRINTF_2 ATTRIBUTE_PRINTF(2, 3)
#define ATTRIBUTE_PRINTF_3 ATTRIBUTE_PRINTF(3, 4)
#define ATTRIBUTE_PRINTF_4 ATTRIBUTE_PRINTF(4, 5)
#define ATTRIBUTE_PRINTF_5 ATTRIBUTE_PRINTF(5, 6)







#define ATTRIBUTE_FPTR_PRINTF(m,n) ATTRIBUTE_PRINTF(m, n)



#define ATTRIBUTE_FPTR_PRINTF_1 ATTRIBUTE_FPTR_PRINTF(1, 2)
#define ATTRIBUTE_FPTR_PRINTF_2 ATTRIBUTE_FPTR_PRINTF(2, 3)
#define ATTRIBUTE_FPTR_PRINTF_3 ATTRIBUTE_FPTR_PRINTF(3, 4)
#define ATTRIBUTE_FPTR_PRINTF_4 ATTRIBUTE_FPTR_PRINTF(4, 5)
#define ATTRIBUTE_FPTR_PRINTF_5 ATTRIBUTE_FPTR_PRINTF(5, 6)






#define ATTRIBUTE_NULL_PRINTF(m,n) __attribute__((__format__(__printf__, m, n)))



#define ATTRIBUTE_NULL_PRINTF_1 ATTRIBUTE_NULL_PRINTF(1, 2)
#define ATTRIBUTE_NULL_PRINTF_2 ATTRIBUTE_NULL_PRINTF(2, 3)
#define ATTRIBUTE_NULL_PRINTF_3 ATTRIBUTE_NULL_PRINTF(3, 4)
#define ATTRIBUTE_NULL_PRINTF_4 ATTRIBUTE_NULL_PRINTF(4, 5)
#define ATTRIBUTE_NULL_PRINTF_5 ATTRIBUTE_NULL_PRINTF(5, 6)





#define ATTRIBUTE_SENTINEL __attribute__((__sentinel__))
# 446 "./../include/ansidecl.h"
#define ATTRIBUTE_ALIGNED_ALIGNOF(m) __attribute__((__aligned__(__alignof__(m))))
# 455 "./../include/ansidecl.h"
#define ATTRIBUTE_PACKED __attribute__((packed))





#define ATTRIBUTE_COLD __attribute__((__cold__))






#define ATTRIBUTE_HOT __attribute__((__hot__))
# 477 "./../include/ansidecl.h"
#define ATTRIBUTE_NO_SANITIZE_UNDEFINED __attribute__((no_sanitize_undefined))







#define ATTRIBUTE_W_U_R __attribute__((warn_unused_result))
# 501 "./../include/ansidecl.h"
#define EXPORTED_CONST extern const







#define ENUM_BITFIELD(TYPE) enum TYPE
# 532 "./../include/ansidecl.h"
}
# 121 "defs.h" 2

# 1 "gdb_locale.h" 1
# 22 "gdb_locale.h"
#define GDB_LOCALE_H 


# 1 "config.h" 1
# 26 "gdb_locale.h" 2







# 1 "/usr/include/locale.h" 1 3 4
# 38 "/usr/include/locale.h" 3 4
#define _LOCALE_H_ 

# 1 "/usr/include/_locale.h" 1 3 4
# 38 "/usr/include/_locale.h" 3 4
#define __LOCALE_H_ 





# 43 "/usr/include/_locale.h" 3 4
struct lconv {
 char *decimal_point;
 char *thousands_sep;
 char *grouping;
 char *int_curr_symbol;
 char *currency_symbol;
 char *mon_decimal_point;
 char *mon_thousands_sep;
 char *mon_grouping;
 char *positive_sign;
 char *negative_sign;
 char int_frac_digits;
 char frac_digits;
 char p_cs_precedes;
 char p_sep_by_space;
 char n_cs_precedes;
 char n_sep_by_space;
 char p_sign_posn;
 char n_sign_posn;
 char int_p_cs_precedes;
 char int_n_cs_precedes;
 char int_p_sep_by_space;
 char int_n_sep_by_space;
 char int_p_sign_posn;
 char int_n_sign_posn;
};





extern "C" {
struct lconv *localeconv(void);
}
# 41 "/usr/include/locale.h" 2 3 4

#define LC_ALL 0
#define LC_COLLATE 1
#define LC_CTYPE 2
#define LC_MONETARY 3
#define LC_NUMERIC 4
#define LC_TIME 5
#define LC_MESSAGES 6

#define _LC_LAST 7

extern "C" {
char *setlocale(int, const char *);
}
# 34 "gdb_locale.h" 2
# 42 "gdb_locale.h"
# 1 "../intl/libintl.h" 1
# 26 "../intl/libintl.h"
#define _LIBINTL_H 1

#define _LIBGETTEXT_H 1



#define __USE_GNU_GETTEXT 1



#define _INCLUDING_CONFIG_H 1
# 58 "../intl/libintl.h"

# 58 "../intl/libintl.h"
extern "C" {
# 80 "../intl/libintl.h"
#define HAVE_LC_MESSAGES (1)
# 93 "../intl/libintl.h"
struct _msg_ent
{
  const char *_msg;
  int _msg_number;
};
# 110 "../intl/libintl.h"
#define gettext_noop(Str) (Str)




extern char *gettext (const char *__msgid);
extern char *gettext__ (const char *__msgid);



extern char *dgettext (const char *__domainname, const char *__msgid)
                                                   ;
extern char *dgettext__ (const char *__domainname, const char *__msgid)
                                                     ;



extern char *dcgettext (const char *__domainname, const char *__msgid, int __category)
                                                                    ;
extern char *dcgettext__ (const char *__domainname, const char *__msgid, int __category)
                                                                      ;





extern char *textdomain (const char *__domainname);
extern char *textdomain__ (const char *__domainname);



extern char *bindtextdomain (const char *__domainname, const char *__dirname)
                                                           ;
extern char *bindtextdomain__ (const char *__domainname, const char *__dirname)
                                                             ;
# 155 "../intl/libintl.h"
#define gettext(Msgid) dgettext(NULL, Msgid)



#define dgettext(Domainname,Msgid) dcgettext(Domainname, Msgid, LC_MESSAGES)
# 216 "../intl/libintl.h"
}
# 43 "gdb_locale.h" 2





#define _(String) gettext (String)

#define N_(String) gettext_noop (String)
# 123 "defs.h" 2


# 1 "./../readline/../gdb/signals.h" 1
# 26 "./../readline/../gdb/signals.h"
#define GDB_SIGNALS_H 
# 56 "./../readline/../gdb/signals.h"
enum target_signal
  {


    TARGET_SIGNAL_0 = 0,
    TARGET_SIGNAL_FIRST = 0,
    TARGET_SIGNAL_HUP = 1,
    TARGET_SIGNAL_INT = 2,
    TARGET_SIGNAL_QUIT = 3,
    TARGET_SIGNAL_ILL = 4,
    TARGET_SIGNAL_TRAP = 5,
    TARGET_SIGNAL_ABRT = 6,
    TARGET_SIGNAL_EMT = 7,
    TARGET_SIGNAL_FPE = 8,
    TARGET_SIGNAL_KILL = 9,
    TARGET_SIGNAL_BUS = 10,
    TARGET_SIGNAL_SEGV = 11,
    TARGET_SIGNAL_SYS = 12,
    TARGET_SIGNAL_PIPE = 13,
    TARGET_SIGNAL_ALRM = 14,
    TARGET_SIGNAL_TERM = 15,
    TARGET_SIGNAL_URG = 16,
    TARGET_SIGNAL_STOP = 17,
    TARGET_SIGNAL_TSTP = 18,
    TARGET_SIGNAL_CONT = 19,
    TARGET_SIGNAL_CHLD = 20,
    TARGET_SIGNAL_TTIN = 21,
    TARGET_SIGNAL_TTOU = 22,
    TARGET_SIGNAL_IO = 23,
    TARGET_SIGNAL_XCPU = 24,
    TARGET_SIGNAL_XFSZ = 25,
    TARGET_SIGNAL_VTALRM = 26,
    TARGET_SIGNAL_PROF = 27,
    TARGET_SIGNAL_WINCH = 28,
    TARGET_SIGNAL_LOST = 29,
    TARGET_SIGNAL_USR1 = 30,
    TARGET_SIGNAL_USR2 = 31,
    TARGET_SIGNAL_PWR = 32,

    TARGET_SIGNAL_POLL = 33,
    TARGET_SIGNAL_WIND = 34,
    TARGET_SIGNAL_PHONE = 35,
    TARGET_SIGNAL_WAITING = 36,
    TARGET_SIGNAL_LWP = 37,
    TARGET_SIGNAL_DANGER = 38,
    TARGET_SIGNAL_GRANT = 39,
    TARGET_SIGNAL_RETRACT = 40,
    TARGET_SIGNAL_MSG = 41,
    TARGET_SIGNAL_SOUND = 42,
    TARGET_SIGNAL_SAK = 43,
    TARGET_SIGNAL_PRIO = 44,
    TARGET_SIGNAL_REALTIME_33 = 45,
    TARGET_SIGNAL_REALTIME_34 = 46,
    TARGET_SIGNAL_REALTIME_35 = 47,
    TARGET_SIGNAL_REALTIME_36 = 48,
    TARGET_SIGNAL_REALTIME_37 = 49,
    TARGET_SIGNAL_REALTIME_38 = 50,
    TARGET_SIGNAL_REALTIME_39 = 51,
    TARGET_SIGNAL_REALTIME_40 = 52,
    TARGET_SIGNAL_REALTIME_41 = 53,
    TARGET_SIGNAL_REALTIME_42 = 54,
    TARGET_SIGNAL_REALTIME_43 = 55,
    TARGET_SIGNAL_REALTIME_44 = 56,
    TARGET_SIGNAL_REALTIME_45 = 57,
    TARGET_SIGNAL_REALTIME_46 = 58,
    TARGET_SIGNAL_REALTIME_47 = 59,
    TARGET_SIGNAL_REALTIME_48 = 60,
    TARGET_SIGNAL_REALTIME_49 = 61,
    TARGET_SIGNAL_REALTIME_50 = 62,
    TARGET_SIGNAL_REALTIME_51 = 63,
    TARGET_SIGNAL_REALTIME_52 = 64,
    TARGET_SIGNAL_REALTIME_53 = 65,
    TARGET_SIGNAL_REALTIME_54 = 66,
    TARGET_SIGNAL_REALTIME_55 = 67,
    TARGET_SIGNAL_REALTIME_56 = 68,
    TARGET_SIGNAL_REALTIME_57 = 69,
    TARGET_SIGNAL_REALTIME_58 = 70,
    TARGET_SIGNAL_REALTIME_59 = 71,
    TARGET_SIGNAL_REALTIME_60 = 72,
    TARGET_SIGNAL_REALTIME_61 = 73,
    TARGET_SIGNAL_REALTIME_62 = 74,
    TARGET_SIGNAL_REALTIME_63 = 75,


    TARGET_SIGNAL_CANCEL = 76,





    TARGET_SIGNAL_REALTIME_32,

    TARGET_SIGNAL_REALTIME_64,

    TARGET_SIGNAL_REALTIME_65,
    TARGET_SIGNAL_REALTIME_66,
    TARGET_SIGNAL_REALTIME_67,
    TARGET_SIGNAL_REALTIME_68,
    TARGET_SIGNAL_REALTIME_69,
    TARGET_SIGNAL_REALTIME_70,
    TARGET_SIGNAL_REALTIME_71,
    TARGET_SIGNAL_REALTIME_72,
    TARGET_SIGNAL_REALTIME_73,
    TARGET_SIGNAL_REALTIME_74,
    TARGET_SIGNAL_REALTIME_75,
    TARGET_SIGNAL_REALTIME_76,
    TARGET_SIGNAL_REALTIME_77,
    TARGET_SIGNAL_REALTIME_78,
    TARGET_SIGNAL_REALTIME_79,
    TARGET_SIGNAL_REALTIME_80,
    TARGET_SIGNAL_REALTIME_81,
    TARGET_SIGNAL_REALTIME_82,
    TARGET_SIGNAL_REALTIME_83,
    TARGET_SIGNAL_REALTIME_84,
    TARGET_SIGNAL_REALTIME_85,
    TARGET_SIGNAL_REALTIME_86,
    TARGET_SIGNAL_REALTIME_87,
    TARGET_SIGNAL_REALTIME_88,
    TARGET_SIGNAL_REALTIME_89,
    TARGET_SIGNAL_REALTIME_90,
    TARGET_SIGNAL_REALTIME_91,
    TARGET_SIGNAL_REALTIME_92,
    TARGET_SIGNAL_REALTIME_93,
    TARGET_SIGNAL_REALTIME_94,
    TARGET_SIGNAL_REALTIME_95,
    TARGET_SIGNAL_REALTIME_96,
    TARGET_SIGNAL_REALTIME_97,
    TARGET_SIGNAL_REALTIME_98,
    TARGET_SIGNAL_REALTIME_99,
    TARGET_SIGNAL_REALTIME_100,
    TARGET_SIGNAL_REALTIME_101,
    TARGET_SIGNAL_REALTIME_102,
    TARGET_SIGNAL_REALTIME_103,
    TARGET_SIGNAL_REALTIME_104,
    TARGET_SIGNAL_REALTIME_105,
    TARGET_SIGNAL_REALTIME_106,
    TARGET_SIGNAL_REALTIME_107,
    TARGET_SIGNAL_REALTIME_108,
    TARGET_SIGNAL_REALTIME_109,
    TARGET_SIGNAL_REALTIME_110,
    TARGET_SIGNAL_REALTIME_111,
    TARGET_SIGNAL_REALTIME_112,
    TARGET_SIGNAL_REALTIME_113,
    TARGET_SIGNAL_REALTIME_114,
    TARGET_SIGNAL_REALTIME_115,
    TARGET_SIGNAL_REALTIME_116,
    TARGET_SIGNAL_REALTIME_117,
    TARGET_SIGNAL_REALTIME_118,
    TARGET_SIGNAL_REALTIME_119,
    TARGET_SIGNAL_REALTIME_120,
    TARGET_SIGNAL_REALTIME_121,
    TARGET_SIGNAL_REALTIME_122,
    TARGET_SIGNAL_REALTIME_123,
    TARGET_SIGNAL_REALTIME_124,
    TARGET_SIGNAL_REALTIME_125,
    TARGET_SIGNAL_REALTIME_126,
    TARGET_SIGNAL_REALTIME_127,

    TARGET_SIGNAL_INFO,


    TARGET_SIGNAL_UNKNOWN,



    TARGET_SIGNAL_DEFAULT,




    TARGET_EXC_BAD_ACCESS,
    TARGET_EXC_BAD_INSTRUCTION,
    TARGET_EXC_ARITHMETIC,
    TARGET_EXC_EMULATION,
    TARGET_EXC_SOFTWARE,
    TARGET_EXC_BREAKPOINT,




    TARGET_SIGNAL_LAST
  };
# 126 "defs.h" 2
# 136 "defs.h"
# 1 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/stdarg.h" 1 3 4
# 31 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/stdarg.h" 3 4
#define _STDARG_H 
#define _ANSI_STDARG_H_ 

#undef __need___va_list




#define __GNUC_VA_LIST 

# 40 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;






#define va_start(v,l) __builtin_va_start(v,l)
#define va_end(v) __builtin_va_end(v)
#define va_arg(v,l) __builtin_va_arg(v,l)


#define va_copy(d,s) __builtin_va_copy(d,s)

#define __va_copy(d,s) __builtin_va_copy(d,s)
# 105 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/stdarg.h" 3 4
#define _VA_LIST_ 





#define _VA_LIST_DEFINED 


#define _VA_LIST_T_H 


#define __va_list__ 
# 137 "defs.h" 2
# 147 "defs.h"
# 1 "./../include/libiberty.h" 1
# 36 "./../include/libiberty.h"
#define LIBIBERTY_H 



# 39 "./../include/libiberty.h"
extern "C" {
# 51 "./../include/libiberty.h"
# 1 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/stddef.h" 1 3 4
# 52 "./../include/libiberty.h" 2
# 60 "./../include/libiberty.h"
extern void unlock_stream(FILE *);




extern void unlock_std_streams(void);




extern FILE *fopen_unlocked(const char *, const char *) __attribute__((warn_unused_result));
extern FILE *fdopen_unlocked(int, const char *) __attribute__((warn_unused_result));
extern FILE *freopen_unlocked(const char *, const char *, FILE *)
  __attribute__((warn_unused_result));



extern char **buildargv(const char *) __attribute__((__malloc__)) __attribute__((warn_unused_result));


extern void freeargv(char **);



extern char **dupargv(char *const *) __attribute__((__malloc__)) __attribute__((warn_unused_result));


extern void expandargv(int *, char ***);


extern int writeargv(char *const *, FILE *);


extern int countargv(char *const *) __attribute__((warn_unused_result));
# 111 "./../include/libiberty.h"
extern char *basename(char *);
# 121 "./../include/libiberty.h"
extern const char *lbasename(const char *) __attribute__((warn_unused_result));



extern const char *dos_lbasename(const char *) __attribute__((warn_unused_result));




extern const char *unix_lbasename(const char *) __attribute__((warn_unused_result));


extern char *lrealpath(const char *) __attribute__((warn_unused_result));




extern char *concat(const char *, ...)
  __attribute__((__malloc__)) __attribute__((__sentinel__)) __attribute__((warn_unused_result));







extern char *reconcat(char *, const char *, ...)
  __attribute__((__malloc__)) __attribute__((__sentinel__)) __attribute__((warn_unused_result));




extern unsigned long concat_length(const char *, ...)
  __attribute__((__sentinel__)) __attribute__((warn_unused_result));





extern char *concat_copy(char *, const char *, ...)
  __attribute__((__sentinel__)) __attribute__((warn_unused_result));





extern char *concat_copy2(const char *, ...)
  __attribute__((__sentinel__)) __attribute__((warn_unused_result));


extern char *libiberty_concat_ptr;





#define ACONCAT(ACONCAT_PARAMS) (libiberty_concat_ptr = (char *)alloca(concat_length ACONCAT_PARAMS + 1), concat_copy2 ACONCAT_PARAMS)




extern int fdmatch(int fd1, int fd2) __attribute__((warn_unused_result));
# 193 "./../include/libiberty.h"
extern char *getpwd(void) __attribute__((warn_unused_result));
# 205 "./../include/libiberty.h"
extern long get_run_time(void) __attribute__((warn_unused_result));



extern char *make_relative_prefix(const char *, const char *, const char *)
  __attribute__((__malloc__)) __attribute__((warn_unused_result));




extern char *make_relative_prefix_ignore_links(const char *, const char *,
                                               const char *)
  __attribute__((__malloc__)) __attribute__((warn_unused_result));


extern char *choose_temp_base(void) __attribute__((__malloc__)) __attribute__((warn_unused_result));


extern char *make_temp_file(const char *) __attribute__((__malloc__)) __attribute__((warn_unused_result));


extern int unlink_if_ordinary(const char *);


extern const char *spaces(int count) __attribute__((__malloc__)) __attribute__((warn_unused_result));



extern int errno_max(void) __attribute__((warn_unused_result));



extern const char *strerrno(int) __attribute__((warn_unused_result));


extern int strtoerrno(const char *) __attribute__((warn_unused_result));


extern char *xstrerror(int) __attribute__((warn_unused_result));



extern int signo_max(void) __attribute__((warn_unused_result));
# 259 "./../include/libiberty.h"
extern const char *strsigno(int) __attribute__((warn_unused_result));


extern int strtosigno(const char *) __attribute__((warn_unused_result));


extern int xatexit(void (*fn)(void)) __attribute__((warn_unused_result));


extern void xexit(int status) __attribute__((__noreturn__));


extern void xmalloc_set_program_name(const char *);



extern void xmalloc_set_malloc_hooks
 (void * (*nmalloc)(size_t),
  void * (*ncalloc)(size_t, size_t),
  void * (*nrealloc)(void *, size_t),
  void (*nfree)(void *));


extern void xmalloc_failed(size_t) __attribute__((__noreturn__));





extern void *xmalloc(size_t) __attribute__((__malloc__)) __attribute__((warn_unused_result));





extern void *xrealloc(void *, size_t) __attribute__((warn_unused_result));




extern void *xcalloc(size_t, size_t) __attribute__((__malloc__)) __attribute__((warn_unused_result));



extern void xfree (void *);


extern char *xstrdup(const char *) __attribute__((__malloc__)) __attribute__((warn_unused_result));


extern char *xstrndup(const char *, size_t) __attribute__((__malloc__)) __attribute__((warn_unused_result));


extern void *xmemdup(const void *, size_t, size_t)
  __attribute__((__malloc__)) __attribute__((warn_unused_result));


extern double physmem_total(void) __attribute__((warn_unused_result));
extern double physmem_available(void) __attribute__((warn_unused_result));


extern unsigned int xcrc32(const unsigned char *, int, unsigned int)
  __attribute__((warn_unused_result));
# 330 "./../include/libiberty.h"
#define XALLOCA(T) ((T *)alloca(sizeof(T)))
#define XNEW(T) ((T *)xmalloc(sizeof(T)))
#define XCNEW(T) ((T *)xcalloc(1, sizeof(T)))
#define XDUP(T,P) ((T *)xmemdup((P), sizeof(T), sizeof(T)))
#define XDELETE(P) free((void*)(P))


#define XALLOCAVEC(T,N) ((T *)alloca(sizeof(T) * (N)))
#define XNEWVEC(T,N) ((T *)xmalloc(sizeof(T) * (N)))
#define XCNEWVEC(T,N) ((T *)xcalloc((N), sizeof(T)))
#define XDUPVEC(T,P,N) ((T *)xmemdup((P), sizeof(T) * (N), sizeof(T) * (N)))
#define XRESIZEVEC(T,P,N) ((T *)xrealloc((void *)(P), sizeof(T) * (N)))
#define XDELETEVEC(P) free((void*)(P))


#define XALLOCAVAR(T,S) ((T *)alloca((S)))
#define XNEWVAR(T,S) ((T *)xmalloc((S)))
#define XCNEWVAR(T,S) ((T *)xcalloc(1, (S)))
#define XDUPVAR(T,P,S1,S2) ((T *)xmemdup((P), (S1), (S2)))
#define XRESIZEVAR(T,P,S) ((T *)xrealloc((P), (S)))


#define XOBNEW(O,T) ((T *)obstack_alloc((O), sizeof(T)))
#define XOBNEWVEC(O,T,N) ((T *)obstack_alloc((O), sizeof(T) * (N)))
#define XOBNEWVAR(O,T,S) ((T *)obstack_alloc((O), (S)))
#define XOBFINISH(O,T) ((T)obstack_finish((O)))


#define _hex_array_size 256
#define _hex_bad 99
extern const unsigned char _hex_value[256];
extern void hex_init(void);
#define hex_p(c) (hex_value (c) != _hex_bad)


#define hex_value(c) ((unsigned int)_hex_value[(unsigned char)(c)])




#define PEX_RECORD_TIMES 0x1


#define PEX_USE_PIPES 0x2


#define PEX_SAVE_TEMPS 0x4
# 386 "./../include/libiberty.h"
extern struct pex_obj *pex_init(int flags, const char *pname,
                                const char *tempbase)
  __attribute__((warn_unused_result));
# 397 "./../include/libiberty.h"
#define PEX_LAST 0x1


#define PEX_SEARCH 0x2


#define PEX_SUFFIX 0x4


#define PEX_STDERR_TO_STDOUT 0x8



#define PEX_BINARY_INPUT 0x10






#define PEX_BINARY_OUTPUT 0x20







#define PEX_STDERR_TO_PIPE 0x40



#define PEX_BINARY_ERROR 0x80



#define PEX_STDOUT_APPEND 0x100




#define PEX_STDERR_APPEND 0x200
# 491 "./../include/libiberty.h"
extern const char *pex_run(struct pex_obj *obj, int flags,
      const char *executable, char * const *argv,
      const char *outname, const char *errname,
      int *err) __attribute__((warn_unused_result));
# 505 "./../include/libiberty.h"
extern const char *pex_run_in_environment(struct pex_obj *obj, int flags,
                                          const char *executable,
                                          char * const *argv,
                                          char * const *env,
                                          const char *outname,
                                          const char *errname, int *err)
  __attribute__((warn_unused_result));




extern FILE *pex_input_file(struct pex_obj *obj, int flags,
                            const char *in_name)
  __attribute__((warn_unused_result));





extern FILE *pex_input_pipe(struct pex_obj *obj, int binary)
  __attribute__((warn_unused_result));






extern FILE *pex_read_output(struct pex_obj *, int binary)
  __attribute__((warn_unused_result));






extern FILE *pex_read_err(struct pex_obj *, int binary)
  __attribute__((warn_unused_result));





extern int pex_get_status(struct pex_obj *, int count, int *vector)
  __attribute__((warn_unused_result));






struct pex_time
{
  unsigned long user_seconds;
  unsigned long user_microseconds;
  unsigned long system_seconds;
  unsigned long system_microseconds;
};

extern int pex_get_times(struct pex_obj *, int count,
                         struct pex_time *vector) __attribute__((warn_unused_result));


extern void pex_free(struct pex_obj *);
# 580 "./../include/libiberty.h"
extern const char *pex_one(int flags, const char *executable,
      char * const *argv, const char *pname,
      const char *outname, const char *errname,
      int *status, int *err) __attribute__((warn_unused_result));







#define PEXECUTE_FIRST 1
#define PEXECUTE_LAST 2
#define PEXECUTE_ONE (PEXECUTE_FIRST + PEXECUTE_LAST)
#define PEXECUTE_SEARCH 4
#define PEXECUTE_VERBOSE 8


extern int pexecute(const char *, char * const *, const char *,
                    const char *, char **, char **, int) __attribute__((warn_unused_result));


extern int pwait(int, int *, int) __attribute__((warn_unused_result));
# 624 "./../include/libiberty.h"
extern char *xvasprintf(const char *, va_list) __attribute__((__malloc__)) __attribute__((__format__(__printf__, 1, 0))) __attribute__((__nonnull__(1)));
# 662 "./../include/libiberty.h"
extern int strverscmp(const char *, const char *);



extern void setproctitle(const char *name, ...);


extern void stack_limit_increase(unsigned long);

#define ARRAY_SIZE(a) (sizeof(a) / sizeof((a)[0]))







extern void *C_alloca(size_t) __attribute__((__malloc__)) __attribute__((warn_unused_result));
#undef alloca

#define alloca(x) __builtin_alloca(x)
#undef C_ALLOCA
#define ASTRDUP(X) (__extension__ ({ const char *const libiberty_optr = (X); const unsigned long libiberty_len = (strlen(libiberty_optr) + 1); char *const libiberty_nptr = (char *const)alloca(libiberty_len); (char *)memcpy(libiberty_nptr, libiberty_optr, libiberty_len); }))
# 706 "./../include/libiberty.h"
}
# 148 "defs.h" 2




# 1 "../bfd/bfd.h" 1
# 32 "../bfd/bfd.h"
#define __BFD_H_SEEN__ 


extern "C" {



# 1 "./../include/symcat.h" 1
# 20 "./../include/symcat.h"
#define SYM_CAT_H 
# 30 "./../include/symcat.h"
#define CONCAT2(a,b) a ##b
#define CONCAT3(a,b,c) a ##b ##c
#define CONCAT4(a,b,c,d) a ##b ##c ##d
#define STRINGX(s) #s
# 45 "./../include/symcat.h"
#define XCONCAT2(a,b) CONCAT2(a,b)
#define XCONCAT3(a,b,c) CONCAT3(a,b,c)
#define XCONCAT4(a,b,c,d) CONCAT4(a,b,c,d)






#define XSTRING(s) STRINGX(s)
# 40 "../bfd/bfd.h" 2







#undef CONCAT4
#define CONCAT4(a,b,c,d) XCONCAT2(CONCAT2(a,b),CONCAT2(c,d))
# 57 "../bfd/bfd.h"
#define STRING_COMMA_LEN(STR) (STR), ((STR) ? sizeof(STR) - 1 : 0)
# 67 "../bfd/bfd.h"
#define CONST_STRNEQ(STR1,STR2) (strncmp((STR1), (STR2), sizeof(STR2) - 1) == 0)




#define LITMEMCPY(DEST,STR2) memcpy((DEST), (STR2), sizeof(STR2) - 1)
#define LITSTRCPY(DEST,STR2) memcpy((DEST), (STR2), sizeof(STR2))





#define BFD_ARCH_SIZE 64


#define BFD_DEFAULT_TARGET_SIZE 32

#define BFD_HOST_64BIT_LONG 0
#define BFD_HOST_LONG_LONG 1

#define BFD_HOST_64_BIT long long
#define BFD_HOST_U_64_BIT unsigned long long
typedef long long bfd_int64_t;
typedef unsigned long long bfd_uint64_t;



#define BFD64 





#define INLINE __inline__






typedef struct bfd bfd;
# 118 "../bfd/bfd.h"
typedef int bfd_boolean;
#undef FALSE
#undef TRUE
#define FALSE 0
#define TRUE 1







typedef unsigned long long bfd_vma;
typedef long long bfd_signed_vma;
typedef unsigned long long bfd_size_type;
typedef unsigned long long symvalue;
# 144 "../bfd/bfd.h"
#define BFD_VMA_FMT "ll"

#define _bfd_int64_low(x) ((unsigned long)(((x) & 0xffffffff)))
#define _bfd_int64_high(x) ((unsigned long)(((x) >> 32) & 0xffffffff))
#define fprintf_vma(s,x) fprintf((s), "%08lx%08lx", _bfd_int64_high (x), _bfd_int64_low (x))

#define sprintf_vma(s,x) sprintf((s), "%08lx%08lx", _bfd_int64_high (x), _bfd_int64_low (x))
# 180 "../bfd/bfd.h"
#define HALF_BFD_SIZE_TYPE (((bfd_size_type)1UL) << (8UL * sizeof(bfd_size_type) / 2UL))
# 194 "../bfd/bfd.h"
typedef long long file_ptr;
typedef unsigned long long ufile_ptr;

extern void bfd_sprintf_vma(bfd *, char *, bfd_vma);
extern void bfd_fprintf_vma(bfd *, void *, bfd_vma);

#define printf_vma(x) fprintf_vma(stdout, x)
#define bfd_printf_vma(abfd,x) bfd_fprintf_vma(abfd, stdout, x)

typedef unsigned int flagword;
typedef unsigned char bfd_byte;


typedef enum bfd_format
{
  bfd_unknown = 0,
  bfd_object,
  bfd_archive,
  bfd_core,
  bfd_type_end
}
bfd_format;
# 225 "../bfd/bfd.h"
#define BFD_NO_FLAGS 0x00


#define HAS_RELOC 0x01


#define EXEC_P 0x02



#define HAS_LINENO 0x04


#define HAS_DEBUG 0x08


#define HAS_SYMS 0x10



#define HAS_LOCALS 0x20


#define DYNAMIC 0x40




#define WP_TEXT 0x80



#define D_PAGED 0x100




#define BFD_IS_RELAXABLE 0x200





#define BFD_TRADITIONAL_FORMAT 0x400



#define BFD_IN_MEMORY 0x800


#define HAS_LOAD_PAGE 0x1000



#define BFD_LINKER_CREATED 0x2000

struct bfd_in_memory;




typedef unsigned long symindex;


typedef const struct reloc_howto_struct reloc_howto_type;

#define BFD_NO_MORE_SYMBOLS ((symindex)~0)




#define bfd_get_section(x) ((x)->section)
#define bfd_get_output_section(x) ((x)->section->output_section)
#define bfd_set_section(x,y) ((x)->section) = (y)
#define bfd_asymbol_base(x) ((x)->section->vma)
#define bfd_asymbol_value(x) (bfd_asymbol_base(x) + (x)->value)
#define bfd_asymbol_name(x) ((x)->name)




#define bfd_asymbol_bfd(x) ((x)->the_bfd)
#define bfd_asymbol_flavour(x) (bfd_asymbol_bfd(x)->xvec->flavour)



typedef struct carsym
{
  char *name;
  file_ptr file_offset;
}
carsym;



struct orl
{
  char **name;
  union
  {
    file_ptr pos;
    bfd *abfd;
  } u;
  int namidx;
};


typedef struct lineno_cache_entry
{
  unsigned int line_number;
  union
  {
    struct bfd_symbol *sym;
    bfd_vma offset;
  } u;
}
alent;


#define align_power(addr,align) (((addr) + ((bfd_vma)1UL << (align)) - 1UL) & ((bfd_vma)-1L << (align)))


typedef struct bfd_section *sec_ptr;

#define bfd_get_section_name(bfd,ptr) ((ptr)->name + 0)
#define bfd_get_section_vma(bfd,ptr) ((ptr)->vma + 0)
#define bfd_get_section_lma(bfd,ptr) ((ptr)->lma + 0)
#define bfd_get_section_alignment(bfd,ptr) ((ptr)->alignment_power + 0)
#define bfd_section_name(bfd,ptr) ((ptr)->name)
#define bfd_section_size(bfd,ptr) ((ptr)->size)
#define bfd_get_section_size(ptr) ((ptr)->size)
#define bfd_section_vma(bfd,ptr) ((ptr)->vma)
#define bfd_section_lma(bfd,ptr) ((ptr)->lma)
#define bfd_section_alignment(bfd,ptr) ((ptr)->alignment_power)
#define bfd_get_section_flags(bfd,ptr) ((ptr)->flags + 0)
#define bfd_get_section_userdata(bfd,ptr) ((ptr)->userdata)

#define bfd_is_com_section(ptr) (((ptr)->flags & SEC_IS_COMMON) != 0)



#define bfd_set_section_vma(bfd,ptr,val) (((ptr)->vma = (ptr)->lma = (val)), ((ptr)->user_set_vma = TRUE), TRUE)
#define bfd_set_section_alignment(bfd,ptr,val) (((ptr)->alignment_power = (val)), TRUE)
#define bfd_set_section_userdata(bfd,ptr,val) (((ptr)->userdata = (val)), TRUE)

#define bfd_get_section_limit(bfd,sec) (((sec)->rawsize ? (sec)->rawsize : (sec)->size) / bfd_octets_per_byte(bfd))





#define discarded_section(sec) (!bfd_is_abs_section (sec) && bfd_is_abs_section ((sec)->output_section) && (sec)->sec_info_type != SEC_INFO_TYPE_MERGE && (sec)->sec_info_type != SEC_INFO_TYPE_JUST_SYMS)






typedef struct stat stat_type;

typedef enum bfd_print_symbol
{
  bfd_print_symbol_name,
  bfd_print_symbol_more,
  bfd_print_symbol_all
} bfd_print_symbol_type;




#pragma GCC diagnostic push

#pragma GCC diagnostic ignored "-Wpadded"




typedef struct _symbol_info
{
  symvalue value;
  char type;
  const char *name;
  unsigned char stab_type;
  char stab_other;
  short stab_desc;
  const char *stab_name;
} symbol_info;




#pragma GCC diagnostic pop




extern const char *bfd_get_stab_name(int);





struct bfd_hash_entry
{

  struct bfd_hash_entry *next;

  const char *string;


  unsigned long hash;
};


struct bfd_hash_table
{

  struct bfd_hash_entry **table;

  unsigned int size;







  struct bfd_hash_entry *(*newfunc)
    (struct bfd_hash_entry *, struct bfd_hash_table *, const char *);


  void *memory;
};


extern bfd_boolean bfd_hash_table_init
  (struct bfd_hash_table *,
   struct bfd_hash_entry *(*)(struct bfd_hash_entry *,
         struct bfd_hash_table *,
         const char *));


extern bfd_boolean bfd_hash_table_init_n
  (struct bfd_hash_table *,
   struct bfd_hash_entry *(*)(struct bfd_hash_entry *,
         struct bfd_hash_table *,
         const char *),
   unsigned int size);


extern void bfd_hash_table_free
  (struct bfd_hash_table *);





extern struct bfd_hash_entry *bfd_hash_lookup
  (struct bfd_hash_table *, const char *, bfd_boolean create,
   bfd_boolean copy);


extern void bfd_hash_replace
  (struct bfd_hash_table *, struct bfd_hash_entry *old,
   struct bfd_hash_entry *nw);


extern struct bfd_hash_entry *bfd_hash_newfunc
  (struct bfd_hash_entry *, struct bfd_hash_table *, const char *);


extern void *bfd_hash_allocate
  (struct bfd_hash_table *, unsigned int);




extern void bfd_hash_traverse
  (struct bfd_hash_table *,
   bfd_boolean (*)(struct bfd_hash_entry *, void *),
   void *info);




extern void bfd_hash_set_default_size(bfd_size_type);



struct stab_info
{

  struct bfd_strtab_hash *strings;

  struct bfd_hash_table includes;

  struct bfd_section *stabstr;
};

#define COFF_SWAP_TABLE (void *)&bfd_coff_std_swap_table






extern bfd_size_type bfd_bread(void *, bfd_size_type, bfd *);
extern bfd_size_type bfd_bwrite(const void *, bfd_size_type, bfd *);
extern int bfd_seek(bfd *, file_ptr, int);
extern file_ptr bfd_tell(bfd *);
extern int bfd_flush(bfd *);
extern int bfd_stat(bfd *, struct stat *);



#define bfd_read(BUF,ELTSIZE,NITEMS,ABFD) (warn_deprecated("bfd_read", __FILE__, __LINE__, __FUNCTION__), bfd_bread((BUF), (ELTSIZE) * (NITEMS), (ABFD)))


#define bfd_write(BUF,ELTSIZE,NITEMS,ABFD) (warn_deprecated("bfd_write", __FILE__, __LINE__, __FUNCTION__), bfd_bwrite((BUF), (ELTSIZE) * (NITEMS), (ABFD)))
# 554 "../bfd/bfd.h"
extern void warn_deprecated(const char *, const char *, int, const char *);



#define bfd_get_filename(abfd) ((char *)(abfd)->filename)
#define bfd_get_cacheable(abfd) ((abfd)->cacheable)
#define bfd_get_format(abfd) ((abfd)->format)
#define bfd_get_target(abfd) ((abfd)->xvec->name)
#define bfd_get_flavour(abfd) ((abfd)->xvec->flavour)
#define bfd_family_coff(abfd) ((bfd_get_flavour(abfd) == bfd_target_coff_flavour) || (bfd_get_flavour(abfd) == bfd_target_xcoff_flavour))


#define bfd_big_endian(abfd) ((abfd)->xvec->byteorder == BFD_ENDIAN_BIG)
#define bfd_little_endian(abfd) ((abfd)->xvec->byteorder == BFD_ENDIAN_LITTLE)
#define bfd_header_big_endian(abfd) ((abfd)->xvec->header_byteorder == BFD_ENDIAN_BIG)

#define bfd_header_little_endian(abfd) ((abfd)->xvec->header_byteorder == BFD_ENDIAN_LITTLE)

#define bfd_get_file_flags(abfd) ((abfd)->flags)
#define bfd_applicable_file_flags(abfd) ((abfd)->xvec->object_flags)
#define bfd_applicable_section_flags(abfd) ((abfd)->xvec->section_flags)
#define bfd_my_archive(abfd) ((abfd)->my_archive)
#define bfd_has_map(abfd) ((abfd)->has_armap)

#define bfd_valid_reloc_types(abfd) ((abfd)->xvec->valid_reloc_types)
#define bfd_usrdata(abfd) ((abfd)->usrdata)

#define bfd_get_start_address(abfd) ((abfd)->start_address)
#define bfd_get_symcount(abfd) ((abfd)->symcount)
#define bfd_get_outsymbols(abfd) ((abfd)->outsymbols)
#define bfd_count_sections(abfd) ((abfd)->section_count)

#define bfd_get_dynamic_symcount(abfd) ((abfd)->dynsymcount)

#define bfd_get_symbol_leading_char(abfd) ((abfd)->xvec->symbol_leading_char)

#define bfd_set_cacheable(abfd,bool) (((abfd)->cacheable = bool), TRUE)

extern bfd_boolean bfd_cache_close
  (bfd *abfd);


extern bfd_boolean bfd_cache_close_all(void);

extern bfd_boolean bfd_record_phdr
  (bfd *, unsigned long, bfd_boolean, flagword, bfd_boolean, bfd_vma,
   bfd_boolean, bfd_boolean, unsigned int, struct bfd_section **);


bfd_uint64_t bfd_getb64(const void *);
bfd_uint64_t bfd_getl64(const void *);
bfd_int64_t bfd_getb_signed_64(const void *);
bfd_int64_t bfd_getl_signed_64(const void *);
bfd_vma bfd_getb32(const void *);
bfd_vma bfd_getl32(const void *);
bfd_signed_vma bfd_getb_signed_32(const void *);
bfd_signed_vma bfd_getl_signed_32(const void *);
bfd_vma bfd_getb16(const void *);
bfd_vma bfd_getl16(const void *);
bfd_signed_vma bfd_getb_signed_16(const void *);
bfd_signed_vma bfd_getl_signed_16(const void *);
void bfd_putb64(bfd_uint64_t, void *);
void bfd_putl64(bfd_uint64_t, void *);
void bfd_putb32(bfd_vma, void *);
void bfd_putl32(bfd_vma, void *);
void bfd_putb16(bfd_vma, void *);
void bfd_putl16(bfd_vma, void *);


bfd_uint64_t bfd_get_bits(const void *, int, bfd_boolean);
void bfd_put_bits(bfd_uint64_t, void *, int, bfd_boolean);

extern bfd_boolean bfd_section_already_linked_table_init(void);
extern void bfd_section_already_linked_table_free(void);



struct ecoff_debug_info;
struct ecoff_debug_swap;
struct ecoff_extr;
struct bfd_symbol;
struct bfd_link_info;
struct bfd_link_hash_entry;
struct bfd_elf_version_tree;

extern bfd_vma bfd_ecoff_get_gp_value(bfd * abfd);
extern bfd_boolean bfd_ecoff_set_gp_value(bfd *abfd, bfd_vma gp_value);
extern bfd_boolean bfd_ecoff_set_regmasks
  (bfd *abfd, unsigned long gprmask, unsigned long fprmask,
   unsigned long *cprmask);
extern void *bfd_ecoff_debug_init
  (bfd *output_bfd, struct ecoff_debug_info *output_debug,
   const struct ecoff_debug_swap *output_swap, struct bfd_link_info *);
extern void bfd_ecoff_debug_free
  (void *handle, bfd *output_bfd, struct ecoff_debug_info *output_debug,
   const struct ecoff_debug_swap *output_swap, struct bfd_link_info *);
extern bfd_boolean bfd_ecoff_debug_accumulate
  (void *handle, bfd *output_bfd, struct ecoff_debug_info *output_debug,
   const struct ecoff_debug_swap *output_swap, bfd *input_bfd,
   struct ecoff_debug_info *input_debug,
   const struct ecoff_debug_swap *input_swap, struct bfd_link_info *);
extern bfd_boolean bfd_ecoff_debug_accumulate_other
  (void *handle, bfd *output_bfd, struct ecoff_debug_info *output_debug,
   const struct ecoff_debug_swap *output_swap, bfd *input_bfd,
   struct bfd_link_info *);
extern bfd_boolean bfd_ecoff_debug_externals
  (bfd *abfd, struct ecoff_debug_info *debug,
   const struct ecoff_debug_swap *swap, bfd_boolean relocatable,
   bfd_boolean (*get_extr) (struct bfd_symbol *, struct ecoff_extr *),
   void (*set_index) (struct bfd_symbol *, bfd_size_type));
extern bfd_boolean bfd_ecoff_debug_one_external
  (bfd *abfd, struct ecoff_debug_info *debug,
   const struct ecoff_debug_swap *swap, const char *name,
   struct ecoff_extr *esym);
extern bfd_size_type bfd_ecoff_debug_size
  (bfd *abfd, struct ecoff_debug_info *debug,
   const struct ecoff_debug_swap *swap);
extern bfd_boolean bfd_ecoff_write_debug
  (bfd *abfd, struct ecoff_debug_info *debug,
   const struct ecoff_debug_swap *swap, file_ptr where);
extern bfd_boolean bfd_ecoff_write_accumulated_debug
  (void *handle, bfd *abfd, struct ecoff_debug_info *debug,
   const struct ecoff_debug_swap *swap,
   struct bfd_link_info *info, file_ptr where);



struct bfd_link_needed_list
{
  struct bfd_link_needed_list *next;
  bfd *by;
  const char *name;
};

enum dynamic_lib_link_class {
  DYN_NORMAL = 0,
  DYN_AS_NEEDED = 1,
  DYN_DT_NEEDED = 2,
  DYN_NO_ADD_NEEDED = 4,
  DYN_NO_NEEDED = 8
};

extern bfd_boolean bfd_elf_record_link_assignment
  (struct bfd_link_info *, const char *, bfd_boolean);
extern struct bfd_link_needed_list *bfd_elf_get_needed_list
  (bfd *, struct bfd_link_info *);
extern bfd_boolean bfd_elf_get_bfd_needed_list
  (bfd *, struct bfd_link_needed_list **);
extern bfd_boolean bfd_elf_size_dynamic_sections
  (bfd *, const char *, const char *, const char *, const char * const *,
   struct bfd_link_info *, struct bfd_section **,
   struct bfd_elf_version_tree *);
extern bfd_boolean bfd_elf_size_dynsym_hash_dynstr
  (bfd *, struct bfd_link_info *);
extern void bfd_elf_set_dt_needed_name(bfd *, const char *);
extern const char *bfd_elf_get_dt_soname(bfd *);
extern void bfd_elf_set_dyn_lib_class(bfd *, int);
extern int bfd_elf_get_dyn_lib_class(bfd *);
extern struct bfd_link_needed_list *bfd_elf_get_runpath_list
  (bfd *, struct bfd_link_info *);
extern bfd_boolean bfd_elf32_discard_info(bfd *, struct bfd_link_info *);
extern bfd_boolean bfd_elf_discard_info(bfd *, struct bfd_link_info *);
extern unsigned int _bfd_elf_default_action_discarded
  (struct bfd_section *);




extern long bfd_get_elf_phdr_upper_bound(bfd *abfd);
# 731 "../bfd/bfd.h"
extern int bfd_get_elf_phdrs(bfd *abfd, void *phdrs);
# 745 "../bfd/bfd.h"
extern bfd *bfd_elf_bfd_from_remote_memory
  (bfd *templ, bfd_vma ehdr_vma, bfd_vma *loadbasep,
   int (*target_read_memory)(bfd_vma vma, bfd_byte *myaddr, int len));


extern int bfd_get_arch_size(bfd *);


extern int bfd_get_sign_extend_vma(bfd *);

extern struct bfd_section *_bfd_elf_tls_setup
  (bfd *, struct bfd_link_info *);

extern void _bfd_fix_excluded_sec_syms(bfd *, struct bfd_link_info *);

extern bfd_boolean bfd_m68k_elf32_create_embedded_relocs
  (bfd *, struct bfd_link_info *, struct bfd_section *,
   struct bfd_section *, char **);


extern struct bfd_link_needed_list *bfd_sunos_get_needed_list
  (bfd *, struct bfd_link_info *);
extern bfd_boolean bfd_sunos_record_link_assignment
  (bfd *, struct bfd_link_info *, const char *);
extern bfd_boolean bfd_sunos_size_dynamic_sections
  (bfd *, struct bfd_link_info *, struct bfd_section **,
   struct bfd_section **, struct bfd_section **);


extern bfd_boolean bfd_i386linux_size_dynamic_sections
  (bfd *, struct bfd_link_info *);
extern bfd_boolean bfd_m68klinux_size_dynamic_sections
  (bfd *, struct bfd_link_info *);
extern bfd_boolean bfd_sparclinux_size_dynamic_sections
  (bfd *, struct bfd_link_info *);


struct _bfd_window_internal;
typedef struct _bfd_window_internal bfd_window_internal;

typedef struct _bfd_window
{

  void *data;
  bfd_size_type size;






  struct _bfd_window_internal *i;
}
bfd_window;

extern void bfd_init_window(bfd_window *);
extern void bfd_free_window(bfd_window *);
extern bfd_boolean bfd_get_file_window
  (bfd *, ufile_ptr, bfd_size_type, bfd_window *, bfd_boolean);


extern bfd_boolean bfd_xcoff_link_record_set
  (bfd *, struct bfd_link_info *, struct bfd_link_hash_entry *,
   bfd_size_type);
extern bfd_boolean bfd_xcoff_import_symbol
  (bfd *, struct bfd_link_info *, struct bfd_link_hash_entry *, bfd_vma,
   const char *, const char *, const char *, unsigned int);
extern bfd_boolean bfd_xcoff_export_symbol
  (bfd *, struct bfd_link_info *, struct bfd_link_hash_entry *);
extern bfd_boolean bfd_xcoff_link_count_reloc
  (bfd *, struct bfd_link_info *, const char *);
extern bfd_boolean bfd_xcoff_record_link_assignment
  (bfd *, struct bfd_link_info *, const char *);
extern bfd_boolean bfd_xcoff_size_dynamic_sections
  (bfd *, struct bfd_link_info *, const char *, const char *,
   unsigned long, unsigned long, unsigned long, bfd_boolean,
   int, bfd_boolean, bfd_boolean, struct bfd_section **, bfd_boolean);
extern bfd_boolean bfd_xcoff_link_generate_rtinit
  (bfd *, const char *, const char *, bfd_boolean);


extern bfd_boolean bfd_xcoff_ar_archive_set_magic(bfd *, char *);



struct internal_syment;
union internal_auxent;


extern bfd_boolean bfd_coff_get_syment
  (bfd *, struct bfd_symbol *, struct internal_syment *);

extern bfd_boolean bfd_coff_get_auxent
  (bfd *, struct bfd_symbol *, int, union internal_auxent *);

extern bfd_boolean bfd_coff_set_symbol_class
  (bfd *, struct bfd_symbol *, unsigned int);

extern bfd_boolean bfd_m68k_coff_create_embedded_relocs
  (bfd *, struct bfd_link_info *, struct bfd_section *,
   struct bfd_section *, char **);


typedef enum
{
  BFD_ARM_VFP11_FIX_DEFAULT,
  BFD_ARM_VFP11_FIX_NONE,
  BFD_ARM_VFP11_FIX_SCALAR,
  BFD_ARM_VFP11_FIX_VECTOR
} bfd_arm_vfp11_fix;


extern bfd_boolean bfd_arm_allocate_interworking_sections
  (struct bfd_link_info *);

extern bfd_boolean bfd_arm_process_before_allocation
  (bfd *, struct bfd_link_info *, int);

extern bfd_boolean bfd_arm_get_bfd_for_interworking
  (bfd *, struct bfd_link_info *);


extern bfd_boolean bfd_arm_pe_allocate_interworking_sections
  (struct bfd_link_info *);

extern bfd_boolean bfd_arm_pe_process_before_allocation
  (bfd *, struct bfd_link_info *, int);

extern bfd_boolean bfd_arm_pe_get_bfd_for_interworking
  (bfd *, struct bfd_link_info *);


extern bfd_boolean bfd_elf32_arm_allocate_interworking_sections
  (struct bfd_link_info *);

extern bfd_boolean bfd_elf32_arm_process_before_allocation
  (bfd *, struct bfd_link_info *, int);

void bfd_elf32_arm_set_target_relocs
  (struct bfd_link_info *, int, char *, int, int);

extern bfd_boolean bfd_elf32_arm_get_bfd_for_interworking
  (bfd *, struct bfd_link_info *);

extern bfd_boolean bfd_elf32_arm_add_glue_sections_to_bfd
  (bfd *, struct bfd_link_info *);


#define BFD_ARM_SPECIAL_SYM_TYPE_MAP (1 << 0)
#define BFD_ARM_SPECIAL_SYM_TYPE_TAG (1 << 1)
#define BFD_ARM_SPECIAL_SYM_TYPE_OTHER (1 << 2)
#define BFD_ARM_SPECIAL_SYM_TYPE_ANY (~0)
extern bfd_boolean bfd_is_arm_special_symbol_name
  (const char * name, int type);

extern bfd_boolean bfd_is_arm_mapping_symbol_name(const char * name);


extern bfd_boolean bfd_arm_merge_machines(bfd *, bfd *);
extern bfd_boolean bfd_arm_update_notes(bfd *, const char *);
extern unsigned int bfd_arm_get_mach_from_notes(bfd *, const char *);


extern int elf32_arm_setup_section_lists
  (bfd *, struct bfd_link_info *);
extern void elf32_arm_next_input_section
  (struct bfd_link_info *, struct bfd_section *);
extern bfd_boolean elf32_arm_size_stubs
  (bfd *, bfd *, struct bfd_link_info *, bfd_signed_vma,
   struct bfd_section * (*) (const char *, struct bfd_section *, unsigned int),
   void (*) (void));
extern bfd_boolean elf32_arm_build_stubs
  (struct bfd_link_info *);


extern bfd_boolean elf32_arm_fix_exidx_coverage
(struct bfd_section **, unsigned int, struct bfd_link_info *, bfd_boolean);


extern bfd_boolean elf32_tic6x_fix_exidx_coverage
(struct bfd_section **, unsigned int, struct bfd_link_info *, bfd_boolean);


extern unsigned int _bfd_elf_ppc_at_tls_transform
  (unsigned int, unsigned int);

extern unsigned int _bfd_elf_ppc_at_tprel_transform
  (unsigned int, unsigned int);

extern void bfd_elf64_aarch64_init_maps
  (bfd *);

extern void bfd_elf32_aarch64_init_maps
  (bfd *);

extern void bfd_elf64_aarch64_set_options
  (bfd *, struct bfd_link_info *, int, int, int);

extern void bfd_elf32_aarch64_set_options
  (bfd *, struct bfd_link_info *, int, int, int);


#define BFD_AARCH64_SPECIAL_SYM_TYPE_MAP (1 << 0)
#define BFD_AARCH64_SPECIAL_SYM_TYPE_TAG (1 << 1)
#define BFD_AARCH64_SPECIAL_SYM_TYPE_OTHER (1 << 2)
#define BFD_AARCH64_SPECIAL_SYM_TYPE_ANY (~0)
extern bfd_boolean bfd_is_aarch64_special_symbol_name
  (const char * name, int type);


extern int elf64_aarch64_setup_section_lists
  (bfd *, struct bfd_link_info *);
extern void elf64_aarch64_next_input_section
  (struct bfd_link_info *, struct bfd_section *);
extern bfd_boolean elf64_aarch64_size_stubs
  (bfd *, bfd *, struct bfd_link_info *, bfd_signed_vma,
   struct bfd_section * (*) (const char *, struct bfd_section *),
   void (*) (void));
extern bfd_boolean elf64_aarch64_build_stubs
  (struct bfd_link_info *);

extern int elf32_aarch64_setup_section_lists
  (bfd *, struct bfd_link_info *);
extern void elf32_aarch64_next_input_section
  (struct bfd_link_info *, struct bfd_section *);
extern bfd_boolean elf32_aarch64_size_stubs
  (bfd *, bfd *, struct bfd_link_info *, bfd_signed_vma,
   struct bfd_section * (*) (const char *, struct bfd_section *),
   void (*) (void));
extern bfd_boolean elf32_aarch64_build_stubs
  (struct bfd_link_info *);


extern void bfd_ticoff_set_section_load_page(struct bfd_section *, int);
extern int bfd_ticoff_get_section_load_page(struct bfd_section *);


extern bfd_vma bfd_h8300_pad_address(bfd *, bfd_vma);


extern void bfd_elf32_ia64_after_parse(int);
extern void bfd_elf64_ia64_after_parse(int);






struct coff_comdat_info
{

  const char *name;





  long symbol;
};

extern struct coff_comdat_info *bfd_coff_get_comdat_section
  (bfd *, struct bfd_section *);



void bfd_init(void);


bfd *bfd_fopen(const char *filename, const char *target,
    const char *mode, int fd);

bfd_boolean bfd_mmap_file(bfd *abfd, void *addr);

bfd *bfd_memopenr(const char *filename, const char *target, unsigned char *addr, bfd_size_type len);

bfd *bfd_openr (const char *filename, const char *target);

bfd *bfd_fdopenr (const char *filename, const char *target, int fd);

bfd *bfd_openstreamr(const char *, const char *, void *);

bfd *bfd_openr_iovec (const char *filename, const char *target,
    void *(*open) (struct bfd *nbfd,
    void *open_closure),
    void *open_closure,
    file_ptr (*pread) (struct bfd *nbfd,
    void *stream,
    void *buf,
    file_ptr nbytes,
    file_ptr offset),
    int (*close) (struct bfd *nbfd,
    void *stream));

bfd *bfd_openw(const char *filename, const char *target);

bfd_boolean bfd_close(bfd *abfd);

bfd_boolean bfd_close_all_done(bfd *);

bfd *bfd_create(const char *filename, bfd *templ);

bfd_boolean bfd_make_writable(bfd *abfd);

bfd_boolean bfd_make_readable(bfd *abfd);

unsigned long bfd_calc_gnu_debuglink_crc32
   (unsigned long crc, const unsigned char *buf, bfd_size_type len);

char *get_debug_link_info(bfd *abfd, unsigned long *crc32_out);

bfd_boolean separate_debug_file_exists
   (const char *name, const unsigned long crc32);

char *bfd_follow_gnu_debuglink(bfd *abfd, const char *dir);

struct bfd_section *bfd_create_gnu_debuglink_section
   (bfd *abfd, const char *filename);

bfd_boolean bfd_fill_in_gnu_debuglink_section
   (bfd *abfd, struct bfd_section *sect, const char *filename);





#define bfd_put_8(abfd,val,ptr) ((void) (*((unsigned char *) (ptr)) = (val) & 0xff))

#define bfd_put_signed_8 bfd_put_8

#define bfd_get_8(abfd,ptr) (*(unsigned char *) (ptr) & 0xff)

#define bfd_get_signed_8(abfd,ptr) (((*(unsigned char *) (ptr) & 0xff) ^ 0x80) - 0x80)


#define bfd_put_16(abfd,val,ptr) BFD_SEND (abfd, bfd_putx16, ((val),(ptr)))

#define bfd_put_signed_16 bfd_put_16

#define bfd_get_16(abfd,ptr) BFD_SEND (abfd, bfd_getx16, (ptr))

#define bfd_get_signed_16(abfd,ptr) BFD_SEND (abfd, bfd_getx_signed_16, (ptr))


#define bfd_put_32(abfd,val,ptr) BFD_SEND (abfd, bfd_putx32, ((val),(ptr)))

#define bfd_put_signed_32 bfd_put_32

#define bfd_get_32(abfd,ptr) BFD_SEND (abfd, bfd_getx32, (ptr))

#define bfd_get_signed_32(abfd,ptr) BFD_SEND (abfd, bfd_getx_signed_32, (ptr))


#define bfd_put_64(abfd,val,ptr) BFD_SEND (abfd, bfd_putx64, ((val), (ptr)))

#define bfd_put_signed_64 bfd_put_64

#define bfd_get_64(abfd,ptr) BFD_SEND (abfd, bfd_getx64, (ptr))

#define bfd_get_signed_64(abfd,ptr) BFD_SEND (abfd, bfd_getx_signed_64, (ptr))


#define bfd_get(bits,abfd,ptr) ((bits) == 8 ? (bfd_vma) bfd_get_8 (abfd, ptr) : (bits) == 16 ? bfd_get_16 (abfd, ptr) : (bits) == 32 ? bfd_get_32 (abfd, ptr) : (bits) == 64 ? bfd_get_64 (abfd, ptr) : (abort (), (bfd_vma) - 1))






#define bfd_put(bits,abfd,val,ptr) ((bits) == 8 ? bfd_put_8 (abfd, val, ptr) : (bits) == 16 ? bfd_put_16 (abfd, val, ptr) : (bits) == 32 ? bfd_put_32 (abfd, val, ptr) : (bits) == 64 ? bfd_put_64 (abfd, val, ptr) : (abort (), (void) 0))
# 1123 "../bfd/bfd.h"
#define bfd_h_put_8(abfd,val,ptr) bfd_put_8 (abfd, val, ptr)

#define bfd_h_put_signed_8(abfd,val,ptr) bfd_put_8 (abfd, val, ptr)

#define bfd_h_get_8(abfd,ptr) bfd_get_8 (abfd, ptr)

#define bfd_h_get_signed_8(abfd,ptr) bfd_get_signed_8 (abfd, ptr)


#define bfd_h_put_16(abfd,val,ptr) BFD_SEND (abfd, bfd_h_putx16, (val, ptr))

#define bfd_h_put_signed_16 bfd_h_put_16

#define bfd_h_get_16(abfd,ptr) BFD_SEND (abfd, bfd_h_getx16, (ptr))

#define bfd_h_get_signed_16(abfd,ptr) BFD_SEND (abfd, bfd_h_getx_signed_16, (ptr))


#define bfd_h_put_32(abfd,val,ptr) BFD_SEND (abfd, bfd_h_putx32, (val, ptr))

#define bfd_h_put_signed_32 bfd_h_put_32

#define bfd_h_get_32(abfd,ptr) BFD_SEND (abfd, bfd_h_getx32, (ptr))

#define bfd_h_get_signed_32(abfd,ptr) BFD_SEND (abfd, bfd_h_getx_signed_32, (ptr))


#define bfd_h_put_64(abfd,val,ptr) BFD_SEND (abfd, bfd_h_putx64, (val, ptr))

#define bfd_h_put_signed_64 bfd_h_put_64

#define bfd_h_get_64(abfd,ptr) BFD_SEND (abfd, bfd_h_getx64, (ptr))

#define bfd_h_get_signed_64(abfd,ptr) BFD_SEND (abfd, bfd_h_getx_signed_64, (ptr))




#define H_PUT_64 bfd_h_put_64
#define H_PUT_32 bfd_h_put_32
#define H_PUT_16 bfd_h_put_16
#define H_PUT_8 bfd_h_put_8
#define H_PUT_S64 bfd_h_put_signed_64
#define H_PUT_S32 bfd_h_put_signed_32
#define H_PUT_S16 bfd_h_put_signed_16
#define H_PUT_S8 bfd_h_put_signed_8
#define H_GET_64 bfd_h_get_64
#define H_GET_32 bfd_h_get_32
#define H_GET_16 bfd_h_get_16
#define H_GET_8 bfd_h_get_8
#define H_GET_S64 bfd_h_get_signed_64
#define H_GET_S32 bfd_h_get_signed_32
#define H_GET_S16 bfd_h_get_signed_16
#define H_GET_S8 bfd_h_get_signed_8



long bfd_get_mtime(bfd *abfd);

long bfd_get_size(bfd *abfd);






#pragma GCC diagnostic push

#pragma GCC diagnostic ignored "-Wpadded"



typedef struct bfd_section
{


  const char *name;


  int id;


  int index;


  struct bfd_section *next;


  struct bfd_section *prev;




  flagword flags;

#define SEC_NO_FLAGS 0x000



#define SEC_ALLOC 0x001



#define SEC_LOAD 0x002



#define SEC_RELOC 0x004


#define SEC_READONLY 0x008


#define SEC_CODE 0x010


#define SEC_DATA 0x020


#define SEC_ROM 0x040
# 1254 "../bfd/bfd.h"
#define SEC_CONSTRUCTOR 0x080




#define SEC_HAS_CONTENTS 0x100



#define SEC_NEVER_LOAD 0x200


#define SEC_THREAD_LOCAL 0x400







#define SEC_HAS_GOT_REF 0x800






#define SEC_IS_COMMON 0x1000





#define SEC_DEBUGGING 0x2000




#define SEC_IN_MEMORY 0x4000




#define SEC_EXCLUDE 0x8000





#define SEC_SORT_ENTRIES 0x10000





#define SEC_LINK_ONCE 0x20000



#define SEC_LINK_DUPLICATES 0x40000



#define SEC_LINK_DUPLICATES_DISCARD 0x0




#define SEC_LINK_DUPLICATES_ONE_ONLY 0x80000



#define SEC_LINK_DUPLICATES_SAME_SIZE 0x100000




#define SEC_LINK_DUPLICATES_SAME_CONTENTS (SEC_LINK_DUPLICATES_ONE_ONLY | SEC_LINK_DUPLICATES_SAME_SIZE)






#define SEC_LINKER_CREATED 0x200000


#define SEC_KEEP 0x400000



#define SEC_SMALL_DATA 0x800000



#define SEC_MERGE 0x1000000




#define SEC_STRINGS 0x2000000


#define SEC_GROUP 0x4000000
# 1368 "../bfd/bfd.h"
#define SEC_COFF_SHARED_LIBRARY 0x10000000



#define SEC_COFF_SHARED 0x20000000






#define SEC_TIC54X_BLOCK 0x40000000




#define SEC_TIC54X_CLINK 0x80000000






  unsigned int user_set_vma : 1;


  unsigned int linker_mark : 1;



  unsigned int linker_has_input : 1;


  unsigned int gc_mark : 1;
  unsigned int gc_mark_from_eh : 1;






  unsigned int segment_mark : 1;


  unsigned int sec_info_type:3;
#define ELF_INFO_TYPE_NONE 0
#define ELF_INFO_TYPE_STABS 1
#define ELF_INFO_TYPE_MERGE 2
#define ELF_INFO_TYPE_EH_FRAME 3
#define ELF_INFO_TYPE_JUST_SYMS 4
#define SEC_INFO_TYPE_NONE ELF_INFO_TYPE_NONE
#define SEC_INFO_TYPE_STABS ELF_INFO_TYPE_STABS
#define SEC_INFO_TYPE_MERGE ELF_INFO_TYPE_MERGE
#define SEC_INFO_TYPE_EH_FRAME ELF_INFO_TYPE_EH_FRAME
#define SEC_INFO_TYPE_JUST_SYMS ELF_INFO_TYPE_JUST_SYMS


  unsigned int use_rela_p:1;





  unsigned int has_tls_reloc:1;


  unsigned int has_gp_reloc:1;


  unsigned int need_finalize_relax:1;


  unsigned int reloc_done : 1;
# 1450 "../bfd/bfd.h"
  bfd_vma vma;




  bfd_vma lma;




  bfd_size_type size;
# 1470 "../bfd/bfd.h"
  bfd_size_type rawsize;
# 1479 "../bfd/bfd.h"
  bfd_vma output_offset;


  struct bfd_section *output_section;



  unsigned int alignment_power;



  struct reloc_cache_entry *relocation;



  struct reloc_cache_entry **orelocation;


  unsigned reloc_count;





  file_ptr filepos;


  file_ptr rel_filepos;


  file_ptr line_filepos;


  void *userdata;



  unsigned char *contents;


  alent *lineno;


  unsigned int lineno_count;


  unsigned int entsize;



  struct bfd_section *kept_section;



  file_ptr moving_line_filepos;


  int target_index;

  void *used_by_bfd;



  struct relent_chain *constructor_chain;


  bfd *owner;


  struct bfd_symbol *symbol;
  struct bfd_symbol **symbol_ptr_ptr;





  union {
    struct bfd_link_order *link_order;
    struct bfd_section *s;
  } map_head, map_tail;
} asection;




#pragma GCC diagnostic pop
# 1573 "../bfd/bfd.h"
#define BFD_ABS_SECTION_NAME "*ABS*"
#define BFD_UND_SECTION_NAME "*UND*"
#define BFD_COM_SECTION_NAME "*COM*"
#define BFD_IND_SECTION_NAME "*IND*"


extern asection bfd_abs_section;
#define bfd_abs_section_ptr ((asection *) &bfd_abs_section)
#define bfd_is_abs_section(sec) ((sec) == bfd_abs_section_ptr)

extern asection bfd_und_section;
#define bfd_und_section_ptr ((asection *) &bfd_und_section)
#define bfd_is_und_section(sec) ((sec) == bfd_und_section_ptr)

extern asection bfd_com_section;
#define bfd_com_section_ptr ((asection *) &bfd_com_section)

extern asection bfd_ind_section;
#define bfd_ind_section_ptr ((asection *) &bfd_ind_section)
#define bfd_is_ind_section(sec) ((sec) == bfd_ind_section_ptr)

#define bfd_is_const_section(SEC) ( ((SEC) == bfd_abs_section_ptr) || ((SEC) == bfd_und_section_ptr) || ((SEC) == bfd_com_section_ptr) || ((SEC) == bfd_ind_section_ptr))





extern const struct bfd_symbol * const bfd_abs_symbol;
extern const struct bfd_symbol * const bfd_com_symbol;
extern const struct bfd_symbol * const bfd_und_symbol;
extern const struct bfd_symbol * const bfd_ind_symbol;




#define bfd_section_list_remove(ABFD,S) do { asection *_s = S; asection *_next = _s->next; asection *_prev = _s->prev; if (_prev) _prev->next = _next; else (ABFD)->sections = _next; if (_next) _next->prev = _prev; else (ABFD)->section_last = _prev; } while (0)
# 1624 "../bfd/bfd.h"
#define bfd_section_list_append(ABFD,S) do { asection *_s = S; bfd *_abfd = ABFD; _s->next = NULL; if (_abfd->section_last) { _s->prev = _abfd->section_last; _abfd->section_last->next = _s; } else { _s->prev = NULL; _abfd->sections = _s; } _abfd->section_last = _s; } while (0)
# 1643 "../bfd/bfd.h"
#define bfd_section_list_prepend(ABFD,S) do { asection *_s = S; bfd *_abfd = ABFD; _s->prev = NULL; if (_abfd->sections) { _s->next = _abfd->sections; _abfd->sections->prev = _s; } else { _s->next = NULL; _abfd->section_last = _s; } _abfd->sections = _s; } while (0)
# 1662 "../bfd/bfd.h"
#define bfd_section_list_insert_after(ABFD,A,S) do { asection *_a = A; asection *_s = S; asection *_next = _a->next; _s->next = _next; _s->prev = _a; _a->next = _s; if (_next) _next->prev = _s; else (ABFD)->section_last = _s; } while (0)
# 1677 "../bfd/bfd.h"
#define bfd_section_list_insert_before(ABFD,B,S) do { asection *_b = B; asection *_s = S; asection *_prev = _b->prev; _s->prev = _prev; _s->next = _b; _b->prev = _s; if (_prev) _prev->next = _s; else (ABFD)->sections = _s; } while (0)
# 1692 "../bfd/bfd.h"
#define bfd_section_removed_from_list(ABFD,S) ((S)->next == NULL ? (ABFD)->section_last != (S) : (S)->next->prev != (S))


#define BFD_FAKE_SECTION(SEC,FLAGS,SYM,SYM_PTR,NAME,IDX) { NAME, IDX, 0, NULL, NULL, FLAGS, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (struct bfd_section *) &SEC, 0, NULL, NULL, 0, 0, 0, 0, NULL, NULL, NULL, 0, 0, NULL, 0, 0, NULL, NULL, NULL, (struct bfd_symbol *) SYM, (struct bfd_symbol **) SYM_PTR, { NULL }, { NULL } }
# 1736 "../bfd/bfd.h"
void bfd_section_list_clear (bfd *);

asection *bfd_get_section_by_name (bfd *abfd, const char *name);

asection *bfd_get_section_by_name_if
   (bfd *abfd,
    const char *name,
    bfd_boolean (*func) (bfd *abfd, asection *sect, void *obj),
    void *obj);

char *bfd_get_unique_section_name
   (bfd *abfd, const char *templat, int *count);

asection *bfd_make_section_old_way (bfd *abfd, const char *name);

asection *bfd_make_section_anyway_with_flags
   (bfd *abfd, const char *name, flagword flags);

asection *bfd_make_section_anyway (bfd *abfd, const char *name);

asection *bfd_make_section_with_flags
   (bfd *, const char *name, flagword flags);

asection *bfd_make_section (bfd *, const char *name);

bfd_boolean bfd_set_section_flags
   (bfd *abfd, asection *sec, flagword flags);

void bfd_map_over_sections
   (bfd *abfd,
    void (*func) (bfd *abfd, asection *sect, void *obj),
    void *obj);

asection *bfd_sections_find_if
   (bfd *abfd,
    bfd_boolean (*operation) (bfd *abfd, asection *sect, void *obj),
    void *obj);

bfd_boolean bfd_set_section_size
   (bfd *abfd, asection *sec, bfd_size_type val);

bfd_boolean bfd_set_section_contents
   (bfd *abfd, asection *section, const void *data,
    file_ptr offset, bfd_size_type count);

bfd_boolean bfd_get_section_contents
   (bfd *abfd, asection *section, void *location, file_ptr offset,
    bfd_size_type count);

bfd_boolean bfd_get_section_contents_in_window
   (bfd *abfd, asection *section, bfd_window *window,
    file_ptr offset, bfd_size_type count);

bfd_boolean bfd_get_section_contents_in_window_with_mode
   (bfd *abfd, asection *section, bfd_window *window,
    file_ptr offset, bfd_size_type count, bfd_boolean mode);

bfd_boolean bfd_malloc_and_get_section
   (bfd *abfd, asection *section, bfd_byte **buf);

bfd_boolean bfd_copy_private_section_data
   (bfd *ibfd, asection *isec, bfd *obfd, asection *osec);

#define bfd_copy_private_section_data(ibfd,isection,obfd,osection) BFD_SEND (obfd, _bfd_copy_private_section_data, (ibfd, isection, obfd, osection))


bfd_boolean bfd_generic_is_group_section (bfd *, const asection *sec);

bfd_boolean bfd_generic_discard_group (bfd *abfd, asection *group);


void bfd_set_cache_max_open(unsigned int nmax);

bfd_boolean bfd_cache_close_all(void);


enum bfd_architecture
{
  bfd_arch_unknown,
  bfd_arch_obscure,
  bfd_arch_m68k,
#define bfd_mach_m68000 1
#define bfd_mach_m68008 2
#define bfd_mach_m68010 3
#define bfd_mach_m68020 4
#define bfd_mach_m68030 5
#define bfd_mach_m68040 6
#define bfd_mach_m68060 7
#define bfd_mach_cpu32 8
#define bfd_mach_mcf5200 9
#define bfd_mach_mcf5206e 10
#define bfd_mach_mcf5307 11
#define bfd_mach_mcf5407 12
#define bfd_mach_mcf528x 13
#define bfd_mach_mcfv4e 14
#define bfd_mach_mcf521x 15
#define bfd_mach_mcf5249 16
#define bfd_mach_mcf547x 17
#define bfd_mach_mcf548x 18
  bfd_arch_vax,
  bfd_arch_i960,
# 1845 "../bfd/bfd.h"
#define bfd_mach_i960_core 1
#define bfd_mach_i960_ka_sa 2
#define bfd_mach_i960_kb_sb 3
#define bfd_mach_i960_mc 4
#define bfd_mach_i960_xa 5
#define bfd_mach_i960_ca 6
#define bfd_mach_i960_jx 7
#define bfd_mach_i960_hx 8

  bfd_arch_or1k,
#define bfd_mach_or1k 1
#define bfd_mach_or1knd 2

  bfd_arch_or32,

  bfd_arch_a29k,
  bfd_arch_sparc,
#define bfd_mach_sparc 1

#define bfd_mach_sparc_sparclet 2
#define bfd_mach_sparc_sparclite 3
#define bfd_mach_sparc_v8plus 4
#define bfd_mach_sparc_v8plusa 5
#define bfd_mach_sparc_sparclite_le 6
#define bfd_mach_sparc_v9 7
#define bfd_mach_sparc_v9a 8
#define bfd_mach_sparc_v8plusb 9
#define bfd_mach_sparc_v9b 10

#define bfd_mach_sparc_v9_p(mach) ((mach) >= bfd_mach_sparc_v8plus && (mach) <= bfd_mach_sparc_v9b && (mach) != bfd_mach_sparc_sparclite_le)



#define bfd_mach_sparc_64bit_p(mach) ((mach) >= bfd_mach_sparc_v9 && (mach) != bfd_mach_sparc_v8plusb)

  bfd_arch_spu,
#define bfd_mach_spu 256
  bfd_arch_mips,
#define bfd_mach_mips3000 3000
#define bfd_mach_mips3900 3900
#define bfd_mach_mips4000 4000
#define bfd_mach_mips4010 4010
#define bfd_mach_mips4100 4100
#define bfd_mach_mips4111 4111
#define bfd_mach_mips4120 4120
#define bfd_mach_mips4300 4300
#define bfd_mach_mips4400 4400
#define bfd_mach_mips4600 4600
#define bfd_mach_mips4650 4650
#define bfd_mach_mips5000 5000
#define bfd_mach_mips5400 5400
#define bfd_mach_mips5500 5500
#define bfd_mach_mips6000 6000
#define bfd_mach_mips7000 7000
#define bfd_mach_mips8000 8000
#define bfd_mach_mips9000 9000
#define bfd_mach_mips10000 10000
#define bfd_mach_mips12000 12000
#define bfd_mach_mips16 16
#define bfd_mach_mips5 5
#define bfd_mach_mips_sb1 12310201
#define bfd_mach_mipsisa32 32
#define bfd_mach_mipsisa32r2 33
#define bfd_mach_mipsisa64 64
#define bfd_mach_mipsisa64r2 65
  bfd_arch_i386,
#define bfd_mach_i386_i386 1
#define bfd_mach_i386_i8086 2
#define bfd_mach_i386_i386_intel_syntax 3
#define bfd_mach_x64_32 32
#define bfd_mach_x64_32_intel_syntax 33
#define bfd_mach_x86_64 64
#define bfd_mach_x86_64_intel_syntax 65
  bfd_arch_l1om,
#define bfd_mach_l1om 66
#define bfd_mach_l1om_intel_syntax 67
  bfd_arch_k1om,
#define bfd_mach_k1om 68
#define bfd_mach_k1om_intel_syntax 69
  bfd_arch_we32k,
  bfd_arch_tahoe,
  bfd_arch_i860,
  bfd_arch_i370,
  bfd_arch_romp,
  bfd_arch_alliant,
  bfd_arch_convex,
  bfd_arch_m88k,
  bfd_arch_m98k,
  bfd_arch_pyramid,
  bfd_arch_h8300,
#define bfd_mach_h8300 1
#define bfd_mach_h8300h 2
#define bfd_mach_h8300s 3
#define bfd_mach_h8300hn 4
#define bfd_mach_h8300sn 5
#define bfd_mach_h8300sx 6
#define bfd_mach_h8300sxn 7
  bfd_arch_pdp11,
  bfd_arch_plugin,
  bfd_arch_powerpc,
#define bfd_mach_ppc 32
#define bfd_mach_ppc64 64
#define bfd_mach_ppc_403 403
#define bfd_mach_ppc_403gc 4030
#define bfd_mach_ppc_505 505
#define bfd_mach_ppc_601 601
#define bfd_mach_ppc_602 602
#define bfd_mach_ppc_603 603
#define bfd_mach_ppc_ec603e 6031
#define bfd_mach_ppc_604 604
#define bfd_mach_ppc_620 620
#define bfd_mach_ppc_630 630
#define bfd_mach_ppc_750 750
#define bfd_mach_ppc_860 860
#define bfd_mach_ppc_a35 35
#define bfd_mach_ppc_rs64ii 642
#define bfd_mach_ppc_rs64iii 643
#define bfd_mach_ppc_7400 7400
#define bfd_mach_ppc_e500 500
#define bfd_mach_ppc_970 970
  bfd_arch_rs6000,
#define bfd_mach_rs6k 6000
#define bfd_mach_rs6k_rs1 6001
#define bfd_mach_rs6k_rsc 6003
#define bfd_mach_rs6k_rs2 6002
  bfd_arch_hppa,
#define bfd_mach_hppa10 10
#define bfd_mach_hppa11 11
#define bfd_mach_hppa20 20
#define bfd_mach_hppa20w 25
  bfd_arch_d10v,
#define bfd_mach_d10v 1
#define bfd_mach_d10v_ts2 2
#define bfd_mach_d10v_ts3 3
  bfd_arch_d30v,
  bfd_arch_dlx,
  bfd_arch_m68hc11,
  bfd_arch_m68hc12,
#define bfd_mach_m6812_default 0
#define bfd_mach_m6812 1
#define bfd_mach_m6812s 2
  bfd_arch_m9s12x,
  bfd_arch_m9s12xg,
  bfd_arch_z8k,
#define bfd_mach_z8001 1
#define bfd_mach_z8002 2
  bfd_arch_h8500,
  bfd_arch_sh,
#define bfd_mach_sh 1
#define bfd_mach_sh2 0x20
#define bfd_mach_sh_dsp 0x2d
#define bfd_mach_sh2a 0x2a
#define bfd_mach_sh2a_nofpu 0x2b
#define bfd_mach_sh2a_nofpu_or_sh4_nommu_nofpu 0x2a1
#define bfd_mach_sh2a_nofpu_or_sh3_nommu 0x2a2
#define bfd_mach_sh2a_or_sh4 0x2a3
#define bfd_mach_sh2a_or_sh3e 0x2a4
#define bfd_mach_sh2e 0x2e
#define bfd_mach_sh3 0x30
#define bfd_mach_sh3_nommu 0x31
#define bfd_mach_sh3_dsp 0x3d
#define bfd_mach_sh3e 0x3e
#define bfd_mach_sh4 0x40
#define bfd_mach_sh4_nofpu 0x41
#define bfd_mach_sh4_nommu_nofpu 0x42
#define bfd_mach_sh4a 0x4a
#define bfd_mach_sh4a_nofpu 0x4b
#define bfd_mach_sh4al_dsp 0x4d
#define bfd_mach_sh5 0x50
  bfd_arch_alpha,
#define bfd_mach_alpha_ev4 0x10
#define bfd_mach_alpha_ev5 0x20
#define bfd_mach_alpha_ev6 0x30
  bfd_arch_arm,
#define bfd_mach_arm_unknown 0
#define bfd_mach_arm_2 1
#define bfd_mach_arm_2a 2
#define bfd_mach_arm_3 3
#define bfd_mach_arm_3M 4
#define bfd_mach_arm_4 5
#define bfd_mach_arm_4T 6
#define bfd_mach_arm_5 7
#define bfd_mach_arm_5T 8
#define bfd_mach_arm_5TE 9
#define bfd_mach_arm_XScale 10
#define bfd_mach_arm_ep9312 11
#define bfd_mach_arm_iWMMXt 12
#define bfd_mach_arm_iWMMXt2 13
#define bfd_mach_arm_6 14
#define bfd_mach_arm_7 15
#define bfd_mach_arm_7f 16
#define bfd_mach_arm_7s 17
#define bfd_mach_arm_7k 18
  bfd_arch_nds32,
#define bfd_mach_n1 1
#define bfd_mach_n1h 2
#define bfd_mach_n1h_v2 3
#define bfd_mach_n1h_v3 4
#define bfd_mach_n1h_v3m 5
  bfd_arch_ns32k,
  bfd_arch_w65,
  bfd_arch_tic30,
  bfd_arch_tic4x,
#define bfd_mach_tic3x 30
#define bfd_mach_tic4x 40
  bfd_arch_tic54x,
  bfd_arch_tic6x,
  bfd_arch_tic80,
  bfd_arch_v850,
  bfd_arch_v850_rh850,
#define bfd_mach_v850 1
#define bfd_mach_v850e 'E'
#define bfd_mach_v850e1 '1'
#define bfd_mach_v850e2 0x4532
#define bfd_mach_v850e2v3 0x45325633
#define bfd_mach_v850e3v5 0x45335635
  bfd_arch_arc,
#define bfd_mach_arc_5 5
#define bfd_mach_arc_6 6
#define bfd_mach_arc_7 7
#define bfd_mach_arc_8 8
 bfd_arch_m32c,
#define bfd_mach_m16c 0x75
#define bfd_mach_m32c 0x78
  bfd_arch_m32r,
#define bfd_mach_m32r 1
#define bfd_mach_m32rx 'x'
#define bfd_mach_m32r2 '2'
  bfd_arch_mn10200,
  bfd_arch_mn10300,
#define bfd_mach_mn10300 300
#define bfd_mach_am33 330
#define bfd_mach_am33_2 332
  bfd_arch_fr30,
#define bfd_mach_fr30 0x46523330
  bfd_arch_frv,
#define bfd_mach_frv 1
#define bfd_mach_frvsimple 2
#define bfd_mach_fr300 300
#define bfd_mach_fr400 400
#define bfd_mach_fr450 450
#define bfd_mach_frvtomcat 499
#define bfd_mach_fr500 500
#define bfd_mach_fr550 550
  bfd_arch_moxie,
#define bfd_mach_moxie 1
  bfd_arch_ft32,
#define bfd_mach_ft32 1
  bfd_arch_mcore,
  bfd_arch_mep,
#define bfd_mach_mep 1
#define bfd_mach_mep_h1 0x6831
#define bfd_mach_mep_c5 0x6335
  bfd_arch_metag,
#define bfd_mach_metag 1
  bfd_arch_ia64,
#define bfd_mach_ia64_elf64 64
#define bfd_mach_ia64_elf32 32
  bfd_arch_ip2k,
#define bfd_mach_ip2022 1
#define bfd_mach_ip2022ext 2
 bfd_arch_iq2000,
#define bfd_mach_iq2000 1
#define bfd_mach_iq10 2
  bfd_arch_epiphany,
#define bfd_mach_epiphany16 1
#define bfd_mach_epiphany32 2
  bfd_arch_ms1,
  bfd_arch_mt,
#define bfd_mach_ms1 1
#define bfd_mach_mrisc2 2
#define bfd_mach_ms2 3
  bfd_arch_pj,
  bfd_arch_avr,
#define bfd_mach_avr1 1
#define bfd_mach_avr2 2
#define bfd_mach_avr3 3
#define bfd_mach_avr4 4
#define bfd_mach_avr5 5
  bfd_arch_bfin,
#define bfd_mach_bfin 1
  bfd_arch_cr16,
#define bfd_mach_cr16 1
  bfd_arch_cr16c,
#define bfd_mach_cr16c 1
  bfd_arch_crx,
#define bfd_mach_crx 1
  bfd_arch_cris,
#define bfd_mach_cris_v0_v10 255
#define bfd_mach_cris_v32 32
#define bfd_mach_cris_v10_v32 1032
  bfd_arch_rl78,
#define bfd_mach_rl78 0x75
  bfd_arch_rx,
#define bfd_mach_rx 0x75
  bfd_arch_s390,
#define bfd_mach_s390_31 31
#define bfd_mach_s390_64 64
  bfd_arch_score,
#define bfd_mach_score3 3
#define bfd_mach_score7 7
  bfd_arch_openrisc,
  bfd_arch_mmix,
  bfd_arch_xstormy16,
#define bfd_mach_xstormy16 1
  bfd_arch_msp430,
#define bfd_mach_msp11 11
#define bfd_mach_msp110 110
#define bfd_mach_msp12 12
#define bfd_mach_msp13 13
#define bfd_mach_msp14 14
#define bfd_mach_msp15 15
#define bfd_mach_msp16 16
#define bfd_mach_msp21 21
#define bfd_mach_msp31 31
#define bfd_mach_msp32 32
#define bfd_mach_msp33 33
#define bfd_mach_msp41 41
#define bfd_mach_msp42 42
#define bfd_mach_msp43 43
#define bfd_mach_msp44 44
#define bfd_mach_msp430x 45
#define bfd_mach_msp46 46
#define bfd_mach_msp47 47
#define bfd_mach_msp54 54
  bfd_arch_xc16x,
#define bfd_mach_xc16x 1
#define bfd_mach_xc16xl 2
#define bfd_mach_xc16xs 3
  bfd_arch_xgate,
#define bfd_mach_xgate 1
  bfd_arch_xtensa,
#define bfd_mach_xtensa 1
   bfd_arch_maxq,
#define bfd_mach_maxq10 10
#define bfd_mach_maxq20 20
  bfd_arch_z80,
#define bfd_mach_z80strict 1
#define bfd_mach_z80 3
#define bfd_mach_z80full 7
#define bfd_mach_r800 11
  bfd_arch_lm32,
#define bfd_mach_lm32 1
  bfd_arch_microblaze,
  bfd_arch_tilepro,
  bfd_arch_tilegx,
#define bfd_mach_tilepro 1
#define bfd_mach_tilegx 1
#define bfd_mach_tilegx32 2
  bfd_arch_aarch64,
#define bfd_mach_aarch64 0
#define bfd_mach_aarch64_ilp32 32
  bfd_arch_nios2,
#define bfd_mach_nios2 0
#define bfd_mach_nios2r1 1
#define bfd_mach_nios2r2 2
  bfd_arch_visium,
#define bfd_mach_visium 1
  bfd_arch_last
  };

typedef struct bfd_arch_info
{
  int bits_per_word;
  int bits_per_address;
  int bits_per_byte;
  enum bfd_architecture arch;
  unsigned long mach;
  const char *arch_name;
  const char *printable_name;
  unsigned int section_align_power;



  bfd_boolean the_default;
  const struct bfd_arch_info * (*compatible)
    (const struct bfd_arch_info *a, const struct bfd_arch_info *b);

  bfd_boolean (*scan) (const struct bfd_arch_info *, const char *);

  const struct bfd_arch_info *next;
}
bfd_arch_info_type;

const char *bfd_printable_name (bfd *abfd);

const bfd_arch_info_type *bfd_scan_arch (const char *string);

const char **bfd_arch_list (void);

const bfd_arch_info_type *bfd_arch_get_compatible
   (const bfd *abfd, const bfd *bbfd, bfd_boolean accept_unknowns);

void bfd_set_arch_info (bfd *abfd, const bfd_arch_info_type *arg);

enum bfd_architecture bfd_get_arch (bfd *abfd);

unsigned long bfd_get_mach (bfd *abfd);

unsigned int bfd_arch_bits_per_byte (bfd *abfd);

unsigned int bfd_arch_bits_per_address (bfd *abfd);

const bfd_arch_info_type *bfd_get_arch_info (bfd *abfd);

const bfd_arch_info_type *bfd_lookup_arch
   (enum bfd_architecture arch, unsigned long machine);

const char *bfd_printable_arch_mach
   (enum bfd_architecture arch, unsigned long machine);

unsigned int bfd_octets_per_byte (bfd *abfd);

unsigned int bfd_arch_mach_octets_per_byte
   (enum bfd_architecture arch, unsigned long machine);


typedef enum bfd_reloc_status
{

  bfd_reloc_ok,


  bfd_reloc_overflow,


  bfd_reloc_outofrange,


  bfd_reloc_continue,


  bfd_reloc_notsupported,


  bfd_reloc_other,


  bfd_reloc_undefined,





  bfd_reloc_dangerous
 }
 bfd_reloc_status_type;


typedef struct reloc_cache_entry
{

  struct bfd_symbol **sym_ptr_ptr;


  bfd_size_type address;


  bfd_vma addend;


  reloc_howto_type *howto;

}
arelent;

enum complain_overflow
{

  complain_overflow_dont,



  complain_overflow_bitfield,



  complain_overflow_signed,



  complain_overflow_unsigned
};

struct reloc_howto_struct
{






  unsigned int type;



  unsigned int rightshift;




  int size;



  unsigned int bitsize;





  bfd_boolean pc_relative;



  unsigned int bitpos;



  enum complain_overflow complain_on_overflow;





  bfd_reloc_status_type (*special_function)
    (bfd *, arelent *, struct bfd_symbol *, void *, asection *,
     bfd *, char **);


  char *name;
# 2392 "../bfd/bfd.h"
  bfd_boolean partial_inplace;
# 2402 "../bfd/bfd.h"
  bfd_vma src_mask;



  bfd_vma dst_mask;







  bfd_boolean pcrel_offset;
};

#define HOWTO(C,R,S,B,P,BI,O,SF,NAME,INPLACE,MASKSRC,MASKDST,PC) { (unsigned)C, R, S, B, P, BI, O, SF, (char *)NAME, INPLACE, MASKSRC, MASKDST, PC }

#define NEWHOWTO(FUNCTION,NAME,SIZE,REL,IN) HOWTO (0, 0, SIZE, 0, REL, 0, complain_overflow_dont, FUNCTION, NAME, FALSE, 0, 0, IN)



#define EMPTY_HOWTO(C) HOWTO ((C), 0, 0, 0, FALSE, 0, complain_overflow_dont, NULL, NULL, FALSE, 0, 0, FALSE)



#define HOWTO_PREPARE(relocation,symbol) { if (symbol != NULL) { if (bfd_is_com_section (symbol->section)) { relocation = 0; } else { relocation = symbol->value; } } }
# 2442 "../bfd/bfd.h"
unsigned int bfd_get_reloc_size (reloc_howto_type *);

typedef struct relent_chain
{
  arelent relent;
  struct relent_chain *next;
}
arelent_chain;

bfd_reloc_status_type bfd_check_overflow
   (enum complain_overflow how,
    unsigned int bitsize,
    unsigned int rightshift,
    unsigned int addrsize,
    bfd_vma relocation);

bfd_reloc_status_type bfd_perform_relocation
   (bfd *abfd,
    arelent *reloc_entry,
    void *data,
    asection *input_section,
    bfd *output_bfd,
    char **error_message);

bfd_reloc_status_type bfd_install_relocation
   (bfd *abfd,
    arelent *reloc_entry,
    void *data, bfd_vma data_start,
    asection *input_section,
    char **error_message);

enum bfd_reloc_code_real {
  _dummy_first_bfd_reloc_code_real,



  BFD_RELOC_64,
  BFD_RELOC_32,
  BFD_RELOC_26,
  BFD_RELOC_24,
  BFD_RELOC_16,
  BFD_RELOC_14,
  BFD_RELOC_8,






  BFD_RELOC_64_PCREL,
  BFD_RELOC_32_PCREL,
  BFD_RELOC_24_PCREL,
  BFD_RELOC_16_PCREL,
  BFD_RELOC_12_PCREL,
  BFD_RELOC_8_PCREL,


  BFD_RELOC_32_SECREL,


  BFD_RELOC_32_GOT_PCREL,
  BFD_RELOC_16_GOT_PCREL,
  BFD_RELOC_8_GOT_PCREL,
  BFD_RELOC_32_GOTOFF,
  BFD_RELOC_16_GOTOFF,
  BFD_RELOC_LO16_GOTOFF,
  BFD_RELOC_HI16_GOTOFF,
  BFD_RELOC_HI16_S_GOTOFF,
  BFD_RELOC_8_GOTOFF,
  BFD_RELOC_64_PLT_PCREL,
  BFD_RELOC_32_PLT_PCREL,
  BFD_RELOC_24_PLT_PCREL,
  BFD_RELOC_16_PLT_PCREL,
  BFD_RELOC_8_PLT_PCREL,
  BFD_RELOC_64_PLTOFF,
  BFD_RELOC_32_PLTOFF,
  BFD_RELOC_16_PLTOFF,
  BFD_RELOC_LO16_PLTOFF,
  BFD_RELOC_HI16_PLTOFF,
  BFD_RELOC_HI16_S_PLTOFF,
  BFD_RELOC_8_PLTOFF,


  BFD_RELOC_68K_GLOB_DAT,
  BFD_RELOC_68K_JMP_SLOT,
  BFD_RELOC_68K_RELATIVE,


  BFD_RELOC_32_BASEREL,
  BFD_RELOC_16_BASEREL,
  BFD_RELOC_LO16_BASEREL,
  BFD_RELOC_HI16_BASEREL,
  BFD_RELOC_HI16_S_BASEREL,
  BFD_RELOC_8_BASEREL,
  BFD_RELOC_RVA,


  BFD_RELOC_8_FFnn,







  BFD_RELOC_32_PCREL_S2,
  BFD_RELOC_16_PCREL_S2,
  BFD_RELOC_23_PCREL_S2,



  BFD_RELOC_HI22,
  BFD_RELOC_LO10,





  BFD_RELOC_GPREL16,
  BFD_RELOC_GPREL32,


  BFD_RELOC_I960_CALLJ,



  BFD_RELOC_NONE,
  BFD_RELOC_SPARC_WDISP22,
  BFD_RELOC_SPARC22,
  BFD_RELOC_SPARC13,
  BFD_RELOC_SPARC_GOT10,
  BFD_RELOC_SPARC_GOT13,
  BFD_RELOC_SPARC_GOT22,
  BFD_RELOC_SPARC_PC10,
  BFD_RELOC_SPARC_PC22,
  BFD_RELOC_SPARC_WPLT30,
  BFD_RELOC_SPARC_COPY,
  BFD_RELOC_SPARC_GLOB_DAT,
  BFD_RELOC_SPARC_JMP_SLOT,
  BFD_RELOC_SPARC_RELATIVE,
  BFD_RELOC_SPARC_UA16,
  BFD_RELOC_SPARC_UA32,
  BFD_RELOC_SPARC_UA64,


  BFD_RELOC_SPARC_BASE13,
  BFD_RELOC_SPARC_BASE22,


#define BFD_RELOC_SPARC_64 BFD_RELOC_64
  BFD_RELOC_SPARC_10,
  BFD_RELOC_SPARC_11,
  BFD_RELOC_SPARC_OLO10,
  BFD_RELOC_SPARC_HH22,
  BFD_RELOC_SPARC_HM10,
  BFD_RELOC_SPARC_LM22,
  BFD_RELOC_SPARC_PC_HH22,
  BFD_RELOC_SPARC_PC_HM10,
  BFD_RELOC_SPARC_PC_LM22,
  BFD_RELOC_SPARC_WDISP16,
  BFD_RELOC_SPARC_WDISP19,
  BFD_RELOC_SPARC_7,
  BFD_RELOC_SPARC_6,
  BFD_RELOC_SPARC_5,
#define BFD_RELOC_SPARC_DISP64 BFD_RELOC_64_PCREL
  BFD_RELOC_SPARC_PLT32,
  BFD_RELOC_SPARC_PLT64,
  BFD_RELOC_SPARC_HIX22,
  BFD_RELOC_SPARC_LOX10,
  BFD_RELOC_SPARC_H44,
  BFD_RELOC_SPARC_M44,
  BFD_RELOC_SPARC_L44,
  BFD_RELOC_SPARC_REGISTER,


  BFD_RELOC_SPARC_REV32,


  BFD_RELOC_SPARC_TLS_GD_HI22,
  BFD_RELOC_SPARC_TLS_GD_LO10,
  BFD_RELOC_SPARC_TLS_GD_ADD,
  BFD_RELOC_SPARC_TLS_GD_CALL,
  BFD_RELOC_SPARC_TLS_LDM_HI22,
  BFD_RELOC_SPARC_TLS_LDM_LO10,
  BFD_RELOC_SPARC_TLS_LDM_ADD,
  BFD_RELOC_SPARC_TLS_LDM_CALL,
  BFD_RELOC_SPARC_TLS_LDO_HIX22,
  BFD_RELOC_SPARC_TLS_LDO_LOX10,
  BFD_RELOC_SPARC_TLS_LDO_ADD,
  BFD_RELOC_SPARC_TLS_IE_HI22,
  BFD_RELOC_SPARC_TLS_IE_LO10,
  BFD_RELOC_SPARC_TLS_IE_LD,
  BFD_RELOC_SPARC_TLS_IE_LDX,
  BFD_RELOC_SPARC_TLS_IE_ADD,
  BFD_RELOC_SPARC_TLS_LE_HIX22,
  BFD_RELOC_SPARC_TLS_LE_LOX10,
  BFD_RELOC_SPARC_TLS_DTPMOD32,
  BFD_RELOC_SPARC_TLS_DTPMOD64,
  BFD_RELOC_SPARC_TLS_DTPOFF32,
  BFD_RELOC_SPARC_TLS_DTPOFF64,
  BFD_RELOC_SPARC_TLS_TPOFF32,
  BFD_RELOC_SPARC_TLS_TPOFF64,







  BFD_RELOC_ALPHA_GPDISP_HI16,





  BFD_RELOC_ALPHA_GPDISP_LO16,




  BFD_RELOC_ALPHA_GPDISP,
# 2687 "../bfd/bfd.h"
  BFD_RELOC_ALPHA_LITERAL,
  BFD_RELOC_ALPHA_ELF_LITERAL,
  BFD_RELOC_ALPHA_LITUSE,




  BFD_RELOC_ALPHA_HINT,



  BFD_RELOC_ALPHA_LINKAGE,



  BFD_RELOC_ALPHA_CODEADDR,



  BFD_RELOC_ALPHA_GPREL_HI16,
  BFD_RELOC_ALPHA_GPREL_LO16,




  BFD_RELOC_ALPHA_BRSGP,


  BFD_RELOC_ALPHA_TLSGD,
  BFD_RELOC_ALPHA_TLSLDM,
  BFD_RELOC_ALPHA_DTPMOD64,
  BFD_RELOC_ALPHA_GOTDTPREL16,
  BFD_RELOC_ALPHA_DTPREL64,
  BFD_RELOC_ALPHA_DTPREL_HI16,
  BFD_RELOC_ALPHA_DTPREL_LO16,
  BFD_RELOC_ALPHA_DTPREL16,
  BFD_RELOC_ALPHA_GOTTPREL16,
  BFD_RELOC_ALPHA_TPREL64,
  BFD_RELOC_ALPHA_TPREL_HI16,
  BFD_RELOC_ALPHA_TPREL_LO16,
  BFD_RELOC_ALPHA_TPREL16,



  BFD_RELOC_MIPS_JMP,


  BFD_RELOC_MIPS16_JMP,


  BFD_RELOC_MIPS16_GPREL,


  BFD_RELOC_HI16,





  BFD_RELOC_HI16_S,


  BFD_RELOC_LO16,


  BFD_RELOC_HI16_PCREL,


  BFD_RELOC_HI16_S_PCREL,


  BFD_RELOC_LO16_PCREL,


  BFD_RELOC_MIPS16_HI16,





  BFD_RELOC_MIPS16_HI16_S,


  BFD_RELOC_MIPS16_LO16,


  BFD_RELOC_MIPS_LITERAL,


  BFD_RELOC_MIPS_GOT16,
  BFD_RELOC_MIPS_CALL16,
  BFD_RELOC_MIPS_GOT_HI16,
  BFD_RELOC_MIPS_GOT_LO16,
  BFD_RELOC_MIPS_CALL_HI16,
  BFD_RELOC_MIPS_CALL_LO16,
  BFD_RELOC_MIPS_SUB,
  BFD_RELOC_MIPS_GOT_PAGE,
  BFD_RELOC_MIPS_GOT_OFST,
  BFD_RELOC_MIPS_GOT_DISP,
  BFD_RELOC_MIPS_SHIFT5,
  BFD_RELOC_MIPS_SHIFT6,
  BFD_RELOC_MIPS_INSERT_A,
  BFD_RELOC_MIPS_INSERT_B,
  BFD_RELOC_MIPS_DELETE,
  BFD_RELOC_MIPS_HIGHEST,
  BFD_RELOC_MIPS_HIGHER,
  BFD_RELOC_MIPS_SCN_DISP,
  BFD_RELOC_MIPS_REL16,
  BFD_RELOC_MIPS_RELGOT,
  BFD_RELOC_MIPS_JALR,
  BFD_RELOC_MIPS_TLS_DTPMOD32,
  BFD_RELOC_MIPS_TLS_DTPREL32,
  BFD_RELOC_MIPS_TLS_DTPMOD64,
  BFD_RELOC_MIPS_TLS_DTPREL64,
  BFD_RELOC_MIPS_TLS_GD,
  BFD_RELOC_MIPS_TLS_LDM,
  BFD_RELOC_MIPS_TLS_DTPREL_HI16,
  BFD_RELOC_MIPS_TLS_DTPREL_LO16,
  BFD_RELOC_MIPS_TLS_GOTTPREL,
  BFD_RELOC_MIPS_TLS_TPREL32,
  BFD_RELOC_MIPS_TLS_TPREL64,
  BFD_RELOC_MIPS_TLS_TPREL_HI16,
  BFD_RELOC_MIPS_TLS_TPREL_LO16,



  BFD_RELOC_FRV_LABEL16,
  BFD_RELOC_FRV_LABEL24,
  BFD_RELOC_FRV_LO16,
  BFD_RELOC_FRV_HI16,
  BFD_RELOC_FRV_GPREL12,
  BFD_RELOC_FRV_GPRELU12,
  BFD_RELOC_FRV_GPREL32,
  BFD_RELOC_FRV_GPRELHI,
  BFD_RELOC_FRV_GPRELLO,
  BFD_RELOC_FRV_GOT12,
  BFD_RELOC_FRV_GOTHI,
  BFD_RELOC_FRV_GOTLO,
  BFD_RELOC_FRV_FUNCDESC,
  BFD_RELOC_FRV_FUNCDESC_GOT12,
  BFD_RELOC_FRV_FUNCDESC_GOTHI,
  BFD_RELOC_FRV_FUNCDESC_GOTLO,
  BFD_RELOC_FRV_FUNCDESC_VALUE,
  BFD_RELOC_FRV_FUNCDESC_GOTOFF12,
  BFD_RELOC_FRV_FUNCDESC_GOTOFFHI,
  BFD_RELOC_FRV_FUNCDESC_GOTOFFLO,
  BFD_RELOC_FRV_GOTOFF12,
  BFD_RELOC_FRV_GOTOFFHI,
  BFD_RELOC_FRV_GOTOFFLO,
  BFD_RELOC_FRV_GETTLSOFF,
  BFD_RELOC_FRV_TLSDESC_VALUE,
  BFD_RELOC_FRV_GOTTLSDESC12,
  BFD_RELOC_FRV_GOTTLSDESCHI,
  BFD_RELOC_FRV_GOTTLSDESCLO,
  BFD_RELOC_FRV_TLSMOFF12,
  BFD_RELOC_FRV_TLSMOFFHI,
  BFD_RELOC_FRV_TLSMOFFLO,
  BFD_RELOC_FRV_GOTTLSOFF12,
  BFD_RELOC_FRV_GOTTLSOFFHI,
  BFD_RELOC_FRV_GOTTLSOFFLO,
  BFD_RELOC_FRV_TLSOFF,
  BFD_RELOC_FRV_TLSDESC_RELAX,
  BFD_RELOC_FRV_GETTLSOFF_RELAX,
  BFD_RELOC_FRV_TLSOFF_RELAX,
  BFD_RELOC_FRV_TLSMOFF,



  BFD_RELOC_MN10300_GOTOFF24,



  BFD_RELOC_MN10300_GOT32,



  BFD_RELOC_MN10300_GOT24,



  BFD_RELOC_MN10300_GOT16,


  BFD_RELOC_MN10300_COPY,


  BFD_RELOC_MN10300_GLOB_DAT,


  BFD_RELOC_MN10300_JMP_SLOT,


  BFD_RELOC_MN10300_RELATIVE,



  BFD_RELOC_386_GOT32,
  BFD_RELOC_386_PLT32,
  BFD_RELOC_386_COPY,
  BFD_RELOC_386_GLOB_DAT,
  BFD_RELOC_386_JUMP_SLOT,
  BFD_RELOC_386_RELATIVE,
  BFD_RELOC_386_GOTOFF,
  BFD_RELOC_386_GOTPC,
  BFD_RELOC_386_TLS_TPOFF,
  BFD_RELOC_386_TLS_IE,
  BFD_RELOC_386_TLS_GOTIE,
  BFD_RELOC_386_TLS_LE,
  BFD_RELOC_386_TLS_GD,
  BFD_RELOC_386_TLS_LDM,
  BFD_RELOC_386_TLS_LDO_32,
  BFD_RELOC_386_TLS_IE_32,
  BFD_RELOC_386_TLS_LE_32,
  BFD_RELOC_386_TLS_DTPMOD32,
  BFD_RELOC_386_TLS_DTPOFF32,
  BFD_RELOC_386_TLS_TPOFF32,


  BFD_RELOC_X86_64_GOT32,
  BFD_RELOC_X86_64_PLT32,
  BFD_RELOC_X86_64_COPY,
  BFD_RELOC_X86_64_GLOB_DAT,
  BFD_RELOC_X86_64_JUMP_SLOT,
  BFD_RELOC_X86_64_RELATIVE,
  BFD_RELOC_X86_64_GOTPCREL,
  BFD_RELOC_X86_64_32S,
  BFD_RELOC_X86_64_DTPMOD64,
  BFD_RELOC_X86_64_DTPOFF64,
  BFD_RELOC_X86_64_TPOFF64,
  BFD_RELOC_X86_64_TLSGD,
  BFD_RELOC_X86_64_TLSLD,
  BFD_RELOC_X86_64_DTPOFF32,
  BFD_RELOC_X86_64_GOTTPOFF,
  BFD_RELOC_X86_64_TPOFF32,
  BFD_RELOC_X86_64_GOTOFF64,
  BFD_RELOC_X86_64_GOTPC32,


  BFD_RELOC_NS32K_IMM_8,
  BFD_RELOC_NS32K_IMM_16,
  BFD_RELOC_NS32K_IMM_32,
  BFD_RELOC_NS32K_IMM_8_PCREL,
  BFD_RELOC_NS32K_IMM_16_PCREL,
  BFD_RELOC_NS32K_IMM_32_PCREL,
  BFD_RELOC_NS32K_DISP_8,
  BFD_RELOC_NS32K_DISP_16,
  BFD_RELOC_NS32K_DISP_32,
  BFD_RELOC_NS32K_DISP_8_PCREL,
  BFD_RELOC_NS32K_DISP_16_PCREL,
  BFD_RELOC_NS32K_DISP_32_PCREL,


  BFD_RELOC_PDP11_DISP_8_PCREL,
  BFD_RELOC_PDP11_DISP_6_PCREL,


  BFD_RELOC_PJ_CODE_HI16,
  BFD_RELOC_PJ_CODE_LO16,
  BFD_RELOC_PJ_CODE_DIR16,
  BFD_RELOC_PJ_CODE_DIR32,
  BFD_RELOC_PJ_CODE_REL16,
  BFD_RELOC_PJ_CODE_REL32,


  BFD_RELOC_PPC_B26,
  BFD_RELOC_PPC_BA26,
  BFD_RELOC_PPC_TOC16,
  BFD_RELOC_PPC_B16,
  BFD_RELOC_PPC_B16_BRTAKEN,
  BFD_RELOC_PPC_B16_BRNTAKEN,
  BFD_RELOC_PPC_BA16,
  BFD_RELOC_PPC_BA16_BRTAKEN,
  BFD_RELOC_PPC_BA16_BRNTAKEN,
  BFD_RELOC_PPC_COPY,
  BFD_RELOC_PPC_GLOB_DAT,
  BFD_RELOC_PPC_JMP_SLOT,
  BFD_RELOC_PPC_RELATIVE,
  BFD_RELOC_PPC_LOCAL24PC,
  BFD_RELOC_PPC_EMB_NADDR32,
  BFD_RELOC_PPC_EMB_NADDR16,
  BFD_RELOC_PPC_EMB_NADDR16_LO,
  BFD_RELOC_PPC_EMB_NADDR16_HI,
  BFD_RELOC_PPC_EMB_NADDR16_HA,
  BFD_RELOC_PPC_EMB_SDAI16,
  BFD_RELOC_PPC_EMB_SDA2I16,
  BFD_RELOC_PPC_EMB_SDA2REL,
  BFD_RELOC_PPC_EMB_SDA21,
  BFD_RELOC_PPC_EMB_MRKREF,
  BFD_RELOC_PPC_EMB_RELSEC16,
  BFD_RELOC_PPC_EMB_RELST_LO,
  BFD_RELOC_PPC_EMB_RELST_HI,
  BFD_RELOC_PPC_EMB_RELST_HA,
  BFD_RELOC_PPC_EMB_BIT_FLD,
  BFD_RELOC_PPC_EMB_RELSDA,
  BFD_RELOC_PPC64_HIGHER,
  BFD_RELOC_PPC64_HIGHER_S,
  BFD_RELOC_PPC64_HIGHEST,
  BFD_RELOC_PPC64_HIGHEST_S,
  BFD_RELOC_PPC64_TOC16_LO,
  BFD_RELOC_PPC64_TOC16_HI,
  BFD_RELOC_PPC64_TOC16_HA,
  BFD_RELOC_PPC64_TOC,
  BFD_RELOC_PPC64_PLTGOT16,
  BFD_RELOC_PPC64_PLTGOT16_LO,
  BFD_RELOC_PPC64_PLTGOT16_HI,
  BFD_RELOC_PPC64_PLTGOT16_HA,
  BFD_RELOC_PPC64_ADDR16_DS,
  BFD_RELOC_PPC64_ADDR16_LO_DS,
  BFD_RELOC_PPC64_GOT16_DS,
  BFD_RELOC_PPC64_GOT16_LO_DS,
  BFD_RELOC_PPC64_PLT16_LO_DS,
  BFD_RELOC_PPC64_SECTOFF_DS,
  BFD_RELOC_PPC64_SECTOFF_LO_DS,
  BFD_RELOC_PPC64_TOC16_DS,
  BFD_RELOC_PPC64_TOC16_LO_DS,
  BFD_RELOC_PPC64_PLTGOT16_DS,
  BFD_RELOC_PPC64_PLTGOT16_LO_DS,


  BFD_RELOC_PPC_TLS,
  BFD_RELOC_PPC_DTPMOD,
  BFD_RELOC_PPC_TPREL16,
  BFD_RELOC_PPC_TPREL16_LO,
  BFD_RELOC_PPC_TPREL16_HI,
  BFD_RELOC_PPC_TPREL16_HA,
  BFD_RELOC_PPC_TPREL,
  BFD_RELOC_PPC_DTPREL16,
  BFD_RELOC_PPC_DTPREL16_LO,
  BFD_RELOC_PPC_DTPREL16_HI,
  BFD_RELOC_PPC_DTPREL16_HA,
  BFD_RELOC_PPC_DTPREL,
  BFD_RELOC_PPC_GOT_TLSGD16,
  BFD_RELOC_PPC_GOT_TLSGD16_LO,
  BFD_RELOC_PPC_GOT_TLSGD16_HI,
  BFD_RELOC_PPC_GOT_TLSGD16_HA,
  BFD_RELOC_PPC_GOT_TLSLD16,
  BFD_RELOC_PPC_GOT_TLSLD16_LO,
  BFD_RELOC_PPC_GOT_TLSLD16_HI,
  BFD_RELOC_PPC_GOT_TLSLD16_HA,
  BFD_RELOC_PPC_GOT_TPREL16,
  BFD_RELOC_PPC_GOT_TPREL16_LO,
  BFD_RELOC_PPC_GOT_TPREL16_HI,
  BFD_RELOC_PPC_GOT_TPREL16_HA,
  BFD_RELOC_PPC_GOT_DTPREL16,
  BFD_RELOC_PPC_GOT_DTPREL16_LO,
  BFD_RELOC_PPC_GOT_DTPREL16_HI,
  BFD_RELOC_PPC_GOT_DTPREL16_HA,
  BFD_RELOC_PPC64_TPREL16_DS,
  BFD_RELOC_PPC64_TPREL16_LO_DS,
  BFD_RELOC_PPC64_TPREL16_HIGHER,
  BFD_RELOC_PPC64_TPREL16_HIGHERA,
  BFD_RELOC_PPC64_TPREL16_HIGHEST,
  BFD_RELOC_PPC64_TPREL16_HIGHESTA,
  BFD_RELOC_PPC64_DTPREL16_DS,
  BFD_RELOC_PPC64_DTPREL16_LO_DS,
  BFD_RELOC_PPC64_DTPREL16_HIGHER,
  BFD_RELOC_PPC64_DTPREL16_HIGHERA,
  BFD_RELOC_PPC64_DTPREL16_HIGHEST,
  BFD_RELOC_PPC64_DTPREL16_HIGHESTA,


  BFD_RELOC_I370_D12,




  BFD_RELOC_CTOR,



  BFD_RELOC_ARM_PCREL_BRANCH,




  BFD_RELOC_ARM_PCREL_BLX,




  BFD_RELOC_THUMB_PCREL_BLX,






  BFD_RELOC_THUMB_PCREL_BRANCH7,
  BFD_RELOC_THUMB_PCREL_BRANCH9,
  BFD_RELOC_THUMB_PCREL_BRANCH12,
  BFD_RELOC_THUMB_PCREL_BRANCH20,
  BFD_RELOC_THUMB_PCREL_BRANCH23,
  BFD_RELOC_THUMB_PCREL_BRANCH25,


  BFD_RELOC_ARM_OFFSET_IMM,


  BFD_RELOC_ARM_THUMB_OFFSET,



  BFD_RELOC_ARM_TARGET1,


  BFD_RELOC_ARM_ROSEGREL32,


  BFD_RELOC_ARM_SBREL32,




  BFD_RELOC_ARM_TARGET2,


  BFD_RELOC_ARM_PREL31,


  BFD_RELOC_ARM_JUMP_SLOT,
  BFD_RELOC_ARM_GLOB_DAT,
  BFD_RELOC_ARM_GOT32,
  BFD_RELOC_ARM_PLT32,
  BFD_RELOC_ARM_RELATIVE,
  BFD_RELOC_ARM_GOTOFF,
  BFD_RELOC_ARM_GOTPC,


  BFD_RELOC_ARM_TLS_GD32,
  BFD_RELOC_ARM_TLS_LDO32,
  BFD_RELOC_ARM_TLS_LDM32,
  BFD_RELOC_ARM_TLS_DTPOFF32,
  BFD_RELOC_ARM_TLS_DTPMOD32,
  BFD_RELOC_ARM_TLS_TPOFF32,
  BFD_RELOC_ARM_TLS_IE32,
  BFD_RELOC_ARM_TLS_LE32,



  BFD_RELOC_ARM_IMMEDIATE,
  BFD_RELOC_ARM_ADRL_IMMEDIATE,
  BFD_RELOC_ARM_T32_IMMEDIATE,
  BFD_RELOC_ARM_T32_IMM12,
  BFD_RELOC_ARM_T32_ADD_PC12,
  BFD_RELOC_ARM_SHIFT_IMM,
  BFD_RELOC_ARM_SMI,
  BFD_RELOC_ARM_SWI,
  BFD_RELOC_ARM_MULTI,
  BFD_RELOC_ARM_CP_OFF_IMM,
  BFD_RELOC_ARM_CP_OFF_IMM_S2,
  BFD_RELOC_ARM_ADR_IMM,
  BFD_RELOC_ARM_LDR_IMM,
  BFD_RELOC_ARM_LITERAL,
  BFD_RELOC_ARM_IN_POOL,
  BFD_RELOC_ARM_OFFSET_IMM8,
  BFD_RELOC_ARM_T32_OFFSET_U8,
  BFD_RELOC_ARM_T32_OFFSET_IMM,
  BFD_RELOC_ARM_HWLITERAL,
  BFD_RELOC_ARM_THUMB_ADD,
  BFD_RELOC_ARM_THUMB_IMM,
  BFD_RELOC_ARM_THUMB_SHIFT,


  BFD_RELOC_SH_PCDISP8BY2,
  BFD_RELOC_SH_PCDISP12BY2,
  BFD_RELOC_SH_IMM3,
  BFD_RELOC_SH_IMM3U,
  BFD_RELOC_SH_DISP12,
  BFD_RELOC_SH_DISP12BY2,
  BFD_RELOC_SH_DISP12BY4,
  BFD_RELOC_SH_DISP12BY8,
  BFD_RELOC_SH_DISP20,
  BFD_RELOC_SH_DISP20BY8,
  BFD_RELOC_SH_IMM4,
  BFD_RELOC_SH_IMM4BY2,
  BFD_RELOC_SH_IMM4BY4,
  BFD_RELOC_SH_IMM8,
  BFD_RELOC_SH_IMM8BY2,
  BFD_RELOC_SH_IMM8BY4,
  BFD_RELOC_SH_PCRELIMM8BY2,
  BFD_RELOC_SH_PCRELIMM8BY4,
  BFD_RELOC_SH_SWITCH16,
  BFD_RELOC_SH_SWITCH32,
  BFD_RELOC_SH_USES,
  BFD_RELOC_SH_COUNT,
  BFD_RELOC_SH_ALIGN,
  BFD_RELOC_SH_CODE,
  BFD_RELOC_SH_DATA,
  BFD_RELOC_SH_LABEL,
  BFD_RELOC_SH_LOOP_START,
  BFD_RELOC_SH_LOOP_END,
  BFD_RELOC_SH_COPY,
  BFD_RELOC_SH_GLOB_DAT,
  BFD_RELOC_SH_JMP_SLOT,
  BFD_RELOC_SH_RELATIVE,
  BFD_RELOC_SH_GOTPC,
  BFD_RELOC_SH_GOT_LOW16,
  BFD_RELOC_SH_GOT_MEDLOW16,
  BFD_RELOC_SH_GOT_MEDHI16,
  BFD_RELOC_SH_GOT_HI16,
  BFD_RELOC_SH_GOTPLT_LOW16,
  BFD_RELOC_SH_GOTPLT_MEDLOW16,
  BFD_RELOC_SH_GOTPLT_MEDHI16,
  BFD_RELOC_SH_GOTPLT_HI16,
  BFD_RELOC_SH_PLT_LOW16,
  BFD_RELOC_SH_PLT_MEDLOW16,
  BFD_RELOC_SH_PLT_MEDHI16,
  BFD_RELOC_SH_PLT_HI16,
  BFD_RELOC_SH_GOTOFF_LOW16,
  BFD_RELOC_SH_GOTOFF_MEDLOW16,
  BFD_RELOC_SH_GOTOFF_MEDHI16,
  BFD_RELOC_SH_GOTOFF_HI16,
  BFD_RELOC_SH_GOTPC_LOW16,
  BFD_RELOC_SH_GOTPC_MEDLOW16,
  BFD_RELOC_SH_GOTPC_MEDHI16,
  BFD_RELOC_SH_GOTPC_HI16,
  BFD_RELOC_SH_COPY64,
  BFD_RELOC_SH_GLOB_DAT64,
  BFD_RELOC_SH_JMP_SLOT64,
  BFD_RELOC_SH_RELATIVE64,
  BFD_RELOC_SH_GOT10BY4,
  BFD_RELOC_SH_GOT10BY8,
  BFD_RELOC_SH_GOTPLT10BY4,
  BFD_RELOC_SH_GOTPLT10BY8,
  BFD_RELOC_SH_GOTPLT32,
  BFD_RELOC_SH_SHMEDIA_CODE,
  BFD_RELOC_SH_IMMU5,
  BFD_RELOC_SH_IMMS6,
  BFD_RELOC_SH_IMMS6BY32,
  BFD_RELOC_SH_IMMU6,
  BFD_RELOC_SH_IMMS10,
  BFD_RELOC_SH_IMMS10BY2,
  BFD_RELOC_SH_IMMS10BY4,
  BFD_RELOC_SH_IMMS10BY8,
  BFD_RELOC_SH_IMMS16,
  BFD_RELOC_SH_IMMU16,
  BFD_RELOC_SH_IMM_LOW16,
  BFD_RELOC_SH_IMM_LOW16_PCREL,
  BFD_RELOC_SH_IMM_MEDLOW16,
  BFD_RELOC_SH_IMM_MEDLOW16_PCREL,
  BFD_RELOC_SH_IMM_MEDHI16,
  BFD_RELOC_SH_IMM_MEDHI16_PCREL,
  BFD_RELOC_SH_IMM_HI16,
  BFD_RELOC_SH_IMM_HI16_PCREL,
  BFD_RELOC_SH_PT_16,
  BFD_RELOC_SH_TLS_GD_32,
  BFD_RELOC_SH_TLS_LD_32,
  BFD_RELOC_SH_TLS_LDO_32,
  BFD_RELOC_SH_TLS_IE_32,
  BFD_RELOC_SH_TLS_LE_32,
  BFD_RELOC_SH_TLS_DTPMOD32,
  BFD_RELOC_SH_TLS_DTPOFF32,
  BFD_RELOC_SH_TLS_TPOFF32,





  BFD_RELOC_ARC_B22_PCREL,




  BFD_RELOC_ARC_B26,


  BFD_RELOC_BFIN_16_IMM,


  BFD_RELOC_BFIN_16_HIGH,


  BFD_RELOC_BFIN_4_PCREL,


  BFD_RELOC_BFIN_5_PCREL,


  BFD_RELOC_BFIN_16_LOW,


  BFD_RELOC_BFIN_10_PCREL,


  BFD_RELOC_BFIN_11_PCREL,


  BFD_RELOC_BFIN_12_PCREL_JUMP,


  BFD_RELOC_BFIN_12_PCREL_JUMP_S,


  BFD_RELOC_BFIN_24_PCREL_CALL_X,


  BFD_RELOC_BFIN_24_PCREL_JUMP_L,


  BFD_RELOC_BFIN_GOT,


  BFD_RELOC_BFIN_PLTPC,


  BFD_ARELOC_BFIN_PUSH,


  BFD_ARELOC_BFIN_CONST,


  BFD_ARELOC_BFIN_ADD,


  BFD_ARELOC_BFIN_SUB,


  BFD_ARELOC_BFIN_MULT,


  BFD_ARELOC_BFIN_DIV,


  BFD_ARELOC_BFIN_MOD,


  BFD_ARELOC_BFIN_LSHIFT,


  BFD_ARELOC_BFIN_RSHIFT,


  BFD_ARELOC_BFIN_AND,


  BFD_ARELOC_BFIN_OR,


  BFD_ARELOC_BFIN_XOR,


  BFD_ARELOC_BFIN_LAND,


  BFD_ARELOC_BFIN_LOR,


  BFD_ARELOC_BFIN_LEN,


  BFD_ARELOC_BFIN_NEG,


  BFD_ARELOC_BFIN_COMP,


  BFD_ARELOC_BFIN_PAGE,


  BFD_ARELOC_BFIN_HWPAGE,


  BFD_ARELOC_BFIN_ADDR,




  BFD_RELOC_D10V_10_PCREL_R,






  BFD_RELOC_D10V_10_PCREL_L,



  BFD_RELOC_D10V_18,



  BFD_RELOC_D10V_18_PCREL,



  BFD_RELOC_D30V_6,



  BFD_RELOC_D30V_9_PCREL,





  BFD_RELOC_D30V_9_PCREL_R,



  BFD_RELOC_D30V_15,



  BFD_RELOC_D30V_15_PCREL,





  BFD_RELOC_D30V_15_PCREL_R,



  BFD_RELOC_D30V_21,



  BFD_RELOC_D30V_21_PCREL,





  BFD_RELOC_D30V_21_PCREL_R,


  BFD_RELOC_D30V_32,


  BFD_RELOC_D30V_32_PCREL,


  BFD_RELOC_DLX_HI16_S,


  BFD_RELOC_DLX_LO16,


  BFD_RELOC_DLX_JMP26,


  BFD_RELOC_M32C_HI8,



  BFD_RELOC_M32R_24,


  BFD_RELOC_M32R_10_PCREL,


  BFD_RELOC_M32R_18_PCREL,


  BFD_RELOC_M32R_26_PCREL,



  BFD_RELOC_M32R_HI16_ULO,



  BFD_RELOC_M32R_HI16_SLO,


  BFD_RELOC_M32R_LO16,



  BFD_RELOC_M32R_SDA16,


  BFD_RELOC_M32R_GOT24,
  BFD_RELOC_M32R_26_PLTREL,
  BFD_RELOC_M32R_COPY,
  BFD_RELOC_M32R_GLOB_DAT,
  BFD_RELOC_M32R_JMP_SLOT,
  BFD_RELOC_M32R_RELATIVE,
  BFD_RELOC_M32R_GOTOFF,
  BFD_RELOC_M32R_GOTOFF_HI_ULO,
  BFD_RELOC_M32R_GOTOFF_HI_SLO,
  BFD_RELOC_M32R_GOTOFF_LO,
  BFD_RELOC_M32R_GOTPC24,
  BFD_RELOC_M32R_GOT16_HI_ULO,
  BFD_RELOC_M32R_GOT16_HI_SLO,
  BFD_RELOC_M32R_GOT16_LO,
  BFD_RELOC_M32R_GOTPC_HI_ULO,
  BFD_RELOC_M32R_GOTPC_HI_SLO,
  BFD_RELOC_M32R_GOTPC_LO,


  BFD_RELOC_V850_9_PCREL,


  BFD_RELOC_V850_22_PCREL,


  BFD_RELOC_V850_SDA_16_16_OFFSET,



  BFD_RELOC_V850_SDA_15_16_OFFSET,


  BFD_RELOC_V850_ZDA_16_16_OFFSET,



  BFD_RELOC_V850_ZDA_15_16_OFFSET,



  BFD_RELOC_V850_TDA_6_8_OFFSET,



  BFD_RELOC_V850_TDA_7_8_OFFSET,


  BFD_RELOC_V850_TDA_7_7_OFFSET,


  BFD_RELOC_V850_TDA_16_16_OFFSET,



  BFD_RELOC_V850_TDA_4_5_OFFSET,


  BFD_RELOC_V850_TDA_4_4_OFFSET,



  BFD_RELOC_V850_SDA_16_16_SPLIT_OFFSET,



  BFD_RELOC_V850_ZDA_16_16_SPLIT_OFFSET,


  BFD_RELOC_V850_CALLT_6_7_OFFSET,


  BFD_RELOC_V850_CALLT_16_16_OFFSET,


  BFD_RELOC_V850_LONGCALL,


  BFD_RELOC_V850_LONGJUMP,


  BFD_RELOC_V850_ALIGN,



  BFD_RELOC_V850_LO16_SPLIT_OFFSET,



  BFD_RELOC_MN10300_32_PCREL,



  BFD_RELOC_MN10300_16_PCREL,




  BFD_RELOC_TIC30_LDP,




  BFD_RELOC_TIC54X_PARTLS7,




  BFD_RELOC_TIC54X_PARTMS9,


  BFD_RELOC_TIC54X_23,




  BFD_RELOC_TIC54X_16_OF_23,




  BFD_RELOC_TIC54X_MS7_OF_23,


  BFD_RELOC_FR30_48,



  BFD_RELOC_FR30_20,



  BFD_RELOC_FR30_6_IN_4,



  BFD_RELOC_FR30_8_IN_8,



  BFD_RELOC_FR30_9_IN_8,



  BFD_RELOC_FR30_10_IN_8,



  BFD_RELOC_FR30_9_PCREL,



  BFD_RELOC_FR30_12_PCREL,


  BFD_RELOC_MCORE_PCREL_IMM8BY4,
  BFD_RELOC_MCORE_PCREL_IMM11BY2,
  BFD_RELOC_MCORE_PCREL_IMM4BY2,
  BFD_RELOC_MCORE_PCREL_32,
  BFD_RELOC_MCORE_PCREL_JSR_IMM11BY2,
  BFD_RELOC_MCORE_RVA,


  BFD_RELOC_MMIX_GETA,
  BFD_RELOC_MMIX_GETA_1,
  BFD_RELOC_MMIX_GETA_2,
  BFD_RELOC_MMIX_GETA_3,


  BFD_RELOC_MMIX_CBRANCH,
  BFD_RELOC_MMIX_CBRANCH_J,
  BFD_RELOC_MMIX_CBRANCH_1,
  BFD_RELOC_MMIX_CBRANCH_2,
  BFD_RELOC_MMIX_CBRANCH_3,


  BFD_RELOC_MMIX_PUSHJ,
  BFD_RELOC_MMIX_PUSHJ_1,
  BFD_RELOC_MMIX_PUSHJ_2,
  BFD_RELOC_MMIX_PUSHJ_3,
  BFD_RELOC_MMIX_PUSHJ_STUBBABLE,


  BFD_RELOC_MMIX_JMP,
  BFD_RELOC_MMIX_JMP_1,
  BFD_RELOC_MMIX_JMP_2,
  BFD_RELOC_MMIX_JMP_3,



  BFD_RELOC_MMIX_ADDR19,


  BFD_RELOC_MMIX_ADDR27,



  BFD_RELOC_MMIX_REG_OR_BYTE,



  BFD_RELOC_MMIX_REG,



  BFD_RELOC_MMIX_BASE_PLUS_OFFSET,



  BFD_RELOC_MMIX_LOCAL,



  BFD_RELOC_AVR_7_PCREL,



  BFD_RELOC_AVR_13_PCREL,



  BFD_RELOC_AVR_16_PM,



  BFD_RELOC_AVR_LO8_LDI,



  BFD_RELOC_AVR_HI8_LDI,



  BFD_RELOC_AVR_HH8_LDI,



  BFD_RELOC_AVR_LO8_LDI_NEG,




  BFD_RELOC_AVR_HI8_LDI_NEG,




  BFD_RELOC_AVR_HH8_LDI_NEG,



  BFD_RELOC_AVR_LO8_LDI_PM,



  BFD_RELOC_AVR_HI8_LDI_PM,



  BFD_RELOC_AVR_HH8_LDI_PM,



  BFD_RELOC_AVR_LO8_LDI_PM_NEG,




  BFD_RELOC_AVR_HI8_LDI_PM_NEG,




  BFD_RELOC_AVR_HH8_LDI_PM_NEG,



  BFD_RELOC_AVR_CALL,



  BFD_RELOC_AVR_LDI,



  BFD_RELOC_AVR_6,



  BFD_RELOC_AVR_6_ADIW,


  BFD_RELOC_390_12,


  BFD_RELOC_390_GOT12,


  BFD_RELOC_390_PLT32,


  BFD_RELOC_390_COPY,


  BFD_RELOC_390_GLOB_DAT,


  BFD_RELOC_390_JMP_SLOT,


  BFD_RELOC_390_RELATIVE,


  BFD_RELOC_390_GOTPC,


  BFD_RELOC_390_GOT16,


  BFD_RELOC_390_PC16DBL,


  BFD_RELOC_390_PLT16DBL,


  BFD_RELOC_390_PC32DBL,


  BFD_RELOC_390_PLT32DBL,


  BFD_RELOC_390_GOTPCDBL,


  BFD_RELOC_390_GOT64,


  BFD_RELOC_390_PLT64,


  BFD_RELOC_390_GOTENT,


  BFD_RELOC_390_GOTOFF64,


  BFD_RELOC_390_GOTPLT12,


  BFD_RELOC_390_GOTPLT16,


  BFD_RELOC_390_GOTPLT32,


  BFD_RELOC_390_GOTPLT64,


  BFD_RELOC_390_GOTPLTENT,


  BFD_RELOC_390_PLTOFF16,


  BFD_RELOC_390_PLTOFF32,


  BFD_RELOC_390_PLTOFF64,


  BFD_RELOC_390_TLS_LOAD,
  BFD_RELOC_390_TLS_GDCALL,
  BFD_RELOC_390_TLS_LDCALL,
  BFD_RELOC_390_TLS_GD32,
  BFD_RELOC_390_TLS_GD64,
  BFD_RELOC_390_TLS_GOTIE12,
  BFD_RELOC_390_TLS_GOTIE32,
  BFD_RELOC_390_TLS_GOTIE64,
  BFD_RELOC_390_TLS_LDM32,
  BFD_RELOC_390_TLS_LDM64,
  BFD_RELOC_390_TLS_IE32,
  BFD_RELOC_390_TLS_IE64,
  BFD_RELOC_390_TLS_IEENT,
  BFD_RELOC_390_TLS_LE32,
  BFD_RELOC_390_TLS_LE64,
  BFD_RELOC_390_TLS_LDO32,
  BFD_RELOC_390_TLS_LDO64,
  BFD_RELOC_390_TLS_DTPMOD,
  BFD_RELOC_390_TLS_DTPOFF,
  BFD_RELOC_390_TLS_TPOFF,


  BFD_RELOC_390_20,
  BFD_RELOC_390_GOT20,
  BFD_RELOC_390_GOTPLT20,
  BFD_RELOC_390_TLS_GOTIE20,


  BFD_RELOC_IP2K_FR9,


  BFD_RELOC_IP2K_BANK,


  BFD_RELOC_IP2K_ADDR16CJP,


  BFD_RELOC_IP2K_PAGE3,


  BFD_RELOC_IP2K_LO8DATA,
  BFD_RELOC_IP2K_HI8DATA,
  BFD_RELOC_IP2K_EX8DATA,


  BFD_RELOC_IP2K_LO8INSN,
  BFD_RELOC_IP2K_HI8INSN,


  BFD_RELOC_IP2K_PC_SKIP,


  BFD_RELOC_IP2K_TEXT,


  BFD_RELOC_IP2K_FR_OFFSET,


  BFD_RELOC_VPE4KMATH_DATA,
  BFD_RELOC_VPE4KMATH_INSN,
# 3907 "../bfd/bfd.h"
  BFD_RELOC_VTABLE_INHERIT,
  BFD_RELOC_VTABLE_ENTRY,


  BFD_RELOC_IA64_IMM14,
  BFD_RELOC_IA64_IMM22,
  BFD_RELOC_IA64_IMM64,
  BFD_RELOC_IA64_DIR32MSB,
  BFD_RELOC_IA64_DIR32LSB,
  BFD_RELOC_IA64_DIR64MSB,
  BFD_RELOC_IA64_DIR64LSB,
  BFD_RELOC_IA64_GPREL22,
  BFD_RELOC_IA64_GPREL64I,
  BFD_RELOC_IA64_GPREL32MSB,
  BFD_RELOC_IA64_GPREL32LSB,
  BFD_RELOC_IA64_GPREL64MSB,
  BFD_RELOC_IA64_GPREL64LSB,
  BFD_RELOC_IA64_LTOFF22,
  BFD_RELOC_IA64_LTOFF64I,
  BFD_RELOC_IA64_PLTOFF22,
  BFD_RELOC_IA64_PLTOFF64I,
  BFD_RELOC_IA64_PLTOFF64MSB,
  BFD_RELOC_IA64_PLTOFF64LSB,
  BFD_RELOC_IA64_FPTR64I,
  BFD_RELOC_IA64_FPTR32MSB,
  BFD_RELOC_IA64_FPTR32LSB,
  BFD_RELOC_IA64_FPTR64MSB,
  BFD_RELOC_IA64_FPTR64LSB,
  BFD_RELOC_IA64_PCREL21B,
  BFD_RELOC_IA64_PCREL21BI,
  BFD_RELOC_IA64_PCREL21M,
  BFD_RELOC_IA64_PCREL21F,
  BFD_RELOC_IA64_PCREL22,
  BFD_RELOC_IA64_PCREL60B,
  BFD_RELOC_IA64_PCREL64I,
  BFD_RELOC_IA64_PCREL32MSB,
  BFD_RELOC_IA64_PCREL32LSB,
  BFD_RELOC_IA64_PCREL64MSB,
  BFD_RELOC_IA64_PCREL64LSB,
  BFD_RELOC_IA64_LTOFF_FPTR22,
  BFD_RELOC_IA64_LTOFF_FPTR64I,
  BFD_RELOC_IA64_LTOFF_FPTR32MSB,
  BFD_RELOC_IA64_LTOFF_FPTR32LSB,
  BFD_RELOC_IA64_LTOFF_FPTR64MSB,
  BFD_RELOC_IA64_LTOFF_FPTR64LSB,
  BFD_RELOC_IA64_SEGREL32MSB,
  BFD_RELOC_IA64_SEGREL32LSB,
  BFD_RELOC_IA64_SEGREL64MSB,
  BFD_RELOC_IA64_SEGREL64LSB,
  BFD_RELOC_IA64_SECREL32MSB,
  BFD_RELOC_IA64_SECREL32LSB,
  BFD_RELOC_IA64_SECREL64MSB,
  BFD_RELOC_IA64_SECREL64LSB,
  BFD_RELOC_IA64_REL32MSB,
  BFD_RELOC_IA64_REL32LSB,
  BFD_RELOC_IA64_REL64MSB,
  BFD_RELOC_IA64_REL64LSB,
  BFD_RELOC_IA64_LTV32MSB,
  BFD_RELOC_IA64_LTV32LSB,
  BFD_RELOC_IA64_LTV64MSB,
  BFD_RELOC_IA64_LTV64LSB,
  BFD_RELOC_IA64_IPLTMSB,
  BFD_RELOC_IA64_IPLTLSB,
  BFD_RELOC_IA64_COPY,
  BFD_RELOC_IA64_LTOFF22X,
  BFD_RELOC_IA64_LDXMOV,
  BFD_RELOC_IA64_TPREL14,
  BFD_RELOC_IA64_TPREL22,
  BFD_RELOC_IA64_TPREL64I,
  BFD_RELOC_IA64_TPREL64MSB,
  BFD_RELOC_IA64_TPREL64LSB,
  BFD_RELOC_IA64_LTOFF_TPREL22,
  BFD_RELOC_IA64_DTPMOD64MSB,
  BFD_RELOC_IA64_DTPMOD64LSB,
  BFD_RELOC_IA64_LTOFF_DTPMOD22,
  BFD_RELOC_IA64_DTPREL14,
  BFD_RELOC_IA64_DTPREL22,
  BFD_RELOC_IA64_DTPREL64I,
  BFD_RELOC_IA64_DTPREL32MSB,
  BFD_RELOC_IA64_DTPREL32LSB,
  BFD_RELOC_IA64_DTPREL64MSB,
  BFD_RELOC_IA64_DTPREL64LSB,
  BFD_RELOC_IA64_LTOFF_DTPREL22,



  BFD_RELOC_M68HC11_HI8,



  BFD_RELOC_M68HC11_LO8,



  BFD_RELOC_M68HC11_3B,






  BFD_RELOC_M68HC11_RL_JUMP,





  BFD_RELOC_M68HC11_RL_GROUP,





  BFD_RELOC_M68HC11_LO16,





  BFD_RELOC_M68HC11_PAGE,





  BFD_RELOC_M68HC11_24,



  BFD_RELOC_M68HC12_5B,


  BFD_RELOC_16C_NUM08,
  BFD_RELOC_16C_NUM08_C,
  BFD_RELOC_16C_NUM16,
  BFD_RELOC_16C_NUM16_C,
  BFD_RELOC_16C_NUM32,
  BFD_RELOC_16C_NUM32_C,
  BFD_RELOC_16C_DISP04,
  BFD_RELOC_16C_DISP04_C,
  BFD_RELOC_16C_DISP08,
  BFD_RELOC_16C_DISP08_C,
  BFD_RELOC_16C_DISP16,
  BFD_RELOC_16C_DISP16_C,
  BFD_RELOC_16C_DISP24,
  BFD_RELOC_16C_DISP24_C,
  BFD_RELOC_16C_DISP24a,
  BFD_RELOC_16C_DISP24a_C,
  BFD_RELOC_16C_REG04,
  BFD_RELOC_16C_REG04_C,
  BFD_RELOC_16C_REG04a,
  BFD_RELOC_16C_REG04a_C,
  BFD_RELOC_16C_REG14,
  BFD_RELOC_16C_REG14_C,
  BFD_RELOC_16C_REG16,
  BFD_RELOC_16C_REG16_C,
  BFD_RELOC_16C_REG20,
  BFD_RELOC_16C_REG20_C,
  BFD_RELOC_16C_ABS20,
  BFD_RELOC_16C_ABS20_C,
  BFD_RELOC_16C_ABS24,
  BFD_RELOC_16C_ABS24_C,
  BFD_RELOC_16C_IMM04,
  BFD_RELOC_16C_IMM04_C,
  BFD_RELOC_16C_IMM16,
  BFD_RELOC_16C_IMM16_C,
  BFD_RELOC_16C_IMM20,
  BFD_RELOC_16C_IMM20_C,
  BFD_RELOC_16C_IMM24,
  BFD_RELOC_16C_IMM24_C,
  BFD_RELOC_16C_IMM32,
  BFD_RELOC_16C_IMM32_C,


  BFD_RELOC_CRX_REL4,
  BFD_RELOC_CRX_REL8,
  BFD_RELOC_CRX_REL8_CMP,
  BFD_RELOC_CRX_REL16,
  BFD_RELOC_CRX_REL24,
  BFD_RELOC_CRX_REL32,
  BFD_RELOC_CRX_REGREL12,
  BFD_RELOC_CRX_REGREL22,
  BFD_RELOC_CRX_REGREL28,
  BFD_RELOC_CRX_REGREL32,
  BFD_RELOC_CRX_ABS16,
  BFD_RELOC_CRX_ABS32,
  BFD_RELOC_CRX_NUM8,
  BFD_RELOC_CRX_NUM16,
  BFD_RELOC_CRX_NUM32,
  BFD_RELOC_CRX_IMM16,
  BFD_RELOC_CRX_IMM32,
  BFD_RELOC_CRX_SWITCH8,
  BFD_RELOC_CRX_SWITCH16,
  BFD_RELOC_CRX_SWITCH32,



  BFD_RELOC_CRIS_BDISP8,
  BFD_RELOC_CRIS_UNSIGNED_5,
  BFD_RELOC_CRIS_SIGNED_6,
  BFD_RELOC_CRIS_UNSIGNED_6,
  BFD_RELOC_CRIS_SIGNED_8,
  BFD_RELOC_CRIS_UNSIGNED_8,
  BFD_RELOC_CRIS_SIGNED_16,
  BFD_RELOC_CRIS_UNSIGNED_16,
  BFD_RELOC_CRIS_LAPCQ_OFFSET,
  BFD_RELOC_CRIS_UNSIGNED_4,


  BFD_RELOC_CRIS_COPY,
  BFD_RELOC_CRIS_GLOB_DAT,
  BFD_RELOC_CRIS_JUMP_SLOT,
  BFD_RELOC_CRIS_RELATIVE,


  BFD_RELOC_CRIS_32_GOT,


  BFD_RELOC_CRIS_16_GOT,


  BFD_RELOC_CRIS_32_GOTPLT,


  BFD_RELOC_CRIS_16_GOTPLT,


  BFD_RELOC_CRIS_32_GOTREL,


  BFD_RELOC_CRIS_32_PLT_GOTREL,


  BFD_RELOC_CRIS_32_PLT_PCREL,


  BFD_RELOC_860_COPY,
  BFD_RELOC_860_GLOB_DAT,
  BFD_RELOC_860_JUMP_SLOT,
  BFD_RELOC_860_RELATIVE,
  BFD_RELOC_860_PC26,
  BFD_RELOC_860_PLT26,
  BFD_RELOC_860_PC16,
  BFD_RELOC_860_LOW0,
  BFD_RELOC_860_SPLIT0,
  BFD_RELOC_860_LOW1,
  BFD_RELOC_860_SPLIT1,
  BFD_RELOC_860_LOW2,
  BFD_RELOC_860_SPLIT2,
  BFD_RELOC_860_LOW3,
  BFD_RELOC_860_LOGOT0,
  BFD_RELOC_860_SPGOT0,
  BFD_RELOC_860_LOGOT1,
  BFD_RELOC_860_SPGOT1,
  BFD_RELOC_860_LOGOTOFF0,
  BFD_RELOC_860_SPGOTOFF0,
  BFD_RELOC_860_LOGOTOFF1,
  BFD_RELOC_860_SPGOTOFF1,
  BFD_RELOC_860_LOGOTOFF2,
  BFD_RELOC_860_LOGOTOFF3,
  BFD_RELOC_860_LOPC,
  BFD_RELOC_860_HIGHADJ,
  BFD_RELOC_860_HAGOT,
  BFD_RELOC_860_HAGOTOFF,
  BFD_RELOC_860_HAPC,
  BFD_RELOC_860_HIGH,
  BFD_RELOC_860_HIGOT,
  BFD_RELOC_860_HIGOTOFF,


  BFD_RELOC_OPENRISC_ABS_26,
  BFD_RELOC_OPENRISC_REL_26,


  BFD_RELOC_H8_DIR16A8,
  BFD_RELOC_H8_DIR16R8,
  BFD_RELOC_H8_DIR24A8,
  BFD_RELOC_H8_DIR24R8,
  BFD_RELOC_H8_DIR32A16,


  BFD_RELOC_XSTORMY16_REL_12,
  BFD_RELOC_XSTORMY16_12,
  BFD_RELOC_XSTORMY16_24,
  BFD_RELOC_XSTORMY16_FPTR16,


  BFD_RELOC_VAX_GLOB_DAT,
  BFD_RELOC_VAX_JMP_SLOT,
  BFD_RELOC_VAX_RELATIVE,


  BFD_RELOC_MS1_PC16,


  BFD_RELOC_MS1_HI16,


  BFD_RELOC_MS1_LO16,


  BFD_RELOC_MS1_GNU_VTINHERIT,


  BFD_RELOC_MS1_GNU_VTENTRY,


  BFD_RELOC_MSP430_10_PCREL,
  BFD_RELOC_MSP430_16_PCREL,
  BFD_RELOC_MSP430_16,
  BFD_RELOC_MSP430_16_PCREL_BYTE,
  BFD_RELOC_MSP430_16_BYTE,
  BFD_RELOC_MSP430_2X_PCREL,
  BFD_RELOC_MSP430_RL_PCREL,


  BFD_RELOC_IQ2000_OFFSET_16,
  BFD_RELOC_IQ2000_OFFSET_21,
  BFD_RELOC_IQ2000_UHI16,




  BFD_RELOC_XTENSA_RTLD,


  BFD_RELOC_XTENSA_GLOB_DAT,
  BFD_RELOC_XTENSA_JMP_SLOT,
  BFD_RELOC_XTENSA_RELATIVE,



  BFD_RELOC_XTENSA_PLT,







  BFD_RELOC_XTENSA_DIFF8,
  BFD_RELOC_XTENSA_DIFF16,
  BFD_RELOC_XTENSA_DIFF32,





  BFD_RELOC_XTENSA_SLOT0_OP,
  BFD_RELOC_XTENSA_SLOT1_OP,
  BFD_RELOC_XTENSA_SLOT2_OP,
  BFD_RELOC_XTENSA_SLOT3_OP,
  BFD_RELOC_XTENSA_SLOT4_OP,
  BFD_RELOC_XTENSA_SLOT5_OP,
  BFD_RELOC_XTENSA_SLOT6_OP,
  BFD_RELOC_XTENSA_SLOT7_OP,
  BFD_RELOC_XTENSA_SLOT8_OP,
  BFD_RELOC_XTENSA_SLOT9_OP,
  BFD_RELOC_XTENSA_SLOT10_OP,
  BFD_RELOC_XTENSA_SLOT11_OP,
  BFD_RELOC_XTENSA_SLOT12_OP,
  BFD_RELOC_XTENSA_SLOT13_OP,
  BFD_RELOC_XTENSA_SLOT14_OP,



  BFD_RELOC_XTENSA_SLOT0_ALT,
  BFD_RELOC_XTENSA_SLOT1_ALT,
  BFD_RELOC_XTENSA_SLOT2_ALT,
  BFD_RELOC_XTENSA_SLOT3_ALT,
  BFD_RELOC_XTENSA_SLOT4_ALT,
  BFD_RELOC_XTENSA_SLOT5_ALT,
  BFD_RELOC_XTENSA_SLOT6_ALT,
  BFD_RELOC_XTENSA_SLOT7_ALT,
  BFD_RELOC_XTENSA_SLOT8_ALT,
  BFD_RELOC_XTENSA_SLOT9_ALT,
  BFD_RELOC_XTENSA_SLOT10_ALT,
  BFD_RELOC_XTENSA_SLOT11_ALT,
  BFD_RELOC_XTENSA_SLOT12_ALT,
  BFD_RELOC_XTENSA_SLOT13_ALT,
  BFD_RELOC_XTENSA_SLOT14_ALT,



  BFD_RELOC_XTENSA_OP0,
  BFD_RELOC_XTENSA_OP1,
  BFD_RELOC_XTENSA_OP2,




  BFD_RELOC_XTENSA_ASM_EXPAND,





  BFD_RELOC_XTENSA_ASM_SIMPLIFY,


  BFD_RELOC_XTENSA_TLSDESC_FN,
  BFD_RELOC_XTENSA_TLSDESC_ARG,
  BFD_RELOC_XTENSA_TLS_DTPOFF,
  BFD_RELOC_XTENSA_TLS_TPOFF,
  BFD_RELOC_XTENSA_TLS_FUNC,
  BFD_RELOC_XTENSA_TLS_ARG,
  BFD_RELOC_XTENSA_TLS_CALL,


  BFD_RELOC_Z80_DISP8,


  BFD_RELOC_Z8K_DISP7,


  BFD_RELOC_Z8K_CALLR,


  BFD_RELOC_Z8K_IMM4L,


  BFD_RELOC_LM32_CALL,
  BFD_RELOC_LM32_BRANCH,
  BFD_RELOC_LM32_16_GOT,
  BFD_RELOC_LM32_GOTOFF_HI16,
  BFD_RELOC_LM32_GOTOFF_LO16,
  BFD_RELOC_LM32_COPY,
  BFD_RELOC_LM32_GLOB_DAT,
  BFD_RELOC_LM32_JMP_SLOT,
  BFD_RELOC_LM32_RELATIVE,



  BFD_RELOC_MACH_O_SECTDIFF,


  BFD_RELOC_MACH_O_LOCAL_SECTDIFF,


  BFD_RELOC_MACH_O_PAIR,


  BFD_RELOC_MACH_O_SUBTRACTOR32,


  BFD_RELOC_MACH_O_SUBTRACTOR64,



  BFD_RELOC_MACH_O_X86_64_BRANCH32,
  BFD_RELOC_MACH_O_X86_64_BRANCH8,


  BFD_RELOC_MACH_O_X86_64_GOT,



  BFD_RELOC_MACH_O_X86_64_GOT_LOAD,


  BFD_RELOC_MACH_O_X86_64_PCREL32_1,


  BFD_RELOC_MACH_O_X86_64_PCREL32_2,


  BFD_RELOC_MACH_O_X86_64_PCREL32_4,


  BFD_RELOC_MACH_O_ARM64_ADDEND,


  BFD_RELOC_MACH_O_ARM64_GOT_LOAD_PAGE21,


  BFD_RELOC_MACH_O_ARM64_GOT_LOAD_PAGEOFF12,


  BFD_RELOC_MACH_O_ARM64_POINTER_TO_GOT,



  BFD_RELOC_MICROBLAZE_32_LO,



  BFD_RELOC_MICROBLAZE_32_LO_PCREL,



  BFD_RELOC_MICROBLAZE_32_ROSDA,



  BFD_RELOC_MICROBLAZE_32_RWSDA,



  BFD_RELOC_MICROBLAZE_32_SYM_OP_SYM,




  BFD_RELOC_MICROBLAZE_64_NONE,




  BFD_RELOC_MICROBLAZE_64_GOTPC,




  BFD_RELOC_MICROBLAZE_64_GOT,




  BFD_RELOC_MICROBLAZE_64_PLT,




  BFD_RELOC_MICROBLAZE_64_GOTOFF,



  BFD_RELOC_MICROBLAZE_32_GOTOFF,



  BFD_RELOC_MICROBLAZE_COPY,


  BFD_RELOC_MICROBLAZE_64_TLS,




  BFD_RELOC_MICROBLAZE_64_TLSGD,




  BFD_RELOC_MICROBLAZE_64_TLSLD,


  BFD_RELOC_MICROBLAZE_32_TLSDTPMOD,


  BFD_RELOC_MICROBLAZE_32_TLSDTPREL,



  BFD_RELOC_MICROBLAZE_64_TLSDTPREL,



  BFD_RELOC_MICROBLAZE_64_TLSGOTTPREL,



  BFD_RELOC_MICROBLAZE_64_TLSTPREL,





  BFD_RELOC_AARCH64_RELOC_START,


  BFD_RELOC_AARCH64_NONE,




  BFD_RELOC_AARCH64_64,
  BFD_RELOC_AARCH64_32,
  BFD_RELOC_AARCH64_16,



  BFD_RELOC_AARCH64_64_PCREL,
  BFD_RELOC_AARCH64_32_PCREL,
  BFD_RELOC_AARCH64_16_PCREL,



  BFD_RELOC_AARCH64_MOVW_G0,



  BFD_RELOC_AARCH64_MOVW_G0_NC,



  BFD_RELOC_AARCH64_MOVW_G1,



  BFD_RELOC_AARCH64_MOVW_G1_NC,



  BFD_RELOC_AARCH64_MOVW_G2,



  BFD_RELOC_AARCH64_MOVW_G2_NC,



  BFD_RELOC_AARCH64_MOVW_G3,




  BFD_RELOC_AARCH64_MOVW_G0_S,




  BFD_RELOC_AARCH64_MOVW_G1_S,




  BFD_RELOC_AARCH64_MOVW_G2_S,




  BFD_RELOC_AARCH64_LD_LO19_PCREL,


  BFD_RELOC_AARCH64_ADR_LO21_PCREL,



  BFD_RELOC_AARCH64_ADR_HI21_PCREL,




  BFD_RELOC_AARCH64_ADR_HI21_NC_PCREL,



  BFD_RELOC_AARCH64_ADD_LO12,



  BFD_RELOC_AARCH64_LDST8_LO12,




  BFD_RELOC_AARCH64_TSTBR14,




  BFD_RELOC_AARCH64_BRANCH19,




  BFD_RELOC_AARCH64_JUMP26,




  BFD_RELOC_AARCH64_CALL26,



  BFD_RELOC_AARCH64_LDST16_LO12,



  BFD_RELOC_AARCH64_LDST32_LO12,



  BFD_RELOC_AARCH64_LDST64_LO12,



  BFD_RELOC_AARCH64_LDST128_LO12,






  BFD_RELOC_AARCH64_GOT_LD_PREL19,




  BFD_RELOC_AARCH64_ADR_GOT_PAGE,




  BFD_RELOC_AARCH64_LD64_GOT_LO12_NC,




  BFD_RELOC_AARCH64_LD32_GOT_LO12_NC,



  BFD_RELOC_AARCH64_MOVW_GOTOFF_G0_NC,



  BFD_RELOC_AARCH64_MOVW_GOTOFF_G1,



  BFD_RELOC_AARCH64_LD64_GOTOFF_LO15,


  BFD_RELOC_AARCH64_LD32_GOTPAGE_LO14,


  BFD_RELOC_AARCH64_LD64_GOTPAGE_LO15,





  BFD_RELOC_AARCH64_TLSGD_ADR_PAGE21,


  BFD_RELOC_AARCH64_TLSGD_ADR_PREL21,




  BFD_RELOC_AARCH64_TLSGD_ADD_LO12_NC,


  BFD_RELOC_AARCH64_TLSGD_MOVW_G0_NC,


  BFD_RELOC_AARCH64_TLSGD_MOVW_G1,


  BFD_RELOC_AARCH64_TLSIE_ADR_GOTTPREL_PAGE21,


  BFD_RELOC_AARCH64_TLSIE_LD64_GOTTPREL_LO12_NC,


  BFD_RELOC_AARCH64_TLSIE_LD32_GOTTPREL_LO12_NC,


  BFD_RELOC_AARCH64_TLSIE_LD_GOTTPREL_PREL19,


  BFD_RELOC_AARCH64_TLSIE_MOVW_GOTTPREL_G0_NC,


  BFD_RELOC_AARCH64_TLSIE_MOVW_GOTTPREL_G1,


  BFD_RELOC_AARCH64_TLSLD_ADD_DTPREL_HI12,


  BFD_RELOC_AARCH64_TLSLD_ADD_DTPREL_LO12,


  BFD_RELOC_AARCH64_TLSLD_ADD_DTPREL_LO12_NC,




  BFD_RELOC_AARCH64_TLSLD_ADD_LO12_NC,



  BFD_RELOC_AARCH64_TLSLD_ADR_PAGE21,


  BFD_RELOC_AARCH64_TLSLD_ADR_PREL21,



  BFD_RELOC_AARCH64_TLSLD_LDST16_DTPREL_LO12,


  BFD_RELOC_AARCH64_TLSLD_LDST16_DTPREL_LO12_NC,



  BFD_RELOC_AARCH64_TLSLD_LDST32_DTPREL_LO12,


  BFD_RELOC_AARCH64_TLSLD_LDST32_DTPREL_LO12_NC,



  BFD_RELOC_AARCH64_TLSLD_LDST64_DTPREL_LO12,


  BFD_RELOC_AARCH64_TLSLD_LDST64_DTPREL_LO12_NC,



  BFD_RELOC_AARCH64_TLSLD_LDST8_DTPREL_LO12,


  BFD_RELOC_AARCH64_TLSLD_LDST8_DTPREL_LO12_NC,


  BFD_RELOC_AARCH64_TLSLD_MOVW_DTPREL_G0,


  BFD_RELOC_AARCH64_TLSLD_MOVW_DTPREL_G0_NC,


  BFD_RELOC_AARCH64_TLSLD_MOVW_DTPREL_G1,


  BFD_RELOC_AARCH64_TLSLD_MOVW_DTPREL_G1_NC,


  BFD_RELOC_AARCH64_TLSLD_MOVW_DTPREL_G2,


  BFD_RELOC_AARCH64_TLSLE_MOVW_TPREL_G2,


  BFD_RELOC_AARCH64_TLSLE_MOVW_TPREL_G1,


  BFD_RELOC_AARCH64_TLSLE_MOVW_TPREL_G1_NC,


  BFD_RELOC_AARCH64_TLSLE_MOVW_TPREL_G0,


  BFD_RELOC_AARCH64_TLSLE_MOVW_TPREL_G0_NC,


  BFD_RELOC_AARCH64_TLSLE_ADD_TPREL_HI12,


  BFD_RELOC_AARCH64_TLSLE_ADD_TPREL_LO12,


  BFD_RELOC_AARCH64_TLSLE_ADD_TPREL_LO12_NC,


  BFD_RELOC_AARCH64_TLSDESC_LD_PREL19,


  BFD_RELOC_AARCH64_TLSDESC_ADR_PREL21,


  BFD_RELOC_AARCH64_TLSDESC_ADR_PAGE21,


  BFD_RELOC_AARCH64_TLSDESC_LD64_LO12_NC,


  BFD_RELOC_AARCH64_TLSDESC_LD32_LO12_NC,


  BFD_RELOC_AARCH64_TLSDESC_ADD_LO12_NC,


  BFD_RELOC_AARCH64_TLSDESC_OFF_G1,


  BFD_RELOC_AARCH64_TLSDESC_OFF_G0_NC,


  BFD_RELOC_AARCH64_TLSDESC_LDR,


  BFD_RELOC_AARCH64_TLSDESC_ADD,


  BFD_RELOC_AARCH64_TLSDESC_CALL,


  BFD_RELOC_AARCH64_COPY,


  BFD_RELOC_AARCH64_GLOB_DAT,


  BFD_RELOC_AARCH64_JUMP_SLOT,


  BFD_RELOC_AARCH64_RELATIVE,


  BFD_RELOC_AARCH64_TLS_DTPMOD,


  BFD_RELOC_AARCH64_TLS_DTPREL,


  BFD_RELOC_AARCH64_TLS_TPREL,


  BFD_RELOC_AARCH64_TLSDESC,


  BFD_RELOC_AARCH64_IRELATIVE,






  BFD_RELOC_AARCH64_RELOC_END,



  BFD_RELOC_AARCH64_GAS_INTERNAL_FIXUP,



  BFD_RELOC_AARCH64_LDST_LO12,




  BFD_RELOC_AARCH64_TLSLD_LDST_DTPREL_LO12,


  BFD_RELOC_AARCH64_TLSLD_LDST_DTPREL_LO12_NC,



  BFD_RELOC_AARCH64_LD_GOT_LO12_NC,



  BFD_RELOC_AARCH64_TLSIE_LD_GOTTPREL_LO12_NC,



  BFD_RELOC_AARCH64_TLSDESC_LD_LO12_NC,


  BFD_RELOC_TILEPRO_COPY,
  BFD_RELOC_TILEPRO_GLOB_DAT,
  BFD_RELOC_TILEPRO_JMP_SLOT,
  BFD_RELOC_TILEPRO_RELATIVE,
  BFD_RELOC_TILEPRO_BROFF_X1,
  BFD_RELOC_TILEPRO_JOFFLONG_X1,
  BFD_RELOC_TILEPRO_JOFFLONG_X1_PLT,
  BFD_RELOC_TILEPRO_IMM8_X0,
  BFD_RELOC_TILEPRO_IMM8_Y0,
  BFD_RELOC_TILEPRO_IMM8_X1,
  BFD_RELOC_TILEPRO_IMM8_Y1,
  BFD_RELOC_TILEPRO_DEST_IMM8_X1,
  BFD_RELOC_TILEPRO_MT_IMM15_X1,
  BFD_RELOC_TILEPRO_MF_IMM15_X1,
  BFD_RELOC_TILEPRO_IMM16_X0,
  BFD_RELOC_TILEPRO_IMM16_X1,
  BFD_RELOC_TILEPRO_IMM16_X0_LO,
  BFD_RELOC_TILEPRO_IMM16_X1_LO,
  BFD_RELOC_TILEPRO_IMM16_X0_HI,
  BFD_RELOC_TILEPRO_IMM16_X1_HI,
  BFD_RELOC_TILEPRO_IMM16_X0_HA,
  BFD_RELOC_TILEPRO_IMM16_X1_HA,
  BFD_RELOC_TILEPRO_IMM16_X0_PCREL,
  BFD_RELOC_TILEPRO_IMM16_X1_PCREL,
  BFD_RELOC_TILEPRO_IMM16_X0_LO_PCREL,
  BFD_RELOC_TILEPRO_IMM16_X1_LO_PCREL,
  BFD_RELOC_TILEPRO_IMM16_X0_HI_PCREL,
  BFD_RELOC_TILEPRO_IMM16_X1_HI_PCREL,
  BFD_RELOC_TILEPRO_IMM16_X0_HA_PCREL,
  BFD_RELOC_TILEPRO_IMM16_X1_HA_PCREL,
  BFD_RELOC_TILEPRO_IMM16_X0_GOT,
  BFD_RELOC_TILEPRO_IMM16_X1_GOT,
  BFD_RELOC_TILEPRO_IMM16_X0_GOT_LO,
  BFD_RELOC_TILEPRO_IMM16_X1_GOT_LO,
  BFD_RELOC_TILEPRO_IMM16_X0_GOT_HI,
  BFD_RELOC_TILEPRO_IMM16_X1_GOT_HI,
  BFD_RELOC_TILEPRO_IMM16_X0_GOT_HA,
  BFD_RELOC_TILEPRO_IMM16_X1_GOT_HA,
  BFD_RELOC_TILEPRO_MMSTART_X0,
  BFD_RELOC_TILEPRO_MMEND_X0,
  BFD_RELOC_TILEPRO_MMSTART_X1,
  BFD_RELOC_TILEPRO_MMEND_X1,
  BFD_RELOC_TILEPRO_SHAMT_X0,
  BFD_RELOC_TILEPRO_SHAMT_X1,
  BFD_RELOC_TILEPRO_SHAMT_Y0,
  BFD_RELOC_TILEPRO_SHAMT_Y1,
  BFD_RELOC_TILEPRO_TLS_GD_CALL,
  BFD_RELOC_TILEPRO_IMM8_X0_TLS_GD_ADD,
  BFD_RELOC_TILEPRO_IMM8_X1_TLS_GD_ADD,
  BFD_RELOC_TILEPRO_IMM8_Y0_TLS_GD_ADD,
  BFD_RELOC_TILEPRO_IMM8_Y1_TLS_GD_ADD,
  BFD_RELOC_TILEPRO_TLS_IE_LOAD,
  BFD_RELOC_TILEPRO_IMM16_X0_TLS_GD,
  BFD_RELOC_TILEPRO_IMM16_X1_TLS_GD,
  BFD_RELOC_TILEPRO_IMM16_X0_TLS_GD_LO,
  BFD_RELOC_TILEPRO_IMM16_X1_TLS_GD_LO,
  BFD_RELOC_TILEPRO_IMM16_X0_TLS_GD_HI,
  BFD_RELOC_TILEPRO_IMM16_X1_TLS_GD_HI,
  BFD_RELOC_TILEPRO_IMM16_X0_TLS_GD_HA,
  BFD_RELOC_TILEPRO_IMM16_X1_TLS_GD_HA,
  BFD_RELOC_TILEPRO_IMM16_X0_TLS_IE,
  BFD_RELOC_TILEPRO_IMM16_X1_TLS_IE,
  BFD_RELOC_TILEPRO_IMM16_X0_TLS_IE_LO,
  BFD_RELOC_TILEPRO_IMM16_X1_TLS_IE_LO,
  BFD_RELOC_TILEPRO_IMM16_X0_TLS_IE_HI,
  BFD_RELOC_TILEPRO_IMM16_X1_TLS_IE_HI,
  BFD_RELOC_TILEPRO_IMM16_X0_TLS_IE_HA,
  BFD_RELOC_TILEPRO_IMM16_X1_TLS_IE_HA,
  BFD_RELOC_TILEPRO_TLS_DTPMOD32,
  BFD_RELOC_TILEPRO_TLS_DTPOFF32,
  BFD_RELOC_TILEPRO_TLS_TPOFF32,
  BFD_RELOC_TILEPRO_IMM16_X0_TLS_LE,
  BFD_RELOC_TILEPRO_IMM16_X1_TLS_LE,
  BFD_RELOC_TILEPRO_IMM16_X0_TLS_LE_LO,
  BFD_RELOC_TILEPRO_IMM16_X1_TLS_LE_LO,
  BFD_RELOC_TILEPRO_IMM16_X0_TLS_LE_HI,
  BFD_RELOC_TILEPRO_IMM16_X1_TLS_LE_HI,
  BFD_RELOC_TILEPRO_IMM16_X0_TLS_LE_HA,
  BFD_RELOC_TILEPRO_IMM16_X1_TLS_LE_HA,


  BFD_RELOC_TILEGX_HW0,
  BFD_RELOC_TILEGX_HW1,
  BFD_RELOC_TILEGX_HW2,
  BFD_RELOC_TILEGX_HW3,
  BFD_RELOC_TILEGX_HW0_LAST,
  BFD_RELOC_TILEGX_HW1_LAST,
  BFD_RELOC_TILEGX_HW2_LAST,
  BFD_RELOC_TILEGX_COPY,
  BFD_RELOC_TILEGX_GLOB_DAT,
  BFD_RELOC_TILEGX_JMP_SLOT,
  BFD_RELOC_TILEGX_RELATIVE,
  BFD_RELOC_TILEGX_BROFF_X1,
  BFD_RELOC_TILEGX_JUMPOFF_X1,
  BFD_RELOC_TILEGX_JUMPOFF_X1_PLT,
  BFD_RELOC_TILEGX_IMM8_X0,
  BFD_RELOC_TILEGX_IMM8_Y0,
  BFD_RELOC_TILEGX_IMM8_X1,
  BFD_RELOC_TILEGX_IMM8_Y1,
  BFD_RELOC_TILEGX_DEST_IMM8_X1,
  BFD_RELOC_TILEGX_MT_IMM14_X1,
  BFD_RELOC_TILEGX_MF_IMM14_X1,
  BFD_RELOC_TILEGX_MMSTART_X0,
  BFD_RELOC_TILEGX_MMEND_X0,
  BFD_RELOC_TILEGX_SHAMT_X0,
  BFD_RELOC_TILEGX_SHAMT_X1,
  BFD_RELOC_TILEGX_SHAMT_Y0,
  BFD_RELOC_TILEGX_SHAMT_Y1,
  BFD_RELOC_TILEGX_IMM16_X0_HW0,
  BFD_RELOC_TILEGX_IMM16_X1_HW0,
  BFD_RELOC_TILEGX_IMM16_X0_HW1,
  BFD_RELOC_TILEGX_IMM16_X1_HW1,
  BFD_RELOC_TILEGX_IMM16_X0_HW2,
  BFD_RELOC_TILEGX_IMM16_X1_HW2,
  BFD_RELOC_TILEGX_IMM16_X0_HW3,
  BFD_RELOC_TILEGX_IMM16_X1_HW3,
  BFD_RELOC_TILEGX_IMM16_X0_HW0_LAST,
  BFD_RELOC_TILEGX_IMM16_X1_HW0_LAST,
  BFD_RELOC_TILEGX_IMM16_X0_HW1_LAST,
  BFD_RELOC_TILEGX_IMM16_X1_HW1_LAST,
  BFD_RELOC_TILEGX_IMM16_X0_HW2_LAST,
  BFD_RELOC_TILEGX_IMM16_X1_HW2_LAST,
  BFD_RELOC_TILEGX_IMM16_X0_HW0_PCREL,
  BFD_RELOC_TILEGX_IMM16_X1_HW0_PCREL,
  BFD_RELOC_TILEGX_IMM16_X0_HW1_PCREL,
  BFD_RELOC_TILEGX_IMM16_X1_HW1_PCREL,
  BFD_RELOC_TILEGX_IMM16_X0_HW2_PCREL,
  BFD_RELOC_TILEGX_IMM16_X1_HW2_PCREL,
  BFD_RELOC_TILEGX_IMM16_X0_HW3_PCREL,
  BFD_RELOC_TILEGX_IMM16_X1_HW3_PCREL,
  BFD_RELOC_TILEGX_IMM16_X0_HW0_LAST_PCREL,
  BFD_RELOC_TILEGX_IMM16_X1_HW0_LAST_PCREL,
  BFD_RELOC_TILEGX_IMM16_X0_HW1_LAST_PCREL,
  BFD_RELOC_TILEGX_IMM16_X1_HW1_LAST_PCREL,
  BFD_RELOC_TILEGX_IMM16_X0_HW2_LAST_PCREL,
  BFD_RELOC_TILEGX_IMM16_X1_HW2_LAST_PCREL,
  BFD_RELOC_TILEGX_IMM16_X0_HW0_GOT,
  BFD_RELOC_TILEGX_IMM16_X1_HW0_GOT,
  BFD_RELOC_TILEGX_IMM16_X0_HW0_PLT_PCREL,
  BFD_RELOC_TILEGX_IMM16_X1_HW0_PLT_PCREL,
  BFD_RELOC_TILEGX_IMM16_X0_HW1_PLT_PCREL,
  BFD_RELOC_TILEGX_IMM16_X1_HW1_PLT_PCREL,
  BFD_RELOC_TILEGX_IMM16_X0_HW2_PLT_PCREL,
  BFD_RELOC_TILEGX_IMM16_X1_HW2_PLT_PCREL,
  BFD_RELOC_TILEGX_IMM16_X0_HW0_LAST_GOT,
  BFD_RELOC_TILEGX_IMM16_X1_HW0_LAST_GOT,
  BFD_RELOC_TILEGX_IMM16_X0_HW1_LAST_GOT,
  BFD_RELOC_TILEGX_IMM16_X1_HW1_LAST_GOT,
  BFD_RELOC_TILEGX_IMM16_X0_HW3_PLT_PCREL,
  BFD_RELOC_TILEGX_IMM16_X1_HW3_PLT_PCREL,
  BFD_RELOC_TILEGX_IMM16_X0_HW0_TLS_GD,
  BFD_RELOC_TILEGX_IMM16_X1_HW0_TLS_GD,
  BFD_RELOC_TILEGX_IMM16_X0_HW0_TLS_LE,
  BFD_RELOC_TILEGX_IMM16_X1_HW0_TLS_LE,
  BFD_RELOC_TILEGX_IMM16_X0_HW0_LAST_TLS_LE,
  BFD_RELOC_TILEGX_IMM16_X1_HW0_LAST_TLS_LE,
  BFD_RELOC_TILEGX_IMM16_X0_HW1_LAST_TLS_LE,
  BFD_RELOC_TILEGX_IMM16_X1_HW1_LAST_TLS_LE,
  BFD_RELOC_TILEGX_IMM16_X0_HW0_LAST_TLS_GD,
  BFD_RELOC_TILEGX_IMM16_X1_HW0_LAST_TLS_GD,
  BFD_RELOC_TILEGX_IMM16_X0_HW1_LAST_TLS_GD,
  BFD_RELOC_TILEGX_IMM16_X1_HW1_LAST_TLS_GD,
  BFD_RELOC_TILEGX_IMM16_X0_HW0_TLS_IE,
  BFD_RELOC_TILEGX_IMM16_X1_HW0_TLS_IE,
  BFD_RELOC_TILEGX_IMM16_X0_HW0_LAST_PLT_PCREL,
  BFD_RELOC_TILEGX_IMM16_X1_HW0_LAST_PLT_PCREL,
  BFD_RELOC_TILEGX_IMM16_X0_HW1_LAST_PLT_PCREL,
  BFD_RELOC_TILEGX_IMM16_X1_HW1_LAST_PLT_PCREL,
  BFD_RELOC_TILEGX_IMM16_X0_HW2_LAST_PLT_PCREL,
  BFD_RELOC_TILEGX_IMM16_X1_HW2_LAST_PLT_PCREL,
  BFD_RELOC_TILEGX_IMM16_X0_HW0_LAST_TLS_IE,
  BFD_RELOC_TILEGX_IMM16_X1_HW0_LAST_TLS_IE,
  BFD_RELOC_TILEGX_IMM16_X0_HW1_LAST_TLS_IE,
  BFD_RELOC_TILEGX_IMM16_X1_HW1_LAST_TLS_IE,
  BFD_RELOC_TILEGX_TLS_DTPMOD64,
  BFD_RELOC_TILEGX_TLS_DTPOFF64,
  BFD_RELOC_TILEGX_TLS_TPOFF64,
  BFD_RELOC_TILEGX_TLS_DTPMOD32,
  BFD_RELOC_TILEGX_TLS_DTPOFF32,
  BFD_RELOC_TILEGX_TLS_TPOFF32,
  BFD_RELOC_TILEGX_TLS_GD_CALL,
  BFD_RELOC_TILEGX_IMM8_X0_TLS_GD_ADD,
  BFD_RELOC_TILEGX_IMM8_X1_TLS_GD_ADD,
  BFD_RELOC_TILEGX_IMM8_Y0_TLS_GD_ADD,
  BFD_RELOC_TILEGX_IMM8_Y1_TLS_GD_ADD,
  BFD_RELOC_TILEGX_TLS_IE_LOAD,
  BFD_RELOC_TILEGX_IMM8_X0_TLS_ADD,
  BFD_RELOC_TILEGX_IMM8_X1_TLS_ADD,
  BFD_RELOC_TILEGX_IMM8_Y0_TLS_ADD,
  BFD_RELOC_TILEGX_IMM8_Y1_TLS_ADD,


  BFD_RELOC_EPIPHANY_SIMM8,


  BFD_RELOC_EPIPHANY_SIMM24,


  BFD_RELOC_EPIPHANY_HIGH,


  BFD_RELOC_EPIPHANY_LOW,


  BFD_RELOC_EPIPHANY_SIMM11,


  BFD_RELOC_EPIPHANY_IMM11,


  BFD_RELOC_EPIPHANY_IMM8,


  BFD_RELOC_VISIUM_HI16,
  BFD_RELOC_VISIUM_LO16,
  BFD_RELOC_VISIUM_IM16,
  BFD_RELOC_VISIUM_REL16,
  BFD_RELOC_VISIUM_HI16_PCREL,
  BFD_RELOC_VISIUM_LO16_PCREL,
  BFD_RELOC_VISIUM_IM16_PCREL,
  BFD_RELOC_UNUSED };
typedef enum bfd_reloc_code_real bfd_reloc_code_real_type;
reloc_howto_type *bfd_reloc_type_lookup
   (bfd *abfd, bfd_reloc_code_real_type code);

const char *bfd_get_reloc_code_name (bfd_reloc_code_real_type code);



typedef struct bfd_symbol
{
# 5099 "../bfd/bfd.h"
  struct bfd *the_bfd;



  const char *name;




  symvalue value;


#define BSF_NO_FLAGS 0x00



#define BSF_LOCAL 0x01



#define BSF_GLOBAL 0x02



#define BSF_EXPORT BSF_GLOBAL







#define BSF_DEBUGGING 0x08



#define BSF_FUNCTION 0x10


#define BSF_KEEP 0x20
#define BSF_KEEP_G 0x40



#define BSF_WEAK 0x80



#define BSF_SECTION_SYM 0x100



#define BSF_OLD_COMMON 0x200


#define BFD_FORT_COMM_DEFAULT_VALUE 0






#define BSF_NOT_AT_END 0x400


#define BSF_CONSTRUCTOR 0x800





#define BSF_WARNING 0x1000



#define BSF_INDIRECT 0x2000



#define BSF_FILE 0x4000


#define BSF_DYNAMIC 0x8000



#define BSF_OBJECT 0x10000




#define BSF_DEBUGGING_RELOC 0x20000


#define BSF_THREAD_LOCAL 0x40000

  flagword flags;




  struct bfd_section *section;


  union
    {
      void *p;
      bfd_vma i;
    }
  udata;
}
asymbol;

#define bfd_get_symtab_upper_bound(abfd) BFD_SEND (abfd, _bfd_get_symtab_upper_bound, (abfd))


bfd_boolean bfd_is_local_label (bfd *abfd, asymbol *sym);

bfd_boolean bfd_is_local_label_name (bfd *abfd, const char *name);

#define bfd_is_local_label_name(abfd,name) BFD_SEND (abfd, _bfd_is_local_label_name, (abfd, name))


bfd_boolean bfd_is_target_special_symbol (bfd *abfd, asymbol *sym);

#define bfd_is_target_special_symbol(abfd,sym) BFD_SEND (abfd, _bfd_is_target_special_symbol, (abfd, sym))


#define bfd_canonicalize_symtab(abfd,location) BFD_SEND (abfd, _bfd_canonicalize_symtab, (abfd, location))


bfd_boolean bfd_set_symtab
   (bfd *abfd, asymbol **location, unsigned int count);

void bfd_print_symbol_vandf (bfd *abfd, void *file, asymbol *symbol);

#define bfd_make_empty_symbol(abfd) BFD_SEND (abfd, _bfd_make_empty_symbol, (abfd))


asymbol *_bfd_generic_make_empty_symbol (bfd *);

#define bfd_make_debug_symbol(abfd,ptr,size) BFD_SEND (abfd, _bfd_make_debug_symbol, (abfd, ptr, size))


int bfd_decode_symclass (asymbol *symbol);

bfd_boolean bfd_is_undefined_symclass (int symclass);

void bfd_symbol_info (asymbol *symbol, symbol_info *ret);

bfd_boolean bfd_copy_private_symbol_data
   (bfd *ibfd, asymbol *isym, bfd *obfd, asymbol *osym);

#define bfd_copy_private_symbol_data(ibfd,isymbol,obfd,osymbol) BFD_SEND (obfd, _bfd_copy_private_symbol_data, (ibfd, isymbol, obfd, osymbol))





enum bfd_direction
{
  no_direction = 0,
  read_direction = 1,
  write_direction = 2,
  both_direction = 3
};

struct bfd
{

  unsigned int id;


  const char *filename;


  const struct bfd_target *xvec;



  void *iostream;
  const struct bfd_iovec *iovec;



  bfd_boolean cacheable;




  bfd_boolean target_defaulted;



  struct bfd *lru_prev, *lru_next;



  ufile_ptr where;


  bfd_boolean opened_once;



  bfd_boolean mtime_set;


  long mtime;


  int ifd;


  bfd_format format;


  enum bfd_direction direction;


  flagword flags;




  ufile_ptr origin;



  bfd_boolean output_has_begun;


  struct bfd_hash_table section_htab;


  struct bfd_section *sections;


  struct bfd_section *section_last;


  unsigned int section_count;



  bfd_vma start_address;


  unsigned int symcount;


  struct bfd_symbol **outsymbols;


  unsigned int dynsymcount;


  const struct bfd_arch_info *arch_info;


  bfd_boolean no_export;


  void *arelt_data;
  struct bfd *my_archive;
  struct bfd *next;
  struct bfd *archive_head;
  bfd_boolean has_armap;


  struct bfd *link_next;



  int archive_pass;


  union
    {
      struct aout_data_struct *aout_data;
      struct artdata *aout_ar_data;
      struct _oasys_data *oasys_obj_data;
      struct _oasys_ar_data *oasys_ar_data;
      struct coff_tdata *coff_obj_data;
      struct pe_tdata *pe_obj_data;
      struct xcoff_tdata *xcoff_obj_data;
      struct ecoff_tdata *ecoff_obj_data;
      struct ieee_data_struct *ieee_data;
      struct ieee_ar_data_struct *ieee_ar_data;
      struct srec_data_struct *srec_data;
      struct ihex_data_struct *ihex_data;
      struct tekhex_data_struct *tekhex_data;
      struct elf_obj_tdata *elf_obj_data;
      struct nlm_obj_tdata *nlm_obj_data;
      struct bout_data_struct *bout_data;
      struct mmo_data_struct *mmo_data;
      struct sun_core_struct *sun_core_data;
      struct sco5_core_struct *sco5_core_data;
      struct trad_core_struct *trad_core_data;
      struct som_data_struct *som_data;
      struct hpux_core_struct *hpux_core_data;
      struct hppabsd_core_struct *hppabsd_core_data;
      struct sgi_core_struct *sgi_core_data;
      struct lynx_core_struct *lynx_core_data;
      struct osf_core_struct *osf_core_data;
      struct cisco_core_struct *cisco_core_data;
      struct versados_data_struct *versados_data;
      struct netbsd_core_struct *netbsd_core_data;
      struct mach_o_data_struct *mach_o_data;
      struct mach_o_fat_data_struct *mach_o_fat_data;
      struct bfd_pef_data_struct *pef_data;
      struct bfd_pef_xlib_data_struct *pef_xlib_data;
      struct bfd_sym_data_struct *sym_data;
      void *any;
    }
  tdata;


  void *usrdata;




  void *memory;
};

typedef enum bfd_error
{
  bfd_error_no_error = 0,
  bfd_error_system_call,
  bfd_error_invalid_target,
  bfd_error_wrong_format,
  bfd_error_wrong_object_format,
  bfd_error_invalid_operation,
  bfd_error_no_memory,
  bfd_error_no_symbols,
  bfd_error_no_armap,
  bfd_error_no_more_archived_files,
  bfd_error_malformed_archive,
  bfd_error_file_not_recognized,
  bfd_error_file_ambiguously_recognized,
  bfd_error_no_contents,
  bfd_error_nonrepresentable_section,
  bfd_error_no_debug_section,
  bfd_error_bad_value,
  bfd_error_file_truncated,
  bfd_error_file_too_big,
  bfd_error_invalid_error_code
}
bfd_error_type;

bfd_error_type bfd_get_error (void);

void bfd_set_error (bfd_error_type error_tag);

const char *bfd_errmsg (bfd_error_type error_tag);

void bfd_perror (const char *message);

typedef void (*bfd_error_handler_type)(const char *, ...)
                             ;

bfd_error_handler_type bfd_set_error_handler (bfd_error_handler_type);

void bfd_set_error_program_name (const char *);

bfd_error_handler_type bfd_get_error_handler (void);

long bfd_get_reloc_upper_bound (bfd *abfd, asection *sect);

long bfd_canonicalize_reloc
   (bfd *abfd, asection *sec, arelent **loc, asymbol **syms);

void bfd_set_reloc
   (bfd *abfd, asection *sec, arelent **rel, unsigned int count);

bfd_boolean bfd_set_file_flags (bfd *abfd, flagword flags);

int bfd_get_arch_size (bfd *abfd);

int bfd_get_sign_extend_vma (bfd *abfd);

bfd_boolean bfd_set_start_address (bfd *abfd, bfd_vma vma);

unsigned int bfd_get_gp_size (bfd *abfd);

void bfd_set_gp_size (bfd *abfd, unsigned int i);

bfd_vma bfd_scan_vma (const char *string, const char **end, int base);

bfd_boolean bfd_copy_private_header_data (bfd *ibfd, bfd *obfd);

#define bfd_copy_private_header_data(ibfd,obfd) BFD_SEND (obfd, _bfd_copy_private_header_data, (ibfd, obfd))


bfd_boolean bfd_copy_private_bfd_data (bfd *ibfd, bfd *obfd);

#define bfd_copy_private_bfd_data(ibfd,obfd) BFD_SEND (obfd, _bfd_copy_private_bfd_data, (ibfd, obfd))


bfd_boolean bfd_merge_private_bfd_data (bfd *ibfd, bfd *obfd);

#define bfd_merge_private_bfd_data(ibfd,obfd) BFD_SEND (obfd, _bfd_merge_private_bfd_data, (ibfd, obfd))


bfd_boolean bfd_set_private_flags (bfd *abfd, flagword flags);

#define bfd_set_private_flags(abfd,flags) BFD_SEND(abfd, _bfd_set_private_flags, (abfd, flags))

#define bfd_sizeof_headers(abfd,reloc) BFD_SEND(abfd, _bfd_sizeof_headers, (abfd, reloc))


#define bfd_find_nearest_line(abfd,sec,syms,off,file,func,line) BFD_SEND (abfd, _bfd_find_nearest_line, (abfd, sec, syms, off, file, func, line))



#define bfd_find_line(abfd,syms,sym,file,line) BFD_SEND (abfd, _bfd_find_line, (abfd, syms, sym, file, line))



#define bfd_find_inliner_info(abfd,file,func,line) BFD_SEND (abfd, _bfd_find_inliner_info, (abfd, file, func, line))



#define bfd_debug_info_start(abfd) BFD_SEND(abfd, _bfd_debug_info_start, (abfd))


#define bfd_debug_info_end(abfd) BFD_SEND(abfd, _bfd_debug_info_end, (abfd))


#define bfd_debug_info_accumulate(abfd,section) BFD_SEND(abfd, _bfd_debug_info_accumulate, (abfd, section))


#define bfd_stat_arch_elt(abfd,stat) BFD_SEND(abfd, _bfd_stat_arch_elt,(abfd, stat))


#define bfd_update_armap_timestamp(abfd) BFD_SEND(abfd, _bfd_update_armap_timestamp, (abfd))


#define bfd_set_arch_mach(abfd,arch,mach) BFD_SEND(abfd, _bfd_set_arch_mach, (abfd, arch, mach))


#define bfd_relax_section(abfd,section,link_info,again) BFD_SEND(abfd, _bfd_relax_section, (abfd, section, link_info, again))


#define bfd_gc_sections(abfd,link_info) BFD_SEND(abfd, _bfd_gc_sections, (abfd, link_info))


#define bfd_merge_sections(abfd,link_info) BFD_SEND(abfd, _bfd_merge_sections, (abfd, link_info))


#define bfd_is_group_section(abfd,sec) BFD_SEND(abfd, _bfd_is_group_section, (abfd, sec))


#define bfd_discard_group(abfd,sec) BFD_SEND(abfd, _bfd_discard_group, (abfd, sec))


#define bfd_link_hash_table_create(abfd) BFD_SEND(abfd, _bfd_link_hash_table_create, (abfd))


#define bfd_link_hash_table_free(abfd,hash) BFD_SEND(abfd, _bfd_link_hash_table_free, (hash))


#define bfd_link_add_symbols(abfd,info) BFD_SEND(abfd, _bfd_link_add_symbols, (abfd, info))


#define bfd_link_just_syms(abfd,sec,info) BFD_SEND(abfd, _bfd_link_just_syms, (sec, info))


#define bfd_final_link(abfd,info) BFD_SEND(abfd, _bfd_final_link, (abfd, info))


#define bfd_free_cached_info(abfd) BFD_SEND(abfd, _bfd_free_cached_info, (abfd))


#define bfd_get_dynamic_symtab_upper_bound(abfd) BFD_SEND(abfd, _bfd_get_dynamic_symtab_upper_bound, (abfd))


#define bfd_print_private_bfd_data(abfd,file) BFD_SEND(abfd, _bfd_print_private_bfd_data, (abfd, file))


#define bfd_canonicalize_dynamic_symtab(abfd,asymbols) BFD_SEND(abfd, _bfd_canonicalize_dynamic_symtab, (abfd, asymbols))


#define bfd_get_synthetic_symtab(abfd,count,syms,dyncount,dynsyms,ret) BFD_SEND (abfd, _bfd_get_synthetic_symtab, (abfd, count, syms, dyncount, dynsyms, ret))



#define bfd_get_dynamic_reloc_upper_bound(abfd) BFD_SEND(abfd, _bfd_get_dynamic_reloc_upper_bound, (abfd))


#define bfd_canonicalize_dynamic_reloc(abfd,arels,asyms) BFD_SEND(abfd, _bfd_canonicalize_dynamic_reloc, (abfd, arels, asyms))


extern bfd_byte *bfd_get_relocated_section_contents
  (bfd *, struct bfd_link_info *, struct bfd_link_order *, bfd_byte *,
   bfd_boolean, asymbol **);

bfd_boolean bfd_alt_mach_code (bfd *abfd, int alternative);

struct bfd_preserve
{
  void *marker;
  void *tdata;
  flagword flags;
  const struct bfd_arch_info *arch_info;
  struct bfd_section *sections;
  struct bfd_section *section_last;
  unsigned int section_count;
  struct bfd_hash_table section_htab;
};

bfd_boolean bfd_preserve_save (bfd *, struct bfd_preserve *);

void bfd_preserve_restore (bfd *, struct bfd_preserve *);

void bfd_preserve_finish (bfd *, struct bfd_preserve *);

void bfd_hide_symbol (bfd *,
    struct bfd_link_info *,
    struct bfd_link_hash_entry *,
    bfd_boolean);


symindex bfd_get_next_mapent
   (bfd *abfd, symindex previous, carsym **sym);

bfd_boolean bfd_set_archive_head (bfd *output, bfd *new_head);

bfd *bfd_openr_next_archived_file (bfd *archive, bfd *previous);


const char *bfd_core_file_failing_command (bfd *abfd);

int bfd_core_file_failing_signal (bfd *abfd);

bfd_boolean core_file_matches_executable_p
   (bfd *core_bfd, bfd *exec_bfd);


#define BFD_SEND(bfd,message,arglist) ((*((bfd)->xvec->message)) arglist)
# 5649 "../bfd/bfd.h"
#define BFD_SEND_FMT(bfd,message,arglist) (((bfd)->xvec->message[(int) ((bfd)->format)]) arglist)
# 5660 "../bfd/bfd.h"
enum bfd_flavour
{
  bfd_target_unknown_flavour,
  bfd_target_aout_flavour,
  bfd_target_coff_flavour,
  bfd_target_ecoff_flavour,
  bfd_target_xcoff_flavour,
  bfd_target_elf_flavour,
  bfd_target_ieee_flavour,
  bfd_target_nlm_flavour,
  bfd_target_oasys_flavour,
  bfd_target_tekhex_flavour,
  bfd_target_srec_flavour,
  bfd_target_verilog_flavour,
  bfd_target_ihex_flavour,
  bfd_target_som_flavour,
  bfd_target_os9k_flavour,
  bfd_target_versados_flavour,
  bfd_target_msdos_flavour,
  bfd_target_ovax_flavour,
  bfd_target_evax_flavour,
  bfd_target_mmo_flavour,
  bfd_target_mach_o_flavour,
  bfd_target_pef_flavour,
  bfd_target_pef_xlib_flavour,
  bfd_target_sym_flavour
};

enum bfd_endian { BFD_ENDIAN_BIG, BFD_ENDIAN_LITTLE, BFD_ENDIAN_UNKNOWN };


typedef struct bfd_link_info _bfd_link_info;


typedef struct flag_info flag_info;

typedef struct bfd_target
{

  char *name;



  enum bfd_flavour flavour;


  enum bfd_endian byteorder;


  enum bfd_endian header_byteorder;



  flagword object_flags;



  flagword section_flags;



  char symbol_leading_char;


  char ar_pad_char;


  unsigned short ar_max_namelen;
# 5738 "../bfd/bfd.h"
  bfd_uint64_t (*bfd_getx64) (const void *);
  bfd_int64_t (*bfd_getx_signed_64) (const void *);
  void (*bfd_putx64) (bfd_uint64_t, void *);
  bfd_vma (*bfd_getx32) (const void *);
  bfd_signed_vma (*bfd_getx_signed_32) (const void *);
  void (*bfd_putx32) (bfd_vma, void *);
  bfd_vma (*bfd_getx16) (const void *);
  bfd_signed_vma (*bfd_getx_signed_16) (const void *);
  void (*bfd_putx16) (bfd_vma, void *);


  bfd_uint64_t (*bfd_h_getx64) (const void *);
  bfd_int64_t (*bfd_h_getx_signed_64) (const void *);
  void (*bfd_h_putx64) (bfd_uint64_t, void *);
  bfd_vma (*bfd_h_getx32) (const void *);
  bfd_signed_vma (*bfd_h_getx_signed_32) (const void *);
  void (*bfd_h_putx32) (bfd_vma, void *);
  bfd_vma (*bfd_h_getx16) (const void *);
  bfd_signed_vma (*bfd_h_getx_signed_16) (const void *);
  void (*bfd_h_putx16) (bfd_vma, void *);





  const struct bfd_target *(*_bfd_check_format[bfd_type_end]) (bfd *);


  bfd_boolean (*_bfd_set_format[bfd_type_end]) (bfd *);


  bfd_boolean (*_bfd_write_contents[bfd_type_end]) (bfd *);



#define BFD_JUMP_TABLE_GENERIC(NAME) NAME ##_close_and_cleanup, NAME ##_bfd_free_cached_info, NAME ##_new_section_hook, NAME ##_get_section_contents, NAME ##_get_section_contents_in_window, NAME ##_get_section_contents_in_window_with_mode
# 5782 "../bfd/bfd.h"
  bfd_boolean (*_close_and_cleanup) (bfd *);

  bfd_boolean (*_bfd_free_cached_info) (bfd *);

  bfd_boolean (*_new_section_hook) (bfd *, sec_ptr);

  bfd_boolean (*_bfd_get_section_contents)
    (bfd *, sec_ptr, void *, file_ptr, bfd_size_type);
  bfd_boolean (*_bfd_get_section_contents_in_window)
    (bfd *, sec_ptr, bfd_window *, file_ptr, bfd_size_type);
  bfd_boolean (*_bfd_get_section_contents_in_window_with_mode)
    (bfd *, sec_ptr, bfd_window *, file_ptr, bfd_size_type, bfd_boolean);


#define BFD_JUMP_TABLE_COPY(NAME) NAME ##_bfd_copy_private_bfd_data, NAME ##_bfd_merge_private_bfd_data, NAME ##_bfd_copy_private_section_data, NAME ##_bfd_copy_private_symbol_data, NAME ##_bfd_copy_private_header_data, NAME ##_bfd_set_private_flags, NAME ##_bfd_print_private_bfd_data
# 5807 "../bfd/bfd.h"
  bfd_boolean (*_bfd_copy_private_bfd_data) (bfd *, bfd *);


  bfd_boolean (*_bfd_merge_private_bfd_data) (bfd *, bfd *);


  bfd_boolean (*_bfd_copy_private_section_data)
    (bfd *, sec_ptr, bfd *, sec_ptr);


  bfd_boolean (*_bfd_copy_private_symbol_data)
    (bfd *, asymbol *, bfd *, asymbol *);


  bfd_boolean (*_bfd_copy_private_header_data)
    (bfd *, bfd *);

  bfd_boolean (*_bfd_set_private_flags) (bfd *, flagword);


  bfd_boolean (*_bfd_print_private_bfd_data) (bfd *, void *);


#define BFD_JUMP_TABLE_CORE(NAME) NAME ##_core_file_failing_command, NAME ##_core_file_failing_signal, NAME ##_core_file_matches_executable_p




  char * (*_core_file_failing_command) (bfd *);
  int (*_core_file_failing_signal) (bfd *);
  bfd_boolean (*_core_file_matches_executable_p) (bfd *, bfd *);


#define BFD_JUMP_TABLE_ARCHIVE(NAME) NAME ##_slurp_armap, NAME ##_slurp_extended_name_table, NAME ##_construct_extended_name_table, NAME ##_truncate_arname, NAME ##_write_armap, NAME ##_read_ar_hdr, NAME ##_openr_next_archived_file, NAME ##_get_elt_at_index, NAME ##_generic_stat_arch_elt, NAME ##_update_armap_timestamp
# 5852 "../bfd/bfd.h"
  bfd_boolean (*_bfd_slurp_armap) (bfd *);
  bfd_boolean (*_bfd_slurp_extended_name_table) (bfd *);
  bfd_boolean (*_bfd_construct_extended_name_table)
    (bfd *, char **, bfd_size_type *, const char **);
  void (*_bfd_truncate_arname) (bfd *, const char *, char *);
  bfd_boolean (*write_armap)
    (bfd *, unsigned int, struct orl *, unsigned int, int);
  void * (*_bfd_read_ar_hdr_fn) (bfd *);
  bfd * (*openr_next_archived_file) (bfd *, bfd *);
#define bfd_get_elt_at_index(b,i) BFD_SEND (b, _bfd_get_elt_at_index, (b,i))
  bfd * (*_bfd_get_elt_at_index) (bfd *, symindex);
  int (*_bfd_stat_arch_elt) (bfd *, struct stat *);
  bfd_boolean (*_bfd_update_armap_timestamp) (bfd *);


#define BFD_JUMP_TABLE_SYMBOLS(NAME) NAME ##_get_symtab_upper_bound, NAME ##_canonicalize_symtab, NAME ##_make_empty_symbol, NAME ##_print_symbol, NAME ##_get_symbol_info, NAME ##_bfd_is_local_label_name, NAME ##_bfd_is_target_special_symbol, NAME ##_get_lineno, NAME ##_find_nearest_line, _bfd_generic_find_line, NAME ##_find_inliner_info, NAME ##_bfd_make_debug_symbol, NAME ##_read_minisymbols, NAME ##_minisymbol_to_symbol
# 5883 "../bfd/bfd.h"
  long (*_bfd_get_symtab_upper_bound) (bfd *);
  long (*_bfd_canonicalize_symtab)
    (bfd *, struct bfd_symbol **);
  struct bfd_symbol *
              (*_bfd_make_empty_symbol) (bfd *);
  void (*_bfd_print_symbol)
    (bfd *, void *, struct bfd_symbol *, bfd_print_symbol_type);
#define bfd_print_symbol(b,p,s,e) BFD_SEND (b, _bfd_print_symbol, (b,p,s,e))
  void (*_bfd_get_symbol_info)
    (bfd *, struct bfd_symbol *, symbol_info *);
#define bfd_get_symbol_info(b,p,e) BFD_SEND (b, _bfd_get_symbol_info, (b,p,e))
  bfd_boolean (*_bfd_is_local_label_name) (bfd *, const char *);
  bfd_boolean (*_bfd_is_target_special_symbol) (bfd *, asymbol *);
  alent * (*_get_lineno) (bfd *, struct bfd_symbol *);
  bfd_boolean (*_bfd_find_nearest_line)
    (bfd *, struct bfd_section *, struct bfd_symbol **, bfd_vma,
     const char **, const char **, unsigned int *);
  bfd_boolean (*_bfd_find_line)
    (bfd *, struct bfd_symbol **, struct bfd_symbol *,
     const char **, unsigned int *);
  bfd_boolean (*_bfd_find_inliner_info)
    (bfd *, const char **, const char **, unsigned int *);



  asymbol * (*_bfd_make_debug_symbol)
    (bfd *, void *, unsigned long size);
#define bfd_read_minisymbols(b,d,m,s) BFD_SEND (b, _read_minisymbols, (b, d, m, s))

  long (*_read_minisymbols)
    (bfd *, bfd_boolean, void **, unsigned int *);
#define bfd_minisymbol_to_symbol(b,d,m,f) BFD_SEND (b, _minisymbol_to_symbol, (b, d, m, f))

  asymbol * (*_minisymbol_to_symbol)
    (bfd *, bfd_boolean, const void *, asymbol *);


#define BFD_JUMP_TABLE_RELOCS(NAME) NAME ##_get_reloc_upper_bound, NAME ##_canonicalize_reloc, NAME ##_bfd_reloc_type_lookup




  long (*_get_reloc_upper_bound) (bfd *, sec_ptr);
  long (*_bfd_canonicalize_reloc)
    (bfd *, sec_ptr, arelent **, struct bfd_symbol **);

  reloc_howto_type *
              (*reloc_type_lookup) (bfd *, bfd_reloc_code_real_type);


#define BFD_JUMP_TABLE_WRITE(NAME) NAME ##_set_arch_mach, NAME ##_set_section_contents



  bfd_boolean (*_bfd_set_arch_mach)
    (bfd *, enum bfd_architecture, unsigned long);
  bfd_boolean (*_bfd_set_section_contents)
    (bfd *, sec_ptr, const void *, file_ptr, bfd_size_type);


#define BFD_JUMP_TABLE_LINK(NAME) NAME ##_sizeof_headers, NAME ##_bfd_get_relocated_section_contents, NAME ##_bfd_relax_section, NAME ##_bfd_link_hash_table_create, NAME ##_bfd_link_hash_table_free, NAME ##_bfd_link_add_symbols, NAME ##_bfd_link_just_syms, NAME ##_bfd_final_link, NAME ##_bfd_link_split_section, NAME ##_bfd_gc_sections, NAME ##_bfd_merge_sections, NAME ##_bfd_is_group_section, NAME ##_bfd_discard_group, NAME ##_section_already_linked
# 5959 "../bfd/bfd.h"
  int (*_bfd_sizeof_headers) (bfd *, bfd_boolean);
  bfd_byte * (*_bfd_get_relocated_section_contents)
    (bfd *, struct bfd_link_info *, struct bfd_link_order *,
     bfd_byte *, bfd_boolean, struct bfd_symbol **);

  bfd_boolean (*_bfd_relax_section)
    (bfd *, struct bfd_section *, struct bfd_link_info *, bfd_boolean *);



  struct bfd_link_hash_table *
              (*_bfd_link_hash_table_create) (bfd *);


  void (*_bfd_link_hash_table_free) (struct bfd_link_hash_table *);


  bfd_boolean (*_bfd_link_add_symbols) (bfd *, struct bfd_link_info *);


  void (*_bfd_link_just_syms) (asection *, struct bfd_link_info *);



  bfd_boolean (*_bfd_final_link) (bfd *, struct bfd_link_info *);


  bfd_boolean (*_bfd_link_split_section) (bfd *, struct bfd_section *);


  bfd_boolean (*_bfd_gc_sections) (bfd *, struct bfd_link_info *);


  bfd_boolean (*_bfd_merge_sections) (bfd *, struct bfd_link_info *);


  bfd_boolean (*_bfd_is_group_section) (bfd *, const struct bfd_section *);


  bfd_boolean (*_bfd_discard_group) (bfd *, struct bfd_section *);



  void (*_section_already_linked) (bfd *, struct bfd_section *);


#define BFD_JUMP_TABLE_DYNAMIC(NAME) NAME ##_get_dynamic_symtab_upper_bound, NAME ##_canonicalize_dynamic_symtab, NAME ##_get_synthetic_symtab, NAME ##_get_dynamic_reloc_upper_bound, NAME ##_canonicalize_dynamic_reloc







  long (*_bfd_get_dynamic_symtab_upper_bound) (bfd *);

  long (*_bfd_canonicalize_dynamic_symtab)
    (bfd *, struct bfd_symbol **);

  long (*_bfd_get_synthetic_symtab)
    (bfd *, long, struct bfd_symbol **, long, struct bfd_symbol **,
     struct bfd_symbol **);

  long (*_bfd_get_dynamic_reloc_upper_bound) (bfd *);

  long (*_bfd_canonicalize_dynamic_reloc)
    (bfd *, arelent **, struct bfd_symbol **);


  const struct bfd_target * alternative_target;



  const void *backend_data;

} bfd_target;

bfd_boolean bfd_set_default_target (const char *name);

const bfd_target *bfd_find_target (const char *target_name, bfd *abfd);

const bfd_target *bfd_get_target_info(const char *target_name,
    bfd *abfd,
    bfd_boolean *is_bigendian,
    int *underscoring,
    const char **def_target_arch);
const char ** bfd_target_list (void);

const bfd_target *bfd_search_for_target
   (int (*search_func) (const bfd_target *, void *),
    void *);


bfd_boolean bfd_check_format (bfd *abfd, bfd_format format);

bfd_boolean bfd_check_format_matches
   (bfd *abfd, bfd_format format, char ***matching);

bfd_boolean bfd_set_format (bfd *abfd, bfd_format format);

const char *bfd_format_string (bfd_format format);


bfd_boolean bfd_link_split_section (bfd *abfd, asection *sec);

#define bfd_link_split_section(abfd,sec) BFD_SEND (abfd, _bfd_link_split_section, (abfd, sec))


void bfd_section_already_linked (bfd *abfd, asection *sec);

#define bfd_section_already_linked(abfd,sec) BFD_SEND (abfd, _section_already_linked, (abfd, sec))



bfd_byte *bfd_simple_get_relocated_section_contents
   (bfd *abfd, asection *sec, bfd_byte *outbuf, asymbol **symbol_table);


bfd_boolean bfd_compress_section_contents
   (bfd *abfd, asection *section, bfd_byte *uncompressed_buffer,
    bfd_size_type uncompressed_size);

bfd_boolean bfd_get_full_section_contents
   (bfd *abfd, asection *section, bfd_byte **ptr);

void bfd_cache_section_contents
   (asection *sec, void *contents);

bfd_boolean bfd_is_section_compressed
   (bfd *abfd, asection *section);

bfd_boolean bfd_init_section_decompress_status
   (bfd *abfd, asection *section);

bfd_boolean bfd_init_section_compress_status
   (bfd *abfd, asection *section);


}
# 153 "defs.h" 2




# 1 "../intl/libintl.h" 1
# 158 "defs.h" 2
#define _(String) gettext (String)

#define N_(String) gettext_noop (String)
# 171 "defs.h"
#define dcgettext(Domainname,Msgid,Category) (Msgid)


#define textdomain(Domainname) while (0)


#define bindtextdomain(Domainname,Dirname) while (0)
# 219 "defs.h"
typedef bfd_byte gdb_byte;


typedef bfd_vma CORE_ADDR;
#define CORE_ADDR_DEFINED 1



#define INVALID_ADDRESS ((CORE_ADDR)(-1L))





#define LONGEST BFD_HOST_64_BIT
#define ULONGEST BFD_HOST_U_64_BIT
# 254 "defs.h"
#define min(a,b) ((a) < (b) ? (a) : (b))


#define max(a,b) ((a) > (b) ? (a) : (b))
# 309 "defs.h"
#define DEPRECATED_STREQ(a,b) (strcmp((a), (b)) == 0)
#define DEPRECATED_STREQN(a,b,c) (strncmp((a), (b), (c)) == 0)


extern int is_cplus_marker(int);


extern int xdb_commands;


extern int dbx_commands;


extern const char *gdb_sysroot;

extern int quit_flag;
extern int immediate_quit;
extern int sevenbit_strings;

extern void quit(void);
# 348 "defs.h"
#define QUIT { if (quit_flag) quit(); }
# 359 "defs.h"
enum language
  {
    language_unknown,
    language_auto,
    language_c,
    language_cplus,
    language_objc,

    language_objcplus,
    language_java,
    language_fortran,
    language_m2,
    language_asm,
    language_scm,
    language_pascal,
    language_ada,
    language_minimal,
    nr_languages
  };

enum precision_type
  {
    single_precision,
    double_precision,
    unspecified_precision
  };


enum auto_boolean
{
  AUTO_BOOLEAN_TRUE,
  AUTO_BOOLEAN_FALSE,
  AUTO_BOOLEAN_AUTO
};


enum return_value_convention
{


  RETURN_VALUE_REGISTER_CONVENTION,






  RETURN_VALUE_STRUCT_CONVENTION,





  RETURN_VALUE_ABI_RETURNS_ADDRESS,





  RETURN_VALUE_ABI_PRESERVES_ADDRESS
};
# 436 "defs.h"
struct cleanup
  {
    struct cleanup *next;
    void (*function)(void *);
    void *arg;
  };
# 456 "defs.h"
#define NORETURN 
# 467 "defs.h"
#define ATTR_NORETURN __attribute__((noreturn))







#define ATTR_FORMAT(type,x,y) __attribute__((format(type, x, y)))
# 514 "defs.h"
struct symtab;
struct breakpoint;
struct frame_info;


struct symtab_and_line;
struct ui_out;
struct symbol;



extern void set_screen_size(void);
extern void set_width(void);


extern void initialize_utils(void);

extern void notice_quit(void);

extern int strcmp_iw(const char *, const char *);

extern int strcmp_iw_ordered(const char *, const char *);

extern int streq(const char *, const char *);

extern int subset_compare(char *, const char *);

extern char *safe_strerror(int) __attribute__((warn_unused_result));


extern void *init_malloc(void *) __attribute__((warn_unused_result)) __attribute__((__malloc__));
extern void init_mmalloc_default_pool(void *);


extern void request_quit(int);

#define ALL_CLEANUPS ((struct cleanup *)0)

extern void do_cleanups(struct cleanup *);
extern void do_final_cleanups(struct cleanup *);
extern void do_run_cleanups(struct cleanup *);
extern void do_exec_cleanups(struct cleanup *);
extern void do_exec_error_cleanups(struct cleanup *);

extern void do_hand_call_cleanups(struct cleanup *);

extern void discard_cleanups(struct cleanup *);
extern void discard_final_cleanups(struct cleanup *);
extern void discard_exec_error_cleanups(struct cleanup *);

extern void discard_hand_call_cleanups(struct cleanup *old_chain);
extern void discard_my_cleanups(struct cleanup **, struct cleanup *);






typedef void (make_cleanup_ftype)(void *);

extern struct cleanup *make_cleanup(make_cleanup_ftype *, void *);

extern struct cleanup *make_cleanup_freeargv(char **);

struct ui_file;
extern struct cleanup *make_cleanup_ui_file_delete(struct ui_file *);


struct cleanup *make_cleanup_ui_out_delete(struct ui_out *);
struct cleanup *make_cleanup_restore_uiout(struct ui_out *);
struct cleanup *make_cleanup_ui_out_suppress_output(struct ui_out *cur_uiout);


struct section_addr_info;
extern struct cleanup *(make_cleanup_free_section_addr_info
                        (struct section_addr_info *));

extern struct cleanup *make_cleanup_close(int fd);

extern struct cleanup *make_cleanup_bfd_close(bfd *abfd);

extern struct cleanup *make_final_cleanup(make_cleanup_ftype *, void *);

extern struct cleanup *make_my_cleanup(struct cleanup **,
                                       make_cleanup_ftype *, void *);

extern struct cleanup *make_run_cleanup(make_cleanup_ftype *, void *);

extern struct cleanup *make_exec_cleanup(make_cleanup_ftype *, void *);
extern struct cleanup *make_exec_error_cleanup(make_cleanup_ftype *, void *);


extern struct cleanup *make_hand_call_cleanup(make_cleanup_ftype *, void *);

extern struct cleanup *save_cleanups(void);
extern struct cleanup *save_final_cleanups(void);
extern struct cleanup *save_my_cleanups(struct cleanup **);

extern void restore_cleanups(struct cleanup *);
extern void restore_final_cleanups(struct cleanup *);
extern void restore_my_cleanups(struct cleanup **, struct cleanup *);

extern void free_current_contents(void *);

extern void null_cleanup(void *);

extern int myread(int, char *, int);

extern int query(const char *, ...) __attribute__((format(printf, 1, 2)));
extern int nquery(const char *, ...) __attribute__((format(printf, 1, 2)));
extern int yquery(const char *, ...) __attribute__((format(printf, 1, 2)));

extern void init_page_info(void);

extern char *gdb_realpath(const char *) __attribute__((warn_unused_result));
extern char *xfullpath(const char *) __attribute__((warn_unused_result));

extern unsigned long gnu_debuglink_crc32(unsigned long crc,
                                         unsigned char *buf, size_t len);

extern const char *bundle_basename(const char *filepath) __attribute__((warn_unused_result));

extern void unlimit_file_rlimit(void);
extern void restore_file_rlimit(void);



extern void set_demangling_style(const char *);




extern CORE_ADDR decode_fix_and_continue_trampoline(CORE_ADDR);
extern void update_picbase_register(struct symbol *);
extern void fix_command_1(const char *, const char *, const char *);
extern int fix_and_continue_supported(void);
extern int file_exists_p(const char *);



struct type;
typedef int (use_struct_convention_fn)(int gcc_p, struct type *value_type);
extern use_struct_convention_fn generic_use_struct_convention;




extern int annotation_level;

extern void begin_line(void);

extern void wrap_here(const char *);

extern void reinitialize_more_filter(void);


extern struct ui_file *gdb_stdout;

extern struct ui_file *gdb_stdin;

extern struct ui_file *gdb_stderr;




extern struct ui_file *gdb_stdlog;




extern struct ui_file *gdb_stdtarg;
extern struct ui_file *gdb_stdtargerr;
extern struct ui_file *gdb_stdtargin;

extern struct ui_file *gdb_null;

# 1 "ui-file.h" 1
# 22 "ui-file.h"
#define UI_FILE_H 

struct ui_file;



extern struct ui_file *ui_file_new (void);




typedef void (ui_file_flush_ftype) (struct ui_file * stream);
extern void set_ui_file_flush (struct ui_file *stream, ui_file_flush_ftype * flush);



typedef void (ui_file_write_ftype) (struct ui_file * stream, const char *buf, long length_buf);
extern void set_ui_file_write (struct ui_file *stream, ui_file_write_ftype *fputs);

typedef void (ui_file_fputs_ftype) (const char *, struct ui_file * stream);
extern void set_ui_file_fputs (struct ui_file *stream, ui_file_fputs_ftype * fputs);

typedef long (ui_file_read_ftype) (struct ui_file * stream, char *buf, long length_buf);
extern void set_ui_file_read (struct ui_file *stream, ui_file_read_ftype *fread);

typedef int (ui_file_isatty_ftype) (struct ui_file * stream);
extern void set_ui_file_isatty (struct ui_file *stream, ui_file_isatty_ftype * isatty);

typedef void (ui_file_rewind_ftype) (struct ui_file * stream);
extern void set_ui_file_rewind (struct ui_file *stream, ui_file_rewind_ftype * rewind);

typedef void (ui_file_put_method_ftype) (void *object, const char *buffer, long length_buffer);
typedef void (ui_file_put_ftype) (struct ui_file *stream, ui_file_put_method_ftype * method, void *context);
extern void set_ui_file_put (struct ui_file *stream, ui_file_put_ftype * put);

typedef void (ui_file_delete_ftype) (struct ui_file * stream);
extern void set_ui_file_data (struct ui_file *stream, void *data, ui_file_delete_ftype *);

extern void *ui_file_data (struct ui_file *file);


extern void gdb_flush (struct ui_file *);

extern void ui_file_delete (struct ui_file *stream);

extern void ui_file_rewind (struct ui_file *stream);

extern int ui_file_isatty (struct ui_file *);

extern void ui_file_write (struct ui_file *file, const char *buf, long length_buf);


extern void ui_file_put (struct ui_file *src, ui_file_put_method_ftype *write, void *dest);





extern char *ui_file_xstrdup (struct ui_file *file, long *length);



extern long ui_file_read (struct ui_file *file, char *buf, long length_buf);



extern struct ui_file *mem_fileopen (void);




extern struct ui_file *stdio_fileopen(FILE *file);


extern struct ui_file *gdb_fopen(const char *name, const char *mode);




struct ui_file *tee_file_new (struct ui_file *one,
         int close_one,
         struct ui_file *two,
         int close_two);
# 691 "defs.h" 2




extern void fputs_filtered(const char *, struct ui_file *);

extern void fputs_unfiltered(const char *, struct ui_file *);

extern int fputc_filtered(int c, struct ui_file *);

extern int fputc_unfiltered(int c, struct ui_file *);

extern int putchar_filtered(int c);

extern int putchar_unfiltered(int c);

extern void puts_filtered(const char *);

extern void puts_unfiltered(const char *);

extern void puts_filtered_tabular(char *string, int width, int right);

extern void puts_debug(const char *prefix, const char *string,
         const char *suffix);

extern void vprintf_filtered(const char *, va_list)
  __attribute__((format(printf, 1, 0)));

extern void vfprintf_filtered(struct ui_file *, const char *, va_list)
  __attribute__((format(gnu_printf, 2, 0)));

extern void fprintf_filtered(struct ui_file *, const char *, ...)
  __attribute__((format(gnu_printf, 2, 3)));

extern void fprintfi_filtered(int, struct ui_file *, const char *, ...)
  __attribute__((format(printf, 3, 4)));

extern void printf_filtered(const char *, ...) __attribute__((format(printf, 1, 2)));

extern void printfi_filtered(int, const char *, ...)
  __attribute__((format(printf, 2, 3)));

extern void vprintf_unfiltered(const char *, va_list)
  __attribute__((format(printf, 1, 0)));

extern void vfprintf_unfiltered(struct ui_file *, const char *, va_list)
  __attribute__((format(printf, 2, 0)));

extern void fprintf_unfiltered(struct ui_file *, const char *, ...)
  __attribute__((format(printf, 2, 3)));

extern void printf_unfiltered(const char *, ...) __attribute__((format(printf, 1, 2)));

extern void print_spaces(int, struct ui_file *);

extern void print_spaces_filtered(int, struct ui_file *);

extern char *n_spaces(int);

extern void fputstr_filtered(const char *str, int quotr,
                             struct ui_file *stream);

extern void fputstr_unfiltered(const char *str, int quotr,
                               struct ui_file *stream);

extern void fputstrn_unfiltered(const char *str, int n, int quotr,
                                struct ui_file *stream);


extern void gdb_print_host_address(const void *addr, struct ui_file *stream);




extern int strlen_paddr(void);
extern char *paddr(CORE_ADDR addr);
extern char *paddr_nz(CORE_ADDR addr);
extern char *paddr_u(CORE_ADDR addr);
extern char *paddr_d(long long addr);


extern const char *paddress(CORE_ADDR addr);

extern char *phex(unsigned long long l, int sizeof_l);
extern char *phex_nz(unsigned long long l, int sizeof_l);
extern char *int_string(long long, int, int, int, int);




extern const char *core_addr_to_string(const CORE_ADDR addr);
extern const char *core_addr_to_string_nz(const CORE_ADDR addr);
extern CORE_ADDR string_to_core_addr(const char *my_string);



extern char *hex_string(long long);
extern char *hex_string_custom(long long, int);

extern void fprintf_symbol_filtered(struct ui_file *, const char *,
        enum language, int);

extern void perror_with_name(const char *) __attribute__((noreturn));

extern void print_sys_errmsg(const char *, int);



extern void symbol_file_command(const char *, int);


extern void generic_load(const char *name, int from_tty);


struct timeval;
extern void print_transfer_performance(struct ui_file *stream,
                                       unsigned long data_count,
                                       unsigned long write_count,
                                       const struct timeval *start_time,
                                       const struct timeval *end_time);



typedef void initialize_file_ftype(void);

extern char *skip_quoted(const char *);

extern char *gdb_readline(char *);

extern char *gdb_readline_wrapper(char *);

extern char *command_line_input(const char *, int, const char *);

extern void print_prompt(void);

extern int input_from_terminal_p(void);

extern int info_verbose;


extern int gdb_quitting;



extern void set_next_address (CORE_ADDR);

extern void print_address_symbolic(CORE_ADDR, struct ui_file *, int,
       const char *);

extern int build_address_symbolic(CORE_ADDR addr, int do_demangle,
      char **name, int *offset,
                                  char **filename, int *line,
                                  int *unmapped);

extern void deprecated_print_address_numeric(CORE_ADDR, int,
                                             struct ui_file *)
  __attribute__((__deprecated__("Use '" "paddress" "' instead")));

extern void print_address(CORE_ADDR, struct ui_file *);



#define OPF_TRY_CWD_FIRST 0x01
#define OPF_SEARCH_IN_PATH 0x02

extern int openp(const char *, int, const char *, int, int, char **);

extern int source_full_path_of(char *, char **);

extern void mod_path(const char *, char **);

extern void add_path(const char *, char **, int);

extern void directory_command(const char *, int);

extern char *source_path;

extern void init_source_path(void);

extern void init_last_source_visited(void);



extern void exec_set_section_offsets(bfd_signed_vma text_off,
         bfd_signed_vma data_off,
         bfd_signed_vma bss_off);


extern void exec_set_find_memory_regions(int (*)(int (*)(CORE_ADDR,
                                                         unsigned long,
                                                         int, int, int,
                                                         void *),
                                                 void *));




enum lval_type
  {

    not_lval,

    lval_memory,

    lval_register,


    lval_register_literal,


    lval_internalvar,

    lval_internalvar_component
  };



enum misc_command_type
  {
    ok_command,
    end_command,
    else_command,
    nop_command
  };

enum command_control_type
  {
    simple_control,
    break_control,
    continue_control,
    while_control,
    if_control,
    commands_control,
    invalid_control
  };




struct command_line
  {
    struct command_line *next;
    char *line;
    enum command_control_type control_type;
    int body_count;
    struct command_line **body_list;
  };




extern struct command_line *read_command_lines(char *, int);
extern struct command_line *read_command_lines_1(char *(*read_next_line_func)(void));

extern void free_command_lines(struct command_line **);







struct continuation_arg
  {
    struct continuation_arg *next;
    union continuation_data {
      void *pointer;
      int integer;
      long longint;
    } data;
  };

struct continuation
  {
    void (*continuation_hook)(struct continuation_arg *);
    struct continuation_arg *arg_list;
    struct continuation *next;
  };


extern struct continuation *cmd_continuation;

extern struct continuation *intermediate_continuation;


extern void add_continuation(void (*)(struct continuation_arg *),
        struct continuation_arg *);
extern void do_all_continuations(void);
extern void discard_all_continuations(void);

extern void add_intermediate_continuation(void (*)(struct continuation_arg *),
                                          struct continuation_arg *);
extern void do_all_intermediate_continuations(void);
extern void discard_all_intermediate_continuations(void);



extern char *current_directory;


extern unsigned input_radix;
extern unsigned output_radix;







enum val_prettyprint
  {
    Val_no_prettyprint = 0,
    Val_prettyprint,

    Val_pretty_default
  };
# 1026 "defs.h"
struct ptid
  {

    int pid;


    long lwp;


    long tid;
  };

typedef struct ptid ptid_t;






enum scheduler_locking_mode {
  scheduler_locking_off = 0,
  scheduler_locking_on = 1,
  scheduler_locking_step = 2
};

extern enum scheduler_locking_mode
  set_scheduler_locking_mode(enum scheduler_locking_mode new_mode);
extern void scheduler_run_this_ptid(struct ptid this_ptid);
extern int scheduler_lock_on_p(void);
extern struct ptid get_scheduler_lock_ptid(void);
extern struct cleanup *
  make_cleanup_set_restore_scheduler_locking_mode(enum scheduler_locking_mode);


extern uint8_t **get_binary_file_uuids(const char *filename);

extern void free_uuids_array(uint8_t **uuids);

extern char *puuid(uint8_t *uuid);

extern const char *re_comp(const char *str);

extern int re_exec(const char *str);

extern int re_set_syntax(int newflags);

extern int re_search_oneshot(regex_t *patbuf, const char *str, int size,
        int start, int range, void *regs);




enum gdb_osabi
{
  GDB_OSABI_UNINITIALIZED = -1,

  GDB_OSABI_UNKNOWN = 0,

  GDB_OSABI_SVR4 = 1,
  GDB_OSABI_HURD = 2,
  GDB_OSABI_SOLARIS = 3,
  GDB_OSABI_OSF1 = 4,
  GDB_OSABI_LINUX = 5,
  GDB_OSABI_FREEBSD_AOUT = 6,
  GDB_OSABI_FREEBSD_ELF = 7,
  GDB_OSABI_NETBSD_AOUT = 8,
  GDB_OSABI_NETBSD_ELF = 9,
  GDB_OSABI_OPENBSD_ELF = 10,
  GDB_OSABI_WINCE = 11,
  GDB_OSABI_GO32 = 12,
  GDB_OSABI_NETWARE = 13,
  GDB_OSABI_IRIX = 14,
  GDB_OSABI_LYNXOS = 15,
  GDB_OSABI_INTERIX = 16,
  GDB_OSABI_HPUX_ELF = 17,
  GDB_OSABI_HPUX_SOM = 18,

  GDB_OSABI_DARWIN = 19,
  GDB_OSABI_DARWIN64 = 20,
  GDB_OSABI_DARWINV6 = 21,
  GDB_OSABI_DARWINV7 = 22,
  GDB_OSABI_DARWINV7F = 23,
  GDB_OSABI_DARWINV7S = 24,
  GDB_OSABI_DARWINV7K = 25,


  GDB_OSABI_QNXNTO = 26,

  GDB_OSABI_CYGWIN = 27,

  GDB_OSABI_AIX = 28,
  GDB_OSABI_DICOS = 29,
  GDB_OSABI_SYMBIAN = 30,







  GDB_OSABI_INVALID
};







# 1 "xm.h" 1
# 23 "xm.h"
#define XM_I386_MACOSX_H 

# 1 "./macosx/xm-macosx.h" 1
# 24 "./macosx/xm-macosx.h"
#define _XM_MACOSX_H_ 

# 1 "/usr/include/mach/mach.h" 1 3 4
# 60 "/usr/include/mach/mach.h" 3 4
#define _MACH_H_ 

#define __MACH30__ 
#define MACH_IPC_FLAVOR UNTYPED

# 1 "/usr/include/mach/std_types.h" 1 3 4
# 64 "/usr/include/mach/std_types.h" 3 4
#define _MACH_STD_TYPES_H_ 


# 1 "/usr/include/mach/boolean.h" 1 3 4
# 66 "/usr/include/mach/boolean.h" 3 4
#define _MACH_BOOLEAN_H_ 






# 1 "/usr/include/mach/machine/boolean.h" 1 3 4
# 30 "/usr/include/mach/machine/boolean.h" 3 4
#define _MACH_MACHINE_BOOLEAN_H_ 




# 1 "/usr/include/mach/i386/boolean.h" 1 3 4
# 66 "/usr/include/mach/i386/boolean.h" 3 4
#define _MACH_I386_BOOLEAN_H_ 





# 71 "/usr/include/mach/i386/boolean.h" 3 4
typedef int boolean_t;
# 36 "/usr/include/mach/machine/boolean.h" 2 3 4
# 74 "/usr/include/mach/boolean.h" 2 3 4
# 68 "/usr/include/mach/std_types.h" 2 3 4
# 1 "/usr/include/mach/kern_return.h" 1 3 4
# 68 "/usr/include/mach/kern_return.h" 3 4
#define _MACH_KERN_RETURN_H_ 

# 1 "/usr/include/mach/machine/kern_return.h" 1 3 4
# 30 "/usr/include/mach/machine/kern_return.h" 3 4
#define _MACH_MACHINE_KERN_RETURN_H_ 




# 1 "/usr/include/mach/i386/kern_return.h" 1 3 4
# 68 "/usr/include/mach/i386/kern_return.h" 3 4
#define _MACH_I386_KERN_RETURN_H_ 


typedef int kern_return_t;
# 36 "/usr/include/mach/machine/kern_return.h" 2 3 4
# 71 "/usr/include/mach/kern_return.h" 2 3 4

#define KERN_SUCCESS 0

#define KERN_INVALID_ADDRESS 1



#define KERN_PROTECTION_FAILURE 2




#define KERN_NO_SPACE 3





#define KERN_INVALID_ARGUMENT 4




#define KERN_FAILURE 5



#define KERN_RESOURCE_SHORTAGE 6




#define KERN_NOT_RECEIVER 7




#define KERN_NO_ACCESS 8



#define KERN_MEMORY_FAILURE 9





#define KERN_MEMORY_ERROR 10







#define KERN_ALREADY_IN_SET 11



#define KERN_NOT_IN_SET 12



#define KERN_NAME_EXISTS 13



#define KERN_ABORTED 14




#define KERN_INVALID_NAME 15



#define KERN_INVALID_TASK 16



#define KERN_INVALID_RIGHT 17



#define KERN_INVALID_VALUE 18



#define KERN_UREFS_OVERFLOW 19



#define KERN_INVALID_CAPABILITY 20



#define KERN_RIGHT_EXISTS 21




#define KERN_INVALID_HOST 22



#define KERN_MEMORY_PRESENT 23





#define KERN_MEMORY_DATA_MOVED 24
# 198 "/usr/include/mach/kern_return.h" 3 4
#define KERN_MEMORY_RESTART_COPY 25







#define KERN_INVALID_PROCESSOR_SET 26




#define KERN_POLICY_LIMIT 27




#define KERN_INVALID_POLICY 28




#define KERN_INVALID_OBJECT 29




#define KERN_ALREADY_WAITING 30




#define KERN_DEFAULT_SET 31




#define KERN_EXCEPTION_PROTECTED 32





#define KERN_INVALID_LEDGER 33



#define KERN_INVALID_MEMORY_CONTROL 34



#define KERN_INVALID_SECURITY 35




#define KERN_NOT_DEPRESSED 36




#define KERN_TERMINATED 37



#define KERN_LOCK_SET_DESTROYED 38



#define KERN_LOCK_UNSTABLE 39




#define KERN_LOCK_OWNED 40



#define KERN_LOCK_OWNED_SELF 41



#define KERN_SEMAPHORE_DESTROYED 42



#define KERN_RPC_SERVER_TERMINATED 43




#define KERN_RPC_TERMINATE_ORPHAN 44



#define KERN_RPC_CONTINUE_ORPHAN 45



#define KERN_NOT_SUPPORTED 46



#define KERN_NODE_DOWN 47



#define KERN_NOT_WAITING 48


#define KERN_OPERATION_TIMED_OUT 49



#define KERN_RETURN_MAX 0x100
# 69 "/usr/include/mach/std_types.h" 2 3 4
# 1 "/usr/include/mach/port.h" 1 3 4
# 87 "/usr/include/mach/port.h" 3 4
#define _MACH_PORT_H_ 




# 1 "/usr/include/mach/machine/vm_types.h" 1 3 4
# 30 "/usr/include/mach/machine/vm_types.h" 3 4
#define _MACH_MACHINE_VM_TYPES_H_ 




# 1 "/usr/include/mach/i386/vm_types.h" 1 3 4
# 68 "/usr/include/mach/i386/vm_types.h" 3 4
#define _MACH_I386_VM_TYPES_H_ 
# 92 "/usr/include/mach/i386/vm_types.h" 3 4
typedef __darwin_natural_t natural_t;
typedef int integer_t;
# 102 "/usr/include/mach/i386/vm_types.h" 3 4
typedef natural_t vm_offset_t;
# 113 "/usr/include/mach/i386/vm_types.h" 3 4
typedef natural_t vm_size_t;
# 123 "/usr/include/mach/i386/vm_types.h" 3 4
typedef uint64_t mach_vm_address_t;
typedef uint64_t mach_vm_offset_t;
typedef uint64_t mach_vm_size_t;

typedef uint64_t vm_map_offset_t;
typedef uint64_t vm_map_address_t;
typedef uint64_t vm_map_size_t;







#define MACH_MSG_TYPE_INTEGER_T MACH_MSG_TYPE_INTEGER_32
# 36 "/usr/include/mach/machine/vm_types.h" 2 3 4
# 93 "/usr/include/mach/port.h" 2 3 4
# 106 "/usr/include/mach/port.h" 3 4
typedef natural_t mach_port_name_t;
typedef mach_port_name_t *mach_port_name_array_t;
# 127 "/usr/include/mach/port.h" 3 4
#define _MACH_PORT_T 
typedef mach_port_name_t mach_port_t;



typedef mach_port_t *mach_port_array_t;
# 143 "/usr/include/mach/port.h" 3 4
#define MACH_PORT_NULL 0
#define MACH_PORT_DEAD ((mach_port_name_t) ~0)
#define MACH_PORT_VALID(name) (((name) != MACH_PORT_NULL) && ((name) != MACH_PORT_DEAD))
# 166 "/usr/include/mach/port.h" 3 4
#define MACH_PORT_INDEX(name) ((name) >> 8)
#define MACH_PORT_GEN(name) (((name) & 0xff) << 24)
#define MACH_PORT_MAKE(index,gen) (((index) << 8) | (gen) >> 24)
# 190 "/usr/include/mach/port.h" 3 4
typedef natural_t mach_port_right_t;

#define MACH_PORT_RIGHT_SEND ((mach_port_right_t) 0)
#define MACH_PORT_RIGHT_RECEIVE ((mach_port_right_t) 1)
#define MACH_PORT_RIGHT_SEND_ONCE ((mach_port_right_t) 2)
#define MACH_PORT_RIGHT_PORT_SET ((mach_port_right_t) 3)
#define MACH_PORT_RIGHT_DEAD_NAME ((mach_port_right_t) 4)
#define MACH_PORT_RIGHT_LABELH ((mach_port_right_t) 5)
#define MACH_PORT_RIGHT_NUMBER ((mach_port_right_t) 6)

typedef natural_t mach_port_type_t;
typedef mach_port_type_t *mach_port_type_array_t;

#define MACH_PORT_TYPE(right) ((mach_port_type_t)(((mach_port_type_t) 1) << ((right) + ((mach_port_right_t) 16))))


#define MACH_PORT_TYPE_NONE ((mach_port_type_t) 0L)
#define MACH_PORT_TYPE_SEND MACH_PORT_TYPE(MACH_PORT_RIGHT_SEND)
#define MACH_PORT_TYPE_RECEIVE MACH_PORT_TYPE(MACH_PORT_RIGHT_RECEIVE)
#define MACH_PORT_TYPE_SEND_ONCE MACH_PORT_TYPE(MACH_PORT_RIGHT_SEND_ONCE)
#define MACH_PORT_TYPE_PORT_SET MACH_PORT_TYPE(MACH_PORT_RIGHT_PORT_SET)
#define MACH_PORT_TYPE_DEAD_NAME MACH_PORT_TYPE(MACH_PORT_RIGHT_DEAD_NAME)
#define MACH_PORT_TYPE_LABELH MACH_PORT_TYPE(MACH_PORT_RIGHT_LABELH)



#define MACH_PORT_TYPE_SEND_RECEIVE (MACH_PORT_TYPE_SEND|MACH_PORT_TYPE_RECEIVE)

#define MACH_PORT_TYPE_SEND_RIGHTS (MACH_PORT_TYPE_SEND|MACH_PORT_TYPE_SEND_ONCE)

#define MACH_PORT_TYPE_PORT_RIGHTS (MACH_PORT_TYPE_SEND_RIGHTS|MACH_PORT_TYPE_RECEIVE)

#define MACH_PORT_TYPE_PORT_OR_DEAD (MACH_PORT_TYPE_PORT_RIGHTS|MACH_PORT_TYPE_DEAD_NAME)

#define MACH_PORT_TYPE_ALL_RIGHTS (MACH_PORT_TYPE_PORT_OR_DEAD|MACH_PORT_TYPE_PORT_SET)




#define MACH_PORT_TYPE_DNREQUEST 0x80000000



typedef natural_t mach_port_urefs_t;
typedef integer_t mach_port_delta_t;



typedef natural_t mach_port_seqno_t;
typedef natural_t mach_port_mscount_t;
typedef natural_t mach_port_msgcount_t;
typedef natural_t mach_port_rights_t;




#define MACH_PORT_SRIGHTS_NONE 0
#define MACH_PORT_SRIGHTS_PRESENT 1
typedef unsigned int mach_port_srights_t;

typedef struct mach_port_status {
 mach_port_rights_t mps_pset;
 mach_port_seqno_t mps_seqno;
 mach_port_mscount_t mps_mscount;
 mach_port_msgcount_t mps_qlimit;
 mach_port_msgcount_t mps_msgcount;
 mach_port_rights_t mps_sorights;
 boolean_t mps_srights;
 boolean_t mps_pdrequest;
 boolean_t mps_nsrequest;
 natural_t mps_flags;
} mach_port_status_t;


#define MACH_PORT_QLIMIT_ZERO ((mach_port_msgcount_t) 0)
#define MACH_PORT_QLIMIT_BASIC ((mach_port_msgcount_t) 5)
#define MACH_PORT_QLIMIT_SMALL ((mach_port_msgcount_t) 16)
#define MACH_PORT_QLIMIT_LARGE ((mach_port_msgcount_t) 1024)
#define MACH_PORT_QLIMIT_MIN MACH_PORT_QLIMIT_ZERO
#define MACH_PORT_QLIMIT_DEFAULT MACH_PORT_QLIMIT_BASIC
#define MACH_PORT_QLIMIT_MAX MACH_PORT_QLIMIT_LARGE

typedef struct mach_port_limits {
 mach_port_msgcount_t mpl_qlimit;
} mach_port_limits_t;

typedef integer_t *mach_port_info_t;


typedef int mach_port_flavor_t;
#define MACH_PORT_LIMITS_INFO 1
#define MACH_PORT_RECEIVE_STATUS 2
#define MACH_PORT_DNREQUESTS_SIZE 3

#define MACH_PORT_LIMITS_INFO_COUNT ((natural_t) (sizeof(mach_port_limits_t)/sizeof(natural_t)))

#define MACH_PORT_RECEIVE_STATUS_COUNT ((natural_t) (sizeof(mach_port_status_t)/sizeof(natural_t)))

#define MACH_PORT_DNREQUESTS_SIZE_COUNT 1





typedef struct mach_port_qos {
 unsigned int name:1;
 unsigned int prealloc:1;
 boolean_t pad1:30;
 natural_t len;
} mach_port_qos_t;
# 70 "/usr/include/mach/std_types.h" 2 3 4
# 1 "/usr/include/mach/vm_types.h" 1 3 4
# 33 "/usr/include/mach/vm_types.h" 3 4
#define _MACH_VM_TYPES_H_ 






typedef vm_offset_t pointer_t;
typedef vm_offset_t vm_address_t;







typedef uint64_t addr64_t;
# 61 "/usr/include/mach/vm_types.h" 3 4
typedef uint32_t reg64_t;






typedef uint32_t ppnum_t;
#define PPNUM_MAX UINT32_MAX



typedef mach_port_t vm_map_t;


#define VM_MAP_NULL ((vm_map_t) 0)





typedef uint64_t vm_object_offset_t;
typedef uint64_t vm_object_size_t;


typedef mach_port_t upl_t;
typedef mach_port_t vm_named_entry_t;


#define UPL_NULL ((upl_t) 0)
#define VM_NAMED_ENTRY_NULL ((vm_named_entry_t) 0)
# 71 "/usr/include/mach/std_types.h" 2 3 4
# 66 "/usr/include/mach/mach.h" 2 3 4
# 1 "/usr/include/mach/mach_types.h" 1 3 4
# 74 "/usr/include/mach/mach_types.h" 3 4
#define _MACH_MACH_TYPES_H_ 





# 1 "/usr/include/mach/host_info.h" 1 3 4
# 66 "/usr/include/mach/host_info.h" 3 4
#define _MACH_HOST_INFO_H_ 

# 1 "/usr/include/mach/message.h" 1 3 4
# 72 "/usr/include/mach/message.h" 3 4
#define _MACH_MESSAGE_H_ 
# 89 "/usr/include/mach/message.h" 3 4
typedef natural_t mach_msg_timeout_t;






#define MACH_MSG_TIMEOUT_NONE ((mach_msg_timeout_t) 0)
# 123 "/usr/include/mach/message.h" 3 4
#define MACH_MSGH_BITS_ZERO 0x00000000
#define MACH_MSGH_BITS_REMOTE_MASK 0x000000ff
#define MACH_MSGH_BITS_LOCAL_MASK 0x0000ff00
#define MACH_MSGH_BITS_COMPLEX 0x80000000U
#define MACH_MSGH_BITS_USER 0x8000ffffU

#define MACH_MSGH_BITS_CIRCULAR 0x40000000
#define MACH_MSGH_BITS_USED 0xc000ffffU

#define MACH_MSGH_BITS_PORTS_MASK (MACH_MSGH_BITS_REMOTE_MASK|MACH_MSGH_BITS_LOCAL_MASK)


#define MACH_MSGH_BITS(remote,local) ((remote) | ((local) << 8))

#define MACH_MSGH_BITS_REMOTE(bits) ((bits) & MACH_MSGH_BITS_REMOTE_MASK)

#define MACH_MSGH_BITS_LOCAL(bits) (((bits) & MACH_MSGH_BITS_LOCAL_MASK) >> 8)

#define MACH_MSGH_BITS_PORTS(bits) ((bits) & MACH_MSGH_BITS_PORTS_MASK)

#define MACH_MSGH_BITS_OTHER(bits) ((bits) &~ MACH_MSGH_BITS_PORTS_MASK)
# 172 "/usr/include/mach/message.h" 3 4
typedef unsigned int mach_msg_bits_t;
typedef natural_t mach_msg_size_t;
typedef integer_t mach_msg_id_t;


#define MACH_MSG_SIZE_NULL (mach_msg_size_t *) 0

typedef unsigned int mach_msg_type_name_t;

#define MACH_MSG_TYPE_MOVE_RECEIVE 16
#define MACH_MSG_TYPE_MOVE_SEND 17
#define MACH_MSG_TYPE_MOVE_SEND_ONCE 18
#define MACH_MSG_TYPE_COPY_SEND 19
#define MACH_MSG_TYPE_MAKE_SEND 20
#define MACH_MSG_TYPE_MAKE_SEND_ONCE 21
#define MACH_MSG_TYPE_COPY_RECEIVE 22

typedef unsigned int mach_msg_copy_options_t;

#define MACH_MSG_PHYSICAL_COPY 0
#define MACH_MSG_VIRTUAL_COPY 1
#define MACH_MSG_ALLOCATE 2
#define MACH_MSG_OVERWRITE 3




typedef unsigned int mach_msg_descriptor_type_t;

#define MACH_MSG_PORT_DESCRIPTOR 0
#define MACH_MSG_OOL_DESCRIPTOR 1
#define MACH_MSG_OOL_PORTS_DESCRIPTOR 2
#define MACH_MSG_OOL_VOLATILE_DESCRIPTOR 3

#pragma pack(4)

typedef struct
{
  natural_t pad1;
  mach_msg_size_t pad2;
  unsigned int pad3 : 24;
  mach_msg_descriptor_type_t type : 8;
} mach_msg_type_descriptor_t;

typedef struct
{
  mach_port_t name;
  mach_msg_size_t pad1;
  unsigned int pad2 : 16;
  mach_msg_type_name_t disposition : 8;
  mach_msg_descriptor_type_t type : 8;
} mach_msg_port_descriptor_t;

typedef struct
{
  uint32_t address;
  mach_msg_size_t size;
  boolean_t deallocate: 8;
  mach_msg_copy_options_t copy: 8;
  unsigned int pad1: 8;
  mach_msg_descriptor_type_t type: 8;
} mach_msg_ool_descriptor32_t;

typedef struct
{
  uint64_t address;
  boolean_t deallocate: 8;
  mach_msg_copy_options_t copy: 8;
  unsigned int pad1: 8;
  mach_msg_descriptor_type_t type: 8;
  mach_msg_size_t size;
} mach_msg_ool_descriptor64_t;

typedef struct
{
  void* address;

  mach_msg_size_t size;

  boolean_t deallocate: 8;
  mach_msg_copy_options_t copy: 8;
  unsigned int pad1: 8;
  mach_msg_descriptor_type_t type: 8;



} mach_msg_ool_descriptor_t;

typedef struct
{
  uint32_t address;
  mach_msg_size_t count;
  boolean_t deallocate: 8;
  mach_msg_copy_options_t copy: 8;
  mach_msg_type_name_t disposition : 8;
  mach_msg_descriptor_type_t type : 8;
} mach_msg_ool_ports_descriptor32_t;

typedef struct
{
  uint64_t address;
  boolean_t deallocate: 8;
  mach_msg_copy_options_t copy: 8;
  mach_msg_type_name_t disposition : 8;
  mach_msg_descriptor_type_t type : 8;
  mach_msg_size_t count;
} mach_msg_ool_ports_descriptor64_t;

typedef struct
{
  void* address;

  mach_msg_size_t count;

  boolean_t deallocate: 8;
  mach_msg_copy_options_t copy: 8;
  mach_msg_type_name_t disposition : 8;
  mach_msg_descriptor_type_t type : 8;



} mach_msg_ool_ports_descriptor_t;






typedef union
{
  mach_msg_port_descriptor_t port;
  mach_msg_ool_descriptor_t out_of_line;
  mach_msg_ool_ports_descriptor_t ool_ports;
  mach_msg_type_descriptor_t type;
} mach_msg_descriptor_t;

typedef struct
{
        mach_msg_size_t msgh_descriptor_count;
} mach_msg_body_t;

#define MACH_MSG_BODY_NULL (mach_msg_body_t *) 0
#define MACH_MSG_DESCRIPTOR_NULL (mach_msg_descriptor_t *) 0

typedef struct
{
  mach_msg_bits_t msgh_bits;
  mach_msg_size_t msgh_size;
  mach_port_t msgh_remote_port;
  mach_port_t msgh_local_port;
  mach_msg_size_t msgh_reserved;
  mach_msg_id_t msgh_id;
} mach_msg_header_t;

#define MACH_MSG_NULL (mach_msg_header_t *) 0

typedef struct
{
        mach_msg_header_t header;
        mach_msg_body_t body;
} mach_msg_base_t;

typedef unsigned int mach_msg_trailer_type_t;

#define MACH_MSG_TRAILER_FORMAT_0 0

typedef unsigned int mach_msg_trailer_size_t;

typedef struct
{
  mach_msg_trailer_type_t msgh_trailer_type;
  mach_msg_trailer_size_t msgh_trailer_size;
} mach_msg_trailer_t;

typedef struct
{
  mach_msg_trailer_type_t msgh_trailer_type;
  mach_msg_trailer_size_t msgh_trailer_size;
  mach_port_seqno_t msgh_seqno;
} mach_msg_seqno_trailer_t;

typedef struct
{
  unsigned int val[2];
} security_token_t;

typedef struct
{
  mach_msg_trailer_type_t msgh_trailer_type;
  mach_msg_trailer_size_t msgh_trailer_size;
  mach_port_seqno_t msgh_seqno;
  security_token_t msgh_sender;
} mach_msg_security_trailer_t;
# 375 "/usr/include/mach/message.h" 3 4
typedef struct
{
  unsigned int val[8];
} audit_token_t;

typedef struct
{
  mach_msg_trailer_type_t msgh_trailer_type;
  mach_msg_trailer_size_t msgh_trailer_size;
  mach_port_seqno_t msgh_seqno;
  security_token_t msgh_sender;
  audit_token_t msgh_audit;
} mach_msg_audit_trailer_t;

typedef struct
{
  mach_port_name_t sender;
} msg_labels_t;






typedef struct
{
  mach_msg_trailer_type_t msgh_trailer_type;
  mach_msg_trailer_size_t msgh_trailer_size;
  mach_port_seqno_t msgh_seqno;
  security_token_t msgh_sender;
  audit_token_t msgh_audit;
  msg_labels_t msgh_labels;
  int msgh_ad;
} mach_msg_mac_trailer_t;

#define MACH_MSG_TRAILER_MINIMUM_SIZE sizeof(mach_msg_trailer_t)
# 421 "/usr/include/mach/message.h" 3 4
typedef mach_msg_mac_trailer_t mach_msg_max_trailer_t;
#define MAX_TRAILER_SIZE sizeof(mach_msg_max_trailer_t)
# 431 "/usr/include/mach/message.h" 3 4
typedef mach_msg_security_trailer_t mach_msg_format_0_trailer_t;




#define MACH_MSG_TRAILER_FORMAT_0_SIZE sizeof(mach_msg_format_0_trailer_t)

#define KERNEL_SECURITY_TOKEN_VALUE { {0, 1} }
extern security_token_t KERNEL_SECURITY_TOKEN;

#define KERNEL_AUDIT_TOKEN_VALUE { {0, 0, 0, 0, 0, 0, 0, 0} }
extern audit_token_t KERNEL_AUDIT_TOKEN;

typedef integer_t mach_msg_options_t;

typedef struct
{
  mach_msg_header_t header;
} mach_msg_empty_send_t;

typedef struct
{
  mach_msg_header_t header;
  mach_msg_trailer_t trailer;
} mach_msg_empty_rcv_t;

typedef union
{
  mach_msg_empty_send_t send;
  mach_msg_empty_rcv_t rcv;
} mach_msg_empty_t;

#pragma pack()


#define round_msg(x) (((mach_msg_size_t)(x) + sizeof (natural_t) - 1) & ~(sizeof (natural_t) - 1))






#define MACH_MSG_SIZE_MAX ((mach_msg_size_t) ~0)





#define MACH_MSGH_KIND_NORMAL 0x00000000
#define MACH_MSGH_KIND_NOTIFICATION 0x00000001
#define msgh_kind msgh_seqno
#define mach_msg_kind_t mach_port_seqno_t
# 509 "/usr/include/mach/message.h" 3 4
typedef natural_t mach_msg_type_size_t;
typedef natural_t mach_msg_type_number_t;
# 521 "/usr/include/mach/message.h" 3 4
#define MACH_MSG_TYPE_PORT_NONE 0

#define MACH_MSG_TYPE_PORT_NAME 15
#define MACH_MSG_TYPE_PORT_RECEIVE MACH_MSG_TYPE_MOVE_RECEIVE
#define MACH_MSG_TYPE_PORT_SEND MACH_MSG_TYPE_MOVE_SEND
#define MACH_MSG_TYPE_PORT_SEND_ONCE MACH_MSG_TYPE_MOVE_SEND_ONCE

#define MACH_MSG_TYPE_LAST 22






#define MACH_MSG_TYPE_POLYMORPHIC ((mach_msg_type_name_t) -1)





#define MACH_MSG_TYPE_PORT_ANY(x) (((x) >= MACH_MSG_TYPE_MOVE_RECEIVE) && ((x) <= MACH_MSG_TYPE_MAKE_SEND_ONCE))



#define MACH_MSG_TYPE_PORT_ANY_SEND(x) (((x) >= MACH_MSG_TYPE_MOVE_SEND) && ((x) <= MACH_MSG_TYPE_MAKE_SEND_ONCE))



#define MACH_MSG_TYPE_PORT_ANY_RIGHT(x) (((x) >= MACH_MSG_TYPE_MOVE_RECEIVE) && ((x) <= MACH_MSG_TYPE_MOVE_SEND_ONCE))



typedef integer_t mach_msg_option_t;

#define MACH_MSG_OPTION_NONE 0x00000000

#define MACH_SEND_MSG 0x00000001
#define MACH_RCV_MSG 0x00000002
#define MACH_RCV_LARGE 0x00000004

#define MACH_SEND_TIMEOUT 0x00000010
#define MACH_SEND_INTERRUPT 0x00000040
#define MACH_SEND_CANCEL 0x00000080
#define MACH_SEND_ALWAYS 0x00010000
#define MACH_SEND_TRAILER 0x00020000

#define MACH_RCV_TIMEOUT 0x00000100
#define MACH_RCV_NOTIFY 0x00000200
#define MACH_RCV_INTERRUPT 0x00000400
#define MACH_RCV_OVERWRITE 0x00001000
# 582 "/usr/include/mach/message.h" 3 4
#define MACH_RCV_TRAILER_NULL 0
#define MACH_RCV_TRAILER_SEQNO 1
#define MACH_RCV_TRAILER_SENDER 2
#define MACH_RCV_TRAILER_AUDIT 3
#define MACH_RCV_TRAILER_LABELS 4
#define MACH_RCV_TRAILER_AV 8

#define MACH_RCV_TRAILER_TYPE(x) (((x) & 0xf) << 28)
#define MACH_RCV_TRAILER_ELEMENTS(x) (((x) & 0xf) << 24)
#define MACH_RCV_TRAILER_MASK ((0xff << 24))

#define GET_RCV_ELEMENTS(y) (((y) >> 24) & 0xf)
# 603 "/usr/include/mach/message.h" 3 4
#define REQUESTED_TRAILER_SIZE(y) ((mach_msg_trailer_size_t) ((GET_RCV_ELEMENTS(y) == MACH_RCV_TRAILER_NULL) ? sizeof(mach_msg_trailer_t) : ((GET_RCV_ELEMENTS(y) == MACH_RCV_TRAILER_SEQNO) ? sizeof(mach_msg_seqno_trailer_t) : ((GET_RCV_ELEMENTS(y) == MACH_RCV_TRAILER_SENDER) ? sizeof(mach_msg_security_trailer_t) : ((GET_RCV_ELEMENTS(y) == MACH_RCV_TRAILER_AUDIT) ? sizeof(mach_msg_audit_trailer_t) : sizeof(mach_msg_max_trailer_t))))))
# 626 "/usr/include/mach/message.h" 3 4
typedef kern_return_t mach_msg_return_t;

#define MACH_MSG_SUCCESS 0x00000000


#define MACH_MSG_MASK 0x00003e00

#define MACH_MSG_IPC_SPACE 0x00002000

#define MACH_MSG_VM_SPACE 0x00001000

#define MACH_MSG_IPC_KERNEL 0x00000800

#define MACH_MSG_VM_KERNEL 0x00000400


#define MACH_SEND_IN_PROGRESS 0x10000001

#define MACH_SEND_INVALID_DATA 0x10000002

#define MACH_SEND_INVALID_DEST 0x10000003

#define MACH_SEND_TIMED_OUT 0x10000004

#define MACH_SEND_INTERRUPTED 0x10000007

#define MACH_SEND_MSG_TOO_SMALL 0x10000008

#define MACH_SEND_INVALID_REPLY 0x10000009

#define MACH_SEND_INVALID_RIGHT 0x1000000a

#define MACH_SEND_INVALID_NOTIFY 0x1000000b

#define MACH_SEND_INVALID_MEMORY 0x1000000c

#define MACH_SEND_NO_BUFFER 0x1000000d

#define MACH_SEND_TOO_LARGE 0x1000000e

#define MACH_SEND_INVALID_TYPE 0x1000000f

#define MACH_SEND_INVALID_HEADER 0x10000010

#define MACH_SEND_INVALID_TRAILER 0x10000011

#define MACH_SEND_INVALID_RT_OOL_SIZE 0x10000015


#define MACH_RCV_IN_PROGRESS 0x10004001

#define MACH_RCV_INVALID_NAME 0x10004002

#define MACH_RCV_TIMED_OUT 0x10004003

#define MACH_RCV_TOO_LARGE 0x10004004

#define MACH_RCV_INTERRUPTED 0x10004005

#define MACH_RCV_PORT_CHANGED 0x10004006

#define MACH_RCV_INVALID_NOTIFY 0x10004007

#define MACH_RCV_INVALID_DATA 0x10004008

#define MACH_RCV_PORT_DIED 0x10004009

#define MACH_RCV_IN_SET 0x1000400a

#define MACH_RCV_HEADER_ERROR 0x1000400b

#define MACH_RCV_BODY_ERROR 0x1000400c

#define MACH_RCV_INVALID_TYPE 0x1000400d

#define MACH_RCV_SCATTER_SMALL 0x1000400e

#define MACH_RCV_INVALID_TRAILER 0x1000400f

#define MACH_RCV_IN_PROGRESS_TIMED 0x10004011



extern "C" {
# 728 "/usr/include/mach/message.h" 3 4
extern mach_msg_return_t mach_msg_overwrite(
     mach_msg_header_t *msg,
     mach_msg_option_t option,
     mach_msg_size_t send_size,
     mach_msg_size_t rcv_size,
     mach_port_name_t rcv_name,
     mach_msg_timeout_t timeout,
     mach_port_name_t notify,
     mach_msg_header_t *rcv_msg,
     mach_msg_size_t rcv_limit);
# 748 "/usr/include/mach/message.h" 3 4
extern mach_msg_return_t mach_msg(
     mach_msg_header_t *msg,
     mach_msg_option_t option,
     mach_msg_size_t send_size,
     mach_msg_size_t rcv_size,
     mach_port_name_t rcv_name,
     mach_msg_timeout_t timeout,
     mach_port_name_t notify);


}
# 69 "/usr/include/mach/host_info.h" 2 3 4
# 1 "/usr/include/mach/vm_statistics.h" 1 3 4
# 67 "/usr/include/mach/vm_statistics.h" 3 4
#define _MACH_VM_STATISTICS_H_ 



struct vm_statistics {
 natural_t free_count;
 natural_t active_count;
 natural_t inactive_count;
 natural_t wire_count;
 natural_t zero_fill_count;
 natural_t reactivations;
 natural_t pageins;
 natural_t pageouts;
 natural_t faults;
 natural_t cow_faults;
 natural_t lookups;
 natural_t hits;


 natural_t purgeable_count;
 natural_t purges;
# 96 "/usr/include/mach/vm_statistics.h" 3 4
 natural_t speculative_count;
};

typedef struct vm_statistics *vm_statistics_t;
typedef struct vm_statistics vm_statistics_data_t;




#define VM_PAGE_QUERY_PAGE_PRESENT 0x1
#define VM_PAGE_QUERY_PAGE_FICTITIOUS 0x2
#define VM_PAGE_QUERY_PAGE_REF 0x4
#define VM_PAGE_QUERY_PAGE_DIRTY 0x8
#define VM_PAGE_QUERY_PAGE_PAGED_OUT 0x10
#define VM_PAGE_QUERY_PAGE_COPIED 0x20
#define VM_PAGE_QUERY_PAGE_SPECULATIVE 0x40
# 142 "/usr/include/mach/vm_statistics.h" 3 4
#define VM_FLAGS_FIXED 0x0000
#define VM_FLAGS_ANYWHERE 0x0001
#define VM_FLAGS_PURGABLE 0x0002
#define VM_FLAGS_NO_CACHE 0x0010

#define VM_FLAGS_GUARD_BEFORE 0x0010
#define VM_FLAGS_GUARD_AFTER 0x0020

#define VM_FLAGS_ALIAS_MASK 0xFF000000
#define VM_GET_FLAGS_ALIAS(flags,alias) (alias) = ((flags) & VM_FLAGS_ALIAS_MASK) >> 24

#define VM_SET_FLAGS_ALIAS(flags,alias) (flags) = (((flags) & ~VM_FLAGS_ALIAS_MASK) | (((alias) & ~VM_FLAGS_ALIAS_MASK) << 24))




#define VM_FLAGS_USER_ALLOCATE (VM_FLAGS_FIXED | VM_FLAGS_ANYWHERE | VM_FLAGS_PURGABLE | VM_FLAGS_NO_CACHE | VM_FLAGS_ALIAS_MASK)




#define VM_FLAGS_USER_MAP VM_FLAGS_USER_ALLOCATE

#define VM_MEMORY_MALLOC 1
#define VM_MEMORY_MALLOC_SMALL 2
#define VM_MEMORY_MALLOC_LARGE 3
#define VM_MEMORY_MALLOC_HUGE 4
#define VM_MEMORY_SBRK 5
#define VM_MEMORY_REALLOC 6
#define VM_MEMORY_MALLOC_TINY 7

#define VM_MEMORY_ANALYSIS_TOOL 10

#define VM_MEMORY_MACH_MSG 20
#define VM_MEMORY_IOKIT 21
#define VM_MEMORY_STACK 30
#define VM_MEMORY_GUARD 31
#define VM_MEMORY_SHARED_PMAP 32

#define VM_MEMORY_DYLIB 33



#define VM_MEMORY_APPKIT 40
#define VM_MEMORY_FOUNDATION 41
#define VM_MEMORY_COREGRAPHICS 42
#define VM_MEMORY_CARBON 43
#define VM_MEMORY_JAVA 44
#define VM_MEMORY_ATS 50
#define VM_MEMORY_LAYERKIT 51
#define VM_MEMORY_CGIMAGE 52
#define VM_MEMORY_TCMALLOC 53


#define VM_MEMORY_COREGRAPHICS_DATA 54


#define VM_MEMORY_COREGRAPHICS_SHARED 55


#define VM_MEMORY_COREGRAPHICS_FRAMEBUFFERS 56


#define VM_MEMORY_COREGRAPHICS_BACKINGSTORES 57


#define VM_MEMORY_COREGRAPHICS_MISC VM_MEMORY_COREGRAPHICS


#define VM_MEMORY_DYLD 60

#define VM_MEMORY_DYLD_MALLOC 61


#define VM_MEMORY_APPLICATION_SPECIFIC_1 240
#define VM_MEMORY_APPLICATION_SPECIFIC_16 255

#define VM_MAKE_TAG(tag) ((tag) << 24)
# 70 "/usr/include/mach/host_info.h" 2 3 4
# 1 "/usr/include/mach/machine.h" 1 3 4
# 61 "/usr/include/mach/machine.h" 3 4
#define _MACH_MACHINE_H_ 





typedef integer_t cpu_type_t;
typedef integer_t cpu_subtype_t;
typedef integer_t cpu_threadtype_t;

#define CPU_STATE_MAX 4

#define CPU_STATE_USER 0
#define CPU_STATE_SYSTEM 1
#define CPU_STATE_IDLE 2
#define CPU_STATE_NICE 3






#define CPU_ARCH_MASK 0xff000000
#define CPU_ARCH_ABI64 0x01000000





#define CPU_TYPE_ANY ((cpu_type_t) -1)

#define CPU_TYPE_VAX ((cpu_type_t) 1)




#define CPU_TYPE_MC680x0 ((cpu_type_t) 6)
#define CPU_TYPE_X86 ((cpu_type_t) 7)
#define CPU_TYPE_I386 CPU_TYPE_X86
#define CPU_TYPE_X86_64 (CPU_TYPE_X86 | CPU_ARCH_ABI64)



#define CPU_TYPE_MC98000 ((cpu_type_t) 10)
#define CPU_TYPE_HPPA ((cpu_type_t) 11)
#define CPU_TYPE_ARM ((cpu_type_t) 12)
#define CPU_TYPE_MC88000 ((cpu_type_t) 13)
#define CPU_TYPE_SPARC ((cpu_type_t) 14)
#define CPU_TYPE_I860 ((cpu_type_t) 15)


#define CPU_TYPE_POWERPC ((cpu_type_t) 18)
#define CPU_TYPE_POWERPC64 (CPU_TYPE_POWERPC | CPU_ARCH_ABI64)
# 124 "/usr/include/mach/machine.h" 3 4
#define CPU_SUBTYPE_MASK 0xff000000
#define CPU_SUBTYPE_LIB64 0x80000000
# 139 "/usr/include/mach/machine.h" 3 4
#define CPU_SUBTYPE_MULTIPLE ((cpu_subtype_t) -1)
#define CPU_SUBTYPE_LITTLE_ENDIAN ((cpu_subtype_t) 0)
#define CPU_SUBTYPE_BIG_ENDIAN ((cpu_subtype_t) 1)





#define CPU_THREADTYPE_NONE ((cpu_threadtype_t) 0)






#define CPU_SUBTYPE_VAX_ALL ((cpu_subtype_t) 0)
#define CPU_SUBTYPE_VAX780 ((cpu_subtype_t) 1)
#define CPU_SUBTYPE_VAX785 ((cpu_subtype_t) 2)
#define CPU_SUBTYPE_VAX750 ((cpu_subtype_t) 3)
#define CPU_SUBTYPE_VAX730 ((cpu_subtype_t) 4)
#define CPU_SUBTYPE_UVAXI ((cpu_subtype_t) 5)
#define CPU_SUBTYPE_UVAXII ((cpu_subtype_t) 6)
#define CPU_SUBTYPE_VAX8200 ((cpu_subtype_t) 7)
#define CPU_SUBTYPE_VAX8500 ((cpu_subtype_t) 8)
#define CPU_SUBTYPE_VAX8600 ((cpu_subtype_t) 9)
#define CPU_SUBTYPE_VAX8650 ((cpu_subtype_t) 10)
#define CPU_SUBTYPE_VAX8800 ((cpu_subtype_t) 11)
#define CPU_SUBTYPE_UVAXIII ((cpu_subtype_t) 12)
# 185 "/usr/include/mach/machine.h" 3 4
#define CPU_SUBTYPE_MC680x0_ALL ((cpu_subtype_t) 1)
#define CPU_SUBTYPE_MC68030 ((cpu_subtype_t) 1)
#define CPU_SUBTYPE_MC68040 ((cpu_subtype_t) 2)
#define CPU_SUBTYPE_MC68030_ONLY ((cpu_subtype_t) 3)





#define CPU_SUBTYPE_INTEL(f,m) ((cpu_subtype_t) (f) + ((m) << 4))

#define CPU_SUBTYPE_I386_ALL CPU_SUBTYPE_INTEL(3, 0)
#define CPU_SUBTYPE_386 CPU_SUBTYPE_INTEL(3, 0)
#define CPU_SUBTYPE_486 CPU_SUBTYPE_INTEL(4, 0)
#define CPU_SUBTYPE_486SX CPU_SUBTYPE_INTEL(4, 8)
#define CPU_SUBTYPE_586 CPU_SUBTYPE_INTEL(5, 0)
#define CPU_SUBTYPE_PENT CPU_SUBTYPE_INTEL(5, 0)
#define CPU_SUBTYPE_PENTPRO CPU_SUBTYPE_INTEL(6, 1)
#define CPU_SUBTYPE_PENTII_M3 CPU_SUBTYPE_INTEL(6, 3)
#define CPU_SUBTYPE_PENTII_M5 CPU_SUBTYPE_INTEL(6, 5)
#define CPU_SUBTYPE_CELERON CPU_SUBTYPE_INTEL(7, 6)
#define CPU_SUBTYPE_CELERON_MOBILE CPU_SUBTYPE_INTEL(7, 7)
#define CPU_SUBTYPE_PENTIUM_3 CPU_SUBTYPE_INTEL(8, 0)
#define CPU_SUBTYPE_PENTIUM_3_M CPU_SUBTYPE_INTEL(8, 1)
#define CPU_SUBTYPE_PENTIUM_3_XEON CPU_SUBTYPE_INTEL(8, 2)
#define CPU_SUBTYPE_PENTIUM_M CPU_SUBTYPE_INTEL(9, 0)
#define CPU_SUBTYPE_PENTIUM_4 CPU_SUBTYPE_INTEL(10, 0)
#define CPU_SUBTYPE_PENTIUM_4_M CPU_SUBTYPE_INTEL(10, 1)
#define CPU_SUBTYPE_ITANIUM CPU_SUBTYPE_INTEL(11, 0)
#define CPU_SUBTYPE_ITANIUM_2 CPU_SUBTYPE_INTEL(11, 1)
#define CPU_SUBTYPE_XEON CPU_SUBTYPE_INTEL(12, 0)
#define CPU_SUBTYPE_XEON_MP CPU_SUBTYPE_INTEL(12, 1)

#define CPU_SUBTYPE_INTEL_FAMILY(x) ((x) & 15)
#define CPU_SUBTYPE_INTEL_FAMILY_MAX 15

#define CPU_SUBTYPE_INTEL_MODEL(x) ((x) >> 4)
#define CPU_SUBTYPE_INTEL_MODEL_ALL 0





#define CPU_SUBTYPE_X86_ALL ((cpu_subtype_t)3)
#define CPU_SUBTYPE_X86_64_ALL ((cpu_subtype_t)3)
#define CPU_SUBTYPE_X86_ARCH1 ((cpu_subtype_t)4)


#define CPU_THREADTYPE_INTEL_HTT ((cpu_threadtype_t) 1)





#define CPU_SUBTYPE_MIPS_ALL ((cpu_subtype_t) 0)
#define CPU_SUBTYPE_MIPS_R2300 ((cpu_subtype_t) 1)
#define CPU_SUBTYPE_MIPS_R2600 ((cpu_subtype_t) 2)
#define CPU_SUBTYPE_MIPS_R2800 ((cpu_subtype_t) 3)
#define CPU_SUBTYPE_MIPS_R2000a ((cpu_subtype_t) 4)
#define CPU_SUBTYPE_MIPS_R2000 ((cpu_subtype_t) 5)
#define CPU_SUBTYPE_MIPS_R3000a ((cpu_subtype_t) 6)
#define CPU_SUBTYPE_MIPS_R3000 ((cpu_subtype_t) 7)




#define CPU_SUBTYPE_MC98000_ALL ((cpu_subtype_t) 0)
#define CPU_SUBTYPE_MC98601 ((cpu_subtype_t) 1)






#define CPU_SUBTYPE_HPPA_ALL ((cpu_subtype_t) 0)
#define CPU_SUBTYPE_HPPA_7100 ((cpu_subtype_t) 0)
#define CPU_SUBTYPE_HPPA_7100LC ((cpu_subtype_t) 1)




#define CPU_SUBTYPE_MC88000_ALL ((cpu_subtype_t) 0)
#define CPU_SUBTYPE_MC88100 ((cpu_subtype_t) 1)
#define CPU_SUBTYPE_MC88110 ((cpu_subtype_t) 2)




#define CPU_SUBTYPE_SPARC_ALL ((cpu_subtype_t) 0)




#define CPU_SUBTYPE_I860_ALL ((cpu_subtype_t) 0)
#define CPU_SUBTYPE_I860_860 ((cpu_subtype_t) 1)




#define CPU_SUBTYPE_POWERPC_ALL ((cpu_subtype_t) 0)
#define CPU_SUBTYPE_POWERPC_601 ((cpu_subtype_t) 1)
#define CPU_SUBTYPE_POWERPC_602 ((cpu_subtype_t) 2)
#define CPU_SUBTYPE_POWERPC_603 ((cpu_subtype_t) 3)
#define CPU_SUBTYPE_POWERPC_603e ((cpu_subtype_t) 4)
#define CPU_SUBTYPE_POWERPC_603ev ((cpu_subtype_t) 5)
#define CPU_SUBTYPE_POWERPC_604 ((cpu_subtype_t) 6)
#define CPU_SUBTYPE_POWERPC_604e ((cpu_subtype_t) 7)
#define CPU_SUBTYPE_POWERPC_620 ((cpu_subtype_t) 8)
#define CPU_SUBTYPE_POWERPC_750 ((cpu_subtype_t) 9)
#define CPU_SUBTYPE_POWERPC_7400 ((cpu_subtype_t) 10)
#define CPU_SUBTYPE_POWERPC_7450 ((cpu_subtype_t) 11)
#define CPU_SUBTYPE_POWERPC_970 ((cpu_subtype_t) 100)




#define CPU_SUBTYPE_ARM_ALL ((cpu_subtype_t) 0)
#define CPU_SUBTYPE_ARM_V4T ((cpu_subtype_t) 5)
#define CPU_SUBTYPE_ARM_V6 ((cpu_subtype_t) 6)
# 316 "/usr/include/mach/machine.h" 3 4
#define CPUFAMILY_UNKNOWN 0
#define CPUFAMILY_POWERPC_G3 0xcee41549
#define CPUFAMILY_POWERPC_G4 0x77c184ae
#define CPUFAMILY_POWERPC_G5 0xed76d8aa
#define CPUFAMILY_INTEL_6_13 0xaa33392b
#define CPUFAMILY_INTEL_6_14 0x73d67300
#define CPUFAMILY_INTEL_6_15 0x426f69ef
#define CPUFAMILY_INTEL_6_23 0x78ea4fbc
#define CPUFAMILY_INTEL_6_26 0x6b5a4cd2
#define CPUFAMILY_ARM_9 0xe73283ae
#define CPUFAMILY_ARM_11 0x8ff620d8

#define CPUFAMILY_INTEL_YONAH CPUFAMILY_INTEL_6_14
#define CPUFAMILY_INTEL_MEROM CPUFAMILY_INTEL_6_15
#define CPUFAMILY_INTEL_PENRYN CPUFAMILY_INTEL_6_23
#define CPUFAMILY_INTEL_NEHALEM CPUFAMILY_INTEL_6_26

#define CPUFAMILY_INTEL_CORE CPUFAMILY_INTEL_6_14
#define CPUFAMILY_INTEL_CORE2 CPUFAMILY_INTEL_6_15
# 71 "/usr/include/mach/host_info.h" 2 3 4

# 1 "/usr/include/mach/time_value.h" 1 3 4
# 58 "/usr/include/mach/time_value.h" 3 4
#define _MACH_TIME_VALUE_H_ 







struct time_value {
 integer_t seconds;
 integer_t microseconds;
};

typedef struct time_value time_value_t;





#define TIME_MICROS_MAX (1000000)

#define time_value_add_usec(val,micros) { if (((val)->microseconds += (micros)) >= TIME_MICROS_MAX) { (val)->microseconds -= TIME_MICROS_MAX; (val)->seconds++; } }







#define time_value_add(result,addend) { (result)->microseconds += (addend)->microseconds; (result)->seconds += (addend)->seconds; if ((result)->microseconds >= TIME_MICROS_MAX) { (result)->microseconds -= TIME_MICROS_MAX; (result)->seconds++; } }
# 73 "/usr/include/mach/host_info.h" 2 3 4






typedef integer_t *host_info_t;

#define HOST_INFO_MAX (1024)
typedef integer_t host_info_data_t[(1024)];

#define KERNEL_VERSION_MAX (512)
typedef char kernel_version_t[(512)];

#define KERNEL_BOOT_INFO_MAX (4096)
typedef char kernel_boot_info_t[(4096)];





typedef integer_t host_flavor_t;
#define HOST_BASIC_INFO 1
#define HOST_SCHED_INFO 3
#define HOST_RESOURCE_SIZES 4
#define HOST_PRIORITY_INFO 5
#define HOST_SEMAPHORE_TRAPS 7
#define HOST_MACH_MSG_TRAP 8


#pragma pack(4)

struct host_basic_info {
 integer_t max_cpus;
 integer_t avail_cpus;
 natural_t memory_size;
 cpu_type_t cpu_type;
 cpu_subtype_t cpu_subtype;
 cpu_threadtype_t cpu_threadtype;
 integer_t physical_cpu;
 integer_t physical_cpu_max;
 integer_t logical_cpu;
 integer_t logical_cpu_max;
 uint64_t max_mem;
};

#pragma pack()

typedef struct host_basic_info host_basic_info_data_t;
typedef struct host_basic_info *host_basic_info_t;
#define HOST_BASIC_INFO_COUNT ((mach_msg_type_number_t) (sizeof(host_basic_info_data_t)/sizeof(integer_t)))


struct host_sched_info {
 integer_t min_timeout;
 integer_t min_quantum;
};

typedef struct host_sched_info host_sched_info_data_t;
typedef struct host_sched_info *host_sched_info_t;
#define HOST_SCHED_INFO_COUNT ((mach_msg_type_number_t) (sizeof(host_sched_info_data_t)/sizeof(integer_t)))


struct kernel_resource_sizes {
 natural_t task;
        natural_t thread;
        natural_t port;
        natural_t memory_region;
        natural_t memory_object;
};

typedef struct kernel_resource_sizes kernel_resource_sizes_data_t;
typedef struct kernel_resource_sizes *kernel_resource_sizes_t;
#define HOST_RESOURCE_SIZES_COUNT ((mach_msg_type_number_t) (sizeof(kernel_resource_sizes_data_t)/sizeof(integer_t)))


struct host_priority_info {
     integer_t kernel_priority;
     integer_t system_priority;
     integer_t server_priority;
     integer_t user_priority;
     integer_t depress_priority;
     integer_t idle_priority;
     integer_t minimum_priority;
 integer_t maximum_priority;
};

typedef struct host_priority_info host_priority_info_data_t;
typedef struct host_priority_info *host_priority_info_t;
#define HOST_PRIORITY_INFO_COUNT ((mach_msg_type_number_t) (sizeof(host_priority_info_data_t)/sizeof(integer_t)))



#define HOST_LOAD_INFO 1
#define HOST_VM_INFO 2
#define HOST_CPU_LOAD_INFO 3

struct host_load_info {
 integer_t avenrun[3];
 integer_t mach_factor[3];
};

typedef struct host_load_info host_load_info_data_t;
typedef struct host_load_info *host_load_info_t;
#define HOST_LOAD_INFO_COUNT ((mach_msg_type_number_t) (sizeof(host_load_info_data_t)/sizeof(integer_t)))



#define HOST_VM_INFO_COUNT ((mach_msg_type_number_t) (sizeof(vm_statistics_data_t)/sizeof(integer_t)))



#define HOST_VM_INFO_LATEST_COUNT HOST_VM_INFO_COUNT
#define HOST_VM_INFO_REV2_COUNT HOST_VM_INFO_LATEST_COUNT

#define HOST_VM_INFO_REV1_COUNT ((mach_msg_type_number_t) (HOST_VM_INFO_REV2_COUNT - 1))


#define HOST_VM_INFO_REV0_COUNT ((mach_msg_type_number_t) (HOST_VM_INFO_REV1_COUNT - 2))



struct host_cpu_load_info {
 natural_t cpu_ticks[4];
};

typedef struct host_cpu_load_info host_cpu_load_info_data_t;
typedef struct host_cpu_load_info *host_cpu_load_info_t;
#define HOST_CPU_LOAD_INFO_COUNT ((mach_msg_type_number_t) (sizeof (host_cpu_load_info_data_t) / sizeof (integer_t)))
# 81 "/usr/include/mach/mach_types.h" 2 3 4
# 1 "/usr/include/mach/host_notify.h" 1 3 4
# 30 "/usr/include/mach/host_notify.h" 3 4
#define _MACH_HOST_NOTIFY_H_ 

#define HOST_NOTIFY_CALENDAR_CHANGE 0
#define HOST_NOTIFY_TYPE_MAX 0

#define HOST_CALENDAR_CHANGED_REPLYID 950
# 82 "/usr/include/mach/mach_types.h" 2 3 4
# 1 "/usr/include/mach/host_special_ports.h" 1 3 4
# 65 "/usr/include/mach/host_special_ports.h" 3 4
#define _MACH_HOST_SPECIAL_PORTS_H_ 




#define HOST_SECURITY_PORT 0




#define HOST_PORT 1
#define HOST_PRIV_PORT 2
#define HOST_IO_MASTER_PORT 3
#define HOST_MAX_SPECIAL_KERNEL_PORT 7




#define HOST_DYNAMIC_PAGER_PORT (1 + HOST_MAX_SPECIAL_KERNEL_PORT)
#define HOST_AUDIT_CONTROL_PORT (2 + HOST_MAX_SPECIAL_KERNEL_PORT)
#define HOST_USER_NOTIFICATION_PORT (3 + HOST_MAX_SPECIAL_KERNEL_PORT)
#define HOST_LOCKD_PORT (5 + HOST_MAX_SPECIAL_KERNEL_PORT)
#define HOST_SEATBELT_PORT (7 + HOST_MAX_SPECIAL_KERNEL_PORT)
#define HOST_MAX_SPECIAL_PORT (8 + HOST_MAX_SPECIAL_KERNEL_PORT)





#define HOST_LOCAL_NODE -1
# 103 "/usr/include/mach/host_special_ports.h" 3 4
#define host_get_host_port(host,port) (host_get_special_port((host), HOST_LOCAL_NODE, HOST_PORT, (port)))


#define host_set_host_port(host,port) (KERN_INVALID_ARGUMENT)

#define host_get_host_priv_port(host,port) (host_get_special_port((host), HOST_LOCAL_NODE, HOST_PRIV_PORT, (port)))


#define host_set_host_priv_port(host,port) (KERN_INVALID_ARGUMENT)

#define host_get_io_master_port(host,port) (host_get_special_port((host), HOST_LOCAL_NODE, HOST_IO_MASTER_PORT, (port)))


#define host_set_io_master_port(host,port) (KERN_INVALID_ARGUMENT)




#define host_get_dynamic_pager_port(host,port) (host_get_special_port((host), HOST_LOCAL_NODE, HOST_DYNAMIC_PAGER_PORT, (port)))


#define host_set_dynamic_pager_port(host,port) (host_set_special_port((host), HOST_DYNAMIC_PAGER_PORT, (port)))


#define host_get_audit_control_port(host,port) (host_get_special_port((host), HOST_LOCAL_NODE, HOST_AUDIT_CONTROL_PORT, (port)))


#define host_set_audit_control_port(host,port) (host_set_special_port((host), HOST_AUDIT_CONTROL_PORT, (port)))


#define host_get_user_notification_port(host,port) (host_get_special_port((host), HOST_LOCAL_NODE, HOST_USER_NOTIFICATION_PORT, (port)))


#define host_set_user_notification_port(host,port) (host_set_special_port((host), HOST_USER_NOTIFICATION_PORT, (port)))


#define host_get_lockd_port(host,port) (host_get_special_port((host), HOST_LOCAL_NODE, HOST_LOCKD_PORT, (port)))


#define host_set_lockd_port(host,port) (host_set_special_port((host), HOST_LOCKD_PORT, (port)))
# 83 "/usr/include/mach/mach_types.h" 2 3 4


# 1 "/usr/include/mach/memory_object_types.h" 1 3 4
# 66 "/usr/include/mach/memory_object_types.h" 3 4
#define _MACH_MEMORY_OBJECT_TYPES_H_ 
# 75 "/usr/include/mach/memory_object_types.h" 3 4
# 1 "/usr/include/mach/vm_prot.h" 1 3 4
# 67 "/usr/include/mach/vm_prot.h" 3 4
#define _MACH_VM_PROT_H_ 







typedef int vm_prot_t;





#define VM_PROT_NONE ((vm_prot_t) 0x00)

#define VM_PROT_READ ((vm_prot_t) 0x01)
#define VM_PROT_WRITE ((vm_prot_t) 0x02)
#define VM_PROT_EXECUTE ((vm_prot_t) 0x04)





#define VM_PROT_DEFAULT (VM_PROT_READ|VM_PROT_WRITE)





#define VM_PROT_ALL (VM_PROT_READ|VM_PROT_WRITE|VM_PROT_EXECUTE)
# 106 "/usr/include/mach/vm_prot.h" 3 4
#define VM_PROT_NO_CHANGE ((vm_prot_t) 0x08)
# 116 "/usr/include/mach/vm_prot.h" 3 4
#define VM_PROT_COPY ((vm_prot_t) 0x10)
# 130 "/usr/include/mach/vm_prot.h" 3 4
#define VM_PROT_WANTS_COPY ((vm_prot_t) 0x10)
# 76 "/usr/include/mach/memory_object_types.h" 2 3 4
# 1 "/usr/include/mach/vm_sync.h" 1 3 4
# 64 "/usr/include/mach/vm_sync.h" 3 4
#define _MACH_VM_SYNC_H_ 

typedef unsigned vm_sync_t;





#define VM_SYNC_ASYNCHRONOUS ((vm_sync_t) 0x01)
#define VM_SYNC_SYNCHRONOUS ((vm_sync_t) 0x02)
#define VM_SYNC_INVALIDATE ((vm_sync_t) 0x04)
#define VM_SYNC_KILLPAGES ((vm_sync_t) 0x08)
#define VM_SYNC_DEACTIVATE ((vm_sync_t) 0x10)
#define VM_SYNC_CONTIGUOUS ((vm_sync_t) 0x20)
# 77 "/usr/include/mach/memory_object_types.h" 2 3 4





#define VM_64_BIT_DATA_OBJECTS 

typedef unsigned long long memory_object_offset_t;
typedef unsigned long long memory_object_size_t;
typedef natural_t memory_object_cluster_size_t;
typedef natural_t * memory_object_fault_info_t;







typedef mach_port_t memory_object_t;
typedef mach_port_t memory_object_control_t;


typedef memory_object_t *memory_object_array_t;




typedef mach_port_t memory_object_name_t;



typedef mach_port_t memory_object_default_t;



#define MEMORY_OBJECT_NULL ((memory_object_t) 0)
#define MEMORY_OBJECT_CONTROL_NULL ((memory_object_control_t) 0)
#define MEMORY_OBJECT_NAME_NULL ((memory_object_name_t) 0)
#define MEMORY_OBJECT_DEFAULT_NULL ((memory_object_default_t) 0)


typedef int memory_object_copy_strategy_t;

#define MEMORY_OBJECT_COPY_NONE 0

#define MEMORY_OBJECT_COPY_CALL 1

#define MEMORY_OBJECT_COPY_DELAY 2



#define MEMORY_OBJECT_COPY_TEMPORARY 3




#define MEMORY_OBJECT_COPY_SYMMETRIC 4
# 144 "/usr/include/mach/memory_object_types.h" 3 4
#define MEMORY_OBJECT_COPY_INVALID 5
# 154 "/usr/include/mach/memory_object_types.h" 3 4
typedef int memory_object_return_t;


#define MEMORY_OBJECT_RETURN_NONE 0

#define MEMORY_OBJECT_RETURN_DIRTY 1

#define MEMORY_OBJECT_RETURN_ALL 2

#define MEMORY_OBJECT_RETURN_ANYTHING 3






#define MEMORY_OBJECT_DATA_FLUSH 0x1
#define MEMORY_OBJECT_DATA_NO_CHANGE 0x2
#define MEMORY_OBJECT_DATA_PURGE 0x4
#define MEMORY_OBJECT_COPY_SYNC 0x8
#define MEMORY_OBJECT_DATA_SYNC 0x10
#define MEMORY_OBJECT_IO_SYNC 0x20





#define MEMORY_OBJECT_INFO_MAX (1024)
typedef int *memory_object_info_t;
typedef int memory_object_flavor_t;
typedef int memory_object_info_data_t[(1024)];


#define MEMORY_OBJECT_PERFORMANCE_INFO 11
#define MEMORY_OBJECT_ATTRIBUTE_INFO 14
#define MEMORY_OBJECT_BEHAVIOR_INFO 15


struct memory_object_perf_info {
 memory_object_cluster_size_t cluster_size;
 boolean_t may_cache;
};

struct memory_object_attr_info {
 memory_object_copy_strategy_t copy_strategy;
 memory_object_cluster_size_t cluster_size;
 boolean_t may_cache_object;
 boolean_t temporary;
};

struct memory_object_behave_info {
 memory_object_copy_strategy_t copy_strategy;
 boolean_t temporary;
 boolean_t invalidate;
 boolean_t silent_overwrite;
 boolean_t advisory_pageout;
};


typedef struct memory_object_behave_info *memory_object_behave_info_t;
typedef struct memory_object_behave_info memory_object_behave_info_data_t;

typedef struct memory_object_perf_info *memory_object_perf_info_t;
typedef struct memory_object_perf_info memory_object_perf_info_data_t;

typedef struct memory_object_attr_info *memory_object_attr_info_t;
typedef struct memory_object_attr_info memory_object_attr_info_data_t;

#define MEMORY_OBJECT_BEHAVE_INFO_COUNT ((mach_msg_type_number_t) (sizeof(memory_object_behave_info_data_t)/sizeof(int)))

#define MEMORY_OBJECT_PERF_INFO_COUNT ((mach_msg_type_number_t) (sizeof(memory_object_perf_info_data_t)/sizeof(int)))

#define MEMORY_OBJECT_ATTR_INFO_COUNT ((mach_msg_type_number_t) (sizeof(memory_object_attr_info_data_t)/sizeof(int)))


#define invalid_memory_object_flavor(f) (f != MEMORY_OBJECT_ATTRIBUTE_INFO && f != MEMORY_OBJECT_PERFORMANCE_INFO && f != OLD_MEMORY_OBJECT_BEHAVIOR_INFO && f != MEMORY_OBJECT_BEHAVIOR_INFO && f != OLD_MEMORY_OBJECT_ATTRIBUTE_INFO)
# 240 "/usr/include/mach/memory_object_types.h" 3 4
#define MEMORY_OBJECT_TERMINATE_IDLE 0x1
#define MEMORY_OBJECT_RESPECT_CACHE 0x2
#define MEMORY_OBJECT_RELEASE_NO_OP 0x4




#define MAP_MEM_NOOP 0
#define MAP_MEM_COPYBACK 1
#define MAP_MEM_IO 2
#define MAP_MEM_WTHRU 3
#define MAP_MEM_WCOMB 4


#define GET_MAP_MEM(flags) ((((unsigned int)(flags)) >> 24) & 0xFF)


#define SET_MAP_MEM(caching,flags) ((flags) = ((((unsigned int)(caching)) << 24) & 0xFF000000) | ((flags) & 0xFFFFFF));




#define MAP_MEM_ONLY 0x10000
#define MAP_MEM_NAMED_CREATE 0x20000
#define MAP_MEM_PURGABLE 0x40000
#define MAP_MEM_NAMED_REUSE 0x80000
# 86 "/usr/include/mach/mach_types.h" 2 3 4

# 1 "/usr/include/mach/exception_types.h" 1 3 4
# 60 "/usr/include/mach/exception_types.h" 3 4
#define _MACH_EXCEPTION_TYPES_H_ 

# 1 "/usr/include/mach/machine/exception.h" 1 3 4
# 30 "/usr/include/mach/machine/exception.h" 3 4
#define _MACH_MACHINE_EXCEPTION_H_ 




# 1 "/usr/include/mach/i386/exception.h" 1 3 4
# 60 "/usr/include/mach/i386/exception.h" 3 4
#define _MACH_I386_EXCEPTION_H_ 





#define EXC_TYPES_COUNT 11





#define EXCEPTION_CODE_MAX 2





#define EXC_I386_INVOP 1





#define EXC_I386_DIV 1
#define EXC_I386_INTO 2
#define EXC_I386_NOEXT 3
#define EXC_I386_EXTOVR 4
#define EXC_I386_EXTERR 5
#define EXC_I386_EMERR 6
#define EXC_I386_BOUND 7
#define EXC_I386_SSEEXTERR 8
# 106 "/usr/include/mach/i386/exception.h" 3 4
#define EXC_I386_SGL 1
#define EXC_I386_BPT 2

#define EXC_I386_DIVERR 0
#define EXC_I386_SGLSTP 1
#define EXC_I386_NMIFLT 2
#define EXC_I386_BPTFLT 3
#define EXC_I386_INTOFLT 4
#define EXC_I386_BOUNDFLT 5
#define EXC_I386_INVOPFLT 6
#define EXC_I386_NOEXTFLT 7
#define EXC_I386_DBLFLT 8
#define EXC_I386_EXTOVRFLT 9
#define EXC_I386_INVTSSFLT 10
#define EXC_I386_SEGNPFLT 11
#define EXC_I386_STKFLT 12
#define EXC_I386_GPFLT 13
#define EXC_I386_PGFLT 14
#define EXC_I386_EXTERRFLT 16
#define EXC_I386_ALIGNFLT 17
#define EXC_I386_ENDPERR 33
#define EXC_I386_ENOEXTFLT 32





#define EXC_MASK_MACHINE 0
# 36 "/usr/include/mach/machine/exception.h" 2 3 4
# 63 "/usr/include/mach/exception_types.h" 2 3 4





#define EXC_BAD_ACCESS 1



#define EXC_BAD_INSTRUCTION 2


#define EXC_ARITHMETIC 3


#define EXC_EMULATION 4



#define EXC_SOFTWARE 5




#define EXC_BREAKPOINT 6


#define EXC_SYSCALL 7

#define EXC_MACH_SYSCALL 8

#define EXC_RPC_ALERT 9

#define EXC_CRASH 10





#define EXCEPTION_DEFAULT 1



#define EXCEPTION_STATE 2




#define EXCEPTION_STATE_IDENTITY 3




#define MACH_EXCEPTION_CODES 0x80000000







#define EXC_MASK_BAD_ACCESS (1 << EXC_BAD_ACCESS)
#define EXC_MASK_BAD_INSTRUCTION (1 << EXC_BAD_INSTRUCTION)
#define EXC_MASK_ARITHMETIC (1 << EXC_ARITHMETIC)
#define EXC_MASK_EMULATION (1 << EXC_EMULATION)
#define EXC_MASK_SOFTWARE (1 << EXC_SOFTWARE)
#define EXC_MASK_BREAKPOINT (1 << EXC_BREAKPOINT)
#define EXC_MASK_SYSCALL (1 << EXC_SYSCALL)
#define EXC_MASK_MACH_SYSCALL (1 << EXC_MACH_SYSCALL)
#define EXC_MASK_RPC_ALERT (1 << EXC_RPC_ALERT)
#define EXC_MASK_CRASH (1 << EXC_CRASH)

#define EXC_MASK_ALL (EXC_MASK_BAD_ACCESS | EXC_MASK_BAD_INSTRUCTION | EXC_MASK_ARITHMETIC | EXC_MASK_EMULATION | EXC_MASK_SOFTWARE | EXC_MASK_BREAKPOINT | EXC_MASK_SYSCALL | EXC_MASK_MACH_SYSCALL | EXC_MASK_RPC_ALERT | EXC_MASK_CRASH | EXC_MASK_MACHINE)
# 148 "/usr/include/mach/exception_types.h" 3 4
#define FIRST_EXCEPTION 1






#define EXC_SOFT_SIGNAL 0x10003




# 1 "/usr/include/mach/thread_status.h" 1 3 4
# 69 "/usr/include/mach/thread_status.h" 3 4
#define _MACH_THREAD_STATUS_H_ 






# 1 "/usr/include/mach/machine/thread_status.h" 1 3 4
# 30 "/usr/include/mach/machine/thread_status.h" 3 4
#define _MACH_MACHINE_THREAD_STATUS_H_ 




# 1 "/usr/include/mach/i386/thread_status.h" 1 3 4
# 68 "/usr/include/mach/i386/thread_status.h" 3 4
#define _MACH_I386_THREAD_STATUS_H_ 

# 1 "/usr/include/mach/i386/_structs.h" 1 3 4
# 33 "/usr/include/mach/i386/_structs.h" 3 4
#define _MACH_I386__STRUCTS_H_ 
# 42 "/usr/include/mach/i386/_structs.h" 3 4
#define _STRUCT_X86_THREAD_STATE32 struct __darwin_i386_thread_state
struct __darwin_i386_thread_state
{
    unsigned int __eax;
    unsigned int __ebx;
    unsigned int __ecx;
    unsigned int __edx;
    unsigned int __edi;
    unsigned int __esi;
    unsigned int __ebp;
    unsigned int __esp;
    unsigned int __ss;
    unsigned int __eflags;
    unsigned int __eip;
    unsigned int __cs;
    unsigned int __ds;
    unsigned int __es;
    unsigned int __fs;
    unsigned int __gs;
};
# 88 "/usr/include/mach/i386/_structs.h" 3 4
#define _STRUCT_FP_CONTROL struct __darwin_fp_control
struct __darwin_fp_control
{
    unsigned short __invalid :1,
        __denorm :1,
    __zdiv :1,
    __ovrfl :1,
    __undfl :1,
    __precis :1,
      :2,
    __pc :2,

#define FP_PREC_24B 0
#define FP_PREC_53B 2
#define FP_PREC_64B 3

    __rc :2,

#define FP_RND_NEAR 0
#define FP_RND_DOWN 1
#define FP_RND_UP 2
#define FP_CHOP 3

             :1,
      :3;
};
typedef struct __darwin_fp_control __darwin_fp_control_t;
# 146 "/usr/include/mach/i386/_structs.h" 3 4
#define _STRUCT_FP_STATUS struct __darwin_fp_status
struct __darwin_fp_status
{
    unsigned short __invalid :1,
        __denorm :1,
    __zdiv :1,
    __ovrfl :1,
    __undfl :1,
    __precis :1,
    __stkflt :1,
    __errsumm :1,
    __c0 :1,
    __c1 :1,
    __c2 :1,
    __tos :3,
    __c3 :1,
    __busy :1;
};
typedef struct __darwin_fp_status __darwin_fp_status_t;
# 190 "/usr/include/mach/i386/_structs.h" 3 4
#define _STRUCT_MMST_REG struct __darwin_mmst_reg
struct __darwin_mmst_reg
{
 char __mmst_reg[10];
 char __mmst_rsrv[6];
};
# 209 "/usr/include/mach/i386/_structs.h" 3 4
#define _STRUCT_XMM_REG struct __darwin_xmm_reg
struct __darwin_xmm_reg
{
 char __xmm_reg[16];
};
# 227 "/usr/include/mach/i386/_structs.h" 3 4
#define FP_STATE_BYTES 512



#define _STRUCT_X86_FLOAT_STATE32 struct __darwin_i386_float_state
struct __darwin_i386_float_state
{
 int __fpu_reserved[2];
 struct __darwin_fp_control __fpu_fcw;
 struct __darwin_fp_status __fpu_fsw;
 __uint8_t __fpu_ftw;
 __uint8_t __fpu_rsrv1;
 __uint16_t __fpu_fop;
 __uint32_t __fpu_ip;
 __uint16_t __fpu_cs;
 __uint16_t __fpu_rsrv2;
 __uint32_t __fpu_dp;
 __uint16_t __fpu_ds;
 __uint16_t __fpu_rsrv3;
 __uint32_t __fpu_mxcsr;
 __uint32_t __fpu_mxcsrmask;
 struct __darwin_mmst_reg __fpu_stmm0;
 struct __darwin_mmst_reg __fpu_stmm1;
 struct __darwin_mmst_reg __fpu_stmm2;
 struct __darwin_mmst_reg __fpu_stmm3;
 struct __darwin_mmst_reg __fpu_stmm4;
 struct __darwin_mmst_reg __fpu_stmm5;
 struct __darwin_mmst_reg __fpu_stmm6;
 struct __darwin_mmst_reg __fpu_stmm7;
 struct __darwin_xmm_reg __fpu_xmm0;
 struct __darwin_xmm_reg __fpu_xmm1;
 struct __darwin_xmm_reg __fpu_xmm2;
 struct __darwin_xmm_reg __fpu_xmm3;
 struct __darwin_xmm_reg __fpu_xmm4;
 struct __darwin_xmm_reg __fpu_xmm5;
 struct __darwin_xmm_reg __fpu_xmm6;
 struct __darwin_xmm_reg __fpu_xmm7;
 char __fpu_rsrv4[14*16];
 int __fpu_reserved1;
};
# 307 "/usr/include/mach/i386/_structs.h" 3 4
#define _STRUCT_X86_EXCEPTION_STATE32 struct __darwin_i386_exception_state
struct __darwin_i386_exception_state
{
    unsigned int __trapno;
    unsigned int __err;
    unsigned int __faultvaddr;
};
# 325 "/usr/include/mach/i386/_structs.h" 3 4
#define _STRUCT_X86_DEBUG_STATE32 struct __darwin_x86_debug_state32
struct __darwin_x86_debug_state32
{
 unsigned int __dr0;
 unsigned int __dr1;
 unsigned int __dr2;
 unsigned int __dr3;
 unsigned int __dr4;
 unsigned int __dr5;
 unsigned int __dr6;
 unsigned int __dr7;
};
# 357 "/usr/include/mach/i386/_structs.h" 3 4
#define _STRUCT_X86_THREAD_STATE64 struct __darwin_x86_thread_state64
struct __darwin_x86_thread_state64
{
 __uint64_t __rax;
 __uint64_t __rbx;
 __uint64_t __rcx;
 __uint64_t __rdx;
 __uint64_t __rdi;
 __uint64_t __rsi;
 __uint64_t __rbp;
 __uint64_t __rsp;
 __uint64_t __r8;
 __uint64_t __r9;
 __uint64_t __r10;
 __uint64_t __r11;
 __uint64_t __r12;
 __uint64_t __r13;
 __uint64_t __r14;
 __uint64_t __r15;
 __uint64_t __rip;
 __uint64_t __rflags;
 __uint64_t __cs;
 __uint64_t __fs;
 __uint64_t __gs;
};
# 412 "/usr/include/mach/i386/_structs.h" 3 4
#define _STRUCT_X86_FLOAT_STATE64 struct __darwin_x86_float_state64
struct __darwin_x86_float_state64
{
 int __fpu_reserved[2];
 struct __darwin_fp_control __fpu_fcw;
 struct __darwin_fp_status __fpu_fsw;
 __uint8_t __fpu_ftw;
 __uint8_t __fpu_rsrv1;
 __uint16_t __fpu_fop;


 __uint32_t __fpu_ip;
 __uint16_t __fpu_cs;

 __uint16_t __fpu_rsrv2;


 __uint32_t __fpu_dp;
 __uint16_t __fpu_ds;

 __uint16_t __fpu_rsrv3;
 __uint32_t __fpu_mxcsr;
 __uint32_t __fpu_mxcsrmask;
 struct __darwin_mmst_reg __fpu_stmm0;
 struct __darwin_mmst_reg __fpu_stmm1;
 struct __darwin_mmst_reg __fpu_stmm2;
 struct __darwin_mmst_reg __fpu_stmm3;
 struct __darwin_mmst_reg __fpu_stmm4;
 struct __darwin_mmst_reg __fpu_stmm5;
 struct __darwin_mmst_reg __fpu_stmm6;
 struct __darwin_mmst_reg __fpu_stmm7;
 struct __darwin_xmm_reg __fpu_xmm0;
 struct __darwin_xmm_reg __fpu_xmm1;
 struct __darwin_xmm_reg __fpu_xmm2;
 struct __darwin_xmm_reg __fpu_xmm3;
 struct __darwin_xmm_reg __fpu_xmm4;
 struct __darwin_xmm_reg __fpu_xmm5;
 struct __darwin_xmm_reg __fpu_xmm6;
 struct __darwin_xmm_reg __fpu_xmm7;
 struct __darwin_xmm_reg __fpu_xmm8;
 struct __darwin_xmm_reg __fpu_xmm9;
 struct __darwin_xmm_reg __fpu_xmm10;
 struct __darwin_xmm_reg __fpu_xmm11;
 struct __darwin_xmm_reg __fpu_xmm12;
 struct __darwin_xmm_reg __fpu_xmm13;
 struct __darwin_xmm_reg __fpu_xmm14;
 struct __darwin_xmm_reg __fpu_xmm15;
 char __fpu_rsrv4[6*16];
 int __fpu_reserved1;
};
# 516 "/usr/include/mach/i386/_structs.h" 3 4
#define _STRUCT_X86_EXCEPTION_STATE64 struct __darwin_x86_exception_state64
struct __darwin_x86_exception_state64
{
    unsigned int __trapno;
    unsigned int __err;
    __uint64_t __faultvaddr;
};
# 534 "/usr/include/mach/i386/_structs.h" 3 4
#define _STRUCT_X86_DEBUG_STATE64 struct __darwin_x86_debug_state64
struct __darwin_x86_debug_state64
{
 __uint64_t __dr0;
 __uint64_t __dr1;
 __uint64_t __dr2;
 __uint64_t __dr3;
 __uint64_t __dr4;
 __uint64_t __dr5;
 __uint64_t __dr6;
 __uint64_t __dr7;
};
# 71 "/usr/include/mach/i386/thread_status.h" 2 3 4

# 1 "/usr/include/mach/i386/fp_reg.h" 1 3 4
# 60 "/usr/include/mach/i386/fp_reg.h" 3 4
#define _I386_FP_SAVE_H_ 



struct x86_fx_save {
        unsigned short fx_control;
        unsigned short fx_status;
        unsigned char fx_tag;
        unsigned char fx_bbz1;
        unsigned short fx_opcode;
        unsigned int fx_eip;
        unsigned short fx_cs;
        unsigned short fx_bbz2;
        unsigned int fx_dp;
        unsigned short fx_ds;
        unsigned short fx_bbz3;
        unsigned int fx_MXCSR;
        unsigned int fx_MXCSR_MASK;
        unsigned short fx_reg_word[8][8];
        unsigned short fx_XMM_reg[8][16];

        unsigned char fx_reserved[16*6];
};





#define FPC_IE 0x0001

#define FPC_IM FPC_IE
#define FPC_DE 0x0002

#define FPC_DM FPC_DE
#define FPC_ZE 0x0004
#define FPC_ZM FPC_ZE
#define FPC_OE 0x0008
#define FPC_OM FPC_OE
#define FPC_UE 0x0010
#define FPC_PE 0x0020
#define FPC_PC 0x0300
#define FPC_PC_24 0x0000
#define FPC_PC_53 0x0200
#define FPC_PC_64 0x0300
#define FPC_RC 0x0c00
#define FPC_RC_RN 0x0000
#define FPC_RC_RD 0x0400
#define FPC_RC_RU 0x0800
#define FPC_RC_CHOP 0x0c00
#define FPC_IC 0x1000
#define FPC_IC_PROJ 0x0000
#define FPC_IC_AFF 0x1000




#define FPS_IE 0x0001
#define FPS_DE 0x0002
#define FPS_ZE 0x0004
#define FPS_OE 0x0008
#define FPS_UE 0x0010
#define FPS_PE 0x0020
#define FPS_SF 0x0040
#define FPS_ES 0x0080
#define FPS_C0 0x0100
#define FPS_C1 0x0200
#define FPS_C2 0x0400
#define FPS_TOS 0x3800
#define FPS_TOS_SHIFT 11
#define FPS_C3 0x4000
#define FPS_BUSY 0x8000




#define FP_NO 0
#define FP_SOFT 1
#define FP_287 2
#define FP_387 3
#define FP_FXSR 4
# 73 "/usr/include/mach/i386/thread_status.h" 2 3 4
# 1 "/usr/include/mach/i386/thread_state.h" 1 3 4
# 33 "/usr/include/mach/i386/thread_state.h" 3 4
#define _MACH_I386_THREAD_STATE_H_ 


#define I386_THREAD_STATE_MAX (144)


#define THREAD_STATE_MAX I386_THREAD_STATE_MAX
# 74 "/usr/include/mach/i386/thread_status.h" 2 3 4
# 1 "/usr/include/i386/eflags.h" 1 3 4
# 60 "/usr/include/i386/eflags.h" 3 4
#define _I386_EFLAGS_H_ 






#define EFL_CF 0x00000001
#define EFL_PF 0x00000004
#define EFL_AF 0x00000010
#define EFL_ZF 0x00000040
#define EFL_SF 0x00000080
#define EFL_TF 0x00000100
#define EFL_IF 0x00000200
#define EFL_DF 0x00000400
#define EFL_OF 0x00000800
#define EFL_IOPL 0x00003000
#define EFL_IOPL_KERNEL 0x00000000
#define EFL_IOPL_USER 0x00003000
#define EFL_NT 0x00004000
#define EFL_RF 0x00010000
#define EFL_VM 0x00020000
#define EFL_AC 0x00040000
#define EFL_VIF 0x00080000
#define EFL_VIP 0x00100000
#define EFL_ID 0x00200000


#define EFL_CLR 0xfff88028
#define EFL_SET 0x00000002

#define EFL_USER_SET (EFL_IF)
#define EFL_USER_CLEAR (EFL_IOPL|EFL_NT|EFL_RF)
# 75 "/usr/include/mach/i386/thread_status.h" 2 3 4
# 92 "/usr/include/mach/i386/thread_status.h" 3 4
#define i386_THREAD_STATE 1
#define i386_FLOAT_STATE 2
#define i386_EXCEPTION_STATE 3





#define x86_THREAD_STATE32 1
#define x86_FLOAT_STATE32 2
#define x86_EXCEPTION_STATE32 3
#define x86_THREAD_STATE64 4
#define x86_FLOAT_STATE64 5
#define x86_EXCEPTION_STATE64 6
#define x86_THREAD_STATE 7
#define x86_FLOAT_STATE 8
#define x86_EXCEPTION_STATE 9
#define x86_DEBUG_STATE32 10
#define x86_DEBUG_STATE64 11
#define x86_DEBUG_STATE 12
#define THREAD_STATE_NONE 13





#define THREAD_MACHINE_STATE_MAX THREAD_STATE_MAX







#define VALID_THREAD_STATE_FLAVOR(x) ((x == x86_THREAD_STATE32) || (x == x86_FLOAT_STATE32) || (x == x86_EXCEPTION_STATE32) || (x == x86_DEBUG_STATE32) || (x == x86_THREAD_STATE64) || (x == x86_FLOAT_STATE64) || (x == x86_EXCEPTION_STATE64) || (x == x86_DEBUG_STATE64) || (x == x86_THREAD_STATE) || (x == x86_FLOAT_STATE) || (x == x86_EXCEPTION_STATE) || (x == x86_DEBUG_STATE) || (x == THREAD_STATE_NONE))
# 141 "/usr/include/mach/i386/thread_status.h" 3 4
struct x86_state_hdr {
 int flavor;
 int count;
};
typedef struct x86_state_hdr x86_state_hdr_t;





#define USER_CODE_SELECTOR 0x0017
#define USER_DATA_SELECTOR 0x001f
#define KERN_CODE_SELECTOR 0x0008
#define KERN_DATA_SELECTOR 0x0010




typedef struct __darwin_i386_thread_state i386_thread_state_t;
#define i386_THREAD_STATE_COUNT ((mach_msg_type_number_t) ( sizeof (i386_thread_state_t) / sizeof (int) ))


typedef struct __darwin_i386_thread_state x86_thread_state32_t;
#define x86_THREAD_STATE32_COUNT ((mach_msg_type_number_t) ( sizeof (x86_thread_state32_t) / sizeof (int) ))





typedef struct __darwin_i386_float_state i386_float_state_t;
#define i386_FLOAT_STATE_COUNT ((mach_msg_type_number_t) (sizeof(i386_float_state_t)/sizeof(unsigned int)))


typedef struct __darwin_i386_float_state x86_float_state32_t;
#define x86_FLOAT_STATE32_COUNT ((mach_msg_type_number_t) (sizeof(x86_float_state32_t)/sizeof(unsigned int)))





typedef struct __darwin_i386_exception_state i386_exception_state_t;
#define i386_EXCEPTION_STATE_COUNT ((mach_msg_type_number_t) ( sizeof (i386_exception_state_t) / sizeof (int) ))


typedef struct __darwin_i386_exception_state x86_exception_state32_t;
#define x86_EXCEPTION_STATE32_COUNT ((mach_msg_type_number_t) ( sizeof (x86_exception_state32_t) / sizeof (int) ))


#define I386_EXCEPTION_STATE_COUNT i386_EXCEPTION_STATE_COUNT

typedef struct __darwin_x86_debug_state32 x86_debug_state32_t;
#define x86_DEBUG_STATE32_COUNT ((mach_msg_type_number_t) ( sizeof (x86_debug_state32_t) / sizeof (int) ))


#define X86_DEBUG_STATE32_COUNT x86_DEBUG_STATE32_COUNT

typedef struct __darwin_x86_thread_state64 x86_thread_state64_t;
#define x86_THREAD_STATE64_COUNT ((mach_msg_type_number_t) ( sizeof (x86_thread_state64_t) / sizeof (int) ))


typedef struct __darwin_x86_float_state64 x86_float_state64_t;
#define x86_FLOAT_STATE64_COUNT ((mach_msg_type_number_t) (sizeof(x86_float_state64_t)/sizeof(unsigned int)))


typedef struct __darwin_x86_exception_state64 x86_exception_state64_t;
#define x86_EXCEPTION_STATE64_COUNT ((mach_msg_type_number_t) ( sizeof (x86_exception_state64_t) / sizeof (int) ))


#define X86_EXCEPTION_STATE64_COUNT x86_EXCEPTION_STATE64_COUNT

typedef struct __darwin_x86_debug_state64 x86_debug_state64_t;
#define x86_DEBUG_STATE64_COUNT ((mach_msg_type_number_t) ( sizeof (x86_debug_state64_t) / sizeof (int) ))


#define X86_DEBUG_STATE64_COUNT x86_DEBUG_STATE64_COUNT




struct x86_thread_state {
 x86_state_hdr_t tsh;
 union {
     x86_thread_state32_t ts32;
     x86_thread_state64_t ts64;
 } uts;
};

struct x86_float_state {
 x86_state_hdr_t fsh;
 union {
  x86_float_state32_t fs32;
  x86_float_state64_t fs64;
 } ufs;
};

struct x86_exception_state {
 x86_state_hdr_t esh;
 union {
  x86_exception_state32_t es32;
  x86_exception_state64_t es64;
 } ues;
};

struct x86_debug_state {
 x86_state_hdr_t dsh;
 union {
  x86_debug_state32_t ds32;
  x86_debug_state64_t ds64;
 } uds;
};

typedef struct x86_thread_state x86_thread_state_t;
#define x86_THREAD_STATE_COUNT ((mach_msg_type_number_t) ( sizeof (x86_thread_state_t) / sizeof (int) ))


typedef struct x86_float_state x86_float_state_t;
#define x86_FLOAT_STATE_COUNT ((mach_msg_type_number_t) (sizeof(x86_float_state_t)/sizeof(unsigned int)))


typedef struct x86_exception_state x86_exception_state_t;
#define x86_EXCEPTION_STATE_COUNT ((mach_msg_type_number_t) (sizeof(x86_exception_state_t)/sizeof(unsigned int)))


typedef struct x86_debug_state x86_debug_state_t;
#define x86_DEBUG_STATE_COUNT ((mach_msg_type_number_t) (sizeof(x86_debug_state_t)/sizeof(unsigned int)))






#define MACHINE_THREAD_STATE x86_THREAD_STATE
#define MACHINE_THREAD_STATE_COUNT x86_THREAD_STATE_COUNT
# 288 "/usr/include/mach/i386/thread_status.h" 3 4
struct x86_seg_load_fault32 {
 unsigned int trapno;
 unsigned int err;
 unsigned int eip;
 unsigned int cs;
 unsigned int efl;
};
# 36 "/usr/include/mach/machine/thread_status.h" 2 3 4
# 77 "/usr/include/mach/thread_status.h" 2 3 4
# 1 "/usr/include/mach/machine/thread_state.h" 1 3 4
# 30 "/usr/include/mach/machine/thread_state.h" 3 4
#define _MACH_MACHINE_THREAD_STATE_H_ 
# 78 "/usr/include/mach/thread_status.h" 2 3 4





typedef natural_t *thread_state_t;


typedef natural_t thread_state_data_t[(144)];

#define THREAD_STATE_FLAVOR_LIST 0
#define THREAD_STATE_FLAVOR_LIST_NEW 128

typedef int thread_state_flavor_t;
typedef thread_state_flavor_t *thread_state_flavor_array_t;
# 161 "/usr/include/mach/exception_types.h" 2 3 4





typedef int exception_type_t;
typedef integer_t exception_data_type_t;
typedef int64_t mach_exception_data_type_t;
typedef int exception_behavior_t;
typedef exception_data_type_t *exception_data_t;
typedef mach_exception_data_type_t *mach_exception_data_t;
typedef unsigned int exception_mask_t;
typedef exception_mask_t *exception_mask_array_t;
typedef exception_behavior_t *exception_behavior_array_t;
typedef thread_state_flavor_t *exception_flavor_array_t;
typedef mach_port_t *exception_port_array_t;
typedef mach_exception_data_type_t mach_exception_code_t;
typedef mach_exception_data_type_t mach_exception_subcode_t;
# 88 "/usr/include/mach/mach_types.h" 2 3 4

# 1 "/usr/include/mach/processor_info.h" 1 3 4
# 68 "/usr/include/mach/processor_info.h" 3 4
#define _MACH_PROCESSOR_INFO_H_ 



# 1 "/usr/include/mach/machine/processor_info.h" 1 3 4
# 30 "/usr/include/mach/machine/processor_info.h" 3 4
#define _MACH_MACHINE_PROCESSOR_INFO_H_ 




# 1 "/usr/include/mach/i386/processor_info.h" 1 3 4
# 35 "/usr/include/mach/i386/processor_info.h" 3 4
#define _MACH_I386_PROCESSOR_INFO_H_ 
# 36 "/usr/include/mach/machine/processor_info.h" 2 3 4
# 73 "/usr/include/mach/processor_info.h" 2 3 4




typedef integer_t *processor_info_t;
typedef integer_t *processor_info_array_t;

#define PROCESSOR_INFO_MAX (1024)
typedef integer_t processor_info_data_t[(1024)];


typedef integer_t *processor_set_info_t;

#define PROCESSOR_SET_INFO_MAX (1024)
typedef integer_t processor_set_info_data_t[(1024)];




typedef int processor_flavor_t;
#define PROCESSOR_BASIC_INFO 1
#define PROCESSOR_CPU_LOAD_INFO 2
#define PROCESSOR_PM_REGS_INFO 0x10000001
#define PROCESSOR_TEMPERATURE 0x10000002

struct processor_basic_info {
 cpu_type_t cpu_type;
 cpu_subtype_t cpu_subtype;
 boolean_t running;
 int slot_num;
 boolean_t is_master;
};

typedef struct processor_basic_info processor_basic_info_data_t;
typedef struct processor_basic_info *processor_basic_info_t;
#define PROCESSOR_BASIC_INFO_COUNT ((mach_msg_type_number_t) (sizeof(processor_basic_info_data_t)/sizeof(natural_t)))


struct processor_cpu_load_info {
        unsigned int cpu_ticks[4];
};

typedef struct processor_cpu_load_info processor_cpu_load_info_data_t;
typedef struct processor_cpu_load_info *processor_cpu_load_info_t;
#define PROCESSOR_CPU_LOAD_INFO_COUNT ((mach_msg_type_number_t) (sizeof(processor_cpu_load_info_data_t)/sizeof(natural_t)))





#define LOAD_SCALE 1000

typedef int processor_set_flavor_t;
#define PROCESSOR_SET_BASIC_INFO 5

struct processor_set_basic_info {
 int processor_count;
 int default_policy;
};

typedef struct processor_set_basic_info processor_set_basic_info_data_t;
typedef struct processor_set_basic_info *processor_set_basic_info_t;
#define PROCESSOR_SET_BASIC_INFO_COUNT ((mach_msg_type_number_t) (sizeof(processor_set_basic_info_data_t)/sizeof(natural_t)))


#define PROCESSOR_SET_LOAD_INFO 4

struct processor_set_load_info {
        int task_count;
        int thread_count;
        integer_t load_average;
        integer_t mach_factor;
};

typedef struct processor_set_load_info processor_set_load_info_data_t;
typedef struct processor_set_load_info *processor_set_load_info_t;
#define PROCESSOR_SET_LOAD_INFO_COUNT ((mach_msg_type_number_t) (sizeof(processor_set_load_info_data_t)/sizeof(natural_t)))
# 90 "/usr/include/mach/mach_types.h" 2 3 4
# 1 "/usr/include/mach/task_info.h" 1 3 4
# 66 "/usr/include/mach/task_info.h" 3 4
#define _MACH_TASK_INFO_H_ 




# 1 "/usr/include/mach/policy.h" 1 3 4
# 60 "/usr/include/mach/policy.h" 3 4
#define _MACH_POLICY_H_ 
# 79 "/usr/include/mach/policy.h" 3 4
typedef int policy_t;
typedef integer_t *policy_info_t;
typedef integer_t *policy_base_t;
typedef integer_t *policy_limit_t;






#define POLICY_NULL 0
#define POLICY_TIMESHARE 1
#define POLICY_RR 2
#define POLICY_FIFO 4

#define __NEW_SCHEDULING_FRAMEWORK__ 




#define POLICYCLASS_FIXEDPRI (POLICY_RR | POLICY_FIFO)




#define invalid_policy(policy) ((policy) != POLICY_TIMESHARE && (policy) != POLICY_RR && (policy) != POLICY_FIFO)
# 113 "/usr/include/mach/policy.h" 3 4
struct policy_timeshare_base {
 integer_t base_priority;
};
struct policy_timeshare_limit {
 integer_t max_priority;
};
struct policy_timeshare_info {
 integer_t max_priority;
 integer_t base_priority;
 integer_t cur_priority;
 boolean_t depressed;
 integer_t depress_priority;
};

typedef struct policy_timeshare_base *policy_timeshare_base_t;
typedef struct policy_timeshare_limit *policy_timeshare_limit_t;
typedef struct policy_timeshare_info *policy_timeshare_info_t;

typedef struct policy_timeshare_base policy_timeshare_base_data_t;
typedef struct policy_timeshare_limit policy_timeshare_limit_data_t;
typedef struct policy_timeshare_info policy_timeshare_info_data_t;


#define POLICY_TIMESHARE_BASE_COUNT ((mach_msg_type_number_t) (sizeof(struct policy_timeshare_base)/sizeof(integer_t)))

#define POLICY_TIMESHARE_LIMIT_COUNT ((mach_msg_type_number_t) (sizeof(struct policy_timeshare_limit)/sizeof(integer_t)))

#define POLICY_TIMESHARE_INFO_COUNT ((mach_msg_type_number_t) (sizeof(struct policy_timeshare_info)/sizeof(integer_t)))






struct policy_rr_base {
 integer_t base_priority;
 integer_t quantum;
};
struct policy_rr_limit {
 integer_t max_priority;
};
struct policy_rr_info {
 integer_t max_priority;
 integer_t base_priority;
 integer_t quantum;
 boolean_t depressed;
 integer_t depress_priority;
};

typedef struct policy_rr_base *policy_rr_base_t;
typedef struct policy_rr_limit *policy_rr_limit_t;
typedef struct policy_rr_info *policy_rr_info_t;

typedef struct policy_rr_base policy_rr_base_data_t;
typedef struct policy_rr_limit policy_rr_limit_data_t;
typedef struct policy_rr_info policy_rr_info_data_t;

#define POLICY_RR_BASE_COUNT ((mach_msg_type_number_t) (sizeof(struct policy_rr_base)/sizeof(integer_t)))

#define POLICY_RR_LIMIT_COUNT ((mach_msg_type_number_t) (sizeof(struct policy_rr_limit)/sizeof(integer_t)))

#define POLICY_RR_INFO_COUNT ((mach_msg_type_number_t) (sizeof(struct policy_rr_info)/sizeof(integer_t)))






struct policy_fifo_base {
 integer_t base_priority;
};
struct policy_fifo_limit {
 integer_t max_priority;
};
struct policy_fifo_info {
 integer_t max_priority;
 integer_t base_priority;
 boolean_t depressed;
 integer_t depress_priority;
};

typedef struct policy_fifo_base *policy_fifo_base_t;
typedef struct policy_fifo_limit *policy_fifo_limit_t;
typedef struct policy_fifo_info *policy_fifo_info_t;

typedef struct policy_fifo_base policy_fifo_base_data_t;
typedef struct policy_fifo_limit policy_fifo_limit_data_t;
typedef struct policy_fifo_info policy_fifo_info_data_t;

#define POLICY_FIFO_BASE_COUNT ((mach_msg_type_number_t) (sizeof(struct policy_fifo_base)/sizeof(integer_t)))

#define POLICY_FIFO_LIMIT_COUNT ((mach_msg_type_number_t) (sizeof(struct policy_fifo_limit)/sizeof(integer_t)))

#define POLICY_FIFO_INFO_COUNT ((mach_msg_type_number_t) (sizeof(struct policy_fifo_info)/sizeof(integer_t)))






struct policy_bases {
 policy_timeshare_base_data_t ts;
 policy_rr_base_data_t rr;
 policy_fifo_base_data_t fifo;
};

struct policy_limits {
 policy_timeshare_limit_data_t ts;
 policy_rr_limit_data_t rr;
 policy_fifo_limit_data_t fifo;
};

struct policy_infos {
 policy_timeshare_info_data_t ts;
 policy_rr_info_data_t rr;
 policy_fifo_info_data_t fifo;
};

typedef struct policy_bases policy_base_data_t;
typedef struct policy_limits policy_limit_data_t;
typedef struct policy_infos policy_info_data_t;
# 72 "/usr/include/mach/task_info.h" 2 3 4






typedef natural_t task_flavor_t;
typedef integer_t *task_info_t;

#define TASK_INFO_MAX (1024)
typedef integer_t task_info_data_t[(1024)];





#pragma pack(4)

#define TASK_BASIC_INFO_32 4
#define TASK_BASIC2_INFO_32 6

struct task_basic_info_32 {
        integer_t suspend_count;
        natural_t virtual_size;
        natural_t resident_size;
        time_value_t user_time;

        time_value_t system_time;

 policy_t policy;
};
typedef struct task_basic_info_32 task_basic_info_32_data_t;
typedef struct task_basic_info_32 *task_basic_info_32_t;
#define TASK_BASIC_INFO_32_COUNT (sizeof(task_basic_info_32_data_t) / sizeof(natural_t))



#define TASK_BASIC_INFO_64 5

struct task_basic_info_64 {
        integer_t suspend_count;
        mach_vm_size_t virtual_size;
        mach_vm_size_t resident_size;
        time_value_t user_time;

        time_value_t system_time;

 policy_t policy;
};
typedef struct task_basic_info_64 task_basic_info_64_data_t;
typedef struct task_basic_info_64 *task_basic_info_64_t;
#define TASK_BASIC_INFO_64_COUNT (sizeof(task_basic_info_64_data_t) / sizeof(natural_t))





struct task_basic_info {
        integer_t suspend_count;
        vm_size_t virtual_size;
        vm_size_t resident_size;
        time_value_t user_time;

        time_value_t system_time;

 policy_t policy;
};

typedef struct task_basic_info task_basic_info_data_t;
typedef struct task_basic_info *task_basic_info_t;
#define TASK_BASIC_INFO_COUNT (sizeof(task_basic_info_data_t) / sizeof(natural_t))


#define TASK_BASIC_INFO TASK_BASIC_INFO_32






#define TASK_EVENTS_INFO 2

struct task_events_info {
 integer_t faults;
 integer_t pageins;
 integer_t cow_faults;
 integer_t messages_sent;
 integer_t messages_received;
        integer_t syscalls_mach;
 integer_t syscalls_unix;
 integer_t csw;
};
typedef struct task_events_info task_events_info_data_t;
typedef struct task_events_info *task_events_info_t;
#define TASK_EVENTS_INFO_COUNT ((mach_msg_type_number_t) (sizeof(task_events_info_data_t) / sizeof(natural_t)))


#define TASK_THREAD_TIMES_INFO 3


struct task_thread_times_info {
 time_value_t user_time;

 time_value_t system_time;

};

typedef struct task_thread_times_info task_thread_times_info_data_t;
typedef struct task_thread_times_info *task_thread_times_info_t;
#define TASK_THREAD_TIMES_INFO_COUNT ((mach_msg_type_number_t) (sizeof(task_thread_times_info_data_t) / sizeof(natural_t)))


#define TASK_ABSOLUTETIME_INFO 1

struct task_absolutetime_info {
 uint64_t total_user;
 uint64_t total_system;
 uint64_t threads_user;
 uint64_t threads_system;
};

typedef struct task_absolutetime_info task_absolutetime_info_data_t;
typedef struct task_absolutetime_info *task_absolutetime_info_t;
#define TASK_ABSOLUTETIME_INFO_COUNT ((mach_msg_type_number_t) (sizeof (task_absolutetime_info_data_t) / sizeof (natural_t)))


#define TASK_SECURITY_TOKEN 13
#define TASK_SECURITY_TOKEN_COUNT ((mach_msg_type_number_t) (sizeof(security_token_t) / sizeof(natural_t)))


#define TASK_AUDIT_TOKEN 15
#define TASK_AUDIT_TOKEN_COUNT (sizeof(audit_token_t) / sizeof(natural_t))



#define TASK_AFFINITY_TAG_INFO 16

struct task_affinity_tag_info {
 integer_t set_count;
 integer_t min;
 integer_t max;
 integer_t task_count;
};
typedef struct task_affinity_tag_info task_affinity_tag_info_data_t;
typedef struct task_affinity_tag_info *task_affinity_tag_info_t;
#define TASK_AFFINITY_TAG_INFO_COUNT (sizeof(task_affinity_tag_info_data_t) / sizeof(natural_t))


#pragma pack()






#define TASK_SCHED_TIMESHARE_INFO 10
#define TASK_SCHED_RR_INFO 11
#define TASK_SCHED_FIFO_INFO 12

#define TASK_SCHED_INFO 14
# 91 "/usr/include/mach/mach_types.h" 2 3 4
# 1 "/usr/include/mach/task_policy.h" 1 3 4
# 30 "/usr/include/mach/task_policy.h" 3 4
#define _MACH_TASK_POLICY_H_ 

# 1 "/usr/include/mach/mach_types.h" 1 3 4
# 33 "/usr/include/mach/task_policy.h" 2 3 4
# 51 "/usr/include/mach/task_policy.h" 3 4
typedef natural_t task_policy_flavor_t;
typedef integer_t *task_policy_t;
# 104 "/usr/include/mach/task_policy.h" 3 4
#define TASK_CATEGORY_POLICY 1

enum task_role {
 TASK_RENICED = -1,
 TASK_UNSPECIFIED = 0,
 TASK_FOREGROUND_APPLICATION,
 TASK_BACKGROUND_APPLICATION,
 TASK_CONTROL_APPLICATION,
 TASK_GRAPHICS_SERVER
};

typedef enum task_role task_role_t;

struct task_category_policy {
 task_role_t role;
};

typedef struct task_category_policy task_category_policy_data_t;
typedef struct task_category_policy *task_category_policy_t;

#define TASK_CATEGORY_POLICY_COUNT ((mach_msg_type_number_t) (sizeof (task_category_policy_data_t) / sizeof (integer_t)))
# 92 "/usr/include/mach/mach_types.h" 2 3 4
# 1 "/usr/include/mach/task_special_ports.h" 1 3 4
# 68 "/usr/include/mach/task_special_ports.h" 3 4
#define _MACH_TASK_SPECIAL_PORTS_H_ 

typedef int task_special_port_t;

#define TASK_KERNEL_PORT 1


#define TASK_HOST_PORT 2

#define TASK_NAME_PORT 3

#define TASK_BOOTSTRAP_PORT 4





#define TASK_WIRED_LEDGER_PORT 5

#define TASK_PAGED_LEDGER_PORT 6

#define TASK_SEATBELT_PORT 7

#define TASK_GSSD_PORT 8

#define TASK_ACCESS_PORT 9

#define TASK_AUTOMOUNTD_PORT 10

#define task_get_wired_ledger_port(task,port) (task_get_special_port((task), TASK_WIRED_LEDGER_PORT, (port)))


#define task_set_wired_ledger_port(task,port) (task_set_special_port((task), TASK_WIRED_LEDGER_PORT, (port)))


#define task_get_paged_ledger_port(task,port) (task_get_special_port((task), TASK_PAGED_LEDGER_PORT, (port)))


#define task_set_paged_ledger_port(task,port) (task_set_special_port((task), TASK_PAGED_LEDGER_PORT, (port)))






#define task_get_kernel_port(task,port) (task_get_special_port((task), TASK_KERNEL_PORT, (port)))


#define task_set_kernel_port(task,port) (task_set_special_port((task), TASK_KERNEL_PORT, (port)))


#define task_get_host_port(task,port) (task_get_special_port((task), TASK_HOST_PORT, (port)))


#define task_set_host_port(task,port) (task_set_special_port((task), TASK_HOST_PORT, (port)))


#define task_get_bootstrap_port(task,port) (task_get_special_port((task), TASK_BOOTSTRAP_PORT, (port)))


#define task_set_bootstrap_port(task,port) (task_set_special_port((task), TASK_BOOTSTRAP_PORT, (port)))


#define task_get_gssd_port(task,port) (task_get_special_port((task), TASK_GSSD_PORT, (port)))


#define task_set_gssd_port(task,port) (task_set_special_port((task), TASK_GSSD_PORT, (port)))


#define task_get_task_access_port(task,port) (task_get_special_port((task), TASK_ACCESS_PORT, (port)))


#define task_set_task_access_port(task,port) (task_set_special_port((task), TASK_ACCESS_PORT, (port)))


#define task_get_automountd_port(task,port) (task_get_special_port((task), TASK_AUTOMOUNTD_PORT, (port)))


#define task_set_automountd_port(task,port) (task_set_special_port((task), TASK_AUTOMOUNTD_PORT, (port)))
# 93 "/usr/include/mach/mach_types.h" 2 3 4
# 1 "/usr/include/mach/thread_info.h" 1 3 4
# 70 "/usr/include/mach/thread_info.h" 3 4
#define _MACH_THREAD_INFO_H_ 
# 81 "/usr/include/mach/thread_info.h" 3 4
typedef natural_t thread_flavor_t;
typedef integer_t *thread_info_t;

#define THREAD_INFO_MAX (1024)
typedef integer_t thread_info_data_t[(1024)];




#define THREAD_BASIC_INFO 3

struct thread_basic_info {
        time_value_t user_time;
        time_value_t system_time;
        integer_t cpu_usage;
 policy_t policy;
        integer_t run_state;
        integer_t flags;
        integer_t suspend_count;
        integer_t sleep_time;

};

typedef struct thread_basic_info thread_basic_info_data_t;
typedef struct thread_basic_info *thread_basic_info_t;
#define THREAD_BASIC_INFO_COUNT ((mach_msg_type_number_t) (sizeof(thread_basic_info_data_t) / sizeof(natural_t)))






#define TH_USAGE_SCALE 1000





#define TH_STATE_RUNNING 1
#define TH_STATE_STOPPED 2
#define TH_STATE_WAITING 3
#define TH_STATE_UNINTERRUPTIBLE 4

#define TH_STATE_HALTED 5





#define TH_FLAGS_SWAPPED 0x1
#define TH_FLAGS_IDLE 0x2





#define THREAD_SCHED_TIMESHARE_INFO 10
#define THREAD_SCHED_RR_INFO 11
#define THREAD_SCHED_FIFO_INFO 12
# 94 "/usr/include/mach/mach_types.h" 2 3 4
# 1 "/usr/include/mach/thread_policy.h" 1 3 4
# 30 "/usr/include/mach/thread_policy.h" 3 4
#define _MACH_THREAD_POLICY_H_ 
# 51 "/usr/include/mach/thread_policy.h" 3 4
typedef natural_t thread_policy_flavor_t;
typedef integer_t *thread_policy_t;
# 84 "/usr/include/mach/thread_policy.h" 3 4
#define THREAD_STANDARD_POLICY 1

struct thread_standard_policy {
 natural_t no_data;
};

typedef struct thread_standard_policy thread_standard_policy_data_t;
typedef struct thread_standard_policy *thread_standard_policy_t;

#define THREAD_STANDARD_POLICY_COUNT 0
# 107 "/usr/include/mach/thread_policy.h" 3 4
#define THREAD_EXTENDED_POLICY 1

struct thread_extended_policy {
 boolean_t timeshare;
};

typedef struct thread_extended_policy thread_extended_policy_data_t;
typedef struct thread_extended_policy *thread_extended_policy_t;

#define THREAD_EXTENDED_POLICY_COUNT ((mach_msg_type_number_t) (sizeof (thread_extended_policy_data_t) / sizeof (integer_t)))
# 146 "/usr/include/mach/thread_policy.h" 3 4
#define THREAD_TIME_CONSTRAINT_POLICY 2

struct thread_time_constraint_policy {
 uint32_t period;
 uint32_t computation;
 uint32_t constraint;
 boolean_t preemptible;
};

typedef struct thread_time_constraint_policy
         thread_time_constraint_policy_data_t;
typedef struct thread_time_constraint_policy
         *thread_time_constraint_policy_t;

#define THREAD_TIME_CONSTRAINT_POLICY_COUNT ((mach_msg_type_number_t) (sizeof (thread_time_constraint_policy_data_t) / sizeof (integer_t)))
# 174 "/usr/include/mach/thread_policy.h" 3 4
#define THREAD_PRECEDENCE_POLICY 3

struct thread_precedence_policy {
 integer_t importance;
};

typedef struct thread_precedence_policy thread_precedence_policy_data_t;
typedef struct thread_precedence_policy *thread_precedence_policy_t;

#define THREAD_PRECEDENCE_POLICY_COUNT ((mach_msg_type_number_t) (sizeof (thread_precedence_policy_data_t) / sizeof (integer_t)))
# 204 "/usr/include/mach/thread_policy.h" 3 4
#define THREAD_AFFINITY_POLICY 4

struct thread_affinity_policy {
 integer_t affinity_tag;
};

#define THREAD_AFFINITY_TAG_NULL 0

typedef struct thread_affinity_policy thread_affinity_policy_data_t;
typedef struct thread_affinity_policy *thread_affinity_policy_t;

#define THREAD_AFFINITY_POLICY_COUNT ((mach_msg_type_number_t) (sizeof (thread_affinity_policy_data_t) / sizeof (integer_t)))
# 95 "/usr/include/mach/mach_types.h" 2 3 4
# 1 "/usr/include/mach/thread_special_ports.h" 1 3 4
# 68 "/usr/include/mach/thread_special_ports.h" 3 4
#define _MACH_THREAD_SPECIAL_PORTS_H_ 

#define THREAD_KERNEL_PORT 1






#define thread_get_kernel_port(thread,port) (thread_get_special_port((thread), THREAD_KERNEL_PORT, (port)))


#define thread_set_kernel_port(thread,port) (thread_set_special_port((thread), THREAD_KERNEL_PORT, (port)))
# 96 "/usr/include/mach/mach_types.h" 2 3 4


# 1 "/usr/include/mach/clock_types.h" 1 3 4
# 43 "/usr/include/mach/clock_types.h" 3 4
#define _MACH_CLOCK_TYPES_H_ 







typedef int alarm_type_t;
typedef int sleep_type_t;
typedef int clock_id_t;
typedef int clock_flavor_t;
typedef int *clock_attr_t;
typedef int clock_res_t;




struct mach_timespec {
 unsigned int tv_sec;
 clock_res_t tv_nsec;
};
typedef struct mach_timespec mach_timespec_t;




#define SYSTEM_CLOCK 0
#define CALENDAR_CLOCK 1

#define REALTIME_CLOCK 0




#define CLOCK_GET_TIME_RES 1

#define CLOCK_ALARM_CURRES 3
#define CLOCK_ALARM_MINRES 4
#define CLOCK_ALARM_MAXRES 5

#define NSEC_PER_USEC 1000
#define USEC_PER_SEC 1000000
#define NSEC_PER_SEC 1000000000

#define BAD_MACH_TIMESPEC(t) ((t)->tv_nsec < 0 || (t)->tv_nsec >= NSEC_PER_SEC)



#define CMP_MACH_TIMESPEC(t1,t2) ((t1)->tv_sec > (t2)->tv_sec ? +NSEC_PER_SEC : ((t1)->tv_sec < (t2)->tv_sec ? -NSEC_PER_SEC : (t1)->tv_nsec - (t2)->tv_nsec))





#define ADD_MACH_TIMESPEC(t1,t2) do { if (((t1)->tv_nsec += (t2)->tv_nsec) >= NSEC_PER_SEC) { (t1)->tv_nsec -= NSEC_PER_SEC; (t1)->tv_sec += 1; } (t1)->tv_sec += (t2)->tv_sec; } while (0)
# 108 "/usr/include/mach/clock_types.h" 3 4
#define SUB_MACH_TIMESPEC(t1,t2) do { if (((t1)->tv_nsec -= (t2)->tv_nsec) < 0) { (t1)->tv_nsec += NSEC_PER_SEC; (t1)->tv_sec -= 1; } (t1)->tv_sec -= (t2)->tv_sec; } while (0)
# 120 "/usr/include/mach/clock_types.h" 3 4
#define ALRMTYPE 0xff
#define TIME_ABSOLUTE 0x00
#define TIME_RELATIVE 0x01

#define BAD_ALRMTYPE(t) (((t) &~ TIME_RELATIVE) != 0)
# 99 "/usr/include/mach/mach_types.h" 2 3 4
# 1 "/usr/include/mach/vm_attributes.h" 1 3 4
# 71 "/usr/include/mach/vm_attributes.h" 3 4
#define _MACH_VM_ATTRIBUTES_H_ 




typedef unsigned int vm_machine_attribute_t;

#define MATTR_CACHE 1
#define MATTR_MIGRATE 2
#define MATTR_REPLICATE 4




typedef int vm_machine_attribute_val_t;

#define MATTR_VAL_OFF 0
#define MATTR_VAL_ON 1
#define MATTR_VAL_GET 2

#define MATTR_VAL_CACHE_FLUSH 6
#define MATTR_VAL_DCACHE_FLUSH 7
#define MATTR_VAL_ICACHE_FLUSH 8
#define MATTR_VAL_CACHE_SYNC 9
#define MATTR_VAL_CACHE_SYNC 9

#define MATTR_VAL_GET_INFO 10
# 100 "/usr/include/mach/mach_types.h" 2 3 4
# 1 "/usr/include/mach/vm_inherit.h" 1 3 4
# 67 "/usr/include/mach/vm_inherit.h" 3 4
#define _MACH_VM_INHERIT_H_ 







typedef unsigned int vm_inherit_t;





#define VM_INHERIT_SHARE ((vm_inherit_t) 0)
#define VM_INHERIT_COPY ((vm_inherit_t) 1)
#define VM_INHERIT_NONE ((vm_inherit_t) 2)
#define VM_INHERIT_DONATE_COPY ((vm_inherit_t) 3)

#define VM_INHERIT_DEFAULT VM_INHERIT_COPY
#define VM_INHERIT_LAST_VALID VM_INHERIT_NONE
# 101 "/usr/include/mach/mach_types.h" 2 3 4
# 1 "/usr/include/mach/vm_purgable.h" 1 3 4
# 45 "/usr/include/mach/vm_purgable.h" 3 4
#define _MACH_VM_PURGABLE_H_ 







typedef int vm_purgable_t;




#define VM_PURGABLE_SET_STATE ((vm_purgable_t) 0)
#define VM_PURGABLE_GET_STATE ((vm_purgable_t) 1)






#define VM_VOLATILE_GROUP_SHIFT 8
#define VM_VOLATILE_GROUP_MASK (7 << VM_VOLATILE_GROUP_SHIFT)
#define VM_VOLATILE_GROUP_DEFAULT VM_VOLATILE_GROUP_7

#define VM_VOLATILE_GROUP_0 (0 << VM_VOLATILE_GROUP_SHIFT)
#define VM_VOLATILE_GROUP_1 (1 << VM_VOLATILE_GROUP_SHIFT)
#define VM_VOLATILE_GROUP_2 (2 << VM_VOLATILE_GROUP_SHIFT)
#define VM_VOLATILE_GROUP_3 (3 << VM_VOLATILE_GROUP_SHIFT)
#define VM_VOLATILE_GROUP_4 (4 << VM_VOLATILE_GROUP_SHIFT)
#define VM_VOLATILE_GROUP_5 (5 << VM_VOLATILE_GROUP_SHIFT)
#define VM_VOLATILE_GROUP_6 (6 << VM_VOLATILE_GROUP_SHIFT)
#define VM_VOLATILE_GROUP_7 (7 << VM_VOLATILE_GROUP_SHIFT)







#define VM_PURGABLE_BEHAVIOR_SHIFT 6
#define VM_PURGABLE_BEHAVIOR_MASK (1 << VM_PURGABLE_BEHAVIOR_SHIFT)
#define VM_PURGABLE_BEHAVIOR_FIFO (0 << VM_PURGABLE_BEHAVIOR_SHIFT)
#define VM_PURGABLE_BEHAVIOR_LIFO (1 << VM_PURGABLE_BEHAVIOR_SHIFT)







#define VM_PURGABLE_ORDERING_SHIFT 5
#define VM_PURGABLE_ORDERING_MASK (1 << VM_PURGABLE_ORDERING_SHIFT)
#define VM_PURGABLE_ORDERING_OBSOLETE (1 << VM_PURGABLE_ORDERING_SHIFT)
#define VM_PURGABLE_ORDERING_NORMAL (0 << VM_PURGABLE_ORDERING_SHIFT)





#define VM_VOLATILE_ORDER_SHIFT 4
#define VM_VOLATILE_ORDER_MASK (1 << VM_VOLATILE_ORDER_SHIFT)
#define VM_VOLATILE_MAKE_FIRST_IN_GROUP (1 << VM_VOLATILE_ORDER_SHIFT)
#define VM_VOLATILE_MAKE_LAST_IN_GROUP (0 << VM_VOLATILE_ORDER_SHIFT)




#define VM_PURGABLE_STATE_MIN 0
#define VM_PURGABLE_STATE_MAX 3
#define VM_PURGABLE_STATE_MASK 3

#define VM_PURGABLE_NONVOLATILE 0
#define VM_PURGABLE_VOLATILE 1
#define VM_PURGABLE_EMPTY 2
#define VM_PURGABLE_DENY 3
# 102 "/usr/include/mach/mach_types.h" 2 3 4
# 1 "/usr/include/mach/vm_behavior.h" 1 3 4
# 39 "/usr/include/mach/vm_behavior.h" 3 4
#define _MACH_VM_BEHAVIOR_H_ 







typedef int vm_behavior_t;
# 57 "/usr/include/mach/vm_behavior.h" 3 4
#define VM_BEHAVIOR_DEFAULT ((vm_behavior_t) 0)
#define VM_BEHAVIOR_RANDOM ((vm_behavior_t) 1)
#define VM_BEHAVIOR_SEQUENTIAL ((vm_behavior_t) 2)
#define VM_BEHAVIOR_RSEQNTL ((vm_behavior_t) 3)
#define VM_BEHAVIOR_WILLNEED ((vm_behavior_t) 4)
#define VM_BEHAVIOR_DONTNEED ((vm_behavior_t) 5)
# 103 "/usr/include/mach/mach_types.h" 2 3 4




# 1 "/usr/include/mach/vm_region.h" 1 3 4
# 39 "/usr/include/mach/vm_region.h" 3 4
#define _MACH_VM_REGION_H_ 







# 1 "/usr/include/mach/machine/vm_param.h" 1 3 4
# 30 "/usr/include/mach/machine/vm_param.h" 3 4
#define _MACH_MACHINE_VM_PARAM_H_ 




# 1 "/usr/include/mach/i386/vm_param.h" 1 3 4
# 91 "/usr/include/mach/i386/vm_param.h" 3 4
#define _MACH_I386_VM_PARAM_H_ 

#define BYTE_SIZE 8

#define I386_PGBYTES 4096
#define I386_PGSHIFT 12

#define PAGE_SIZE I386_PGBYTES
#define PAGE_SHIFT I386_PGSHIFT
#define PAGE_MASK (PAGE_SIZE - 1)






#define i386_btop(x) (((pmap_paddr_t)(x)) >> I386_PGSHIFT)
#define machine_btop(x) i386_btop(x)
#define i386_ptob(x) (((pmap_paddr_t)(x)) << I386_PGSHIFT)







#define i386_round_page(x) ((((pmap_paddr_t)(x)) + I386_PGBYTES - 1) & ~(I386_PGBYTES-1))

#define i386_trunc_page(x) (((pmap_paddr_t)(x)) & ~(I386_PGBYTES-1))



#define VM_MIN_ADDRESS64 ((user_addr_t) 0x0000000000000000ULL)



#define VM_USRSTACK64 ((user_addr_t) 0x00007FFF5FC00000ULL)
#define VM_DYLD64 ((user_addr_t) 0x00007FFF5FC00000ULL)
#define VM_LIB64_SHR_DATA ((user_addr_t) 0x00007FFF60000000ULL)
#define VM_LIB64_SHR_TEXT ((user_addr_t) 0x00007FFF80000000ULL)




#define VM_MAX_PAGE_ADDRESS ((user_addr_t) 0x00007FFFFFE00000ULL)



#define VM_MAX_USER_PAGE_ADDRESS ((user_addr_t)0x00007FFFFFFFF000ULL)



#define MACH_VM_MIN_ADDRESS ((mach_vm_offset_t) 0)
#define MACH_VM_MAX_ADDRESS ((mach_vm_offset_t) VM_MAX_PAGE_ADDRESS)


#define VM_MIN_ADDRESS ((vm_offset_t) 0)
#define VM_USRSTACK32 ((vm_offset_t) 0xC0000000)
#define VM_MAX_ADDRESS ((vm_offset_t) 0xFFE00000)
# 36 "/usr/include/mach/machine/vm_param.h" 2 3 4
# 48 "/usr/include/mach/vm_region.h" 2 3 4





#pragma pack(4)







#define VM_REGION_INFO_MAX (1024)
typedef int *vm_region_info_t;
typedef int *vm_region_info_64_t;
typedef int *vm_region_recurse_info_t;
typedef int *vm_region_recurse_info_64_t;
typedef int vm_region_flavor_t;
typedef int vm_region_info_data_t[(1024)];

#define VM_REGION_BASIC_INFO_64 9
struct vm_region_basic_info_64 {
 vm_prot_t protection;
 vm_prot_t max_protection;
 vm_inherit_t inheritance;
 boolean_t shared;
 boolean_t reserved;
 memory_object_offset_t offset;
 vm_behavior_t behavior;
 unsigned short user_wired_count;
};
typedef struct vm_region_basic_info_64 *vm_region_basic_info_64_t;
typedef struct vm_region_basic_info_64 vm_region_basic_info_data_64_t;

#define VM_REGION_BASIC_INFO_COUNT_64 ((mach_msg_type_number_t) (sizeof(vm_region_basic_info_data_64_t)/sizeof(int)))







#define VM_REGION_BASIC_INFO 10






struct vm_region_basic_info {
 vm_prot_t protection;
 vm_prot_t max_protection;
 vm_inherit_t inheritance;
 boolean_t shared;
 boolean_t reserved;
 uint32_t offset;
 vm_behavior_t behavior;
 unsigned short user_wired_count;
};

typedef struct vm_region_basic_info *vm_region_basic_info_t;
typedef struct vm_region_basic_info vm_region_basic_info_data_t;

#define VM_REGION_BASIC_INFO_COUNT ((mach_msg_type_number_t) (sizeof(vm_region_basic_info_data_t)/sizeof(int)))


#define VM_REGION_EXTENDED_INFO 11

#define SM_COW 1
#define SM_PRIVATE 2
#define SM_EMPTY 3
#define SM_SHARED 4
#define SM_TRUESHARED 5
#define SM_PRIVATE_ALIASED 6
#define SM_SHARED_ALIASED 7
# 133 "/usr/include/mach/vm_region.h" 3 4
struct vm_region_extended_info {
 vm_prot_t protection;
        unsigned int user_tag;
        unsigned int pages_resident;
        unsigned int pages_shared_now_private;
        unsigned int pages_swapped_out;
        unsigned int pages_dirtied;
        unsigned int ref_count;
        unsigned short shadow_depth;
        unsigned char external_pager;
        unsigned char share_mode;
};

typedef struct vm_region_extended_info *vm_region_extended_info_t;
typedef struct vm_region_extended_info vm_region_extended_info_data_t;

#define VM_REGION_EXTENDED_INFO_COUNT ((mach_msg_type_number_t) (sizeof(vm_region_extended_info_data_t)/sizeof(int)))



#define VM_REGION_TOP_INFO 12

struct vm_region_top_info {
        unsigned int obj_id;
        unsigned int ref_count;
        unsigned int private_pages_resident;
        unsigned int shared_pages_resident;
        unsigned char share_mode;
};

typedef struct vm_region_top_info *vm_region_top_info_t;
typedef struct vm_region_top_info vm_region_top_info_data_t;

#define VM_REGION_TOP_INFO_COUNT ((mach_msg_type_number_t) (sizeof(vm_region_top_info_data_t)/sizeof(int)))
# 191 "/usr/include/mach/vm_region.h" 3 4
struct vm_region_submap_info {
 vm_prot_t protection;
 vm_prot_t max_protection;
 vm_inherit_t inheritance;
 uint32_t offset;
        unsigned int user_tag;
        unsigned int pages_resident;
        unsigned int pages_shared_now_private;
        unsigned int pages_swapped_out;
        unsigned int pages_dirtied;
        unsigned int ref_count;
        unsigned short shadow_depth;
        unsigned char external_pager;
        unsigned char share_mode;
 boolean_t is_submap;
 vm_behavior_t behavior;
 vm_offset_t object_id;
 unsigned short user_wired_count;
};

typedef struct vm_region_submap_info *vm_region_submap_info_t;
typedef struct vm_region_submap_info vm_region_submap_info_data_t;

#define VM_REGION_SUBMAP_INFO_COUNT ((mach_msg_type_number_t) (sizeof(vm_region_submap_info_data_t)/sizeof(int)))


struct vm_region_submap_info_64 {
 vm_prot_t protection;
 vm_prot_t max_protection;
 vm_inherit_t inheritance;
 memory_object_offset_t offset;
        unsigned int user_tag;
        unsigned int pages_resident;
        unsigned int pages_shared_now_private;
        unsigned int pages_swapped_out;
        unsigned int pages_dirtied;
        unsigned int ref_count;
        unsigned short shadow_depth;
        unsigned char external_pager;
        unsigned char share_mode;
 boolean_t is_submap;
 vm_behavior_t behavior;
 vm_offset_t object_id;
 unsigned short user_wired_count;
};

typedef struct vm_region_submap_info_64 *vm_region_submap_info_64_t;
typedef struct vm_region_submap_info_64 vm_region_submap_info_data_64_t;

#define VM_REGION_SUBMAP_INFO_COUNT_64 ((mach_msg_type_number_t) (sizeof(vm_region_submap_info_data_64_t)/sizeof(int)))


struct vm_region_submap_short_info_64 {
 vm_prot_t protection;
 vm_prot_t max_protection;
 vm_inherit_t inheritance;
 memory_object_offset_t offset;
        unsigned int user_tag;
        unsigned int ref_count;
        unsigned short shadow_depth;
        unsigned char external_pager;
        unsigned char share_mode;
 boolean_t is_submap;
 vm_behavior_t behavior;
 vm_offset_t object_id;
 unsigned short user_wired_count;
};

typedef struct vm_region_submap_short_info_64 *vm_region_submap_short_info_64_t;
typedef struct vm_region_submap_short_info_64 vm_region_submap_short_info_data_64_t;

#define VM_REGION_SUBMAP_SHORT_INFO_COUNT_64 ((mach_msg_type_number_t) (sizeof(vm_region_submap_short_info_data_64_t)/sizeof(int)))



struct mach_vm_read_entry {
 mach_vm_address_t address;
 mach_vm_size_t size;
};

struct vm_read_entry {
 vm_address_t address;
 vm_size_t size;
};

#define VM_MAP_ENTRY_MAX (256)

typedef struct mach_vm_read_entry mach_vm_read_entry_t[(256)];
typedef struct vm_read_entry vm_read_entry_t[(256)];

#pragma pack()
# 108 "/usr/include/mach/mach_types.h" 2 3 4
# 1 "/usr/include/mach/kmod.h" 1 3 4
# 36 "/usr/include/mach/kmod.h" 3 4
#define _MACH_KMOD_H_ 
# 48 "/usr/include/mach/kmod.h" 3 4
#define KMOD_CNTL_START 1
#define KMOD_CNTL_STOP 2
#define KMOD_CNTL_RETAIN 3
#define KMOD_CNTL_RELEASE 4
#define KMOD_CNTL_GET_CMD 5

#define KMOD_CNTL_GET_KERNEL_SYMBOLS 6
#define KMOD_CNTL_FREE_LINKEDIT_DATA 7
#define KMOD_CNTL_GET_KERNEL_UUID 8
#define KMOD_CNTL_GET_UUID 8
#define KMOD_CNTL_DISABLE_LOAD 9

#define KMOD_PACK_IDS(from,to) (((unsigned long)from << 16) | (unsigned long)to)
#define KMOD_UNPACK_FROM_ID(i) ((unsigned long)i >> 16)
#define KMOD_UNPACK_TO_ID(i) ((unsigned long)i & 0xffff)

typedef int kmod_t;
typedef int kmod_control_flavor_t;
typedef void* kmod_args_t;

#define KMOD_MAX_NAME 64

#pragma pack(4)


typedef struct kmod_reference {
 struct kmod_reference *next;
 struct kmod_info *info;
} kmod_reference_t;

#pragma pack()





#define KMOD_RETURN_SUCCESS KERN_SUCCESS
#define KMOD_RETURN_FAILURE KERN_FAILURE

typedef kern_return_t kmod_start_func_t(struct kmod_info *ki, void *data);
typedef kern_return_t kmod_stop_func_t(struct kmod_info *ki, void *data);

#pragma pack(4)



typedef struct kmod_info {
 struct kmod_info *next;
 int info_version;
 int id;
 char name[64];
 char version[64];
 int reference_count;
 kmod_reference_t *reference_list;
 vm_address_t address;
 vm_size_t size;
 vm_size_t hdr_size;
        kmod_start_func_t *start;
        kmod_stop_func_t *stop;
} kmod_info_t;

#pragma pack()

typedef kmod_info_t *kmod_info_array_t;

#define KMOD_INFO_NAME kmod_info
#define KMOD_INFO_VERSION 1

#define KMOD_DECL(name,version) static kmod_start_func_t name ## _module_start; static kmod_stop_func_t name ## _module_stop; kmod_info_t KMOD_INFO_NAME = { 0, KMOD_INFO_VERSION, -1, { #name }, { version }, -1, 0, 0, 0, 0, name ## _module_start, name ## _module_stop };







#define KMOD_EXPLICIT_DECL(name,version,start,stop) kmod_info_t KMOD_INFO_NAME = { 0, KMOD_INFO_VERSION, -1, { #name }, { version }, -1, 0, 0, 0, 0, start, stop };





#define KMOD_LIB_DECL(name,version) kmod_info_t KMOD_INFO_NAME = { 0, KMOD_INFO_VERSION, -1, { #name }, { version }, -1, 0, 0, 0, 0, kmod_default_start, kmod_default_stop };
# 141 "/usr/include/mach/kmod.h" 3 4
#define KMOD_LOAD_EXTENSION_PACKET 1
#define KMOD_LOAD_WITH_DEPENDENCIES_PACKET 2


#define KMOD_IOKIT_START_RANGE_PACKET 0x1000
#define KMOD_IOKIT_END_RANGE_PACKET 0x1fff

typedef struct kmod_load_extension_cmd {
 int type;
 char name[64];
} kmod_load_extension_cmd_t;

typedef struct kmod_load_with_dependencies_cmd {
 int type;
 char name[64];
 char dependencies[1][64];
} kmod_load_with_dependencies_cmd_t;

typedef struct kmod_generic_cmd {
 int type;
 char data[1];
} kmod_generic_cmd_t;
# 109 "/usr/include/mach/mach_types.h" 2 3 4






typedef mach_port_t task_t;
typedef mach_port_t task_name_t;
typedef mach_port_t thread_t;
typedef mach_port_t thread_act_t;
typedef mach_port_t ipc_space_t;
typedef mach_port_t host_t;
typedef mach_port_t host_priv_t;
typedef mach_port_t host_security_t;
typedef mach_port_t processor_t;
typedef mach_port_t processor_set_t;
typedef mach_port_t processor_set_control_t;
typedef mach_port_t semaphore_t;
typedef mach_port_t lock_set_t;
typedef mach_port_t ledger_t;
typedef mach_port_t alarm_t;
typedef mach_port_t clock_serv_t;
typedef mach_port_t clock_ctrl_t;







typedef processor_set_t processor_set_name_t;




typedef mach_port_t clock_reply_t;
typedef mach_port_t bootstrap_t;
typedef mach_port_t mem_entry_name_port_t;
typedef mach_port_t exception_handler_t;
typedef exception_handler_t *exception_handler_array_t;
typedef mach_port_t vm_task_entry_t;
typedef mach_port_t io_master_t;
typedef mach_port_t UNDServerRef;
# 160 "/usr/include/mach/mach_types.h" 3 4
typedef task_t *task_array_t;
typedef thread_t *thread_array_t;
typedef processor_set_t *processor_set_array_t;
typedef processor_set_t *processor_set_name_array_t;
typedef processor_t *processor_array_t;
typedef thread_act_t *thread_act_array_t;
typedef ledger_t *ledger_array_t;







typedef task_t task_port_t;
typedef task_array_t task_port_array_t;
typedef thread_t thread_port_t;
typedef thread_array_t thread_port_array_t;
typedef ipc_space_t ipc_space_port_t;
typedef host_t host_name_t;
typedef host_t host_name_port_t;
typedef processor_set_t processor_set_port_t;
typedef processor_set_t processor_set_name_port_t;
typedef processor_set_array_t processor_set_name_port_array_t;
typedef processor_set_t processor_set_control_port_t;
typedef processor_t processor_port_t;
typedef processor_array_t processor_port_array_t;
typedef thread_act_t thread_act_port_t;
typedef thread_act_array_t thread_act_port_array_t;
typedef semaphore_t semaphore_port_t;
typedef lock_set_t lock_set_port_t;
typedef ledger_t ledger_port_t;
typedef ledger_array_t ledger_port_array_t;
typedef alarm_t alarm_port_t;
typedef clock_serv_t clock_serv_port_t;
typedef clock_ctrl_t clock_ctrl_port_t;
typedef exception_handler_t exception_port_t;
typedef exception_handler_array_t exception_port_arrary_t;


#define TASK_NULL ((task_t) 0)
#define TASK_NAME_NULL ((task_name_t) 0)
#define THREAD_NULL ((thread_t) 0)
#define THR_ACT_NULL ((thread_act_t) 0)
#define IPC_SPACE_NULL ((ipc_space_t) 0)
#define HOST_NULL ((host_t) 0)
#define HOST_PRIV_NULL ((host_priv_t)0)
#define HOST_SECURITY_NULL ((host_security_t)0)
#define PROCESSOR_SET_NULL ((processor_set_t) 0)
#define PROCESSOR_NULL ((processor_t) 0)
#define SEMAPHORE_NULL ((semaphore_t) 0)
#define LOCK_SET_NULL ((lock_set_t) 0)
#define LEDGER_NULL ((ledger_t) 0)
#define ALARM_NULL ((alarm_t) 0)
#define CLOCK_NULL ((clock_t) 0)
#define UND_SERVER_NULL ((UNDServerRef) 0)

typedef natural_t ledger_item_t;
#define LEDGER_ITEM_INFINITY ((ledger_item_t) (~0))

typedef mach_vm_offset_t *emulation_vector_t;
typedef char *user_subsystem_t;

typedef char *labelstr_t;
# 67 "/usr/include/mach/mach.h" 2 3 4
# 1 "/usr/include/mach/mach_interface.h" 1 3 4
# 40 "/usr/include/mach/mach_interface.h" 3 4
#define _MACH_INTERFACE_H_ 

# 1 "/usr/include/mach/clock_priv.h" 1 3 4

#define _clock_priv_user_ 




# 1 "/usr/include/mach/ndr.h" 1 3 4
# 33 "/usr/include/mach/ndr.h" 3 4
#define _MACH_NDR_H_ 




typedef struct {
    unsigned char mig_vers;
    unsigned char if_vers;
    unsigned char reserved1;
    unsigned char mig_encoding;
    unsigned char int_rep;
    unsigned char char_rep;
    unsigned char float_rep;
    unsigned char reserved2;
} NDR_record_t;




#define NDR_PROTOCOL_2_0 0




#define NDR_INT_BIG_ENDIAN 0
#define NDR_INT_LITTLE_ENDIAN 1
#define NDR_FLOAT_IEEE 0
#define NDR_FLOAT_VAX 1
#define NDR_FLOAT_CRAY 2
#define NDR_FLOAT_IBM 3
#define NDR_CHAR_ASCII 0
#define NDR_CHAR_EBCDIC 1

extern NDR_record_t NDR_record;






#define __NDR_convert__ 1



#define __NDR_convert__int_rep__ 1





#define __NDR_convert__char_rep__ 0



#define __NDR_convert__float_rep__ 0




#define __NDR_convert__NOOP do ; while (0)
#define __NDR_convert__UNKNOWN(s) __NDR_convert__NOOP
#define __NDR_convert__SINGLE(a,f,r) do { r((a), (f)); } while (0)
#define __NDR_convert__ARRAY(a,f,c,r) do { int __i__, __C__ = (c); for (__i__ = 0; __i__ < __C__; __i__++) r(&(a)[__i__], f); } while (0)



#define __NDR_convert__2DARRAY(a,f,s,c,r) do { int __i__, __C__ = (c), __S__ = (s); for (__i__ = 0; __i__ < __C__; __i__++) r(&(a)[__i__ * __S__], f, __S__); } while (0)






# 1 "/usr/include/libkern/OSByteOrder.h" 1 3 4
# 30 "/usr/include/libkern/OSByteOrder.h" 3 4
#define _OS_OSBYTEORDER_H 





#define OSSwapConstInt16(x) __DARWIN_OSSwapConstInt16(x)
#define OSSwapConstInt32(x) __DARWIN_OSSwapConstInt32(x)
#define OSSwapConstInt64(x) __DARWIN_OSSwapConstInt64(x)






# 1 "/usr/include/libkern/i386/OSByteOrder.h" 1 3 4
# 30 "/usr/include/libkern/i386/OSByteOrder.h" 3 4
#define _OS_OSBYTEORDERI386_H 





#define OS_INLINE __DARWIN_OS_INLINE




static 
# 41 "/usr/include/libkern/i386/OSByteOrder.h"
__inline__

# 42 "/usr/include/libkern/i386/OSByteOrder.h" 3 4
uint16_t
OSReadSwapInt16(
    const volatile void * base,
    uintptr_t byteOffset
)
{
    uint16_t result;

    result = *(volatile uint16_t *)((uintptr_t)base + byteOffset);
    return _OSSwapInt16(result);
}

static 
# 54 "/usr/include/libkern/i386/OSByteOrder.h"
__inline__

# 55 "/usr/include/libkern/i386/OSByteOrder.h" 3 4
uint32_t
OSReadSwapInt32(
    const volatile void * base,
    uintptr_t byteOffset
)
{
    uint32_t result;

    result = *(volatile uint32_t *)((uintptr_t)base + byteOffset);
    return _OSSwapInt32(result);
}

static 
# 67 "/usr/include/libkern/i386/OSByteOrder.h"
__inline__

# 68 "/usr/include/libkern/i386/OSByteOrder.h" 3 4
uint64_t
OSReadSwapInt64(
    const volatile void * base,
    uintptr_t byteOffset
)
{
    uint64_t result;

    result = *(volatile uint64_t *)((uintptr_t)base + byteOffset);
    return _OSSwapInt64(result);
}



static 
# 82 "/usr/include/libkern/i386/OSByteOrder.h"
__inline__

# 83 "/usr/include/libkern/i386/OSByteOrder.h" 3 4
void
OSWriteSwapInt16(
    volatile void * base,
    uintptr_t byteOffset,
    uint16_t data
)
{
    *(volatile uint16_t *)((uintptr_t)base + byteOffset) = _OSSwapInt16(data);
}

static 
# 93 "/usr/include/libkern/i386/OSByteOrder.h"
__inline__

# 94 "/usr/include/libkern/i386/OSByteOrder.h" 3 4
void
OSWriteSwapInt32(
    volatile void * base,
    uintptr_t byteOffset,
    uint32_t data
)
{
    *(volatile uint32_t *)((uintptr_t)base + byteOffset) = _OSSwapInt32(data);
}

static 
# 104 "/usr/include/libkern/i386/OSByteOrder.h"
__inline__

# 105 "/usr/include/libkern/i386/OSByteOrder.h" 3 4
void
OSWriteSwapInt64(
    volatile void * base,
    uintptr_t byteOffset,
    uint64_t data
)
{
    *(volatile uint64_t *)((uintptr_t)base + byteOffset) = _OSSwapInt64(data);
}
# 46 "/usr/include/libkern/OSByteOrder.h" 2 3 4
# 58 "/usr/include/libkern/OSByteOrder.h" 3 4
#define OSSwapInt16(x) __DARWIN_OSSwapInt16(x)
#define OSSwapInt32(x) __DARWIN_OSSwapInt32(x)
#define OSSwapInt64(x) __DARWIN_OSSwapInt64(x)

enum {
    OSUnknownByteOrder,
    OSLittleEndian,
    OSBigEndian
};

static 
# 68 "/usr/include/libkern/OSByteOrder.h"
__inline__

# 69 "/usr/include/libkern/OSByteOrder.h" 3 4
int32_t
OSHostByteOrder(void) {

    return OSLittleEndian;





}

#define OSReadBigInt(x,y) OSReadBigInt32(x, y)
#define OSWriteBigInt(x,y,z) OSWriteBigInt32(x, y, z)
#define OSSwapBigToHostInt(x) OSSwapBigToHostInt32(x)
#define OSSwapHostToBigInt(x) OSSwapHostToBigInt32(x)
#define OSReadLittleInt(x,y) OSReadLittleInt32(x, y)
#define OSWriteLittleInt(x,y,z) OSWriteLittleInt32(x, y, z)
#define OSSwapHostToLittleInt(x) OSSwapHostToLittleInt32(x)
#define OSSwapLittleToHostInt(x) OSSwapLittleToHostInt32(x)



static 
# 91 "/usr/include/libkern/OSByteOrder.h"
__inline__

# 92 "/usr/include/libkern/OSByteOrder.h" 3 4
uint16_t
_OSReadInt16(
    const volatile void * base,
    uintptr_t byteOffset
)
{
    return *(volatile uint16_t *)((uintptr_t)base + byteOffset);
}

static 
# 101 "/usr/include/libkern/OSByteOrder.h"
__inline__

# 102 "/usr/include/libkern/OSByteOrder.h" 3 4
uint32_t
_OSReadInt32(
    const volatile void * base,
    uintptr_t byteOffset
)
{
    return *(volatile uint32_t *)((uintptr_t)base + byteOffset);
}

static 
# 111 "/usr/include/libkern/OSByteOrder.h"
__inline__

# 112 "/usr/include/libkern/OSByteOrder.h" 3 4
uint64_t
_OSReadInt64(
    const volatile void * base,
    uintptr_t byteOffset
)
{
    return *(volatile uint64_t *)((uintptr_t)base + byteOffset);
}



static 
# 123 "/usr/include/libkern/OSByteOrder.h"
__inline__

# 124 "/usr/include/libkern/OSByteOrder.h" 3 4
void
_OSWriteInt16(
    volatile void * base,
    uintptr_t byteOffset,
    uint16_t data
)
{
    *(volatile uint16_t *)((uintptr_t)base + byteOffset) = data;
}

static 
# 134 "/usr/include/libkern/OSByteOrder.h"
__inline__

# 135 "/usr/include/libkern/OSByteOrder.h" 3 4
void
_OSWriteInt32(
    volatile void * base,
    uintptr_t byteOffset,
    uint32_t data
)
{
    *(volatile uint32_t *)((uintptr_t)base + byteOffset) = data;
}

static 
# 145 "/usr/include/libkern/OSByteOrder.h"
__inline__

# 146 "/usr/include/libkern/OSByteOrder.h" 3 4
void
_OSWriteInt64(
    volatile void * base,
    uintptr_t byteOffset,
    uint64_t data
)
{
    *(volatile uint64_t *)((uintptr_t)base + byteOffset) = data;
}
# 234 "/usr/include/libkern/OSByteOrder.h" 3 4
#define OSReadBigInt16(base,byteOffset) OSReadSwapInt16(base, byteOffset)
#define OSReadBigInt32(base,byteOffset) OSReadSwapInt32(base, byteOffset)
#define OSReadBigInt64(base,byteOffset) OSReadSwapInt64(base, byteOffset)



#define OSWriteBigInt16(base,byteOffset,data) OSWriteSwapInt16(base, byteOffset, data)
#define OSWriteBigInt32(base,byteOffset,data) OSWriteSwapInt32(base, byteOffset, data)
#define OSWriteBigInt64(base,byteOffset,data) OSWriteSwapInt64(base, byteOffset, data)



#define OSReadLittleInt16(base,byteOffset) _OSReadInt16(base, byteOffset)
#define OSReadLittleInt32(base,byteOffset) _OSReadInt32(base, byteOffset)
#define OSReadLittleInt64(base,byteOffset) _OSReadInt64(base, byteOffset)



#define OSWriteLittleInt16(base,byteOffset,data) _OSWriteInt16(base, byteOffset, data)
#define OSWriteLittleInt32(base,byteOffset,data) _OSWriteInt32(base, byteOffset, data)
#define OSWriteLittleInt64(base,byteOffset,data) _OSWriteInt64(base, byteOffset, data)



#define OSSwapHostToBigConstInt16(x) OSSwapConstInt16(x)
#define OSSwapHostToBigConstInt32(x) OSSwapConstInt32(x)
#define OSSwapHostToBigConstInt64(x) OSSwapConstInt64(x)



#define OSSwapHostToBigInt16(x) OSSwapInt16(x)
#define OSSwapHostToBigInt32(x) OSSwapInt32(x)
#define OSSwapHostToBigInt64(x) OSSwapInt64(x)



#define OSSwapHostToLittleConstInt16(x) (x)
#define OSSwapHostToLittleConstInt32(x) (x)
#define OSSwapHostToLittleConstInt64(x) (x)



#define OSSwapHostToLittleInt16(x) ((uint16_t)(x))
#define OSSwapHostToLittleInt32(x) ((uint32_t)(x))
#define OSSwapHostToLittleInt64(x) ((uint64_t)(x))



#define OSSwapBigToHostConstInt16(x) OSSwapConstInt16(x)
#define OSSwapBigToHostConstInt32(x) OSSwapConstInt32(x)
#define OSSwapBigToHostConstInt64(x) OSSwapConstInt64(x)



#define OSSwapBigToHostInt16(x) OSSwapInt16(x)
#define OSSwapBigToHostInt32(x) OSSwapInt32(x)
#define OSSwapBigToHostInt64(x) OSSwapInt64(x)



#define OSSwapLittleToHostConstInt16(x) (x)
#define OSSwapLittleToHostConstInt32(x) (x)
#define OSSwapLittleToHostConstInt64(x) (x)



#define OSSwapLittleToHostInt16(x) ((uint16_t)(x))
#define OSSwapLittleToHostInt32(x) ((uint32_t)(x))
#define OSSwapLittleToHostInt64(x) ((uint64_t)(x))
# 107 "/usr/include/mach/ndr.h" 2 3 4

#define __NDR_READSWAP_assign(a,rs) do { *(a) = rs(a); } while (0)

#define __NDR_READSWAP__uint16_t(a) OSReadSwapInt16((void *)a, 0)
#define __NDR_READSWAP__int16_t(a) (int16_t)OSReadSwapInt16((void *)a, 0)
#define __NDR_READSWAP__uint32_t(a) OSReadSwapInt32((void *)a, 0)
#define __NDR_READSWAP__int32_t(a) (int32_t)OSReadSwapInt32((void *)a, 0)
#define __NDR_READSWAP__uint64_t(a) OSReadSwapInt64((void *)a, 0)
#define __NDR_READSWAP__int64_t(a) (int64_t)OSReadSwapInt64((void *)a, 0)

extern "C" {

static __inline__ float __NDR_READSWAP__float(float *argp) {
 union {
  float sv;
  uint32_t ull;
 } result;
 result.ull = OSReadSwapInt32((void *)(uint32_t *)argp, 0);
 return result.sv;
}

static __inline__ double __NDR_READSWAP__double(double *argp) {
 union {
  double sv;
  uint64_t ull;
 } result;
 result.ull = OSReadSwapInt64((void *)(uint64_t *)argp, 0);
 return result.sv;
}

}

#define __NDR_convert__int_rep__int16_t__defined 
#define __NDR_convert__int_rep__int16_t(v,f) __NDR_READSWAP_assign(v, __NDR_READSWAP__int16_t)


#define __NDR_convert__int_rep__uint16_t__defined 
#define __NDR_convert__int_rep__uint16_t(v,f) __NDR_READSWAP_assign(v, __NDR_READSWAP__uint16_t)


#define __NDR_convert__int_rep__int32_t__defined 
#define __NDR_convert__int_rep__int32_t(v,f) __NDR_READSWAP_assign(v, __NDR_READSWAP__int32_t)


#define __NDR_convert__int_rep__uint32_t__defined 
#define __NDR_convert__int_rep__uint32_t(v,f) __NDR_READSWAP_assign(v, __NDR_READSWAP__uint32_t)


#define __NDR_convert__int_rep__int64_t__defined 
#define __NDR_convert__int_rep__int64_t(v,f) __NDR_READSWAP_assign(v, __NDR_READSWAP__int64_t)


#define __NDR_convert__int_rep__uint64_t__defined 
#define __NDR_convert__int_rep__uint64_t(v,f) __NDR_READSWAP_assign(v, __NDR_READSWAP__uint64_t)


#define __NDR_convert__int_rep__float__defined 
#define __NDR_convert__int_rep__float(v,f) __NDR_READSWAP_assign(v, __NDR_READSWAP__float)


#define __NDR_convert__int_rep__double__defined 
#define __NDR_convert__int_rep__double(v,f) __NDR_READSWAP_assign(v, __NDR_READSWAP__double)


#define __NDR_convert__int_rep__boolean_t__defined 
#define __NDR_convert__int_rep__boolean_t(v,f) __NDR_convert__int_rep__int32_t(v,f)


#define __NDR_convert__int_rep__kern_return_t__defined 
#define __NDR_convert__int_rep__kern_return_t(v,f) __NDR_convert__int_rep__int32_t(v,f)


#define __NDR_convert__int_rep__mach_port_name_t__defined 
#define __NDR_convert__int_rep__mach_port_name_t(v,f) __NDR_convert__int_rep__uint32_t(v,f)


#define __NDR_convert__int_rep__mach_msg_type_number_t__defined 
#define __NDR_convert__int_rep__mach_msg_type_number_t(v,f) __NDR_convert__int_rep__uint32_t(v,f)
# 8 "/usr/include/mach/clock_priv.h" 2 3 4


# 1 "/usr/include/mach/notify.h" 1 3 4
# 65 "/usr/include/mach/notify.h" 3 4
#define _MACH_NOTIFY_H_ 
# 76 "/usr/include/mach/notify.h" 3 4
#define MACH_NOTIFY_FIRST 0100
#define MACH_NOTIFY_PORT_DELETED (MACH_NOTIFY_FIRST + 001 )

#define MACH_NOTIFY_PORT_DESTROYED (MACH_NOTIFY_FIRST + 005)

#define MACH_NOTIFY_NO_SENDERS (MACH_NOTIFY_FIRST + 006)

#define MACH_NOTIFY_SEND_ONCE (MACH_NOTIFY_FIRST + 007)

#define MACH_NOTIFY_DEAD_NAME (MACH_NOTIFY_FIRST + 010)

#define MACH_NOTIFY_LAST (MACH_NOTIFY_FIRST + 015)

typedef mach_port_t notify_port_t;
# 99 "/usr/include/mach/notify.h" 3 4
typedef struct {
    mach_msg_header_t not_header;
    NDR_record_t NDR;
    mach_port_name_t not_port;
    mach_msg_format_0_trailer_t trailer;
} mach_port_deleted_notification_t;

typedef struct {
    mach_msg_header_t not_header;
    mach_msg_body_t not_body;
    mach_msg_port_descriptor_t not_port;
    mach_msg_format_0_trailer_t trailer;
} mach_port_destroyed_notification_t;

typedef struct {
    mach_msg_header_t not_header;
    NDR_record_t NDR;
    mach_msg_type_number_t not_count;
    mach_msg_format_0_trailer_t trailer;
} mach_no_senders_notification_t;

typedef struct {
    mach_msg_header_t not_header;
    mach_msg_format_0_trailer_t trailer;
} mach_send_once_notification_t;

typedef struct {
    mach_msg_header_t not_header;
    NDR_record_t NDR;
    mach_port_name_t not_port;
    mach_msg_format_0_trailer_t trailer;
} mach_dead_name_notification_t;
# 11 "/usr/include/mach/clock_priv.h" 2 3 4


# 1 "/usr/include/mach/mig_errors.h" 1 3 4
# 64 "/usr/include/mach/mig_errors.h" 3 4
#define _MACH_MIG_ERRORS_H_ 

# 1 "/usr/include/mach/mig.h" 1 3 4
# 37 "/usr/include/mach/mig.h" 3 4
#define _MACH_MIG_H_ 
# 79 "/usr/include/mach/mig.h" 3 4
#define __MigPackStructs 1






typedef void (*mig_stub_routine_t) (mach_msg_header_t *InHeadP,
           mach_msg_header_t *OutHeadP);

typedef mig_stub_routine_t mig_routine_t;






typedef mig_routine_t (*mig_server_routine_t) (mach_msg_header_t *InHeadP);






typedef kern_return_t (*mig_impl_routine_t)(void);

typedef mach_msg_type_descriptor_t routine_arg_descriptor;
typedef mach_msg_type_descriptor_t *routine_arg_descriptor_t;
typedef mach_msg_type_descriptor_t *mig_routine_arg_descriptor_t;

#define MIG_ROUTINE_ARG_DESCRIPTOR_NULL ((mig_routine_arg_descriptor_t)0)

struct routine_descriptor {
 mig_impl_routine_t impl_routine;
 mig_stub_routine_t stub_routine;
 unsigned int argc;
 unsigned int descr_count;
 routine_arg_descriptor_t
      arg_descr;
 unsigned int max_reply_msg;
};
typedef struct routine_descriptor *routine_descriptor_t;

typedef struct routine_descriptor mig_routine_descriptor;
typedef mig_routine_descriptor *mig_routine_descriptor_t;

#define MIG_ROUTINE_DESCRIPTOR_NULL ((mig_routine_descriptor_t)0)

typedef struct mig_subsystem {
 mig_server_routine_t server;
 mach_msg_id_t start;
 mach_msg_id_t end;
 mach_msg_size_t maxsize;
 vm_address_t reserved;
 mig_routine_descriptor
       routine[1];
} *mig_subsystem_t;

#define MIG_SUBSYSTEM_NULL ((mig_subsystem_t)0)

typedef struct mig_symtab {
 char *ms_routine_name;
 int ms_routine_number;
 void (*ms_routine)(void);




} mig_symtab_t;


extern "C" {


extern mach_port_t mig_get_reply_port(void);


extern void mig_dealloc_reply_port(mach_port_t reply_port);


extern void mig_put_reply_port(mach_port_t reply_port);


extern int mig_strncpy(char *dest, const char *src, int len);



extern void mig_allocate(vm_address_t *, vm_size_t);


extern void mig_deallocate(vm_address_t, vm_size_t);


}
# 67 "/usr/include/mach/mig_errors.h" 2 3 4
# 82 "/usr/include/mach/mig_errors.h" 3 4
#define MIG_TYPE_ERROR -300
#define MIG_REPLY_MISMATCH -301
#define MIG_REMOTE_ERROR -302
#define MIG_BAD_ID -303
#define MIG_BAD_ARGUMENTS -304
#define MIG_NO_REPLY -305
#define MIG_EXCEPTION -306
#define MIG_ARRAY_TOO_LARGE -307
#define MIG_SERVER_DIED -308
#define MIG_TRAILER_ERROR -309






#pragma pack(4)
typedef struct {
 mach_msg_header_t Head;
 NDR_record_t NDR;
 kern_return_t RetCode;
} mig_reply_error_t;
#pragma pack()


extern "C" {


#define __NDR_convert__mig_reply_error_t__defined 

static __inline__ void
__NDR_convert__mig_reply_error_t(__attribute__((__unused__)) mig_reply_error_t *x)
{

 if (x->NDR.int_rep != NDR_record.int_rep)
  do { *(&x->RetCode) = (int32_t)OSReadSwapInt32((void *)&x->RetCode, 0); } while (0);

}


}
# 14 "/usr/include/mach/clock_priv.h" 2 3 4
# 29 "/usr/include/mach/clock_priv.h" 3 4
#define clock_priv_MSG_COUNT 2
# 42 "/usr/include/mach/clock_priv.h" 3 4
extern "C" {






extern

kern_return_t clock_set_time
(
 clock_ctrl_t clock_ctrl,
 mach_timespec_t new_time
);





extern

kern_return_t clock_set_attributes
(
 clock_ctrl_t clock_ctrl,
 clock_flavor_t flavor,
 clock_attr_t clock_attr,
 mach_msg_type_number_t clock_attrCnt
);

}
# 87 "/usr/include/mach/clock_priv.h" 3 4
#define __Request__clock_priv_subsystem__defined 


#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_timespec_t new_time;
 } __Request__clock_set_time_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  clock_flavor_t flavor;
  mach_msg_type_number_t clock_attrCnt;
  int clock_attr[1];
 } __Request__clock_set_attributes_t;

#pragma pack()






#define __RequestUnion__clock_priv_subsystem__defined 
union __RequestUnion__clock_priv_subsystem {
 __Request__clock_set_time_t Request_clock_set_time;
 __Request__clock_set_attributes_t Request_clock_set_attributes;
};




#define __Reply__clock_priv_subsystem__defined 


#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__clock_set_time_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__clock_set_attributes_t;

#pragma pack()






#define __ReplyUnion__clock_priv_subsystem__defined 
union __ReplyUnion__clock_priv_subsystem {
 __Reply__clock_set_time_t Reply_clock_set_time;
 __Reply__clock_set_attributes_t Reply_clock_set_attributes;
};



#define subsystem_to_name_map_clock_priv { "clock_set_time", 1200 }, { "clock_set_attributes", 1201 }
# 43 "/usr/include/mach/mach_interface.h" 2 3 4
# 1 "/usr/include/mach/host_priv.h" 1 3 4

#define _host_priv_user_ 
# 29 "/usr/include/mach/host_priv.h" 3 4
#define host_priv_MSG_COUNT 25






# 1 "/usr/include/mach_debug/mach_debug_types.h" 1 3 4
# 63 "/usr/include/mach_debug/mach_debug_types.h" 3 4
#define _MACH_DEBUG_MACH_DEBUG_TYPES_H_ 

# 1 "/usr/include/mach_debug/ipc_info.h" 1 3 4
# 67 "/usr/include/mach_debug/ipc_info.h" 3 4
#define _MACH_DEBUG_IPC_INFO_H_ 
# 79 "/usr/include/mach_debug/ipc_info.h" 3 4
typedef struct ipc_info_space {
 natural_t iis_genno_mask;
 natural_t iis_table_size;
 natural_t iis_table_next;
 natural_t iis_tree_size;
 natural_t iis_tree_small;
 natural_t iis_tree_hash;
} ipc_info_space_t;


typedef struct ipc_info_name {
 mach_port_name_t iin_name;
             integer_t iin_collision;
 mach_port_type_t iin_type;
 mach_port_urefs_t iin_urefs;
 natural_t iin_object;
 natural_t iin_next;
 natural_t iin_hash;
} ipc_info_name_t;

typedef ipc_info_name_t *ipc_info_name_array_t;


typedef struct ipc_info_tree_name {
 ipc_info_name_t iitn_name;
 mach_port_name_t iitn_lchild;
 mach_port_name_t iitn_rchild;
} ipc_info_tree_name_t;

typedef ipc_info_tree_name_t *ipc_info_tree_name_array_t;
# 66 "/usr/include/mach_debug/mach_debug_types.h" 2 3 4
# 1 "/usr/include/mach_debug/vm_info.h" 1 3 4
# 65 "/usr/include/mach_debug/vm_info.h" 3 4
#define _MACH_DEBUG_VM_INFO_H_ 







#pragma pack(4)





typedef struct mach_vm_info_region {
 mach_vm_offset_t vir_start;
 mach_vm_offset_t vir_end;
 mach_vm_offset_t vir_object;
 memory_object_offset_t vir_offset;
 boolean_t vir_needs_copy;
 vm_prot_t vir_protection;
 vm_prot_t vir_max_protection;
 vm_inherit_t vir_inheritance;
 natural_t vir_wired_count;
 natural_t vir_user_wired_count;
} mach_vm_info_region_t;

typedef struct vm_info_region_64 {
 natural_t vir_start;
 natural_t vir_end;
 natural_t vir_object;
 memory_object_offset_t vir_offset;
 boolean_t vir_needs_copy;
 vm_prot_t vir_protection;
 vm_prot_t vir_max_protection;
 vm_inherit_t vir_inheritance;
 natural_t vir_wired_count;
 natural_t vir_user_wired_count;
} vm_info_region_64_t;

typedef struct vm_info_region {
 natural_t vir_start;
 natural_t vir_end;
 natural_t vir_object;
 natural_t vir_offset;
 boolean_t vir_needs_copy;
 vm_prot_t vir_protection;
 vm_prot_t vir_max_protection;
 vm_inherit_t vir_inheritance;
 natural_t vir_wired_count;
 natural_t vir_user_wired_count;
} vm_info_region_t;


typedef struct vm_info_object {
 natural_t vio_object;
 natural_t vio_size;
 unsigned int vio_ref_count;
 unsigned int vio_resident_page_count;
 unsigned int vio_absent_count;
 natural_t vio_copy;
 natural_t vio_shadow;
 natural_t vio_shadow_offset;
 natural_t vio_paging_offset;
 memory_object_copy_strategy_t vio_copy_strategy;

 vm_offset_t vio_last_alloc;

 unsigned int vio_paging_in_progress;
 boolean_t vio_pager_created;
 boolean_t vio_pager_initialized;
 boolean_t vio_pager_ready;
 boolean_t vio_can_persist;
 boolean_t vio_internal;
 boolean_t vio_temporary;
 boolean_t vio_alive;
 boolean_t vio_purgable;
 boolean_t vio_purgable_volatile;
} vm_info_object_t;

typedef vm_info_object_t *vm_info_object_array_t;

#pragma pack()
# 67 "/usr/include/mach_debug/mach_debug_types.h" 2 3 4
# 1 "/usr/include/mach_debug/zone_info.h" 1 3 4
# 60 "/usr/include/mach_debug/zone_info.h" 3 4
#define _MACH_DEBUG_ZONE_INFO_H_ 
# 70 "/usr/include/mach_debug/zone_info.h" 3 4
#define ZONE_NAME_MAX_LEN 80

typedef struct zone_name {
 char zn_name[80];
} zone_name_t;

typedef zone_name_t *zone_name_array_t;


typedef struct zone_info {
 integer_t zi_count;
 natural_t zi_cur_size;
 natural_t zi_max_size;
 natural_t zi_elem_size;
 natural_t zi_alloc_size;
 integer_t zi_pageable;
 integer_t zi_sleepable;
 integer_t zi_exhaustible;
 integer_t zi_collectable;
} zone_info_t;

typedef zone_info_t *zone_info_array_t;
# 68 "/usr/include/mach_debug/mach_debug_types.h" 2 3 4
# 1 "/usr/include/mach_debug/page_info.h" 1 3 4
# 59 "/usr/include/mach_debug/page_info.h" 3 4
#define MACH_DEBUG_PAGE_INFO_H 



typedef vm_offset_t *page_address_array_t;
# 69 "/usr/include/mach_debug/mach_debug_types.h" 2 3 4
# 1 "/usr/include/mach_debug/hash_info.h" 1 3 4
# 60 "/usr/include/mach_debug/hash_info.h" 3 4
#define _MACH_DEBUG_HASH_INFO_H_ 






typedef struct hash_info_bucket {
 natural_t hib_count;
} hash_info_bucket_t;

typedef hash_info_bucket_t *hash_info_bucket_array_t;
# 70 "/usr/include/mach_debug/mach_debug_types.h" 2 3 4
# 1 "/usr/include/mach_debug/lockgroup_info.h" 1 3 4
# 35 "/usr/include/mach_debug/lockgroup_info.h" 3 4
#define _MACH_DEBUG_LOCKGROUP_INFO_H_ 



#define LOCKGROUP_MAX_NAME 64

#define LOCKGROUP_ATTR_STAT 0x01ULL

typedef struct lockgroup_info {
 char lockgroup_name[64];
 uint64_t lockgroup_attr;
 uint64_t lock_spin_cnt;
 uint64_t lock_spin_util_cnt;
 uint64_t lock_spin_held_cnt;
 uint64_t lock_spin_miss_cnt;
 uint64_t lock_spin_held_max;
 uint64_t lock_spin_held_cum;
 uint64_t lock_mtx_cnt;
 uint64_t lock_mtx_util_cnt;
 uint64_t lock_mtx_held_cnt;
 uint64_t lock_mtx_miss_cnt;
 uint64_t lock_mtx_wait_cnt;
 uint64_t lock_mtx_held_max;
 uint64_t lock_mtx_held_cum;
 uint64_t lock_mtx_wait_max;
 uint64_t lock_mtx_wait_cum;
 uint64_t lock_rw_cnt;
 uint64_t lock_rw_util_cnt;
 uint64_t lock_rw_held_cnt;
 uint64_t lock_rw_miss_cnt;
 uint64_t lock_rw_wait_cnt;
 uint64_t lock_rw_held_max;
 uint64_t lock_rw_held_cum;
 uint64_t lock_rw_wait_max;
 uint64_t lock_rw_wait_cum;
} lockgroup_info_t;

typedef lockgroup_info_t *lockgroup_info_array_t;
# 71 "/usr/include/mach_debug/mach_debug_types.h" 2 3 4

typedef char symtab_name_t[32];
# 37 "/usr/include/mach/host_priv.h" 2 3 4






extern "C" {






extern

kern_return_t host_get_boot_info
(
 host_priv_t host_priv,
 kernel_boot_info_t boot_info
);





extern

kern_return_t host_reboot
(
 host_priv_t host_priv,
 int options
);





extern

kern_return_t host_priv_statistics
(
 host_priv_t host_priv,
 host_flavor_t flavor,
 host_info_t host_info_out,
 mach_msg_type_number_t *host_info_outCnt
);





extern

kern_return_t host_default_memory_manager
(
 host_priv_t host_priv,
 memory_object_default_t *default_manager,
 vm_size_t cluster_size
);





extern

kern_return_t vm_wire
(
 host_priv_t host_priv,
 vm_map_t task,
 vm_address_t address,
 vm_size_t size,
 vm_prot_t desired_access
);





extern

kern_return_t thread_wire
(
 host_priv_t host_priv,
 thread_act_t thread,
 boolean_t wired
);





extern

kern_return_t vm_allocate_cpm
(
 host_priv_t host_priv,
 vm_map_t task,
 vm_address_t *address,
 vm_size_t size,
 boolean_t anywhere
);





extern

kern_return_t host_processors
(
 host_priv_t host_priv,
 processor_array_t *out_processor_list,
 mach_msg_type_number_t *out_processor_listCnt
);





extern

kern_return_t host_get_clock_control
(
 host_priv_t host_priv,
 clock_id_t clock_id,
 clock_ctrl_t *clock_ctrl
);





extern

kern_return_t kmod_create
(
 host_priv_t host_priv,
 vm_address_t info,
 kmod_t *module
);





extern

kern_return_t kmod_destroy
(
 host_priv_t host_priv,
 kmod_t module
);





extern

kern_return_t kmod_control
(
 host_priv_t host_priv,
 kmod_t module,
 kmod_control_flavor_t flavor,
 kmod_args_t *data,
 mach_msg_type_number_t *dataCnt
);





extern

kern_return_t host_get_special_port
(
 host_priv_t host_priv,
 int node,
 int which,
 mach_port_t *port
);





extern

kern_return_t host_set_special_port
(
 host_priv_t host_priv,
 int which,
 mach_port_t port
);





extern

kern_return_t host_set_exception_ports
(
 host_priv_t host_priv,
 exception_mask_t exception_mask,
 mach_port_t new_port,
 exception_behavior_t behavior,
 thread_state_flavor_t new_flavor
);





extern

kern_return_t host_get_exception_ports
(
 host_priv_t host_priv,
 exception_mask_t exception_mask,
 exception_mask_array_t masks,
 mach_msg_type_number_t *masksCnt,
 exception_handler_array_t old_handlers,
 exception_behavior_array_t old_behaviors,
 exception_flavor_array_t old_flavors
);





extern

kern_return_t host_swap_exception_ports
(
 host_priv_t host_priv,
 exception_mask_t exception_mask,
 mach_port_t new_port,
 exception_behavior_t behavior,
 thread_state_flavor_t new_flavor,
 exception_mask_array_t masks,
 mach_msg_type_number_t *masksCnt,
 exception_handler_array_t old_handlerss,
 exception_behavior_array_t old_behaviors,
 exception_flavor_array_t old_flavors
);





extern

kern_return_t host_load_symbol_table
(
 host_priv_t host,
 task_t task,
 symtab_name_t name,
 vm_offset_t symtab,
 mach_msg_type_number_t symtabCnt
);





extern

kern_return_t mach_vm_wire
(
 host_priv_t host_priv,
 vm_map_t task,
 mach_vm_address_t address,
 mach_vm_size_t size,
 vm_prot_t desired_access
);





extern

kern_return_t host_processor_sets
(
 host_priv_t host_priv,
 processor_set_name_array_t *processor_sets,
 mach_msg_type_number_t *processor_setsCnt
);





extern

kern_return_t host_processor_set_priv
(
 host_priv_t host_priv,
 processor_set_name_t set_name,
 processor_set_t *set
);





extern

kern_return_t set_dp_control_port
(
 host_priv_t host,
 mach_port_t control_port
);





extern

kern_return_t get_dp_control_port
(
 host_priv_t host,
 mach_port_t *contorl_port
);





extern

kern_return_t host_set_UNDServer
(
 host_priv_t host,
 UNDServerRef server
);





extern

kern_return_t host_get_UNDServer
(
 host_priv_t host,
 UNDServerRef *server
);

}
# 405 "/usr/include/mach/host_priv.h" 3 4
#define __Request__host_priv_subsystem__defined 


#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__host_get_boot_info_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  int options;
 } __Request__host_reboot_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  host_flavor_t flavor;
  mach_msg_type_number_t host_info_outCnt;
 } __Request__host_priv_statistics_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t default_manager;

  NDR_record_t NDR;
  vm_size_t cluster_size;
 } __Request__host_default_memory_manager_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t task;

  NDR_record_t NDR;
  vm_address_t address;
  vm_size_t size;
  vm_prot_t desired_access;
 } __Request__vm_wire_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t thread;

  NDR_record_t NDR;
  boolean_t wired;
 } __Request__thread_wire_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t task;

  NDR_record_t NDR;
  vm_address_t address;
  vm_size_t size;
  boolean_t anywhere;
 } __Request__vm_allocate_cpm_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__host_processors_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  clock_id_t clock_id;
 } __Request__host_get_clock_control_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  vm_address_t info;
 } __Request__kmod_create_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kmod_t module;
 } __Request__kmod_destroy_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_ool_descriptor_t data;

  NDR_record_t NDR;
  kmod_t module;
  kmod_control_flavor_t flavor;
  mach_msg_type_number_t dataCnt;
 } __Request__kmod_control_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  int node;
  int which;
 } __Request__host_get_special_port_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t port;

  NDR_record_t NDR;
  int which;
 } __Request__host_set_special_port_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t new_port;

  NDR_record_t NDR;
  exception_mask_t exception_mask;
  exception_behavior_t behavior;
  thread_state_flavor_t new_flavor;
 } __Request__host_set_exception_ports_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  exception_mask_t exception_mask;
 } __Request__host_get_exception_ports_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t new_port;

  NDR_record_t NDR;
  exception_mask_t exception_mask;
  exception_behavior_t behavior;
  thread_state_flavor_t new_flavor;
 } __Request__host_swap_exception_ports_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t task;
  mach_msg_ool_descriptor_t symtab;

  NDR_record_t NDR;
  mach_msg_type_number_t nameOffset;
  mach_msg_type_number_t nameCnt;
  char name[32];
  mach_msg_type_number_t symtabCnt;
 } __Request__host_load_symbol_table_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t task;

  NDR_record_t NDR;
  mach_vm_address_t address;
  mach_vm_size_t size;
  vm_prot_t desired_access;
 } __Request__mach_vm_wire_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__host_processor_sets_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t set_name;

 } __Request__host_processor_set_priv_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t control_port;

 } __Request__set_dp_control_port_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__get_dp_control_port_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t server;

 } __Request__host_set_UNDServer_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__host_get_UNDServer_t;

#pragma pack()






#define __RequestUnion__host_priv_subsystem__defined 
union __RequestUnion__host_priv_subsystem {
 __Request__host_get_boot_info_t Request_host_get_boot_info;
 __Request__host_reboot_t Request_host_reboot;
 __Request__host_priv_statistics_t Request_host_priv_statistics;
 __Request__host_default_memory_manager_t Request_host_default_memory_manager;
 __Request__vm_wire_t Request_vm_wire;
 __Request__thread_wire_t Request_thread_wire;
 __Request__vm_allocate_cpm_t Request_vm_allocate_cpm;
 __Request__host_processors_t Request_host_processors;
 __Request__host_get_clock_control_t Request_host_get_clock_control;
 __Request__kmod_create_t Request_kmod_create;
 __Request__kmod_destroy_t Request_kmod_destroy;
 __Request__kmod_control_t Request_kmod_control;
 __Request__host_get_special_port_t Request_host_get_special_port;
 __Request__host_set_special_port_t Request_host_set_special_port;
 __Request__host_set_exception_ports_t Request_host_set_exception_ports;
 __Request__host_get_exception_ports_t Request_host_get_exception_ports;
 __Request__host_swap_exception_ports_t Request_host_swap_exception_ports;
 __Request__host_load_symbol_table_t Request_host_load_symbol_table;
 __Request__mach_vm_wire_t Request_mach_vm_wire;
 __Request__host_processor_sets_t Request_host_processor_sets;
 __Request__host_processor_set_priv_t Request_host_processor_set_priv;
 __Request__set_dp_control_port_t Request_set_dp_control_port;
 __Request__get_dp_control_port_t Request_get_dp_control_port;
 __Request__host_set_UNDServer_t Request_host_set_UNDServer;
 __Request__host_get_UNDServer_t Request_host_get_UNDServer;
};




#define __Reply__host_priv_subsystem__defined 


#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_msg_type_number_t boot_infoOffset;
  mach_msg_type_number_t boot_infoCnt;
  char boot_info[4096];
 } __Reply__host_get_boot_info_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__host_reboot_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_msg_type_number_t host_info_outCnt;
  integer_t host_info_out[15];
 } __Reply__host_priv_statistics_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t default_manager;

 } __Reply__host_default_memory_manager_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__vm_wire_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__thread_wire_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  vm_address_t address;
 } __Reply__vm_allocate_cpm_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_ool_ports_descriptor_t out_processor_list;

  NDR_record_t NDR;
  mach_msg_type_number_t out_processor_listCnt;
 } __Reply__host_processors_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t clock_ctrl;

 } __Reply__host_get_clock_control_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  kmod_t module;
 } __Reply__kmod_create_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__kmod_destroy_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_ool_descriptor_t data;

  NDR_record_t NDR;
  mach_msg_type_number_t dataCnt;
 } __Reply__kmod_control_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t port;

 } __Reply__host_get_special_port_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__host_set_special_port_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__host_set_exception_ports_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t old_handlers[32];

  NDR_record_t NDR;
  mach_msg_type_number_t masksCnt;
  exception_mask_t masks[32];
  exception_behavior_t old_behaviors[32];
  thread_state_flavor_t old_flavors[32];
 } __Reply__host_get_exception_ports_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t old_handlerss[32];

  NDR_record_t NDR;
  mach_msg_type_number_t masksCnt;
  exception_mask_t masks[32];
  exception_behavior_t old_behaviors[32];
  thread_state_flavor_t old_flavors[32];
 } __Reply__host_swap_exception_ports_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__host_load_symbol_table_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__mach_vm_wire_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_ool_ports_descriptor_t processor_sets;

  NDR_record_t NDR;
  mach_msg_type_number_t processor_setsCnt;
 } __Reply__host_processor_sets_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t set;

 } __Reply__host_processor_set_priv_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__set_dp_control_port_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t contorl_port;

 } __Reply__get_dp_control_port_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__host_set_UNDServer_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t server;

 } __Reply__host_get_UNDServer_t;

#pragma pack()






#define __ReplyUnion__host_priv_subsystem__defined 
union __ReplyUnion__host_priv_subsystem {
 __Reply__host_get_boot_info_t Reply_host_get_boot_info;
 __Reply__host_reboot_t Reply_host_reboot;
 __Reply__host_priv_statistics_t Reply_host_priv_statistics;
 __Reply__host_default_memory_manager_t Reply_host_default_memory_manager;
 __Reply__vm_wire_t Reply_vm_wire;
 __Reply__thread_wire_t Reply_thread_wire;
 __Reply__vm_allocate_cpm_t Reply_vm_allocate_cpm;
 __Reply__host_processors_t Reply_host_processors;
 __Reply__host_get_clock_control_t Reply_host_get_clock_control;
 __Reply__kmod_create_t Reply_kmod_create;
 __Reply__kmod_destroy_t Reply_kmod_destroy;
 __Reply__kmod_control_t Reply_kmod_control;
 __Reply__host_get_special_port_t Reply_host_get_special_port;
 __Reply__host_set_special_port_t Reply_host_set_special_port;
 __Reply__host_set_exception_ports_t Reply_host_set_exception_ports;
 __Reply__host_get_exception_ports_t Reply_host_get_exception_ports;
 __Reply__host_swap_exception_ports_t Reply_host_swap_exception_ports;
 __Reply__host_load_symbol_table_t Reply_host_load_symbol_table;
 __Reply__mach_vm_wire_t Reply_mach_vm_wire;
 __Reply__host_processor_sets_t Reply_host_processor_sets;
 __Reply__host_processor_set_priv_t Reply_host_processor_set_priv;
 __Reply__set_dp_control_port_t Reply_set_dp_control_port;
 __Reply__get_dp_control_port_t Reply_get_dp_control_port;
 __Reply__host_set_UNDServer_t Reply_host_set_UNDServer;
 __Reply__host_get_UNDServer_t Reply_host_get_UNDServer;
};



#define subsystem_to_name_map_host_priv { "host_get_boot_info", 400 }, { "host_reboot", 401 }, { "host_priv_statistics", 402 }, { "host_default_memory_manager", 403 }, { "vm_wire", 404 }, { "thread_wire", 405 }, { "vm_allocate_cpm", 406 }, { "host_processors", 407 }, { "host_get_clock_control", 408 }, { "kmod_create", 409 }, { "kmod_destroy", 410 }, { "kmod_control", 411 }, { "host_get_special_port", 412 }, { "host_set_special_port", 413 }, { "host_set_exception_ports", 414 }, { "host_get_exception_ports", 415 }, { "host_swap_exception_ports", 416 }, { "host_load_symbol_table", 417 }, { "mach_vm_wire", 418 }, { "host_processor_sets", 419 }, { "host_processor_set_priv", 420 }, { "set_dp_control_port", 421 }, { "get_dp_control_port", 422 }, { "host_set_UNDServer", 423 }, { "host_get_UNDServer", 424 }
# 44 "/usr/include/mach/mach_interface.h" 2 3 4
# 1 "/usr/include/mach/host_security.h" 1 3 4

#define _host_security_user_ 
# 29 "/usr/include/mach/host_security.h" 3 4
#define host_security_MSG_COUNT 2
# 41 "/usr/include/mach/host_security.h" 3 4
extern "C" {






extern

kern_return_t host_security_create_task_token
(
 host_security_t host_security,
 task_t parent_task,
 security_token_t sec_token,
 audit_token_t audit_token,
 host_t host,
 ledger_array_t ledgers,
 mach_msg_type_number_t ledgersCnt,
 boolean_t inherit_memory,
 task_t *child_task
);





extern

kern_return_t host_security_set_task_token
(
 host_security_t host_security,
 task_t target_task,
 security_token_t sec_token,
 audit_token_t audit_token,
 host_t host
);

}
# 94 "/usr/include/mach/host_security.h" 3 4
#define __Request__host_security_subsystem__defined 


#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t parent_task;
  mach_msg_port_descriptor_t host;
  mach_msg_ool_ports_descriptor_t ledgers;

  NDR_record_t NDR;
  security_token_t sec_token;
  audit_token_t audit_token;
  mach_msg_type_number_t ledgersCnt;
  boolean_t inherit_memory;
 } __Request__host_security_create_task_token_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t target_task;
  mach_msg_port_descriptor_t host;

  NDR_record_t NDR;
  security_token_t sec_token;
  audit_token_t audit_token;
 } __Request__host_security_set_task_token_t;

#pragma pack()






#define __RequestUnion__host_security_subsystem__defined 
union __RequestUnion__host_security_subsystem {
 __Request__host_security_create_task_token_t Request_host_security_create_task_token;
 __Request__host_security_set_task_token_t Request_host_security_set_task_token;
};




#define __Reply__host_security_subsystem__defined 


#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t child_task;

 } __Reply__host_security_create_task_token_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__host_security_set_task_token_t;

#pragma pack()






#define __ReplyUnion__host_security_subsystem__defined 
union __ReplyUnion__host_security_subsystem {
 __Reply__host_security_create_task_token_t Reply_host_security_create_task_token;
 __Reply__host_security_set_task_token_t Reply_host_security_set_task_token;
};



#define subsystem_to_name_map_host_security { "host_security_create_task_token", 600 }, { "host_security_set_task_token", 601 }
# 45 "/usr/include/mach/mach_interface.h" 2 3 4
# 1 "/usr/include/mach/ledger.h" 1 3 4

#define _ledger_user_ 
# 29 "/usr/include/mach/ledger.h" 3 4
#define ledger_MSG_COUNT 4
# 41 "/usr/include/mach/ledger.h" 3 4
extern "C" {






extern

kern_return_t ledger_create
(
 ledger_t parent_ledger,
 ledger_t ledger_ledger,
 ledger_t *new_ledger,
 ledger_item_t transfer
);





extern

kern_return_t ledger_terminate
(
 ledger_t ledger
);





extern

kern_return_t ledger_transfer
(
 ledger_t parent_ledger,
 ledger_t child_ledger,
 ledger_item_t transfer
);





extern

kern_return_t ledger_read
(
 ledger_t ledger,
 ledger_item_t *balance,
 ledger_item_t *limit
);

}
# 111 "/usr/include/mach/ledger.h" 3 4
#define __Request__ledger_subsystem__defined 


#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t ledger_ledger;

  NDR_record_t NDR;
  ledger_item_t transfer;
 } __Request__ledger_create_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__ledger_terminate_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t child_ledger;

  NDR_record_t NDR;
  ledger_item_t transfer;
 } __Request__ledger_transfer_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__ledger_read_t;

#pragma pack()






#define __RequestUnion__ledger_subsystem__defined 
union __RequestUnion__ledger_subsystem {
 __Request__ledger_create_t Request_ledger_create;
 __Request__ledger_terminate_t Request_ledger_terminate;
 __Request__ledger_transfer_t Request_ledger_transfer;
 __Request__ledger_read_t Request_ledger_read;
};




#define __Reply__ledger_subsystem__defined 


#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t new_ledger;

 } __Reply__ledger_create_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__ledger_terminate_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__ledger_transfer_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  ledger_item_t balance;
  ledger_item_t limit;
 } __Reply__ledger_read_t;

#pragma pack()






#define __ReplyUnion__ledger_subsystem__defined 
union __ReplyUnion__ledger_subsystem {
 __Reply__ledger_create_t Reply_ledger_create;
 __Reply__ledger_terminate_t Reply_ledger_terminate;
 __Reply__ledger_transfer_t Reply_ledger_transfer;
 __Reply__ledger_read_t Reply_ledger_read;
};



#define subsystem_to_name_map_ledger { "ledger_create", 5000 }, { "ledger_terminate", 5001 }, { "ledger_transfer", 5002 }, { "ledger_read", 5003 }
# 46 "/usr/include/mach/mach_interface.h" 2 3 4
# 1 "/usr/include/mach/lock_set.h" 1 3 4

#define _lock_set_user_ 
# 29 "/usr/include/mach/lock_set.h" 3 4
#define lock_set_MSG_COUNT 6
# 41 "/usr/include/mach/lock_set.h" 3 4
extern "C" {






extern

kern_return_t lock_acquire
(
 lock_set_t lock_set,
 int lock_id
);





extern

kern_return_t lock_release
(
 lock_set_t lock_set,
 int lock_id
);





extern

kern_return_t lock_try
(
 lock_set_t lock_set,
 int lock_id
);





extern

kern_return_t lock_make_stable
(
 lock_set_t lock_set,
 int lock_id
);





extern

kern_return_t lock_handoff
(
 lock_set_t lock_set,
 int lock_id
);





extern

kern_return_t lock_handoff_accept
(
 lock_set_t lock_set,
 int lock_id
);

}
# 132 "/usr/include/mach/lock_set.h" 3 4
#define __Request__lock_set_subsystem__defined 


#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  int lock_id;
 } __Request__lock_acquire_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  int lock_id;
 } __Request__lock_release_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  int lock_id;
 } __Request__lock_try_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  int lock_id;
 } __Request__lock_make_stable_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  int lock_id;
 } __Request__lock_handoff_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  int lock_id;
 } __Request__lock_handoff_accept_t;

#pragma pack()






#define __RequestUnion__lock_set_subsystem__defined 
union __RequestUnion__lock_set_subsystem {
 __Request__lock_acquire_t Request_lock_acquire;
 __Request__lock_release_t Request_lock_release;
 __Request__lock_try_t Request_lock_try;
 __Request__lock_make_stable_t Request_lock_make_stable;
 __Request__lock_handoff_t Request_lock_handoff;
 __Request__lock_handoff_accept_t Request_lock_handoff_accept;
};




#define __Reply__lock_set_subsystem__defined 


#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__lock_acquire_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__lock_release_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__lock_try_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__lock_make_stable_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__lock_handoff_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__lock_handoff_accept_t;

#pragma pack()






#define __ReplyUnion__lock_set_subsystem__defined 
union __ReplyUnion__lock_set_subsystem {
 __Reply__lock_acquire_t Reply_lock_acquire;
 __Reply__lock_release_t Reply_lock_release;
 __Reply__lock_try_t Reply_lock_try;
 __Reply__lock_make_stable_t Reply_lock_make_stable;
 __Reply__lock_handoff_t Reply_lock_handoff;
 __Reply__lock_handoff_accept_t Reply_lock_handoff_accept;
};



#define subsystem_to_name_map_lock_set { "lock_acquire", 617000 }, { "lock_release", 617001 }, { "lock_try", 617002 }, { "lock_make_stable", 617003 }, { "lock_handoff", 617004 }, { "lock_handoff_accept", 617005 }
# 47 "/usr/include/mach/mach_interface.h" 2 3 4
# 1 "/usr/include/mach/processor.h" 1 3 4

#define _processor_user_ 
# 29 "/usr/include/mach/processor.h" 3 4
#define processor_MSG_COUNT 6
# 41 "/usr/include/mach/processor.h" 3 4
extern "C" {






extern

kern_return_t processor_start
(
 processor_t processor
);





extern

kern_return_t processor_exit
(
 processor_t processor
);





extern

kern_return_t processor_info
(
 processor_t processor,
 processor_flavor_t flavor,
 host_t *host,
 processor_info_t processor_info_out,
 mach_msg_type_number_t *processor_info_outCnt
);





extern

kern_return_t processor_control
(
 processor_t processor,
 processor_info_t processor_cmd,
 mach_msg_type_number_t processor_cmdCnt
);





extern

kern_return_t processor_assign
(
 processor_t processor,
 processor_set_t new_set,
 boolean_t wait
);





extern

kern_return_t processor_get_assignment
(
 processor_t processor,
 processor_set_name_t *assigned_set
);

}
# 135 "/usr/include/mach/processor.h" 3 4
#define __Request__processor_subsystem__defined 


#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__processor_start_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__processor_exit_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  processor_flavor_t flavor;
  mach_msg_type_number_t processor_info_outCnt;
 } __Request__processor_info_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_msg_type_number_t processor_cmdCnt;
  integer_t processor_cmd[12];
 } __Request__processor_control_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t new_set;

  NDR_record_t NDR;
  boolean_t wait;
 } __Request__processor_assign_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__processor_get_assignment_t;

#pragma pack()






#define __RequestUnion__processor_subsystem__defined 
union __RequestUnion__processor_subsystem {
 __Request__processor_start_t Request_processor_start;
 __Request__processor_exit_t Request_processor_exit;
 __Request__processor_info_t Request_processor_info;
 __Request__processor_control_t Request_processor_control;
 __Request__processor_assign_t Request_processor_assign;
 __Request__processor_get_assignment_t Request_processor_get_assignment;
};




#define __Reply__processor_subsystem__defined 


#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__processor_start_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__processor_exit_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t host;

  NDR_record_t NDR;
  mach_msg_type_number_t processor_info_outCnt;
  integer_t processor_info_out[12];
 } __Reply__processor_info_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__processor_control_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__processor_assign_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t assigned_set;

 } __Reply__processor_get_assignment_t;

#pragma pack()






#define __ReplyUnion__processor_subsystem__defined 
union __ReplyUnion__processor_subsystem {
 __Reply__processor_start_t Reply_processor_start;
 __Reply__processor_exit_t Reply_processor_exit;
 __Reply__processor_info_t Reply_processor_info;
 __Reply__processor_control_t Reply_processor_control;
 __Reply__processor_assign_t Reply_processor_assign;
 __Reply__processor_get_assignment_t Reply_processor_get_assignment;
};



#define subsystem_to_name_map_processor { "processor_start", 3000 }, { "processor_exit", 3001 }, { "processor_info", 3002 }, { "processor_control", 3003 }, { "processor_assign", 3004 }, { "processor_get_assignment", 3005 }
# 48 "/usr/include/mach/mach_interface.h" 2 3 4
# 1 "/usr/include/mach/processor_set.h" 1 3 4

#define _processor_set_user_ 
# 29 "/usr/include/mach/processor_set.h" 3 4
#define processor_set_MSG_COUNT 10
# 41 "/usr/include/mach/processor_set.h" 3 4
extern "C" {






extern

kern_return_t processor_set_statistics
(
 processor_set_name_t pset,
 processor_set_flavor_t flavor,
 processor_set_info_t info_out,
 mach_msg_type_number_t *info_outCnt
);





extern

kern_return_t processor_set_destroy
(
 processor_set_t set
);





extern

kern_return_t processor_set_max_priority
(
 processor_set_t processor_set,
 int max_priority,
 boolean_t change_threads
);





extern

kern_return_t processor_set_policy_enable
(
 processor_set_t processor_set,
 int policy
);





extern

kern_return_t processor_set_policy_disable
(
 processor_set_t processor_set,
 int policy,
 boolean_t change_threads
);





extern

kern_return_t processor_set_tasks
(
 processor_set_t processor_set,
 task_array_t *task_list,
 mach_msg_type_number_t *task_listCnt
);





extern

kern_return_t processor_set_threads
(
 processor_set_t processor_set,
 thread_act_array_t *thread_list,
 mach_msg_type_number_t *thread_listCnt
);





extern

kern_return_t processor_set_policy_control
(
 processor_set_t pset,
 processor_set_flavor_t flavor,
 processor_set_info_t policy_info,
 mach_msg_type_number_t policy_infoCnt,
 boolean_t change
);





extern

kern_return_t processor_set_stack_usage
(
 processor_set_t pset,
 unsigned *ltotal,
 vm_size_t *space,
 vm_size_t *resident,
 vm_size_t *maxusage,
 vm_offset_t *maxstack
);





extern

kern_return_t processor_set_info
(
 processor_set_name_t set_name,
 int flavor,
 host_t *host,
 processor_set_info_t info_out,
 mach_msg_type_number_t *info_outCnt
);

}
# 195 "/usr/include/mach/processor_set.h" 3 4
#define __Request__processor_set_subsystem__defined 


#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  processor_set_flavor_t flavor;
  mach_msg_type_number_t info_outCnt;
 } __Request__processor_set_statistics_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__processor_set_destroy_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  int max_priority;
  boolean_t change_threads;
 } __Request__processor_set_max_priority_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  int policy;
 } __Request__processor_set_policy_enable_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  int policy;
  boolean_t change_threads;
 } __Request__processor_set_policy_disable_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__processor_set_tasks_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__processor_set_threads_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  processor_set_flavor_t flavor;
  mach_msg_type_number_t policy_infoCnt;
  integer_t policy_info[5];
  boolean_t change;
 } __Request__processor_set_policy_control_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__processor_set_stack_usage_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  int flavor;
  mach_msg_type_number_t info_outCnt;
 } __Request__processor_set_info_t;

#pragma pack()






#define __RequestUnion__processor_set_subsystem__defined 
union __RequestUnion__processor_set_subsystem {
 __Request__processor_set_statistics_t Request_processor_set_statistics;
 __Request__processor_set_destroy_t Request_processor_set_destroy;
 __Request__processor_set_max_priority_t Request_processor_set_max_priority;
 __Request__processor_set_policy_enable_t Request_processor_set_policy_enable;
 __Request__processor_set_policy_disable_t Request_processor_set_policy_disable;
 __Request__processor_set_tasks_t Request_processor_set_tasks;
 __Request__processor_set_threads_t Request_processor_set_threads;
 __Request__processor_set_policy_control_t Request_processor_set_policy_control;
 __Request__processor_set_stack_usage_t Request_processor_set_stack_usage;
 __Request__processor_set_info_t Request_processor_set_info;
};




#define __Reply__processor_set_subsystem__defined 


#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_msg_type_number_t info_outCnt;
  integer_t info_out[5];
 } __Reply__processor_set_statistics_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__processor_set_destroy_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__processor_set_max_priority_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__processor_set_policy_enable_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__processor_set_policy_disable_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_ool_ports_descriptor_t task_list;

  NDR_record_t NDR;
  mach_msg_type_number_t task_listCnt;
 } __Reply__processor_set_tasks_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_ool_ports_descriptor_t thread_list;

  NDR_record_t NDR;
  mach_msg_type_number_t thread_listCnt;
 } __Reply__processor_set_threads_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__processor_set_policy_control_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  unsigned ltotal;
  vm_size_t space;
  vm_size_t resident;
  vm_size_t maxusage;
  vm_offset_t maxstack;
 } __Reply__processor_set_stack_usage_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t host;

  NDR_record_t NDR;
  mach_msg_type_number_t info_outCnt;
  integer_t info_out[5];
 } __Reply__processor_set_info_t;

#pragma pack()






#define __ReplyUnion__processor_set_subsystem__defined 
union __ReplyUnion__processor_set_subsystem {
 __Reply__processor_set_statistics_t Reply_processor_set_statistics;
 __Reply__processor_set_destroy_t Reply_processor_set_destroy;
 __Reply__processor_set_max_priority_t Reply_processor_set_max_priority;
 __Reply__processor_set_policy_enable_t Reply_processor_set_policy_enable;
 __Reply__processor_set_policy_disable_t Reply_processor_set_policy_disable;
 __Reply__processor_set_tasks_t Reply_processor_set_tasks;
 __Reply__processor_set_threads_t Reply_processor_set_threads;
 __Reply__processor_set_policy_control_t Reply_processor_set_policy_control;
 __Reply__processor_set_stack_usage_t Reply_processor_set_stack_usage;
 __Reply__processor_set_info_t Reply_processor_set_info;
};



#define subsystem_to_name_map_processor_set { "processor_set_statistics", 4000 }, { "processor_set_destroy", 4001 }, { "processor_set_max_priority", 4002 }, { "processor_set_policy_enable", 4003 }, { "processor_set_policy_disable", 4004 }, { "processor_set_tasks", 4005 }, { "processor_set_threads", 4006 }, { "processor_set_policy_control", 4007 }, { "processor_set_stack_usage", 4008 }, { "processor_set_info", 4009 }
# 49 "/usr/include/mach/mach_interface.h" 2 3 4
# 1 "/usr/include/mach/semaphore.h" 1 3 4
# 30 "/usr/include/mach/semaphore.h" 3 4
#define _MACH_SEMAPHORE_H_ 




# 1 "/usr/include/mach/sync_policy.h" 1 3 4
# 33 "/usr/include/mach/sync_policy.h" 3 4
#define _MACH_SYNC_POLICY_H_ 

typedef int sync_policy_t;




#define SYNC_POLICY_FIFO 0x0
#define SYNC_POLICY_FIXED_PRIORITY 0x1
#define SYNC_POLICY_REVERSED 0x2
#define SYNC_POLICY_ORDER_MASK 0x3
#define SYNC_POLICY_LIFO (SYNC_POLICY_FIFO|SYNC_POLICY_REVERSED)


#define SYNC_POLICY_MAX 0x7
# 36 "/usr/include/mach/semaphore.h" 2 3 4
# 53 "/usr/include/mach/semaphore.h" 3 4
extern "C" {

extern kern_return_t semaphore_signal (semaphore_t semaphore);
extern kern_return_t semaphore_signal_all (semaphore_t semaphore);
extern kern_return_t semaphore_signal_thread (semaphore_t semaphore,
                                                 thread_t thread);

extern kern_return_t semaphore_wait (semaphore_t semaphore);
extern kern_return_t semaphore_timedwait (semaphore_t semaphore,
       mach_timespec_t wait_time);

extern kern_return_t semaphore_wait_signal (semaphore_t wait_semaphore,
                                                 semaphore_t signal_semaphore);

extern kern_return_t semaphore_timedwait_signal(semaphore_t wait_semaphore,
                                                 semaphore_t signal_semaphore,
                                                 mach_timespec_t wait_time);
}
# 50 "/usr/include/mach/mach_interface.h" 2 3 4
# 1 "/usr/include/mach/task.h" 1 3 4
# 29 "/usr/include/mach/task.h" 3 4
# 1 "/usr/include/mach/i386/task.h" 1 3 4

#define _task_user_ 
# 29 "/usr/include/mach/i386/task.h" 3 4
#define task_MSG_COUNT 33
# 42 "/usr/include/mach/i386/task.h" 3 4
extern "C" {






extern

kern_return_t task_create
(
 task_t target_task,
 ledger_array_t ledgers,
 mach_msg_type_number_t ledgersCnt,
 boolean_t inherit_memory,
 task_t *child_task
);





extern

kern_return_t task_terminate
(
 task_t target_task
);





extern

kern_return_t task_threads
(
 task_t target_task,
 thread_act_array_t *act_list,
 mach_msg_type_number_t *act_listCnt
);





extern

kern_return_t mach_ports_register
(
 task_t target_task,
 mach_port_array_t init_port_set,
 mach_msg_type_number_t init_port_setCnt
);





extern

kern_return_t mach_ports_lookup
(
 task_t target_task,
 mach_port_array_t *init_port_set,
 mach_msg_type_number_t *init_port_setCnt
);





extern

kern_return_t task_info
(
 task_name_t target_task,
 task_flavor_t flavor,
 task_info_t task_info_out,
 mach_msg_type_number_t *task_info_outCnt
);





extern

kern_return_t task_set_info
(
 task_t target_task,
 task_flavor_t flavor,
 task_info_t task_info_in,
 mach_msg_type_number_t task_info_inCnt
);





extern

kern_return_t task_suspend
(
 task_t target_task
);





extern

kern_return_t task_resume
(
 task_t target_task
);





extern

kern_return_t task_get_special_port
(
 task_t task,
 int which_port,
 mach_port_t *special_port
);





extern

kern_return_t task_set_special_port
(
 task_t task,
 int which_port,
 mach_port_t special_port
);





extern

kern_return_t thread_create
(
 task_t parent_task,
 thread_act_t *child_act
);





extern

kern_return_t thread_create_running
(
 task_t parent_task,
 thread_state_flavor_t flavor,
 thread_state_t new_state,
 mach_msg_type_number_t new_stateCnt,
 thread_act_t *child_act
);





extern

kern_return_t task_set_exception_ports
(
 task_t task,
 exception_mask_t exception_mask,
 mach_port_t new_port,
 exception_behavior_t behavior,
 thread_state_flavor_t new_flavor
);





extern

kern_return_t task_get_exception_ports
(
 task_t task,
 exception_mask_t exception_mask,
 exception_mask_array_t masks,
 mach_msg_type_number_t *masksCnt,
 exception_handler_array_t old_handlers,
 exception_behavior_array_t old_behaviors,
 exception_flavor_array_t old_flavors
);





extern

kern_return_t task_swap_exception_ports
(
 task_t task,
 exception_mask_t exception_mask,
 mach_port_t new_port,
 exception_behavior_t behavior,
 thread_state_flavor_t new_flavor,
 exception_mask_array_t masks,
 mach_msg_type_number_t *masksCnt,
 exception_handler_array_t old_handlerss,
 exception_behavior_array_t old_behaviors,
 exception_flavor_array_t old_flavors
);





extern

kern_return_t lock_set_create
(
 task_t task,
 lock_set_t *new_lock_set,
 int n_ulocks,
 int policy
);





extern

kern_return_t lock_set_destroy
(
 task_t task,
 lock_set_t lock_set
);





extern

kern_return_t semaphore_create
(
 task_t task,
 semaphore_t *semaphore,
 int policy,
 int value
);





extern

kern_return_t semaphore_destroy
(
 task_t task,
 semaphore_t semaphore
);





extern

kern_return_t task_policy_set
(
 task_t task,
 task_policy_flavor_t flavor,
 task_policy_t policy_info,
 mach_msg_type_number_t policy_infoCnt
);





extern

kern_return_t task_policy_get
(
 task_t task,
 task_policy_flavor_t flavor,
 task_policy_t policy_info,
 mach_msg_type_number_t *policy_infoCnt,
 boolean_t *get_default
);





extern

kern_return_t task_sample
(
 task_t task,
 mach_port_t reply
);





extern

kern_return_t task_policy
(
 task_t task,
 policy_t policy,
 policy_base_t base,
 mach_msg_type_number_t baseCnt,
 boolean_t set_limit,
 boolean_t change
);





extern

kern_return_t task_set_emulation
(
 task_t target_port,
 vm_address_t routine_entry_pt,
 int routine_number
);





extern

kern_return_t task_get_emulation_vector
(
 task_t task,
 int *vector_start,
 emulation_vector_t *emulation_vector,
 mach_msg_type_number_t *emulation_vectorCnt
);





extern

kern_return_t task_set_emulation_vector
(
 task_t task,
 int vector_start,
 emulation_vector_t emulation_vector,
 mach_msg_type_number_t emulation_vectorCnt
);





extern

kern_return_t task_set_ras_pc
(
 task_t target_task,
 vm_address_t basepc,
 vm_address_t boundspc
);





extern

kern_return_t task_assign
(
 task_t task,
 processor_set_t new_set,
 boolean_t assign_threads
);





extern

kern_return_t task_assign_default
(
 task_t task,
 boolean_t assign_threads
);





extern

kern_return_t task_get_assignment
(
 task_t task,
 processor_set_name_t *assigned_set
);





extern

kern_return_t task_set_policy
(
 task_t task,
 processor_set_t pset,
 policy_t policy,
 policy_base_t base,
 mach_msg_type_number_t baseCnt,
 policy_limit_t limit,
 mach_msg_type_number_t limitCnt,
 boolean_t change
);

}
# 499 "/usr/include/mach/i386/task.h" 3 4
#define __Request__task_subsystem__defined 


#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_ool_ports_descriptor_t ledgers;

  NDR_record_t NDR;
  mach_msg_type_number_t ledgersCnt;
  boolean_t inherit_memory;
 } __Request__task_create_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__task_terminate_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__task_threads_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_ool_ports_descriptor_t init_port_set;

  NDR_record_t NDR;
  mach_msg_type_number_t init_port_setCnt;
 } __Request__mach_ports_register_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__mach_ports_lookup_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  task_flavor_t flavor;
  mach_msg_type_number_t task_info_outCnt;
 } __Request__task_info_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  task_flavor_t flavor;
  mach_msg_type_number_t task_info_inCnt;
  integer_t task_info_in[10];
 } __Request__task_set_info_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__task_suspend_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__task_resume_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  int which_port;
 } __Request__task_get_special_port_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t special_port;

  NDR_record_t NDR;
  int which_port;
 } __Request__task_set_special_port_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__thread_create_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  thread_state_flavor_t flavor;
  mach_msg_type_number_t new_stateCnt;
  natural_t new_state[144];
 } __Request__thread_create_running_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t new_port;

  NDR_record_t NDR;
  exception_mask_t exception_mask;
  exception_behavior_t behavior;
  thread_state_flavor_t new_flavor;
 } __Request__task_set_exception_ports_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  exception_mask_t exception_mask;
 } __Request__task_get_exception_ports_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t new_port;

  NDR_record_t NDR;
  exception_mask_t exception_mask;
  exception_behavior_t behavior;
  thread_state_flavor_t new_flavor;
 } __Request__task_swap_exception_ports_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  int n_ulocks;
  int policy;
 } __Request__lock_set_create_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t lock_set;

 } __Request__lock_set_destroy_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  int policy;
  int value;
 } __Request__semaphore_create_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t semaphore;

 } __Request__semaphore_destroy_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  task_policy_flavor_t flavor;
  mach_msg_type_number_t policy_infoCnt;
  integer_t policy_info[16];
 } __Request__task_policy_set_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  task_policy_flavor_t flavor;
  mach_msg_type_number_t policy_infoCnt;
  boolean_t get_default;
 } __Request__task_policy_get_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t reply;

 } __Request__task_sample_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  policy_t policy;
  mach_msg_type_number_t baseCnt;
  integer_t base[5];
  boolean_t set_limit;
  boolean_t change;
 } __Request__task_policy_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  vm_address_t routine_entry_pt;
  int routine_number;
 } __Request__task_set_emulation_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__task_get_emulation_vector_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_ool_descriptor_t emulation_vector;

  NDR_record_t NDR;
  int vector_start;
  mach_msg_type_number_t emulation_vectorCnt;
 } __Request__task_set_emulation_vector_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  vm_address_t basepc;
  vm_address_t boundspc;
 } __Request__task_set_ras_pc_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t new_set;

  NDR_record_t NDR;
  boolean_t assign_threads;
 } __Request__task_assign_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  boolean_t assign_threads;
 } __Request__task_assign_default_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__task_get_assignment_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t pset;

  NDR_record_t NDR;
  policy_t policy;
  mach_msg_type_number_t baseCnt;
  integer_t base[5];
  mach_msg_type_number_t limitCnt;
  integer_t limit[1];
  boolean_t change;
 } __Request__task_set_policy_t;

#pragma pack()






#define __RequestUnion__task_subsystem__defined 
union __RequestUnion__task_subsystem {
 __Request__task_create_t Request_task_create;
 __Request__task_terminate_t Request_task_terminate;
 __Request__task_threads_t Request_task_threads;
 __Request__mach_ports_register_t Request_mach_ports_register;
 __Request__mach_ports_lookup_t Request_mach_ports_lookup;
 __Request__task_info_t Request_task_info;
 __Request__task_set_info_t Request_task_set_info;
 __Request__task_suspend_t Request_task_suspend;
 __Request__task_resume_t Request_task_resume;
 __Request__task_get_special_port_t Request_task_get_special_port;
 __Request__task_set_special_port_t Request_task_set_special_port;
 __Request__thread_create_t Request_thread_create;
 __Request__thread_create_running_t Request_thread_create_running;
 __Request__task_set_exception_ports_t Request_task_set_exception_ports;
 __Request__task_get_exception_ports_t Request_task_get_exception_ports;
 __Request__task_swap_exception_ports_t Request_task_swap_exception_ports;
 __Request__lock_set_create_t Request_lock_set_create;
 __Request__lock_set_destroy_t Request_lock_set_destroy;
 __Request__semaphore_create_t Request_semaphore_create;
 __Request__semaphore_destroy_t Request_semaphore_destroy;
 __Request__task_policy_set_t Request_task_policy_set;
 __Request__task_policy_get_t Request_task_policy_get;
 __Request__task_sample_t Request_task_sample;
 __Request__task_policy_t Request_task_policy;
 __Request__task_set_emulation_t Request_task_set_emulation;
 __Request__task_get_emulation_vector_t Request_task_get_emulation_vector;
 __Request__task_set_emulation_vector_t Request_task_set_emulation_vector;
 __Request__task_set_ras_pc_t Request_task_set_ras_pc;
 __Request__task_assign_t Request_task_assign;
 __Request__task_assign_default_t Request_task_assign_default;
 __Request__task_get_assignment_t Request_task_get_assignment;
 __Request__task_set_policy_t Request_task_set_policy;
};




#define __Reply__task_subsystem__defined 


#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t child_task;

 } __Reply__task_create_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__task_terminate_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_ool_ports_descriptor_t act_list;

  NDR_record_t NDR;
  mach_msg_type_number_t act_listCnt;
 } __Reply__task_threads_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__mach_ports_register_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_ool_ports_descriptor_t init_port_set;

  NDR_record_t NDR;
  mach_msg_type_number_t init_port_setCnt;
 } __Reply__mach_ports_lookup_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_msg_type_number_t task_info_outCnt;
  integer_t task_info_out[10];
 } __Reply__task_info_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__task_set_info_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__task_suspend_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__task_resume_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t special_port;

 } __Reply__task_get_special_port_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__task_set_special_port_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t child_act;

 } __Reply__thread_create_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t child_act;

 } __Reply__thread_create_running_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__task_set_exception_ports_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t old_handlers[32];

  NDR_record_t NDR;
  mach_msg_type_number_t masksCnt;
  exception_mask_t masks[32];
  exception_behavior_t old_behaviors[32];
  thread_state_flavor_t old_flavors[32];
 } __Reply__task_get_exception_ports_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t old_handlerss[32];

  NDR_record_t NDR;
  mach_msg_type_number_t masksCnt;
  exception_mask_t masks[32];
  exception_behavior_t old_behaviors[32];
  thread_state_flavor_t old_flavors[32];
 } __Reply__task_swap_exception_ports_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t new_lock_set;

 } __Reply__lock_set_create_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__lock_set_destroy_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t semaphore;

 } __Reply__semaphore_create_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__semaphore_destroy_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__task_policy_set_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_msg_type_number_t policy_infoCnt;
  integer_t policy_info[16];
  boolean_t get_default;
 } __Reply__task_policy_get_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__task_sample_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__task_policy_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__task_set_emulation_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_ool_descriptor_t emulation_vector;

  NDR_record_t NDR;
  int vector_start;
  mach_msg_type_number_t emulation_vectorCnt;
 } __Reply__task_get_emulation_vector_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__task_set_emulation_vector_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__task_set_ras_pc_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__task_assign_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__task_assign_default_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t assigned_set;

 } __Reply__task_get_assignment_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__task_set_policy_t;

#pragma pack()






#define __ReplyUnion__task_subsystem__defined 
union __ReplyUnion__task_subsystem {
 __Reply__task_create_t Reply_task_create;
 __Reply__task_terminate_t Reply_task_terminate;
 __Reply__task_threads_t Reply_task_threads;
 __Reply__mach_ports_register_t Reply_mach_ports_register;
 __Reply__mach_ports_lookup_t Reply_mach_ports_lookup;
 __Reply__task_info_t Reply_task_info;
 __Reply__task_set_info_t Reply_task_set_info;
 __Reply__task_suspend_t Reply_task_suspend;
 __Reply__task_resume_t Reply_task_resume;
 __Reply__task_get_special_port_t Reply_task_get_special_port;
 __Reply__task_set_special_port_t Reply_task_set_special_port;
 __Reply__thread_create_t Reply_thread_create;
 __Reply__thread_create_running_t Reply_thread_create_running;
 __Reply__task_set_exception_ports_t Reply_task_set_exception_ports;
 __Reply__task_get_exception_ports_t Reply_task_get_exception_ports;
 __Reply__task_swap_exception_ports_t Reply_task_swap_exception_ports;
 __Reply__lock_set_create_t Reply_lock_set_create;
 __Reply__lock_set_destroy_t Reply_lock_set_destroy;
 __Reply__semaphore_create_t Reply_semaphore_create;
 __Reply__semaphore_destroy_t Reply_semaphore_destroy;
 __Reply__task_policy_set_t Reply_task_policy_set;
 __Reply__task_policy_get_t Reply_task_policy_get;
 __Reply__task_sample_t Reply_task_sample;
 __Reply__task_policy_t Reply_task_policy;
 __Reply__task_set_emulation_t Reply_task_set_emulation;
 __Reply__task_get_emulation_vector_t Reply_task_get_emulation_vector;
 __Reply__task_set_emulation_vector_t Reply_task_set_emulation_vector;
 __Reply__task_set_ras_pc_t Reply_task_set_ras_pc;
 __Reply__task_assign_t Reply_task_assign;
 __Reply__task_assign_default_t Reply_task_assign_default;
 __Reply__task_get_assignment_t Reply_task_get_assignment;
 __Reply__task_set_policy_t Reply_task_set_policy;
};



#define subsystem_to_name_map_task { "task_create", 3400 }, { "task_terminate", 3401 }, { "task_threads", 3402 }, { "mach_ports_register", 3403 }, { "mach_ports_lookup", 3404 }, { "task_info", 3405 }, { "task_set_info", 3406 }, { "task_suspend", 3407 }, { "task_resume", 3408 }, { "task_get_special_port", 3409 }, { "task_set_special_port", 3410 }, { "thread_create", 3411 }, { "thread_create_running", 3412 }, { "task_set_exception_ports", 3413 }, { "task_get_exception_ports", 3414 }, { "task_swap_exception_ports", 3415 }, { "lock_set_create", 3416 }, { "lock_set_destroy", 3417 }, { "semaphore_create", 3418 }, { "semaphore_destroy", 3419 }, { "task_policy_set", 3420 }, { "task_policy_get", 3421 }, { "task_sample", 3422 }, { "task_policy", 3423 }, { "task_set_emulation", 3424 }, { "task_get_emulation_vector", 3425 }, { "task_set_emulation_vector", 3426 }, { "task_set_ras_pc", 3427 }, { "task_assign", 3429 }, { "task_assign_default", 3430 }, { "task_get_assignment", 3431 }, { "task_set_policy", 3432 }
# 30 "/usr/include/mach/task.h" 2 3 4
# 51 "/usr/include/mach/mach_interface.h" 2 3 4
# 1 "/usr/include/mach/thread_act.h" 1 3 4
# 29 "/usr/include/mach/thread_act.h" 3 4
# 1 "/usr/include/mach/i386/thread_act.h" 1 3 4

#define _thread_act_user_ 
# 29 "/usr/include/mach/i386/thread_act.h" 3 4
#define thread_act_MSG_COUNT 25
# 42 "/usr/include/mach/i386/thread_act.h" 3 4
extern "C" {






extern

kern_return_t thread_terminate
(
 thread_act_t target_act
);





extern

kern_return_t act_get_state
(
 thread_act_t target_act,
 int flavor,
 thread_state_t old_state,
 mach_msg_type_number_t *old_stateCnt
);





extern

kern_return_t act_set_state
(
 thread_act_t target_act,
 int flavor,
 thread_state_t new_state,
 mach_msg_type_number_t new_stateCnt
);





extern

kern_return_t thread_get_state
(
 thread_act_t target_act,
 thread_state_flavor_t flavor,
 thread_state_t old_state,
 mach_msg_type_number_t *old_stateCnt
);





extern

kern_return_t thread_set_state
(
 thread_act_t target_act,
 thread_state_flavor_t flavor,
 thread_state_t new_state,
 mach_msg_type_number_t new_stateCnt
);





extern

kern_return_t thread_suspend
(
 thread_act_t target_act
);





extern

kern_return_t thread_resume
(
 thread_act_t target_act
);





extern

kern_return_t thread_abort
(
 thread_act_t target_act
);





extern

kern_return_t thread_abort_safely
(
 thread_act_t target_act
);





extern

kern_return_t thread_depress_abort
(
 thread_act_t thread
);





extern

kern_return_t thread_get_special_port
(
 thread_act_t thr_act,
 int which_port,
 mach_port_t *special_port
);





extern

kern_return_t thread_set_special_port
(
 thread_act_t thr_act,
 int which_port,
 mach_port_t special_port
);





extern

kern_return_t thread_info
(
 thread_act_t target_act,
 thread_flavor_t flavor,
 thread_info_t thread_info_out,
 mach_msg_type_number_t *thread_info_outCnt
);





extern

kern_return_t thread_set_exception_ports
(
 thread_act_t thread,
 exception_mask_t exception_mask,
 mach_port_t new_port,
 exception_behavior_t behavior,
 thread_state_flavor_t new_flavor
);





extern

kern_return_t thread_get_exception_ports
(
 thread_act_t thread,
 exception_mask_t exception_mask,
 exception_mask_array_t masks,
 mach_msg_type_number_t *masksCnt,
 exception_handler_array_t old_handlers,
 exception_behavior_array_t old_behaviors,
 exception_flavor_array_t old_flavors
);





extern

kern_return_t thread_swap_exception_ports
(
 thread_act_t thread,
 exception_mask_t exception_mask,
 mach_port_t new_port,
 exception_behavior_t behavior,
 thread_state_flavor_t new_flavor,
 exception_mask_array_t masks,
 mach_msg_type_number_t *masksCnt,
 exception_handler_array_t old_handlers,
 exception_behavior_array_t old_behaviors,
 exception_flavor_array_t old_flavors
);





extern

kern_return_t thread_policy
(
 thread_act_t thr_act,
 policy_t policy,
 policy_base_t base,
 mach_msg_type_number_t baseCnt,
 boolean_t set_limit
);





extern

kern_return_t thread_policy_set
(
 thread_act_t thread,
 thread_policy_flavor_t flavor,
 thread_policy_t policy_info,
 mach_msg_type_number_t policy_infoCnt
);





extern

kern_return_t thread_policy_get
(
 thread_act_t thread,
 thread_policy_flavor_t flavor,
 thread_policy_t policy_info,
 mach_msg_type_number_t *policy_infoCnt,
 boolean_t *get_default
);





extern

kern_return_t thread_sample
(
 thread_act_t thread,
 mach_port_t reply
);





extern

kern_return_t etap_trace_thread
(
 thread_act_t target_act,
 boolean_t trace_status
);





extern

kern_return_t thread_assign
(
 thread_act_t thread,
 processor_set_t new_set
);





extern

kern_return_t thread_assign_default
(
 thread_act_t thread
);





extern

kern_return_t thread_get_assignment
(
 thread_act_t thread,
 processor_set_name_t *assigned_set
);





extern

kern_return_t thread_set_policy
(
 thread_act_t thr_act,
 processor_set_t pset,
 policy_t policy,
 policy_base_t base,
 mach_msg_type_number_t baseCnt,
 policy_limit_t limit,
 mach_msg_type_number_t limitCnt
);

}
# 395 "/usr/include/mach/i386/thread_act.h" 3 4
#define __Request__thread_act_subsystem__defined 


#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__thread_terminate_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  int flavor;
  mach_msg_type_number_t old_stateCnt;
 } __Request__act_get_state_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  int flavor;
  mach_msg_type_number_t new_stateCnt;
  natural_t new_state[144];
 } __Request__act_set_state_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  thread_state_flavor_t flavor;
  mach_msg_type_number_t old_stateCnt;
 } __Request__thread_get_state_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  thread_state_flavor_t flavor;
  mach_msg_type_number_t new_stateCnt;
  natural_t new_state[144];
 } __Request__thread_set_state_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__thread_suspend_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__thread_resume_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__thread_abort_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__thread_abort_safely_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__thread_depress_abort_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  int which_port;
 } __Request__thread_get_special_port_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t special_port;

  NDR_record_t NDR;
  int which_port;
 } __Request__thread_set_special_port_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  thread_flavor_t flavor;
  mach_msg_type_number_t thread_info_outCnt;
 } __Request__thread_info_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t new_port;

  NDR_record_t NDR;
  exception_mask_t exception_mask;
  exception_behavior_t behavior;
  thread_state_flavor_t new_flavor;
 } __Request__thread_set_exception_ports_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  exception_mask_t exception_mask;
 } __Request__thread_get_exception_ports_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t new_port;

  NDR_record_t NDR;
  exception_mask_t exception_mask;
  exception_behavior_t behavior;
  thread_state_flavor_t new_flavor;
 } __Request__thread_swap_exception_ports_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  policy_t policy;
  mach_msg_type_number_t baseCnt;
  integer_t base[5];
  boolean_t set_limit;
 } __Request__thread_policy_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  thread_policy_flavor_t flavor;
  mach_msg_type_number_t policy_infoCnt;
  integer_t policy_info[16];
 } __Request__thread_policy_set_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  thread_policy_flavor_t flavor;
  mach_msg_type_number_t policy_infoCnt;
  boolean_t get_default;
 } __Request__thread_policy_get_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t reply;

 } __Request__thread_sample_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  boolean_t trace_status;
 } __Request__etap_trace_thread_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t new_set;

 } __Request__thread_assign_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__thread_assign_default_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__thread_get_assignment_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t pset;

  NDR_record_t NDR;
  policy_t policy;
  mach_msg_type_number_t baseCnt;
  integer_t base[5];
  mach_msg_type_number_t limitCnt;
  integer_t limit[1];
 } __Request__thread_set_policy_t;

#pragma pack()






#define __RequestUnion__thread_act_subsystem__defined 
union __RequestUnion__thread_act_subsystem {
 __Request__thread_terminate_t Request_thread_terminate;
 __Request__act_get_state_t Request_act_get_state;
 __Request__act_set_state_t Request_act_set_state;
 __Request__thread_get_state_t Request_thread_get_state;
 __Request__thread_set_state_t Request_thread_set_state;
 __Request__thread_suspend_t Request_thread_suspend;
 __Request__thread_resume_t Request_thread_resume;
 __Request__thread_abort_t Request_thread_abort;
 __Request__thread_abort_safely_t Request_thread_abort_safely;
 __Request__thread_depress_abort_t Request_thread_depress_abort;
 __Request__thread_get_special_port_t Request_thread_get_special_port;
 __Request__thread_set_special_port_t Request_thread_set_special_port;
 __Request__thread_info_t Request_thread_info;
 __Request__thread_set_exception_ports_t Request_thread_set_exception_ports;
 __Request__thread_get_exception_ports_t Request_thread_get_exception_ports;
 __Request__thread_swap_exception_ports_t Request_thread_swap_exception_ports;
 __Request__thread_policy_t Request_thread_policy;
 __Request__thread_policy_set_t Request_thread_policy_set;
 __Request__thread_policy_get_t Request_thread_policy_get;
 __Request__thread_sample_t Request_thread_sample;
 __Request__etap_trace_thread_t Request_etap_trace_thread;
 __Request__thread_assign_t Request_thread_assign;
 __Request__thread_assign_default_t Request_thread_assign_default;
 __Request__thread_get_assignment_t Request_thread_get_assignment;
 __Request__thread_set_policy_t Request_thread_set_policy;
};




#define __Reply__thread_act_subsystem__defined 


#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__thread_terminate_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_msg_type_number_t old_stateCnt;
  natural_t old_state[144];
 } __Reply__act_get_state_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__act_set_state_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_msg_type_number_t old_stateCnt;
  natural_t old_state[144];
 } __Reply__thread_get_state_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__thread_set_state_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__thread_suspend_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__thread_resume_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__thread_abort_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__thread_abort_safely_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__thread_depress_abort_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t special_port;

 } __Reply__thread_get_special_port_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__thread_set_special_port_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_msg_type_number_t thread_info_outCnt;
  integer_t thread_info_out[12];
 } __Reply__thread_info_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__thread_set_exception_ports_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t old_handlers[32];

  NDR_record_t NDR;
  mach_msg_type_number_t masksCnt;
  exception_mask_t masks[32];
  exception_behavior_t old_behaviors[32];
  thread_state_flavor_t old_flavors[32];
 } __Reply__thread_get_exception_ports_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t old_handlers[32];

  NDR_record_t NDR;
  mach_msg_type_number_t masksCnt;
  exception_mask_t masks[32];
  exception_behavior_t old_behaviors[32];
  thread_state_flavor_t old_flavors[32];
 } __Reply__thread_swap_exception_ports_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__thread_policy_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__thread_policy_set_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_msg_type_number_t policy_infoCnt;
  integer_t policy_info[16];
  boolean_t get_default;
 } __Reply__thread_policy_get_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__thread_sample_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__etap_trace_thread_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__thread_assign_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__thread_assign_default_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t assigned_set;

 } __Reply__thread_get_assignment_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__thread_set_policy_t;

#pragma pack()






#define __ReplyUnion__thread_act_subsystem__defined 
union __ReplyUnion__thread_act_subsystem {
 __Reply__thread_terminate_t Reply_thread_terminate;
 __Reply__act_get_state_t Reply_act_get_state;
 __Reply__act_set_state_t Reply_act_set_state;
 __Reply__thread_get_state_t Reply_thread_get_state;
 __Reply__thread_set_state_t Reply_thread_set_state;
 __Reply__thread_suspend_t Reply_thread_suspend;
 __Reply__thread_resume_t Reply_thread_resume;
 __Reply__thread_abort_t Reply_thread_abort;
 __Reply__thread_abort_safely_t Reply_thread_abort_safely;
 __Reply__thread_depress_abort_t Reply_thread_depress_abort;
 __Reply__thread_get_special_port_t Reply_thread_get_special_port;
 __Reply__thread_set_special_port_t Reply_thread_set_special_port;
 __Reply__thread_info_t Reply_thread_info;
 __Reply__thread_set_exception_ports_t Reply_thread_set_exception_ports;
 __Reply__thread_get_exception_ports_t Reply_thread_get_exception_ports;
 __Reply__thread_swap_exception_ports_t Reply_thread_swap_exception_ports;
 __Reply__thread_policy_t Reply_thread_policy;
 __Reply__thread_policy_set_t Reply_thread_policy_set;
 __Reply__thread_policy_get_t Reply_thread_policy_get;
 __Reply__thread_sample_t Reply_thread_sample;
 __Reply__etap_trace_thread_t Reply_etap_trace_thread;
 __Reply__thread_assign_t Reply_thread_assign;
 __Reply__thread_assign_default_t Reply_thread_assign_default;
 __Reply__thread_get_assignment_t Reply_thread_get_assignment;
 __Reply__thread_set_policy_t Reply_thread_set_policy;
};



#define subsystem_to_name_map_thread_act { "thread_terminate", 3600 }, { "act_get_state", 3601 }, { "act_set_state", 3602 }, { "thread_get_state", 3603 }, { "thread_set_state", 3604 }, { "thread_suspend", 3605 }, { "thread_resume", 3606 }, { "thread_abort", 3607 }, { "thread_abort_safely", 3608 }, { "thread_depress_abort", 3609 }, { "thread_get_special_port", 3610 }, { "thread_set_special_port", 3611 }, { "thread_info", 3612 }, { "thread_set_exception_ports", 3613 }, { "thread_get_exception_ports", 3614 }, { "thread_swap_exception_ports", 3615 }, { "thread_policy", 3616 }, { "thread_policy_set", 3617 }, { "thread_policy_get", 3618 }, { "thread_sample", 3619 }, { "etap_trace_thread", 3620 }, { "thread_assign", 3621 }, { "thread_assign_default", 3622 }, { "thread_get_assignment", 3623 }, { "thread_set_policy", 3624 }
# 30 "/usr/include/mach/thread_act.h" 2 3 4
# 52 "/usr/include/mach/mach_interface.h" 2 3 4
# 1 "/usr/include/mach/vm_map.h" 1 3 4

#define _vm_map_user_ 
# 29 "/usr/include/mach/vm_map.h" 3 4
#define vm_map_MSG_COUNT 31
# 42 "/usr/include/mach/vm_map.h" 3 4
extern "C" {






extern

kern_return_t vm_region
(
 vm_map_t target_task,
 vm_address_t *address,
 vm_size_t *size,
 vm_region_flavor_t flavor,
 vm_region_info_t info,
 mach_msg_type_number_t *infoCnt,
 mach_port_t *object_name
);





extern

kern_return_t vm_allocate
(
 vm_map_t target_task,
 vm_address_t *address,
 vm_size_t size,
 int flags
);





extern

kern_return_t vm_deallocate
(
 vm_map_t target_task,
 vm_address_t address,
 vm_size_t size
);





extern

kern_return_t vm_protect
(
 vm_map_t target_task,
 vm_address_t address,
 vm_size_t size,
 boolean_t set_maximum,
 vm_prot_t new_protection
);





extern

kern_return_t vm_inherit
(
 vm_map_t target_task,
 vm_address_t address,
 vm_size_t size,
 vm_inherit_t new_inheritance
);





extern

kern_return_t vm_read
(
 vm_map_t target_task,
 vm_address_t address,
 vm_size_t size,
 vm_offset_t *data,
 mach_msg_type_number_t *dataCnt
);





extern

kern_return_t vm_read_list
(
 vm_map_t target_task,
 vm_read_entry_t data_list,
 natural_t count
);





extern

kern_return_t vm_write
(
 vm_map_t target_task,
 vm_address_t address,
 vm_offset_t data,
 mach_msg_type_number_t dataCnt
);





extern

kern_return_t vm_copy
(
 vm_map_t target_task,
 vm_address_t source_address,
 vm_size_t size,
 vm_address_t dest_address
);





extern

kern_return_t vm_read_overwrite
(
 vm_map_t target_task,
 vm_address_t address,
 vm_size_t size,
 vm_address_t data,
 vm_size_t *outsize
);





extern

kern_return_t vm_msync
(
 vm_map_t target_task,
 vm_address_t address,
 vm_size_t size,
 vm_sync_t sync_flags
);





extern

kern_return_t vm_behavior_set
(
 vm_map_t target_task,
 vm_address_t address,
 vm_size_t size,
 vm_behavior_t new_behavior
);





extern

kern_return_t vm_map
(
 vm_map_t target_task,
 vm_address_t *address,
 vm_size_t size,
 vm_address_t mask,
 int flags,
 mem_entry_name_port_t object,
 vm_offset_t offset,
 boolean_t copy,
 vm_prot_t cur_protection,
 vm_prot_t max_protection,
 vm_inherit_t inheritance
);





extern

kern_return_t vm_machine_attribute
(
 vm_map_t target_task,
 vm_address_t address,
 vm_size_t size,
 vm_machine_attribute_t attribute,
 vm_machine_attribute_val_t *value
);





extern

kern_return_t vm_remap
(
 vm_map_t target_task,
 vm_address_t *target_address,
 vm_size_t size,
 vm_address_t mask,
 boolean_t anywhere,
 vm_map_t src_task,
 vm_address_t src_address,
 boolean_t copy,
 vm_prot_t *cur_protection,
 vm_prot_t *max_protection,
 vm_inherit_t inheritance
);





extern

kern_return_t task_wire
(
 vm_map_t target_task,
 boolean_t must_wire
);





extern

kern_return_t mach_make_memory_entry
(
 vm_map_t target_task,
 vm_size_t *size,
 vm_offset_t offset,
 vm_prot_t permission,
 mem_entry_name_port_t *object_handle,
 mem_entry_name_port_t parent_entry
);





extern

kern_return_t vm_map_page_query
(
 vm_map_t target_map,
 vm_offset_t offset,
 integer_t *disposition,
 integer_t *ref_count
);





extern

kern_return_t mach_vm_region_info
(
 vm_map_t task,
 vm_address_t address,
 vm_info_region_t *region,
 vm_info_object_array_t *objects,
 mach_msg_type_number_t *objectsCnt
);





extern

kern_return_t vm_mapped_pages_info
(
 vm_map_t task,
 page_address_array_t *pages,
 mach_msg_type_number_t *pagesCnt
);





extern

kern_return_t vm_region_recurse
(
 vm_map_t target_task,
 vm_address_t *address,
 vm_size_t *size,
 natural_t *nesting_depth,
 vm_region_recurse_info_t info,
 mach_msg_type_number_t *infoCnt
);





extern

kern_return_t vm_region_recurse_64
(
 vm_map_t target_task,
 vm_address_t *address,
 vm_size_t *size,
 natural_t *nesting_depth,
 vm_region_recurse_info_t info,
 mach_msg_type_number_t *infoCnt
);





extern

kern_return_t mach_vm_region_info_64
(
 vm_map_t task,
 vm_address_t address,
 vm_info_region_64_t *region,
 vm_info_object_array_t *objects,
 mach_msg_type_number_t *objectsCnt
);





extern

kern_return_t vm_region_64
(
 vm_map_t target_task,
 vm_address_t *address,
 vm_size_t *size,
 vm_region_flavor_t flavor,
 vm_region_info_t info,
 mach_msg_type_number_t *infoCnt,
 mach_port_t *object_name
);





extern

kern_return_t mach_make_memory_entry_64
(
 vm_map_t target_task,
 memory_object_size_t *size,
 memory_object_offset_t offset,
 vm_prot_t permission,
 mach_port_t *object_handle,
 mem_entry_name_port_t parent_entry
);





extern

kern_return_t vm_map_64
(
 vm_map_t target_task,
 vm_address_t *address,
 vm_size_t size,
 vm_address_t mask,
 int flags,
 mem_entry_name_port_t object,
 memory_object_offset_t offset,
 boolean_t copy,
 vm_prot_t cur_protection,
 vm_prot_t max_protection,
 vm_inherit_t inheritance
);





extern

kern_return_t vm_purgable_control
(
 vm_map_t target_task,
 vm_address_t address,
 vm_purgable_t control,
 int *state
);

}
# 475 "/usr/include/mach/vm_map.h" 3 4
#define __Request__vm_map_subsystem__defined 


#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  vm_address_t address;
  vm_region_flavor_t flavor;
  mach_msg_type_number_t infoCnt;
 } __Request__vm_region_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  vm_address_t address;
  vm_size_t size;
  int flags;
 } __Request__vm_allocate_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  vm_address_t address;
  vm_size_t size;
 } __Request__vm_deallocate_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  vm_address_t address;
  vm_size_t size;
  boolean_t set_maximum;
  vm_prot_t new_protection;
 } __Request__vm_protect_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  vm_address_t address;
  vm_size_t size;
  vm_inherit_t new_inheritance;
 } __Request__vm_inherit_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  vm_address_t address;
  vm_size_t size;
 } __Request__vm_read_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  vm_read_entry_t data_list;
  natural_t count;
 } __Request__vm_read_list_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_ool_descriptor_t data;

  NDR_record_t NDR;
  vm_address_t address;
  mach_msg_type_number_t dataCnt;
 } __Request__vm_write_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  vm_address_t source_address;
  vm_size_t size;
  vm_address_t dest_address;
 } __Request__vm_copy_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  vm_address_t address;
  vm_size_t size;
  vm_address_t data;
 } __Request__vm_read_overwrite_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  vm_address_t address;
  vm_size_t size;
  vm_sync_t sync_flags;
 } __Request__vm_msync_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  vm_address_t address;
  vm_size_t size;
  vm_behavior_t new_behavior;
 } __Request__vm_behavior_set_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t object;

  NDR_record_t NDR;
  vm_address_t address;
  vm_size_t size;
  vm_address_t mask;
  int flags;
  vm_offset_t offset;
  boolean_t copy;
  vm_prot_t cur_protection;
  vm_prot_t max_protection;
  vm_inherit_t inheritance;
 } __Request__vm_map_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  vm_address_t address;
  vm_size_t size;
  vm_machine_attribute_t attribute;
  vm_machine_attribute_val_t value;
 } __Request__vm_machine_attribute_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t src_task;

  NDR_record_t NDR;
  vm_address_t target_address;
  vm_size_t size;
  vm_address_t mask;
  boolean_t anywhere;
  vm_address_t src_address;
  boolean_t copy;
  vm_inherit_t inheritance;
 } __Request__vm_remap_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  boolean_t must_wire;
 } __Request__task_wire_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t parent_entry;

  NDR_record_t NDR;
  vm_size_t size;
  vm_offset_t offset;
  vm_prot_t permission;
 } __Request__mach_make_memory_entry_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  vm_offset_t offset;
 } __Request__vm_map_page_query_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  vm_address_t address;
 } __Request__mach_vm_region_info_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__vm_mapped_pages_info_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  vm_address_t address;
  natural_t nesting_depth;
  mach_msg_type_number_t infoCnt;
 } __Request__vm_region_recurse_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  vm_address_t address;
  natural_t nesting_depth;
  mach_msg_type_number_t infoCnt;
 } __Request__vm_region_recurse_64_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  vm_address_t address;
 } __Request__mach_vm_region_info_64_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  vm_address_t address;
  vm_region_flavor_t flavor;
  mach_msg_type_number_t infoCnt;
 } __Request__vm_region_64_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t parent_entry;

  NDR_record_t NDR;
  memory_object_size_t size;
  memory_object_offset_t offset;
  vm_prot_t permission;
 } __Request__mach_make_memory_entry_64_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t object;

  NDR_record_t NDR;
  vm_address_t address;
  vm_size_t size;
  vm_address_t mask;
  int flags;
  memory_object_offset_t offset;
  boolean_t copy;
  vm_prot_t cur_protection;
  vm_prot_t max_protection;
  vm_inherit_t inheritance;
 } __Request__vm_map_64_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  vm_address_t address;
  vm_purgable_t control;
  int state;
 } __Request__vm_purgable_control_t;

#pragma pack()






#define __RequestUnion__vm_map_subsystem__defined 
union __RequestUnion__vm_map_subsystem {
 __Request__vm_region_t Request_vm_region;
 __Request__vm_allocate_t Request_vm_allocate;
 __Request__vm_deallocate_t Request_vm_deallocate;
 __Request__vm_protect_t Request_vm_protect;
 __Request__vm_inherit_t Request_vm_inherit;
 __Request__vm_read_t Request_vm_read;
 __Request__vm_read_list_t Request_vm_read_list;
 __Request__vm_write_t Request_vm_write;
 __Request__vm_copy_t Request_vm_copy;
 __Request__vm_read_overwrite_t Request_vm_read_overwrite;
 __Request__vm_msync_t Request_vm_msync;
 __Request__vm_behavior_set_t Request_vm_behavior_set;
 __Request__vm_map_t Request_vm_map;
 __Request__vm_machine_attribute_t Request_vm_machine_attribute;
 __Request__vm_remap_t Request_vm_remap;
 __Request__task_wire_t Request_task_wire;
 __Request__mach_make_memory_entry_t Request_mach_make_memory_entry;
 __Request__vm_map_page_query_t Request_vm_map_page_query;
 __Request__mach_vm_region_info_t Request_mach_vm_region_info;
 __Request__vm_mapped_pages_info_t Request_vm_mapped_pages_info;
 __Request__vm_region_recurse_t Request_vm_region_recurse;
 __Request__vm_region_recurse_64_t Request_vm_region_recurse_64;
 __Request__mach_vm_region_info_64_t Request_mach_vm_region_info_64;
 __Request__vm_region_64_t Request_vm_region_64;
 __Request__mach_make_memory_entry_64_t Request_mach_make_memory_entry_64;
 __Request__vm_map_64_t Request_vm_map_64;
 __Request__vm_purgable_control_t Request_vm_purgable_control;
};




#define __Reply__vm_map_subsystem__defined 


#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t object_name;

  NDR_record_t NDR;
  vm_address_t address;
  vm_size_t size;
  mach_msg_type_number_t infoCnt;
  int info[10];
 } __Reply__vm_region_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  vm_address_t address;
 } __Reply__vm_allocate_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__vm_deallocate_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__vm_protect_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__vm_inherit_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_ool_descriptor_t data;

  NDR_record_t NDR;
  mach_msg_type_number_t dataCnt;
 } __Reply__vm_read_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  vm_read_entry_t data_list;
 } __Reply__vm_read_list_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__vm_write_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__vm_copy_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  vm_size_t outsize;
 } __Reply__vm_read_overwrite_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__vm_msync_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__vm_behavior_set_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  vm_address_t address;
 } __Reply__vm_map_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  vm_machine_attribute_val_t value;
 } __Reply__vm_machine_attribute_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  vm_address_t target_address;
  vm_prot_t cur_protection;
  vm_prot_t max_protection;
 } __Reply__vm_remap_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__task_wire_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t object_handle;

  NDR_record_t NDR;
  vm_size_t size;
 } __Reply__mach_make_memory_entry_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  integer_t disposition;
  integer_t ref_count;
 } __Reply__vm_map_page_query_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_ool_descriptor_t objects;

  NDR_record_t NDR;
  vm_info_region_t region;
  mach_msg_type_number_t objectsCnt;
 } __Reply__mach_vm_region_info_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_ool_descriptor_t pages;

  NDR_record_t NDR;
  mach_msg_type_number_t pagesCnt;
 } __Reply__vm_mapped_pages_info_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  vm_address_t address;
  vm_size_t size;
  natural_t nesting_depth;
  mach_msg_type_number_t infoCnt;
  int info[19];
 } __Reply__vm_region_recurse_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  vm_address_t address;
  vm_size_t size;
  natural_t nesting_depth;
  mach_msg_type_number_t infoCnt;
  int info[19];
 } __Reply__vm_region_recurse_64_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_ool_descriptor_t objects;

  NDR_record_t NDR;
  vm_info_region_64_t region;
  mach_msg_type_number_t objectsCnt;
 } __Reply__mach_vm_region_info_64_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t object_name;

  NDR_record_t NDR;
  vm_address_t address;
  vm_size_t size;
  mach_msg_type_number_t infoCnt;
  int info[10];
 } __Reply__vm_region_64_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t object_handle;

  NDR_record_t NDR;
  memory_object_size_t size;
 } __Reply__mach_make_memory_entry_64_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  vm_address_t address;
 } __Reply__vm_map_64_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  int state;
 } __Reply__vm_purgable_control_t;

#pragma pack()






#define __ReplyUnion__vm_map_subsystem__defined 
union __ReplyUnion__vm_map_subsystem {
 __Reply__vm_region_t Reply_vm_region;
 __Reply__vm_allocate_t Reply_vm_allocate;
 __Reply__vm_deallocate_t Reply_vm_deallocate;
 __Reply__vm_protect_t Reply_vm_protect;
 __Reply__vm_inherit_t Reply_vm_inherit;
 __Reply__vm_read_t Reply_vm_read;
 __Reply__vm_read_list_t Reply_vm_read_list;
 __Reply__vm_write_t Reply_vm_write;
 __Reply__vm_copy_t Reply_vm_copy;
 __Reply__vm_read_overwrite_t Reply_vm_read_overwrite;
 __Reply__vm_msync_t Reply_vm_msync;
 __Reply__vm_behavior_set_t Reply_vm_behavior_set;
 __Reply__vm_map_t Reply_vm_map;
 __Reply__vm_machine_attribute_t Reply_vm_machine_attribute;
 __Reply__vm_remap_t Reply_vm_remap;
 __Reply__task_wire_t Reply_task_wire;
 __Reply__mach_make_memory_entry_t Reply_mach_make_memory_entry;
 __Reply__vm_map_page_query_t Reply_vm_map_page_query;
 __Reply__mach_vm_region_info_t Reply_mach_vm_region_info;
 __Reply__vm_mapped_pages_info_t Reply_vm_mapped_pages_info;
 __Reply__vm_region_recurse_t Reply_vm_region_recurse;
 __Reply__vm_region_recurse_64_t Reply_vm_region_recurse_64;
 __Reply__mach_vm_region_info_64_t Reply_mach_vm_region_info_64;
 __Reply__vm_region_64_t Reply_vm_region_64;
 __Reply__mach_make_memory_entry_64_t Reply_mach_make_memory_entry_64;
 __Reply__vm_map_64_t Reply_vm_map_64;
 __Reply__vm_purgable_control_t Reply_vm_purgable_control;
};



#define subsystem_to_name_map_vm_map { "vm_region", 3800 }, { "vm_allocate", 3801 }, { "vm_deallocate", 3802 }, { "vm_protect", 3803 }, { "vm_inherit", 3804 }, { "vm_read", 3805 }, { "vm_read_list", 3806 }, { "vm_write", 3807 }, { "vm_copy", 3808 }, { "vm_read_overwrite", 3809 }, { "vm_msync", 3810 }, { "vm_behavior_set", 3811 }, { "vm_map", 3812 }, { "vm_machine_attribute", 3813 }, { "vm_remap", 3814 }, { "task_wire", 3815 }, { "mach_make_memory_entry", 3816 }, { "vm_map_page_query", 3817 }, { "mach_vm_region_info", 3818 }, { "vm_mapped_pages_info", 3819 }, { "vm_region_recurse", 3821 }, { "vm_region_recurse_64", 3822 }, { "mach_vm_region_info_64", 3823 }, { "vm_region_64", 3824 }, { "mach_make_memory_entry_64", 3825 }, { "vm_map_64", 3826 }, { "vm_purgable_control", 3830 }
# 53 "/usr/include/mach/mach_interface.h" 2 3 4
# 68 "/usr/include/mach/mach.h" 2 3 4
# 1 "/usr/include/mach/mach_port.h" 1 3 4

#define _mach_port_user_ 
# 29 "/usr/include/mach/mach_port.h" 3 4
#define mach_port_MSG_COUNT 28
# 42 "/usr/include/mach/mach_port.h" 3 4
extern "C" {






extern

kern_return_t mach_port_names
(
 ipc_space_t task,
 mach_port_name_array_t *names,
 mach_msg_type_number_t *namesCnt,
 mach_port_type_array_t *types,
 mach_msg_type_number_t *typesCnt
);





extern

kern_return_t mach_port_type
(
 ipc_space_t task,
 mach_port_name_t name,
 mach_port_type_t *ptype
);





extern

kern_return_t mach_port_rename
(
 ipc_space_t task,
 mach_port_name_t old_name,
 mach_port_name_t new_name
);





extern

kern_return_t mach_port_allocate_name
(
 ipc_space_t task,
 mach_port_right_t right,
 mach_port_name_t name
);





extern

kern_return_t mach_port_allocate
(
 ipc_space_t task,
 mach_port_right_t right,
 mach_port_name_t *name
);





extern

kern_return_t mach_port_destroy
(
 ipc_space_t task,
 mach_port_name_t name
);





extern

kern_return_t mach_port_deallocate
(
 ipc_space_t task,
 mach_port_name_t name
);





extern

kern_return_t mach_port_get_refs
(
 ipc_space_t task,
 mach_port_name_t name,
 mach_port_right_t right,
 mach_port_urefs_t *refs
);





extern

kern_return_t mach_port_mod_refs
(
 ipc_space_t task,
 mach_port_name_t name,
 mach_port_right_t right,
 mach_port_delta_t delta
);





extern

kern_return_t mach_port_set_mscount
(
 ipc_space_t task,
 mach_port_name_t name,
 mach_port_mscount_t mscount
);





extern

kern_return_t mach_port_get_set_status
(
 ipc_space_t task,
 mach_port_name_t name,
 mach_port_name_array_t *members,
 mach_msg_type_number_t *membersCnt
);





extern

kern_return_t mach_port_move_member
(
 ipc_space_t task,
 mach_port_name_t member,
 mach_port_name_t after
);





extern

kern_return_t mach_port_request_notification
(
 ipc_space_t task,
 mach_port_name_t name,
 mach_msg_id_t msgid,
 mach_port_mscount_t sync,
 mach_port_t notify,
 mach_msg_type_name_t notifyPoly,
 mach_port_t *previous
);





extern

kern_return_t mach_port_insert_right
(
 ipc_space_t task,
 mach_port_name_t name,
 mach_port_t poly,
 mach_msg_type_name_t polyPoly
);





extern

kern_return_t mach_port_extract_right
(
 ipc_space_t task,
 mach_port_name_t name,
 mach_msg_type_name_t msgt_name,
 mach_port_t *poly,
 mach_msg_type_name_t *polyPoly
);





extern

kern_return_t mach_port_set_seqno
(
 ipc_space_t task,
 mach_port_name_t name,
 mach_port_seqno_t seqno
);





extern

kern_return_t mach_port_get_attributes
(
 ipc_space_t task,
 mach_port_name_t name,
 mach_port_flavor_t flavor,
 mach_port_info_t port_info_out,
 mach_msg_type_number_t *port_info_outCnt
);





extern

kern_return_t mach_port_set_attributes
(
 ipc_space_t task,
 mach_port_name_t name,
 mach_port_flavor_t flavor,
 mach_port_info_t port_info,
 mach_msg_type_number_t port_infoCnt
);





extern

kern_return_t mach_port_allocate_qos
(
 ipc_space_t task,
 mach_port_right_t right,
 mach_port_qos_t *qos,
 mach_port_name_t *name
);





extern

kern_return_t mach_port_allocate_full
(
 ipc_space_t task,
 mach_port_right_t right,
 mach_port_t proto,
 mach_port_qos_t *qos,
 mach_port_name_t *name
);





extern

kern_return_t task_set_port_space
(
 ipc_space_t task,
 int table_entries
);





extern

kern_return_t mach_port_get_srights
(
 ipc_space_t task,
 mach_port_name_t name,
 mach_port_rights_t *srights
);





extern

kern_return_t mach_port_space_info
(
 ipc_space_t task,
 ipc_info_space_t *space_info,
 ipc_info_name_array_t *table_info,
 mach_msg_type_number_t *table_infoCnt,
 ipc_info_tree_name_array_t *tree_info,
 mach_msg_type_number_t *tree_infoCnt
);





extern

kern_return_t mach_port_dnrequest_info
(
 ipc_space_t task,
 mach_port_name_t name,
 unsigned *dnr_total,
 unsigned *dnr_used
);





extern

kern_return_t mach_port_kernel_object
(
 ipc_space_t task,
 mach_port_name_t name,
 unsigned *object_type,
 vm_offset_t *object_addr
);





extern

kern_return_t mach_port_insert_member
(
 ipc_space_t task,
 mach_port_name_t name,
 mach_port_name_t pset
);





extern

kern_return_t mach_port_extract_member
(
 ipc_space_t task,
 mach_port_name_t name,
 mach_port_name_t pset
);

}
# 433 "/usr/include/mach/mach_port.h" 3 4
#define __Request__mach_port_subsystem__defined 


#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__mach_port_names_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t name;
 } __Request__mach_port_type_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t old_name;
  mach_port_name_t new_name;
 } __Request__mach_port_rename_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_right_t right;
  mach_port_name_t name;
 } __Request__mach_port_allocate_name_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_right_t right;
 } __Request__mach_port_allocate_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t name;
 } __Request__mach_port_destroy_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t name;
 } __Request__mach_port_deallocate_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t name;
  mach_port_right_t right;
 } __Request__mach_port_get_refs_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t name;
  mach_port_right_t right;
  mach_port_delta_t delta;
 } __Request__mach_port_mod_refs_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t name;
  mach_port_mscount_t mscount;
 } __Request__mach_port_set_mscount_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t name;
 } __Request__mach_port_get_set_status_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t member;
  mach_port_name_t after;
 } __Request__mach_port_move_member_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t notify;

  NDR_record_t NDR;
  mach_port_name_t name;
  mach_msg_id_t msgid;
  mach_port_mscount_t sync;
 } __Request__mach_port_request_notification_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t poly;

  NDR_record_t NDR;
  mach_port_name_t name;
 } __Request__mach_port_insert_right_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t name;
  mach_msg_type_name_t msgt_name;
 } __Request__mach_port_extract_right_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t name;
  mach_port_seqno_t seqno;
 } __Request__mach_port_set_seqno_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t name;
  mach_port_flavor_t flavor;
  mach_msg_type_number_t port_info_outCnt;
 } __Request__mach_port_get_attributes_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t name;
  mach_port_flavor_t flavor;
  mach_msg_type_number_t port_infoCnt;
  integer_t port_info[10];
 } __Request__mach_port_set_attributes_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_right_t right;
  mach_port_qos_t qos;
 } __Request__mach_port_allocate_qos_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t proto;

  NDR_record_t NDR;
  mach_port_right_t right;
  mach_port_qos_t qos;
  mach_port_name_t name;
 } __Request__mach_port_allocate_full_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  int table_entries;
 } __Request__task_set_port_space_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t name;
 } __Request__mach_port_get_srights_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__mach_port_space_info_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t name;
 } __Request__mach_port_dnrequest_info_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t name;
 } __Request__mach_port_kernel_object_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t name;
  mach_port_name_t pset;
 } __Request__mach_port_insert_member_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t name;
  mach_port_name_t pset;
 } __Request__mach_port_extract_member_t;

#pragma pack()






#define __RequestUnion__mach_port_subsystem__defined 
union __RequestUnion__mach_port_subsystem {
 __Request__mach_port_names_t Request_mach_port_names;
 __Request__mach_port_type_t Request_mach_port_type;
 __Request__mach_port_rename_t Request_mach_port_rename;
 __Request__mach_port_allocate_name_t Request_mach_port_allocate_name;
 __Request__mach_port_allocate_t Request_mach_port_allocate;
 __Request__mach_port_destroy_t Request_mach_port_destroy;
 __Request__mach_port_deallocate_t Request_mach_port_deallocate;
 __Request__mach_port_get_refs_t Request_mach_port_get_refs;
 __Request__mach_port_mod_refs_t Request_mach_port_mod_refs;
 __Request__mach_port_set_mscount_t Request_mach_port_set_mscount;
 __Request__mach_port_get_set_status_t Request_mach_port_get_set_status;
 __Request__mach_port_move_member_t Request_mach_port_move_member;
 __Request__mach_port_request_notification_t Request_mach_port_request_notification;
 __Request__mach_port_insert_right_t Request_mach_port_insert_right;
 __Request__mach_port_extract_right_t Request_mach_port_extract_right;
 __Request__mach_port_set_seqno_t Request_mach_port_set_seqno;
 __Request__mach_port_get_attributes_t Request_mach_port_get_attributes;
 __Request__mach_port_set_attributes_t Request_mach_port_set_attributes;
 __Request__mach_port_allocate_qos_t Request_mach_port_allocate_qos;
 __Request__mach_port_allocate_full_t Request_mach_port_allocate_full;
 __Request__task_set_port_space_t Request_task_set_port_space;
 __Request__mach_port_get_srights_t Request_mach_port_get_srights;
 __Request__mach_port_space_info_t Request_mach_port_space_info;
 __Request__mach_port_dnrequest_info_t Request_mach_port_dnrequest_info;
 __Request__mach_port_kernel_object_t Request_mach_port_kernel_object;
 __Request__mach_port_insert_member_t Request_mach_port_insert_member;
 __Request__mach_port_extract_member_t Request_mach_port_extract_member;
};




#define __Reply__mach_port_subsystem__defined 


#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_ool_descriptor_t names;
  mach_msg_ool_descriptor_t types;

  NDR_record_t NDR;
  mach_msg_type_number_t namesCnt;
  mach_msg_type_number_t typesCnt;
 } __Reply__mach_port_names_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_port_type_t ptype;
 } __Reply__mach_port_type_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__mach_port_rename_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__mach_port_allocate_name_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_port_name_t name;
 } __Reply__mach_port_allocate_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__mach_port_destroy_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__mach_port_deallocate_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_port_urefs_t refs;
 } __Reply__mach_port_get_refs_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__mach_port_mod_refs_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__mach_port_set_mscount_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_ool_descriptor_t members;

  NDR_record_t NDR;
  mach_msg_type_number_t membersCnt;
 } __Reply__mach_port_get_set_status_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__mach_port_move_member_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t previous;

 } __Reply__mach_port_request_notification_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__mach_port_insert_right_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t poly;

 } __Reply__mach_port_extract_right_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__mach_port_set_seqno_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_msg_type_number_t port_info_outCnt;
  integer_t port_info_out[10];
 } __Reply__mach_port_get_attributes_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__mach_port_set_attributes_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_port_qos_t qos;
  mach_port_name_t name;
 } __Reply__mach_port_allocate_qos_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_port_qos_t qos;
  mach_port_name_t name;
 } __Reply__mach_port_allocate_full_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__task_set_port_space_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_port_rights_t srights;
 } __Reply__mach_port_get_srights_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_ool_descriptor_t table_info;
  mach_msg_ool_descriptor_t tree_info;

  NDR_record_t NDR;
  ipc_info_space_t space_info;
  mach_msg_type_number_t table_infoCnt;
  mach_msg_type_number_t tree_infoCnt;
 } __Reply__mach_port_space_info_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  unsigned dnr_total;
  unsigned dnr_used;
 } __Reply__mach_port_dnrequest_info_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  unsigned object_type;
  vm_offset_t object_addr;
 } __Reply__mach_port_kernel_object_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__mach_port_insert_member_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__mach_port_extract_member_t;

#pragma pack()






#define __ReplyUnion__mach_port_subsystem__defined 
union __ReplyUnion__mach_port_subsystem {
 __Reply__mach_port_names_t Reply_mach_port_names;
 __Reply__mach_port_type_t Reply_mach_port_type;
 __Reply__mach_port_rename_t Reply_mach_port_rename;
 __Reply__mach_port_allocate_name_t Reply_mach_port_allocate_name;
 __Reply__mach_port_allocate_t Reply_mach_port_allocate;
 __Reply__mach_port_destroy_t Reply_mach_port_destroy;
 __Reply__mach_port_deallocate_t Reply_mach_port_deallocate;
 __Reply__mach_port_get_refs_t Reply_mach_port_get_refs;
 __Reply__mach_port_mod_refs_t Reply_mach_port_mod_refs;
 __Reply__mach_port_set_mscount_t Reply_mach_port_set_mscount;
 __Reply__mach_port_get_set_status_t Reply_mach_port_get_set_status;
 __Reply__mach_port_move_member_t Reply_mach_port_move_member;
 __Reply__mach_port_request_notification_t Reply_mach_port_request_notification;
 __Reply__mach_port_insert_right_t Reply_mach_port_insert_right;
 __Reply__mach_port_extract_right_t Reply_mach_port_extract_right;
 __Reply__mach_port_set_seqno_t Reply_mach_port_set_seqno;
 __Reply__mach_port_get_attributes_t Reply_mach_port_get_attributes;
 __Reply__mach_port_set_attributes_t Reply_mach_port_set_attributes;
 __Reply__mach_port_allocate_qos_t Reply_mach_port_allocate_qos;
 __Reply__mach_port_allocate_full_t Reply_mach_port_allocate_full;
 __Reply__task_set_port_space_t Reply_task_set_port_space;
 __Reply__mach_port_get_srights_t Reply_mach_port_get_srights;
 __Reply__mach_port_space_info_t Reply_mach_port_space_info;
 __Reply__mach_port_dnrequest_info_t Reply_mach_port_dnrequest_info;
 __Reply__mach_port_kernel_object_t Reply_mach_port_kernel_object;
 __Reply__mach_port_insert_member_t Reply_mach_port_insert_member;
 __Reply__mach_port_extract_member_t Reply_mach_port_extract_member;
};



#define subsystem_to_name_map_mach_port { "mach_port_names", 3200 }, { "mach_port_type", 3201 }, { "mach_port_rename", 3202 }, { "mach_port_allocate_name", 3203 }, { "mach_port_allocate", 3204 }, { "mach_port_destroy", 3205 }, { "mach_port_deallocate", 3206 }, { "mach_port_get_refs", 3207 }, { "mach_port_mod_refs", 3208 }, { "mach_port_set_mscount", 3210 }, { "mach_port_get_set_status", 3211 }, { "mach_port_move_member", 3212 }, { "mach_port_request_notification", 3213 }, { "mach_port_insert_right", 3214 }, { "mach_port_extract_right", 3215 }, { "mach_port_set_seqno", 3216 }, { "mach_port_get_attributes", 3217 }, { "mach_port_set_attributes", 3218 }, { "mach_port_allocate_qos", 3219 }, { "mach_port_allocate_full", 3220 }, { "task_set_port_space", 3221 }, { "mach_port_get_srights", 3222 }, { "mach_port_space_info", 3223 }, { "mach_port_dnrequest_info", 3224 }, { "mach_port_kernel_object", 3225 }, { "mach_port_insert_member", 3226 }, { "mach_port_extract_member", 3227 }
# 69 "/usr/include/mach/mach.h" 2 3 4
# 1 "/usr/include/mach/mach_init.h" 1 3 4
# 59 "/usr/include/mach/mach_init.h" 3 4
#define _MACH_INIT_ 1
# 70 "/usr/include/mach/mach_init.h" 3 4
extern "C" {
extern mach_port_t mach_task_self(void);
extern mach_port_t mach_host_self(void);
extern mach_port_t mach_thread_self(void);
extern kern_return_t host_page_size(host_t, vm_size_t *);

extern mach_port_t mach_task_self_;
#define mach_task_self() mach_task_self_
#define current_task() mach_task_self()

}
# 1 "/usr/include/mach/mach_traps.h" 1 3 4
# 67 "/usr/include/mach/mach_traps.h" 3 4
#define _MACH_MACH_TRAPS_H_ 
# 82 "/usr/include/mach/mach_traps.h" 3 4
extern "C" {



extern boolean_t swtch_pri(int pri);

extern boolean_t swtch(void);

extern kern_return_t thread_switch(
    mach_port_name_t thread_name,
    int option,
    mach_msg_timeout_t option_time);

extern mach_port_name_t task_self_trap(void);





extern kern_return_t task_for_pid(
    mach_port_name_t target_tport,
    int pid,
    mach_port_name_t *t);

extern kern_return_t task_name_for_pid(
    mach_port_name_t target_tport,
    int pid,
    mach_port_name_t *tn);

extern kern_return_t pid_for_task(
    mach_port_name_t t,
    int *x);




extern kern_return_t map_fd(
    int fd,
    vm_offset_t offset,
    vm_offset_t *va,
    boolean_t findspace,
    vm_size_t size);




}
# 82 "/usr/include/mach/mach_init.h" 2 3 4
extern "C" {





extern mach_port_t bootstrap_port;
extern mach_port_t name_server_port;
extern mach_port_t environment_port;
extern mach_port_t service_port;






#define NAME_SERVER_SLOT 0
#define ENVIRONMENT_SLOT 1
#define SERVICE_SLOT 2

#define MACH_PORTS_SLOTS_USED 3






extern vm_size_t vm_page_size;
extern vm_size_t vm_page_mask;
extern int vm_page_shift;

#define trunc_page(x) ((x) & (~(vm_page_size - 1)))
#define round_page(x) trunc_page((x) + (vm_page_size - 1))






extern int (*vprintf_stderr_func)(const char *format, va_list ap);
}
# 70 "/usr/include/mach/mach.h" 2 3 4
# 1 "/usr/include/mach/mach_host.h" 1 3 4

#define _mach_host_user_ 
# 29 "/usr/include/mach/mach_host.h" 3 4
#define mach_host_MSG_COUNT 19
# 44 "/usr/include/mach/mach_host.h" 3 4
extern "C" {






extern

kern_return_t host_info
(
 host_t host,
 host_flavor_t flavor,
 host_info_t host_info_out,
 mach_msg_type_number_t *host_info_outCnt
);





extern

kern_return_t host_kernel_version
(
 host_t host,
 kernel_version_t kernel_version
);





extern

kern_return_t _host_page_size
(
 host_t host,
 vm_size_t *out_page_size
);





extern

kern_return_t mach_memory_object_memory_entry
(
 host_t host,
 boolean_t internal,
 vm_size_t size,
 vm_prot_t permission,
 memory_object_t pager,
 mach_port_t *entry_handle
);





extern

kern_return_t host_processor_info
(
 host_t host,
 processor_flavor_t flavor,
 natural_t *out_processor_count,
 processor_info_array_t *out_processor_info,
 mach_msg_type_number_t *out_processor_infoCnt
);





extern

kern_return_t host_get_io_master
(
 host_t host,
 io_master_t *io_master
);





extern

kern_return_t host_get_clock_service
(
 host_t host,
 clock_id_t clock_id,
 clock_serv_t *clock_serv
);





extern

kern_return_t kmod_get_info
(
 host_t host,
 kmod_args_t *modules,
 mach_msg_type_number_t *modulesCnt
);





extern

kern_return_t host_zone_info
(
 host_t host,
 zone_name_array_t *names,
 mach_msg_type_number_t *namesCnt,
 zone_info_array_t *info,
 mach_msg_type_number_t *infoCnt
);





extern

kern_return_t host_virtual_physical_table_info
(
 host_t host,
 hash_info_bucket_array_t *info,
 mach_msg_type_number_t *infoCnt
);





extern

kern_return_t host_ipc_hash_info
(
 host_t host,
 hash_info_bucket_array_t *info,
 mach_msg_type_number_t *infoCnt
);





extern

kern_return_t enable_bluebox
(
 host_t host,
 unsigned taskID,
 unsigned TWI_TableStart,
 unsigned Desc_TableStart
);





extern

kern_return_t disable_bluebox
(
 host_t host
);





extern

kern_return_t processor_set_default
(
 host_t host,
 processor_set_name_t *default_set
);





extern

kern_return_t processor_set_create
(
 host_t host,
 processor_set_t *new_set,
 processor_set_name_t *new_name
);





extern

kern_return_t mach_memory_object_memory_entry_64
(
 host_t host,
 boolean_t internal,
 memory_object_size_t size,
 vm_prot_t permission,
 memory_object_t pager,
 mach_port_t *entry_handle
);





extern

kern_return_t host_statistics
(
 host_t host_priv,
 host_flavor_t flavor,
 host_info_t host_info_out,
 mach_msg_type_number_t *host_info_outCnt
);





extern

kern_return_t host_request_notification
(
 host_t host,
 host_flavor_t notify_type,
 mach_port_t notify_port
);





extern

kern_return_t host_lockgroup_info
(
 host_t host,
 lockgroup_info_array_t *lockgroup_info,
 mach_msg_type_number_t *lockgroup_infoCnt
);

}
# 317 "/usr/include/mach/mach_host.h" 3 4
#define __Request__mach_host_subsystem__defined 


#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  host_flavor_t flavor;
  mach_msg_type_number_t host_info_outCnt;
 } __Request__host_info_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__host_kernel_version_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request___host_page_size_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t pager;

  NDR_record_t NDR;
  boolean_t internal;
  vm_size_t size;
  vm_prot_t permission;
 } __Request__mach_memory_object_memory_entry_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  processor_flavor_t flavor;
 } __Request__host_processor_info_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__host_get_io_master_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  clock_id_t clock_id;
 } __Request__host_get_clock_service_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__kmod_get_info_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__host_zone_info_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__host_virtual_physical_table_info_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__host_ipc_hash_info_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  unsigned taskID;
  unsigned TWI_TableStart;
  unsigned Desc_TableStart;
 } __Request__enable_bluebox_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__disable_bluebox_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__processor_set_default_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__processor_set_create_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t pager;

  NDR_record_t NDR;
  boolean_t internal;
  memory_object_size_t size;
  vm_prot_t permission;
 } __Request__mach_memory_object_memory_entry_64_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  host_flavor_t flavor;
  mach_msg_type_number_t host_info_outCnt;
 } __Request__host_statistics_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t notify_port;

  NDR_record_t NDR;
  host_flavor_t notify_type;
 } __Request__host_request_notification_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__host_lockgroup_info_t;

#pragma pack()






#define __RequestUnion__mach_host_subsystem__defined 
union __RequestUnion__mach_host_subsystem {
 __Request__host_info_t Request_host_info;
 __Request__host_kernel_version_t Request_host_kernel_version;
 __Request___host_page_size_t Request__host_page_size;
 __Request__mach_memory_object_memory_entry_t Request_mach_memory_object_memory_entry;
 __Request__host_processor_info_t Request_host_processor_info;
 __Request__host_get_io_master_t Request_host_get_io_master;
 __Request__host_get_clock_service_t Request_host_get_clock_service;
 __Request__kmod_get_info_t Request_kmod_get_info;
 __Request__host_zone_info_t Request_host_zone_info;
 __Request__host_virtual_physical_table_info_t Request_host_virtual_physical_table_info;
 __Request__host_ipc_hash_info_t Request_host_ipc_hash_info;
 __Request__enable_bluebox_t Request_enable_bluebox;
 __Request__disable_bluebox_t Request_disable_bluebox;
 __Request__processor_set_default_t Request_processor_set_default;
 __Request__processor_set_create_t Request_processor_set_create;
 __Request__mach_memory_object_memory_entry_64_t Request_mach_memory_object_memory_entry_64;
 __Request__host_statistics_t Request_host_statistics;
 __Request__host_request_notification_t Request_host_request_notification;
 __Request__host_lockgroup_info_t Request_host_lockgroup_info;
};




#define __Reply__mach_host_subsystem__defined 


#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_msg_type_number_t host_info_outCnt;
  integer_t host_info_out[15];
 } __Reply__host_info_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_msg_type_number_t kernel_versionOffset;
  mach_msg_type_number_t kernel_versionCnt;
  char kernel_version[512];
 } __Reply__host_kernel_version_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  vm_size_t out_page_size;
 } __Reply___host_page_size_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t entry_handle;

 } __Reply__mach_memory_object_memory_entry_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_ool_descriptor_t out_processor_info;

  NDR_record_t NDR;
  natural_t out_processor_count;
  mach_msg_type_number_t out_processor_infoCnt;
 } __Reply__host_processor_info_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t io_master;

 } __Reply__host_get_io_master_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t clock_serv;

 } __Reply__host_get_clock_service_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_ool_descriptor_t modules;

  NDR_record_t NDR;
  mach_msg_type_number_t modulesCnt;
 } __Reply__kmod_get_info_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_ool_descriptor_t names;
  mach_msg_ool_descriptor_t info;

  NDR_record_t NDR;
  mach_msg_type_number_t namesCnt;
  mach_msg_type_number_t infoCnt;
 } __Reply__host_zone_info_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_ool_descriptor_t info;

  NDR_record_t NDR;
  mach_msg_type_number_t infoCnt;
 } __Reply__host_virtual_physical_table_info_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_ool_descriptor_t info;

  NDR_record_t NDR;
  mach_msg_type_number_t infoCnt;
 } __Reply__host_ipc_hash_info_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__enable_bluebox_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__disable_bluebox_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t default_set;

 } __Reply__processor_set_default_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t new_set;
  mach_msg_port_descriptor_t new_name;

 } __Reply__processor_set_create_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t entry_handle;

 } __Reply__mach_memory_object_memory_entry_64_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_msg_type_number_t host_info_outCnt;
  integer_t host_info_out[15];
 } __Reply__host_statistics_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__host_request_notification_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_ool_descriptor_t lockgroup_info;

  NDR_record_t NDR;
  mach_msg_type_number_t lockgroup_infoCnt;
 } __Reply__host_lockgroup_info_t;

#pragma pack()






#define __ReplyUnion__mach_host_subsystem__defined 
union __ReplyUnion__mach_host_subsystem {
 __Reply__host_info_t Reply_host_info;
 __Reply__host_kernel_version_t Reply_host_kernel_version;
 __Reply___host_page_size_t Reply__host_page_size;
 __Reply__mach_memory_object_memory_entry_t Reply_mach_memory_object_memory_entry;
 __Reply__host_processor_info_t Reply_host_processor_info;
 __Reply__host_get_io_master_t Reply_host_get_io_master;
 __Reply__host_get_clock_service_t Reply_host_get_clock_service;
 __Reply__kmod_get_info_t Reply_kmod_get_info;
 __Reply__host_zone_info_t Reply_host_zone_info;
 __Reply__host_virtual_physical_table_info_t Reply_host_virtual_physical_table_info;
 __Reply__host_ipc_hash_info_t Reply_host_ipc_hash_info;
 __Reply__enable_bluebox_t Reply_enable_bluebox;
 __Reply__disable_bluebox_t Reply_disable_bluebox;
 __Reply__processor_set_default_t Reply_processor_set_default;
 __Reply__processor_set_create_t Reply_processor_set_create;
 __Reply__mach_memory_object_memory_entry_64_t Reply_mach_memory_object_memory_entry_64;
 __Reply__host_statistics_t Reply_host_statistics;
 __Reply__host_request_notification_t Reply_host_request_notification;
 __Reply__host_lockgroup_info_t Reply_host_lockgroup_info;
};



#define subsystem_to_name_map_mach_host { "host_info", 200 }, { "host_kernel_version", 201 }, { "_host_page_size", 202 }, { "mach_memory_object_memory_entry", 203 }, { "host_processor_info", 204 }, { "host_get_io_master", 205 }, { "host_get_clock_service", 206 }, { "kmod_get_info", 207 }, { "host_zone_info", 208 }, { "host_virtual_physical_table_info", 209 }, { "host_ipc_hash_info", 210 }, { "enable_bluebox", 211 }, { "disable_bluebox", 212 }, { "processor_set_default", 213 }, { "processor_set_create", 214 }, { "mach_memory_object_memory_entry_64", 215 }, { "host_statistics", 216 }, { "host_request_notification", 217 }, { "host_lockgroup_info", 218 }
# 71 "/usr/include/mach/mach.h" 2 3 4
# 1 "/usr/include/mach/thread_switch.h" 1 3 4
# 60 "/usr/include/mach/thread_switch.h" 3 4
#define _MACH_THREAD_SWITCH_H_ 
# 71 "/usr/include/mach/thread_switch.h" 3 4
#define SWITCH_OPTION_NONE 0
#define SWITCH_OPTION_DEPRESS 1
#define SWITCH_OPTION_WAIT 2

#define valid_switch_option(opt) (0 <= (opt) && (opt) <= 2)
# 72 "/usr/include/mach/mach.h" 2 3 4

# 1 "/usr/include/mach/rpc.h" 1 3 4
# 37 "/usr/include/mach/rpc.h" 3 4
#define _MACH_RPC_H_ 
# 46 "/usr/include/mach/rpc.h" 3 4
# 1 "/usr/include/mach/machine/rpc.h" 1 3 4
# 30 "/usr/include/mach/machine/rpc.h" 3 4
#define _MACH_MACHINE_RPC_H_ 




# 1 "/usr/include/mach/i386/rpc.h" 1 3 4
# 33 "/usr/include/mach/i386/rpc.h" 3 4
#define _MACH_I386_RPC_H_ 
# 36 "/usr/include/mach/machine/rpc.h" 2 3 4
# 47 "/usr/include/mach/rpc.h" 2 3 4
# 59 "/usr/include/mach/rpc.h" 3 4
typedef unsigned int routine_arg_type;
typedef unsigned int routine_arg_offset;
typedef unsigned int routine_arg_size;




struct rpc_routine_arg_descriptor {
 routine_arg_type type;
        routine_arg_size size;
        routine_arg_size count;
 routine_arg_offset offset;
};
typedef struct rpc_routine_arg_descriptor *rpc_routine_arg_descriptor_t;

struct rpc_routine_descriptor {
 mig_impl_routine_t impl_routine;
 mig_stub_routine_t stub_routine;
 unsigned int argc;
 unsigned int descr_count;

 rpc_routine_arg_descriptor_t
    arg_descr;

 unsigned int max_reply_msg;
};
typedef struct rpc_routine_descriptor *rpc_routine_descriptor_t;

#define RPC_DESCR_SIZE(x) ((x)->descr_count * sizeof(struct rpc_routine_arg_descriptor))


struct rpc_signature {
    struct rpc_routine_descriptor rd;
    struct rpc_routine_arg_descriptor rad[1];
};

#define RPC_SIGBUF_SIZE 8
# 115 "/usr/include/mach/rpc.h" 3 4
struct rpc_subsystem {
 void *reserved;

 mach_msg_id_t start;
 mach_msg_id_t end;
 unsigned int maxsize;
 vm_address_t base_addr;

 struct rpc_routine_descriptor
   routine[1
     ];

 struct rpc_routine_arg_descriptor
   arg_descriptor[1
     ];
};
typedef struct rpc_subsystem *rpc_subsystem_t;

#define RPC_SUBSYSTEM_NULL ((rpc_subsystem_t) 0)
# 74 "/usr/include/mach/mach.h" 2 3 4



# 1 "/usr/include/mach/mach_error.h" 1 3 4
# 63 "/usr/include/mach/mach_error.h" 3 4
#define _MACH_ERROR_ 1

# 1 "/usr/include/mach/error.h" 1 3 4
# 66 "/usr/include/mach/error.h" 3 4
#define _MACH_ERROR_H_ 
# 78 "/usr/include/mach/error.h" 3 4
#define err_none (mach_error_t)0
#define ERR_SUCCESS (mach_error_t)0
#define ERR_ROUTINE_NIL (mach_error_fn_t)0


#define err_system(x) (((x)&0x3f)<<26)
#define err_sub(x) (((x)&0xfff)<<14)

#define err_get_system(err) (((err)>>26)&0x3f)
#define err_get_sub(err) (((err)>>14)&0xfff)
#define err_get_code(err) ((err)&0x3fff)

#define system_emask (err_system(0x3f))
#define sub_emask (err_sub(0xfff))
#define code_emask (0x3fff)



#define err_kern err_system(0x0)
#define err_us err_system(0x1)
#define err_server err_system(0x2)
#define err_ipc err_system(0x3)
#define err_mach_ipc err_system(0x4)
#define err_dipc err_system(0x7)
#define err_local err_system(0x3e)
#define err_ipc_compat err_system(0x3f)

#define err_max_system 0x3f



#define unix_err(errno) (err_kern|err_sub(3)|errno)

typedef kern_return_t mach_error_t;
typedef mach_error_t (* mach_error_fn_t)( void );
# 66 "/usr/include/mach/mach_error.h" 2 3 4



extern "C" {
char *mach_error_string(



 mach_error_t error_value
    );

void mach_error(



 char *str,
 mach_error_t error_value
    );

char *mach_error_type(



 mach_error_t error_value
    );
}
# 78 "/usr/include/mach/mach.h" 2 3 4



extern "C" {



extern void panic_init(mach_port_t);
extern void panic(const char *, ...);

extern void safe_gets(char *,
       char *,
       int);

extern void slot_name(cpu_type_t,
       cpu_subtype_t,
       char **,
       char **);

extern void mig_reply_setup(mach_msg_header_t *,
      mach_msg_header_t *);

extern void mach_msg_destroy(mach_msg_header_t *);

extern mach_msg_return_t mach_msg_receive(mach_msg_header_t *);

extern mach_msg_return_t mach_msg_send(mach_msg_header_t *);

extern mach_msg_return_t mach_msg_server_once(boolean_t (*)
           (mach_msg_header_t *,
            mach_msg_header_t *),
           mach_msg_size_t,
           mach_port_t,
           mach_msg_options_t);
extern mach_msg_return_t mach_msg_server(boolean_t (*)
      (mach_msg_header_t *,
       mach_msg_header_t *),
      mach_msg_size_t,
      mach_port_t,
      mach_msg_options_t);




extern kern_return_t clock_get_res(mach_port_t,
          clock_res_t *);
extern kern_return_t clock_set_res(mach_port_t,
          clock_res_t);

extern kern_return_t clock_sleep(mach_port_t,
        int,
        mach_timespec_t,
        mach_timespec_t *);
}
# 27 "./macosx/xm-macosx.h" 2


# 1 "/usr/include/signal.h" 1 3 4
# 59 "/usr/include/signal.h" 3 4
#define _USER_SIGNAL_H 



# 1 "/usr/include/sys/signal.h" 1 3 4
# 70 "/usr/include/sys/signal.h" 3 4
#define _SYS_SIGNAL_H_ 




#define __DARWIN_NSIG 32


#define NSIG __DARWIN_NSIG


# 1 "/usr/include/machine/signal.h" 1 3 4
# 29 "/usr/include/machine/signal.h" 3 4
#define _BSD_MACHINE_SIGNAL_H_ 




# 1 "/usr/include/i386/signal.h" 1 3 4
# 34 "/usr/include/i386/signal.h" 3 4
#define _I386_SIGNAL_H_ 1




typedef int sig_atomic_t;
# 54 "/usr/include/i386/signal.h" 3 4
#define __need_struct_sigcontext 
# 1 "/usr/include/i386/_structs.h" 1 3 4
# 102 "/usr/include/i386/_structs.h" 3 4
#define I386_MCONTEXT_SIZE sizeof(struct mcontext)
# 56 "/usr/include/i386/signal.h" 2 3 4
# 35 "/usr/include/machine/signal.h" 2 3 4
# 82 "/usr/include/sys/signal.h" 2 3 4

#define SIGHUP 1
#define SIGINT 2
#define SIGQUIT 3
#define SIGILL 4
#define SIGTRAP 5
#define SIGABRT 6



#define SIGIOT SIGABRT
#define SIGEMT 7

#define SIGFPE 8
#define SIGKILL 9
#define SIGBUS 10
#define SIGSEGV 11
#define SIGSYS 12
#define SIGPIPE 13
#define SIGALRM 14
#define SIGTERM 15
#define SIGURG 16
#define SIGSTOP 17
#define SIGTSTP 18
#define SIGCONT 19
#define SIGCHLD 20
#define SIGTTIN 21
#define SIGTTOU 22

#define SIGIO 23

#define SIGXCPU 24
#define SIGXFSZ 25
#define SIGVTALRM 26
#define SIGPROF 27

#define SIGWINCH 28
#define SIGINFO 29

#define SIGUSR1 30
#define SIGUSR2 31







#define SIG_DFL (void (*)(int))0
#define SIG_IGN (void (*)(int))1
#define SIG_HOLD (void (*)(int))5
#define SIG_ERR ((void (*)(int))-1)
# 145 "/usr/include/sys/signal.h" 3 4
#define __need_mcontext_t 
#define __need_stack_t 
#define __need_ucontext_t 






# 1 "/usr/include/sys/_structs.h" 1 3 4
# 34 "/usr/include/sys/_structs.h" 3 4
#define __need_struct_ucontext 
# 46 "/usr/include/sys/_structs.h" 3 4
#define __need_struct_mcontext 
# 57 "/usr/include/sys/_structs.h" 3 4
# 1 "/usr/include/machine/_structs.h" 1 3 4
# 31 "/usr/include/machine/_structs.h" 3 4
# 1 "/usr/include/i386/_structs.h" 1 3 4
# 43 "/usr/include/i386/_structs.h" 3 4
#undef __need_struct_mcontext



#define _STRUCT_MCONTEXT32 struct __darwin_mcontext32
struct __darwin_mcontext32
{
 struct __darwin_i386_exception_state __es;
 struct __darwin_i386_thread_state __ss;
 struct __darwin_i386_float_state __fs;
};
# 67 "/usr/include/i386/_structs.h" 3 4
#define _STRUCT_MCONTEXT64 struct __darwin_mcontext64
struct __darwin_mcontext64
{
 struct __darwin_x86_exception_state64 __es;
 struct __darwin_x86_thread_state64 __ss;
 struct __darwin_x86_float_state64 __fs;
};
# 87 "/usr/include/i386/_structs.h" 3 4
#undef __need_mcontext_t

#define _MCONTEXT_T 




typedef struct __darwin_mcontext32 *mcontext_t;
#define _STRUCT_MCONTEXT _STRUCT_MCONTEXT32
# 32 "/usr/include/machine/_structs.h" 2 3 4
# 58 "/usr/include/sys/_structs.h" 2 3 4




#define __need_struct_sigaltstack 




#undef __need_struct_sigaltstack



#define _STRUCT_SIGALTSTACK struct __darwin_sigaltstack



struct __darwin_sigaltstack
{
 void *ss_sp;
 __darwin_size_t ss_size;
 int ss_flags;
};
# 121 "/usr/include/sys/_structs.h" 3 4
#undef __need_struct_ucontext


#define _STRUCT_UCONTEXT struct __darwin_ucontext



struct __darwin_ucontext
{
 int uc_onstack;
 __darwin_sigset_t uc_sigmask;
 struct __darwin_sigaltstack uc_stack;
 struct __darwin_ucontext *uc_link;
 __darwin_size_t uc_mcsize;
 struct __darwin_mcontext32 *uc_mcontext;



};
# 215 "/usr/include/sys/_structs.h" 3 4
#undef __need_stack_t

#define _STACK_T 
typedef struct __darwin_sigaltstack stack_t;




#undef __need_ucontext_t


#define _UCONTEXT_T 
typedef struct __darwin_ucontext ucontext_t;
# 155 "/usr/include/sys/signal.h" 2 3 4
# 181 "/usr/include/sys/signal.h" 3 4
union sigval {

 int sival_int;
 void *sival_ptr;
};

#define SIGEV_NONE 0
#define SIGEV_SIGNAL 1
#define SIGEV_THREAD 3

struct sigevent {
 int sigev_notify;
 int sigev_signo;
 union sigval sigev_value;
 void (*sigev_notify_function)(union sigval);
 pthread_attr_t *sigev_notify_attributes;
};


typedef struct __siginfo {
 int si_signo;
 int si_errno;
 int si_code;
 pid_t si_pid;
 uid_t si_uid;
 int si_status;
 void *si_addr;
 union sigval si_value;
 long si_band;
 unsigned long __pad[7];
} siginfo_t;
# 229 "/usr/include/sys/signal.h" 3 4
#define ILL_NOOP 0

#define ILL_ILLOPC 1
#define ILL_ILLTRP 2
#define ILL_PRVOPC 3
#define ILL_ILLOPN 4
#define ILL_ILLADR 5
#define ILL_PRVREG 6
#define ILL_COPROC 7
#define ILL_BADSTK 8



#define FPE_NOOP 0

#define FPE_FLTDIV 1
#define FPE_FLTOVF 2
#define FPE_FLTUND 3
#define FPE_FLTRES 4
#define FPE_FLTINV 5
#define FPE_FLTSUB 6
#define FPE_INTDIV 7
#define FPE_INTOVF 8



#define SEGV_NOOP 0

#define SEGV_MAPERR 1
#define SEGV_ACCERR 2



#define BUS_NOOP 0

#define BUS_ADRALN 1
#define BUS_ADRERR 2
#define BUS_OBJERR 3


#define TRAP_BRKPT 1
#define TRAP_TRACE 2



#define CLD_NOOP 0

#define CLD_EXITED 1
#define CLD_KILLED 2
#define CLD_DUMPED 3
#define CLD_TRAPPED 4
#define CLD_STOPPED 5
#define CLD_CONTINUED 6


#define POLL_IN 1
#define POLL_OUT 2
#define POLL_MSG 3
#define POLL_ERR 4
#define POLL_PRI 5
#define POLL_HUP 6


union __sigaction_u {
 void (*__sa_handler)(int);
 void (*__sa_sigaction)(int, struct __siginfo *,
         void *);
};


struct __sigaction {
 union __sigaction_u __sigaction_u;
 void (*sa_tramp)(void *, int, int, siginfo_t *, void *);
 sigset_t sa_mask;
 int sa_flags;
};




struct sigaction {
 union __sigaction_u __sigaction_u;
 sigset_t sa_mask;
 int sa_flags;
};




#define sa_handler __sigaction_u.__sa_handler
#define sa_sigaction __sigaction_u.__sa_sigaction

#define SA_ONSTACK 0x0001
#define SA_RESTART 0x0002
#define SA_RESETHAND 0x0004
#define SA_NOCLDSTOP 0x0008
#define SA_NODEFER 0x0010
#define SA_NOCLDWAIT 0x0020
#define SA_SIGINFO 0x0040

#define SA_USERTRAMP 0x0100

#define SA_64REGSET 0x0200





#define SA_USERSPACE_MASK (SA_ONSTACK | SA_RESTART | SA_RESETHAND | SA_NOCLDSTOP | SA_NODEFER | SA_NOCLDWAIT | SA_SIGINFO)




#define SIG_BLOCK 1
#define SIG_UNBLOCK 2
#define SIG_SETMASK 3


#define SI_USER 0x10001
#define SI_QUEUE 0x10002
#define SI_TIMER 0x10003
#define SI_ASYNCIO 0x10004
#define SI_MESGQ 0x10005


typedef void (*sig_t)(int);






#define SS_ONSTACK 0x0001
#define SS_DISABLE 0x0004
#define MINSIGSTKSZ 32768
#define SIGSTKSZ 131072






struct sigvec {
 void (*sv_handler)(int);
 int sv_mask;
 int sv_flags;
};

#define SV_ONSTACK SA_ONSTACK
#define SV_INTERRUPT SA_RESTART
#define SV_RESETHAND SA_RESETHAND
#define SV_NODEFER SA_NODEFER
#define SV_NOCLDSTOP SA_NOCLDSTOP
#define SV_SIGINFO SA_SIGINFO

#define sv_onstack sv_flags





struct sigstack {
 char *ss_sp;
 int ss_onstack;
};






#define sigmask(m) (1 << ((m)-1))


#define BADSIG SIG_ERR
# 412 "/usr/include/sys/signal.h" 3 4
extern "C" {
void (*signal(int, void (*)(int)))(int);
}
# 64 "/usr/include/signal.h" 2 3 4







extern const char *const sys_signame[32];
extern const char *const sys_siglist[32];


extern "C" {
int raise(int);
}


extern "C" {
void (*bsd_signal(int, void (*)(int)))(int);
int kill(pid_t, int) __asm("_" "kill" "$UNIX2003");
int killpg(pid_t, int) __asm("_" "killpg" "$UNIX2003");
int pthread_kill(pthread_t, int);
int pthread_sigmask(int, const sigset_t *, sigset_t *) __asm("_" "pthread_sigmask" "$UNIX2003");
int sigaction(int, const struct sigaction * ,
     struct sigaction * );
int sigaddset(sigset_t *, int);
int sigaltstack(const stack_t * , stack_t * ) __asm("_" "sigaltstack" "$UNIX2003");
int sigdelset(sigset_t *, int);
int sigemptyset(sigset_t *);
int sigfillset(sigset_t *);
int sighold(int);
int sigignore(int);
int siginterrupt(int, int);
int sigismember(const sigset_t *, int);
int sigpause(int) __asm("_" "sigpause" "$UNIX2003");
int sigpending(sigset_t *);
int sigprocmask(int, const sigset_t * , sigset_t * );
int sigrelse(int);
void (*sigset(int, void (*)(int)))(int);
int sigsuspend(const sigset_t *) __asm("_" "sigsuspend" "$UNIX2003");
int sigwait(const sigset_t * , int * ) __asm("_" "sigwait" "$UNIX2003");

void psignal(unsigned int, const char *);
int sigblock(int);
int sigsetmask(int);
int sigvec(int, struct sigvec *, struct sigvec *);

}




static 
# 115 "/usr/include/signal.h"
      __inline__ 
# 115 "/usr/include/signal.h" 3 4
               int
__sigbits(int __signo)
{
    return __signo > 32 ? 0 : (1 << (__signo - 1));
}




#define sigaddset(set,signo) (*(set) |= __sigbits(signo), 0)
#define sigdelset(set,signo) (*(set) &= ~__sigbits(signo), 0)
#define sigismember(set,signo) ((*(set) & __sigbits(signo)) != 0)
#define sigemptyset(set) (*(set) = 0, 0)
#define sigfillset(set) (*(set) = ~(sigset_t)0, 0)
# 30 "./macosx/xm-macosx.h" 2


#define _NSIG NSIG





#undef HAVE_TERMIOS_H



# 1 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include-fixed/limits.h" 1 3 4
# 43 "./macosx/xm-macosx.h" 2


# 44 "./macosx/xm-macosx.h"
extern void macosx_resize_window_handler(void *);
extern void macosx_resize_window(int *width, int *height);

#define SIGWINCH_HANDLER macosx_resize_window_handler

#define SIGWINCH_HANDLER_BODY extern void macosx_resize_window_handler(void *d ATTRIBUTE_UNUSED) { macosx_resize_window((int *)&lines_per_page, (int *)&chars_per_line); }
# 26 "xm.h" 2
# 1136 "defs.h" 2
# 1144 "defs.h"
# 1 "nm.h" 1
# 25 "nm.h"
#define NM_I386NEXT_H 




#define I386_USE_GENERIC_WATCHPOINTS 1

# 1 "./config/i386/nm-i386.h" 1
# 23 "./config/i386/nm-i386.h"
#define NM_I386_H 1







extern void i386_cleanup_dregs (void);




extern int i386_insert_watchpoint (CORE_ADDR addr, int len, int type);




extern int i386_remove_watchpoint (CORE_ADDR addr, int len, int type);



extern int i386_region_ok_for_watchpoint (CORE_ADDR addr, int len);



extern int i386_stopped_by_hwbp (void);




extern int i386_stopped_data_address (CORE_ADDR *);



extern int i386_insert_hw_breakpoint (CORE_ADDR addr, gdb_byte *shadow);



extern int i386_remove_hw_breakpoint (CORE_ADDR addr, gdb_byte *shadow);
# 81 "./config/i386/nm-i386.h"
#define TARGET_CAN_USE_HARDWARE_WATCHPOINT(type,cnt,ot) 1




#define TARGET_REGION_OK_FOR_HW_WATCHPOINT(addr,len) i386_region_ok_for_watchpoint (addr, len)






#define HAVE_CONTINUABLE_WATCHPOINT 1

extern int i386_stopped_by_watchpoint (void);

#define STOPPED_BY_WATCHPOINT(W) (i386_stopped_by_watchpoint () != 0)

#define target_stopped_data_address(target,x) i386_stopped_data_address(x)



#define target_insert_watchpoint(addr,len,type) i386_insert_watchpoint (addr, len, type)


#define target_remove_watchpoint(addr,len,type) i386_remove_watchpoint (addr, len, type)


#define target_insert_hw_breakpoint(addr,shadow) i386_insert_hw_breakpoint (addr, shadow)


#define target_remove_hw_breakpoint(addr,shadow) i386_remove_hw_breakpoint (addr, shadow)




#define CHILD_POST_STARTUP_INFERIOR 
# 33 "nm.h" 2
# 46 "nm.h"
#undef STOPPED_BY_WATCHPOINT
#undef TARGET_CAN_USE_HARDWARE_WATCHPOINT
#undef HAVE_CONTINUABLE_WATCHPOINT
#undef target_stopped_data_address
#undef target_insert_watchpoint
#undef target_remove_watchpoint
#undef target_insert_hw_breakpoint
#undef target_remove_hw_breakpoint

extern void i386_macosx_dr_set_control(unsigned long control);
#define I386_DR_LOW_SET_CONTROL(control) i386_macosx_dr_set_control(control)


extern void i386_macosx_dr_set_addr(int regnum, CORE_ADDR addr);
#define I386_DR_LOW_SET_ADDR(regnum,addr) i386_macosx_dr_set_addr(regnum, addr)


extern void i386_macosx_dr_reset_addr(int regnum);
#define I386_DR_LOW_RESET_ADDR(regnum) i386_macosx_dr_reset_addr(regnum)


extern unsigned long i386_macosx_dr_get_status(void);
#define I386_DR_LOW_GET_STATUS() i386_macosx_dr_get_status()




#define MACOSX_ACTUAL_HARDWARE_WATCHPOINTS_ARE_SUPPORTED 1



# 1 "./macosx/nm-macosx.h" 1
# 23 "./macosx/nm-macosx.h"
#define _NM_NEXTSTEP_H_ 

struct target_waitstatus;
struct target_ops;

extern int child_wait (int, struct target_waitstatus *, void *);
#define CHILD_WAIT 

#define FETCH_INFERIOR_REGISTERS 

#define DISABLE_UNSETTABLE_BREAK(addr) 1

enum ptracereq {
  PTRACE_TRACEME = 0,
  PTRACE_CHILDDONE = 0,
  PTRACE_PEEKTEXT,
  PTRACE_PEEKDATA,
  PTRACE_PEEKUSER,
  PTRACE_POKETEXT,
  PTRACE_POKEDATA,
  PTRACE_POKEUSER,
  PTRACE_CONT,
  PTRACE_KILL,
  PTRACE_SINGLESTEP,
  PTRACE_ATTACH,
  PTRACE_DETACH,
  PTRACE_SIGEXC,
  PTRACE_THUPDATE,
  PTRACE_ATTACHEXC
};
# 93 "./macosx/nm-macosx.h"
char **macosx_process_completer(const char *text, char *word);
#define PROCESS_COMPLETER macosx_process_completer


#define PROCESS_COMPLETER_WORD_BREAK_CHARACTERS gdb_completer_filename_word_break_characters


#define NM_NEXTSTEP 
# 78 "nm.h" 2
#define TARGET_NATIVE 
# 1145 "defs.h" 2







# 1 "tm.h" 1
# 24 "tm.h"
#define TM_I386NEXT_H 

#define HAVE_I387_REGS 

# 1 "config/tm-macosx.h" 1
# 23 "config/tm-macosx.h"
#define _TM_NEXTSTEP_H_ 

# 1 "./macosx/macosx-tdep.h" 1





#define __GDB_MACOSX_TDEP_H__ 

# 1 "./defs.h" 1
# 9 "./macosx/macosx-tdep.h" 2




# 1 "./macosx/i386-macosx-tdep.h" 1



#define __GDB_I386_MACOSX_TDEP_H__ 

# 1 "./macosx/i386-macosx-thread-status.h" 1



#define __GDB_I386_MACOSX_THREAD_STATUS_H__ 




#define GDB_i386_THREAD_STATE 1
#define GDB_i386_THREAD_FPSTATE 2
#define GDB_i386_FLOAT_STATE 2

#define GDB_i386_FP_NO 0
#define GDB_i386_FP_SOFT 1
#define GDB_i386_FP_287 2
#define GDB_i386_FP_387 3
#define GDB_i386_FP_SSE2 4


#define GDB_x86_THREAD_STATE32 1
#define GDB_x86_FLOAT_STATE32 2
#define GDB_x86_EXCEPTION_STATE32 3
#define GDB_x86_THREAD_STATE64 4
#define GDB_x86_FLOAT_STATE64 5
#define GDB_x86_EXCEPTION_STATE64 6
#define GDB_x86_THREAD_STATE 7
#define GDB_x86_FLOAT_STATE 8
#define GDB_x86_EXCEPTION_STATE 9
#define GDB_THREAD_STATE_NONE THREAD_STATE_NONE
# 38 "./macosx/i386-macosx-thread-status.h"
#define GDB_VALID_THREAD_STATE_FLAVOR(x) ((x == GDB_x86_THREAD_STATE32) || (x == GDB_x86_FLOAT_STATE32) || (x == GDB_x86_EXCEPTION_STATE32) || (x == GDB_x86_THREAD_STATE64) || (x == GDB_x86_FLOAT_STATE64) || (x == GDB_x86_EXCEPTION_STATE64) || (x == GDB_x86_THREAD_STATE) || (x == GDB_x86_FLOAT_STATE) || (x == GDB_x86_EXCEPTION_STATE) || (x == GDB_THREAD_STATE_NONE))
# 51 "./macosx/i386-macosx-thread-status.h"
struct gdb_x86_state_hdr {
    int flavor;
    int count;
};
typedef struct gdb_x86_state_hdr gdb_x86_state_hdr_t;


struct gdb_i386_thread_state {
    unsigned int eax;
    unsigned int ebx;
    unsigned int ecx;
    unsigned int edx;
    unsigned int edi;
    unsigned int esi;
    unsigned int ebp;
    unsigned int esp;
    unsigned int ss;
    unsigned int eflags;
    unsigned int eip;
    unsigned int cs;
    unsigned int ds;
    unsigned int es;
    unsigned int fs;
    unsigned int gs;
};
typedef struct gdb_i386_thread_state gdb_i386_thread_state_t;

#define GDB_i386_THREAD_STATE_COUNT ((mach_msg_type_number_t) (sizeof(gdb_i386_thread_state_t) / sizeof(int)))





#define GDB_i386_FP_SSE2_STATE_SIZE 512

struct gdb_i386_thread_fpstate
{
  unsigned int fpkind;
  unsigned int initialized;
  unsigned char hw_fu_state[512];
  unsigned int exc_status;
};
typedef struct gdb_i386_thread_fpstate gdb_i386_thread_fpstate_t;

typedef struct gdb_i386_thread_state gdb_x86_thread_state32_t;
#define GDB_x86_THREAD_STATE32_COUNT ((mach_msg_type_number_t) (sizeof(gdb_x86_thread_state32_t) / sizeof(int)))


#define GDB_i386_THREAD_FPSTATE_COUNT (sizeof(struct gdb_i386_thread_fpstate) / sizeof(unsigned int))


struct gdb_x86_thread_state64 {
    uint64_t rax;
    uint64_t rbx;
    uint64_t rcx;
    uint64_t rdx;
    uint64_t rdi;
    uint64_t rsi;
    uint64_t rbp;
    uint64_t rsp;
    uint64_t r8;
    uint64_t r9;
    uint64_t r10;
    uint64_t r11;
    uint64_t r12;
    uint64_t r13;
    uint64_t r14;
    uint64_t r15;
    uint64_t rip;
    uint64_t rflags;
    uint64_t cs;
    uint64_t fs;
    uint64_t gs;
};
typedef struct gdb_x86_thread_state64 gdb_x86_thread_state64_t;
#define GDB_x86_THREAD_STATE64_COUNT ((mach_msg_type_number_t) (sizeof(gdb_x86_thread_state64_t) / sizeof(int)))



struct gdb_x86_thread_state {
    gdb_x86_state_hdr_t tsh;
    union {
        gdb_x86_thread_state32_t ts32;
        gdb_x86_thread_state64_t ts64;
    } uts;
};
typedef struct gdb_x86_thread_state gdb_x86_thread_state_t;
#define GDB_x86_THREAD_STATE_COUNT ((mach_msg_type_number_t) (sizeof(gdb_x86_thread_state_t) / sizeof(int)))



typedef struct gdb_fp_control {
    unsigned short invalid :1,
                   denorm :1,
                   zdiv :1,
                   ovrfl :1,
                   undfl :1,
                   precis :1,
                           :2,
                   pc :2,
                   rc :2,
                           :1,
                           :3;
} gdb_fp_control_t;

typedef struct gdb_fp_status {
    unsigned short invalid :1,
                   denorm :1,
                   zdiv :1,
                   ovrfl :1,
                   undfl :1,
                   precis :1,
                   stkflt :1,
                   errsumm :1,
                   c0 :1,
                   c1 :1,
                   c2 :1,
                   tos :3,
                   c3 :1,
                   busy :1;
} gdb_fp_status_t;

struct gdb_mmst_reg {
  char mmst_reg[10];
  char mmst_rsrv[6];
};


struct gdb_xmm_reg {
  char xmm_reg[16];
};

#define GDB_FP_STATE_BYTES 512

struct gdb_i386_float_state {
  int fpu_reserved[2];
  gdb_fp_control_t fpu_fcw;
  gdb_fp_status_t fpu_fsw;
  uint8_t fpu_ftw;
  uint8_t fpu_rsrv1;
  uint16_t fpu_fop;
  uint32_t fpu_ip;
  uint16_t fpu_cs;
  uint16_t fpu_rsrv2;
  uint32_t fpu_dp;
  uint16_t fpu_ds;
  uint16_t fpu_rsrv3;
  uint32_t fpu_mxcsr;
  uint32_t fpu_mxcsrmask;
  struct gdb_mmst_reg fpu_stmm0;
  struct gdb_mmst_reg fpu_stmm1;
  struct gdb_mmst_reg fpu_stmm2;
  struct gdb_mmst_reg fpu_stmm3;
  struct gdb_mmst_reg fpu_stmm4;
  struct gdb_mmst_reg fpu_stmm5;
  struct gdb_mmst_reg fpu_stmm6;
  struct gdb_mmst_reg fpu_stmm7;
  struct gdb_xmm_reg fpu_xmm0;
  struct gdb_xmm_reg fpu_xmm1;
  struct gdb_xmm_reg fpu_xmm2;
  struct gdb_xmm_reg fpu_xmm3;
  struct gdb_xmm_reg fpu_xmm4;
  struct gdb_xmm_reg fpu_xmm5;
  struct gdb_xmm_reg fpu_xmm6;
  struct gdb_xmm_reg fpu_xmm7;
  char fpu_rsrv4[(14 * 16)];
  int fpu_reserved1;
};
typedef struct gdb_i386_float_state gdb_i386_float_state_t;
#define GDB_i386_FLOAT_STATE_COUNT ((mach_msg_type_number_t) (sizeof(gdb_i386_float_state_t)/sizeof(unsigned int)))


typedef struct gdb_i386_float_state gdb_x86_float_state32_t;
#define GDB_x86_FLOAT_STATE32_COUNT ((mach_msg_type_number_t) (sizeof(gdb_x86_float_state32_t)/sizeof(unsigned int)))



struct gdb_x86_float_state64 {
  int fpu_reserved[2];
  gdb_fp_control_t fpu_fcw;
  gdb_fp_status_t fpu_fsw;
  uint8_t fpu_ftw;
  uint8_t fpu_rsrv1;
  uint16_t fpu_fop;
  uint32_t fpu_ip;
  uint16_t fpu_cs;
  uint16_t fpu_rsrv2;
  uint32_t fpu_dp;
  uint16_t fpu_ds;
  uint16_t fpu_rsrv3;
  uint32_t fpu_mxcsr;
  uint32_t fpu_mxcsrmask;
  struct gdb_mmst_reg fpu_stmm0;
  struct gdb_mmst_reg fpu_stmm1;
  struct gdb_mmst_reg fpu_stmm2;
  struct gdb_mmst_reg fpu_stmm3;
  struct gdb_mmst_reg fpu_stmm4;
  struct gdb_mmst_reg fpu_stmm5;
  struct gdb_mmst_reg fpu_stmm6;
  struct gdb_mmst_reg fpu_stmm7;
  struct gdb_xmm_reg fpu_xmm0;
  struct gdb_xmm_reg fpu_xmm1;
  struct gdb_xmm_reg fpu_xmm2;
  struct gdb_xmm_reg fpu_xmm3;
  struct gdb_xmm_reg fpu_xmm4;
  struct gdb_xmm_reg fpu_xmm5;
  struct gdb_xmm_reg fpu_xmm6;
  struct gdb_xmm_reg fpu_xmm7;
  struct gdb_xmm_reg fpu_xmm8;
  struct gdb_xmm_reg fpu_xmm9;
  struct gdb_xmm_reg fpu_xmm10;
  struct gdb_xmm_reg fpu_xmm11;
  struct gdb_xmm_reg fpu_xmm12;
  struct gdb_xmm_reg fpu_xmm13;
  struct gdb_xmm_reg fpu_xmm14;
  struct gdb_xmm_reg fpu_xmm15;
  char fpu_rsrv4[(6 * 16)];
  int fpu_reserved1;
};
typedef struct gdb_x86_float_state64 gdb_x86_float_state64_t;
#define GDB_x86_FLOAT_STATE64_COUNT ((mach_msg_type_number_t) (sizeof(gdb_x86_float_state64_t)/sizeof(unsigned int)))



struct gdb_x86_float_state {
    gdb_x86_state_hdr_t fsh;
    union {
        gdb_x86_float_state32_t fs32;
        gdb_x86_float_state64_t fs64;
    } ufs;
};
typedef struct gdb_x86_float_state gdb_x86_float_state_t;
#define GDB_x86_FLOAT_STATE_COUNT ((mach_msg_type_number_t) (sizeof(gdb_x86_float_state_t) / sizeof(int)))



struct gdb_i386_exception_state {
    unsigned int trapno;
    unsigned int err;
    unsigned int faultvaddr;
};
typedef struct gdb_i386_exception_state gdb_i386_exception_state_t;
#define GDB_i386_EXCEPTION_STATE_COUNT ((mach_msg_type_number_t) (sizeof(gdb_i386_exception_state_t) / sizeof(int)))


#define GDB_I386_EXCEPTION_STATE_COUNT GDB_i386_EXCEPTION_STATE_COUNT

typedef struct gdb_i386_exception_state gdb_x86_exception_state32_t;
#define GDB_x86_EXCEPTION_STATE32_COUNT ((mach_msg_type_number_t) (sizeof(gdb_x86_exception_state32_t) / sizeof(int)))


struct gdb_x86_exception_state64 {
    unsigned int trapno;
    unsigned int err;
    uint64_t faultvaddr;
};
typedef struct gdb_x86_exception_state64 gdb_x86_exception_state64_t;
#define GDB_x86_EXCEPTION_STATE64_COUNT ((mach_msg_type_number_t) (sizeof(gdb_x86_exception_state64_t) / sizeof(int)))



struct gdb_x86_exception_state {
    gdb_x86_state_hdr_t esh;
    union {
        gdb_x86_exception_state32_t es32;
        gdb_x86_exception_state64_t es64;
    } ues;
};
typedef struct gdb_x86_exception_state gdb_x86_exception_state_t;
#define GDB_x86_EXCEPTION_STATE_COUNT ((mach_msg_type_number_t) (sizeof(gdb_x86_exception_state_t) / sizeof(int)))
# 7 "./macosx/i386-macosx-tdep.h" 2

#define IS_GP_REGNUM(regno) ((regno >= FIRST_GP_REGNUM) && (regno <= LAST_GP_REGNUM))
#define IS_FP_REGNUM(regno) ((regno >= FIRST_FP_REGNUM) && (regno <= LAST_FP_REGNUM))
#define IS_VP_REGNUM(regno) ((regno >= FIRST_VP_REGNUM) && (regno <= LAST_VP_REGNUM))

#define FIRST_GP_REGNUM 0
#define LAST_GP_REGNUM 15
#define NUM_GP_REGS ((LAST_GP_REGNUM + 1) - FIRST_GP_REGNUM)

#define FIRST_FP_REGNUM 16
#define LAST_FP_REGNUM 31
#define NUM_FP_REGS ((LAST_FP_REGNUM + 1) - FIRST_FP_REGNUM)

#define FIRST_VP_REGNUM 32
#define LAST_VP_REGNUM 40
#define NUM_VP_REGS ((LAST_VP_REGNUM + 1) - FIRST_VP_REGNUM)

#define IS_GP_REGNUM_64(regno) ((regno >= FIRST_GP_REGNUM_64) && (regno <= LAST_GP_REGNUM_64))
#define IS_FP_REGNUM_64(regno) ((regno >= FIRST_FP_REGNUM_64) && (regno <= LAST_FP_REGNUM_64))
#define IS_VP_REGNUM_64(regno) ((regno >= FIRST_VP_REGNUM_64) && (regno <= LAST_VP_REGNUM_64))

#define FIRST_GP_REGNUM_64 0
#define LAST_GP_REGNUM_64 23
#define NUM_GP_REGS_64 ((LAST_GP_REGNUM_64 + 1) - FIRST_GP_REGNUM_64)

#define FIRST_FP_REGNUM_64 24
#define LAST_FP_REGNUM_64 39
#define NUM_FP_REGS_64 ((LAST_FP_REGNUM_64 + 1) - FIRST_FP_REGNUM_64)

#define FIRST_VP_REGNUM_64 40
#define LAST_VP_REGNUM_64 55
#define NUM_VP_REGS_64 ((LAST_VP_REGNUM_64 + 1) - FIRST_VP_REGNUM_64)

#define REGS_64_MXCSR (LAST_VP_REGNUM_64 + 1)
# 52 "./macosx/i386-macosx-tdep.h"
void i386_macosx_fetch_gp_registers(gdb_i386_thread_state_t *sp_regs);
void i386_macosx_fetch_gp_registers_raw(gdb_i386_thread_state_t *sp_regs);
void i386_macosx_store_gp_registers(gdb_i386_thread_state_t *sp_regs);
void i386_macosx_store_gp_registers_raw(gdb_i386_thread_state_t *sp_regs);
void x86_64_macosx_fetch_gp_registers(gdb_x86_thread_state64_t *sp_regs);
void x86_64_macosx_fetch_gp_registers_raw(gdb_x86_thread_state64_t *sp_regs);
void x86_64_macosx_store_gp_registers(gdb_x86_thread_state64_t *sp_regs);
void x86_64_macosx_store_gp_registers_raw(gdb_x86_thread_state64_t *sp_regs);
void i386_macosx_fetch_fp_registers(gdb_i386_float_state_t *fp_regs);
void i386_macosx_fetch_fp_registers_raw(gdb_i386_float_state_t *fp_regs);
int i386_macosx_store_fp_registers(gdb_i386_float_state_t *fp_regs);
int i386_macosx_store_fp_registers_raw(gdb_i386_float_state_t *fp_regs);
void x86_64_macosx_fetch_fp_registers(gdb_x86_float_state64_t *fp_regs);
void x86_64_macosx_fetch_fp_registers_raw(gdb_x86_float_state64_t *fp_regs);
int x86_64_macosx_store_fp_registers(gdb_x86_float_state64_t *fp_regs);
int x86_64_macosx_store_fp_registers_raw(gdb_x86_float_state64_t *fp_regs);
# 14 "./macosx/macosx-tdep.h" 2
# 28 "./macosx/macosx-tdep.h"
# 1 "./symtab.h" 1
# 25 "./symtab.h"
#define SYMTAB_H 1
# 34 "./symtab.h"
struct ui_file;
struct frame_info;
struct symbol;
struct obstack;
struct objfile;
struct block;
struct blockvector;
struct axs_value;
struct agent_expr;
# 94 "./symtab.h"
#pragma GCC diagnostic push
#pragma GCC diagnostic warning "-Wpadded"
#pragma GCC diagnostic warning "-Wpacked"






typedef struct general_symbol_info
{






  const char *name;







  union
  {



    int ivalue;

    struct block *block;

    char *bytes;

    CORE_ADDR address;



    struct symbol *chain;
  }
  value;




  union
  {
    struct cplus_specific
    {

      char *demangled_name;
    }
    cplus_specific;
  }
  language_specific;





  enum language language : 8;




  int obsoleted;
# 170 "./symtab.h"
  short section;


  asection *bfd_section;
} __attribute__((packed)) gensyminfo_t;




#pragma GCC diagnostic pop



extern CORE_ADDR symbol_overlayed_address(CORE_ADDR, asection *)
  __attribute__((warn_unused_result));
# 194 "./symtab.h"
#define DEPRECATED_SYMBOL_NAME(symbol) (symbol)->ginfo.name
#define SYMBOL_VALUE(symbol) (symbol)->ginfo.value.ivalue
#define SYMBOL_VALUE_ADDRESS(symbol) (symbol)->ginfo.value.address
#define SYMBOL_VALUE_BYTES(symbol) (symbol)->ginfo.value.bytes
#define SYMBOL_BLOCK_VALUE(symbol) (symbol)->ginfo.value.block
#define SYMBOL_VALUE_CHAIN(symbol) (symbol)->ginfo.value.chain
#define SYMBOL_LANGUAGE(symbol) (symbol)->ginfo.language
#define SYMBOL_SECTION(symbol) (symbol)->ginfo.section
#define SYMBOL_BFD_SECTION(symbol) (symbol)->ginfo.bfd_section

#define SYMBOL_OBSOLETED(symbol) (symbol)->ginfo.obsoleted

#define SYMBOL_CPLUS_DEMANGLED_NAME(symbol) (symbol)->ginfo.language_specific.cplus_specific.demangled_name




#define SYMBOL_INIT_LANGUAGE_SPECIFIC(symbol,language) (symbol_init_language_specific(&(symbol)->ginfo, (language)))

extern void symbol_init_language_specific(struct general_symbol_info *symbol,
       enum language language)
  __attribute__((__nonnull__(1)));

#define SYMBOL_INIT_DEMANGLED_NAME(symbol,obstack) (symbol_init_demangled_name(&(symbol)->ginfo, (obstack)))

extern void symbol_init_demangled_name(struct general_symbol_info *symbol,
           struct obstack *obstack);

#define SYMBOL_SET_NAMES(symbol,linkage_name,len,objfile) symbol_set_names(&(symbol)->ginfo, linkage_name, len, objfile)

extern void symbol_set_names(struct general_symbol_info *symbol,
        const char *linkage_name, int len,
        struct objfile *objfile);
# 244 "./symtab.h"
#define SYMBOL_NATURAL_NAME(symbol) (symbol_natural_name(&(symbol)->ginfo))

extern const char *symbol_natural_name(const struct general_symbol_info *)
  __attribute__((warn_unused_result));
# 258 "./symtab.h"
#define SYMBOL_LINKAGE_NAME(symbol) (symbol)->ginfo.name



#define SYMBOL_DEMANGLED_NAME(symbol) (symbol_demangled_name(&(symbol)->ginfo))

extern const char *symbol_demangled_name(struct general_symbol_info *symbol)
  __attribute__((warn_unused_result));
# 275 "./symtab.h"
#define SYMBOL_PRINT_NAME(symbol) (demangle ? SYMBOL_NATURAL_NAME(symbol) : SYMBOL_LINKAGE_NAME(symbol))
# 290 "./symtab.h"
#define SYMBOL_MATCHES_NATURAL_NAME(symbol,name) (strcmp_iw(SYMBOL_NATURAL_NAME(symbol), (name)) == 0)







#define SYMBOL_SEARCH_NAME(symbol) (symbol_search_name(&(symbol)->ginfo))

extern const char *symbol_search_name(const struct general_symbol_info *)
  __attribute__((warn_unused_result));



#define SYMBOL_MATCHES_SEARCH_NAME(symbol,name) (strcmp_iw(SYMBOL_SEARCH_NAME(symbol), (name)) == 0)
# 316 "./symtab.h"
enum minimal_symbol_type
{
  mst_unknown = 0,
  mst_text,
  mst_data,
  mst_bss,
  mst_abs,
# 331 "./symtab.h"
  mst_solib_trampoline,


  mst_file_text,
  mst_file_data,
  mst_file_bss
};
# 351 "./symtab.h"
struct minimal_symbol
{





  struct general_symbol_info ginfo;
# 373 "./symtab.h"
  char *info;





  unsigned long size;
# 388 "./symtab.h"
  enum minimal_symbol_type type : 8;




  struct minimal_symbol *hash_next;




  struct minimal_symbol *demangled_hash_next;
};

#define MSYMBOL_INFO(msymbol) (msymbol)->info
#define MSYMBOL_SIZE(msymbol) (msymbol)->size
#define MSYMBOL_TYPE(msymbol) (msymbol)->type


#define MSYMBOL_OBSOLETED(msymbol) (msymbol)->ginfo.obsoleted







typedef enum domain_enum_tag
{




  UNDEF_DOMAIN,




  VAR_DOMAIN,





  STRUCT_DOMAIN,




  LABEL_DOMAIN,






  VARIABLES_DOMAIN,


  FUNCTIONS_DOMAIN,


  TYPES_DOMAIN,


  METHODS_DOMAIN
}
domain_enum;


enum address_class
{

  LOC_UNDEF,


  LOC_CONST,


  LOC_STATIC,


  LOC_REGISTER,


  LOC_ARG,


  LOC_REF_ARG,
# 490 "./symtab.h"
  LOC_REGPARM,







  LOC_REGPARM_ADDR,



  LOC_LOCAL,




  LOC_TYPEDEF,



  LOC_LABEL,





  LOC_BLOCK,




  LOC_CONST_BYTES,







  LOC_LOCAL_ARG,
# 545 "./symtab.h"
  LOC_BASEREG,



  LOC_BASEREG_ARG,
# 561 "./symtab.h"
  LOC_UNRESOLVED,




  LOC_HP_THREAD_LOCAL_STATIC,




  LOC_OPTIMIZED_OUT,
# 581 "./symtab.h"
  LOC_INDIRECT,



  LOC_COMPUTED,


  LOC_COMPUTED_ARG
};






struct symbol_ops
{






  struct value *(*read_variable)(struct symbol *symbol,
     struct frame_info *frame);


  int (*read_needs_frame)(struct symbol *symbol);



  int (*describe_location)(struct symbol *symbol, struct ui_file *stream);
# 621 "./symtab.h"
  void (*tracepoint_var_ref)(struct symbol *symbol, struct agent_expr *ax,
        struct axs_value *value);
};



#pragma GCC diagnostic push



#pragma GCC diagnostic warning "-Wpacked"






typedef struct symbol
{

  struct general_symbol_info ginfo;


  struct type *type;


  enum domain_enum_tag domain : 6;
# 657 "./symtab.h"
  enum address_class aclass : 6;





  unsigned short line __attribute__((__aligned__(__alignof__(enum address_class))));




  const struct symbol_ops *ops;




  union
  {

    short basereg;
# 688 "./symtab.h"
    void *ptr;
  }
  aux_value;

  struct symbol *hash_next;
} __attribute__((packed)) symtab_h_symbol_t;


#define SYMBOL_DOMAIN(symbol) (symbol)->domain
#define SYMBOL_CLASS(symbol) (symbol)->aclass
#define SYMBOL_TYPE(symbol) (symbol)->type
#define SYMBOL_LINE(symbol) (symbol)->line
#define SYMBOL_BASEREG(symbol) (symbol)->aux_value.basereg
#define SYMBOL_OPS(symbol) (symbol)->ops
#define SYMBOL_LOCATION_BATON(symbol) (symbol)->aux_value.ptr
# 713 "./symtab.h"
typedef struct partial_symbol
{

  struct general_symbol_info ginfo;


  enum domain_enum_tag domain : 6;


  enum address_class aclass : 6;


} __attribute__((packed)) partial_symbol_t;




#pragma GCC diagnostic pop



#define PSYMBOL_DOMAIN(psymbol) (psymbol)->domain
#define PSYMBOL_CLASS(psymbol) (psymbol)->aclass





enum line_table_entry_type
{
  NORMAL_LT_ENTRY = 0,
  INLINED_SUBROUTINE_LT_ENTRY,

  INLINED_CALL_SITE_LT_ENTRY

};
# 757 "./symtab.h"
struct linetable_entry
{
  int line;
  CORE_ADDR pc;





  CORE_ADDR end_pc;




  enum line_table_entry_type entry_type;

};
# 792 "./symtab.h"
struct linetable
{
  int nitems;
  int lines_are_chars;




  struct linetable_entry item[];
};
# 813 "./symtab.h"
struct section_offsets
{
  CORE_ADDR offsets[1];
};

#define ANOFFSET(secoff,whichone) ((whichone == -1) ? (internal_error (__FILE__, __LINE__, _("Section index is uninitialized")), (CORE_ADDR) -1) : secoff->offsets[whichone])





#define SIZEOF_N_SECTION_OFFSETS(n) (sizeof (struct section_offsets) + sizeof (((struct section_offsets *) 0)->offsets) * ((n)-1))




enum free_codes
{
  free_nothing, free_contents, free_linetable
};




struct symtab
{

  struct symtab *next;





  struct blockvector *blockvector;




  struct linetable *linetable;




  int block_line_section;





  int primary;




  struct macro_table *macro_table;



  char *filename;



  char *dirname;
# 884 "./symtab.h"
  enum free_codes free_code;




  void (*free_func)(struct symtab *symtab);



  int nlines;





  int *line_charpos;



  enum language language;






  char *debugformat;



  char *producer;



  char *version;




  char *fullname;



  struct objfile *objfile;




  unsigned char obsolete;
};

#define BLOCKVECTOR(symtab) (symtab)->blockvector
#define LINETABLE(symtab) (symtab)->linetable


#define SYMTAB_OBSOLETED(symtab) (symtab)->obsolete
# 972 "./symtab.h"
struct oso_fun_static {
  struct oso_fun_static *next;
  char *name;
  CORE_ADDR address;
};

struct oso_fun_list {
  struct oso_fun_list *next;
  char *name;
  struct oso_fun_static *statics;
  struct oso_fun_static *tail;
};
# 1001 "./symtab.h"
struct oso_pst_list {
  char *oso_name;
  int readin;
  struct partial_symtab **pst_list;
};
# 1014 "./symtab.h"
struct equiv_psym_list {
  int num_syms;
  int list_size;
  char **sym_list;
};
# 1033 "./symtab.h"
#define DW_ISA_UNKNOWN 0
#define DW_ISA_ARM_thumb 1
#define DW_ISA_ARM_arm 2


struct partial_symtab
{

  struct partial_symtab *next;


  char *filename;


  char *fullname;


  char *dirname;


  struct objfile *objfile;


  struct section_offsets *section_offsets;




  CORE_ADDR textlow;
  CORE_ADDR texthigh;
# 1073 "./symtab.h"
  struct partial_symtab **dependencies;

  int number_of_dependencies;






  int globals_offset;
  int n_global_syms;
# 1093 "./symtab.h"
  int statics_offset;
  int n_static_syms;




  struct symtab *symtab;




  void (*read_symtab) (struct partial_symtab *);







  char *read_symtab_private;



  unsigned char readin;




  unsigned char obsolete;







  enum language language;



  char *oso_name;


  long oso_mtime;

  struct oso_pst_list *oso_pst_list;


  struct oso_fun_list *statics_list;





  struct equiv_psym_list *equiv_psyms;

};


#define PSYMTAB_OBSOLETED(psymtab) (psymtab)->obsolete

#define PSYMTAB_OSO_NAME(p) ((p)->oso_name)
#define PSYMTAB_OSO_MTIME(p) ((p)->oso_mtime)
#define PSYMTAB_OSO_STATICS(p) ((p)->statics_list)
#define PSYMTAB_OSO_PST_LIST(p) ((p)->oso_pst_list)



#define PSYMTAB_TO_SYMTAB(pst) ((pst) -> symtab != NULL ? (pst) -> symtab : psymtab_to_symtab (pst))
# 1176 "./symtab.h"
#define VTBL_FNADDR_OFFSET 2





extern struct objfile *current_objfile;



extern int currently_reading_symtab;


extern int demangle;
extern int asm_demangle;





extern struct symtab *lookup_symtab(const char *) __attribute__((warn_unused_result));



extern struct symtab **lookup_symtab_all(const char *) __attribute__((warn_unused_result));



extern struct symbol *lookup_symbol (const char *, const struct block *,
         const domain_enum, int *,
         struct symtab **);



extern struct symbol *lookup_block_symbol_helper (const struct block *,
        const char *,
        const domain_enum,
        int exhaustive);




extern struct symbol *basic_lookup_symbol_nonlocal (const char *,
          const char *,
          const struct block *,
          const domain_enum,
          struct symtab **);







extern struct symbol *lookup_symbol_static (const char *name,
         const char *linkage_name,
         const struct block *block,
         const domain_enum domain,
         struct symtab **symtab);




extern struct symbol *lookup_symbol_global (const char *name,
         const char *linkage_name,
         const domain_enum domain,
         struct symtab **symtab);





extern struct symbol *lookup_symbol_aux_block (const char *name,
            const char *linkage_name,
            const struct block *block,
            const domain_enum domain,
            struct symtab **symtab);



extern struct partial_symbol *lookup_partial_symbol (struct partial_symtab *,
           const char *,
           const char *, int,
           domain_enum);



extern struct symbol *lookup_block_symbol (const struct block *, const char *,
        const char *,
        const domain_enum);





extern struct symbol_search *lookup_block_symbol_all(const struct block *,
           const char *, const char *,
           const domain_enum)
  __attribute__((warn_unused_result));




extern struct type *lookup_struct(char *, struct block *);

extern struct type *lookup_struct_no_error(char *, struct block *);

extern struct type *lookup_union(char *, struct block *);

extern struct type *lookup_enum(char *, struct block *);




int addr_inside_main_func(CORE_ADDR pc);



extern struct symbol *find_pc_function (CORE_ADDR);

extern struct symbol *find_pc_function_no_inlined (CORE_ADDR);



extern struct symbol *find_pc_sect_function (CORE_ADDR, asection *);

extern struct symbol *find_pc_sect_function_no_inlined (CORE_ADDR, asection *);



extern int find_pc_partial_function(CORE_ADDR, const char **, CORE_ADDR *,
        CORE_ADDR *);

extern int find_pc_partial_function_no_inlined(CORE_ADDR, const char **,
            CORE_ADDR *, CORE_ADDR *);

extern void clear_pc_function_cache(void);





extern struct partial_symtab *lookup_partial_symtab (const char *);


extern struct partial_symtab **lookup_partial_symtab_all(const char *, int)
  __attribute__((warn_unused_result));



extern struct partial_symtab *find_pc_psymtab (CORE_ADDR);



extern struct partial_symtab *find_pc_sect_psymtab (CORE_ADDR, asection *);



extern struct symtab *find_pc_symtab (CORE_ADDR);



extern struct symtab *find_pc_sect_symtab (CORE_ADDR, asection *);



extern struct partial_symbol *find_pc_psymbol (struct partial_symtab *,
            CORE_ADDR);



extern struct partial_symbol *find_pc_sect_psymbol (struct partial_symtab *,
          CORE_ADDR, asection *);

extern int find_pc_line_pc_range (CORE_ADDR, CORE_ADDR *, CORE_ADDR *);

extern void reread_symbols (void);

extern struct type *lookup_transparent_type (const char *);
extern struct type *basic_lookup_transparent_type (const char *);




#define GCC_COMPILED_FLAG_SYMBOL "gcc_compiled."




#define GCC2_COMPILED_FLAG_SYMBOL "gcc2_compiled."





extern void prim_record_minimal_symbol(const char *, CORE_ADDR,
           enum minimal_symbol_type,
           struct objfile *);

extern struct minimal_symbol *prim_record_minimal_symbol_and_info
  (const char *, CORE_ADDR, const enum minimal_symbol_type, const char *info,
   const int section, const asection *bfd_section, struct objfile *)
  __attribute__((warn_unused_result));

extern unsigned int msymbol_hash_iw(const char *);

extern unsigned int msymbol_hash(const char *);

extern void
add_minsym_to_hash_table(struct minimal_symbol *sym,
    struct minimal_symbol **table);


extern struct minimal_symbol *lookup_minimal_symbol_by_pc_section_from_objfile
  (CORE_ADDR pc, asection *section, struct objfile *objfile);

extern struct minimal_symbol *lookup_minimal_symbol(const char *,
          const char *,
          struct objfile *);


extern struct minimal_symbol *lookup_minimal_symbol_all(const char *,
       const char *,
       struct objfile *,
       struct symbol_search **)
  __attribute__((warn_unused_result));


extern struct minimal_symbol *lookup_minimal_symbol_text(const char *,
        struct objfile *);

struct minimal_symbol *lookup_minimal_symbol_solib_trampoline(const char *,
             struct objfile *);

extern struct minimal_symbol *lookup_minimal_symbol_by_pc(CORE_ADDR);

extern struct minimal_symbol *lookup_minimal_symbol_by_pc_section(CORE_ADDR,
          asection *);

extern struct minimal_symbol
  *lookup_minimal_symbol_by_pc_section_objfile (CORE_ADDR, asection *,
      struct objfile *);
extern struct minimal_symbol
  *lookup_solib_trampoline_symbol_by_pc (CORE_ADDR);

extern CORE_ADDR find_solib_trampoline_target (CORE_ADDR);

extern void init_minimal_symbol_collection (void);

extern struct cleanup *make_cleanup_discard_minimal_symbols (void);

extern void install_minimal_symbols (struct objfile *);



extern void msymbols_sort (struct objfile *objfile);

struct symtab_and_line
{
  struct symtab *symtab;
  asection *section;



  int line;

  CORE_ADDR pc;
  CORE_ADDR end;



  enum line_table_entry_type entry_type;





  struct symtab_and_line *next;

};

extern void init_sal(struct symtab_and_line *sal);

struct symtabs_and_lines
{
  struct symtab_and_line *sals;
  int nelts;
};



struct address_context
{
  CORE_ADDR address;
  asection *bfd_section;
  struct block *block;
  struct minimal_symbol *msymbol;
  struct partial_symbol *psymbol;
  struct symbol *symbol;
  struct symtab_and_line sal;
};

extern void init_address_context(struct address_context *addr_ctx);
# 1489 "./symtab.h"
enum exception_event_kind
{
  EX_EVENT_THROW,
  EX_EVENT_CATCH
};


struct exception_event_record
{
  enum exception_event_kind kind;
  struct symtab_and_line throw_sal;
  struct symtab_and_line catch_sal;

  char *exception_type;




};

#define CURRENT_EXCEPTION_KIND (current_exception_event->kind)
#define CURRENT_EXCEPTION_CATCH_SAL (current_exception_event->catch_sal)
#define CURRENT_EXCEPTION_CATCH_LINE (current_exception_event->catch_sal.line)
#define CURRENT_EXCEPTION_CATCH_FILE (current_exception_event->catch_sal.symtab->filename)
#define CURRENT_EXCEPTION_CATCH_PC (current_exception_event->catch_sal.pc)
#define CURRENT_EXCEPTION_THROW_SAL (current_exception_event->throw_sal)
#define CURRENT_EXCEPTION_THROW_LINE (current_exception_event->throw_sal.line)
#define CURRENT_EXCEPTION_THROW_FILE (current_exception_event->throw_sal.symtab->filename)
#define CURRENT_EXCEPTION_THROW_PC (current_exception_event->throw_sal.pc)

#define CURRENT_EXCEPTION_TYPE (current_exception_event->exception_type)





extern struct symtab_and_line find_pc_line(CORE_ADDR, int) __attribute__((warn_unused_result));



extern struct symtab_and_line find_pc_sect_line (CORE_ADDR, asection *, int);



extern int find_line_pc(struct symtab *, int, CORE_ADDR *) __attribute__((warn_unused_result));

extern int find_line_pc_range (struct symtab_and_line, CORE_ADDR *,
          CORE_ADDR *);

extern void resolve_sal_pc (struct symtab_and_line *);




extern struct symtabs_and_lines decode_line_spec(const char *, int)
  __attribute__((warn_unused_result));

extern struct symtabs_and_lines decode_line_spec_1(const char *, int)
  __attribute__((warn_unused_result));



void maintenance_print_symbols(const char *, int);

void maintenance_print_psymbols(const char *, int);

void maintenance_print_msymbols(const char *, int);

void maintenance_print_objfiles(const char *, int);

void maintenance_info_symtabs(const char *, int);

void maintenance_info_psymtabs(const char *, int);

void maintenance_check_symtabs(const char *, int);



void maintenance_print_statistics(const char *, int);

extern void free_symtab(struct symtab *);



extern struct symtab *psymtab_to_symtab(struct partial_symtab *);

extern void clear_solib(void);



extern int identify_source_line(struct symtab *, int, int, CORE_ADDR);

extern void print_source_lines(struct symtab *, int, int, int);

extern void forget_cached_source_info(void);

extern void select_source_symtab(struct symtab *);

extern char **make_symbol_completion_list(const char *, char *);

extern char **make_file_symbol_completion_list(const char *, char *, char *);

extern char **make_source_files_completion_list(const char *, const char *);



extern struct partial_symtab *find_main_psymtab (void);

extern struct symtab *find_line_symtab (struct symtab *, int, int *, int *);

extern struct symtab_and_line find_function_start_sal (struct symbol *sym,
             int);



extern void clear_symtab_users (void);


extern enum language deduce_language_from_filename (const char *);



extern int in_prologue (CORE_ADDR pc, CORE_ADDR func_start);

extern CORE_ADDR skip_prologue_using_sal (CORE_ADDR func_addr);

extern struct symbol *fixup_symbol_section (struct symbol *,
         struct objfile *);

extern struct partial_symbol *fixup_psymbol_section(struct partial_symbol *psym,
          struct objfile *objfile);





struct symbol_search
{


  int block;





  struct symtab *symtab;
  struct symbol *symbol;



  struct minimal_symbol *msymbol;


  struct symbol_search *next;
};



extern int lookup_symbol_all(const char *, const struct block *,
        const domain_enum, int *, struct symtab **,
        struct symbol_search **) __attribute__((warn_unused_result));


extern void search_symbols(const char *, domain_enum, int, char **,
      struct symbol_search **);
extern void free_search_symbols(struct symbol_search *);
extern struct cleanup *make_cleanup_free_search_symbols(struct symbol_search *);





extern void set_main_name(const char *name);
extern char *main_name(void);




void equivalence_table_delete(struct objfile *);
void equivalence_table_add(struct objfile *, const char *, const char *,
      struct minimal_symbol *);
void equivalence_table_build(struct objfile *);
struct minimal_symbol **find_equivalent_msymbol(struct minimal_symbol *msymbol);





extern int deprecated_hp_som_som_object_present __attribute__((__deprecated__));


extern void update_inlined_function_line_table_entry(CORE_ADDR, CORE_ADDR,
           CORE_ADDR);





extern int psym_equivalences;

extern int psym_name_match (const char *, const char *);





extern struct symtab_and_line *copy_sal(struct symtab_and_line *orig);

extern asection *cached_mapped_section;
extern asection *cached_overlay_section;
extern struct obj_section *cached_sect_section;
extern struct symtab *cached_symtab;
extern struct partial_symtab *cached_psymtab;
extern struct symtab_and_line *cached_pc_line;
extern struct symbol *cached_pc_function;
extern struct blockvector *cached_blockvector;
extern int cached_blockvector_index;
extern struct block *cached_block;

extern CORE_ADDR last_block_lookup_pc;
extern CORE_ADDR last_blockvector_lookup_pc;
extern CORE_ADDR last_function_lookup_pc;
extern CORE_ADDR last_pc_line_lookup_pc;
extern CORE_ADDR last_psymtab_lookup_pc;
extern CORE_ADDR last_symtab_lookup_pc;
extern CORE_ADDR last_sect_section_lookup_pc;
extern CORE_ADDR last_mapped_section_lookup_pc;
extern CORE_ADDR last_overlay_section_lookup_pc;

void symtab_clear_cached_lookup_values(void);
# 29 "./macosx/macosx-tdep.h" 2


# 1 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CoreFoundation.h" 1 3





#define __COREFOUNDATION_COREFOUNDATION__ 1
#define __COREFOUNDATION__ 1





# 1 "/usr/include/assert.h" 1 3 4
# 44 "/usr/include/assert.h" 3 4
# 1 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/stdlib.h" 1 3 4
# 34 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/stdlib.h" 3 4
#define _GLIBCXX_STDLIB_H 1

# 1 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cstdlib" 1 3 4
# 39 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cstdlib" 3 4
       
# 40 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cstdlib" 3

# 1 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/i386-apple-darwin9.8.0/bits/c++config.h" 1 3
# 31 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/i386-apple-darwin9.8.0/bits/c++config.h" 3
#define _GLIBCXX_CXX_CONFIG_H 1


#define __GLIBCXX__ 20160426
# 43 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/i386-apple-darwin9.8.0/bits/c++config.h" 3
#define _GLIBCXX_PURE __attribute__ ((__pure__))



#define _GLIBCXX_CONST __attribute__ ((__const__))



#define _GLIBCXX_NORETURN __attribute__ ((__noreturn__))
# 64 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/i386-apple-darwin9.8.0/bits/c++config.h" 3
#define _GLIBCXX_HAVE_ATTRIBUTE_VISIBILITY 1


#define _GLIBCXX_VISIBILITY(V) __attribute__ ((__visibility__ (#V)))
# 78 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/i386-apple-darwin9.8.0/bits/c++config.h" 3
#define _GLIBCXX_USE_DEPRECATED 1





#define _GLIBCXX_DEPRECATED 




#define _GLIBCXX_ABI_TAG_CXX11 __attribute ((__abi_tag__ ("cxx11")))
# 101 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/i386-apple-darwin9.8.0/bits/c++config.h" 3
#define _GLIBCXX_CONSTEXPR 
#define _GLIBCXX_USE_CONSTEXPR const







#define _GLIBCXX14_CONSTEXPR 
# 122 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/i386-apple-darwin9.8.0/bits/c++config.h" 3
#define _GLIBCXX_NOEXCEPT 
#define _GLIBCXX_NOEXCEPT_IF(_COND) 
#define _GLIBCXX_USE_NOEXCEPT throw()
#define _GLIBCXX_THROW(_EXC) throw(_EXC)




#define _GLIBCXX_NOTHROW _GLIBCXX_USE_NOEXCEPT




#define _GLIBCXX_THROW_OR_ABORT(_EXC) (throw (_EXC))
# 151 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/i386-apple-darwin9.8.0/bits/c++config.h" 3
#define _GLIBCXX_EXTERN_TEMPLATE 1
# 196 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/i386-apple-darwin9.8.0/bits/c++config.h" 3

# 196 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/i386-apple-darwin9.8.0/bits/c++config.h" 3
namespace std
{
  typedef long unsigned int size_t;
  typedef int ptrdiff_t;




}

#define _GLIBCXX_USE_DUAL_ABI 1







#define _GLIBCXX_USE_CXX11_ABI 1



namespace std
{
  
# 220 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/i386-apple-darwin9.8.0/bits/c++config.h"
 __inline__ 
# 220 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/i386-apple-darwin9.8.0/bits/c++config.h" 3
        namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
namespace __gnu_cxx
{
  
# 224 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/i386-apple-darwin9.8.0/bits/c++config.h"
 __inline__ 
# 224 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/i386-apple-darwin9.8.0/bits/c++config.h" 3
        namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
#define _GLIBCXX_NAMESPACE_CXX11 __cxx11::
#define _GLIBCXX_BEGIN_NAMESPACE_CXX11 namespace __cxx11 {
#define _GLIBCXX_END_NAMESPACE_CXX11 }
#define _GLIBCXX_DEFAULT_ABI_TAG _GLIBCXX_ABI_TAG_CXX11
# 239 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/i386-apple-darwin9.8.0/bits/c++config.h" 3
#define _GLIBCXX_INLINE_VERSION 0
# 281 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/i386-apple-darwin9.8.0/bits/c++config.h" 3
#define _GLIBCXX_BEGIN_NAMESPACE_VERSION 
#define _GLIBCXX_END_NAMESPACE_VERSION 
# 364 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/i386-apple-darwin9.8.0/bits/c++config.h" 3
#define _GLIBCXX_STD_A std



#define _GLIBCXX_STD_C std



#define _GLIBCXX_BEGIN_NAMESPACE_ALGO 



#define _GLIBCXX_END_NAMESPACE_ALGO 



#define _GLIBCXX_BEGIN_NAMESPACE_CONTAINER 



#define _GLIBCXX_END_NAMESPACE_CONTAINER 




#undef _GLIBCXX_LONG_DOUBLE_COMPAT
# 401 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/i386-apple-darwin9.8.0/bits/c++config.h" 3
#define _GLIBCXX_NAMESPACE_LDBL 
#define _GLIBCXX_BEGIN_NAMESPACE_LDBL 
#define _GLIBCXX_END_NAMESPACE_LDBL 


#define _GLIBCXX_NAMESPACE_LDBL_OR_CXX11 _GLIBCXX_NAMESPACE_CXX11
#define _GLIBCXX_BEGIN_NAMESPACE_LDBL_OR_CXX11 _GLIBCXX_BEGIN_NAMESPACE_CXX11
#define _GLIBCXX_END_NAMESPACE_LDBL_OR_CXX11 _GLIBCXX_END_NAMESPACE_CXX11
# 428 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/i386-apple-darwin9.8.0/bits/c++config.h" 3
#define __glibcxx_assert(_Condition) 
# 474 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/i386-apple-darwin9.8.0/bits/c++config.h" 3
#define _GLIBCXX_SYNCHRONIZATION_HAPPENS_BEFORE(A) 


#define _GLIBCXX_SYNCHRONIZATION_HAPPENS_AFTER(A) 



#define _GLIBCXX_BEGIN_EXTERN_C extern "C" {
#define _GLIBCXX_END_EXTERN_C }

#define _GLIBCXX_USE_ALLOCATOR_NEW 1
# 495 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/i386-apple-darwin9.8.0/bits/c++config.h" 3
# 1 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/i386-apple-darwin9.8.0/bits/os_defines.h" 1 3
# 27 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/i386-apple-darwin9.8.0/bits/os_defines.h" 3
#define _GLIBCXX_OS_DEFINES 1






#define _GLIBCXX_GTHREAD_USE_WEAK 0





#define _GLIBCXX_WEAK_DEFINITION __attribute__ ((weak))


#define _GTHREAD_USE_RECURSIVE_MUTEX_INIT_FUNC 



#define _GLIBCXX_USE_NANOSLEEP 1
#define _GLIBCXX_USE_SCHED_YIELD 1


#define _GLIBCXX_USE_WEAK_REF 0
# 496 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/i386-apple-darwin9.8.0/bits/c++config.h" 2 3


# 1 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/i386-apple-darwin9.8.0/bits/cpu_defines.h" 1 3
# 31 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/i386-apple-darwin9.8.0/bits/cpu_defines.h" 3
#define _GLIBCXX_CPU_DEFINES 1
# 499 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/i386-apple-darwin9.8.0/bits/c++config.h" 2 3




#define _GLIBCXX_PSEUDO_VISIBILITY(V) 
# 531 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/i386-apple-darwin9.8.0/bits/c++config.h" 3
#define _GLIBCXX_TXN_SAFE 
#define _GLIBCXX_TXN_SAFE_DYN 
# 541 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/i386-apple-darwin9.8.0/bits/c++config.h" 3
#define _GLIBCXX_FAST_MATH 1
# 550 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/i386-apple-darwin9.8.0/bits/c++config.h" 3
#define __N(msgid) (msgid)


#undef min
#undef max
# 576 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/i386-apple-darwin9.8.0/bits/c++config.h" 3
#define _GLIBCXX_USE_C99_MATH _GLIBCXX98_USE_C99_MATH


#define _GLIBCXX_USE_C99_COMPLEX _GLIBCXX98_USE_C99_COMPLEX


#define _GLIBCXX_USE_C99_STDIO _GLIBCXX98_USE_C99_STDIO


#define _GLIBCXX_USE_C99_STDLIB _GLIBCXX98_USE_C99_STDLIB


#define _GLIBCXX_USE_C99_WCHAR _GLIBCXX98_USE_C99_WCHAR
# 597 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/i386-apple-darwin9.8.0/bits/c++config.h" 3
#define _GLIBCXX_HAVE_ACOSF 1


#define _GLIBCXX_HAVE_ACOSL 1


#define _GLIBCXX_HAVE_ASINF 1


#define _GLIBCXX_HAVE_ASINL 1





#define _GLIBCXX_HAVE_ATAN2F 1


#define _GLIBCXX_HAVE_ATAN2L 1


#define _GLIBCXX_HAVE_ATANF 1


#define _GLIBCXX_HAVE_ATANL 1
# 630 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/i386-apple-darwin9.8.0/bits/c++config.h" 3
#define _GLIBCXX_HAVE_CEILF 1


#define _GLIBCXX_HAVE_CEILL 1


#define _GLIBCXX_HAVE_COMPLEX_H 1


#define _GLIBCXX_HAVE_COSF 1


#define _GLIBCXX_HAVE_COSHF 1


#define _GLIBCXX_HAVE_COSHL 1


#define _GLIBCXX_HAVE_COSL 1


#define _GLIBCXX_HAVE_DIRENT_H 1


#define _GLIBCXX_HAVE_DLFCN_H 1


#define _GLIBCXX_HAVE_EBADMSG 1


#define _GLIBCXX_HAVE_ECANCELED 1


#define _GLIBCXX_HAVE_ECHILD 1


#define _GLIBCXX_HAVE_EIDRM 1





#define _GLIBCXX_HAVE_ENODATA 1


#define _GLIBCXX_HAVE_ENOLINK 1


#define _GLIBCXX_HAVE_ENOSPC 1


#define _GLIBCXX_HAVE_ENOSR 1


#define _GLIBCXX_HAVE_ENOSTR 1





#define _GLIBCXX_HAVE_ENOTSUP 1


#define _GLIBCXX_HAVE_EOVERFLOW 1





#define _GLIBCXX_HAVE_EPERM 1


#define _GLIBCXX_HAVE_EPROTO 1


#define _GLIBCXX_HAVE_ETIME 1


#define _GLIBCXX_HAVE_ETIMEDOUT 1


#define _GLIBCXX_HAVE_ETXTBSY 1


#define _GLIBCXX_HAVE_EWOULDBLOCK 1


#define _GLIBCXX_HAVE_EXECINFO_H 1


#define _GLIBCXX_HAVE_EXPF 1


#define _GLIBCXX_HAVE_EXPL 1


#define _GLIBCXX_HAVE_FABSF 1


#define _GLIBCXX_HAVE_FABSL 1


#define _GLIBCXX_HAVE_FCNTL_H 1


#define _GLIBCXX_HAVE_FENV_H 1


#define _GLIBCXX_HAVE_FINITE 1
# 747 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/i386-apple-darwin9.8.0/bits/c++config.h" 3
#define _GLIBCXX_HAVE_FLOAT_H 1


#define _GLIBCXX_HAVE_FLOORF 1


#define _GLIBCXX_HAVE_FLOORL 1


#define _GLIBCXX_HAVE_FMODF 1


#define _GLIBCXX_HAVE_FMODL 1
# 768 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/i386-apple-darwin9.8.0/bits/c++config.h" 3
#define _GLIBCXX_HAVE_FREXPF 1


#define _GLIBCXX_HAVE_FREXPL 1


#define _GLIBCXX_HAVE_GETIPINFO 1


#define _GLIBCXX_HAVE_GETS 1


#define _GLIBCXX_HAVE_HYPOT 1


#define _GLIBCXX_HAVE_HYPOTF 1


#define _GLIBCXX_HAVE_HYPOTL 1


#define _GLIBCXX_HAVE_ICONV 1





#define _GLIBCXX_HAVE_INT64_T 1





#define _GLIBCXX_HAVE_INT64_T_LONG_LONG 1


#define _GLIBCXX_HAVE_INTTYPES_H 1


#define _GLIBCXX_HAVE_ISINF 1
# 816 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/i386-apple-darwin9.8.0/bits/c++config.h" 3
#define _GLIBCXX_HAVE_ISNAN 1
# 825 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/i386-apple-darwin9.8.0/bits/c++config.h" 3
#define _GLIBCXX_HAVE_ISWBLANK 1


#define _GLIBCXX_HAVE_LC_MESSAGES 1


#define _GLIBCXX_HAVE_LDEXPF 1


#define _GLIBCXX_HAVE_LDEXPL 1





#define _GLIBCXX_HAVE_LIMIT_AS 1


#define _GLIBCXX_HAVE_LIMIT_DATA 1


#define _GLIBCXX_HAVE_LIMIT_FSIZE 1


#define _GLIBCXX_HAVE_LIMIT_RSS 1


#define _GLIBCXX_HAVE_LIMIT_VMEM 0





#define _GLIBCXX_HAVE_LOCALE_H 1


#define _GLIBCXX_HAVE_LOG10F 1


#define _GLIBCXX_HAVE_LOG10L 1


#define _GLIBCXX_HAVE_LOGF 1


#define _GLIBCXX_HAVE_LOGL 1


#define _GLIBCXX_HAVE_MACHINE_ENDIAN_H 1


#define _GLIBCXX_HAVE_MACHINE_PARAM_H 1


#define _GLIBCXX_HAVE_MBSTATE_T 1


#define _GLIBCXX_HAVE_MEMORY_H 1


#define _GLIBCXX_HAVE_MODF 1


#define _GLIBCXX_HAVE_MODFF 1


#define _GLIBCXX_HAVE_MODFL 1
# 903 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/i386-apple-darwin9.8.0/bits/c++config.h" 3
#define _GLIBCXX_HAVE_POLL 1


#define _GLIBCXX_HAVE_POWF 1


#define _GLIBCXX_HAVE_POWL 1
# 918 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/i386-apple-darwin9.8.0/bits/c++config.h" 3
#define _GLIBCXX_HAVE_SETENV 1
# 930 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/i386-apple-darwin9.8.0/bits/c++config.h" 3
#define _GLIBCXX_HAVE_SINF 1


#define _GLIBCXX_HAVE_SINHF 1


#define _GLIBCXX_HAVE_SINHL 1


#define _GLIBCXX_HAVE_SINL 1





#define _GLIBCXX_HAVE_SQRTF 1


#define _GLIBCXX_HAVE_SQRTL 1


#define _GLIBCXX_HAVE_STDALIGN_H 1


#define _GLIBCXX_HAVE_STDBOOL_H 1


#define _GLIBCXX_HAVE_STDINT_H 1


#define _GLIBCXX_HAVE_STDLIB_H 1





#define _GLIBCXX_HAVE_STRERROR_R 1


#define _GLIBCXX_HAVE_STRINGS_H 1


#define _GLIBCXX_HAVE_STRING_H 1


#define _GLIBCXX_HAVE_STRTOF 1


#define _GLIBCXX_HAVE_STRTOLD 1


#define _GLIBCXX_HAVE_STRUCT_DIRENT_D_TYPE 1






#define _GLIBCXX_HAVE_SYMVER_SYMBOL_RENAMING_RUNTIME_SUPPORT 1


#define _GLIBCXX_HAVE_SYS_FILIO_H 1


#define _GLIBCXX_HAVE_SYS_IOCTL_H 1


#define _GLIBCXX_HAVE_SYS_IPC_H 1
# 1006 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/i386-apple-darwin9.8.0/bits/c++config.h" 3
#define _GLIBCXX_HAVE_SYS_PARAM_H 1


#define _GLIBCXX_HAVE_SYS_RESOURCE_H 1





#define _GLIBCXX_HAVE_SYS_SEM_H 1


#define _GLIBCXX_HAVE_SYS_STATVFS_H 1


#define _GLIBCXX_HAVE_SYS_STAT_H 1





#define _GLIBCXX_HAVE_SYS_TIME_H 1


#define _GLIBCXX_HAVE_SYS_TYPES_H 1


#define _GLIBCXX_HAVE_SYS_UIO_H 1





#define _GLIBCXX_HAVE_S_ISREG 1


#define _GLIBCXX_HAVE_TANF 1


#define _GLIBCXX_HAVE_TANHF 1


#define _GLIBCXX_HAVE_TANHL 1


#define _GLIBCXX_HAVE_TANL 1


#define _GLIBCXX_HAVE_TGMATH_H 1


#define _GLIBCXX_HAVE_TLS 1





#define _GLIBCXX_HAVE_UNISTD_H 1





#define _GLIBCXX_HAVE_UTIME_H 1


#define _GLIBCXX_HAVE_VFWSCANF 1


#define _GLIBCXX_HAVE_VSWSCANF 1


#define _GLIBCXX_HAVE_VWSCANF 1


#define _GLIBCXX_HAVE_WCHAR_H 1


#define _GLIBCXX_HAVE_WCSTOF 1


#define _GLIBCXX_HAVE_WCTYPE_H 1





#define _GLIBCXX_HAVE_WRITEV 1
# 1285 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/i386-apple-darwin9.8.0/bits/c++config.h" 3
#define _GLIBCXX_ICONV_CONST 



#define LT_OBJDIR ".libs/"





#define _GLIBCXX_PACKAGE_BUGREPORT ""


#define _GLIBCXX_PACKAGE_NAME "package-unused"


#define _GLIBCXX_PACKAGE_STRING "package-unused version-unused"


#define _GLIBCXX_PACKAGE_TARNAME "libstdc++"


#define _GLIBCXX_PACKAGE_URL ""


#define _GLIBCXX_PACKAGE__GLIBCXX_VERSION "version-unused"
# 1328 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/i386-apple-darwin9.8.0/bits/c++config.h" 3
#define STDC_HEADERS 1







#define _GLIBCXX11_USE_C99_COMPLEX 1



#define _GLIBCXX11_USE_C99_MATH 1



#define _GLIBCXX11_USE_C99_STDIO 1



#define _GLIBCXX11_USE_C99_STDLIB 1



#define _GLIBCXX11_USE_C99_WCHAR 1




#define _GLIBCXX98_USE_C99_COMPLEX 1



#define _GLIBCXX98_USE_C99_MATH 1



#define _GLIBCXX98_USE_C99_STDIO 1



#define _GLIBCXX98_USE_C99_STDLIB 1



#define _GLIBCXX98_USE_C99_WCHAR 1


#define _GLIBCXX_ATOMIC_BUILTINS 1






#define _GLIBCXX_FULLY_DYNAMIC_STRING 0


#define _GLIBCXX_HAS_GTHREADS 1


#define _GLIBCXX_HOSTED 1




#define _GLIBCXX_MANGLE_SIZE_T m


#define _GLIBCXX_PTRDIFF_T_IS_INT 1


#define _GLIBCXX_RES_LIMITS 1





#define _GLIBCXX_STDIO_EOF -1


#define _GLIBCXX_STDIO_SEEK_CUR 1


#define _GLIBCXX_STDIO_SEEK_END 2


#define _GLIBCXX_SYMVER 1


#define _GLIBCXX_SYMVER_DARWIN 1
# 1435 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/i386-apple-darwin9.8.0/bits/c++config.h" 3
#define _GLIBCXX_USE_C99 1




#define _GLIBCXX_USE_C99_COMPLEX_TR1 1



#define _GLIBCXX_USE_C99_CTYPE_TR1 1



#define _GLIBCXX_USE_C99_FENV_TR1 1



#define _GLIBCXX_USE_C99_INTTYPES_TR1 1



#define _GLIBCXX_USE_C99_INTTYPES_WCHAR_T_TR1 1







#define _GLIBCXX_USE_C99_STDINT_TR1 1
# 1481 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/i386-apple-darwin9.8.0/bits/c++config.h" 3
#define _GLIBCXX_USE_FCHMOD 1





#define _GLIBCXX_USE_FLOAT128 1


#define _GLIBCXX_USE_GETTIMEOFDAY 1
# 1502 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/i386-apple-darwin9.8.0/bits/c++config.h" 3
#define _GLIBCXX_USE_LONG_LONG 1


#define _GLIBCXX_USE_NANOSLEEP 1
# 1514 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/i386-apple-darwin9.8.0/bits/c++config.h" 3
#define _GLIBCXX_USE_PTHREAD_RWLOCK_T 1



#define _GLIBCXX_USE_RANDOM_TR1 1





#define _GLIBCXX_USE_SCHED_YIELD 1


#define _GLIBCXX_USE_SC_NPROCESSORS_ONLN 1
# 1539 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/i386-apple-darwin9.8.0/bits/c++config.h" 3
#define _GLIBCXX_USE_SYSCTL_HW_NCPU 1


#define _GLIBCXX_USE_TMPNAM 1






#define _GLIBCXX_USE_WCHAR_T 1


#define _GLIBCXX_VERBOSE 1





#define _GTHREAD_USE_MUTEX_TIMEDLOCK 0
# 42 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cstdlib" 2 3


#define _GLIBCXX_CSTDLIB 1
# 74 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cstdlib" 3
#define _GLIBCXX_INCLUDE_NEXT_C_HEADERS 
# 1 "/usr/include/stdlib.h" 1 3 4
# 59 "/usr/include/stdlib.h" 3 4
#define _STDLIB_H_ 

# 1 "/usr/include/available.h" 1 3 4
# 66 "/usr/include/available.h" 3 4
#define _AVAILABLE_H_ 





#define __MAC_OS_X_VERSION_10_0 1000
#define __MAC_OS_X_VERSION_10_1 1010
#define __MAC_OS_X_VERSION_10_2 1020
#define __MAC_OS_X_VERSION_10_3 1030
#define __MAC_OS_X_VERSION_10_4 1040
#define __MAC_OS_X_VERSION_10_5 1050
# 86 "/usr/include/available.h" 3 4
#define __MAC_OS_X_VERSION_MIN_REQUIRED __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__
# 103 "/usr/include/available.h" 3 4
#define __MAC_OS_X_VERSION_MAX_ALLOWED __MAC_OS_X_VERSION_10_5
# 121 "/usr/include/available.h" 3 4
#define __DARWIN_WEAK_IMPORT_ATTRIBUTE __attribute__((weak_import))
# 132 "/usr/include/available.h" 3 4
#define __DARWIN_DEPRECATED_ATTRIBUTE __attribute__((deprecated))
# 141 "/usr/include/available.h" 3 4
#define __DARWIN_UNAVAILABLE_ATTRIBUTE __attribute__((unavailable))
# 153 "/usr/include/available.h" 3 4
#define __AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER 







#define __AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED __DARWIN_DEPRECATED_ATTRIBUTE






#define __DEPRECATED_IN_MAC_OS_X_VERSION_10_0_AND_LATER __DARWIN_DEPRECATED_ATTRIBUTE
# 185 "/usr/include/available.h" 3 4
#define __AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER 
# 195 "/usr/include/available.h" 3 4
#define __AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED __DARWIN_DEPRECATED_ATTRIBUTE
# 207 "/usr/include/available.h" 3 4
#define __AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_1 __DARWIN_DEPRECATED_ATTRIBUTE
# 218 "/usr/include/available.h" 3 4
#define __DEPRECATED_IN_MAC_OS_X_VERSION_10_1_AND_LATER __DARWIN_DEPRECATED_ATTRIBUTE
# 239 "/usr/include/available.h" 3 4
#define __AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER 
# 249 "/usr/include/available.h" 3 4
#define __AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED __DARWIN_DEPRECATED_ATTRIBUTE
# 261 "/usr/include/available.h" 3 4
#define __AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_2 __DARWIN_DEPRECATED_ATTRIBUTE
# 273 "/usr/include/available.h" 3 4
#define __AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_2 __DARWIN_DEPRECATED_ATTRIBUTE
# 284 "/usr/include/available.h" 3 4
#define __DEPRECATED_IN_MAC_OS_X_VERSION_10_2_AND_LATER __DARWIN_DEPRECATED_ATTRIBUTE
# 303 "/usr/include/available.h" 3 4
#define __AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER 
# 313 "/usr/include/available.h" 3 4
#define __AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER_BUT_DEPRECATED __DARWIN_DEPRECATED_ATTRIBUTE
# 325 "/usr/include/available.h" 3 4
#define __AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_3 __DARWIN_DEPRECATED_ATTRIBUTE
# 337 "/usr/include/available.h" 3 4
#define __AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_3 __DARWIN_DEPRECATED_ATTRIBUTE
# 349 "/usr/include/available.h" 3 4
#define __AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_3 __DARWIN_DEPRECATED_ATTRIBUTE
# 360 "/usr/include/available.h" 3 4
#define __DEPRECATED_IN_MAC_OS_X_VERSION_10_3_AND_LATER __DARWIN_DEPRECATED_ATTRIBUTE
# 380 "/usr/include/available.h" 3 4
#define __AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER 
# 390 "/usr/include/available.h" 3 4
#define __AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER_BUT_DEPRECATED __DARWIN_DEPRECATED_ATTRIBUTE
# 402 "/usr/include/available.h" 3 4
#define __AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_4 __DARWIN_DEPRECATED_ATTRIBUTE
# 414 "/usr/include/available.h" 3 4
#define __AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_4 __DARWIN_DEPRECATED_ATTRIBUTE
# 426 "/usr/include/available.h" 3 4
#define __AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_4 __DARWIN_DEPRECATED_ATTRIBUTE
# 438 "/usr/include/available.h" 3 4
#define __AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_4 __DARWIN_DEPRECATED_ATTRIBUTE
# 449 "/usr/include/available.h" 3 4
#define __DEPRECATED_IN_MAC_OS_X_VERSION_10_4_AND_LATER __DARWIN_DEPRECATED_ATTRIBUTE
# 468 "/usr/include/available.h" 3 4
#define __AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER 
# 478 "/usr/include/available.h" 3 4
#define __AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER_BUT_DEPRECATED __DARWIN_DEPRECATED_ATTRIBUTE
# 490 "/usr/include/available.h" 3 4
#define __AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_5 __DARWIN_DEPRECATED_ATTRIBUTE
# 502 "/usr/include/available.h" 3 4
#define __AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_5 __DARWIN_DEPRECATED_ATTRIBUTE
# 514 "/usr/include/available.h" 3 4
#define __AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_5 __DARWIN_DEPRECATED_ATTRIBUTE
# 526 "/usr/include/available.h" 3 4
#define __AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_5 __DARWIN_DEPRECATED_ATTRIBUTE
# 538 "/usr/include/available.h" 3 4
#define __AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_5 __DARWIN_DEPRECATED_ATTRIBUTE
# 549 "/usr/include/available.h" 3 4
#define __DEPRECATED_IN_MAC_OS_X_VERSION_10_5_AND_LATER __DARWIN_DEPRECATED_ATTRIBUTE
# 62 "/usr/include/stdlib.h" 2 3 4



# 1 "/usr/include/sys/wait.h" 1 3 4
# 65 "/usr/include/sys/wait.h" 3 4
#define _SYS_WAIT_H_ 
# 79 "/usr/include/sys/wait.h" 3 4
typedef enum {
 P_ALL,
 P_PID,
 P_PGID
} idtype_t;
# 117 "/usr/include/sys/wait.h" 3 4
# 1 "/usr/include/sys/resource.h" 1 3 4
# 65 "/usr/include/sys/resource.h" 3 4
#define _SYS_RESOURCE_H_ 
# 75 "/usr/include/sys/resource.h" 3 4
#define __need_struct_timeval 
# 1 "/usr/include/sys/_structs.h" 1 3 4
# 97 "/usr/include/sys/_structs.h" 3 4
#undef __need_struct_timeval
# 77 "/usr/include/sys/resource.h" 2 3 4
# 88 "/usr/include/sys/resource.h" 3 4
typedef __uint64_t rlim_t;
# 99 "/usr/include/sys/resource.h" 3 4
#define PRIO_PROCESS 0
#define PRIO_PGRP 1
#define PRIO_USER 2


#define PRIO_DARWIN_THREAD 3




#define PRIO_MIN -20
#define PRIO_MAX 20





#define PRIO_DARWIN_BG 0x1000
# 130 "/usr/include/sys/resource.h" 3 4
#define RUSAGE_SELF 0
#define RUSAGE_CHILDREN -1
# 142 "/usr/include/sys/resource.h" 3 4
struct rusage {
 struct timeval ru_utime;
 struct timeval ru_stime;
# 153 "/usr/include/sys/resource.h" 3 4
 long ru_maxrss;
#define ru_first ru_ixrss
 long ru_ixrss;
 long ru_idrss;
 long ru_isrss;
 long ru_minflt;
 long ru_majflt;
 long ru_nswap;
 long ru_inblock;
 long ru_oublock;
 long ru_msgsnd;
 long ru_msgrcv;
 long ru_nsignals;
 long ru_nvcsw;
 long ru_nivcsw;
#define ru_last ru_nivcsw

};
# 184 "/usr/include/sys/resource.h" 3 4
#define RLIM_INFINITY (((__uint64_t)1 << 63) - 1)
#define RLIM_SAVED_MAX RLIM_INFINITY
#define RLIM_SAVED_CUR RLIM_INFINITY





#define RLIMIT_CPU 0
#define RLIMIT_FSIZE 1
#define RLIMIT_DATA 2
#define RLIMIT_STACK 3
#define RLIMIT_CORE 4
#define RLIMIT_AS 5

#define RLIMIT_RSS RLIMIT_AS
#define RLIMIT_MEMLOCK 6
#define RLIMIT_NPROC 7

#define RLIMIT_NOFILE 8

#define RLIM_NLIMITS 9

#define _RLIMIT_POSIX_FLAG 0x1000





struct rlimit {
 rlim_t rlim_cur;
 rlim_t rlim_max;
};



#define IOPOL_TYPE_DISK 0


#define IOPOL_SCOPE_PROCESS 0
#define IOPOL_SCOPE_THREAD 1


#define IOPOL_DEFAULT 0
#define IOPOL_NORMAL 1
#define IOPOL_PASSIVE 2
#define IOPOL_THROTTLE 3




extern "C" {
int getpriority(int, id_t);

int getiopolicy_np(int, int);

int getrlimit(int, struct rlimit *) __asm("_" "getrlimit" "$UNIX2003");
int getrusage(int, struct rusage *);
int setpriority(int, id_t, int);

int setiopolicy_np(int, int, int);

int setrlimit(int, const struct rlimit *) __asm("_" "setrlimit" "$UNIX2003");
}
# 118 "/usr/include/sys/wait.h" 2 3 4
# 128 "/usr/include/sys/wait.h" 3 4
#define WNOHANG 0x00000001
#define WUNTRACED 0x00000002
# 138 "/usr/include/sys/wait.h" 3 4
#define _W_INT(w) (*(int *)&(w))
#define WCOREFLAG 0200



#define _WSTATUS(x) (_W_INT(x) & 0177)
#define _WSTOPPED 0177






#define WEXITSTATUS(x) ((_W_INT(x) >> 8) & 0x000000ff)




#define WSTOPSIG(x) (_W_INT(x) >> 8)
#define WIFCONTINUED(x) (_WSTATUS(x) == _WSTOPPED && WSTOPSIG(x) == 0x13)
#define WIFSTOPPED(x) (_WSTATUS(x) == _WSTOPPED && WSTOPSIG(x) != 0x13)
#define WIFEXITED(x) (_WSTATUS(x) == 0)
#define WIFSIGNALED(x) (_WSTATUS(x) != _WSTOPPED && _WSTATUS(x) != 0)
#define WTERMSIG(x) (_WSTATUS(x))

#define WCOREDUMP(x) (_W_INT(x) & WCOREFLAG)

#define W_EXITCODE(ret,sig) ((ret) << 8 | (sig))
#define W_STOPCODE(sig) ((sig) << 8 | _WSTOPPED)
# 175 "/usr/include/sys/wait.h" 3 4
#define WEXITED 0x00000004


#define WSTOPPED 0x00000008

#define WCONTINUED 0x00000010
#define WNOWAIT 0x00000020
# 190 "/usr/include/sys/wait.h" 3 4
#define WAIT_ANY (-1)
#define WAIT_MYPGRP 0
# 201 "/usr/include/sys/wait.h" 3 4
union wait {
 int w_status;



 struct {

  unsigned int w_Termsig:7,
    w_Coredump:1,
    w_Retcode:8,
    w_Filler:16;







 } w_T;





 struct {

  unsigned int w_Stopval:8,
    w_Stopsig:8,
    w_Filler:16;






 } w_S;
};
#define w_termsig w_T.w_Termsig
#define w_coredump w_T.w_Coredump
#define w_retcode w_T.w_Retcode
#define w_stopval w_S.w_Stopval
#define w_stopsig w_S.w_Stopsig
# 254 "/usr/include/sys/wait.h" 3 4
extern "C" {
pid_t wait(int *) __asm("_" "wait" "$UNIX2003");
pid_t waitpid(pid_t, int *, int) __asm("_" "waitpid" "$UNIX2003");

int waitid(idtype_t, id_t, siginfo_t *, int) __asm("_" "waitid" "$UNIX2003");


pid_t wait3(int *, int, struct rusage *);
pid_t wait4(pid_t, int *, int, struct rusage *);

}
# 66 "/usr/include/stdlib.h" 2 3 4

# 1 "/usr/include/alloca.h" 1 3 4
# 25 "/usr/include/alloca.h" 3 4
#define _ALLOCA_H_ 
# 35 "/usr/include/alloca.h" 3 4
extern "C" {
void *
# 36 "/usr/include/alloca.h"
     __builtin_alloca(
# 36 "/usr/include/alloca.h" 3 4
     size_t
# 36 "/usr/include/alloca.h"
     )
# 36 "/usr/include/alloca.h" 3 4
                   ;
}



#undef alloca
#undef __alloca
#define alloca(size) __alloca(size)
#define __alloca(size) __builtin_alloca(size)
# 68 "/usr/include/stdlib.h" 2 3 4
# 80 "/usr/include/stdlib.h" 3 4
#define _CT_RUNE_T 
typedef __darwin_ct_rune_t ct_rune_t;



#define _RUNE_T 
typedef __darwin_rune_t rune_t;
# 97 "/usr/include/stdlib.h" 3 4
typedef struct {
 int quot;
 int rem;
} div_t;

typedef struct {
 long quot;
 long rem;
} ldiv_t;


typedef struct {
 long long quot;
 long long rem;
} lldiv_t;






#define EXIT_FAILURE 1
#define EXIT_SUCCESS 0

#define RAND_MAX 0x7fffffff
# 134 "/usr/include/stdlib.h" 3 4
extern int __mb_cur_max;
#define MB_CUR_MAX __mb_cur_max
# 144 "/usr/include/stdlib.h" 3 4
extern "C" {
void abort(void) __attribute__((__noreturn__));
int abs(int) __attribute__((__const__));
int atexit(void (*)(void));
double atof(const char *);
int atoi(const char *);
long atol(const char *);

long long
  atoll(const char *);

void *bsearch(const void *, const void *, size_t,
     size_t, int (*)(const void *, const void *));
void *calloc(size_t, size_t);
div_t div(int, int) __attribute__((__const__));
void exit(int) __attribute__((__noreturn__));
void free(void *);
char *getenv(const char *);
long labs(long) __attribute__((__const__));
ldiv_t ldiv(long, long) __attribute__((__const__));

long long
  llabs(long long);
lldiv_t lldiv(long long, long long);

void *malloc(size_t);
int mblen(const char *, size_t);
size_t mbstowcs(wchar_t * , const char * , size_t);
int mbtowc(wchar_t * , const char * , size_t);
void qsort(void *, size_t, size_t,
     int (*)(const void *, const void *));
int rand(void);
void *realloc(void *, size_t);
void srand(unsigned);
double strtod(const char *, char **) __asm("_" "strtod" "$UNIX2003");
float strtof(const char *, char **) __asm("_" "strtof" "$UNIX2003");
long strtol(const char *, char **, int);
long double
  strtold(const char *, char **) ;

long long
  strtoll(const char *, char **, int);

unsigned long
  strtoul(const char *, char **, int);

unsigned long long
  strtoull(const char *, char **, int);

int system(const char *) __asm("_" "system" "$UNIX2003");
size_t wcstombs(char * , const wchar_t * , size_t);
int wctomb(char *, wchar_t);


void _Exit(int) __attribute__((__noreturn__));
long a64l(const char *);
double drand48(void);
char *ecvt(double, int, int *, int *);
double erand48(unsigned short[3]);
char *fcvt(double, int, int *, int *);
char *gcvt(double, int, char *);
int getsubopt(char **, char * const *, char **);
int grantpt(int);

char *initstate(unsigned, char *, size_t);



long jrand48(unsigned short[3]);
char *l64a(long);
void lcong48(unsigned short[7]);
long lrand48(void);
char *mktemp(char *);
int mkstemp(char *);
long mrand48(void);
long nrand48(unsigned short[3]);
int posix_openpt(int);
char *ptsname(int);
int putenv(char *) __asm("_" "putenv" "$UNIX2003");
long random(void);
int rand_r(unsigned *);

char *realpath(const char * , char * ) __asm("_" "realpath" "$DARWIN_EXTSN");



unsigned short
 *seed48(unsigned short[3]);
int setenv(const char *, const char *, int) __asm("_" "setenv" "$UNIX2003");

void setkey(const char *) __asm("_" "setkey" "$UNIX2003");



char *setstate(const char *);
void srand48(long);

void srandom(unsigned);



int unlockpt(int);

int unsetenv(const char *) __asm("_" "unsetenv" "$UNIX2003");
# 266 "/usr/include/stdlib.h" 3 4
u_int32_t
  arc4random(void);
void arc4random_addrandom(unsigned char *dat, int datlen);
void arc4random_stir(void);


char *cgetcap(char *, const char *, int);
int cgetclose(void);
int cgetent(char **, char **, const char *);
int cgetfirst(char **, char **);
int cgetmatch(const char *, const char *);
int cgetnext(char **, char **);
int cgetnum(char *, const char *, long *);
int cgetset(const char *);
int cgetstr(char *, const char *, char **);
int cgetustr(char *, const char *, char **);

int daemon(int, int) __asm("_" "daemon" "$1050") __attribute__((deprecated));
char *devname(dev_t, mode_t);
char *devname_r(dev_t, mode_t, char *buf, int len);
char *getbsize(int *, long *);
int getloadavg(double [], int);
const char
 *getprogname(void);

int heapsort(void *, size_t, size_t,
     int (*)(const void *, const void *));
int mergesort(void *, size_t, size_t,
     int (*)(const void *, const void *));
void qsort_r(void *, size_t, size_t, void *,
     int (*)(void *, const void *, const void *));
int radixsort(const unsigned char **, int, const unsigned char *,
     unsigned);
void setprogname(const char *);
int sradixsort(const unsigned char **, int, const unsigned char *,
     unsigned);
void sranddev(void);
void srandomdev(void);
void *reallocf(void *, size_t);

long long
  strtoq(const char *, char **, int);
unsigned long long
  strtouq(const char *, char **, int);

extern char *suboptarg;
void *valloc(size_t);






}
# 76 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cstdlib" 2 3
#undef _GLIBCXX_INCLUDE_NEXT_C_HEADERS


#undef abort
#undef abs
#undef atexit





#undef atof
#undef atoi
#undef atol
#undef bsearch
#undef calloc
#undef div
#undef exit
#undef free
#undef getenv
#undef labs
#undef ldiv
#undef malloc
#undef mblen
#undef mbstowcs
#undef mbtowc
#undef qsort





#undef rand
#undef realloc
#undef srand
#undef strtod
#undef strtol
#undef strtoul
#undef system
#undef wcstombs
#undef wctomb

extern "C++"
{
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::div_t;
  using ::ldiv_t;

  using ::abort;
  using ::abs;
  using ::atexit;





  using ::atof;
  using ::atoi;
  using ::atol;
  using ::bsearch;
  using ::calloc;
  using ::div;
  using ::exit;
  using ::free;
  using ::getenv;
  using ::labs;
  using ::ldiv;
  using ::malloc;

  using ::mblen;
  using ::mbstowcs;
  using ::mbtowc;

  using ::qsort;





  using ::rand;
  using ::realloc;
  using ::srand;
  using ::strtod;
  using ::strtol;
  using ::strtoul;
  using ::system;

  using ::wcstombs;
  using ::wctomb;



  
# 171 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cstdlib"
 __inline__ 
# 171 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cstdlib" 3
        long
  abs(long __i) { return __builtin_labs(__i); }

  
# 174 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cstdlib"
 __inline__ 
# 174 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cstdlib" 3
        ldiv_t
  div(long __i, long __j) { return ldiv(__i, __j); }



  
# 179 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cstdlib"
 __inline__ 
# 179 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cstdlib" 3
        long long
  abs(long long __x) { return __builtin_llabs (__x); }
# 201 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cstdlib" 3

}



#undef _Exit
#undef llabs
#undef lldiv
#undef atoll
#undef strtoll
#undef strtoull
#undef strtof
#undef strtold

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  using ::lldiv_t;





  using ::_Exit;



  using ::llabs;

  
# 232 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cstdlib"
 __inline__ 
# 232 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cstdlib" 3
        lldiv_t
  div(long long __n, long long __d)
  { lldiv_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }

  using ::lldiv;
# 247 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cstdlib" 3
  using ::atoll;
  using ::strtoll;
  using ::strtoull;

  using ::strtof;
  using ::strtold;


}

namespace std
{

  using ::__gnu_cxx::lldiv_t;

  using ::__gnu_cxx::_Exit;

  using ::__gnu_cxx::llabs;
  using ::__gnu_cxx::div;
  using ::__gnu_cxx::lldiv;

  using ::__gnu_cxx::atoll;
  using ::__gnu_cxx::strtof;
  using ::__gnu_cxx::strtoll;
  using ::__gnu_cxx::strtoull;
  using ::__gnu_cxx::strtold;
}



}
# 37 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/stdlib.h" 2 3 4

using std::abort;
using std::atexit;
using std::exit;
# 51 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/stdlib.h" 3 4
using std::div_t;
using std::ldiv_t;

using std::abs;
using std::atof;
using std::atoi;
using std::atol;
using std::bsearch;
using std::calloc;
using std::div;
using std::free;
using std::getenv;
using std::labs;
using std::ldiv;
using std::malloc;

using std::mblen;
using std::mbstowcs;
using std::mbtowc;

using std::qsort;
using std::rand;
using std::realloc;
using std::srand;
using std::strtod;
using std::strtol;
using std::strtoul;
using std::system;

using std::wcstombs;
using std::wctomb;
# 45 "/usr/include/assert.h" 2 3 4







#undef assert
#undef __assert
# 75 "/usr/include/assert.h" 3 4
extern "C" {
void __assert_rtn(const char *, const char *, int, const char *) __attribute__((__noreturn__));
void __eprintf(const char *, const char *, unsigned, const char *) __attribute__((__noreturn__));
}

#define __assert(e,file,line) __eprintf ("%s:%u: failed assertion `%s'\n", file, line, e)



#define assert(e) (__builtin_expect(!(e), 0) ? __assert_rtn(__func__, __FILE__, __LINE__, #e) : (void)0)
# 14 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CoreFoundation.h" 2 3
# 1 "/usr/include/ctype.h" 1 3 4
# 67 "/usr/include/ctype.h" 3 4
#define _CTYPE_H_ 

# 1 "/usr/include/runetype.h" 1 3 4
# 40 "/usr/include/runetype.h" 3 4
#define _RUNETYPE_H_ 
# 69 "/usr/include/runetype.h" 3 4
#define _WINT_T 
typedef __darwin_wint_t wint_t;




#define _CACHED_RUNES (1 <<8 )
#define _CRMASK (~(_CACHED_RUNES - 1))




typedef struct {
 __darwin_rune_t __min;
 __darwin_rune_t __max;
 __darwin_rune_t __map;
 __uint32_t *__types;
} _RuneEntry;

typedef struct {
 int __nranges;
 _RuneEntry *__ranges;
} _RuneRange;

typedef struct {
 char __name[14];
 __uint32_t __mask;
} _RuneCharClass;

typedef struct {
 char __magic[8];
 char __encoding[32];

 __darwin_rune_t (*__sgetrune)(const char *, __darwin_size_t, char const **);
 int (*__sputrune)(__darwin_rune_t, char *, __darwin_size_t, char **);
 __darwin_rune_t __invalid_rune;

 __uint32_t __runetype[(1 <<8 )];
 __darwin_rune_t __maplower[(1 <<8 )];
 __darwin_rune_t __mapupper[(1 <<8 )];






 _RuneRange __runetype_ext;
 _RuneRange __maplower_ext;
 _RuneRange __mapupper_ext;

 void *__variable;
 int __variable_len;




 int __ncharclasses;
 _RuneCharClass *__charclasses;
} _RuneLocale;

#define _RUNE_MAGIC_A "RuneMagA"

extern "C" {
extern _RuneLocale _DefaultRuneLocale;
extern _RuneLocale *_CurrentRuneLocale;
}
# 70 "/usr/include/ctype.h" 2 3 4

#define _CTYPE_A 0x00000100L
#define _CTYPE_C 0x00000200L
#define _CTYPE_D 0x00000400L
#define _CTYPE_G 0x00000800L
#define _CTYPE_L 0x00001000L
#define _CTYPE_P 0x00002000L
#define _CTYPE_S 0x00004000L
#define _CTYPE_U 0x00008000L
#define _CTYPE_X 0x00010000L
#define _CTYPE_B 0x00020000L
#define _CTYPE_R 0x00040000L
#define _CTYPE_I 0x00080000L
#define _CTYPE_T 0x00100000L
#define _CTYPE_Q 0x00200000L
#define _CTYPE_SW0 0x20000000L
#define _CTYPE_SW1 0x40000000L
#define _CTYPE_SW2 0x80000000L
#define _CTYPE_SW3 0xc0000000L
#define _CTYPE_SWM 0xe0000000L
#define _CTYPE_SWS 30
# 124 "/usr/include/ctype.h" 3 4
#define __DARWIN_CTYPE_static_inline static __inline
# 135 "/usr/include/ctype.h" 3 4
#define __DARWIN_CTYPE_TOP_static_inline static __inline
# 145 "/usr/include/ctype.h" 3 4
extern "C" {
unsigned long ___runetype(__darwin_ct_rune_t);
__darwin_ct_rune_t ___tolower(__darwin_ct_rune_t);
__darwin_ct_rune_t ___toupper(__darwin_ct_rune_t);
}

static 
# 151 "/usr/include/ctype.h"
__inline__ 
# 151 "/usr/include/ctype.h" 3 4
                                int
isascii(int _c)
{
 return ((_c & ~0x7F) == 0);
}
# 164 "/usr/include/ctype.h" 3 4
extern "C" {
int __maskrune(__darwin_ct_rune_t, unsigned long);
}


static 
# 169 "/usr/include/ctype.h"
__inline__ 
# 169 "/usr/include/ctype.h" 3 4
                            int
__istype(__darwin_ct_rune_t _c, unsigned long _f)
{



 return (isascii(_c) ? !!(_DefaultRuneLocale.__runetype[_c] & _f)
  : !!__maskrune(_c, _f));

}

static 
# 180 "/usr/include/ctype.h"
__inline__ 
# 180 "/usr/include/ctype.h" 3 4
                            __darwin_ct_rune_t
__isctype(__darwin_ct_rune_t _c, unsigned long _f)
{



 return (_c < 0 || _c >= (1 <<8 )) ? 0 :
  !!(_DefaultRuneLocale.__runetype[_c] & _f);

}
# 204 "/usr/include/ctype.h" 3 4
extern "C" {
__darwin_ct_rune_t __toupper(__darwin_ct_rune_t);
__darwin_ct_rune_t __tolower(__darwin_ct_rune_t);
}


static 
# 210 "/usr/include/ctype.h"
__inline__ 
# 210 "/usr/include/ctype.h" 3 4
                            int
__wcwidth(__darwin_ct_rune_t _c)
{
 unsigned int _x;

 if (_c == 0)
  return (0);
 _x = (unsigned int)__maskrune(_c, 0xe0000000L|0x00040000L);
 if ((_x & 0xe0000000L) != 0)
  return ((_x & 0xe0000000L) >> 30);
 return ((_x & 0x00040000L) != 0 ? 1 : -1);
}



#define _tolower(c) __tolower(c)
#define _toupper(c) __toupper(c)

static 
# 228 "/usr/include/ctype.h"
__inline__ 
# 228 "/usr/include/ctype.h" 3 4
                                int
isalnum(int _c)
{
 return (__istype(_c, 0x00000100L|0x00000400L));
}

static 
# 234 "/usr/include/ctype.h"
__inline__ 
# 234 "/usr/include/ctype.h" 3 4
                                int
isalpha(int _c)
{
 return (__istype(_c, 0x00000100L));
}

static 
# 240 "/usr/include/ctype.h"
__inline__ 
# 240 "/usr/include/ctype.h" 3 4
                                int
isblank(int _c)
{
 return (__istype(_c, 0x00020000L));
}

static 
# 246 "/usr/include/ctype.h"
__inline__ 
# 246 "/usr/include/ctype.h" 3 4
                                int
iscntrl(int _c)
{
 return (__istype(_c, 0x00000200L));
}


static 
# 253 "/usr/include/ctype.h"
__inline__ 
# 253 "/usr/include/ctype.h" 3 4
                                int
isdigit(int _c)
{
 return (__isctype(_c, 0x00000400L));
}

static 
# 259 "/usr/include/ctype.h"
__inline__ 
# 259 "/usr/include/ctype.h" 3 4
                                int
isgraph(int _c)
{
 return (__istype(_c, 0x00000800L));
}

static 
# 265 "/usr/include/ctype.h"
__inline__ 
# 265 "/usr/include/ctype.h" 3 4
                                int
islower(int _c)
{
 return (__istype(_c, 0x00001000L));
}

static 
# 271 "/usr/include/ctype.h"
__inline__ 
# 271 "/usr/include/ctype.h" 3 4
                                int
isprint(int _c)
{
 return (__istype(_c, 0x00040000L));
}

static 
# 277 "/usr/include/ctype.h"
__inline__ 
# 277 "/usr/include/ctype.h" 3 4
                                int
ispunct(int _c)
{
 return (__istype(_c, 0x00002000L));
}

static 
# 283 "/usr/include/ctype.h"
__inline__ 
# 283 "/usr/include/ctype.h" 3 4
                                int
isspace(int _c)
{
 return (__istype(_c, 0x00004000L));
}

static 
# 289 "/usr/include/ctype.h"
__inline__ 
# 289 "/usr/include/ctype.h" 3 4
                                int
isupper(int _c)
{
 return (__istype(_c, 0x00008000L));
}


static 
# 296 "/usr/include/ctype.h"
__inline__ 
# 296 "/usr/include/ctype.h" 3 4
                                int
isxdigit(int _c)
{
 return (__isctype(_c, 0x00010000L));
}

static 
# 302 "/usr/include/ctype.h"
__inline__ 
# 302 "/usr/include/ctype.h" 3 4
                                int
toascii(int _c)
{
 return (_c & 0x7F);
}

static 
# 308 "/usr/include/ctype.h"
__inline__ 
# 308 "/usr/include/ctype.h" 3 4
                                int
tolower(int _c)
{
        return (__tolower(_c));
}

static 
# 314 "/usr/include/ctype.h"
__inline__ 
# 314 "/usr/include/ctype.h" 3 4
                                int
toupper(int _c)
{
        return (__toupper(_c));
}


static 
# 321 "/usr/include/ctype.h"
__inline__ 
# 321 "/usr/include/ctype.h" 3 4
                                int
digittoint(int _c)
{
 return (__maskrune(_c, 0x0F));
}

static 
# 327 "/usr/include/ctype.h"
__inline__ 
# 327 "/usr/include/ctype.h" 3 4
                                int
ishexnumber(int _c)
{
 return (__istype(_c, 0x00010000L));
}

static 
# 333 "/usr/include/ctype.h"
__inline__ 
# 333 "/usr/include/ctype.h" 3 4
                                int
isideogram(int _c)
{
 return (__istype(_c, 0x00080000L));
}

static 
# 339 "/usr/include/ctype.h"
__inline__ 
# 339 "/usr/include/ctype.h" 3 4
                                int
isnumber(int _c)
{
 return (__istype(_c, 0x00000400L));
}

static 
# 345 "/usr/include/ctype.h"
__inline__ 
# 345 "/usr/include/ctype.h" 3 4
                                int
isphonogram(int _c)
{
 return (__istype(_c, 0x00200000L));
}

static 
# 351 "/usr/include/ctype.h"
__inline__ 
# 351 "/usr/include/ctype.h" 3 4
                                int
isrune(int _c)
{
 return (__istype(_c, 0xFFFFFFF0L));
}

static 
# 357 "/usr/include/ctype.h"
__inline__ 
# 357 "/usr/include/ctype.h" 3 4
                                int
isspecial(int _c)
{
 return (__istype(_c, 0x00100000L));
}
# 15 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CoreFoundation.h" 2 3
# 1 "/usr/include/errno.h" 1 3 4
# 16 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CoreFoundation.h" 2 3
# 1 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/float.h" 1 3 4
# 29 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/float.h" 3 4
#define _FLOAT_H___ 


#undef FLT_RADIX
#define FLT_RADIX __FLT_RADIX__


#undef FLT_MANT_DIG
#undef DBL_MANT_DIG
#undef LDBL_MANT_DIG
#define FLT_MANT_DIG __FLT_MANT_DIG__
#define DBL_MANT_DIG __DBL_MANT_DIG__
#define LDBL_MANT_DIG __LDBL_MANT_DIG__
# 50 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/float.h" 3 4
#undef FLT_DIG
#undef DBL_DIG
#undef LDBL_DIG
#define FLT_DIG __FLT_DIG__
#define DBL_DIG __DBL_DIG__
#define LDBL_DIG __LDBL_DIG__


#undef FLT_MIN_EXP
#undef DBL_MIN_EXP
#undef LDBL_MIN_EXP
#define FLT_MIN_EXP __FLT_MIN_EXP__
#define DBL_MIN_EXP __DBL_MIN_EXP__
#define LDBL_MIN_EXP __LDBL_MIN_EXP__






#undef FLT_MIN_10_EXP
#undef DBL_MIN_10_EXP
#undef LDBL_MIN_10_EXP
#define FLT_MIN_10_EXP __FLT_MIN_10_EXP__
#define DBL_MIN_10_EXP __DBL_MIN_10_EXP__
#define LDBL_MIN_10_EXP __LDBL_MIN_10_EXP__


#undef FLT_MAX_EXP
#undef DBL_MAX_EXP
#undef LDBL_MAX_EXP
#define FLT_MAX_EXP __FLT_MAX_EXP__
#define DBL_MAX_EXP __DBL_MAX_EXP__
#define LDBL_MAX_EXP __LDBL_MAX_EXP__






#undef FLT_MAX_10_EXP
#undef DBL_MAX_10_EXP
#undef LDBL_MAX_10_EXP
#define FLT_MAX_10_EXP __FLT_MAX_10_EXP__
#define DBL_MAX_10_EXP __DBL_MAX_10_EXP__
#define LDBL_MAX_10_EXP __LDBL_MAX_10_EXP__





#undef FLT_MAX
#undef DBL_MAX
#undef LDBL_MAX
#define FLT_MAX __FLT_MAX__
#define DBL_MAX __DBL_MAX__
#define LDBL_MAX __LDBL_MAX__



#undef FLT_EPSILON
#undef DBL_EPSILON
#undef LDBL_EPSILON
#define FLT_EPSILON __FLT_EPSILON__
#define DBL_EPSILON __DBL_EPSILON__
#define LDBL_EPSILON __LDBL_EPSILON__


#undef FLT_MIN
#undef DBL_MIN
#undef LDBL_MIN
#define FLT_MIN __FLT_MIN__
#define DBL_MIN __DBL_MIN__
#define LDBL_MIN __LDBL_MIN__



#undef FLT_ROUNDS
#define FLT_ROUNDS 1
# 17 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CoreFoundation.h" 2 3
# 1 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include-fixed/limits.h" 1 3 4
# 18 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CoreFoundation.h" 2 3

# 1 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/math.h" 1 3
# 34 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/math.h" 3
#define _GLIBCXX_MATH_H 1

# 1 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 1 3
# 39 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 3
       
# 40 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 3


# 1 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/bits/cpp_type_traits.h" 1 3
# 33 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/bits/cpp_type_traits.h" 3
#define _CPP_TYPE_TRAITS_H 1

       
# 36 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/bits/cpp_type_traits.h" 3
# 67 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/bits/cpp_type_traits.h" 3
extern "C++" {

namespace std __attribute__ ((__visibility__ ("default")))
{


  struct __true_type { };
  struct __false_type { };

  template<bool>
    struct __truth_type
    { typedef __false_type __type; };

  template<>
    struct __truth_type<true>
    { typedef __true_type __type; };



  template<class _Sp, class _Tp>
    struct __traitor
    {
      enum { __value = bool(_Sp::__value) || bool(_Tp::__value) };
      typedef typename __truth_type<__value>::__type __type;
    };


  template<typename, typename>
    struct __are_same
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __are_same<_Tp, _Tp>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_void
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_void<void>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_integer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };





  template<>
    struct __is_integer<bool>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_integer<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };
# 190 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/bits/cpp_type_traits.h" 3
  template<>
    struct __is_integer<short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

#define __INT_N(TYPE) template<> struct __is_integer<TYPE> { enum { __value = 1 }; typedef __true_type __type; }; template<> struct __is_integer<unsigned TYPE> { enum { __value = 1 }; typedef __true_type __type; };
# 273 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/bits/cpp_type_traits.h" 3
#undef __INT_N




  template<typename _Tp>
    struct __is_floating
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };


  template<>
    struct __is_floating<float>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<long double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_pointer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __is_pointer<_Tp*>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_arithmetic
    : public __traitor<__is_integer<_Tp>, __is_floating<_Tp> >
    { };




  template<typename _Tp>
    struct __is_scalar
    : public __traitor<__is_arithmetic<_Tp>, __is_pointer<_Tp> >
    { };




  template<typename _Tp>
    struct __is_char
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_char<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_char<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_byte
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_byte<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_move_iterator
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };



  template<typename _Iterator>
    
# 407 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/bits/cpp_type_traits.h"
   __inline__ 
# 407 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/bits/cpp_type_traits.h" 3
          _Iterator
    __miter_base(_Iterator __it)
    { return __it; }


}
}
# 43 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 2 3
# 1 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/ext/type_traits.h" 1 3
# 30 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/ext/type_traits.h" 3
#define _EXT_TYPE_TRAITS 1

       
# 33 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/ext/type_traits.h" 3




extern "C++" {

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  template<bool, typename>
    struct __enable_if
    { };

  template<typename _Tp>
    struct __enable_if<true, _Tp>
    { typedef _Tp __type; };



  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    struct __conditional_type
    { typedef _Iftrue __type; };

  template<typename _Iftrue, typename _Iffalse>
    struct __conditional_type<false, _Iftrue, _Iffalse>
    { typedef _Iffalse __type; };



  template<typename _Tp>
    struct __add_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __add_unsigned<char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<signed char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<short>
    { typedef unsigned short __type; };

  template<>
    struct __add_unsigned<int>
    { typedef unsigned int __type; };

  template<>
    struct __add_unsigned<long>
    { typedef unsigned long __type; };

  template<>
    struct __add_unsigned<long long>
    { typedef unsigned long long __type; };


  template<>
    struct __add_unsigned<bool>;

  template<>
    struct __add_unsigned<wchar_t>;



  template<typename _Tp>
    struct __remove_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __remove_unsigned<char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned short>
    { typedef short __type; };

  template<>
    struct __remove_unsigned<unsigned int>
    { typedef int __type; };

  template<>
    struct __remove_unsigned<unsigned long>
    { typedef long __type; };

  template<>
    struct __remove_unsigned<unsigned long long>
    { typedef long long __type; };


  template<>
    struct __remove_unsigned<bool>;

  template<>
    struct __remove_unsigned<wchar_t>;



  template<typename _Type>
    
# 151 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/ext/type_traits.h"
   __inline__ 
# 151 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/ext/type_traits.h" 3
          bool
    __is_null_pointer(_Type* __ptr)
    { return __ptr == 0; }

  template<typename _Type>
    
# 156 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/ext/type_traits.h"
   __inline__ 
# 156 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/ext/type_traits.h" 3
          bool
    __is_null_pointer(_Type)
    { return false; }
# 167 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/ext/type_traits.h" 3
  template<typename _Tp, bool = std::__is_integer<_Tp>::__value>
    struct __promote
    { typedef double __type; };




  template<typename _Tp>
    struct __promote<_Tp, false>
    { };

  template<>
    struct __promote<long double>
    { typedef long double __type; };

  template<>
    struct __promote<double>
    { typedef double __type; };

  template<>
    struct __promote<float>
    { typedef float __type; };

  template<typename _Tp, typename _Up,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type>
    struct __promote_2
    {
      typedef __typeof__(_Tp2() + _Up2()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type,
           typename _Vp2 = typename __promote<_Vp>::__type>
    struct __promote_3
    {
      typedef __typeof__(_Tp2() + _Up2() + _Vp2()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp, typename _Wp,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type,
           typename _Vp2 = typename __promote<_Vp>::__type,
           typename _Wp2 = typename __promote<_Wp>::__type>
    struct __promote_4
    {
      typedef __typeof__(_Tp2() + _Up2() + _Vp2() + _Wp2()) __type;
    };


}
}
# 44 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 2 3
#define _GLIBCXX_INCLUDE_NEXT_C_HEADERS 
# 1 "/usr/include/math.h" 1 3 4
# 23 "/usr/include/math.h" 3 4
#define __MATH_H__ 




# 1 "/usr/include/architecture/i386/math.h" 1 3 4
# 31 "/usr/include/architecture/i386/math.h" 3 4
#define __MATH__ 




extern "C" {
# 49 "/usr/include/architecture/i386/math.h" 3 4
 typedef float float_t;
 typedef double double_t;
# 63 "/usr/include/architecture/i386/math.h" 3 4
#define HUGE_VAL __builtin_huge_val()
#define HUGE_VALF __builtin_huge_valf()
#define HUGE_VALL __builtin_huge_vall()
#define NAN __builtin_nanf("0x7fc00000")
#define __MATH_H_ALWAYS_INLINE__ __attribute__ ((__always_inline__))
# 76 "/usr/include/architecture/i386/math.h" 3 4
#define INFINITY HUGE_VALF






enum {
 _FP_NAN = 1,
 _FP_INFINITE = 2,
 _FP_ZERO = 3,
 _FP_NORMAL = 4,
 _FP_SUBNORMAL = 5,
 _FP_SUPERNORMAL = 6
};

#define FP_NAN _FP_NAN
#define FP_INFINITE _FP_INFINITE
#define FP_ZERO _FP_ZERO
#define FP_NORMAL _FP_NORMAL
#define FP_SUBNORMAL _FP_SUBNORMAL
#define FP_SUPERNORMAL _FP_SUPERNORMAL






#undef FP_FAST_FMA
#undef FP_FAST_FMAF
#undef FP_FAST_FMAL


#define FP_ILOGB0 (-2147483647 - 1)
#define FP_ILOGBNAN (-2147483647 - 1)


#define MATH_ERRNO 1
#define MATH_ERREXCEPT 2

#define math_errhandling (__math_errhandling())
extern unsigned int __math_errhandling ( void );
# 132 "/usr/include/architecture/i386/math.h" 3 4
#define fpclassify(x) ( sizeof (x) == sizeof(float ) ? __fpclassifyf((float)(x)) : sizeof (x) == sizeof(double) ? __fpclassifyd((double)(x)) : __fpclassify ((long double)(x)))




extern int __fpclassifyf(float );
extern int __fpclassifyd(double );
extern int __fpclassify (long double);
# 206 "/usr/include/architecture/i386/math.h" 3 4
#define isnormal(x) ( sizeof (x) == sizeof(float ) ? __isnormalf((float)(x)) : sizeof (x) == sizeof(double) ? __isnormald((double)(x)) : __isnormal ((long double)(x)))




#define isfinite(x) ( sizeof (x) == sizeof(float ) ? __isfinitef((float)(x)) : sizeof (x) == sizeof(double) ? __isfinited((double)(x)) : __isfinite ((long double)(x)))




#define isinf(x) ( sizeof (x) == sizeof(float ) ? __isinff((float)(x)) : sizeof (x) == sizeof(double) ? __isinfd((double)(x)) : __isinf ((long double)(x)))




#define isnan(x) ( sizeof (x) == sizeof(float ) ? __isnanf((float)(x)) : sizeof (x) == sizeof(double) ? __isnand((double)(x)) : __isnan ((long double)(x)))




#define signbit(x) ( sizeof (x) == sizeof(float ) ? __signbitf((float)(x)) : sizeof (x) == sizeof(double) ? __signbitd((double)(x)) : __signbitl((long double)(x)))





 extern int __isnormalf (float );
 extern int __isnormald (double );
 extern int __isnormal (long double);

 extern int __isfinitef (float );
 extern int __isfinited (double );
 extern int __isfinite (long double);

 extern int __isinff (float );
 extern int __isinfd (double );
 extern int __isinf (long double);

 extern int __isnanf (float );
 extern int __isnand (double );
 extern int __isnan (long double);

 extern int __signbitf (float );
 extern int __signbitd (double );
 extern int __signbitl (long double);
# 262 "/usr/include/architecture/i386/math.h" 3 4
extern double acos( double );
extern float acosf( float );

extern double asin( double );
extern float asinf( float );

extern double atan( double );
extern float atanf( float );

extern double atan2( double, double );
extern float atan2f( float, float );

extern double cos( double );
extern float cosf( float );

extern double sin( double );
extern float sinf( float );

extern double tan( double );
extern float tanf( float );

extern double acosh( double );
extern float acoshf( float );

extern double asinh( double );
extern float asinhf( float );

extern double atanh( double );
extern float atanhf( float );

extern double cosh( double );
extern float coshf( float );

extern double sinh( double );
extern float sinhf( float );

extern double tanh( double );
extern float tanhf( float );

extern double exp ( double );
extern float expf ( float );

extern double exp2 ( double );
extern float exp2f ( float );

extern double expm1 ( double );
extern float expm1f ( float );

extern double log ( double );
extern float logf ( float );

extern double log10 ( double );
extern float log10f ( float );

extern double log2 ( double );
extern float log2f ( float );

extern double log1p ( double );
extern float log1pf ( float );

extern double logb ( double );
extern float logbf ( float );

extern double modf ( double, double * );
extern float modff ( float, float * );

extern double ldexp ( double, int );
extern float ldexpf ( float, int );

extern double frexp ( double, int * );
extern float frexpf ( float, int * );

extern int ilogb ( double );
extern int ilogbf ( float );

extern double scalbn ( double, int );
extern float scalbnf ( float, int );

extern double scalbln ( double, long int );
extern float scalblnf ( float, long int );

extern double fabs( double );
extern float fabsf( float );

extern double cbrt( double );
extern float cbrtf( float );

extern double hypot ( double, double );
extern float hypotf ( float, float );

extern double pow ( double, double );
extern float powf ( float, float );

extern double sqrt( double );
extern float sqrtf( float );

extern double erf( double );
extern float erff( float );

extern double erfc( double );
extern float erfcf( float );

extern double lgamma( double );
extern float lgammaf( float );

extern double tgamma( double );
extern float tgammaf( float );

extern double ceil ( double );
extern float ceilf ( float );

extern double floor ( double );
extern float floorf ( float );

extern double nearbyint ( double );
extern float nearbyintf ( float );

extern double rint ( double );
extern float rintf ( float );

extern long int lrint ( double );
extern long int lrintf ( float );

extern double round ( double );
extern float roundf ( float );

extern long int lround ( double );
extern long int lroundf ( float );




    extern long long int llrint ( double );
    extern long long int llrintf ( float );

    extern long long int llround ( double );
    extern long long int llroundf ( float );



extern double trunc ( double );
extern float truncf ( float );

extern double fmod ( double, double );
extern float fmodf ( float, float );

extern double remainder ( double, double );
extern float remainderf ( float, float );

extern double remquo ( double, double, int * );
extern float remquof ( float, float, int * );

extern double copysign ( double, double );
extern float copysignf ( float, float );

extern double nan( const char * );
extern float nanf( const char * );

extern double nextafter ( double, double );
extern float nextafterf ( float, float );

extern double fdim ( double, double );
extern float fdimf ( float, float );

extern double fmax ( double, double );
extern float fmaxf ( float, float );

extern double fmin ( double, double );
extern float fminf ( float, float );

extern double fma ( double, double, double );
extern float fmaf ( float, float, float );

extern long double acosl(long double);
extern long double asinl(long double);
extern long double atanl(long double);
extern long double atan2l(long double, long double);
extern long double cosl(long double);
extern long double sinl(long double);
extern long double tanl(long double);
extern long double acoshl(long double);
extern long double asinhl(long double);
extern long double atanhl(long double);
extern long double coshl(long double);
extern long double sinhl(long double);
extern long double tanhl(long double);
extern long double expl(long double);
extern long double exp2l(long double);
extern long double expm1l(long double);
extern long double logl(long double);
extern long double log10l(long double);
extern long double log2l(long double);
extern long double log1pl(long double);
extern long double logbl(long double);
extern long double modfl(long double, long double *);
extern long double ldexpl(long double, int);
extern long double frexpl(long double, int *);
extern int ilogbl(long double);
extern long double scalbnl(long double, int);
extern long double scalblnl(long double, long int);
extern long double fabsl(long double);
extern long double cbrtl(long double);
extern long double hypotl(long double, long double);
extern long double powl(long double, long double);
extern long double sqrtl(long double);
extern long double erfl(long double);
extern long double erfcl(long double);
extern long double lgammal(long double);
extern long double tgammal(long double);
extern long double ceill(long double);
extern long double floorl(long double);
extern long double nearbyintl(long double);
extern long double rintl(long double);
extern long int lrintl(long double);
extern long double roundl(long double);
extern long int lroundl(long double);



    extern long long int llrintl(long double);
    extern long long int llroundl(long double);


extern long double truncl(long double);
extern long double fmodl(long double, long double);
extern long double remainderl(long double, long double);
extern long double remquol(long double, long double, int *);
extern long double copysignl(long double, long double);
extern long double nanl(const char *);
extern long double nextafterl(long double, long double);
extern double nexttoward(double, long double);
extern float nexttowardf(float, long double);
extern long double nexttowardl(long double, long double);
extern long double fdiml(long double, long double);
extern long double fmaxl(long double, long double);
extern long double fminl(long double, long double);
extern long double fmal(long double, long double, long double);

#define isgreater(x,y) __builtin_isgreater ((x),(y))
#define isgreaterequal(x,y) __builtin_isgreaterequal ((x),(y))
#define isless(x,y) __builtin_isless ((x),(y))
#define islessequal(x,y) __builtin_islessequal ((x),(y))
#define islessgreater(x,y) __builtin_islessgreater ((x),(y))
#define isunordered(x,y) __builtin_isunordered ((x),(y))

extern double __inf( void );
extern float __inff( void );
extern long double __infl( void );
extern float __nan( void );


extern double j0 ( double );

extern double j1 ( double );

extern double jn ( int, double );

extern double y0 ( double );

extern double y1 ( double );

extern double yn ( int, double );

extern double scalb ( double, double );


#define M_E 2.71828182845904523536028747135266250
#define M_LOG2E 1.44269504088896340735992468100189214
#define M_LOG10E 0.434294481903251827651128918916605082
#define M_LN2 0.693147180559945309417232121458176568
#define M_LN10 2.30258509299404568401799145468436421
#define M_PI 3.14159265358979323846264338327950288
#define M_PI_2 1.57079632679489661923132169163975144
#define M_PI_4 0.785398163397448309615660845819875721
#define M_1_PI 0.318309886183790671537767526745028724
#define M_2_PI 0.636619772367581343075535053490057448
#define M_2_SQRTPI 1.12837916709551257389615890312154517
#define M_SQRT2 1.41421356237309504880168872420969808
#define M_SQRT1_2 0.707106781186547524400844362104849039

#define MAXFLOAT ((float)3.40282346638528860e+38)
extern int signgam;





#define __WANT_EXTENSIONS__ 




#define FP_SNAN FP_NAN
#define FP_QNAN FP_NAN

extern long int rinttol ( double );

extern long int roundtol ( double );
# 577 "/usr/include/architecture/i386/math.h" 3 4
#define HUGE MAXFLOAT






#define X_TLOSS 1.41484755040568800000e+16

#define DOMAIN 1
#define SING 2
#define OVERFLOW 3
#define UNDERFLOW 4
#define TLOSS 5
#define PLOSS 6





extern int finite ( double );

extern double gamma ( double );
# 610 "/usr/include/architecture/i386/math.h" 3 4
extern double significand ( double );




extern double drem ( double, double );







}
# 29 "/usr/include/math.h" 2 3 4
# 46 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 2 3
#undef _GLIBCXX_INCLUDE_NEXT_C_HEADERS


#define _GLIBCXX_CMATH 1


#undef abs
#undef div
#undef acos
#undef asin
#undef atan
#undef atan2
#undef ceil
#undef cos
#undef cosh
#undef exp
#undef fabs
#undef floor
#undef fmod
#undef frexp
#undef ldexp
#undef log
#undef log10
#undef modf
#undef pow
#undef sin
#undef sinh
#undef sqrt
#undef tan
#undef tanh

extern "C++"
{
namespace std __attribute__ ((__visibility__ ("default")))
{



  
# 84 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath"
 __inline__ 
# 84 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 3
                           double
  abs(double __x)
  { return __builtin_fabs(__x); }



  
# 90 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath"
 __inline__ 
# 90 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 3
                           float
  abs(float __x)
  { return __builtin_fabsf(__x); }

  
# 94 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath"
 __inline__ 
# 94 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 3
                           long double
  abs(long double __x)
  { return __builtin_fabsl(__x); }


  template<typename _Tp>
    
# 100 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath"
   __inline__
    
# 101 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 3
   typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    abs(_Tp __x)
    { return __builtin_fabs(__x); }

  using ::acos;


  
# 109 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath"
 __inline__ 
# 109 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 3
                           float
  acos(float __x)
  { return __builtin_acosf(__x); }

  
# 113 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath"
 __inline__ 
# 113 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 3
                           long double
  acos(long double __x)
  { return __builtin_acosl(__x); }


  template<typename _Tp>
    
# 119 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath"
   __inline__
    
# 120 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 3
   typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    acos(_Tp __x)
    { return __builtin_acos(__x); }

  using ::asin;


  
# 128 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath"
 __inline__ 
# 128 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 3
                           float
  asin(float __x)
  { return __builtin_asinf(__x); }

  
# 132 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath"
 __inline__ 
# 132 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 3
                           long double
  asin(long double __x)
  { return __builtin_asinl(__x); }


  template<typename _Tp>
    
# 138 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath"
   __inline__
    
# 139 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 3
   typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    asin(_Tp __x)
    { return __builtin_asin(__x); }

  using ::atan;


  
# 147 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath"
 __inline__ 
# 147 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 3
                           float
  atan(float __x)
  { return __builtin_atanf(__x); }

  
# 151 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath"
 __inline__ 
# 151 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 3
                           long double
  atan(long double __x)
  { return __builtin_atanl(__x); }


  template<typename _Tp>
    
# 157 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath"
   __inline__
    
# 158 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 3
   typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    atan(_Tp __x)
    { return __builtin_atan(__x); }

  using ::atan2;


  
# 166 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath"
 __inline__ 
# 166 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 3
                           float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }

  
# 170 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath"
 __inline__ 
# 170 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 3
                           long double
  atan2(long double __y, long double __x)
  { return __builtin_atan2l(__y, __x); }


  template<typename _Tp, typename _Up>
    
# 176 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath"
   __inline__
    
# 177 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 3
   typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    atan2(_Tp __y, _Up __x)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return atan2(__type(__y), __type(__x));
    }

  using ::ceil;


  
# 187 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath"
 __inline__ 
# 187 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 3
                           float
  ceil(float __x)
  { return __builtin_ceilf(__x); }

  
# 191 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath"
 __inline__ 
# 191 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 3
                           long double
  ceil(long double __x)
  { return __builtin_ceill(__x); }


  template<typename _Tp>
    
# 197 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath"
   __inline__
    
# 198 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 3
   typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    ceil(_Tp __x)
    { return __builtin_ceil(__x); }

  using ::cos;


  
# 206 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath"
 __inline__ 
# 206 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 3
                           float
  cos(float __x)
  { return __builtin_cosf(__x); }

  
# 210 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath"
 __inline__ 
# 210 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 3
                           long double
  cos(long double __x)
  { return __builtin_cosl(__x); }


  template<typename _Tp>
    
# 216 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath"
   __inline__
    
# 217 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 3
   typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    cos(_Tp __x)
    { return __builtin_cos(__x); }

  using ::cosh;


  
# 225 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath"
 __inline__ 
# 225 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 3
                           float
  cosh(float __x)
  { return __builtin_coshf(__x); }

  
# 229 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath"
 __inline__ 
# 229 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 3
                           long double
  cosh(long double __x)
  { return __builtin_coshl(__x); }


  template<typename _Tp>
    
# 235 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath"
   __inline__
    
# 236 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 3
   typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    cosh(_Tp __x)
    { return __builtin_cosh(__x); }

  using ::exp;


  
# 244 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath"
 __inline__ 
# 244 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 3
                           float
  exp(float __x)
  { return __builtin_expf(__x); }

  
# 248 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath"
 __inline__ 
# 248 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 3
                           long double
  exp(long double __x)
  { return __builtin_expl(__x); }


  template<typename _Tp>
    
# 254 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath"
   __inline__
    
# 255 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 3
   typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    exp(_Tp __x)
    { return __builtin_exp(__x); }

  using ::fabs;


  
# 263 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath"
 __inline__ 
# 263 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 3
                           float
  fabs(float __x)
  { return __builtin_fabsf(__x); }

  
# 267 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath"
 __inline__ 
# 267 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 3
                           long double
  fabs(long double __x)
  { return __builtin_fabsl(__x); }


  template<typename _Tp>
    
# 273 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath"
   __inline__
    
# 274 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 3
   typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    fabs(_Tp __x)
    { return __builtin_fabs(__x); }

  using ::floor;


  
# 282 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath"
 __inline__ 
# 282 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 3
                           float
  floor(float __x)
  { return __builtin_floorf(__x); }

  
# 286 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath"
 __inline__ 
# 286 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 3
                           long double
  floor(long double __x)
  { return __builtin_floorl(__x); }


  template<typename _Tp>
    
# 292 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath"
   __inline__
    
# 293 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 3
   typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    floor(_Tp __x)
    { return __builtin_floor(__x); }

  using ::fmod;


  
# 301 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath"
 __inline__ 
# 301 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 3
                           float
  fmod(float __x, float __y)
  { return __builtin_fmodf(__x, __y); }

  
# 305 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath"
 __inline__ 
# 305 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 3
                           long double
  fmod(long double __x, long double __y)
  { return __builtin_fmodl(__x, __y); }


  template<typename _Tp, typename _Up>
    
# 311 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath"
   __inline__
    
# 312 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 3
   typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmod(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmod(__type(__x), __type(__y));
    }

  using ::frexp;


  
# 322 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath"
 __inline__ 
# 322 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 3
        float
  frexp(float __x, int* __exp)
  { return __builtin_frexpf(__x, __exp); }

  
# 326 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath"
 __inline__ 
# 326 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 3
        long double
  frexp(long double __x, int* __exp)
  { return __builtin_frexpl(__x, __exp); }


  template<typename _Tp>
    
# 332 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath"
   __inline__
    
# 333 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 3
   typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    frexp(_Tp __x, int* __exp)
    { return __builtin_frexp(__x, __exp); }

  using ::ldexp;


  
# 341 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath"
 __inline__ 
# 341 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 3
                           float
  ldexp(float __x, int __exp)
  { return __builtin_ldexpf(__x, __exp); }

  
# 345 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath"
 __inline__ 
# 345 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 3
                           long double
  ldexp(long double __x, int __exp)
  { return __builtin_ldexpl(__x, __exp); }


  template<typename _Tp>
    
# 351 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath"
   __inline__
    
# 352 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 3
   typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    ldexp(_Tp __x, int __exp)
    { return __builtin_ldexp(__x, __exp); }

  using ::log;


  
# 360 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath"
 __inline__ 
# 360 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 3
                           float
  log(float __x)
  { return __builtin_logf(__x); }

  
# 364 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath"
 __inline__ 
# 364 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 3
                           long double
  log(long double __x)
  { return __builtin_logl(__x); }


  template<typename _Tp>
    
# 370 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath"
   __inline__
    
# 371 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 3
   typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    log(_Tp __x)
    { return __builtin_log(__x); }

  using ::log10;


  
# 379 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath"
 __inline__ 
# 379 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 3
                           float
  log10(float __x)
  { return __builtin_log10f(__x); }

  
# 383 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath"
 __inline__ 
# 383 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 3
                           long double
  log10(long double __x)
  { return __builtin_log10l(__x); }


  template<typename _Tp>
    
# 389 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath"
   __inline__
    
# 390 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 3
   typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    log10(_Tp __x)
    { return __builtin_log10(__x); }

  using ::modf;


  
# 398 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath"
 __inline__ 
# 398 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 3
        float
  modf(float __x, float* __iptr)
  { return __builtin_modff(__x, __iptr); }

  
# 402 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath"
 __inline__ 
# 402 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 3
        long double
  modf(long double __x, long double* __iptr)
  { return __builtin_modfl(__x, __iptr); }


  using ::pow;


  
# 410 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath"
 __inline__ 
# 410 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 3
                           float
  pow(float __x, float __y)
  { return __builtin_powf(__x, __y); }

  
# 414 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath"
 __inline__ 
# 414 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 3
                           long double
  pow(long double __x, long double __y)
  { return __builtin_powl(__x, __y); }




  
# 421 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath"
 __inline__ 
# 421 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 3
        double
  pow(double __x, int __i)
  { return __builtin_powi(__x, __i); }

  
# 425 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath"
 __inline__ 
# 425 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 3
        float
  pow(float __x, int __n)
  { return __builtin_powif(__x, __n); }

  
# 429 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath"
 __inline__ 
# 429 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 3
        long double
  pow(long double __x, int __n)
  { return __builtin_powil(__x, __n); }



  template<typename _Tp, typename _Up>
    
# 436 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath"
   __inline__
    
# 437 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 3
   typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
    }

  using ::sin;


  
# 447 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath"
 __inline__ 
# 447 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 3
                           float
  sin(float __x)
  { return __builtin_sinf(__x); }

  
# 451 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath"
 __inline__ 
# 451 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 3
                           long double
  sin(long double __x)
  { return __builtin_sinl(__x); }


  template<typename _Tp>
    
# 457 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath"
   __inline__
    
# 458 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 3
   typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    sin(_Tp __x)
    { return __builtin_sin(__x); }

  using ::sinh;


  
# 466 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath"
 __inline__ 
# 466 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 3
                           float
  sinh(float __x)
  { return __builtin_sinhf(__x); }

  
# 470 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath"
 __inline__ 
# 470 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 3
                           long double
  sinh(long double __x)
  { return __builtin_sinhl(__x); }


  template<typename _Tp>
    
# 476 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath"
   __inline__
    
# 477 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 3
   typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    sinh(_Tp __x)
    { return __builtin_sinh(__x); }

  using ::sqrt;


  
# 485 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath"
 __inline__ 
# 485 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 3
                           float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }

  
# 489 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath"
 __inline__ 
# 489 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 3
                           long double
  sqrt(long double __x)
  { return __builtin_sqrtl(__x); }


  template<typename _Tp>
    
# 495 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath"
   __inline__
    
# 496 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 3
   typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    sqrt(_Tp __x)
    { return __builtin_sqrt(__x); }

  using ::tan;


  
# 504 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath"
 __inline__ 
# 504 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 3
                           float
  tan(float __x)
  { return __builtin_tanf(__x); }

  
# 508 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath"
 __inline__ 
# 508 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 3
                           long double
  tan(long double __x)
  { return __builtin_tanl(__x); }


  template<typename _Tp>
    
# 514 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath"
   __inline__
    
# 515 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 3
   typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    tan(_Tp __x)
    { return __builtin_tan(__x); }

  using ::tanh;


  
# 523 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath"
 __inline__ 
# 523 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 3
                           float
  tanh(float __x)
  { return __builtin_tanhf(__x); }

  
# 527 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath"
 __inline__ 
# 527 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 3
                           long double
  tanh(long double __x)
  { return __builtin_tanhl(__x); }


  template<typename _Tp>
    
# 533 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath"
   __inline__
    
# 534 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 3
   typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    tanh(_Tp __x)
    { return __builtin_tanh(__x); }


}





#undef fpclassify
#undef isfinite
#undef isinf
#undef isnan
#undef isnormal
#undef signbit
#undef isgreater
#undef isgreaterequal
#undef isless
#undef islessequal
#undef islessgreater
#undef isunordered

namespace std __attribute__ ((__visibility__ ("default")))
{

# 845 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 3
  template<typename _Tp>
    
# 846 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath"
   __inline__ 
# 846 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 3
          typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    fpclassify(_Tp __f)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_fpclassify(_FP_NAN, _FP_INFINITE, _FP_NORMAL,
      _FP_SUBNORMAL, _FP_ZERO, __type(__f));
    }

  template<typename _Tp>
    
# 856 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath"
   __inline__ 
# 856 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 3
          typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isfinite(_Tp __f)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isfinite(__type(__f));
    }

  template<typename _Tp>
    
# 865 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath"
   __inline__ 
# 865 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 3
          typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isinf(_Tp __f)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isinf(__type(__f));
    }

  template<typename _Tp>
    
# 874 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath"
   __inline__ 
# 874 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 3
          typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isnan(_Tp __f)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isnan(__type(__f));
    }

  template<typename _Tp>
    
# 883 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath"
   __inline__ 
# 883 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 3
          typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isnormal(_Tp __f)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isnormal(__type(__f));
    }

  template<typename _Tp>
    
# 892 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath"
   __inline__ 
# 892 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 3
          typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    signbit(_Tp __f)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_signbit(__type(__f));
    }

  template<typename _Tp>
    
# 901 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath"
   __inline__ 
# 901 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 3
          typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isgreater(_Tp __f1, _Tp __f2)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isgreater(__type(__f1), __type(__f2));
    }

  template<typename _Tp>
    
# 910 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath"
   __inline__ 
# 910 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 3
          typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isgreaterequal(_Tp __f1, _Tp __f2)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isgreaterequal(__type(__f1), __type(__f2));
    }

  template<typename _Tp>
    
# 919 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath"
   __inline__ 
# 919 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 3
          typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isless(_Tp __f1, _Tp __f2)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isless(__type(__f1), __type(__f2));
    }

  template<typename _Tp>
    
# 928 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath"
   __inline__ 
# 928 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 3
          typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    islessequal(_Tp __f1, _Tp __f2)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_islessequal(__type(__f1), __type(__f2));
    }

  template<typename _Tp>
    
# 937 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath"
   __inline__ 
# 937 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 3
          typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    islessgreater(_Tp __f1, _Tp __f2)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_islessgreater(__type(__f1), __type(__f2));
    }

  template<typename _Tp>
    
# 946 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath"
   __inline__ 
# 946 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 3
          typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isunordered(_Tp __f1, _Tp __f2)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isunordered(__type(__f1), __type(__f2));
    }




}
# 1797 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/cmath" 3
}
# 37 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/math.h" 2 3

using std::abs;
using std::acos;
using std::asin;
using std::atan;
using std::atan2;
using std::cos;
using std::sin;
using std::tan;
using std::cosh;
using std::sinh;
using std::tanh;
using std::exp;
using std::frexp;
using std::ldexp;
using std::log;
using std::log10;
using std::modf;
using std::pow;
using std::sqrt;
using std::ceil;
using std::fabs;
using std::floor;
using std::fmod;


using std::fpclassify;
using std::isfinite;
using std::isinf;
using std::isnan;
using std::isnormal;
using std::signbit;
using std::isgreater;
using std::isgreaterequal;
using std::isless;
using std::islessequal;
using std::islessgreater;
using std::isunordered;
# 20 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CoreFoundation.h" 2 3
# 1 "/usr/include/setjmp.h" 1 3 4
# 24 "/usr/include/setjmp.h" 3 4
#define _BSD_SETJMP_H 

# 1 "/usr/include/machine/setjmp.h" 1 3 4
# 32 "/usr/include/machine/setjmp.h" 3 4
#define _MACHINE_SETJMP_H_ 




# 1 "/usr/include/i386/setjmp.h" 1 3 4
# 35 "/usr/include/i386/setjmp.h" 3 4
#define _BSD_I386_SETJMP_H 
# 59 "/usr/include/i386/setjmp.h" 3 4
#define _JBLEN (18)
typedef int jmp_buf[(18)];
typedef int sigjmp_buf[(18) + 1];



extern "C" {
int setjmp(jmp_buf);
void longjmp(jmp_buf, int);


int _setjmp(jmp_buf);
void _longjmp(jmp_buf, int);
int sigsetjmp(sigjmp_buf, int);
void siglongjmp(sigjmp_buf, int);



void longjmperror(void);

}
# 38 "/usr/include/machine/setjmp.h" 2 3 4
# 27 "/usr/include/setjmp.h" 2 3 4
# 21 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CoreFoundation.h" 2 3

# 1 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/stddef.h" 1 3 4
# 23 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CoreFoundation.h" 2 3

# 1 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/stdlib.h" 1 3
# 25 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CoreFoundation.h" 2 3

# 1 "/usr/include/time.h" 1 3 4
# 64 "/usr/include/time.h" 3 4
#define _TIME_H_ 



#define __need_struct_timespec 
# 1 "/usr/include/_structs.h" 1 3 4
# 24 "/usr/include/_structs.h" 3 4
# 1 "/usr/include/sys/_structs.h" 1 3 4
# 85 "/usr/include/sys/_structs.h" 3 4
#undef __need_struct_timespec
# 25 "/usr/include/_structs.h" 2 3 4
# 70 "/usr/include/time.h" 2 3 4
# 90 "/usr/include/time.h" 3 4
struct tm {
 int tm_sec;
 int tm_min;
 int tm_hour;
 int tm_mday;
 int tm_mon;
 int tm_year;
 int tm_wday;
 int tm_yday;
 int tm_isdst;
 long tm_gmtoff;
 char *tm_zone;
};


#define CLOCKS_PER_SEC 1000000







extern char *tzname[];


extern int getdate_err;

extern long timezone __asm("_" "timezone" "$UNIX2003");

extern int daylight;

extern "C" {
char *asctime(const struct tm *);
clock_t clock(void) __asm("_" "clock" "$UNIX2003");
char *ctime(const time_t *);
double difftime(time_t, time_t);
struct tm *getdate(const char *);
struct tm *gmtime(const time_t *);
struct tm *localtime(const time_t *);
time_t mktime(struct tm *) __asm("_" "mktime" "$UNIX2003");
size_t strftime(char * , size_t, const char * , const struct tm * ) __asm("_" "strftime" "$UNIX2003");
char *strptime(const char * , const char * , struct tm * ) __asm("_" "strptime" "$UNIX2003");
time_t time(time_t *);


void tzset(void);



char *asctime_r(const struct tm * , char * );
char *ctime_r(const time_t *, char *);
struct tm *gmtime_r(const time_t * , struct tm * );
struct tm *localtime_r(const time_t * , struct tm * );


time_t posix2time(time_t);



void tzsetwall(void);
time_t time2posix(time_t);
time_t timelocal(struct tm * const);
time_t timegm(struct tm * const);



int nanosleep(const struct timespec *, struct timespec *) __asm("_" "nanosleep" "$UNIX2003");

}
# 27 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CoreFoundation.h" 2 3
# 38 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CoreFoundation.h" 3
# 1 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBase.h" 1 3





#define __COREFOUNDATION_CFBASE__ 1
# 39 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBase.h" 3
# 1 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/stdbool.h" 1 3 4
# 29 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/stdbool.h" 3 4
#define _STDBOOL_H 
# 40 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/stdbool.h" 3 4
#define _Bool bool



#define bool bool
#define false false
#define true true





#define __bool_true_false_are_defined 1
# 40 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBase.h" 2 3

# 1 "/usr/include/AvailabilityMacros.h" 1 3 4
# 65 "/usr/include/AvailabilityMacros.h" 3 4
#define __AVAILABILITYMACROS__ 





#define MAC_OS_X_VERSION_10_0 1000
#define MAC_OS_X_VERSION_10_1 1010
#define MAC_OS_X_VERSION_10_2 1020
#define MAC_OS_X_VERSION_10_3 1030
#define MAC_OS_X_VERSION_10_4 1040
#define MAC_OS_X_VERSION_10_5 1050
# 85 "/usr/include/AvailabilityMacros.h" 3 4
#define MAC_OS_X_VERSION_MIN_REQUIRED __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__
# 102 "/usr/include/AvailabilityMacros.h" 3 4
#define MAC_OS_X_VERSION_MAX_ALLOWED MAC_OS_X_VERSION_10_5
# 120 "/usr/include/AvailabilityMacros.h" 3 4
#define WEAK_IMPORT_ATTRIBUTE __attribute__((weak_import))
# 131 "/usr/include/AvailabilityMacros.h" 3 4
#define DEPRECATED_ATTRIBUTE __attribute__((deprecated))
# 140 "/usr/include/AvailabilityMacros.h" 3 4
#define UNAVAILABLE_ATTRIBUTE __attribute__((unavailable))
# 152 "/usr/include/AvailabilityMacros.h" 3 4
#define AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER 







#define AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED DEPRECATED_ATTRIBUTE






#define DEPRECATED_IN_MAC_OS_X_VERSION_10_0_AND_LATER DEPRECATED_ATTRIBUTE
# 184 "/usr/include/AvailabilityMacros.h" 3 4
#define AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER 
# 194 "/usr/include/AvailabilityMacros.h" 3 4
#define AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED DEPRECATED_ATTRIBUTE
# 206 "/usr/include/AvailabilityMacros.h" 3 4
#define AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_1 DEPRECATED_ATTRIBUTE
# 217 "/usr/include/AvailabilityMacros.h" 3 4
#define DEPRECATED_IN_MAC_OS_X_VERSION_10_1_AND_LATER DEPRECATED_ATTRIBUTE
# 238 "/usr/include/AvailabilityMacros.h" 3 4
#define AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER 
# 248 "/usr/include/AvailabilityMacros.h" 3 4
#define AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED DEPRECATED_ATTRIBUTE
# 260 "/usr/include/AvailabilityMacros.h" 3 4
#define AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_2 DEPRECATED_ATTRIBUTE
# 272 "/usr/include/AvailabilityMacros.h" 3 4
#define AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_2 DEPRECATED_ATTRIBUTE
# 283 "/usr/include/AvailabilityMacros.h" 3 4
#define DEPRECATED_IN_MAC_OS_X_VERSION_10_2_AND_LATER DEPRECATED_ATTRIBUTE
# 302 "/usr/include/AvailabilityMacros.h" 3 4
#define AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER 
# 312 "/usr/include/AvailabilityMacros.h" 3 4
#define AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER_BUT_DEPRECATED DEPRECATED_ATTRIBUTE
# 324 "/usr/include/AvailabilityMacros.h" 3 4
#define AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_3 DEPRECATED_ATTRIBUTE
# 336 "/usr/include/AvailabilityMacros.h" 3 4
#define AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_3 DEPRECATED_ATTRIBUTE
# 348 "/usr/include/AvailabilityMacros.h" 3 4
#define AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_3 DEPRECATED_ATTRIBUTE
# 359 "/usr/include/AvailabilityMacros.h" 3 4
#define DEPRECATED_IN_MAC_OS_X_VERSION_10_3_AND_LATER DEPRECATED_ATTRIBUTE
# 379 "/usr/include/AvailabilityMacros.h" 3 4
#define AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER 
# 389 "/usr/include/AvailabilityMacros.h" 3 4
#define AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER_BUT_DEPRECATED DEPRECATED_ATTRIBUTE
# 401 "/usr/include/AvailabilityMacros.h" 3 4
#define AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_4 DEPRECATED_ATTRIBUTE
# 413 "/usr/include/AvailabilityMacros.h" 3 4
#define AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_4 DEPRECATED_ATTRIBUTE
# 425 "/usr/include/AvailabilityMacros.h" 3 4
#define AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_4 DEPRECATED_ATTRIBUTE
# 437 "/usr/include/AvailabilityMacros.h" 3 4
#define AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_4 DEPRECATED_ATTRIBUTE
# 448 "/usr/include/AvailabilityMacros.h" 3 4
#define DEPRECATED_IN_MAC_OS_X_VERSION_10_4_AND_LATER DEPRECATED_ATTRIBUTE
# 467 "/usr/include/AvailabilityMacros.h" 3 4
#define AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER 
# 477 "/usr/include/AvailabilityMacros.h" 3 4
#define AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER_BUT_DEPRECATED DEPRECATED_ATTRIBUTE
# 489 "/usr/include/AvailabilityMacros.h" 3 4
#define AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_5 DEPRECATED_ATTRIBUTE
# 501 "/usr/include/AvailabilityMacros.h" 3 4
#define AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_5 DEPRECATED_ATTRIBUTE
# 513 "/usr/include/AvailabilityMacros.h" 3 4
#define AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_5 DEPRECATED_ATTRIBUTE
# 525 "/usr/include/AvailabilityMacros.h" 3 4
#define AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_5 DEPRECATED_ATTRIBUTE
# 537 "/usr/include/AvailabilityMacros.h" 3 4
#define AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_5 DEPRECATED_ATTRIBUTE
# 548 "/usr/include/AvailabilityMacros.h" 3 4
#define DEPRECATED_IN_MAC_OS_X_VERSION_10_5_AND_LATER DEPRECATED_ATTRIBUTE
# 42 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBase.h" 2 3



# 1 "/System/Library/Frameworks/CoreServices.framework/Headers/../Frameworks/CarbonCore.framework/Headers/MacTypes.h" 1 3
# 17 "/System/Library/Frameworks/CoreServices.framework/Headers/../Frameworks/CarbonCore.framework/Headers/MacTypes.h" 3
#define __MACTYPES__ 


# 1 "/System/Library/Frameworks/CoreServices.framework/Frameworks/CarbonCore.framework/Headers/ConditionalMacros.h" 1 3
# 17 "/System/Library/Frameworks/CoreServices.framework/Frameworks/CarbonCore.framework/Headers/ConditionalMacros.h" 3
#define __CONDITIONALMACROS__ 
# 36 "/System/Library/Frameworks/CoreServices.framework/Frameworks/CarbonCore.framework/Headers/ConditionalMacros.h" 3
#define UNIVERSAL_INTERFACES_VERSION 0x0400





# 1 "/usr/include/TargetConditionals.h" 1 3 4
# 15 "/usr/include/TargetConditionals.h" 3 4
#define __TARGETCONDITIONALS__ 
# 61 "/usr/include/TargetConditionals.h" 3 4
#define TARGET_OS_MAC 1
#define TARGET_OS_WIN32 0
#define TARGET_OS_UNIX 0
#define TARGET_OS_EMBEDDED 0
# 99 "/usr/include/TargetConditionals.h" 3 4
#define TARGET_CPU_PPC 0
#define TARGET_CPU_PPC64 0
#define TARGET_CPU_68K 0
#define TARGET_CPU_X86 1
#define TARGET_CPU_X86_64 0
#define TARGET_CPU_MIPS 0
#define TARGET_CPU_SPARC 0
#define TARGET_CPU_ALPHA 0
#define TARGET_RT_MAC_CFM 0
#define TARGET_RT_MAC_MACHO 1
#define TARGET_RT_LITTLE_ENDIAN 1
#define TARGET_RT_BIG_ENDIAN 0
#define TARGET_RT_64_BIT 0
# 43 "/System/Library/Frameworks/CoreServices.framework/Frameworks/CarbonCore.framework/Headers/ConditionalMacros.h" 2 3
# 92 "/System/Library/Frameworks/CoreServices.framework/Frameworks/CarbonCore.framework/Headers/ConditionalMacros.h" 3
#define PRAGMA_IMPORT 0
#define PRAGMA_ONCE 0


#define PRAGMA_STRUCT_PACK 1
#define PRAGMA_STRUCT_PACKPUSH 1
# 106 "/System/Library/Frameworks/CoreServices.framework/Frameworks/CarbonCore.framework/Headers/ConditionalMacros.h" 3
#define PRAGMA_STRUCT_ALIGN 1


#define PRAGMA_ENUM_PACK 0
#define PRAGMA_ENUM_ALWAYSINT 0
#define PRAGMA_ENUM_OPTIONS 0
#define FOUR_CHAR_CODE(x) (x)

#define TYPE_EXTENDED 0




#define TYPE_LONGDOUBLE_IS_DOUBLE 0


#define TYPE_LONGLONG 1

#define TYPE_BOOL 1




#define FUNCTION_PASCAL 0
#define FUNCTION_DECLSPEC 0
#define FUNCTION_WIN32CC 0
# 358 "/System/Library/Frameworks/CoreServices.framework/Frameworks/CarbonCore.framework/Headers/ConditionalMacros.h" 3
#define EXTERN_API(_type) extern _type
#define EXTERN_API_C(_type) extern _type
#define EXTERN_API_STDCALL(_type) extern _type
#define EXTERN_API_C_STDCALL(_type) extern _type

#define DEFINE_API(_type) _type
#define DEFINE_API_C(_type) _type
#define DEFINE_API_STDCALL(_type) _type
#define DEFINE_API_C_STDCALL(_type) _type

#define CALLBACK_API(_type,_name) _type ( * _name)
#define CALLBACK_API_C(_type,_name) _type ( * _name)
#define CALLBACK_API_STDCALL(_type,_name) _type ( * _name)
#define CALLBACK_API_C_STDCALL(_type,_name) _type ( * _name)
#undef pascal
#define pascal 
# 385 "/System/Library/Frameworks/CoreServices.framework/Frameworks/CarbonCore.framework/Headers/ConditionalMacros.h" 3
#define TARGET_API_MAC_OS8 0
#define TARGET_API_MAC_CARBON 1
#define TARGET_API_MAC_OSX 1
# 431 "/System/Library/Frameworks/CoreServices.framework/Frameworks/CarbonCore.framework/Headers/ConditionalMacros.h" 3
#define TARGET_CARBON 1
# 469 "/System/Library/Frameworks/CoreServices.framework/Frameworks/CarbonCore.framework/Headers/ConditionalMacros.h" 3
#define PRAGMA_ALIGN_SUPPORTED ..PRAGMA_ALIGN_SUPPORTED_is_obsolete..
#define GENERATINGPOWERPC ..GENERATINGPOWERPC_is_obsolete..
#define GENERATING68K ..GENERATING68K_is_obsolete..
#define GENERATING68881 ..GENERATING68881_is_obsolete..
#define GENERATINGCFM ..GENERATINGCFM_is_obsolete..
#define CFMSYSTEMCALLS ..CFMSYSTEMCALLS_is_obsolete..
# 494 "/System/Library/Frameworks/CoreServices.framework/Frameworks/CarbonCore.framework/Headers/ConditionalMacros.h" 3
#define OLDROUTINENAMES 0
# 526 "/System/Library/Frameworks/CoreServices.framework/Frameworks/CarbonCore.framework/Headers/ConditionalMacros.h" 3
#define ONEWORDINLINE(w1) 
#define TWOWORDINLINE(w1,w2) 
#define THREEWORDINLINE(w1,w2,w3) 
#define FOURWORDINLINE(w1,w2,w3,w4) 
#define FIVEWORDINLINE(w1,w2,w3,w4,w5) 
#define SIXWORDINLINE(w1,w2,w3,w4,w5,w6) 
#define SEVENWORDINLINE(w1,w2,w3,w4,w5,w6,w7) 
#define EIGHTWORDINLINE(w1,w2,w3,w4,w5,w6,w7,w8) 
#define NINEWORDINLINE(w1,w2,w3,w4,w5,w6,w7,w8,w9) 
#define TENWORDINLINE(w1,w2,w3,w4,w5,w6,w7,w8,w9,w10) 
#define ELEVENWORDINLINE(w1,w2,w3,w4,w5,w6,w7,w8,w9,w10,w11) 
#define TWELVEWORDINLINE(w1,w2,w3,w4,w5,w6,w7,w8,w9,w10,w11,w12) 
# 564 "/System/Library/Frameworks/CoreServices.framework/Frameworks/CarbonCore.framework/Headers/ConditionalMacros.h" 3
#define OPAQUE_TOOLBOX_STRUCTS 1



#define OPAQUE_UPP_TYPES 1



#define ACCESSOR_CALLS_ARE_FUNCTIONS 1



#define CALL_NOT_IN_CARBON 0



#define MIXEDMODE_CALLS_ARE_FUNCTIONS 1
# 21 "/System/Library/Frameworks/CoreServices.framework/Headers/../Frameworks/CarbonCore.framework/Headers/MacTypes.h" 2 3
# 34 "/System/Library/Frameworks/CoreServices.framework/Headers/../Frameworks/CarbonCore.framework/Headers/MacTypes.h" 3
extern "C" {


#pragma pack(push, 2)
# 55 "/System/Library/Frameworks/CoreServices.framework/Headers/../Frameworks/CarbonCore.framework/Headers/MacTypes.h" 3
#define ALLOW_OBSOLETE_CARBON_MACMEMORY 0
#define ALLOW_OBSOLETE_CARBON_OSUTILS 0
# 69 "/System/Library/Frameworks/CoreServices.framework/Headers/../Frameworks/CarbonCore.framework/Headers/MacTypes.h" 3
#define nil NULL
# 85 "/System/Library/Frameworks/CoreServices.framework/Headers/../Frameworks/CarbonCore.framework/Headers/MacTypes.h" 3
typedef unsigned char UInt8;
typedef signed char SInt8;
typedef unsigned short UInt16;
typedef signed short SInt16;





typedef unsigned long UInt32;
typedef signed long SInt32;
# 112 "/System/Library/Frameworks/CoreServices.framework/Headers/../Frameworks/CarbonCore.framework/Headers/MacTypes.h" 3
struct wide {
  UInt32 lo;
  SInt32 hi;
};
typedef struct wide wide;
struct UnsignedWide {
  UInt32 lo;
  UInt32 hi;
};
typedef struct UnsignedWide UnsignedWide;
# 143 "/System/Library/Frameworks/CoreServices.framework/Headers/../Frameworks/CarbonCore.framework/Headers/MacTypes.h" 3
      typedef signed long long SInt64;
        typedef unsigned long long UInt64;
# 163 "/System/Library/Frameworks/CoreServices.framework/Headers/../Frameworks/CarbonCore.framework/Headers/MacTypes.h" 3
typedef SInt32 Fixed;
typedef Fixed * FixedPtr;
typedef SInt32 Fract;
typedef Fract * FractPtr;
typedef UInt32 UnsignedFixed;
typedef UnsignedFixed * UnsignedFixedPtr;
typedef short ShortFixed;
typedef ShortFixed * ShortFixedPtr;
# 190 "/System/Library/Frameworks/CoreServices.framework/Headers/../Frameworks/CarbonCore.framework/Headers/MacTypes.h" 3
typedef float Float32;
typedef double Float64;
struct Float80 {
    SInt16 exp;
    UInt16 man[4];
};
typedef struct Float80 Float80;

struct Float96 {
    SInt16 exp[2];
    UInt16 man[4];
};
typedef struct Float96 Float96;
struct Float32Point {
    Float32 x;
    Float32 y;
};
typedef struct Float32Point Float32Point;
# 218 "/System/Library/Frameworks/CoreServices.framework/Headers/../Frameworks/CarbonCore.framework/Headers/MacTypes.h" 3
typedef char * Ptr;
typedef Ptr * Handle;
typedef long Size;
# 248 "/System/Library/Frameworks/CoreServices.framework/Headers/../Frameworks/CarbonCore.framework/Headers/MacTypes.h" 3
typedef SInt16 OSErr;
typedef SInt32 OSStatus;
typedef void * LogicalAddress;
typedef const void * ConstLogicalAddress;
typedef void * PhysicalAddress;
typedef UInt8 * BytePtr;
typedef unsigned long ByteCount;
typedef unsigned long ByteOffset;
typedef SInt32 Duration;
typedef UnsignedWide AbsoluteTime;
typedef UInt32 OptionBits;
typedef unsigned long ItemCount;
typedef UInt32 PBVersion;
typedef SInt16 ScriptCode;
typedef SInt16 LangCode;
typedef SInt16 RegionCode;
typedef UInt32 FourCharCode;
typedef FourCharCode OSType;
typedef FourCharCode ResType;
typedef OSType * OSTypePtr;
typedef ResType * ResTypePtr;
# 279 "/System/Library/Frameworks/CoreServices.framework/Headers/../Frameworks/CarbonCore.framework/Headers/MacTypes.h" 3
typedef unsigned char Boolean;
# 292 "/System/Library/Frameworks/CoreServices.framework/Headers/../Frameworks/CarbonCore.framework/Headers/MacTypes.h" 3
typedef long ( * ProcPtr)();
typedef void ( * Register68kProcPtr)();




typedef ProcPtr UniversalProcPtr;


typedef ProcPtr * ProcHandle;
typedef UniversalProcPtr * UniversalProcHandle;
# 317 "/System/Library/Frameworks/CoreServices.framework/Headers/../Frameworks/CarbonCore.framework/Headers/MacTypes.h" 3
typedef void * PRefCon;




typedef UInt32 URefCon;
typedef SInt32 SRefCon;
# 347 "/System/Library/Frameworks/CoreServices.framework/Headers/../Frameworks/CarbonCore.framework/Headers/MacTypes.h" 3
enum {
  noErr = 0
};

enum {
  kNilOptions = 0
};

#define kInvalidID 0
enum {
  kVariableLengthArray = 1
};

enum {
  kUnknownType = 0x3F3F3F3F
};
# 416 "/System/Library/Frameworks/CoreServices.framework/Headers/../Frameworks/CarbonCore.framework/Headers/MacTypes.h" 3
typedef UInt32 UnicodeScalarValue;
typedef UInt32 UTF32Char;
typedef UInt16 UniChar;
typedef UInt16 UTF16Char;
typedef UInt8 UTF8Char;
typedef UniChar * UniCharPtr;
typedef unsigned long UniCharCount;
typedef UniCharCount * UniCharCountPtr;
typedef unsigned char Str255[256];
typedef unsigned char Str63[64];
typedef unsigned char Str32[33];
typedef unsigned char Str31[32];
typedef unsigned char Str27[28];
typedef unsigned char Str15[16];
# 438 "/System/Library/Frameworks/CoreServices.framework/Headers/../Frameworks/CarbonCore.framework/Headers/MacTypes.h" 3
typedef unsigned char Str32Field[34];
# 448 "/System/Library/Frameworks/CoreServices.framework/Headers/../Frameworks/CarbonCore.framework/Headers/MacTypes.h" 3
typedef Str63 StrFileName;
typedef unsigned char * StringPtr;
typedef StringPtr * StringHandle;
typedef const unsigned char * ConstStringPtr;
typedef const unsigned char * ConstStr255Param;
typedef const unsigned char * ConstStr63Param;
typedef const unsigned char * ConstStr32Param;
typedef const unsigned char * ConstStr31Param;
typedef const unsigned char * ConstStr27Param;
typedef const unsigned char * ConstStr15Param;
typedef ConstStr63Param ConstStrFileNameParam;


# 460 "/System/Library/Frameworks/CoreServices.framework/Headers/../Frameworks/CarbonCore.framework/Headers/MacTypes.h"
__inline__ 
# 460 "/System/Library/Frameworks/CoreServices.framework/Headers/../Frameworks/CarbonCore.framework/Headers/MacTypes.h" 3
      unsigned char StrLength(ConstStr255Param string) { return (*string); }
# 475 "/System/Library/Frameworks/CoreServices.framework/Headers/../Frameworks/CarbonCore.framework/Headers/MacTypes.h" 3
struct ProcessSerialNumber {
  UInt32 highLongOfPSN;
  UInt32 lowLongOfPSN;
};
typedef struct ProcessSerialNumber ProcessSerialNumber;
typedef ProcessSerialNumber * ProcessSerialNumberPtr;
# 497 "/System/Library/Frameworks/CoreServices.framework/Headers/../Frameworks/CarbonCore.framework/Headers/MacTypes.h" 3
struct Point {
  short v;
  short h;
};
typedef struct Point Point;
typedef Point * PointPtr;
struct Rect {
  short top;
  short left;
  short bottom;
  short right;
};
typedef struct Rect Rect;
typedef Rect * RectPtr;
struct FixedPoint {
  Fixed x;
  Fixed y;
};
typedef struct FixedPoint FixedPoint;
struct FixedRect {
  Fixed left;
  Fixed top;
  Fixed right;
  Fixed bottom;
};
typedef struct FixedRect FixedRect;

typedef short CharParameter;
enum {
  normal = 0,
  bold = 1,
  italic = 2,
  underline = 4,
  outline = 8,
  shadow = 0x10,
  condense = 0x20,
  extend = 0x40
};

typedef unsigned char Style;
typedef short StyleParameter;
typedef Style StyleField;
# 553 "/System/Library/Frameworks/CoreServices.framework/Headers/../Frameworks/CarbonCore.framework/Headers/MacTypes.h" 3
typedef SInt32 TimeValue;
typedef SInt32 TimeScale;
typedef wide CompTimeValue;
typedef SInt64 TimeValue64;
typedef struct TimeBaseRecord* TimeBase;
struct TimeRecord {
  CompTimeValue value;
  TimeScale scale;
  TimeBase base;
};
typedef struct TimeRecord TimeRecord;
# 605 "/System/Library/Frameworks/CoreServices.framework/Headers/../Frameworks/CarbonCore.framework/Headers/MacTypes.h" 3
struct NumVersion {

  UInt8 nonRelRev;
  UInt8 stage;
  UInt8 minorAndBugRev;
  UInt8 majorRev;
};
typedef struct NumVersion NumVersion;


enum {

  developStage = 0x20,
  alphaStage = 0x40,
  betaStage = 0x60,
  finalStage = 0x80
};

union NumVersionVariant {

  NumVersion parts;
  UInt32 whole;
};
typedef union NumVersionVariant NumVersionVariant;
typedef NumVersionVariant * NumVersionVariantPtr;
typedef NumVersionVariantPtr * NumVersionVariantHandle;
struct VersRec {

  NumVersion numericVersion;
  short countryCode;
  Str255 shortVersion;
  Str255 reserved;
};
typedef struct VersRec VersRec;
typedef VersRec * VersRecPtr;
typedef VersRecPtr * VersRecHndl;





typedef UInt8 Byte;
typedef SInt8 SignedByte;
typedef wide * WidePtr;
typedef UnsignedWide * UnsignedWidePtr;
typedef Float80 extended80;
typedef Float96 extended96;
typedef SInt8 VHSelect;
# 666 "/System/Library/Frameworks/CoreServices.framework/Headers/../Frameworks/CarbonCore.framework/Headers/MacTypes.h" 3
extern void
Debugger(void) ;
# 678 "/System/Library/Frameworks/CoreServices.framework/Headers/../Frameworks/CarbonCore.framework/Headers/MacTypes.h" 3
extern void
DebugStr(ConstStr255Param debuggerMsg) ;
# 725 "/System/Library/Frameworks/CoreServices.framework/Headers/../Frameworks/CarbonCore.framework/Headers/MacTypes.h" 3
extern void
SysBreak(void) ;
# 737 "/System/Library/Frameworks/CoreServices.framework/Headers/../Frameworks/CarbonCore.framework/Headers/MacTypes.h" 3
extern void
SysBreakStr(ConstStr255Param debuggerMsg) ;
# 749 "/System/Library/Frameworks/CoreServices.framework/Headers/../Frameworks/CarbonCore.framework/Headers/MacTypes.h" 3
extern void
SysBreakFunc(ConstStr255Param debuggerMsg) ;
# 760 "/System/Library/Frameworks/CoreServices.framework/Headers/../Frameworks/CarbonCore.framework/Headers/MacTypes.h" 3
#pragma pack(pop)


}
# 46 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBase.h" 2 3
# 87 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBase.h" 3
#define CF_EXTERN_C_BEGIN extern "C" {
#define CF_EXTERN_C_END }






extern "C" {
# 129 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBase.h" 3
#define CF_EXPORT extern






#define CF_INLINE static __inline__
# 147 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBase.h" 3
extern double kCFCoreFoundationVersionNumber;

#define kCFCoreFoundationVersionNumber10_0 196.40
#define kCFCoreFoundationVersionNumber10_0_3 196.50
#define kCFCoreFoundationVersionNumber10_1 226.00
#define kCFCoreFoundationVersionNumber10_1_1 226.00

#define kCFCoreFoundationVersionNumber10_1_2 227.20
#define kCFCoreFoundationVersionNumber10_1_3 227.20
#define kCFCoreFoundationVersionNumber10_1_4 227.30
#define kCFCoreFoundationVersionNumber10_2 263.00
#define kCFCoreFoundationVersionNumber10_2_1 263.10
#define kCFCoreFoundationVersionNumber10_2_2 263.10
#define kCFCoreFoundationVersionNumber10_2_3 263.30
#define kCFCoreFoundationVersionNumber10_2_4 263.30
#define kCFCoreFoundationVersionNumber10_2_5 263.50
#define kCFCoreFoundationVersionNumber10_2_6 263.50
#define kCFCoreFoundationVersionNumber10_2_7 263.50
#define kCFCoreFoundationVersionNumber10_2_8 263.50
#define kCFCoreFoundationVersionNumber10_3 299.00
#define kCFCoreFoundationVersionNumber10_3_1 299.00
#define kCFCoreFoundationVersionNumber10_3_2 299.00
#define kCFCoreFoundationVersionNumber10_3_3 299.30
#define kCFCoreFoundationVersionNumber10_3_4 299.31
#define kCFCoreFoundationVersionNumber10_3_5 299.31
#define kCFCoreFoundationVersionNumber10_3_6 299.32
#define kCFCoreFoundationVersionNumber10_3_7 299.33
#define kCFCoreFoundationVersionNumber10_3_8 299.33
#define kCFCoreFoundationVersionNumber10_3_9 299.35
#define kCFCoreFoundationVersionNumber10_4 368.00
#define kCFCoreFoundationVersionNumber10_4_1 368.10
#define kCFCoreFoundationVersionNumber10_4_2 368.11
#define kCFCoreFoundationVersionNumber10_4_3 368.18
#define kCFCoreFoundationVersionNumber10_4_4_Intel 368.26
#define kCFCoreFoundationVersionNumber10_4_4_PowerPC 368.25
#define kCFCoreFoundationVersionNumber10_4_5_Intel 368.26
#define kCFCoreFoundationVersionNumber10_4_5_PowerPC 368.25
#define kCFCoreFoundationVersionNumber10_4_6_Intel 368.26
#define kCFCoreFoundationVersionNumber10_4_6_PowerPC 368.25
#define kCFCoreFoundationVersionNumber10_4_7 368.27
#define kCFCoreFoundationVersionNumber10_4_8 368.27
#define kCFCoreFoundationVersionNumber10_4_9 368.28
#define kCFCoreFoundationVersionNumber10_4_10 368.28
#define kCFCoreFoundationVersionNumber10_4_11 368.31

typedef unsigned long CFTypeID;
typedef unsigned long CFOptionFlags;
typedef unsigned long CFHashCode;
typedef signed long CFIndex;


typedef const void * CFTypeRef;

typedef const struct __CFString * CFStringRef;
typedef struct __CFString * CFMutableStringRef;






typedef CFTypeRef CFPropertyListRef;


enum {
    kCFCompareLessThan = -1,
    kCFCompareEqualTo = 0,
    kCFCompareGreaterThan = 1
};
typedef CFIndex CFComparisonResult;


typedef CFComparisonResult (*CFComparatorFunction)(const void *val1, const void *val2, void *context);



enum {
    kCFNotFound = -1
};



typedef struct {
    CFIndex location;
    CFIndex length;
} CFRange;


static __inline__ CFRange CFRangeMake(CFIndex loc, CFIndex len) {
    CFRange range;
    range.location = loc;
    range.length = len;
    return range;
}





extern
CFRange __CFRangeMake(CFIndex loc, CFIndex len);





typedef const struct __CFNull * CFNullRef;

extern
CFTypeID CFNullGetTypeID(void);

extern
const CFNullRef kCFNull;
# 273 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBase.h" 3
typedef const struct __CFAllocator * CFAllocatorRef;


extern
const CFAllocatorRef kCFAllocatorDefault;


extern
const CFAllocatorRef kCFAllocatorSystemDefault;







extern
const CFAllocatorRef kCFAllocatorMalloc;





extern
const CFAllocatorRef kCFAllocatorMallocZone ;





extern
const CFAllocatorRef kCFAllocatorNull;





extern
const CFAllocatorRef kCFAllocatorUseContext;

typedef const void * (*CFAllocatorRetainCallBack)(const void *info);
typedef void (*CFAllocatorReleaseCallBack)(const void *info);
typedef CFStringRef (*CFAllocatorCopyDescriptionCallBack)(const void *info);
typedef void * (*CFAllocatorAllocateCallBack)(CFIndex allocSize, CFOptionFlags hint, void *info);
typedef void * (*CFAllocatorReallocateCallBack)(void *ptr, CFIndex newsize, CFOptionFlags hint, void *info);
typedef void (*CFAllocatorDeallocateCallBack)(void *ptr, void *info);
typedef CFIndex (*CFAllocatorPreferredSizeCallBack)(CFIndex size, CFOptionFlags hint, void *info);
typedef struct {
    CFIndex version;
    void * info;
    CFAllocatorRetainCallBack retain;
    CFAllocatorReleaseCallBack release;
    CFAllocatorCopyDescriptionCallBack copyDescription;
    CFAllocatorAllocateCallBack allocate;
    CFAllocatorReallocateCallBack reallocate;
    CFAllocatorDeallocateCallBack deallocate;
    CFAllocatorPreferredSizeCallBack preferredSize;
} CFAllocatorContext;

extern
CFTypeID CFAllocatorGetTypeID(void);
# 358 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBase.h" 3
extern
void CFAllocatorSetDefault(CFAllocatorRef allocator);

extern
CFAllocatorRef CFAllocatorGetDefault(void);

extern
CFAllocatorRef CFAllocatorCreate(CFAllocatorRef allocator, CFAllocatorContext *context);

extern
void *CFAllocatorAllocate(CFAllocatorRef allocator, CFIndex size, CFOptionFlags hint);

extern
void *CFAllocatorReallocate(CFAllocatorRef allocator, void *ptr, CFIndex newsize, CFOptionFlags hint);

extern
void CFAllocatorDeallocate(CFAllocatorRef allocator, void *ptr);

extern
CFIndex CFAllocatorGetPreferredSizeForSize(CFAllocatorRef allocator, CFIndex size, CFOptionFlags hint);

extern
void CFAllocatorGetContext(CFAllocatorRef allocator, CFAllocatorContext *context);




extern
CFTypeID CFGetTypeID(CFTypeRef cf);

extern
CFStringRef CFCopyTypeIDDescription(CFTypeID type_id);

extern
CFTypeRef CFRetain(CFTypeRef cf);

extern
void CFRelease(CFTypeRef cf);

extern
CFIndex CFGetRetainCount(CFTypeRef cf);

extern
CFTypeRef CFMakeCollectable(CFTypeRef cf) ;

extern
Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2);

extern
CFHashCode CFHash(CFTypeRef cf);

extern
CFStringRef CFCopyDescription(CFTypeRef cf);

extern
CFAllocatorRef CFGetAllocator(CFTypeRef cf);

}
# 39 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CoreFoundation.h" 2 3
# 1 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFArray.h" 1 3
# 45 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFArray.h" 3
#define __COREFOUNDATION_CFARRAY__ 1



extern "C" {
# 73 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFArray.h" 3
typedef const void * (*CFArrayRetainCallBack)(CFAllocatorRef allocator, const void *value);
typedef void (*CFArrayReleaseCallBack)(CFAllocatorRef allocator, const void *value);
typedef CFStringRef (*CFArrayCopyDescriptionCallBack)(const void *value);
typedef Boolean (*CFArrayEqualCallBack)(const void *value1, const void *value2);
typedef struct {
    CFIndex version;
    CFArrayRetainCallBack retain;
    CFArrayReleaseCallBack release;
    CFArrayCopyDescriptionCallBack copyDescription;
    CFArrayEqualCallBack equal;
} CFArrayCallBacks;






extern
const CFArrayCallBacks kCFTypeArrayCallBacks;
# 101 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFArray.h" 3
typedef void (*CFArrayApplierFunction)(const void *value, void *context);





typedef const struct __CFArray * CFArrayRef;





typedef struct __CFArray * CFMutableArrayRef;





extern
CFTypeID CFArrayGetTypeID(void);
# 172 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFArray.h" 3
extern
CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks);
# 193 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFArray.h" 3
extern
CFArrayRef CFArrayCreateCopy(CFAllocatorRef allocator, CFArrayRef theArray);
# 237 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFArray.h" 3
extern
CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks);
# 267 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFArray.h" 3
extern
CFMutableArrayRef CFArrayCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFArrayRef theArray);
# 277 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFArray.h" 3
extern
CFIndex CFArrayGetCount(CFArrayRef theArray);
# 300 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFArray.h" 3
extern
CFIndex CFArrayGetCountOfValue(CFArrayRef theArray, CFRange range, const void *value);
# 323 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFArray.h" 3
extern
Boolean CFArrayContainsValue(CFArrayRef theArray, CFRange range, const void *value);
# 337 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFArray.h" 3
extern
const void *CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx);
# 358 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFArray.h" 3
extern
void CFArrayGetValues(CFArrayRef theArray, CFRange range, const void **values);
# 385 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFArray.h" 3
extern
void CFArrayApplyFunction(CFArrayRef theArray, CFRange range, CFArrayApplierFunction applier, void *context);
# 410 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFArray.h" 3
extern
CFIndex CFArrayGetFirstIndexOfValue(CFArrayRef theArray, CFRange range, const void *value);
# 435 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFArray.h" 3
extern
CFIndex CFArrayGetLastIndexOfValue(CFArrayRef theArray, CFRange range, const void *value);
# 474 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFArray.h" 3
extern
CFIndex CFArrayBSearchValues(CFArrayRef theArray, CFRange range, const void *value, CFComparatorFunction comparator, void *context);
# 490 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFArray.h" 3
extern
void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value);
# 511 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFArray.h" 3
extern
void CFArrayInsertValueAtIndex(CFMutableArrayRef theArray, CFIndex idx, const void *value);
# 532 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFArray.h" 3
extern
void CFArraySetValueAtIndex(CFMutableArrayRef theArray, CFIndex idx, const void *value);
# 546 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFArray.h" 3
extern
void CFArrayRemoveValueAtIndex(CFMutableArrayRef theArray, CFIndex idx);
# 556 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFArray.h" 3
extern
void CFArrayRemoveAllValues(CFMutableArrayRef theArray);
# 590 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFArray.h" 3
extern
void CFArrayReplaceValues(CFMutableArrayRef theArray, CFRange range, const void **newValues, CFIndex newCount);
# 608 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFArray.h" 3
extern
void CFArrayExchangeValuesAtIndices(CFMutableArrayRef theArray, CFIndex idx1, CFIndex idx2);
# 638 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFArray.h" 3
extern
void CFArraySortValues(CFMutableArrayRef theArray, CFRange range, CFComparatorFunction comparator, void *context);
# 665 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFArray.h" 3
extern
void CFArrayAppendArray(CFMutableArrayRef theArray, CFArrayRef otherArray, CFRange otherRange);

}
# 40 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CoreFoundation.h" 2 3
# 1 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBag.h" 1 3





#define __COREFOUNDATION_CFBAG__ 1



extern "C" {

typedef const void * (*CFBagRetainCallBack)(CFAllocatorRef allocator, const void *value);
typedef void (*CFBagReleaseCallBack)(CFAllocatorRef allocator, const void *value);
typedef CFStringRef (*CFBagCopyDescriptionCallBack)(const void *value);
typedef Boolean (*CFBagEqualCallBack)(const void *value1, const void *value2);
typedef CFHashCode (*CFBagHashCallBack)(const void *value);
typedef struct {
    CFIndex version;
    CFBagRetainCallBack retain;
    CFBagReleaseCallBack release;
    CFBagCopyDescriptionCallBack copyDescription;
    CFBagEqualCallBack equal;
    CFBagHashCallBack hash;
} CFBagCallBacks;

extern
const CFBagCallBacks kCFTypeBagCallBacks;
extern
const CFBagCallBacks kCFCopyStringBagCallBacks;

typedef void (*CFBagApplierFunction)(const void *value, void *context);

typedef const struct __CFBag * CFBagRef;
typedef struct __CFBag * CFMutableBagRef;

extern
CFTypeID CFBagGetTypeID(void);

extern
CFBagRef CFBagCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFBagCallBacks *callBacks);

extern
CFBagRef CFBagCreateCopy(CFAllocatorRef allocator, CFBagRef theBag);

extern
CFMutableBagRef CFBagCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFBagCallBacks *callBacks);

extern
CFMutableBagRef CFBagCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFBagRef theBag);

extern
CFIndex CFBagGetCount(CFBagRef theBag);

extern
CFIndex CFBagGetCountOfValue(CFBagRef theBag, const void *value);

extern
Boolean CFBagContainsValue(CFBagRef theBag, const void *value);

extern
const void *CFBagGetValue(CFBagRef theBag, const void *value);

extern
Boolean CFBagGetValueIfPresent(CFBagRef theBag, const void *candidate, const void **value);

extern
void CFBagGetValues(CFBagRef theBag, const void **values);

extern
void CFBagApplyFunction(CFBagRef theBag, CFBagApplierFunction applier, void *context);

extern
void CFBagAddValue(CFMutableBagRef theBag, const void *value);

extern
void CFBagReplaceValue(CFMutableBagRef theBag, const void *value);

extern
void CFBagSetValue(CFMutableBagRef theBag, const void *value);

extern
void CFBagRemoveValue(CFMutableBagRef theBag, const void *value);

extern
void CFBagRemoveAllValues(CFMutableBagRef theBag);

}
# 41 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CoreFoundation.h" 2 3
# 1 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBinaryHeap.h" 1 3
# 12 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBinaryHeap.h" 3
#define __COREFOUNDATION_CFBINARYHEAP__ 1



extern "C" {

typedef struct {
    CFIndex version;
    void * info;
    const void *(*retain)(const void *info);
    void (*release)(const void *info);
    CFStringRef (*copyDescription)(const void *info);
} CFBinaryHeapCompareContext;
# 49 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBinaryHeap.h" 3
typedef struct {
    CFIndex version;
    const void *(*retain)(CFAllocatorRef allocator, const void *ptr);
    void (*release)(CFAllocatorRef allocator, const void *ptr);
    CFStringRef (*copyDescription)(const void *ptr);
    CFComparisonResult (*compare)(const void *ptr1, const void *ptr2, void *context);
} CFBinaryHeapCallBacks;







extern const CFBinaryHeapCallBacks kCFStringBinaryHeapCallBacks;
# 73 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBinaryHeap.h" 3
typedef void (*CFBinaryHeapApplierFunction)(const void *val, void *context);





typedef struct __CFBinaryHeap * CFBinaryHeapRef;





extern CFTypeID CFBinaryHeapGetTypeID(void);
# 129 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBinaryHeap.h" 3
extern CFBinaryHeapRef CFBinaryHeapCreate(CFAllocatorRef allocator, CFIndex capacity, const CFBinaryHeapCallBacks *callBacks, const CFBinaryHeapCompareContext *compareContext);
# 158 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBinaryHeap.h" 3
extern CFBinaryHeapRef CFBinaryHeapCreateCopy(CFAllocatorRef allocator, CFIndex capacity, CFBinaryHeapRef heap);
# 167 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBinaryHeap.h" 3
extern CFIndex CFBinaryHeapGetCount(CFBinaryHeapRef heap);
# 182 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBinaryHeap.h" 3
extern CFIndex CFBinaryHeapGetCountOfValue(CFBinaryHeapRef heap, const void *value);
# 197 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBinaryHeap.h" 3
extern Boolean CFBinaryHeapContainsValue(CFBinaryHeapRef heap, const void *value);
# 208 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBinaryHeap.h" 3
extern const void * CFBinaryHeapGetMinimum(CFBinaryHeapRef heap);
# 222 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBinaryHeap.h" 3
extern Boolean CFBinaryHeapGetMinimumIfPresent(CFBinaryHeapRef heap, const void **value);
# 234 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBinaryHeap.h" 3
extern void CFBinaryHeapGetValues(CFBinaryHeapRef heap, const void **values);
# 253 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBinaryHeap.h" 3
extern void CFBinaryHeapApplyFunction(CFBinaryHeapRef heap, CFBinaryHeapApplierFunction applier, void *context);
# 265 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBinaryHeap.h" 3
extern void CFBinaryHeapAddValue(CFBinaryHeapRef heap, const void *value);







extern void CFBinaryHeapRemoveMinimumValue(CFBinaryHeapRef heap);
# 282 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBinaryHeap.h" 3
extern void CFBinaryHeapRemoveAllValues(CFBinaryHeapRef heap);

}
# 42 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CoreFoundation.h" 2 3
# 1 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBitVector.h" 1 3





#define __COREFOUNDATION_CFBITVECTOR__ 1



extern "C" {

typedef UInt32 CFBit;

typedef const struct __CFBitVector * CFBitVectorRef;
typedef struct __CFBitVector * CFMutableBitVectorRef;

extern CFTypeID CFBitVectorGetTypeID(void);

extern CFBitVectorRef CFBitVectorCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex numBits);
extern CFBitVectorRef CFBitVectorCreateCopy(CFAllocatorRef allocator, CFBitVectorRef bv);
extern CFMutableBitVectorRef CFBitVectorCreateMutable(CFAllocatorRef allocator, CFIndex capacity);
extern CFMutableBitVectorRef CFBitVectorCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFBitVectorRef bv);

extern CFIndex CFBitVectorGetCount(CFBitVectorRef bv);
extern CFIndex CFBitVectorGetCountOfBit(CFBitVectorRef bv, CFRange range, CFBit value);
extern Boolean CFBitVectorContainsBit(CFBitVectorRef bv, CFRange range, CFBit value);
extern CFBit CFBitVectorGetBitAtIndex(CFBitVectorRef bv, CFIndex idx);
extern void CFBitVectorGetBits(CFBitVectorRef bv, CFRange range, UInt8 *bytes);
extern CFIndex CFBitVectorGetFirstIndexOfBit(CFBitVectorRef bv, CFRange range, CFBit value);
extern CFIndex CFBitVectorGetLastIndexOfBit(CFBitVectorRef bv, CFRange range, CFBit value);

extern void CFBitVectorSetCount(CFMutableBitVectorRef bv, CFIndex count);
extern void CFBitVectorFlipBitAtIndex(CFMutableBitVectorRef bv, CFIndex idx);
extern void CFBitVectorFlipBits(CFMutableBitVectorRef bv, CFRange range);
extern void CFBitVectorSetBitAtIndex(CFMutableBitVectorRef bv, CFIndex idx, CFBit value);
extern void CFBitVectorSetBits(CFMutableBitVectorRef bv, CFRange range, CFBit value);
extern void CFBitVectorSetAllBits(CFMutableBitVectorRef bv, CFBit value);

}
# 43 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CoreFoundation.h" 2 3
# 1 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBundle.h" 1 3





#define __COREFOUNDATION_CFBUNDLE__ 1



# 1 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFDictionary.h" 1 3
# 60 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFDictionary.h" 3
#define __COREFOUNDATION_CFDICTIONARY__ 1



extern "C" {
# 91 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFDictionary.h" 3
typedef const void * (*CFDictionaryRetainCallBack)(CFAllocatorRef allocator, const void *value);
typedef void (*CFDictionaryReleaseCallBack)(CFAllocatorRef allocator, const void *value);
typedef CFStringRef (*CFDictionaryCopyDescriptionCallBack)(const void *value);
typedef Boolean (*CFDictionaryEqualCallBack)(const void *value1, const void *value2);
typedef CFHashCode (*CFDictionaryHashCallBack)(const void *value);
typedef struct {
    CFIndex version;
    CFDictionaryRetainCallBack retain;
    CFDictionaryReleaseCallBack release;
    CFDictionaryCopyDescriptionCallBack copyDescription;
    CFDictionaryEqualCallBack equal;
    CFDictionaryHashCallBack hash;
} CFDictionaryKeyCallBacks;







extern
const CFDictionaryKeyCallBacks kCFTypeDictionaryKeyCallBacks;
# 122 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFDictionary.h" 3
extern
const CFDictionaryKeyCallBacks kCFCopyStringDictionaryKeyCallBacks;
# 148 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFDictionary.h" 3
typedef struct {
    CFIndex version;
    CFDictionaryRetainCallBack retain;
    CFDictionaryReleaseCallBack release;
    CFDictionaryCopyDescriptionCallBack copyDescription;
    CFDictionaryEqualCallBack equal;
} CFDictionaryValueCallBacks;







extern
const CFDictionaryValueCallBacks kCFTypeDictionaryValueCallBacks;
# 174 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFDictionary.h" 3
typedef void (*CFDictionaryApplierFunction)(const void *key, const void *value, void *context);





typedef const struct __CFDictionary * CFDictionaryRef;





typedef struct __CFDictionary * CFMutableDictionaryRef;





extern
CFTypeID CFDictionaryGetTypeID(void);
# 277 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFDictionary.h" 3
extern
CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks);
# 301 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFDictionary.h" 3
extern
CFDictionaryRef CFDictionaryCreateCopy(CFAllocatorRef allocator, CFDictionaryRef theDict);
# 373 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFDictionary.h" 3
extern
CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks);
# 406 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFDictionary.h" 3
extern
CFMutableDictionaryRef CFDictionaryCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDictionaryRef theDict);
# 416 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFDictionary.h" 3
extern
CFIndex CFDictionaryGetCount(CFDictionaryRef theDict);
# 435 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFDictionary.h" 3
extern
CFIndex CFDictionaryGetCountOfKey(CFDictionaryRef theDict, const void *key);
# 451 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFDictionary.h" 3
extern
CFIndex CFDictionaryGetCountOfValue(CFDictionaryRef theDict, const void *value);
# 469 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFDictionary.h" 3
extern
Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key);
# 485 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFDictionary.h" 3
extern
Boolean CFDictionaryContainsValue(CFDictionaryRef theDict, const void *value);
# 507 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFDictionary.h" 3
extern
const void *CFDictionaryGetValue(CFDictionaryRef theDict, const void *key);
# 532 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFDictionary.h" 3
extern
Boolean CFDictionaryGetValueIfPresent(CFDictionaryRef theDict, const void *key, const void **value);
# 555 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFDictionary.h" 3
extern
void CFDictionaryGetKeysAndValues(CFDictionaryRef theDict, const void **keys, const void **values);
# 575 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFDictionary.h" 3
extern
void CFDictionaryApplyFunction(CFDictionaryRef theDict, CFDictionaryApplierFunction applier, void *context);
# 595 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFDictionary.h" 3
extern
void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value);
# 618 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFDictionary.h" 3
extern
void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value);
# 637 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFDictionary.h" 3
extern
void CFDictionaryReplaceValue(CFMutableDictionaryRef theDict, const void *key, const void *value);
# 651 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFDictionary.h" 3
extern
void CFDictionaryRemoveValue(CFMutableDictionaryRef theDict, const void *key);
# 661 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFDictionary.h" 3
extern
void CFDictionaryRemoveAllValues(CFMutableDictionaryRef theDict);

}
# 11 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBundle.h" 2 3
# 1 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFError.h" 1 3
# 30 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFError.h" 3
#define __COREFOUNDATION_CFERROR__ 1


# 1 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFString.h" 1 3





#define __COREFOUNDATION_CFSTRING__ 1



# 1 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFData.h" 1 3





#define __COREFOUNDATION_CFDATA__ 1



extern "C" {

typedef const struct __CFData * CFDataRef;
typedef struct __CFData * CFMutableDataRef;

extern
CFTypeID CFDataGetTypeID(void);

extern
CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length);

extern
CFDataRef CFDataCreateWithBytesNoCopy(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length, CFAllocatorRef bytesDeallocator);


extern
CFDataRef CFDataCreateCopy(CFAllocatorRef allocator, CFDataRef theData);

extern
CFMutableDataRef CFDataCreateMutable(CFAllocatorRef allocator, CFIndex capacity);

extern
CFMutableDataRef CFDataCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDataRef theData);

extern
CFIndex CFDataGetLength(CFDataRef theData);

extern
const UInt8 *CFDataGetBytePtr(CFDataRef theData);

extern
UInt8 *CFDataGetMutableBytePtr(CFMutableDataRef theData);

extern
void CFDataGetBytes(CFDataRef theData, CFRange range, UInt8 *buffer);

extern
void CFDataSetLength(CFMutableDataRef theData, CFIndex length);

extern
void CFDataIncreaseLength(CFMutableDataRef theData, CFIndex extraLength);

extern
void CFDataAppendBytes(CFMutableDataRef theData, const UInt8 *bytes, CFIndex length);

extern
void CFDataReplaceBytes(CFMutableDataRef theData, CFRange range, const UInt8 *newBytes, CFIndex newLength);

extern
void CFDataDeleteBytes(CFMutableDataRef theData, CFRange range);

}
# 11 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFString.h" 2 3

# 1 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFCharacterSet.h" 1 3
# 32 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFCharacterSet.h" 3
#define __COREFOUNDATION_CFCHARACTERSET__ 1




extern "C" {





typedef const struct __CFCharacterSet * CFCharacterSetRef;





typedef struct __CFCharacterSet * CFMutableCharacterSetRef;






enum {
    kCFCharacterSetControl = 1,
    kCFCharacterSetWhitespace,
    kCFCharacterSetWhitespaceAndNewline,
    kCFCharacterSetDecimalDigit,
    kCFCharacterSetLetter,
    kCFCharacterSetLowercaseLetter,
    kCFCharacterSetUppercaseLetter,
    kCFCharacterSetNonBase,
    kCFCharacterSetDecomposable,
    kCFCharacterSetAlphaNumeric,
    kCFCharacterSetPunctuation,

    kCFCharacterSetCapitalizedLetter = 13,


    kCFCharacterSetSymbol = 14,


    kCFCharacterSetNewline = 15,

    kCFCharacterSetIllegal = 12
};
typedef CFIndex CFCharacterSetPredefinedSet;





extern
CFTypeID CFCharacterSetGetTypeID(void);
# 98 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFCharacterSet.h" 3
extern
CFCharacterSetRef CFCharacterSetGetPredefined(CFCharacterSetPredefinedSet theSetIdentifier);
# 117 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFCharacterSet.h" 3
extern
CFCharacterSetRef CFCharacterSetCreateWithCharactersInRange(CFAllocatorRef alloc, CFRange theRange);
# 134 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFCharacterSet.h" 3
extern
CFCharacterSetRef CFCharacterSetCreateWithCharactersInString(CFAllocatorRef alloc, CFStringRef theString);
# 162 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFCharacterSet.h" 3
extern
CFCharacterSetRef CFCharacterSetCreateWithBitmapRepresentation(CFAllocatorRef alloc, CFDataRef theData);
# 179 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFCharacterSet.h" 3
extern CFCharacterSetRef CFCharacterSetCreateInvertedSet(CFAllocatorRef alloc, CFCharacterSetRef theSet);
# 189 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFCharacterSet.h" 3
extern Boolean CFCharacterSetIsSupersetOfSet(CFCharacterSetRef theSet, CFCharacterSetRef theOtherset);
# 200 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFCharacterSet.h" 3
extern Boolean CFCharacterSetHasMemberInPlane(CFCharacterSetRef theSet, CFIndex thePlane);
# 213 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFCharacterSet.h" 3
extern
CFMutableCharacterSetRef CFCharacterSetCreateMutable(CFAllocatorRef alloc);
# 230 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFCharacterSet.h" 3
extern
CFCharacterSetRef CFCharacterSetCreateCopy(CFAllocatorRef alloc, CFCharacterSetRef theSet) ;
# 247 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFCharacterSet.h" 3
extern
CFMutableCharacterSetRef CFCharacterSetCreateMutableCopy(CFAllocatorRef alloc, CFCharacterSetRef theSet);
# 261 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFCharacterSet.h" 3
extern
Boolean CFCharacterSetIsCharacterMember(CFCharacterSetRef theSet, UniChar theChar);
# 274 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFCharacterSet.h" 3
extern Boolean CFCharacterSetIsLongCharacterMember(CFCharacterSetRef theSet, UTF32Char theChar);
# 293 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFCharacterSet.h" 3
extern
CFDataRef CFCharacterSetCreateBitmapRepresentation(CFAllocatorRef alloc, CFCharacterSetRef theSet);
# 308 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFCharacterSet.h" 3
extern
void CFCharacterSetAddCharactersInRange(CFMutableCharacterSetRef theSet, CFRange theRange);
# 323 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFCharacterSet.h" 3
extern
void CFCharacterSetRemoveCharactersInRange(CFMutableCharacterSetRef theSet, CFRange theRange);
# 336 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFCharacterSet.h" 3
extern
void CFCharacterSetAddCharactersInString(CFMutableCharacterSetRef theSet, CFStringRef theString);
# 349 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFCharacterSet.h" 3
extern
void CFCharacterSetRemoveCharactersInString(CFMutableCharacterSetRef theSet, CFStringRef theString);
# 363 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFCharacterSet.h" 3
extern
void CFCharacterSetUnion(CFMutableCharacterSetRef theSet, CFCharacterSetRef theOtherSet);
# 377 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFCharacterSet.h" 3
extern
void CFCharacterSetIntersect(CFMutableCharacterSetRef theSet, CFCharacterSetRef theOtherSet);
# 387 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFCharacterSet.h" 3
extern
void CFCharacterSetInvert(CFMutableCharacterSetRef theSet);

}
# 13 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFString.h" 2 3
# 1 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFLocale.h" 1 3





#define __COREFOUNDATION_CFLOCALE__ 1







extern "C" {

typedef const struct __CFLocale *CFLocaleRef;

extern
CFTypeID CFLocaleGetTypeID(void) ;

extern
CFLocaleRef CFLocaleGetSystem(void) ;


extern
CFLocaleRef CFLocaleCopyCurrent(void) ;
# 36 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFLocale.h" 3
extern
CFArrayRef CFLocaleCopyAvailableLocaleIdentifiers(void) ;



extern
CFArrayRef CFLocaleCopyISOLanguageCodes(void) ;




extern
CFArrayRef CFLocaleCopyISOCountryCodes(void) ;




extern
CFArrayRef CFLocaleCopyISOCurrencyCodes(void) ;




extern
CFArrayRef CFLocaleCopyCommonISOCurrencyCodes(void) ;



extern
CFArrayRef CFLocaleCopyPreferredLanguages(void) ;


extern
CFStringRef CFLocaleCreateCanonicalLanguageIdentifierFromString(CFAllocatorRef allocator, CFStringRef localeIdentifier) ;



extern
CFStringRef CFLocaleCreateCanonicalLocaleIdentifierFromString(CFAllocatorRef allocator, CFStringRef localeIdentifier) ;



extern
CFStringRef CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes(CFAllocatorRef allocator, LangCode lcode, RegionCode rcode) ;


extern
CFDictionaryRef CFLocaleCreateComponentsFromLocaleIdentifier(CFAllocatorRef allocator, CFStringRef localeID) ;
# 92 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFLocale.h" 3
extern
CFStringRef CFLocaleCreateLocaleIdentifierFromComponents(CFAllocatorRef allocator, CFDictionaryRef dictionary) ;






extern
CFLocaleRef CFLocaleCreate(CFAllocatorRef allocator, CFStringRef localeIdentifier) ;


extern
CFLocaleRef CFLocaleCreateCopy(CFAllocatorRef allocator, CFLocaleRef locale) ;




extern
CFStringRef CFLocaleGetIdentifier(CFLocaleRef locale) ;



extern
CFTypeRef CFLocaleGetValue(CFLocaleRef locale, CFStringRef key) ;



extern
CFStringRef CFLocaleCopyDisplayNameForPropertyValue(CFLocaleRef displayLocale, CFStringRef key, CFStringRef value) ;





extern const CFStringRef kCFLocaleCurrentLocaleDidChangeNotification ;



extern const CFStringRef kCFLocaleIdentifier ;
extern const CFStringRef kCFLocaleLanguageCode ;
extern const CFStringRef kCFLocaleCountryCode ;
extern const CFStringRef kCFLocaleScriptCode ;
extern const CFStringRef kCFLocaleVariantCode ;

extern const CFStringRef kCFLocaleExemplarCharacterSet ;
extern const CFStringRef kCFLocaleCalendarIdentifier ;
extern const CFStringRef kCFLocaleCalendar ;
extern const CFStringRef kCFLocaleCollationIdentifier ;
extern const CFStringRef kCFLocaleUsesMetricSystem ;
extern const CFStringRef kCFLocaleMeasurementSystem ;
extern const CFStringRef kCFLocaleDecimalSeparator ;
extern const CFStringRef kCFLocaleGroupingSeparator ;
extern const CFStringRef kCFLocaleCurrencySymbol ;
extern const CFStringRef kCFLocaleCurrencyCode ;


extern const CFStringRef kCFGregorianCalendar ;
extern const CFStringRef kCFBuddhistCalendar ;
extern const CFStringRef kCFChineseCalendar ;
extern const CFStringRef kCFHebrewCalendar ;
extern const CFStringRef kCFIslamicCalendar ;
extern const CFStringRef kCFIslamicCivilCalendar ;
extern const CFStringRef kCFJapaneseCalendar ;


}
# 14 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFString.h" 2 3


extern "C" {
# 91 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFString.h" 3
typedef UInt32 CFStringEncoding;




#define kCFStringEncodingInvalidId (0xffffffffU)
enum {
    kCFStringEncodingMacRoman = 0,
    kCFStringEncodingWindowsLatin1 = 0x0500,
    kCFStringEncodingISOLatin1 = 0x0201,
    kCFStringEncodingNextStepLatin = 0x0B01,
    kCFStringEncodingASCII = 0x0600,
    kCFStringEncodingUnicode = 0x0100,
    kCFStringEncodingUTF8 = 0x08000100,
    kCFStringEncodingNonLossyASCII = 0x0BFF

    ,
    kCFStringEncodingUTF16 = 0x0100,
    kCFStringEncodingUTF16BE = 0x10000100,
    kCFStringEncodingUTF16LE = 0x14000100,

    kCFStringEncodingUTF32 = 0x0c000100,
    kCFStringEncodingUTF32BE = 0x18000100,
    kCFStringEncodingUTF32LE = 0x1c000100

};
typedef CFStringEncoding CFStringBuiltInEncodings;


extern
CFTypeID CFStringGetTypeID(void);
# 141 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFString.h" 3
#define CFSTR(cStr) ((CFStringRef) __builtin___CFStringMakeConstantString ("" cStr ""))
# 152 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFString.h" 3
extern
CFStringRef CFStringCreateWithPascalString(CFAllocatorRef alloc, ConstStr255Param pStr, CFStringEncoding encoding);

extern
CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding);



extern
CFStringRef CFStringCreateWithBytes(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation);

extern
CFStringRef CFStringCreateWithCharacters(CFAllocatorRef alloc, const UniChar *chars, CFIndex numChars);
# 183 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFString.h" 3
extern
CFStringRef CFStringCreateWithPascalStringNoCopy(CFAllocatorRef alloc, ConstStr255Param pStr, CFStringEncoding encoding, CFAllocatorRef contentsDeallocator);

extern
CFStringRef CFStringCreateWithCStringNoCopy(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding, CFAllocatorRef contentsDeallocator);




extern
CFStringRef CFStringCreateWithBytesNoCopy(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation, CFAllocatorRef contentsDeallocator) ;


extern
CFStringRef CFStringCreateWithCharactersNoCopy(CFAllocatorRef alloc, const UniChar *chars, CFIndex numChars, CFAllocatorRef contentsDeallocator);



extern
CFStringRef CFStringCreateWithSubstring(CFAllocatorRef alloc, CFStringRef str, CFRange range);

extern
CFStringRef CFStringCreateCopy(CFAllocatorRef alloc, CFStringRef theString);



extern
CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...);

extern
CFStringRef CFStringCreateWithFormatAndArguments(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, va_list arguments);



extern
CFMutableStringRef CFStringCreateMutable(CFAllocatorRef alloc, CFIndex maxLength);

extern
CFMutableStringRef CFStringCreateMutableCopy(CFAllocatorRef alloc, CFIndex maxLength, CFStringRef theString);







extern
CFMutableStringRef CFStringCreateMutableWithExternalCharactersNoCopy(CFAllocatorRef alloc, UniChar *chars, CFIndex numChars, CFIndex capacity, CFAllocatorRef externalCharactersAllocator);





extern
CFIndex CFStringGetLength(CFStringRef theString);






extern
UniChar CFStringGetCharacterAtIndex(CFStringRef theString, CFIndex idx);

extern
void CFStringGetCharacters(CFStringRef theString, CFRange range, UniChar *buffer);
# 261 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFString.h" 3
extern
Boolean CFStringGetPascalString(CFStringRef theString, StringPtr buffer, CFIndex bufferSize, CFStringEncoding encoding);

extern
Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding);






extern
ConstStringPtr CFStringGetPascalStringPtr(CFStringRef theString, CFStringEncoding encoding);

extern
const char *CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding);

extern
const UniChar *CFStringGetCharactersPtr(CFStringRef theString);
# 293 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFString.h" 3
extern
CFIndex CFStringGetBytes(CFStringRef theString, CFRange range, CFStringEncoding encoding, UInt8 lossByte, Boolean isExternalRepresentation, UInt8 *buffer, CFIndex maxBufLen, CFIndex *usedBufLen);







extern
CFStringRef CFStringCreateFromExternalRepresentation(CFAllocatorRef alloc, CFDataRef data, CFStringEncoding encoding);

extern
CFDataRef CFStringCreateExternalRepresentation(CFAllocatorRef alloc, CFStringRef theString, CFStringEncoding encoding, UInt8 lossByte);



extern
CFStringEncoding CFStringGetSmallestEncoding(CFStringRef theString);

extern
CFStringEncoding CFStringGetFastestEncoding(CFStringRef theString);



extern
CFStringEncoding CFStringGetSystemEncoding(void);

extern
CFIndex CFStringGetMaximumSizeForEncoding(CFIndex length, CFStringEncoding encoding);






extern
Boolean CFStringGetFileSystemRepresentation(CFStringRef string, char *buffer, CFIndex maxBufLen) ;



extern
CFIndex CFStringGetMaximumSizeOfFileSystemRepresentation(CFStringRef string) ;



extern
CFStringRef CFStringCreateWithFileSystemRepresentation(CFAllocatorRef alloc, const char *buffer) ;







enum {
    kCFCompareCaseInsensitive = 1,
    kCFCompareBackwards = 4,
    kCFCompareAnchored = 8,
    kCFCompareNonliteral = 16,
    kCFCompareLocalized = 32,
    kCFCompareNumerically = 64

    ,
    kCFCompareDiacriticInsensitive = 128,
    kCFCompareWidthInsensitive = 256,
    kCFCompareForcedOrdering = 512

};
typedef CFOptionFlags CFStringCompareFlags;
# 371 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFString.h" 3
extern
CFComparisonResult CFStringCompareWithOptionsAndLocale(CFStringRef theString1, CFStringRef theString2, CFRange rangeToCompare, CFOptionFlags compareOptions, CFLocaleRef locale) ;





extern
CFComparisonResult CFStringCompareWithOptions(CFStringRef theString1, CFStringRef theString2, CFRange rangeToCompare, CFOptionFlags compareOptions);





extern
CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFOptionFlags compareOptions);
# 395 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFString.h" 3
extern
Boolean CFStringFindWithOptionsAndLocale(CFStringRef theString, CFStringRef stringToFind, CFRange rangeToSearch, CFOptionFlags searchOptions, CFLocaleRef locale, CFRange *result) ;





extern
Boolean CFStringFindWithOptions(CFStringRef theString, CFStringRef stringToFind, CFRange rangeToSearch, CFOptionFlags searchOptions, CFRange *result);
# 413 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFString.h" 3
extern
CFArrayRef CFStringCreateArrayWithFindResults(CFAllocatorRef alloc, CFStringRef theString, CFStringRef stringToFind, CFRange rangeToSearch, CFOptionFlags compareOptions);



extern
CFRange CFStringFind(CFStringRef theString, CFStringRef stringToFind, CFOptionFlags compareOptions);

extern
Boolean CFStringHasPrefix(CFStringRef theString, CFStringRef prefix);

extern
Boolean CFStringHasSuffix(CFStringRef theString, CFStringRef suffix);
# 441 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFString.h" 3
extern CFRange CFStringGetRangeOfComposedCharactersAtIndex(CFStringRef theString, CFIndex theIndex);
# 472 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFString.h" 3
extern Boolean CFStringFindCharacterFromSet(CFStringRef theString, CFCharacterSetRef theSet, CFRange rangeToSearch, CFOptionFlags searchOptions, CFRange *result);
# 484 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFString.h" 3
extern
void CFStringGetLineBounds(CFStringRef theString, CFRange range, CFIndex *lineBeginIndex, CFIndex *lineEndIndex, CFIndex *contentsEndIndex);



extern
void CFStringGetParagraphBounds(CFStringRef string, CFRange range, CFIndex *parBeginIndex, CFIndex *parEndIndex, CFIndex *contentsEndIndex) ;



extern
CFStringRef CFStringCreateByCombiningStrings(CFAllocatorRef alloc, CFArrayRef theArray, CFStringRef separatorString);

extern
CFArrayRef CFStringCreateArrayBySeparatingStrings(CFAllocatorRef alloc, CFStringRef theString, CFStringRef separatorString);




extern
SInt32 CFStringGetIntValue(CFStringRef str);

extern
double CFStringGetDoubleValue(CFStringRef str);
# 517 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFString.h" 3
extern
void CFStringAppend(CFMutableStringRef theString, CFStringRef appendedString);

extern
void CFStringAppendCharacters(CFMutableStringRef theString, const UniChar *chars, CFIndex numChars);

extern
void CFStringAppendPascalString(CFMutableStringRef theString, ConstStr255Param pStr, CFStringEncoding encoding);

extern
void CFStringAppendCString(CFMutableStringRef theString, const char *cStr, CFStringEncoding encoding);

extern
void CFStringAppendFormat(CFMutableStringRef theString, CFDictionaryRef formatOptions, CFStringRef format, ...);

extern
void CFStringAppendFormatAndArguments(CFMutableStringRef theString, CFDictionaryRef formatOptions, CFStringRef format, va_list arguments);

extern
void CFStringInsert(CFMutableStringRef str, CFIndex idx, CFStringRef insertedStr);

extern
void CFStringDelete(CFMutableStringRef theString, CFRange range);

extern
void CFStringReplace(CFMutableStringRef theString, CFRange range, CFStringRef replacement);

extern
void CFStringReplaceAll(CFMutableStringRef theString, CFStringRef replacement);
# 556 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFString.h" 3
extern
CFIndex CFStringFindAndReplace(CFMutableStringRef theString, CFStringRef stringToFind, CFStringRef replacementString, CFRange rangeToSearch, CFOptionFlags compareOptions);
# 568 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFString.h" 3
extern
void CFStringSetExternalCharactersNoCopy(CFMutableStringRef theString, UniChar *chars, CFIndex length, CFIndex capacity);
# 582 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFString.h" 3
extern
void CFStringPad(CFMutableStringRef theString, CFStringRef padString, CFIndex length, CFIndex indexIntoPad);

extern
void CFStringTrim(CFMutableStringRef theString, CFStringRef trimString);

extern
void CFStringTrimWhitespace(CFMutableStringRef theString);


extern
void CFStringLowercase(CFMutableStringRef theString, CFLocaleRef locale);

extern
void CFStringUppercase(CFMutableStringRef theString, CFLocaleRef locale);

extern
void CFStringCapitalize(CFMutableStringRef theString, CFLocaleRef locale);
# 618 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFString.h" 3
enum {
 kCFStringNormalizationFormD = 0,
 kCFStringNormalizationFormKD,
 kCFStringNormalizationFormC,
 kCFStringNormalizationFormKC
};
typedef CFIndex CFStringNormalizationForm;
# 637 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFString.h" 3
extern void CFStringNormalize(CFMutableStringRef theString, CFStringNormalizationForm theForm);
# 665 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFString.h" 3
extern
void CFStringFold(CFMutableStringRef theString, CFOptionFlags theFlags, CFLocaleRef theLocale) ;






Boolean CFStringTransform(CFMutableStringRef string, CFRange *range, CFStringRef transform, Boolean reverse) ;



extern const CFStringRef kCFStringTransformStripCombiningMarks ;
extern const CFStringRef kCFStringTransformToLatin ;
extern const CFStringRef kCFStringTransformFullwidthHalfwidth ;
extern const CFStringRef kCFStringTransformLatinKatakana ;
extern const CFStringRef kCFStringTransformLatinHiragana ;
extern const CFStringRef kCFStringTransformHiraganaKatakana ;
extern const CFStringRef kCFStringTransformMandarinLatin ;
extern const CFStringRef kCFStringTransformLatinHangul ;
extern const CFStringRef kCFStringTransformLatinArabic ;
extern const CFStringRef kCFStringTransformLatinHebrew ;
extern const CFStringRef kCFStringTransformLatinThai ;
extern const CFStringRef kCFStringTransformLatinCyrillic ;
extern const CFStringRef kCFStringTransformLatinGreek ;
extern const CFStringRef kCFStringTransformToXMLHex ;
extern const CFStringRef kCFStringTransformToUnicodeName ;
extern const CFStringRef kCFStringTransformStripDiacritics ;






extern
Boolean CFStringIsEncodingAvailable(CFStringEncoding encoding);



extern
const CFStringEncoding *CFStringGetListOfAvailableEncodings(void);



extern
CFStringRef CFStringGetNameOfEncoding(CFStringEncoding encoding);



extern
unsigned long CFStringConvertEncodingToNSStringEncoding(CFStringEncoding encoding);

extern
CFStringEncoding CFStringConvertNSStringEncodingToEncoding(unsigned long encoding);



extern
UInt32 CFStringConvertEncodingToWindowsCodepage(CFStringEncoding encoding);

extern
CFStringEncoding CFStringConvertWindowsCodepageToEncoding(UInt32 codepage);



extern
CFStringEncoding CFStringConvertIANACharSetNameToEncoding(CFStringRef theString);

extern
CFStringRef CFStringConvertEncodingToIANACharSetName(CFStringEncoding encoding);





extern
CFStringEncoding CFStringGetMostCompatibleMacStringEncoding(CFStringEncoding encoding);
# 754 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFString.h" 3
#define __kCFStringInlineBufferLength 64
typedef struct {
    UniChar buffer[64];
    CFStringRef theString;
    const UniChar *directBuffer;
    CFRange rangeToBuffer;
    CFIndex bufferedRangeStart;
    CFIndex bufferedRangeEnd;
} CFStringInlineBuffer;


static __inline__ void CFStringInitInlineBuffer(CFStringRef str, CFStringInlineBuffer *buf, CFRange range) {
    buf->theString = str;
    buf->rangeToBuffer = range;
    buf->directBuffer = CFStringGetCharactersPtr(str);
    buf->bufferedRangeStart = buf->bufferedRangeEnd = 0;
}

static __inline__ UniChar CFStringGetCharacterFromInlineBuffer(CFStringInlineBuffer *buf, CFIndex idx) {
    if (buf->directBuffer) {
 if (idx < 0 || idx >= buf->rangeToBuffer.length) return 0;
        return buf->directBuffer[idx + buf->rangeToBuffer.location];
    }
    if (idx >= buf->bufferedRangeEnd || idx < buf->bufferedRangeStart) {
 if (idx < 0 || idx >= buf->rangeToBuffer.length) return 0;
 if ((buf->bufferedRangeStart = idx - 4) < 0) buf->bufferedRangeStart = 0;
 buf->bufferedRangeEnd = buf->bufferedRangeStart + 64;
 if (buf->bufferedRangeEnd > buf->rangeToBuffer.length) buf->bufferedRangeEnd = buf->rangeToBuffer.length;
 CFStringGetCharacters(buf->theString, CFRangeMake(buf->rangeToBuffer.location + buf->bufferedRangeStart, buf->bufferedRangeEnd - buf->bufferedRangeStart), buf->buffer);
    }
    return buf->buffer[idx - buf->bufferedRangeStart];
}
# 808 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFString.h" 3
extern
void CFShow(CFTypeRef obj);

extern
void CFShowStr(CFStringRef str);


extern
CFStringRef __CFStringMakeConstantString(const char *cStr);

}
# 34 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFError.h" 2 3


extern "C" {





typedef struct __CFError * CFErrorRef;





extern
CFTypeID CFErrorGetTypeID(void) ;



extern const CFStringRef kCFErrorDomainPOSIX ;
extern const CFStringRef kCFErrorDomainOSStatus ;
extern const CFStringRef kCFErrorDomainMach ;
extern const CFStringRef kCFErrorDomainCocoa ;


extern const CFStringRef kCFErrorLocalizedDescriptionKey ;
extern const CFStringRef kCFErrorLocalizedFailureReasonKey ;
extern const CFStringRef kCFErrorLocalizedRecoverySuggestionKey ;


extern const CFStringRef kCFErrorDescriptionKey ;


extern const CFStringRef kCFErrorUnderlyingErrorKey ;
# 81 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFError.h" 3
extern
CFErrorRef CFErrorCreate(CFAllocatorRef allocator, CFStringRef domain, CFIndex code, CFDictionaryRef userInfo) ;
# 96 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFError.h" 3
extern
CFErrorRef CFErrorCreateWithUserInfoKeysAndValues(CFAllocatorRef allocator, CFStringRef domain, CFIndex code, const void *const *userInfoKeys, const void *const *userInfoValues, CFIndex numUserInfoValues) ;







extern
CFStringRef CFErrorGetDomain(CFErrorRef err) ;







extern
CFIndex CFErrorGetCode(CFErrorRef err) ;
# 124 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFError.h" 3
extern
CFDictionaryRef CFErrorCopyUserInfo(CFErrorRef err) ;
# 138 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFError.h" 3
extern
CFStringRef CFErrorCopyDescription(CFErrorRef err) ;
# 150 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFError.h" 3
extern
CFStringRef CFErrorCopyFailureReason(CFErrorRef err) ;
# 162 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFError.h" 3
extern
CFStringRef CFErrorCopyRecoverySuggestion(CFErrorRef err) ;



}
# 12 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBundle.h" 2 3

# 1 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFURL.h" 1 3





#define __COREFOUNDATION_CFURL__ 1





extern "C" {

enum {
    kCFURLPOSIXPathStyle = 0,
    kCFURLHFSPathStyle,
    kCFURLWindowsPathStyle
};
typedef CFIndex CFURLPathStyle;

typedef const struct __CFURL * CFURLRef;
# 37 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFURL.h" 3
extern
CFTypeID CFURLGetTypeID(void);



extern
CFURLRef CFURLCreateWithBytes(CFAllocatorRef allocator, const UInt8 *URLBytes, CFIndex length, CFStringEncoding encoding, CFURLRef baseURL);





extern
CFDataRef CFURLCreateData(CFAllocatorRef allocator, CFURLRef url, CFStringEncoding encoding, Boolean escapeWhitespace);


extern
CFURLRef CFURLCreateWithString(CFAllocatorRef allocator, CFStringRef URLString, CFURLRef baseURL);
# 69 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFURL.h" 3
extern
CFURLRef CFURLCreateAbsoluteURLWithBytes(CFAllocatorRef alloc, const UInt8 *relativeURLBytes, CFIndex length, CFStringEncoding encoding, CFURLRef baseURL, Boolean useCompatibilityMode) ;
# 79 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFURL.h" 3
extern
CFURLRef CFURLCreateWithFileSystemPath(CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory);

extern
CFURLRef CFURLCreateFromFileSystemRepresentation(CFAllocatorRef allocator, const UInt8 *buffer, CFIndex bufLen, Boolean isDirectory);

extern
CFURLRef CFURLCreateWithFileSystemPathRelativeToBase(CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory, CFURLRef baseURL);

extern
CFURLRef CFURLCreateFromFileSystemRepresentationRelativeToBase(CFAllocatorRef allocator, const UInt8 *buffer, CFIndex bufLen, Boolean isDirectory, CFURLRef baseURL);
# 98 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFURL.h" 3
extern
Boolean CFURLGetFileSystemRepresentation(CFURLRef url, Boolean resolveAgainstBase, UInt8 *buffer, CFIndex maxBufLen);


extern
CFURLRef CFURLCopyAbsoluteURL(CFURLRef relativeURL);


extern
CFStringRef CFURLGetString(CFURLRef anURL);


extern
CFURLRef CFURLGetBaseURL(CFURLRef anURL);
# 173 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFURL.h" 3
extern
Boolean CFURLCanBeDecomposed(CFURLRef anURL);



extern
CFStringRef CFURLCopyScheme(CFURLRef anURL);


extern
CFStringRef CFURLCopyNetLocation(CFURLRef anURL);
# 196 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFURL.h" 3
extern
CFStringRef CFURLCopyPath(CFURLRef anURL);

extern
CFStringRef CFURLCopyStrictPath(CFURLRef anURL, Boolean *isAbsolute);

extern
CFStringRef CFURLCopyFileSystemPath(CFURLRef anURL, CFURLPathStyle pathStyle);



extern
Boolean CFURLHasDirectoryPath(CFURLRef anURL);



extern
CFStringRef CFURLCopyResourceSpecifier(CFURLRef anURL);

extern
CFStringRef CFURLCopyHostName(CFURLRef anURL);

extern
SInt32 CFURLGetPortNumber(CFURLRef anURL);

extern
CFStringRef CFURLCopyUserName(CFURLRef anURL);

extern
CFStringRef CFURLCopyPassword(CFURLRef anURL);






extern
CFStringRef CFURLCopyParameterString(CFURLRef anURL, CFStringRef charactersToLeaveEscaped);

extern
CFStringRef CFURLCopyQueryString(CFURLRef anURL, CFStringRef charactersToLeaveEscaped);

extern
CFStringRef CFURLCopyFragment(CFURLRef anURL, CFStringRef charactersToLeaveEscaped);

extern
CFStringRef CFURLCopyLastPathComponent(CFURLRef url);

extern
CFStringRef CFURLCopyPathExtension(CFURLRef url);





extern
CFURLRef CFURLCreateCopyAppendingPathComponent(CFAllocatorRef allocator, CFURLRef url, CFStringRef pathComponent, Boolean isDirectory);

extern
CFURLRef CFURLCreateCopyDeletingLastPathComponent(CFAllocatorRef allocator, CFURLRef url);

extern
CFURLRef CFURLCreateCopyAppendingPathExtension(CFAllocatorRef allocator, CFURLRef url, CFStringRef extension);

extern
CFURLRef CFURLCreateCopyDeletingPathExtension(CFAllocatorRef allocator, CFURLRef url);
# 270 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFURL.h" 3
extern
CFIndex CFURLGetBytes(CFURLRef url, UInt8 *buffer, CFIndex bufferLength) ;

enum {
 kCFURLComponentScheme = 1,
 kCFURLComponentNetLocation = 2,
 kCFURLComponentPath = 3,
 kCFURLComponentResourceSpecifier = 4,

 kCFURLComponentUser = 5,
 kCFURLComponentPassword = 6,
 kCFURLComponentUserInfo = 7,
 kCFURLComponentHost = 8,
 kCFURLComponentPort = 9,
 kCFURLComponentParameterString = 10,
 kCFURLComponentQuery = 11,
 kCFURLComponentFragment = 12
};
typedef CFIndex CFURLComponentType;
# 353 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFURL.h" 3
extern
CFRange CFURLGetByteRangeForComponent(CFURLRef url, CFURLComponentType component, CFRange *rangeIncludingSeparators) ;
# 364 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFURL.h" 3
extern
CFStringRef CFURLCreateStringByReplacingPercentEscapes(CFAllocatorRef allocator, CFStringRef originalString, CFStringRef charactersToLeaveEscaped);



extern
CFStringRef CFURLCreateStringByReplacingPercentEscapesUsingEncoding(CFAllocatorRef allocator, CFStringRef origString, CFStringRef charsToLeaveEscaped, CFStringEncoding encoding) ;
# 386 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFURL.h" 3
extern
CFStringRef CFURLCreateStringByAddingPercentEscapes(CFAllocatorRef allocator, CFStringRef originalString, CFStringRef charactersToLeaveUnescaped, CFStringRef legalURLCharactersToBeEscaped, CFStringEncoding encoding);




struct FSRef;

extern
CFURLRef CFURLCreateFromFSRef(CFAllocatorRef allocator, const struct FSRef *fsRef);

extern
Boolean CFURLGetFSRef(CFURLRef url, struct FSRef *fsRef);




}
# 14 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBundle.h" 2 3

extern "C" {

typedef struct __CFBundle *CFBundleRef;
typedef struct __CFBundle *CFPlugInRef;


extern
const CFStringRef kCFBundleInfoDictionaryVersionKey;

extern
const CFStringRef kCFBundleExecutableKey;

extern
const CFStringRef kCFBundleIdentifierKey;

extern
const CFStringRef kCFBundleVersionKey;



extern
const CFStringRef kCFBundleDevelopmentRegionKey;

extern
const CFStringRef kCFBundleNameKey;

extern
const CFStringRef kCFBundleLocalizationsKey ;




extern
CFBundleRef CFBundleGetMainBundle(void);

extern
CFBundleRef CFBundleGetBundleWithIdentifier(CFStringRef bundleID);







extern
CFArrayRef CFBundleGetAllBundles(void);




extern
CFTypeID CFBundleGetTypeID(void);

extern
CFBundleRef CFBundleCreate(CFAllocatorRef allocator, CFURLRef bundleURL);


extern
CFArrayRef CFBundleCreateBundlesFromDirectory(CFAllocatorRef allocator, CFURLRef directoryURL, CFStringRef bundleType);





extern
CFURLRef CFBundleCopyBundleURL(CFBundleRef bundle);

extern
CFTypeRef CFBundleGetValueForInfoDictionaryKey(CFBundleRef bundle, CFStringRef key);



extern
CFDictionaryRef CFBundleGetInfoDictionary(CFBundleRef bundle);



extern
CFDictionaryRef CFBundleGetLocalInfoDictionary(CFBundleRef bundle);


extern
void CFBundleGetPackageInfo(CFBundleRef bundle, UInt32 *packageType, UInt32 *packageCreator);

extern
CFStringRef CFBundleGetIdentifier(CFBundleRef bundle);

extern
UInt32 CFBundleGetVersionNumber(CFBundleRef bundle);

extern
CFStringRef CFBundleGetDevelopmentRegion(CFBundleRef bundle);

extern
CFURLRef CFBundleCopySupportFilesDirectoryURL(CFBundleRef bundle);

extern
CFURLRef CFBundleCopyResourcesDirectoryURL(CFBundleRef bundle);

extern
CFURLRef CFBundleCopyPrivateFrameworksURL(CFBundleRef bundle);

extern
CFURLRef CFBundleCopySharedFrameworksURL(CFBundleRef bundle);

extern
CFURLRef CFBundleCopySharedSupportURL(CFBundleRef bundle);

extern
CFURLRef CFBundleCopyBuiltInPlugInsURL(CFBundleRef bundle);






extern
CFDictionaryRef CFBundleCopyInfoDictionaryInDirectory(CFURLRef bundleURL);

extern
Boolean CFBundleGetPackageInfoInDirectory(CFURLRef url, UInt32 *packageType, UInt32 *packageCreator);



extern
CFURLRef CFBundleCopyResourceURL(CFBundleRef bundle, CFStringRef resourceName, CFStringRef resourceType, CFStringRef subDirName);

extern
CFArrayRef CFBundleCopyResourceURLsOfType(CFBundleRef bundle, CFStringRef resourceType, CFStringRef subDirName);

extern
CFStringRef CFBundleCopyLocalizedString(CFBundleRef bundle, CFStringRef key, CFStringRef value, CFStringRef tableName);

#define CFCopyLocalizedString(key,comment) CFBundleCopyLocalizedString(CFBundleGetMainBundle(), (key), (key), NULL)

#define CFCopyLocalizedStringFromTable(key,tbl,comment) CFBundleCopyLocalizedString(CFBundleGetMainBundle(), (key), (key), (tbl))

#define CFCopyLocalizedStringFromTableInBundle(key,tbl,bundle,comment) CFBundleCopyLocalizedString((bundle), (key), (key), (tbl))

#define CFCopyLocalizedStringWithDefaultValue(key,tbl,bundle,value,comment) CFBundleCopyLocalizedString((bundle), (key), (value), (tbl))
# 163 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBundle.h" 3
extern
CFURLRef CFBundleCopyResourceURLInDirectory(CFURLRef bundleURL, CFStringRef resourceName, CFStringRef resourceType, CFStringRef subDirName);

extern
CFArrayRef CFBundleCopyResourceURLsOfTypeInDirectory(CFURLRef bundleURL, CFStringRef resourceType, CFStringRef subDirName);






extern
CFArrayRef CFBundleCopyBundleLocalizations(CFBundleRef bundle);


extern
CFArrayRef CFBundleCopyPreferredLocalizationsFromArray(CFArrayRef locArray);






extern
CFArrayRef CFBundleCopyLocalizationsForPreferences(CFArrayRef locArray, CFArrayRef prefArray) ;
# 197 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBundle.h" 3
extern
CFURLRef CFBundleCopyResourceURLForLocalization(CFBundleRef bundle, CFStringRef resourceName, CFStringRef resourceType, CFStringRef subDirName, CFStringRef localizationName);

extern
CFArrayRef CFBundleCopyResourceURLsOfTypeForLocalization(CFBundleRef bundle, CFStringRef resourceType, CFStringRef subDirName, CFStringRef localizationName);
# 211 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBundle.h" 3
extern
CFDictionaryRef CFBundleCopyInfoDictionaryForURL(CFURLRef url) ;





extern
CFArrayRef CFBundleCopyLocalizationsForURL(CFURLRef url) ;






extern
CFArrayRef CFBundleCopyExecutableArchitecturesForURL(CFURLRef url) ;
# 237 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBundle.h" 3
extern
CFURLRef CFBundleCopyExecutableURL(CFBundleRef bundle);


enum {
    kCFBundleExecutableArchitectureI386 = 0x00000007,
    kCFBundleExecutableArchitecturePPC = 0x00000012,
    kCFBundleExecutableArchitectureX86_64 = 0x01000007,
    kCFBundleExecutableArchitecturePPC64 = 0x01000012
};


extern
CFArrayRef CFBundleCopyExecutableArchitectures(CFBundleRef bundle) ;





extern
Boolean CFBundlePreflightExecutable(CFBundleRef bundle, CFErrorRef *error) ;






extern
Boolean CFBundleLoadExecutableAndReturnError(CFBundleRef bundle, CFErrorRef *error) ;





extern
Boolean CFBundleLoadExecutable(CFBundleRef bundle);

extern
Boolean CFBundleIsExecutableLoaded(CFBundleRef bundle);

extern
void CFBundleUnloadExecutable(CFBundleRef bundle);

extern
void *CFBundleGetFunctionPointerForName(CFBundleRef bundle, CFStringRef functionName);

extern
void CFBundleGetFunctionPointersForNames(CFBundleRef bundle, CFArrayRef functionNames, void *ftbl[]);

extern
void *CFBundleGetDataPointerForName(CFBundleRef bundle, CFStringRef symbolName);

extern
void CFBundleGetDataPointersForNames(CFBundleRef bundle, CFArrayRef symbolNames, void *stbl[]);

extern
CFURLRef CFBundleCopyAuxiliaryExecutableURL(CFBundleRef bundle, CFStringRef executableName);
# 304 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBundle.h" 3
extern
CFPlugInRef CFBundleGetPlugIn(CFBundleRef bundle);






typedef SInt16 CFBundleRefNum;


extern
CFBundleRefNum CFBundleOpenBundleResourceMap(CFBundleRef bundle);






extern
SInt32 CFBundleOpenBundleResourceFiles(CFBundleRef bundle, CFBundleRefNum *refNum, CFBundleRefNum *localizedRefNum);



extern
void CFBundleCloseBundleResourceMap(CFBundleRef bundle, CFBundleRefNum refNum);

}
# 44 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CoreFoundation.h" 2 3
# 1 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFByteOrder.h" 1 3





#define __COREFOUNDATION_CFBYTEORDER__ 1




#define CF_USE_OSBYTEORDER_H 1


extern "C" {

enum __CFByteOrder {
    CFByteOrderUnknown,
    CFByteOrderLittleEndian,
    CFByteOrderBigEndian
};
typedef CFIndex CFByteOrder;

static __inline__ CFByteOrder CFByteOrderGetCurrent(void) {

    int32_t byteOrder = OSHostByteOrder();
    switch (byteOrder) {
    case OSLittleEndian: return CFByteOrderLittleEndian;
    case OSBigEndian: return CFByteOrderBigEndian;
    default: break;
    }
    return CFByteOrderUnknown;
# 41 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFByteOrder.h" 3
}

static __inline__ uint16_t CFSwapInt16(uint16_t arg) {

    return (__builtin_constant_p(arg) ? ((__uint16_t)((((__uint16_t)(arg) & 0xff00) >> 8) | (((__uint16_t)(arg) & 0x00ff) << 8))) : _OSSwapInt16(arg));





}

static __inline__ uint32_t CFSwapInt32(uint32_t arg) {

    return (__builtin_constant_p(arg) ? ((__uint32_t)((((__uint32_t)(arg) & 0xff000000) >> 24) | (((__uint32_t)(arg) & 0x00ff0000) >> 8) | (((__uint32_t)(arg) & 0x0000ff00) << 8) | (((__uint32_t)(arg) & 0x000000ff) << 24))) : _OSSwapInt32(arg));





}

static __inline__ uint64_t CFSwapInt64(uint64_t arg) {

    return (__builtin_constant_p(arg) ? ((__uint64_t)((((__uint64_t)(arg) & 0xff00000000000000ULL) >> 56) | (((__uint64_t)(arg) & 0x00ff000000000000ULL) >> 40) | (((__uint64_t)(arg) & 0x0000ff0000000000ULL) >> 24) | (((__uint64_t)(arg) & 0x000000ff00000000ULL) >> 8) | (((__uint64_t)(arg) & 0x00000000ff000000ULL) << 8) | (((__uint64_t)(arg) & 0x0000000000ff0000ULL) << 24) | (((__uint64_t)(arg) & 0x000000000000ff00ULL) << 40) | (((__uint64_t)(arg) & 0x00000000000000ffULL) << 56))) : _OSSwapInt64(arg));
# 76 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFByteOrder.h" 3
}

static __inline__ uint16_t CFSwapInt16BigToHost(uint16_t arg) {

    return (__builtin_constant_p(arg) ? ((__uint16_t)((((__uint16_t)(arg) & 0xff00) >> 8) | (((__uint16_t)(arg) & 0x00ff) << 8))) : _OSSwapInt16(arg));





}

static __inline__ uint32_t CFSwapInt32BigToHost(uint32_t arg) {

    return (__builtin_constant_p(arg) ? ((__uint32_t)((((__uint32_t)(arg) & 0xff000000) >> 24) | (((__uint32_t)(arg) & 0x00ff0000) >> 8) | (((__uint32_t)(arg) & 0x0000ff00) << 8) | (((__uint32_t)(arg) & 0x000000ff) << 24))) : _OSSwapInt32(arg));





}

static __inline__ uint64_t CFSwapInt64BigToHost(uint64_t arg) {

    return (__builtin_constant_p(arg) ? ((__uint64_t)((((__uint64_t)(arg) & 0xff00000000000000ULL) >> 56) | (((__uint64_t)(arg) & 0x00ff000000000000ULL) >> 40) | (((__uint64_t)(arg) & 0x0000ff0000000000ULL) >> 24) | (((__uint64_t)(arg) & 0x000000ff00000000ULL) >> 8) | (((__uint64_t)(arg) & 0x00000000ff000000ULL) << 8) | (((__uint64_t)(arg) & 0x0000000000ff0000ULL) << 24) | (((__uint64_t)(arg) & 0x000000000000ff00ULL) << 40) | (((__uint64_t)(arg) & 0x00000000000000ffULL) << 56))) : _OSSwapInt64(arg));





}

static __inline__ uint16_t CFSwapInt16HostToBig(uint16_t arg) {

    return (__builtin_constant_p(arg) ? ((__uint16_t)((((__uint16_t)(arg) & 0xff00) >> 8) | (((__uint16_t)(arg) & 0x00ff) << 8))) : _OSSwapInt16(arg));





}

static __inline__ uint32_t CFSwapInt32HostToBig(uint32_t arg) {

    return (__builtin_constant_p(arg) ? ((__uint32_t)((((__uint32_t)(arg) & 0xff000000) >> 24) | (((__uint32_t)(arg) & 0x00ff0000) >> 8) | (((__uint32_t)(arg) & 0x0000ff00) << 8) | (((__uint32_t)(arg) & 0x000000ff) << 24))) : _OSSwapInt32(arg));





}

static __inline__ uint64_t CFSwapInt64HostToBig(uint64_t arg) {

    return (__builtin_constant_p(arg) ? ((__uint64_t)((((__uint64_t)(arg) & 0xff00000000000000ULL) >> 56) | (((__uint64_t)(arg) & 0x00ff000000000000ULL) >> 40) | (((__uint64_t)(arg) & 0x0000ff0000000000ULL) >> 24) | (((__uint64_t)(arg) & 0x000000ff00000000ULL) >> 8) | (((__uint64_t)(arg) & 0x00000000ff000000ULL) << 8) | (((__uint64_t)(arg) & 0x0000000000ff0000ULL) << 24) | (((__uint64_t)(arg) & 0x000000000000ff00ULL) << 40) | (((__uint64_t)(arg) & 0x00000000000000ffULL) << 56))) : _OSSwapInt64(arg));





}

static __inline__ uint16_t CFSwapInt16LittleToHost(uint16_t arg) {

    return ((uint16_t)(arg));





}

static __inline__ uint32_t CFSwapInt32LittleToHost(uint32_t arg) {

    return ((uint32_t)(arg));





}

static __inline__ uint64_t CFSwapInt64LittleToHost(uint64_t arg) {

    return ((uint64_t)(arg));





}

static __inline__ uint16_t CFSwapInt16HostToLittle(uint16_t arg) {

    return ((uint16_t)(arg));





}

static __inline__ uint32_t CFSwapInt32HostToLittle(uint32_t arg) {

    return ((uint32_t)(arg));





}

static __inline__ uint64_t CFSwapInt64HostToLittle(uint64_t arg) {

    return ((uint64_t)(arg));





}

typedef struct {uint32_t v;} CFSwappedFloat32;
typedef struct {uint64_t v;} CFSwappedFloat64;

static __inline__ CFSwappedFloat32 CFConvertFloat32HostToSwapped(Float32 arg) {
    union CFSwap {
 Float32 v;
 CFSwappedFloat32 sv;
    } result;
    result.v = arg;

    result.sv.v = CFSwapInt32(result.sv.v);

    return result.sv;
}

static __inline__ Float32 CFConvertFloat32SwappedToHost(CFSwappedFloat32 arg) {
    union CFSwap {
 Float32 v;
 CFSwappedFloat32 sv;
    } result;
    result.sv = arg;

    result.sv.v = CFSwapInt32(result.sv.v);

    return result.v;
}

static __inline__ CFSwappedFloat64 CFConvertFloat64HostToSwapped(Float64 arg) {
    union CFSwap {
 Float64 v;
 CFSwappedFloat64 sv;
    } result;
    result.v = arg;

    result.sv.v = CFSwapInt64(result.sv.v);

    return result.sv;
}

static __inline__ Float64 CFConvertFloat64SwappedToHost(CFSwappedFloat64 arg) {
    union CFSwap {
 Float64 v;
 CFSwappedFloat64 sv;
    } result;
    result.sv = arg;

    result.sv.v = CFSwapInt64(result.sv.v);

    return result.v;
}

static __inline__ CFSwappedFloat32 CFConvertFloatHostToSwapped(float arg) {
    union CFSwap {
 float v;
 CFSwappedFloat32 sv;
    } result;
    result.v = arg;

    result.sv.v = CFSwapInt32(result.sv.v);

    return result.sv;
}

static __inline__ float CFConvertFloatSwappedToHost(CFSwappedFloat32 arg) {
    union CFSwap {
 float v;
 CFSwappedFloat32 sv;
    } result;
    result.sv = arg;

    result.sv.v = CFSwapInt32(result.sv.v);

    return result.v;
}

static __inline__ CFSwappedFloat64 CFConvertDoubleHostToSwapped(double arg) {
    union CFSwap {
 double v;
 CFSwappedFloat64 sv;
    } result;
    result.v = arg;

    result.sv.v = CFSwapInt64(result.sv.v);

    return result.sv;
}

static __inline__ double CFConvertDoubleSwappedToHost(CFSwappedFloat64 arg) {
    union CFSwap {
 double v;
 CFSwappedFloat64 sv;
    } result;
    result.sv = arg;

    result.sv.v = CFSwapInt64(result.sv.v);

    return result.v;
}

}
# 45 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CoreFoundation.h" 2 3
# 1 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFCalendar.h" 1 3





#define __COREFOUNDATION_CFCALENDAR__ 1



# 1 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFDate.h" 1 3





#define __COREFOUNDATION_CFDATE__ 1



extern "C" {

typedef double CFTimeInterval;
typedef CFTimeInterval CFAbsoluteTime;



extern
CFAbsoluteTime CFAbsoluteTimeGetCurrent(void);

extern
const CFTimeInterval kCFAbsoluteTimeIntervalSince1970;
extern
const CFTimeInterval kCFAbsoluteTimeIntervalSince1904;

typedef const struct __CFDate * CFDateRef;

extern
CFTypeID CFDateGetTypeID(void);

extern
CFDateRef CFDateCreate(CFAllocatorRef allocator, CFAbsoluteTime at);

extern
CFAbsoluteTime CFDateGetAbsoluteTime(CFDateRef theDate);

extern
CFTimeInterval CFDateGetTimeIntervalSinceDate(CFDateRef theDate, CFDateRef otherDate);

extern
CFComparisonResult CFDateCompare(CFDateRef theDate, CFDateRef otherDate, void *context);

typedef const struct __CFTimeZone * CFTimeZoneRef;

typedef struct {
    SInt32 year;
    SInt8 month;
    SInt8 day;
    SInt8 hour;
    SInt8 minute;
    double second;
} CFGregorianDate;

typedef struct {
    SInt32 years;
    SInt32 months;
    SInt32 days;
    SInt32 hours;
    SInt32 minutes;
    double seconds;
} CFGregorianUnits;

enum {
    kCFGregorianUnitsYears = (1 << 0),
    kCFGregorianUnitsMonths = (1 << 1),
    kCFGregorianUnitsDays = (1 << 2),
    kCFGregorianUnitsHours = (1 << 3),
    kCFGregorianUnitsMinutes = (1 << 4),
    kCFGregorianUnitsSeconds = (1 << 5),
    kCFGregorianAllUnits = 0x00FFFFFF
};
typedef CFOptionFlags CFGregorianUnitFlags;

extern
Boolean CFGregorianDateIsValid(CFGregorianDate gdate, CFOptionFlags unitFlags);

extern
CFAbsoluteTime CFGregorianDateGetAbsoluteTime(CFGregorianDate gdate, CFTimeZoneRef tz);

extern
CFGregorianDate CFAbsoluteTimeGetGregorianDate(CFAbsoluteTime at, CFTimeZoneRef tz);

extern
CFAbsoluteTime CFAbsoluteTimeAddGregorianUnits(CFAbsoluteTime at, CFTimeZoneRef tz, CFGregorianUnits units);

extern
CFGregorianUnits CFAbsoluteTimeGetDifferenceAsGregorianUnits(CFAbsoluteTime at1, CFAbsoluteTime at2, CFTimeZoneRef tz, CFOptionFlags unitFlags);

extern
SInt32 CFAbsoluteTimeGetDayOfWeek(CFAbsoluteTime at, CFTimeZoneRef tz);

extern
SInt32 CFAbsoluteTimeGetDayOfYear(CFAbsoluteTime at, CFTimeZoneRef tz);

extern
SInt32 CFAbsoluteTimeGetWeekOfYear(CFAbsoluteTime at, CFTimeZoneRef tz);

}
# 11 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFCalendar.h" 2 3
# 1 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFTimeZone.h" 1 3





#define __COREFOUNDATION_CFTIMEZONE__ 1
# 15 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFTimeZone.h" 3
extern "C" {

extern
CFTypeID CFTimeZoneGetTypeID(void);

extern
CFTimeZoneRef CFTimeZoneCopySystem(void);

extern
void CFTimeZoneResetSystem(void);

extern
CFTimeZoneRef CFTimeZoneCopyDefault(void);

extern
void CFTimeZoneSetDefault(CFTimeZoneRef tz);

extern
CFArrayRef CFTimeZoneCopyKnownNames(void);

extern
CFDictionaryRef CFTimeZoneCopyAbbreviationDictionary(void);

extern
void CFTimeZoneSetAbbreviationDictionary(CFDictionaryRef dict);

extern
CFTimeZoneRef CFTimeZoneCreate(CFAllocatorRef allocator, CFStringRef name, CFDataRef data);

extern
CFTimeZoneRef CFTimeZoneCreateWithTimeIntervalFromGMT(CFAllocatorRef allocator, CFTimeInterval ti);

extern
CFTimeZoneRef CFTimeZoneCreateWithName(CFAllocatorRef allocator, CFStringRef name, Boolean tryAbbrev);

extern
CFStringRef CFTimeZoneGetName(CFTimeZoneRef tz);

extern
CFDataRef CFTimeZoneGetData(CFTimeZoneRef tz);

extern
CFTimeInterval CFTimeZoneGetSecondsFromGMT(CFTimeZoneRef tz, CFAbsoluteTime at);

extern
CFStringRef CFTimeZoneCopyAbbreviation(CFTimeZoneRef tz, CFAbsoluteTime at);

extern
Boolean CFTimeZoneIsDaylightSavingTime(CFTimeZoneRef tz, CFAbsoluteTime at);

extern
CFTimeInterval CFTimeZoneGetDaylightSavingTimeOffset(CFTimeZoneRef tz, CFAbsoluteTime at) ;

extern
CFAbsoluteTime CFTimeZoneGetNextDaylightSavingTimeTransition(CFTimeZoneRef tz, CFAbsoluteTime at) ;


enum {
 kCFTimeZoneNameStyleStandard,
 kCFTimeZoneNameStyleShortStandard,
 kCFTimeZoneNameStyleDaylightSaving,
 kCFTimeZoneNameStyleShortDaylightSaving
};
typedef CFIndex CFTimeZoneNameStyle;

extern
CFStringRef CFTimeZoneCopyLocalizedName(CFTimeZoneRef tz, CFTimeZoneNameStyle style, CFLocaleRef locale) ;


extern
const CFStringRef kCFTimeZoneSystemTimeZoneDidChangeNotification ;

}
# 12 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFCalendar.h" 2 3



extern "C" {

typedef struct __CFCalendar * CFCalendarRef;

extern
CFTypeID CFCalendarGetTypeID(void) ;

extern
CFCalendarRef CFCalendarCopyCurrent(void) ;

extern
CFCalendarRef CFCalendarCreateWithIdentifier(CFAllocatorRef allocator, CFStringRef identifier) ;



extern
CFStringRef CFCalendarGetIdentifier(CFCalendarRef calendar) ;


extern
CFLocaleRef CFCalendarCopyLocale(CFCalendarRef calendar) ;

extern
void CFCalendarSetLocale(CFCalendarRef calendar, CFLocaleRef locale) ;

extern
CFTimeZoneRef CFCalendarCopyTimeZone(CFCalendarRef calendar) ;

extern
void CFCalendarSetTimeZone(CFCalendarRef calendar, CFTimeZoneRef tz) ;

extern
CFIndex CFCalendarGetFirstWeekday(CFCalendarRef calendar) ;

extern
void CFCalendarSetFirstWeekday(CFCalendarRef calendar, CFIndex wkdy) ;

extern
CFIndex CFCalendarGetMinimumDaysInFirstWeek(CFCalendarRef calendar) ;

extern
void CFCalendarSetMinimumDaysInFirstWeek(CFCalendarRef calendar, CFIndex mwd) ;


enum {
 kCFCalendarUnitEra = (1 << 1),
 kCFCalendarUnitYear = (1 << 2),
 kCFCalendarUnitMonth = (1 << 3),
 kCFCalendarUnitDay = (1 << 4),
 kCFCalendarUnitHour = (1 << 5),
 kCFCalendarUnitMinute = (1 << 6),
 kCFCalendarUnitSecond = (1 << 7),
 kCFCalendarUnitWeek = (1 << 8),
 kCFCalendarUnitWeekday = (1 << 9),
 kCFCalendarUnitWeekdayOrdinal = (1 << 10)
};
typedef CFOptionFlags CFCalendarUnit;

extern
CFRange CFCalendarGetMinimumRangeOfUnit(CFCalendarRef calendar, CFCalendarUnit unit) ;

extern
CFRange CFCalendarGetMaximumRangeOfUnit(CFCalendarRef calendar, CFCalendarUnit unit) ;

extern
CFRange CFCalendarGetRangeOfUnit(CFCalendarRef calendar, CFCalendarUnit smallerUnit, CFCalendarUnit biggerUnit, CFAbsoluteTime at) ;

extern
CFIndex CFCalendarGetOrdinalityOfUnit(CFCalendarRef calendar, CFCalendarUnit smallerUnit, CFCalendarUnit biggerUnit, CFAbsoluteTime at) ;

extern
Boolean CFCalendarGetTimeRangeOfUnit(CFCalendarRef calendar, CFCalendarUnit unit, CFAbsoluteTime at, CFAbsoluteTime *startp, CFTimeInterval *tip) ;

extern
Boolean CFCalendarComposeAbsoluteTime(CFCalendarRef calendar, CFAbsoluteTime *at, const char *componentDesc, ...) ;

extern
Boolean CFCalendarDecomposeAbsoluteTime(CFCalendarRef calendar, CFAbsoluteTime at, const char *componentDesc, ...) ;


enum {
    kCFCalendarComponentsWrap = (1 << 0)
};

extern
Boolean CFCalendarAddComponents(CFCalendarRef calendar, CFAbsoluteTime *at, CFOptionFlags options, const char *componentDesc, ...) ;

extern
Boolean CFCalendarGetComponentDifference(CFCalendarRef calendar, CFAbsoluteTime startingAT, CFAbsoluteTime resultAT, CFOptionFlags options, const char *componentDesc, ...) ;


}
# 46 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CoreFoundation.h" 2 3



# 1 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFDateFormatter.h" 1 3





#define __COREFOUNDATION_CFDATEFORMATTER__ 1







extern "C" {

typedef struct __CFDateFormatter *CFDateFormatterRef;



extern
CFTypeID CFDateFormatterGetTypeID(void) ;

enum {
 kCFDateFormatterNoStyle = 0,
 kCFDateFormatterShortStyle = 1,
 kCFDateFormatterMediumStyle = 2,
 kCFDateFormatterLongStyle = 3,
 kCFDateFormatterFullStyle = 4
};
typedef CFIndex CFDateFormatterStyle;
# 44 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFDateFormatter.h" 3
extern
CFDateFormatterRef CFDateFormatterCreate(CFAllocatorRef allocator, CFLocaleRef locale, CFDateFormatterStyle dateStyle, CFDateFormatterStyle timeStyle) ;



extern
CFLocaleRef CFDateFormatterGetLocale(CFDateFormatterRef formatter) ;

extern
CFDateFormatterStyle CFDateFormatterGetDateStyle(CFDateFormatterRef formatter) ;

extern
CFDateFormatterStyle CFDateFormatterGetTimeStyle(CFDateFormatterRef formatter) ;


extern
CFStringRef CFDateFormatterGetFormat(CFDateFormatterRef formatter) ;

extern
void CFDateFormatterSetFormat(CFDateFormatterRef formatter, CFStringRef formatString) ;







extern
CFStringRef CFDateFormatterCreateStringWithDate(CFAllocatorRef allocator, CFDateFormatterRef formatter, CFDateRef date) ;

extern
CFStringRef CFDateFormatterCreateStringWithAbsoluteTime(CFAllocatorRef allocator, CFDateFormatterRef formatter, CFAbsoluteTime at) ;




extern
CFDateRef CFDateFormatterCreateDateFromString(CFAllocatorRef allocator, CFDateFormatterRef formatter, CFStringRef string, CFRange *rangep) ;

extern
Boolean CFDateFormatterGetAbsoluteTimeFromString(CFDateFormatterRef formatter, CFStringRef string, CFRange *rangep, CFAbsoluteTime *atp) ;
# 94 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFDateFormatter.h" 3
extern
void CFDateFormatterSetProperty(CFDateFormatterRef formatter, CFStringRef key, CFTypeRef value) ;

extern
CFTypeRef CFDateFormatterCopyProperty(CFDateFormatterRef formatter, CFStringRef key) ;



extern const CFStringRef kCFDateFormatterIsLenient ;
extern const CFStringRef kCFDateFormatterTimeZone ;
extern const CFStringRef kCFDateFormatterCalendarName ;
extern const CFStringRef kCFDateFormatterDefaultFormat ;
extern const CFStringRef kCFDateFormatterTwoDigitStartDate ;
extern const CFStringRef kCFDateFormatterDefaultDate ;
extern const CFStringRef kCFDateFormatterCalendar ;
extern const CFStringRef kCFDateFormatterEraSymbols ;
extern const CFStringRef kCFDateFormatterMonthSymbols ;
extern const CFStringRef kCFDateFormatterShortMonthSymbols ;
extern const CFStringRef kCFDateFormatterWeekdaySymbols ;
extern const CFStringRef kCFDateFormatterShortWeekdaySymbols ;
extern const CFStringRef kCFDateFormatterAMSymbol ;
extern const CFStringRef kCFDateFormatterPMSymbol ;
extern const CFStringRef kCFDateFormatterLongEraSymbols ;
extern const CFStringRef kCFDateFormatterVeryShortMonthSymbols ;
extern const CFStringRef kCFDateFormatterStandaloneMonthSymbols ;
extern const CFStringRef kCFDateFormatterShortStandaloneMonthSymbols ;
extern const CFStringRef kCFDateFormatterVeryShortStandaloneMonthSymbols ;
extern const CFStringRef kCFDateFormatterVeryShortWeekdaySymbols ;
extern const CFStringRef kCFDateFormatterStandaloneWeekdaySymbols ;
extern const CFStringRef kCFDateFormatterShortStandaloneWeekdaySymbols ;
extern const CFStringRef kCFDateFormatterVeryShortStandaloneWeekdaySymbols ;
extern const CFStringRef kCFDateFormatterQuarterSymbols ;
extern const CFStringRef kCFDateFormatterShortQuarterSymbols ;
extern const CFStringRef kCFDateFormatterStandaloneQuarterSymbols ;
extern const CFStringRef kCFDateFormatterShortStandaloneQuarterSymbols ;
extern const CFStringRef kCFDateFormatterGregorianStartDate ;
# 140 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFDateFormatter.h" 3
}
# 50 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CoreFoundation.h" 2 3


# 1 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFFileDescriptor.h" 1 3





#define __COREFOUNDATION_CFFILEDESCRIPTOR__ 1

# 1 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFRunLoop.h" 1 3





#define __COREFOUNDATION_CFRUNLOOP__ 1
# 16 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFRunLoop.h" 3
extern "C" {

typedef struct __CFRunLoop * CFRunLoopRef;

typedef struct __CFRunLoopSource * CFRunLoopSourceRef;

typedef struct __CFRunLoopObserver * CFRunLoopObserverRef;

typedef struct __CFRunLoopTimer * CFRunLoopTimerRef;


enum {
    kCFRunLoopRunFinished = 1,
    kCFRunLoopRunStopped = 2,
    kCFRunLoopRunTimedOut = 3,
    kCFRunLoopRunHandledSource = 4
};


enum {
    kCFRunLoopEntry = (1 << 0),
    kCFRunLoopBeforeTimers = (1 << 1),
    kCFRunLoopBeforeSources = (1 << 2),
    kCFRunLoopBeforeWaiting = (1 << 5),
    kCFRunLoopAfterWaiting = (1 << 6),
    kCFRunLoopExit = (1 << 7),
    kCFRunLoopAllActivities = 0x0FFFFFFFU
};
typedef CFOptionFlags CFRunLoopActivity;

extern const CFStringRef kCFRunLoopDefaultMode;
extern const CFStringRef kCFRunLoopCommonModes;

extern CFTypeID CFRunLoopGetTypeID(void);

extern CFRunLoopRef CFRunLoopGetCurrent(void);
extern CFRunLoopRef CFRunLoopGetMain(void) ;

extern CFStringRef CFRunLoopCopyCurrentMode(CFRunLoopRef rl);

extern CFArrayRef CFRunLoopCopyAllModes(CFRunLoopRef rl);

extern void CFRunLoopAddCommonMode(CFRunLoopRef rl, CFStringRef mode);

extern CFAbsoluteTime CFRunLoopGetNextTimerFireDate(CFRunLoopRef rl, CFStringRef mode);

extern void CFRunLoopRun(void);
extern SInt32 CFRunLoopRunInMode(CFStringRef mode, CFTimeInterval seconds, Boolean returnAfterSourceHandled);
extern Boolean CFRunLoopIsWaiting(CFRunLoopRef rl);
extern void CFRunLoopWakeUp(CFRunLoopRef rl);
extern void CFRunLoopStop(CFRunLoopRef rl);

extern Boolean CFRunLoopContainsSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFStringRef mode);
extern void CFRunLoopAddSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFStringRef mode);
extern void CFRunLoopRemoveSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFStringRef mode);

extern Boolean CFRunLoopContainsObserver(CFRunLoopRef rl, CFRunLoopObserverRef observer, CFStringRef mode);
extern void CFRunLoopAddObserver(CFRunLoopRef rl, CFRunLoopObserverRef observer, CFStringRef mode);
extern void CFRunLoopRemoveObserver(CFRunLoopRef rl, CFRunLoopObserverRef observer, CFStringRef mode);

extern Boolean CFRunLoopContainsTimer(CFRunLoopRef rl, CFRunLoopTimerRef timer, CFStringRef mode);
extern void CFRunLoopAddTimer(CFRunLoopRef rl, CFRunLoopTimerRef timer, CFStringRef mode);
extern void CFRunLoopRemoveTimer(CFRunLoopRef rl, CFRunLoopTimerRef timer, CFStringRef mode);

typedef struct {
    CFIndex version;
    void * info;
    const void *(*retain)(const void *info);
    void (*release)(const void *info);
    CFStringRef (*copyDescription)(const void *info);
    Boolean (*equal)(const void *info1, const void *info2);
    CFHashCode (*hash)(const void *info);
    void (*schedule)(void *info, CFRunLoopRef rl, CFStringRef mode);
    void (*cancel)(void *info, CFRunLoopRef rl, CFStringRef mode);
    void (*perform)(void *info);
} CFRunLoopSourceContext;

typedef struct {
    CFIndex version;
    void * info;
    const void *(*retain)(const void *info);
    void (*release)(const void *info);
    CFStringRef (*copyDescription)(const void *info);
    Boolean (*equal)(const void *info1, const void *info2);
    CFHashCode (*hash)(const void *info);

    mach_port_t (*getPort)(void *info);
    void * (*perform)(void *msg, CFIndex size, CFAllocatorRef allocator, void *info);




} CFRunLoopSourceContext1;

extern CFTypeID CFRunLoopSourceGetTypeID(void);

extern CFRunLoopSourceRef CFRunLoopSourceCreate(CFAllocatorRef allocator, CFIndex order, CFRunLoopSourceContext *context);

extern CFIndex CFRunLoopSourceGetOrder(CFRunLoopSourceRef source);
extern void CFRunLoopSourceInvalidate(CFRunLoopSourceRef source);
extern Boolean CFRunLoopSourceIsValid(CFRunLoopSourceRef source);
extern void CFRunLoopSourceGetContext(CFRunLoopSourceRef source, CFRunLoopSourceContext *context);
extern void CFRunLoopSourceSignal(CFRunLoopSourceRef source);

typedef struct {
    CFIndex version;
    void * info;
    const void *(*retain)(const void *info);
    void (*release)(const void *info);
    CFStringRef (*copyDescription)(const void *info);
} CFRunLoopObserverContext;

typedef void (*CFRunLoopObserverCallBack)(CFRunLoopObserverRef observer, CFRunLoopActivity activity, void *info);

extern CFTypeID CFRunLoopObserverGetTypeID(void);

extern CFRunLoopObserverRef CFRunLoopObserverCreate(CFAllocatorRef allocator, CFOptionFlags activities, Boolean repeats, CFIndex order, CFRunLoopObserverCallBack callout, CFRunLoopObserverContext *context);

extern CFOptionFlags CFRunLoopObserverGetActivities(CFRunLoopObserverRef observer);
extern Boolean CFRunLoopObserverDoesRepeat(CFRunLoopObserverRef observer);
extern CFIndex CFRunLoopObserverGetOrder(CFRunLoopObserverRef observer);
extern void CFRunLoopObserverInvalidate(CFRunLoopObserverRef observer);
extern Boolean CFRunLoopObserverIsValid(CFRunLoopObserverRef observer);
extern void CFRunLoopObserverGetContext(CFRunLoopObserverRef observer, CFRunLoopObserverContext *context);

typedef struct {
    CFIndex version;
    void * info;
    const void *(*retain)(const void *info);
    void (*release)(const void *info);
    CFStringRef (*copyDescription)(const void *info);
} CFRunLoopTimerContext;

typedef void (*CFRunLoopTimerCallBack)(CFRunLoopTimerRef timer, void *info);

extern CFTypeID CFRunLoopTimerGetTypeID(void);

extern CFRunLoopTimerRef CFRunLoopTimerCreate(CFAllocatorRef allocator, CFAbsoluteTime fireDate, CFTimeInterval interval, CFOptionFlags flags, CFIndex order, CFRunLoopTimerCallBack callout, CFRunLoopTimerContext *context);
extern CFAbsoluteTime CFRunLoopTimerGetNextFireDate(CFRunLoopTimerRef timer);
extern void CFRunLoopTimerSetNextFireDate(CFRunLoopTimerRef timer, CFAbsoluteTime fireDate);
extern CFTimeInterval CFRunLoopTimerGetInterval(CFRunLoopTimerRef timer);
extern Boolean CFRunLoopTimerDoesRepeat(CFRunLoopTimerRef timer);
extern CFIndex CFRunLoopTimerGetOrder(CFRunLoopTimerRef timer);
extern void CFRunLoopTimerInvalidate(CFRunLoopTimerRef timer);
extern Boolean CFRunLoopTimerIsValid(CFRunLoopTimerRef timer);
extern void CFRunLoopTimerGetContext(CFRunLoopTimerRef timer, CFRunLoopTimerContext *context);

}
# 9 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFFileDescriptor.h" 2 3





extern "C" {

typedef int CFFileDescriptorNativeDescriptor;

typedef struct __CFFileDescriptor * CFFileDescriptorRef;


enum {
    kCFFileDescriptorReadCallBack = 1 << 0,
    kCFFileDescriptorWriteCallBack = 1 << 1
};

typedef void (*CFFileDescriptorCallBack)(CFFileDescriptorRef f, CFOptionFlags callBackTypes, void *info);

typedef struct {
    CFIndex version;
    void * info;
    void * (*retain)(void *info);
    void (*release)(void *info);
    CFStringRef (*copyDescription)(void *info);
} CFFileDescriptorContext;

extern CFTypeID CFFileDescriptorGetTypeID(void);

extern CFFileDescriptorRef CFFileDescriptorCreate(CFAllocatorRef allocator, CFFileDescriptorNativeDescriptor fd, Boolean closeOnInvalidate, CFFileDescriptorCallBack callout, const CFFileDescriptorContext *context);

extern CFFileDescriptorNativeDescriptor CFFileDescriptorGetNativeDescriptor(CFFileDescriptorRef f);

extern void CFFileDescriptorGetContext(CFFileDescriptorRef f, CFFileDescriptorContext *context);

extern void CFFileDescriptorEnableCallBacks(CFFileDescriptorRef f, CFOptionFlags callBackTypes);
extern void CFFileDescriptorDisableCallBacks(CFFileDescriptorRef f, CFOptionFlags callBackTypes);

extern void CFFileDescriptorInvalidate(CFFileDescriptorRef f);
extern Boolean CFFileDescriptorIsValid(CFFileDescriptorRef f);

extern CFRunLoopSourceRef CFFileDescriptorCreateRunLoopSource(CFAllocatorRef allocator, CFFileDescriptorRef f, CFIndex order);


}
# 53 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CoreFoundation.h" 2 3

# 1 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFMachPort.h" 1 3





#define __COREFOUNDATION_CFMACHPORT__ 1




extern "C" {

typedef struct __CFMachPort * CFMachPortRef;

typedef struct {
    CFIndex version;
    void * info;
    const void *(*retain)(const void *info);
    void (*release)(const void *info);
    CFStringRef (*copyDescription)(const void *info);
} CFMachPortContext;

typedef void (*CFMachPortCallBack)(CFMachPortRef port, void *msg, CFIndex size, void *info);
typedef void (*CFMachPortInvalidationCallBack)(CFMachPortRef port, void *info);

extern CFTypeID CFMachPortGetTypeID(void);

extern CFMachPortRef CFMachPortCreate(CFAllocatorRef allocator, CFMachPortCallBack callout, CFMachPortContext *context, Boolean *shouldFreeInfo);
extern CFMachPortRef CFMachPortCreateWithPort(CFAllocatorRef allocator, mach_port_t portNum, CFMachPortCallBack callout, CFMachPortContext *context, Boolean *shouldFreeInfo);

extern mach_port_t CFMachPortGetPort(CFMachPortRef port);
extern void CFMachPortGetContext(CFMachPortRef port, CFMachPortContext *context);
extern void CFMachPortInvalidate(CFMachPortRef port);
extern Boolean CFMachPortIsValid(CFMachPortRef port);
extern CFMachPortInvalidationCallBack CFMachPortGetInvalidationCallBack(CFMachPortRef port);
extern void CFMachPortSetInvalidationCallBack(CFMachPortRef port, CFMachPortInvalidationCallBack callout);

extern CFRunLoopSourceRef CFMachPortCreateRunLoopSource(CFAllocatorRef allocator, CFMachPortRef port, CFIndex order);

}
# 55 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CoreFoundation.h" 2 3
# 1 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFMessagePort.h" 1 3





#define __COREFOUNDATION_CFMESSAGEPORT__ 1





extern "C" {

typedef struct __CFMessagePort * CFMessagePortRef;

enum {
    kCFMessagePortSuccess = 0,
    kCFMessagePortSendTimeout = -1,
    kCFMessagePortReceiveTimeout = -2,
    kCFMessagePortIsInvalid = -3,
    kCFMessagePortTransportError = -4
};

typedef struct {
    CFIndex version;
    void * info;
    const void *(*retain)(const void *info);
    void (*release)(const void *info);
    CFStringRef (*copyDescription)(const void *info);
} CFMessagePortContext;

typedef CFDataRef (*CFMessagePortCallBack)(CFMessagePortRef local, SInt32 msgid, CFDataRef data, void *info);

typedef void (*CFMessagePortInvalidationCallBack)(CFMessagePortRef ms, void *info);

extern CFTypeID CFMessagePortGetTypeID(void);

extern CFMessagePortRef CFMessagePortCreateLocal(CFAllocatorRef allocator, CFStringRef name, CFMessagePortCallBack callout, CFMessagePortContext *context, Boolean *shouldFreeInfo);
extern CFMessagePortRef CFMessagePortCreateRemote(CFAllocatorRef allocator, CFStringRef name);

extern Boolean CFMessagePortIsRemote(CFMessagePortRef ms);
extern CFStringRef CFMessagePortGetName(CFMessagePortRef ms);
extern Boolean CFMessagePortSetName(CFMessagePortRef ms, CFStringRef newName);
extern void CFMessagePortGetContext(CFMessagePortRef ms, CFMessagePortContext *context);
extern void CFMessagePortInvalidate(CFMessagePortRef ms);
extern Boolean CFMessagePortIsValid(CFMessagePortRef ms);
extern CFMessagePortInvalidationCallBack CFMessagePortGetInvalidationCallBack(CFMessagePortRef ms);
extern void CFMessagePortSetInvalidationCallBack(CFMessagePortRef ms, CFMessagePortInvalidationCallBack callout);


extern SInt32 CFMessagePortSendRequest(CFMessagePortRef remote, SInt32 msgid, CFDataRef data, CFTimeInterval sendTimeout, CFTimeInterval rcvTimeout, CFStringRef replyMode, CFDataRef *returnData);

extern CFRunLoopSourceRef CFMessagePortCreateRunLoopSource(CFAllocatorRef allocator, CFMessagePortRef local, CFIndex order);

}
# 56 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CoreFoundation.h" 2 3
# 1 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFNumber.h" 1 3





#define __COREFOUNDATION_CFNUMBER__ 1



extern "C" {

typedef const struct __CFBoolean * CFBooleanRef;

extern
const CFBooleanRef kCFBooleanTrue;
extern
const CFBooleanRef kCFBooleanFalse;

extern
CFTypeID CFBooleanGetTypeID(void);

extern
Boolean CFBooleanGetValue(CFBooleanRef boolean);

enum {

    kCFNumberSInt8Type = 1,
    kCFNumberSInt16Type = 2,
    kCFNumberSInt32Type = 3,
    kCFNumberSInt64Type = 4,
    kCFNumberFloat32Type = 5,
    kCFNumberFloat64Type = 6,

    kCFNumberCharType = 7,
    kCFNumberShortType = 8,
    kCFNumberIntType = 9,
    kCFNumberLongType = 10,
    kCFNumberLongLongType = 11,
    kCFNumberFloatType = 12,
    kCFNumberDoubleType = 13,

    kCFNumberCFIndexType = 14,

    kCFNumberNSIntegerType = 15,
    kCFNumberCGFloatType = 16,
    kCFNumberMaxType = 16



};
typedef CFIndex CFNumberType;

typedef const struct __CFNumber * CFNumberRef;

extern
const CFNumberRef kCFNumberPositiveInfinity;
extern
const CFNumberRef kCFNumberNegativeInfinity;
extern
const CFNumberRef kCFNumberNaN;

extern
CFTypeID CFNumberGetTypeID(void);
# 72 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFNumber.h" 3
extern
CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr);





extern
CFNumberType CFNumberGetType(CFNumberRef number);




extern
CFIndex CFNumberGetByteSize(CFNumberRef number);





extern
Boolean CFNumberIsFloatType(CFNumberRef number);
# 103 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFNumber.h" 3
extern
Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr);
# 121 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFNumber.h" 3
extern
CFComparisonResult CFNumberCompare(CFNumberRef number, CFNumberRef otherNumber, void *context);

}
# 57 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CoreFoundation.h" 2 3
# 1 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFNumberFormatter.h" 1 3





#define __COREFOUNDATION_CFNUMBERFORMATTER__ 1







extern "C" {

typedef struct __CFNumberFormatter *CFNumberFormatterRef;



extern
CFTypeID CFNumberFormatterGetTypeID(void) ;

enum {
 kCFNumberFormatterNoStyle = 0,
 kCFNumberFormatterDecimalStyle = 1,
 kCFNumberFormatterCurrencyStyle = 2,
 kCFNumberFormatterPercentStyle = 3,
 kCFNumberFormatterScientificStyle = 4,
 kCFNumberFormatterSpellOutStyle = 5
};
typedef CFIndex CFNumberFormatterStyle;


extern
CFNumberFormatterRef CFNumberFormatterCreate(CFAllocatorRef allocator, CFLocaleRef locale, CFNumberFormatterStyle style) ;



extern
CFLocaleRef CFNumberFormatterGetLocale(CFNumberFormatterRef formatter) ;

extern
CFNumberFormatterStyle CFNumberFormatterGetStyle(CFNumberFormatterRef formatter) ;


extern
CFStringRef CFNumberFormatterGetFormat(CFNumberFormatterRef formatter) ;

extern
void CFNumberFormatterSetFormat(CFNumberFormatterRef formatter, CFStringRef formatString) ;
# 59 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFNumberFormatter.h" 3
extern
CFStringRef CFNumberFormatterCreateStringWithNumber(CFAllocatorRef allocator, CFNumberFormatterRef formatter, CFNumberRef number) ;

extern
CFStringRef CFNumberFormatterCreateStringWithValue(CFAllocatorRef allocator, CFNumberFormatterRef formatter, CFNumberType numberType, const void *valuePtr) ;




enum {
    kCFNumberFormatterParseIntegersOnly = 1
};
typedef CFOptionFlags CFNumberFormatterOptionFlags;

extern
CFNumberRef CFNumberFormatterCreateNumberFromString(CFAllocatorRef allocator, CFNumberFormatterRef formatter, CFStringRef string, CFRange *rangep, CFOptionFlags options) ;

extern
Boolean CFNumberFormatterGetValueFromString(CFNumberFormatterRef formatter, CFStringRef string, CFRange *rangep, CFNumberType numberType, void *valuePtr) ;
# 89 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFNumberFormatter.h" 3
extern
void CFNumberFormatterSetProperty(CFNumberFormatterRef formatter, CFStringRef key, CFTypeRef value) ;

extern
CFTypeRef CFNumberFormatterCopyProperty(CFNumberFormatterRef formatter, CFStringRef key) ;



extern const CFStringRef kCFNumberFormatterCurrencyCode ;
extern const CFStringRef kCFNumberFormatterDecimalSeparator ;
extern const CFStringRef kCFNumberFormatterCurrencyDecimalSeparator ;
extern const CFStringRef kCFNumberFormatterAlwaysShowDecimalSeparator ;
extern const CFStringRef kCFNumberFormatterGroupingSeparator ;
extern const CFStringRef kCFNumberFormatterUseGroupingSeparator ;
extern const CFStringRef kCFNumberFormatterPercentSymbol ;
extern const CFStringRef kCFNumberFormatterZeroSymbol ;
extern const CFStringRef kCFNumberFormatterNaNSymbol ;
extern const CFStringRef kCFNumberFormatterInfinitySymbol ;
extern const CFStringRef kCFNumberFormatterMinusSign ;
extern const CFStringRef kCFNumberFormatterPlusSign ;
extern const CFStringRef kCFNumberFormatterCurrencySymbol ;
extern const CFStringRef kCFNumberFormatterExponentSymbol ;
extern const CFStringRef kCFNumberFormatterMinIntegerDigits ;
extern const CFStringRef kCFNumberFormatterMaxIntegerDigits ;
extern const CFStringRef kCFNumberFormatterMinFractionDigits ;
extern const CFStringRef kCFNumberFormatterMaxFractionDigits ;
extern const CFStringRef kCFNumberFormatterGroupingSize ;
extern const CFStringRef kCFNumberFormatterSecondaryGroupingSize ;
extern const CFStringRef kCFNumberFormatterRoundingMode ;
extern const CFStringRef kCFNumberFormatterRoundingIncrement ;
extern const CFStringRef kCFNumberFormatterFormatWidth ;
extern const CFStringRef kCFNumberFormatterPaddingPosition ;
extern const CFStringRef kCFNumberFormatterPaddingCharacter ;
extern const CFStringRef kCFNumberFormatterDefaultFormat ;
extern const CFStringRef kCFNumberFormatterMultiplier ;
extern const CFStringRef kCFNumberFormatterPositivePrefix ;
extern const CFStringRef kCFNumberFormatterPositiveSuffix ;
extern const CFStringRef kCFNumberFormatterNegativePrefix ;
extern const CFStringRef kCFNumberFormatterNegativeSuffix ;
extern const CFStringRef kCFNumberFormatterPerMillSymbol ;
extern const CFStringRef kCFNumberFormatterInternationalCurrencySymbol ;
extern const CFStringRef kCFNumberFormatterCurrencyGroupingSeparator ;
extern const CFStringRef kCFNumberFormatterIsLenient ;
extern const CFStringRef kCFNumberFormatterUseSignificantDigits ;
extern const CFStringRef kCFNumberFormatterMinSignificantDigits ;
extern const CFStringRef kCFNumberFormatterMaxSignificantDigits ;

enum {
    kCFNumberFormatterRoundCeiling = 0,
    kCFNumberFormatterRoundFloor = 1,
    kCFNumberFormatterRoundDown = 2,
    kCFNumberFormatterRoundUp = 3,
    kCFNumberFormatterRoundHalfEven = 4,
    kCFNumberFormatterRoundHalfDown = 5,
    kCFNumberFormatterRoundHalfUp = 6
};
typedef CFIndex CFNumberFormatterRoundingMode;

enum {
    kCFNumberFormatterPadBeforePrefix = 0,
    kCFNumberFormatterPadAfterPrefix = 1,
    kCFNumberFormatterPadBeforeSuffix = 2,
    kCFNumberFormatterPadAfterSuffix = 3
};
typedef CFIndex CFNumberFormatterPadPosition;


extern
Boolean CFNumberFormatterGetDecimalInfoForCurrencyCode(CFStringRef currencyCode, int32_t *defaultFractionDigits, double *roundingIncrement) ;






}
# 58 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CoreFoundation.h" 2 3
# 1 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFPlugIn.h" 1 3





#define __COREFOUNDATION_CFPLUGIN__ 1


#define COREFOUNDATION_CFPLUGINCOM_SEPARATE 1







# 1 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFUUID.h" 1 3





#define __COREFOUNDATION_CFUUID__ 1




extern "C" {

typedef const struct __CFUUID * CFUUIDRef;

typedef struct {
    UInt8 byte0;
    UInt8 byte1;
    UInt8 byte2;
    UInt8 byte3;
    UInt8 byte4;
    UInt8 byte5;
    UInt8 byte6;
    UInt8 byte7;
    UInt8 byte8;
    UInt8 byte9;
    UInt8 byte10;
    UInt8 byte11;
    UInt8 byte12;
    UInt8 byte13;
    UInt8 byte14;
    UInt8 byte15;
} CFUUIDBytes;






extern
CFTypeID CFUUIDGetTypeID(void);

extern
CFUUIDRef CFUUIDCreate(CFAllocatorRef alloc);


extern
CFUUIDRef CFUUIDCreateWithBytes(CFAllocatorRef alloc, UInt8 byte0, UInt8 byte1, UInt8 byte2, UInt8 byte3, UInt8 byte4, UInt8 byte5, UInt8 byte6, UInt8 byte7, UInt8 byte8, UInt8 byte9, UInt8 byte10, UInt8 byte11, UInt8 byte12, UInt8 byte13, UInt8 byte14, UInt8 byte15);


extern
CFUUIDRef CFUUIDCreateFromString(CFAllocatorRef alloc, CFStringRef uuidStr);


extern
CFStringRef CFUUIDCreateString(CFAllocatorRef alloc, CFUUIDRef uuid);


extern
CFUUIDRef CFUUIDGetConstantUUIDWithBytes(CFAllocatorRef alloc, UInt8 byte0, UInt8 byte1, UInt8 byte2, UInt8 byte3, UInt8 byte4, UInt8 byte5, UInt8 byte6, UInt8 byte7, UInt8 byte8, UInt8 byte9, UInt8 byte10, UInt8 byte11, UInt8 byte12, UInt8 byte13, UInt8 byte14, UInt8 byte15);


extern
CFUUIDBytes CFUUIDGetUUIDBytes(CFUUIDRef uuid);

extern
CFUUIDRef CFUUIDCreateFromUUIDBytes(CFAllocatorRef alloc, CFUUIDBytes bytes);

}
# 18 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFPlugIn.h" 2 3

extern "C" {



extern
const CFStringRef kCFPlugInDynamicRegistrationKey;
extern
const CFStringRef kCFPlugInDynamicRegisterFunctionKey;
extern
const CFStringRef kCFPlugInUnloadFunctionKey;
extern
const CFStringRef kCFPlugInFactoriesKey;
extern
const CFStringRef kCFPlugInTypesKey;




typedef void (*CFPlugInDynamicRegisterFunction)(CFPlugInRef plugIn);
typedef void (*CFPlugInUnloadFunction)(CFPlugInRef plugIn);
typedef void *(*CFPlugInFactoryFunction)(CFAllocatorRef allocator, CFUUIDRef typeUUID);



extern
CFTypeID CFPlugInGetTypeID(void);

extern
CFPlugInRef CFPlugInCreate(CFAllocatorRef allocator, CFURLRef plugInURL);


extern
CFBundleRef CFPlugInGetBundle(CFPlugInRef plugIn);







extern
void CFPlugInSetLoadOnDemand(CFPlugInRef plugIn, Boolean flag);

extern
Boolean CFPlugInIsLoadOnDemand(CFPlugInRef plugIn);





extern
CFArrayRef CFPlugInFindFactoriesForPlugInType(CFUUIDRef typeUUID);


extern
CFArrayRef CFPlugInFindFactoriesForPlugInTypeInPlugIn(CFUUIDRef typeUUID, CFPlugInRef plugIn);


extern
void *CFPlugInInstanceCreate(CFAllocatorRef allocator, CFUUIDRef factoryUUID, CFUUIDRef typeUUID);






extern
Boolean CFPlugInRegisterFactoryFunction(CFUUIDRef factoryUUID, CFPlugInFactoryFunction func);

extern
Boolean CFPlugInRegisterFactoryFunctionByName(CFUUIDRef factoryUUID, CFPlugInRef plugIn, CFStringRef functionName);

extern
Boolean CFPlugInUnregisterFactory(CFUUIDRef factoryUUID);

extern
Boolean CFPlugInRegisterPlugInType(CFUUIDRef factoryUUID, CFUUIDRef typeUUID);

extern
Boolean CFPlugInUnregisterPlugInType(CFUUIDRef factoryUUID, CFUUIDRef typeUUID);





extern
void CFPlugInAddInstanceForFactory(CFUUIDRef factoryID);

extern
void CFPlugInRemoveInstanceForFactory(CFUUIDRef factoryID);




typedef struct __CFPlugInInstance *CFPlugInInstanceRef;

typedef Boolean (*CFPlugInInstanceGetInterfaceFunction)(CFPlugInInstanceRef instance, CFStringRef interfaceName, void **ftbl);
typedef void (*CFPlugInInstanceDeallocateInstanceDataFunction)(void *instanceData);

extern
Boolean CFPlugInInstanceGetInterfaceFunctionTable(CFPlugInInstanceRef instance, CFStringRef interfaceName, void **ftbl);
extern
CFStringRef CFPlugInInstanceGetFactoryName(CFPlugInInstanceRef instance);
extern
void *CFPlugInInstanceGetInstanceData(CFPlugInInstanceRef instance);
extern
CFTypeID CFPlugInInstanceGetTypeID(void);
extern
CFPlugInInstanceRef CFPlugInInstanceCreateWithInstanceDataSize(CFAllocatorRef allocator, CFIndex instanceDataSize, CFPlugInInstanceDeallocateInstanceDataFunction deallocateInstanceFunction, CFStringRef factoryName, CFPlugInInstanceGetInterfaceFunction getInterfaceFunction);

}
# 59 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CoreFoundation.h" 2 3
# 1 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFPreferences.h" 1 3





#define __COREFOUNDATION_CFPREFERENCES__ 1





extern "C" {

extern
const CFStringRef kCFPreferencesAnyApplication;
extern
const CFStringRef kCFPreferencesCurrentApplication;
extern
const CFStringRef kCFPreferencesAnyHost;
extern
const CFStringRef kCFPreferencesCurrentHost;
extern
const CFStringRef kCFPreferencesAnyUser;
extern
const CFStringRef kCFPreferencesCurrentUser;
# 41 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFPreferences.h" 3
extern
CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID);




extern
Boolean CFPreferencesGetAppBooleanValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat);




extern
CFIndex CFPreferencesGetAppIntegerValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat);




extern
void CFPreferencesSetAppValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID);





extern
void CFPreferencesAddSuitePreferencesToApp(CFStringRef applicationID, CFStringRef suiteID);

extern
void CFPreferencesRemoveSuitePreferencesFromApp(CFStringRef applicationID, CFStringRef suiteID);



extern
Boolean CFPreferencesAppSynchronize(CFStringRef applicationID);





extern
CFPropertyListRef CFPreferencesCopyValue(CFStringRef key, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName);





extern
CFDictionaryRef CFPreferencesCopyMultiple(CFArrayRef keysToFetch, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName);



extern
void CFPreferencesSetValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName);



extern
void CFPreferencesSetMultiple(CFDictionaryRef keysToSet, CFArrayRef keysToRemove, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName);

extern
Boolean CFPreferencesSynchronize(CFStringRef applicationID, CFStringRef userName, CFStringRef hostName);





extern
CFArrayRef CFPreferencesCopyApplicationList(CFStringRef userName, CFStringRef hostName);




extern
CFArrayRef CFPreferencesCopyKeyList(CFStringRef applicationID, CFStringRef userName, CFStringRef hostName);
# 124 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFPreferences.h" 3
extern
Boolean CFPreferencesAppValueIsForced(CFStringRef key, CFStringRef applicationID);




}
# 60 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CoreFoundation.h" 2 3
# 1 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFPropertyList.h" 1 3





#define __COREFOUNDATION_CFPROPERTYLIST__ 1




# 1 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFStream.h" 1 3





#define __COREFOUNDATION_CFSTREAM__ 1






# 1 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFSocket.h" 1 3





#define __COREFOUNDATION_CFSOCKET__ 1







typedef int CFSocketNativeHandle;





extern "C" {

typedef struct __CFSocket * CFSocketRef;
# 102 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFSocket.h" 3
enum {
    kCFSocketSuccess = 0,
    kCFSocketError = -1,
    kCFSocketTimeout = -2
};
typedef CFIndex CFSocketError;

typedef struct {
    SInt32 protocolFamily;
    SInt32 socketType;
    SInt32 protocol;
    CFDataRef address;
} CFSocketSignature;


enum {
    kCFSocketNoCallBack = 0,
    kCFSocketReadCallBack = 1,
    kCFSocketAcceptCallBack = 2,
    kCFSocketDataCallBack = 3,
    kCFSocketConnectCallBack = 4

    ,
    kCFSocketWriteCallBack = 8

};
typedef CFOptionFlags CFSocketCallBackType;



enum {
    kCFSocketAutomaticallyReenableReadCallBack = 1,
    kCFSocketAutomaticallyReenableAcceptCallBack = 2,
    kCFSocketAutomaticallyReenableDataCallBack = 3,
    kCFSocketAutomaticallyReenableWriteCallBack = 8,
    kCFSocketCloseOnInvalidate = 128
};


typedef void (*CFSocketCallBack)(CFSocketRef s, CFSocketCallBackType type, CFDataRef address, const void *data, void *info);


typedef struct {
    CFIndex version;
    void * info;
    const void *(*retain)(const void *info);
    void (*release)(const void *info);
    CFStringRef (*copyDescription)(const void *info);
} CFSocketContext;

extern CFTypeID CFSocketGetTypeID(void);

extern CFSocketRef CFSocketCreate(CFAllocatorRef allocator, SInt32 protocolFamily, SInt32 socketType, SInt32 protocol, CFOptionFlags callBackTypes, CFSocketCallBack callout, const CFSocketContext *context);
extern CFSocketRef CFSocketCreateWithNative(CFAllocatorRef allocator, CFSocketNativeHandle sock, CFOptionFlags callBackTypes, CFSocketCallBack callout, const CFSocketContext *context);
extern CFSocketRef CFSocketCreateWithSocketSignature(CFAllocatorRef allocator, const CFSocketSignature *signature, CFOptionFlags callBackTypes, CFSocketCallBack callout, const CFSocketContext *context);
extern CFSocketRef CFSocketCreateConnectedToSocketSignature(CFAllocatorRef allocator, const CFSocketSignature *signature, CFOptionFlags callBackTypes, CFSocketCallBack callout, const CFSocketContext *context, CFTimeInterval timeout);


extern CFSocketError CFSocketSetAddress(CFSocketRef s, CFDataRef address);
extern CFSocketError CFSocketConnectToAddress(CFSocketRef s, CFDataRef address, CFTimeInterval timeout);
extern void CFSocketInvalidate(CFSocketRef s);

extern Boolean CFSocketIsValid(CFSocketRef s);
extern CFDataRef CFSocketCopyAddress(CFSocketRef s);
extern CFDataRef CFSocketCopyPeerAddress(CFSocketRef s);
extern void CFSocketGetContext(CFSocketRef s, CFSocketContext *context);
extern CFSocketNativeHandle CFSocketGetNative(CFSocketRef s);

extern CFRunLoopSourceRef CFSocketCreateRunLoopSource(CFAllocatorRef allocator, CFSocketRef s, CFIndex order);


extern CFOptionFlags CFSocketGetSocketFlags(CFSocketRef s);
extern void CFSocketSetSocketFlags(CFSocketRef s, CFOptionFlags flags);
extern void CFSocketDisableCallBacks(CFSocketRef s, CFOptionFlags callBackTypes);
extern void CFSocketEnableCallBacks(CFSocketRef s, CFOptionFlags callBackTypes);



extern CFSocketError CFSocketSendData(CFSocketRef s, CFDataRef address, CFDataRef data, CFTimeInterval timeout);
# 199 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFSocket.h" 3
extern CFSocketError CFSocketRegisterValue(const CFSocketSignature *nameServerSignature, CFTimeInterval timeout, CFStringRef name, CFPropertyListRef value);
extern CFSocketError CFSocketCopyRegisteredValue(const CFSocketSignature *nameServerSignature, CFTimeInterval timeout, CFStringRef name, CFPropertyListRef *value, CFDataRef *nameServerAddress);

extern CFSocketError CFSocketRegisterSocketSignature(const CFSocketSignature *nameServerSignature, CFTimeInterval timeout, CFStringRef name, const CFSocketSignature *signature);
extern CFSocketError CFSocketCopyRegisteredSocketSignature(const CFSocketSignature *nameServerSignature, CFTimeInterval timeout, CFStringRef name, CFSocketSignature *signature, CFDataRef *nameServerAddress);

extern CFSocketError CFSocketUnregister(const CFSocketSignature *nameServerSignature, CFTimeInterval timeout, CFStringRef name);

extern void CFSocketSetDefaultNameRegistryPortNumber(UInt16 port);
extern UInt16 CFSocketGetDefaultNameRegistryPortNumber(void);


extern const CFStringRef kCFSocketCommandKey;
extern const CFStringRef kCFSocketNameKey;
extern const CFStringRef kCFSocketValueKey;
extern const CFStringRef kCFSocketResultKey;
extern const CFStringRef kCFSocketErrorKey;
extern const CFStringRef kCFSocketRegisterCommand;
extern const CFStringRef kCFSocketRetrieveCommand;

}
# 14 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFStream.h" 2 3


extern "C" {

enum {
    kCFStreamStatusNotOpen = 0,
    kCFStreamStatusOpening,
    kCFStreamStatusOpen,
    kCFStreamStatusReading,
    kCFStreamStatusWriting,
    kCFStreamStatusAtEnd,
    kCFStreamStatusClosed,
    kCFStreamStatusError
};
typedef CFIndex CFStreamStatus;

enum {
    kCFStreamEventNone = 0,
    kCFStreamEventOpenCompleted = 1,
    kCFStreamEventHasBytesAvailable = 2,
    kCFStreamEventCanAcceptBytes = 4,
    kCFStreamEventErrorOccurred = 8,
    kCFStreamEventEndEncountered = 16
};
typedef CFOptionFlags CFStreamEventType;

typedef struct {
    CFIndex version;
    void *info;
    void *(*retain)(void *info);
    void (*release)(void *info);
    CFStringRef (*copyDescription)(void *info);
} CFStreamClientContext;

typedef struct __CFReadStream * CFReadStreamRef;
typedef struct __CFWriteStream * CFWriteStreamRef;

typedef void (*CFReadStreamClientCallBack)(CFReadStreamRef stream, CFStreamEventType type, void *clientCallBackInfo);
typedef void (*CFWriteStreamClientCallBack)(CFWriteStreamRef stream, CFStreamEventType type, void *clientCallBackInfo);

extern
CFTypeID CFReadStreamGetTypeID(void);
extern
CFTypeID CFWriteStreamGetTypeID(void);




extern
const CFStringRef kCFStreamPropertyDataWritten;


extern
CFReadStreamRef CFReadStreamCreateWithBytesNoCopy(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex length, CFAllocatorRef bytesDeallocator);


extern
CFWriteStreamRef CFWriteStreamCreateWithBuffer(CFAllocatorRef alloc, UInt8 *buffer, CFIndex bufferCapacity);


extern
CFWriteStreamRef CFWriteStreamCreateWithAllocatedBuffers(CFAllocatorRef alloc, CFAllocatorRef bufferAllocator);


extern
CFReadStreamRef CFReadStreamCreateWithFile(CFAllocatorRef alloc, CFURLRef fileURL);
extern
CFWriteStreamRef CFWriteStreamCreateWithFile(CFAllocatorRef alloc, CFURLRef fileURL);
extern
void CFStreamCreateBoundPair(CFAllocatorRef alloc, CFReadStreamRef *readStream, CFWriteStreamRef *writeStream, CFIndex transferBufferSize);



extern
const CFStringRef kCFStreamPropertyAppendToFile;




extern const CFStringRef kCFStreamPropertyFileCurrentOffset ;






extern
const CFStringRef kCFStreamPropertySocketNativeHandle;


extern
const CFStringRef kCFStreamPropertySocketRemoteHostName;


extern
const CFStringRef kCFStreamPropertySocketRemotePortNumber;


extern
void CFStreamCreatePairWithSocket(CFAllocatorRef alloc, CFSocketNativeHandle sock, CFReadStreamRef *readStream, CFWriteStreamRef *writeStream);
extern
void CFStreamCreatePairWithSocketToHost(CFAllocatorRef alloc, CFStringRef host, UInt32 port, CFReadStreamRef *readStream, CFWriteStreamRef *writeStream);

extern
void CFStreamCreatePairWithPeerSocketSignature(CFAllocatorRef alloc, const CFSocketSignature *signature, CFReadStreamRef *readStream, CFWriteStreamRef *writeStream);




extern
CFStreamStatus CFReadStreamGetStatus(CFReadStreamRef stream);
extern
CFStreamStatus CFWriteStreamGetStatus(CFWriteStreamRef stream);


extern
CFErrorRef CFReadStreamCopyError(CFReadStreamRef stream) ;
extern
CFErrorRef CFWriteStreamCopyError(CFWriteStreamRef stream) ;






extern
Boolean CFReadStreamOpen(CFReadStreamRef stream);
extern
Boolean CFWriteStreamOpen(CFWriteStreamRef stream);




extern
void CFReadStreamClose(CFReadStreamRef stream);
extern
void CFWriteStreamClose(CFWriteStreamRef stream);



extern
Boolean CFReadStreamHasBytesAvailable(CFReadStreamRef stream);
# 164 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFStream.h" 3
extern
CFIndex CFReadStreamRead(CFReadStreamRef stream, UInt8 *buffer, CFIndex bufferLength);
# 176 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFStream.h" 3
extern
const UInt8 *CFReadStreamGetBuffer(CFReadStreamRef stream, CFIndex maxBytesToRead, CFIndex *numBytesRead);



extern
Boolean CFWriteStreamCanAcceptBytes(CFWriteStreamRef stream);






extern
CFIndex CFWriteStreamWrite(CFWriteStreamRef stream, const UInt8 *buffer, CFIndex bufferLength);
# 200 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFStream.h" 3
extern
CFTypeRef CFReadStreamCopyProperty(CFReadStreamRef stream, CFStringRef propertyName);
extern
CFTypeRef CFWriteStreamCopyProperty(CFWriteStreamRef stream, CFStringRef propertyName);




extern
Boolean CFReadStreamSetProperty(CFReadStreamRef stream, CFStringRef propertyName, CFTypeRef propertyValue);
extern
Boolean CFWriteStreamSetProperty(CFWriteStreamRef stream, CFStringRef propertyName, CFTypeRef propertyValue);
# 231 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFStream.h" 3
extern
Boolean CFReadStreamSetClient(CFReadStreamRef stream, CFOptionFlags streamEvents, CFReadStreamClientCallBack clientCB, CFStreamClientContext *clientContext);
extern
Boolean CFWriteStreamSetClient(CFWriteStreamRef stream, CFOptionFlags streamEvents, CFWriteStreamClientCallBack clientCB, CFStreamClientContext *clientContext);

extern
void CFReadStreamScheduleWithRunLoop(CFReadStreamRef stream, CFRunLoopRef runLoop, CFStringRef runLoopMode);
extern
void CFWriteStreamScheduleWithRunLoop(CFWriteStreamRef stream, CFRunLoopRef runLoop, CFStringRef runLoopMode);

extern
void CFReadStreamUnscheduleFromRunLoop(CFReadStreamRef stream, CFRunLoopRef runLoop, CFStringRef runLoopMode);
extern
void CFWriteStreamUnscheduleFromRunLoop(CFWriteStreamRef stream, CFRunLoopRef runLoop, CFStringRef runLoopMode);



enum {
    kCFStreamErrorDomainCustom = -1,
    kCFStreamErrorDomainPOSIX = 1,
    kCFStreamErrorDomainMacOSStatus
};
typedef CFIndex CFStreamErrorDomain;

typedef struct {
    CFIndex domain;
    SInt32 error;
} CFStreamError;
extern
CFStreamError CFReadStreamGetError(CFReadStreamRef stream);
extern
CFStreamError CFWriteStreamGetError(CFWriteStreamRef stream);


}
# 12 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFPropertyList.h" 2 3

extern "C" {

enum {
    kCFPropertyListImmutable = 0,
    kCFPropertyListMutableContainers,
    kCFPropertyListMutableContainersAndLeaves
};
typedef CFOptionFlags CFPropertyListMutabilityOptions;
# 30 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFPropertyList.h" 3
extern
CFPropertyListRef CFPropertyListCreateFromXMLData(CFAllocatorRef allocator, CFDataRef xmlData, CFOptionFlags mutabilityOption, CFStringRef *errorString);
# 43 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFPropertyList.h" 3
extern
CFDataRef CFPropertyListCreateXMLData(CFAllocatorRef allocator, CFPropertyListRef propertyList);







extern
CFPropertyListRef CFPropertyListCreateDeepCopy(CFAllocatorRef allocator, CFPropertyListRef propertyList, CFOptionFlags mutabilityOption);



enum {
    kCFPropertyListOpenStepFormat = 1,
    kCFPropertyListXMLFormat_v1_0 = 100,
    kCFPropertyListBinaryFormat_v1_0 = 200
};
typedef CFIndex CFPropertyListFormat;

extern
Boolean CFPropertyListIsValid(CFPropertyListRef plist, CFPropertyListFormat format);







extern
CFIndex CFPropertyListWriteToStream(CFPropertyListRef propertyList, CFWriteStreamRef stream, CFPropertyListFormat format, CFStringRef *errorString);
# 85 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFPropertyList.h" 3
extern
CFPropertyListRef CFPropertyListCreateFromStream(CFAllocatorRef allocator, CFReadStreamRef stream, CFIndex streamLength, CFOptionFlags mutabilityOption, CFPropertyListFormat *format, CFStringRef *errorString);
# 100 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFPropertyList.h" 3
}
# 61 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CoreFoundation.h" 2 3

# 1 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFSet.h" 1 3
# 10 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFSet.h" 3
#define __COREFOUNDATION_CFSET__ 1



extern "C" {
# 25 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFSet.h" 3
typedef const void * (*CFSetRetainCallBack)(CFAllocatorRef allocator, const void *value);







typedef void (*CFSetReleaseCallBack)(CFAllocatorRef allocator, const void *value);







typedef CFStringRef (*CFSetCopyDescriptionCallBack)(const void *value);
# 50 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFSet.h" 3
typedef Boolean (*CFSetEqualCallBack)(const void *value1, const void *value2);







typedef CFHashCode (*CFSetHashCallBack)(const void *value);
# 84 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFSet.h" 3
typedef struct {
    CFIndex version;
    CFSetRetainCallBack retain;
    CFSetReleaseCallBack release;
    CFSetCopyDescriptionCallBack copyDescription;
    CFSetEqualCallBack equal;
    CFSetHashCallBack hash;
} CFSetCallBacks;






extern
const CFSetCallBacks kCFTypeSetCallBacks;







extern
const CFSetCallBacks kCFCopyStringSetCallBacks;
# 118 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFSet.h" 3
typedef void (*CFSetApplierFunction)(const void *value, void *context);





typedef const struct __CFSet * CFSetRef;





typedef struct __CFSet * CFMutableSetRef;





extern
CFTypeID CFSetGetTypeID(void);
# 185 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFSet.h" 3
extern
CFSetRef CFSetCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFSetCallBacks *callBacks);
# 206 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFSet.h" 3
extern
CFSetRef CFSetCreateCopy(CFAllocatorRef allocator, CFSetRef theSet);
# 252 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFSet.h" 3
extern
CFMutableSetRef CFSetCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFSetCallBacks *callBacks);
# 282 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFSet.h" 3
extern
CFMutableSetRef CFSetCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFSetRef theSet);
# 292 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFSet.h" 3
extern
CFIndex CFSetGetCount(CFSetRef theSet);
# 310 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFSet.h" 3
extern
CFIndex CFSetGetCountOfValue(CFSetRef theSet, const void *value);
# 326 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFSet.h" 3
extern
Boolean CFSetContainsValue(CFSetRef theSet, const void *value);
# 341 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFSet.h" 3
extern
const void *CFSetGetValue(CFSetRef theSet, const void *value);
# 365 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFSet.h" 3
extern
Boolean CFSetGetValueIfPresent(CFSetRef theSet, const void *candidate, const void **value);
# 379 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFSet.h" 3
extern
void CFSetGetValues(CFSetRef theSet, const void **values);
# 399 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFSet.h" 3
extern
void CFSetApplyFunction(CFSetRef theSet, CFSetApplierFunction applier, void *context);
# 414 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFSet.h" 3
extern
void CFSetAddValue(CFMutableSetRef theSet, const void *value);
# 433 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFSet.h" 3
extern
void CFSetReplaceValue(CFMutableSetRef theSet, const void *value);
# 453 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFSet.h" 3
extern
void CFSetSetValue(CFMutableSetRef theSet, const void *value);
# 468 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFSet.h" 3
extern
void CFSetRemoveValue(CFMutableSetRef theSet, const void *value);
# 478 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFSet.h" 3
extern
void CFSetRemoveAllValues(CFMutableSetRef theSet);

}
# 63 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CoreFoundation.h" 2 3



# 1 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFStringEncodingExt.h" 1 3





#define __COREFOUNDATION_CFSTRINGENCODINGEXT__ 1



extern "C" {

enum {

    kCFStringEncodingMacJapanese = 1,
    kCFStringEncodingMacChineseTrad = 2,
    kCFStringEncodingMacKorean = 3,
    kCFStringEncodingMacArabic = 4,
    kCFStringEncodingMacHebrew = 5,
    kCFStringEncodingMacGreek = 6,
    kCFStringEncodingMacCyrillic = 7,
    kCFStringEncodingMacDevanagari = 9,
    kCFStringEncodingMacGurmukhi = 10,
    kCFStringEncodingMacGujarati = 11,
    kCFStringEncodingMacOriya = 12,
    kCFStringEncodingMacBengali = 13,
    kCFStringEncodingMacTamil = 14,
    kCFStringEncodingMacTelugu = 15,
    kCFStringEncodingMacKannada = 16,
    kCFStringEncodingMacMalayalam = 17,
    kCFStringEncodingMacSinhalese = 18,
    kCFStringEncodingMacBurmese = 19,
    kCFStringEncodingMacKhmer = 20,
    kCFStringEncodingMacThai = 21,
    kCFStringEncodingMacLaotian = 22,
    kCFStringEncodingMacGeorgian = 23,
    kCFStringEncodingMacArmenian = 24,
    kCFStringEncodingMacChineseSimp = 25,
    kCFStringEncodingMacTibetan = 26,
    kCFStringEncodingMacMongolian = 27,
    kCFStringEncodingMacEthiopic = 28,
    kCFStringEncodingMacCentralEurRoman = 29,
    kCFStringEncodingMacVietnamese = 30,
    kCFStringEncodingMacExtArabic = 31,

    kCFStringEncodingMacSymbol = 33,
    kCFStringEncodingMacDingbats = 34,
    kCFStringEncodingMacTurkish = 35,
    kCFStringEncodingMacCroatian = 36,
    kCFStringEncodingMacIcelandic = 37,
    kCFStringEncodingMacRomanian = 38,
    kCFStringEncodingMacCeltic = 39,
    kCFStringEncodingMacGaelic = 40,

    kCFStringEncodingMacFarsi = 0x8C,

    kCFStringEncodingMacUkrainian = 0x98,

    kCFStringEncodingMacInuit = 0xEC,
    kCFStringEncodingMacVT100 = 0xFC,

    kCFStringEncodingMacHFS = 0xFF,






    kCFStringEncodingISOLatin2 = 0x0202,
    kCFStringEncodingISOLatin3 = 0x0203,
    kCFStringEncodingISOLatin4 = 0x0204,
    kCFStringEncodingISOLatinCyrillic = 0x0205,
    kCFStringEncodingISOLatinArabic = 0x0206,
    kCFStringEncodingISOLatinGreek = 0x0207,
    kCFStringEncodingISOLatinHebrew = 0x0208,
    kCFStringEncodingISOLatin5 = 0x0209,
    kCFStringEncodingISOLatin6 = 0x020A,
    kCFStringEncodingISOLatinThai = 0x020B,
    kCFStringEncodingISOLatin7 = 0x020D,
    kCFStringEncodingISOLatin8 = 0x020E,
    kCFStringEncodingISOLatin9 = 0x020F,

    kCFStringEncodingISOLatin10 = 0x0210,



    kCFStringEncodingDOSLatinUS = 0x0400,
    kCFStringEncodingDOSGreek = 0x0405,
    kCFStringEncodingDOSBalticRim = 0x0406,
    kCFStringEncodingDOSLatin1 = 0x0410,
    kCFStringEncodingDOSGreek1 = 0x0411,
    kCFStringEncodingDOSLatin2 = 0x0412,
    kCFStringEncodingDOSCyrillic = 0x0413,
    kCFStringEncodingDOSTurkish = 0x0414,
    kCFStringEncodingDOSPortuguese = 0x0415,
    kCFStringEncodingDOSIcelandic = 0x0416,
    kCFStringEncodingDOSHebrew = 0x0417,
    kCFStringEncodingDOSCanadianFrench = 0x0418,
    kCFStringEncodingDOSArabic = 0x0419,
    kCFStringEncodingDOSNordic = 0x041A,
    kCFStringEncodingDOSRussian = 0x041B,
    kCFStringEncodingDOSGreek2 = 0x041C,
    kCFStringEncodingDOSThai = 0x041D,
    kCFStringEncodingDOSJapanese = 0x0420,
    kCFStringEncodingDOSChineseSimplif = 0x0421,
    kCFStringEncodingDOSKorean = 0x0422,
    kCFStringEncodingDOSChineseTrad = 0x0423,

    kCFStringEncodingWindowsLatin2 = 0x0501,
    kCFStringEncodingWindowsCyrillic = 0x0502,
    kCFStringEncodingWindowsGreek = 0x0503,
    kCFStringEncodingWindowsLatin5 = 0x0504,
    kCFStringEncodingWindowsHebrew = 0x0505,
    kCFStringEncodingWindowsArabic = 0x0506,
    kCFStringEncodingWindowsBalticRim = 0x0507,
    kCFStringEncodingWindowsVietnamese = 0x0508,
    kCFStringEncodingWindowsKoreanJohab = 0x0510,




    kCFStringEncodingANSEL = 0x0601,

    kCFStringEncodingJIS_X0201_76 = 0x0620,
    kCFStringEncodingJIS_X0208_83 = 0x0621,
    kCFStringEncodingJIS_X0208_90 = 0x0622,
    kCFStringEncodingJIS_X0212_90 = 0x0623,
    kCFStringEncodingJIS_C6226_78 = 0x0624,

    kCFStringEncodingShiftJIS_X0213 = 0x0628,


    kCFStringEncodingShiftJIS_X0213_MenKuTen = 0x0629,

    kCFStringEncodingGB_2312_80 = 0x0630,
    kCFStringEncodingGBK_95 = 0x0631,
    kCFStringEncodingGB_18030_2000 = 0x0632,
    kCFStringEncodingKSC_5601_87 = 0x0640,
    kCFStringEncodingKSC_5601_92_Johab = 0x0641,
    kCFStringEncodingCNS_11643_92_P1 = 0x0651,
    kCFStringEncodingCNS_11643_92_P2 = 0x0652,
    kCFStringEncodingCNS_11643_92_P3 = 0x0653,


    kCFStringEncodingISO_2022_JP = 0x0820,
    kCFStringEncodingISO_2022_JP_2 = 0x0821,
    kCFStringEncodingISO_2022_JP_1 = 0x0822,
    kCFStringEncodingISO_2022_JP_3 = 0x0823,
    kCFStringEncodingISO_2022_CN = 0x0830,
    kCFStringEncodingISO_2022_CN_EXT = 0x0831,
    kCFStringEncodingISO_2022_KR = 0x0840,


    kCFStringEncodingEUC_JP = 0x0920,
    kCFStringEncodingEUC_CN = 0x0930,
    kCFStringEncodingEUC_TW = 0x0931,
    kCFStringEncodingEUC_KR = 0x0940,


    kCFStringEncodingShiftJIS = 0x0A01,
    kCFStringEncodingKOI8_R = 0x0A02,
    kCFStringEncodingBig5 = 0x0A03,
    kCFStringEncodingMacRomanLatin1 = 0x0A04,
    kCFStringEncodingHZ_GB_2312 = 0x0A05,
    kCFStringEncodingBig5_HKSCS_1999 = 0x0A06,

    kCFStringEncodingVISCII = 0x0A07,
    kCFStringEncodingKOI8_U = 0x0A08,
    kCFStringEncodingBig5_E = 0x0A09,





    kCFStringEncodingNextStepJapanese = 0x0B02,



    kCFStringEncodingEBCDIC_US = 0x0C01,
    kCFStringEncodingEBCDIC_CP037 = 0x0C02,


    kCFStringEncodingShiftJIS_X0213_00 = 0x0628
};
typedef CFIndex CFStringEncodings;

}
# 67 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CoreFoundation.h" 2 3

# 1 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFTree.h" 1 3
# 11 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFTree.h" 3
#define __COREFOUNDATION_CFTREE__ 1



extern "C" {
# 27 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFTree.h" 3
typedef const void * (*CFTreeRetainCallBack)(const void *info);







typedef void (*CFTreeReleaseCallBack)(const void *info);
# 44 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFTree.h" 3
typedef CFStringRef (*CFTreeCopyDescriptionCallBack)(const void *info);
# 63 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFTree.h" 3
typedef struct {
    CFIndex version;
    void * info;
    CFTreeRetainCallBack retain;
    CFTreeReleaseCallBack release;
    CFTreeCopyDescriptionCallBack copyDescription;
} CFTreeContext;
# 79 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFTree.h" 3
typedef void (*CFTreeApplierFunction)(const void *value, void *context);





typedef struct __CFTree * CFTreeRef;





extern
CFTypeID CFTreeGetTypeID(void);
# 111 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFTree.h" 3
extern
CFTreeRef CFTreeCreate(CFAllocatorRef allocator, const CFTreeContext *context);
# 121 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFTree.h" 3
extern
CFTreeRef CFTreeGetParent(CFTreeRef tree);
# 131 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFTree.h" 3
extern
CFTreeRef CFTreeGetNextSibling(CFTreeRef tree);
# 141 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFTree.h" 3
extern
CFTreeRef CFTreeGetFirstChild(CFTreeRef tree);
# 155 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFTree.h" 3
extern
void CFTreeGetContext(CFTreeRef tree, CFTreeContext *context);
# 165 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFTree.h" 3
extern
CFIndex CFTreeGetChildCount(CFTreeRef tree);
# 178 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFTree.h" 3
extern
CFTreeRef CFTreeGetChildAtIndex(CFTreeRef tree, CFIndex idx);
# 191 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFTree.h" 3
extern
void CFTreeGetChildren(CFTreeRef tree, CFTreeRef *children);
# 212 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFTree.h" 3
extern
void CFTreeApplyFunctionToChildren(CFTreeRef tree, CFTreeApplierFunction applier, void *context);
# 222 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFTree.h" 3
extern
CFTreeRef CFTreeFindRoot(CFTreeRef tree);
# 239 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFTree.h" 3
extern
void CFTreeSetContext(CFTreeRef tree, const CFTreeContext *context);
# 252 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFTree.h" 3
extern
void CFTreePrependChild(CFTreeRef tree, CFTreeRef newChild);
# 265 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFTree.h" 3
extern
void CFTreeAppendChild(CFTreeRef tree, CFTreeRef newChild);
# 280 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFTree.h" 3
extern
void CFTreeInsertSibling(CFTreeRef tree, CFTreeRef newSibling);







extern
void CFTreeRemove(CFTreeRef tree);







extern
void CFTreeRemoveAllChildren(CFTreeRef tree);
# 318 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFTree.h" 3
extern
void CFTreeSortChildren(CFTreeRef tree, CFComparatorFunction comparator, void *context);

}
# 69 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CoreFoundation.h" 2 3

# 1 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFURLAccess.h" 1 3





#define __COREFOUNDATION_CFURLACCESS__ 1
# 15 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFURLAccess.h" 3
extern "C" {
# 39 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFURLAccess.h" 3
extern
Boolean CFURLCreateDataAndPropertiesFromResource(CFAllocatorRef alloc, CFURLRef url, CFDataRef *resourceData, CFDictionaryRef *properties, CFArrayRef desiredProperties, SInt32 *errorCode);
# 50 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFURLAccess.h" 3
extern
Boolean CFURLWriteDataAndPropertiesToResource(CFURLRef url, CFDataRef dataToWrite, CFDictionaryRef propertiesToWrite, SInt32 *errorCode);



extern
Boolean CFURLDestroyResource(CFURLRef url, SInt32 *errorCode);



extern
CFTypeRef CFURLCreatePropertyFromResource(CFAllocatorRef alloc, CFURLRef url, CFStringRef property, SInt32 *errorCode);


enum {
    kCFURLUnknownError = -10,
    kCFURLUnknownSchemeError = -11,
    kCFURLResourceNotFoundError = -12,
    kCFURLResourceAccessViolationError = -13,
    kCFURLRemoteHostUnavailableError = -14,
    kCFURLImproperArgumentsError = -15,
    kCFURLUnknownPropertyKeyError = -16,
    kCFURLPropertyKeyUnavailableError = -17,
    kCFURLTimeoutError = -18
};
typedef CFIndex CFURLError;



extern
const CFStringRef kCFURLFileExists;
extern
const CFStringRef kCFURLFileDirectoryContents;
extern
const CFStringRef kCFURLFileLength;
extern
const CFStringRef kCFURLFileLastModificationTime;
extern
const CFStringRef kCFURLFilePOSIXMode;
extern
const CFStringRef kCFURLFileOwnerID;
extern
const CFStringRef kCFURLHTTPStatusCode;
extern
const CFStringRef kCFURLHTTPStatusLine;
# 107 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFURLAccess.h" 3
}
# 71 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CoreFoundation.h" 2 3

# 1 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFUserNotification.h" 1 3





#define __COREFOUNDATION_CFUSERNOTIFICATION__ 1
# 15 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFUserNotification.h" 3
extern "C" {

typedef struct __CFUserNotification * CFUserNotificationRef;
# 63 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFUserNotification.h" 3
typedef void (*CFUserNotificationCallBack)(CFUserNotificationRef userNotification, CFOptionFlags responseFlags);

extern
CFTypeID CFUserNotificationGetTypeID(void);

extern
CFUserNotificationRef CFUserNotificationCreate(CFAllocatorRef allocator, CFTimeInterval timeout, CFOptionFlags flags, SInt32 *error, CFDictionaryRef dictionary);

extern
SInt32 CFUserNotificationReceiveResponse(CFUserNotificationRef userNotification, CFTimeInterval timeout, CFOptionFlags *responseFlags);

extern
CFStringRef CFUserNotificationGetResponseValue(CFUserNotificationRef userNotification, CFStringRef key, CFIndex idx);

extern
CFDictionaryRef CFUserNotificationGetResponseDictionary(CFUserNotificationRef userNotification);

extern
SInt32 CFUserNotificationUpdate(CFUserNotificationRef userNotification, CFTimeInterval timeout, CFOptionFlags flags, CFDictionaryRef dictionary);

extern
SInt32 CFUserNotificationCancel(CFUserNotificationRef userNotification);

extern
CFRunLoopSourceRef CFUserNotificationCreateRunLoopSource(CFAllocatorRef allocator, CFUserNotificationRef userNotification, CFUserNotificationCallBack callout, CFIndex order);




extern
SInt32 CFUserNotificationDisplayNotice(CFTimeInterval timeout, CFOptionFlags flags, CFURLRef iconURL, CFURLRef soundURL, CFURLRef localizationURL, CFStringRef alertHeader, CFStringRef alertMessage, CFStringRef defaultButtonTitle);

extern
SInt32 CFUserNotificationDisplayAlert(CFTimeInterval timeout, CFOptionFlags flags, CFURLRef iconURL, CFURLRef soundURL, CFURLRef localizationURL, CFStringRef alertHeader, CFStringRef alertMessage, CFStringRef defaultButtonTitle, CFStringRef alternateButtonTitle, CFStringRef otherButtonTitle, CFOptionFlags *responseFlags);




enum {
    kCFUserNotificationStopAlertLevel = 0,
    kCFUserNotificationNoteAlertLevel = 1,
    kCFUserNotificationCautionAlertLevel = 2,
    kCFUserNotificationPlainAlertLevel = 3
};

enum {
    kCFUserNotificationDefaultResponse = 0,
    kCFUserNotificationAlternateResponse = 1,
    kCFUserNotificationOtherResponse = 2,
    kCFUserNotificationCancelResponse = 3
};

enum {
    kCFUserNotificationNoDefaultButtonFlag = (1 << 5),
    kCFUserNotificationUseRadioButtonsFlag = (1 << 6)
};

static __inline__ CFOptionFlags CFUserNotificationCheckBoxChecked(CFIndex i) {return ((CFOptionFlags)(1 << (8 + i)));}
static __inline__ CFOptionFlags CFUserNotificationSecureTextField(CFIndex i) {return ((CFOptionFlags)(1 << (16 + i)));}
static __inline__ CFOptionFlags CFUserNotificationPopUpSelection(CFIndex n) {return ((CFOptionFlags)(n << 24));}




extern
const CFStringRef kCFUserNotificationIconURLKey;

extern
const CFStringRef kCFUserNotificationSoundURLKey;

extern
const CFStringRef kCFUserNotificationLocalizationURLKey;

extern
const CFStringRef kCFUserNotificationAlertHeaderKey;

extern
const CFStringRef kCFUserNotificationAlertMessageKey;

extern
const CFStringRef kCFUserNotificationDefaultButtonTitleKey;

extern
const CFStringRef kCFUserNotificationAlternateButtonTitleKey;

extern
const CFStringRef kCFUserNotificationOtherButtonTitleKey;

extern
const CFStringRef kCFUserNotificationProgressIndicatorValueKey;

extern
const CFStringRef kCFUserNotificationPopUpTitlesKey;

extern
const CFStringRef kCFUserNotificationTextFieldTitlesKey;

extern
const CFStringRef kCFUserNotificationCheckBoxTitlesKey;

extern
const CFStringRef kCFUserNotificationTextFieldValuesKey;


extern
const CFStringRef kCFUserNotificationPopUpSelectionKey ;


}
# 73 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CoreFoundation.h" 2 3
# 1 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFXMLNode.h" 1 3





#define __COREFOUNDATION_CFXMLNODE__ 1







extern "C" {

enum {
 kCFXMLNodeCurrentVersion = 1
};

typedef const struct __CFXMLNode * CFXMLNodeRef;
typedef CFTreeRef CFXMLTreeRef;
# 44 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFXMLNode.h" 3
enum {
    kCFXMLNodeTypeDocument = 1,
    kCFXMLNodeTypeElement = 2,
    kCFXMLNodeTypeAttribute = 3,
    kCFXMLNodeTypeProcessingInstruction = 4,
    kCFXMLNodeTypeComment = 5,
    kCFXMLNodeTypeText = 6,
    kCFXMLNodeTypeCDATASection = 7,
    kCFXMLNodeTypeDocumentFragment = 8,
    kCFXMLNodeTypeEntity = 9,
    kCFXMLNodeTypeEntityReference = 10,
    kCFXMLNodeTypeDocumentType = 11,
    kCFXMLNodeTypeWhitespace = 12,
    kCFXMLNodeTypeNotation = 13,
    kCFXMLNodeTypeElementTypeDeclaration = 14,
    kCFXMLNodeTypeAttributeListDeclaration = 15
};
typedef CFIndex CFXMLNodeTypeCode;

typedef struct {
    CFDictionaryRef attributes;
    CFArrayRef attributeOrder;
    Boolean isEmpty;
    char _reserved[3];
} CFXMLElementInfo;

typedef struct {
    CFStringRef dataString;
} CFXMLProcessingInstructionInfo;

typedef struct {
    CFURLRef sourceURL;
    CFStringEncoding encoding;
} CFXMLDocumentInfo;

typedef struct {
    CFURLRef systemID;
    CFStringRef publicID;
} CFXMLExternalID;

typedef struct {
    CFXMLExternalID externalID;
} CFXMLDocumentTypeInfo;

typedef struct {
    CFXMLExternalID externalID;
} CFXMLNotationInfo;

typedef struct {

    CFStringRef contentDescription;
} CFXMLElementTypeDeclarationInfo;

typedef struct {

    CFStringRef attributeName;
    CFStringRef typeString;
    CFStringRef defaultString;
} CFXMLAttributeDeclarationInfo;

typedef struct {
    CFIndex numberOfAttributes;
    CFXMLAttributeDeclarationInfo *attributes;
} CFXMLAttributeListDeclarationInfo;

enum {
    kCFXMLEntityTypeParameter,
    kCFXMLEntityTypeParsedInternal,
    kCFXMLEntityTypeParsedExternal,
    kCFXMLEntityTypeUnparsed,
    kCFXMLEntityTypeCharacter
};
typedef CFIndex CFXMLEntityTypeCode;

typedef struct {
    CFXMLEntityTypeCode entityType;
    CFStringRef replacementText;
    CFXMLExternalID entityID;
    CFStringRef notationName;
} CFXMLEntityInfo;

typedef struct {
    CFXMLEntityTypeCode entityType;
} CFXMLEntityReferenceInfo;
# 149 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFXMLNode.h" 3
extern
CFTypeID CFXMLNodeGetTypeID(void);


extern
CFXMLNodeRef CFXMLNodeCreate(CFAllocatorRef alloc, CFXMLNodeTypeCode xmlType, CFStringRef dataString, const void *additionalInfoPtr, CFIndex version);


extern
CFXMLNodeRef CFXMLNodeCreateCopy(CFAllocatorRef alloc, CFXMLNodeRef origNode);

extern
CFXMLNodeTypeCode CFXMLNodeGetTypeCode(CFXMLNodeRef node);

extern
CFStringRef CFXMLNodeGetString(CFXMLNodeRef node);

extern
const void *CFXMLNodeGetInfoPtr(CFXMLNodeRef node);

extern
CFIndex CFXMLNodeGetVersion(CFXMLNodeRef node);




extern
CFXMLTreeRef CFXMLTreeCreateWithNode(CFAllocatorRef allocator, CFXMLNodeRef node);


extern
CFXMLNodeRef CFXMLTreeGetNode(CFXMLTreeRef xmlTree);

}
# 74 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CoreFoundation.h" 2 3
# 1 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFXMLParser.h" 1 3





#define __COREFOUNDATION_CFXMLPARSER__ 1
# 16 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFXMLParser.h" 3
extern "C" {

typedef struct __CFXMLParser * CFXMLParserRef;
# 50 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFXMLParser.h" 3
enum {
    kCFXMLParserValidateDocument = (1 << 0),
    kCFXMLParserSkipMetaData = (1 << 1),
    kCFXMLParserReplacePhysicalEntities = (1 << 2),
    kCFXMLParserSkipWhitespace = (1 << 3),
    kCFXMLParserResolveExternalEntities = (1 << 4),
    kCFXMLParserAddImpliedAttributes = (1 << 5),
    kCFXMLParserAllOptions = 0x00FFFFFF,
    kCFXMLParserNoOptions = 0
};
typedef CFOptionFlags CFXMLParserOptions;


enum {
    kCFXMLStatusParseNotBegun = -2,
    kCFXMLStatusParseInProgress = -1,
    kCFXMLStatusParseSuccessful = 0,
    kCFXMLErrorUnexpectedEOF = 1,
    kCFXMLErrorUnknownEncoding,
    kCFXMLErrorEncodingConversionFailure,
    kCFXMLErrorMalformedProcessingInstruction,
    kCFXMLErrorMalformedDTD,
    kCFXMLErrorMalformedName,
    kCFXMLErrorMalformedCDSect,
    kCFXMLErrorMalformedCloseTag,
    kCFXMLErrorMalformedStartTag,
    kCFXMLErrorMalformedDocument,
    kCFXMLErrorElementlessDocument,
    kCFXMLErrorMalformedComment,
    kCFXMLErrorMalformedCharacterReference,
    kCFXMLErrorMalformedParsedCharacterData,
    kCFXMLErrorNoData
};
typedef CFIndex CFXMLParserStatusCode;
# 127 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFXMLParser.h" 3
typedef void * (*CFXMLParserCreateXMLStructureCallBack)(CFXMLParserRef parser, CFXMLNodeRef nodeDesc, void *info);
typedef void (*CFXMLParserAddChildCallBack)(CFXMLParserRef parser, void *parent, void *child, void *info);
typedef void (*CFXMLParserEndXMLStructureCallBack)(CFXMLParserRef parser, void *xmlType, void *info);
typedef CFDataRef (*CFXMLParserResolveExternalEntityCallBack)(CFXMLParserRef parser, CFXMLExternalID *extID, void *info);
typedef Boolean (*CFXMLParserHandleErrorCallBack)(CFXMLParserRef parser, CFXMLParserStatusCode error, void *info);
typedef struct {
    CFIndex version;
    CFXMLParserCreateXMLStructureCallBack createXMLStructure;
    CFXMLParserAddChildCallBack addChild;
    CFXMLParserEndXMLStructureCallBack endXMLStructure;
    CFXMLParserResolveExternalEntityCallBack resolveExternalEntity;
    CFXMLParserHandleErrorCallBack handleError;
} CFXMLParserCallBacks;

typedef const void * (*CFXMLParserRetainCallBack)(const void *info);
typedef void (*CFXMLParserReleaseCallBack)(const void *info);
typedef CFStringRef (*CFXMLParserCopyDescriptionCallBack)(const void *info);
typedef struct {
    CFIndex version;
    void * info;
    CFXMLParserRetainCallBack retain;
    CFXMLParserReleaseCallBack release;
    CFXMLParserCopyDescriptionCallBack copyDescription;
} CFXMLParserContext;

extern
CFTypeID CFXMLParserGetTypeID(void);
# 162 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFXMLParser.h" 3
extern
CFXMLParserRef CFXMLParserCreate(CFAllocatorRef allocator, CFDataRef xmlData, CFURLRef dataSource, CFOptionFlags parseOptions, CFIndex versionOfNodes, CFXMLParserCallBacks *callBacks, CFXMLParserContext *context);



extern
CFXMLParserRef CFXMLParserCreateWithDataFromURL(CFAllocatorRef allocator, CFURLRef dataSource, CFOptionFlags parseOptions, CFIndex versionOfNodes, CFXMLParserCallBacks *callBacks, CFXMLParserContext *context);

extern
void CFXMLParserGetContext(CFXMLParserRef parser, CFXMLParserContext *context);

extern
void CFXMLParserGetCallBacks(CFXMLParserRef parser, CFXMLParserCallBacks *callBacks);

extern
CFURLRef CFXMLParserGetSourceURL(CFXMLParserRef parser);


extern
CFIndex CFXMLParserGetLocation(CFXMLParserRef parser);


extern
CFIndex CFXMLParserGetLineNumber(CFXMLParserRef parser);


extern
void *CFXMLParserGetDocument(CFXMLParserRef parser);




extern
CFXMLParserStatusCode CFXMLParserGetStatusCode(CFXMLParserRef parser);

extern
CFStringRef CFXMLParserCopyErrorDescription(CFXMLParserRef parser);




extern
void CFXMLParserAbort(CFXMLParserRef parser, CFXMLParserStatusCode errorCode, CFStringRef errorDescription);






extern
Boolean CFXMLParserParse(CFXMLParserRef parser);







extern
CFXMLTreeRef CFXMLTreeCreateFromData(CFAllocatorRef allocator, CFDataRef xmlData, CFURLRef dataSource, CFOptionFlags parseOptions, CFIndex versionOfNodes);




extern
CFXMLTreeRef CFXMLTreeCreateFromDataWithError(CFAllocatorRef allocator, CFDataRef xmlData, CFURLRef dataSource, CFOptionFlags parseOptions, CFIndex versionOfNodes, CFDictionaryRef *errorDict) ;


extern
CFXMLTreeRef CFXMLTreeCreateWithDataFromURL(CFAllocatorRef allocator, CFURLRef dataSource, CFOptionFlags parseOptions, CFIndex versionOfNodes);






extern
CFDataRef CFXMLTreeCreateXMLData(CFAllocatorRef allocator, CFXMLTreeRef xmlTree);







extern
CFStringRef CFXMLCreateStringByEscapingEntities(CFAllocatorRef allocator, CFStringRef string, CFDictionaryRef entitiesDictionary) ;

extern
CFStringRef CFXMLCreateStringByUnescapingEntities(CFAllocatorRef allocator, CFStringRef string, CFDictionaryRef entitiesDictionary) ;


extern const CFStringRef kCFXMLTreeErrorDescription ;


extern const CFStringRef kCFXMLTreeErrorLineNumber ;


extern const CFStringRef kCFXMLTreeErrorLocation ;


extern const CFStringRef kCFXMLTreeErrorStatusCode ;


}
# 75 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CoreFoundation.h" 2 3


# 1 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFAttributedString.h" 1 3
# 14 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFAttributedString.h" 3
#define __COREFOUNDATION_CFATTRIBUTEDSTRING__ 1





extern "C" {




typedef const struct __CFAttributedString *CFAttributedStringRef;
typedef struct __CFAttributedString *CFMutableAttributedStringRef;




extern CFTypeID CFAttributedStringGetTypeID(void) ;
# 40 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFAttributedString.h" 3
extern CFAttributedStringRef CFAttributedStringCreate(CFAllocatorRef alloc, CFStringRef str, CFDictionaryRef attributes) ;




extern CFAttributedStringRef CFAttributedStringCreateWithSubstring(CFAllocatorRef alloc, CFAttributedStringRef aStr, CFRange range) ;




extern CFAttributedStringRef CFAttributedStringCreateCopy(CFAllocatorRef alloc, CFAttributedStringRef aStr) ;




extern CFStringRef CFAttributedStringGetString(CFAttributedStringRef aStr) ;




extern CFIndex CFAttributedStringGetLength(CFAttributedStringRef aStr) ;






extern CFDictionaryRef CFAttributedStringGetAttributes(CFAttributedStringRef aStr, CFIndex loc, CFRange *effectiveRange) ;




extern CFTypeRef CFAttributedStringGetAttribute(CFAttributedStringRef aStr, CFIndex loc, CFStringRef attrName, CFRange *effectiveRange) ;




extern CFDictionaryRef CFAttributedStringGetAttributesAndLongestEffectiveRange(CFAttributedStringRef aStr, CFIndex loc, CFRange inRange, CFRange *longestEffectiveRange) ;




extern CFTypeRef CFAttributedStringGetAttributeAndLongestEffectiveRange(CFAttributedStringRef aStr, CFIndex loc, CFStringRef attrName, CFRange inRange, CFRange *longestEffectiveRange) ;
# 91 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFAttributedString.h" 3
extern CFMutableAttributedStringRef CFAttributedStringCreateMutableCopy(CFAllocatorRef alloc, CFIndex maxLength, CFAttributedStringRef aStr) ;




extern CFMutableAttributedStringRef CFAttributedStringCreateMutable(CFAllocatorRef alloc, CFIndex maxLength) ;






extern void CFAttributedStringReplaceString(CFMutableAttributedStringRef aStr, CFRange range, CFStringRef replacement) ;






extern CFMutableStringRef CFAttributedStringGetMutableString(CFMutableAttributedStringRef aStr) ;




extern void CFAttributedStringSetAttributes(CFMutableAttributedStringRef aStr, CFRange range, CFDictionaryRef replacement, Boolean clearOtherAttributes) ;




extern void CFAttributedStringSetAttribute(CFMutableAttributedStringRef aStr, CFRange range, CFStringRef attrName, CFTypeRef value) ;




extern void CFAttributedStringRemoveAttribute(CFMutableAttributedStringRef aStr, CFRange range, CFStringRef attrName) ;




extern void CFAttributedStringReplaceAttributedString(CFMutableAttributedStringRef aStr, CFRange range, CFAttributedStringRef replacement) ;




extern void CFAttributedStringBeginEditing(CFMutableAttributedStringRef aStr) ;




extern void CFAttributedStringEndEditing(CFMutableAttributedStringRef aStr) ;


}
# 78 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CoreFoundation.h" 2 3
# 1 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFNotificationCenter.h" 1 3





#define __COREFOUNDATION_CFNOTIFICATIONCENTER__ 1




extern "C" {

typedef struct __CFNotificationCenter * CFNotificationCenterRef;

typedef void (*CFNotificationCallback)(CFNotificationCenterRef center, void *observer, CFStringRef name, const void *object, CFDictionaryRef userInfo);

enum {
    CFNotificationSuspensionBehaviorDrop = 1,

    CFNotificationSuspensionBehaviorCoalesce = 2,

    CFNotificationSuspensionBehaviorHold = 3,

    CFNotificationSuspensionBehaviorDeliverImmediately = 4

};
typedef CFIndex CFNotificationSuspensionBehavior;

extern CFTypeID CFNotificationCenterGetTypeID(void);

extern CFNotificationCenterRef CFNotificationCenterGetLocalCenter(void) ;

extern CFNotificationCenterRef CFNotificationCenterGetDistributedCenter(void);

extern CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void) ;
# 53 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFNotificationCenter.h" 3
extern void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior);

extern void CFNotificationCenterRemoveObserver(CFNotificationCenterRef center, const void *observer, CFStringRef name, const void *object);
extern void CFNotificationCenterRemoveEveryObserver(CFNotificationCenterRef center, const void *observer);

extern void CFNotificationCenterPostNotification(CFNotificationCenterRef center, CFStringRef name, const void *object, CFDictionaryRef userInfo, Boolean deliverImmediately);



enum {
    kCFNotificationDeliverImmediately = (1 << 0),
    kCFNotificationPostToAllSessions = (1 << 1)
};

void CFNotificationCenterPostNotificationWithOptions(CFNotificationCenterRef center, CFStringRef name, const void *object, CFDictionaryRef userInfo, CFOptionFlags options) ;




}
# 79 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CoreFoundation.h" 2 3
# 1 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFStringTokenizer.h" 1 3
# 23 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFStringTokenizer.h" 3
#define __COREFOUNDATION_CFSTRINGTOKENIZER__ 1





extern "C" {
# 51 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFStringTokenizer.h" 3
extern
CFStringRef CFStringTokenizerCopyBestStringLanguage(CFStringRef string, CFRange range);







typedef struct __CFStringTokenizer * CFStringTokenizerRef;




enum {







    kCFStringTokenizerUnitWord = 0,
    kCFStringTokenizerUnitSentence = 1,
    kCFStringTokenizerUnitParagraph = 2,
    kCFStringTokenizerUnitLineBreak = 3,




    kCFStringTokenizerUnitWordBoundary = 4,
# 92 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFStringTokenizer.h" 3
    kCFStringTokenizerAttributeLatinTranscription = 1L << 16,


    kCFStringTokenizerAttributeLanguage = 1L << 17
};






enum {

    kCFStringTokenizerTokenNone = 0,


    kCFStringTokenizerTokenNormal = 1,





    kCFStringTokenizerTokenHasSubTokensMask = 1L << 1,






    kCFStringTokenizerTokenHasDerivedSubTokensMask = 1L << 2,

    kCFStringTokenizerTokenHasHasNumbersMask = 1L << 3,
    kCFStringTokenizerTokenHasNonLettersMask = 1L << 4,
    kCFStringTokenizerTokenIsCJWordMask = 1L << 5
};
typedef CFOptionFlags CFStringTokenizerTokenType;






extern
CFTypeID CFStringTokenizerGetTypeID(void);
# 156 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFStringTokenizer.h" 3
extern
CFStringTokenizerRef CFStringTokenizerCreate(CFAllocatorRef alloc, CFStringRef string, CFRange range, CFOptionFlags options, CFLocaleRef locale);
# 168 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFStringTokenizer.h" 3
extern
void CFStringTokenizerSetString(CFStringTokenizerRef tokenizer, CFStringRef string, CFRange range);
# 186 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFStringTokenizer.h" 3
extern
CFStringTokenizerTokenType CFStringTokenizerGoToTokenAtIndex(CFStringTokenizerRef tokenizer, CFIndex index);
# 210 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFStringTokenizer.h" 3
extern
CFStringTokenizerTokenType CFStringTokenizerAdvanceToNextToken(CFStringTokenizerRef tokenizer);
# 220 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFStringTokenizer.h" 3
extern
CFRange CFStringTokenizerGetCurrentTokenRange(CFStringTokenizerRef tokenizer);
# 234 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFStringTokenizer.h" 3
extern
CFTypeRef CFStringTokenizerCopyCurrentTokenAttribute(CFStringTokenizerRef tokenizer, CFOptionFlags attribute);
# 261 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CFStringTokenizer.h" 3
extern
CFIndex CFStringTokenizerGetCurrentSubTokens(CFStringTokenizerRef tokenizer, CFRange *ranges, CFIndex maxRangeLength, CFMutableArrayRef derivedSubTokens);

}
# 80 "/System/Library/Frameworks/CoreFoundation.framework/Headers/CoreFoundation.h" 2 3
# 32 "./macosx/macosx-tdep.h" 2
# 45 "./macosx/macosx-tdep.h"
# 1 "/usr/include/inttypes.h" 1 3 4
# 251 "/usr/include/inttypes.h" 3 4
#define _INTTYPES_H_ 
# 265 "/usr/include/inttypes.h" 3 4
extern "C" {


  extern intmax_t imaxabs(intmax_t j);


  typedef struct {
        intmax_t quot;
        intmax_t rem;
  } imaxdiv_t;

  extern imaxdiv_t imaxdiv(intmax_t numer, intmax_t denom);


  extern intmax_t strtoimax(const char * nptr, char ** endptr, int base);
  extern uintmax_t strtoumax(const char * nptr, char ** endptr, int base);
# 290 "/usr/include/inttypes.h" 3 4
  extern intmax_t wcstoimax(const wchar_t * nptr, wchar_t ** endptr, int base);
  extern uintmax_t wcstoumax(const wchar_t * nptr, wchar_t ** endptr, int base);






}
# 46 "./macosx/macosx-tdep.h" 2
# 59 "./macosx/macosx-tdep.h"
# 1 "/usr/include/mach/mach_vm.h" 1 3 4

#define _mach_vm_user_ 
# 29 "/usr/include/mach/mach_vm.h" 3 4
#define mach_vm_MSG_COUNT 19
# 42 "/usr/include/mach/mach_vm.h" 3 4
extern "C" {






extern

kern_return_t mach_vm_allocate
(
 vm_map_t target,
 mach_vm_address_t *address,
 mach_vm_size_t size,
 int flags
);





extern

kern_return_t mach_vm_deallocate
(
 vm_map_t target,
 mach_vm_address_t address,
 mach_vm_size_t size
);





extern

kern_return_t mach_vm_protect
(
 vm_map_t target_task,
 mach_vm_address_t address,
 mach_vm_size_t size,
 boolean_t set_maximum,
 vm_prot_t new_protection
);





extern

kern_return_t mach_vm_inherit
(
 vm_map_t target_task,
 mach_vm_address_t address,
 mach_vm_size_t size,
 vm_inherit_t new_inheritance
);





extern

kern_return_t mach_vm_read
(
 vm_map_t target_task,
 mach_vm_address_t address,
 mach_vm_size_t size,
 vm_offset_t *data,
 mach_msg_type_number_t *dataCnt
);





extern

kern_return_t mach_vm_read_list
(
 vm_map_t target_task,
 mach_vm_read_entry_t data_list,
 natural_t count
);





extern

kern_return_t mach_vm_write
(
 vm_map_t target_task,
 mach_vm_address_t address,
 vm_offset_t data,
 mach_msg_type_number_t dataCnt
);





extern

kern_return_t mach_vm_copy
(
 vm_map_t target_task,
 mach_vm_address_t source_address,
 mach_vm_size_t size,
 mach_vm_address_t dest_address
);





extern

kern_return_t mach_vm_read_overwrite
(
 vm_map_t target_task,
 mach_vm_address_t address,
 mach_vm_size_t size,
 mach_vm_address_t data,
 mach_vm_size_t *outsize
);





extern

kern_return_t mach_vm_msync
(
 vm_map_t target_task,
 mach_vm_address_t address,
 mach_vm_size_t size,
 vm_sync_t sync_flags
);





extern

kern_return_t mach_vm_behavior_set
(
 vm_map_t target_task,
 mach_vm_address_t address,
 mach_vm_size_t size,
 vm_behavior_t new_behavior
);





extern

kern_return_t mach_vm_map
(
 vm_map_t target_task,
 mach_vm_address_t *address,
 mach_vm_size_t size,
 mach_vm_offset_t mask,
 int flags,
 mem_entry_name_port_t object,
 memory_object_offset_t offset,
 boolean_t copy,
 vm_prot_t cur_protection,
 vm_prot_t max_protection,
 vm_inherit_t inheritance
);





extern

kern_return_t mach_vm_machine_attribute
(
 vm_map_t target_task,
 mach_vm_address_t address,
 mach_vm_size_t size,
 vm_machine_attribute_t attribute,
 vm_machine_attribute_val_t *value
);





extern

kern_return_t mach_vm_remap
(
 vm_map_t target_task,
 mach_vm_address_t *target_address,
 mach_vm_size_t size,
 mach_vm_offset_t mask,
 boolean_t anywhere,
 vm_map_t src_task,
 mach_vm_address_t src_address,
 boolean_t copy,
 vm_prot_t *cur_protection,
 vm_prot_t *max_protection,
 vm_inherit_t inheritance
);





extern

kern_return_t mach_vm_page_query
(
 vm_map_t target_map,
 mach_vm_offset_t offset,
 integer_t *disposition,
 integer_t *ref_count
);





extern

kern_return_t mach_vm_region_recurse
(
 vm_map_t target_task,
 mach_vm_address_t *address,
 mach_vm_size_t *size,
 natural_t *nesting_depth,
 vm_region_recurse_info_t info,
 mach_msg_type_number_t *infoCnt
);





extern

kern_return_t mach_vm_region
(
 vm_map_t target_task,
 mach_vm_address_t *address,
 mach_vm_size_t *size,
 vm_region_flavor_t flavor,
 vm_region_info_t info,
 mach_msg_type_number_t *infoCnt,
 mach_port_t *object_name
);





extern

kern_return_t _mach_make_memory_entry
(
 vm_map_t target_task,
 memory_object_size_t *size,
 memory_object_offset_t offset,
 vm_prot_t permission,
 mem_entry_name_port_t *object_handle,
 mem_entry_name_port_t parent_handle
);





extern

kern_return_t mach_vm_purgable_control
(
 vm_map_t target_task,
 mach_vm_address_t address,
 vm_purgable_t control,
 int *state
);

}
# 350 "/usr/include/mach/mach_vm.h" 3 4
#define __Request__mach_vm_subsystem__defined 


#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_vm_address_t address;
  mach_vm_size_t size;
  int flags;
 } __Request__mach_vm_allocate_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_vm_address_t address;
  mach_vm_size_t size;
 } __Request__mach_vm_deallocate_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_vm_address_t address;
  mach_vm_size_t size;
  boolean_t set_maximum;
  vm_prot_t new_protection;
 } __Request__mach_vm_protect_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_vm_address_t address;
  mach_vm_size_t size;
  vm_inherit_t new_inheritance;
 } __Request__mach_vm_inherit_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_vm_address_t address;
  mach_vm_size_t size;
 } __Request__mach_vm_read_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_vm_read_entry_t data_list;
  natural_t count;
 } __Request__mach_vm_read_list_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_ool_descriptor_t data;

  NDR_record_t NDR;
  mach_vm_address_t address;
  mach_msg_type_number_t dataCnt;
 } __Request__mach_vm_write_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_vm_address_t source_address;
  mach_vm_size_t size;
  mach_vm_address_t dest_address;
 } __Request__mach_vm_copy_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_vm_address_t address;
  mach_vm_size_t size;
  mach_vm_address_t data;
 } __Request__mach_vm_read_overwrite_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_vm_address_t address;
  mach_vm_size_t size;
  vm_sync_t sync_flags;
 } __Request__mach_vm_msync_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_vm_address_t address;
  mach_vm_size_t size;
  vm_behavior_t new_behavior;
 } __Request__mach_vm_behavior_set_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t object;

  NDR_record_t NDR;
  mach_vm_address_t address;
  mach_vm_size_t size;
  mach_vm_offset_t mask;
  int flags;
  memory_object_offset_t offset;
  boolean_t copy;
  vm_prot_t cur_protection;
  vm_prot_t max_protection;
  vm_inherit_t inheritance;
 } __Request__mach_vm_map_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_vm_address_t address;
  mach_vm_size_t size;
  vm_machine_attribute_t attribute;
  vm_machine_attribute_val_t value;
 } __Request__mach_vm_machine_attribute_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t src_task;

  NDR_record_t NDR;
  mach_vm_address_t target_address;
  mach_vm_size_t size;
  mach_vm_offset_t mask;
  boolean_t anywhere;
  mach_vm_address_t src_address;
  boolean_t copy;
  vm_inherit_t inheritance;
 } __Request__mach_vm_remap_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_vm_offset_t offset;
 } __Request__mach_vm_page_query_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_vm_address_t address;
  natural_t nesting_depth;
  mach_msg_type_number_t infoCnt;
 } __Request__mach_vm_region_recurse_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_vm_address_t address;
  vm_region_flavor_t flavor;
  mach_msg_type_number_t infoCnt;
 } __Request__mach_vm_region_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t parent_handle;

  NDR_record_t NDR;
  memory_object_size_t size;
  memory_object_offset_t offset;
  vm_prot_t permission;
 } __Request___mach_make_memory_entry_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_vm_address_t address;
  vm_purgable_t control;
  int state;
 } __Request__mach_vm_purgable_control_t;

#pragma pack()






#define __RequestUnion__mach_vm_subsystem__defined 
union __RequestUnion__mach_vm_subsystem {
 __Request__mach_vm_allocate_t Request_mach_vm_allocate;
 __Request__mach_vm_deallocate_t Request_mach_vm_deallocate;
 __Request__mach_vm_protect_t Request_mach_vm_protect;
 __Request__mach_vm_inherit_t Request_mach_vm_inherit;
 __Request__mach_vm_read_t Request_mach_vm_read;
 __Request__mach_vm_read_list_t Request_mach_vm_read_list;
 __Request__mach_vm_write_t Request_mach_vm_write;
 __Request__mach_vm_copy_t Request_mach_vm_copy;
 __Request__mach_vm_read_overwrite_t Request_mach_vm_read_overwrite;
 __Request__mach_vm_msync_t Request_mach_vm_msync;
 __Request__mach_vm_behavior_set_t Request_mach_vm_behavior_set;
 __Request__mach_vm_map_t Request_mach_vm_map;
 __Request__mach_vm_machine_attribute_t Request_mach_vm_machine_attribute;
 __Request__mach_vm_remap_t Request_mach_vm_remap;
 __Request__mach_vm_page_query_t Request_mach_vm_page_query;
 __Request__mach_vm_region_recurse_t Request_mach_vm_region_recurse;
 __Request__mach_vm_region_t Request_mach_vm_region;
 __Request___mach_make_memory_entry_t Request__mach_make_memory_entry;
 __Request__mach_vm_purgable_control_t Request_mach_vm_purgable_control;
};




#define __Reply__mach_vm_subsystem__defined 


#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_vm_address_t address;
 } __Reply__mach_vm_allocate_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__mach_vm_deallocate_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__mach_vm_protect_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__mach_vm_inherit_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_ool_descriptor_t data;

  NDR_record_t NDR;
  mach_msg_type_number_t dataCnt;
 } __Reply__mach_vm_read_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_vm_read_entry_t data_list;
 } __Reply__mach_vm_read_list_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__mach_vm_write_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__mach_vm_copy_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_vm_size_t outsize;
 } __Reply__mach_vm_read_overwrite_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__mach_vm_msync_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__mach_vm_behavior_set_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_vm_address_t address;
 } __Reply__mach_vm_map_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  vm_machine_attribute_val_t value;
 } __Reply__mach_vm_machine_attribute_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_vm_address_t target_address;
  vm_prot_t cur_protection;
  vm_prot_t max_protection;
 } __Reply__mach_vm_remap_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  integer_t disposition;
  integer_t ref_count;
 } __Reply__mach_vm_page_query_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_vm_address_t address;
  mach_vm_size_t size;
  natural_t nesting_depth;
  mach_msg_type_number_t infoCnt;
  int info[19];
 } __Reply__mach_vm_region_recurse_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t object_name;

  NDR_record_t NDR;
  mach_vm_address_t address;
  mach_vm_size_t size;
  mach_msg_type_number_t infoCnt;
  int info[10];
 } __Reply__mach_vm_region_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t object_handle;

  NDR_record_t NDR;
  memory_object_size_t size;
 } __Reply___mach_make_memory_entry_t;

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  int state;
 } __Reply__mach_vm_purgable_control_t;

#pragma pack()






#define __ReplyUnion__mach_vm_subsystem__defined 
union __ReplyUnion__mach_vm_subsystem {
 __Reply__mach_vm_allocate_t Reply_mach_vm_allocate;
 __Reply__mach_vm_deallocate_t Reply_mach_vm_deallocate;
 __Reply__mach_vm_protect_t Reply_mach_vm_protect;
 __Reply__mach_vm_inherit_t Reply_mach_vm_inherit;
 __Reply__mach_vm_read_t Reply_mach_vm_read;
 __Reply__mach_vm_read_list_t Reply_mach_vm_read_list;
 __Reply__mach_vm_write_t Reply_mach_vm_write;
 __Reply__mach_vm_copy_t Reply_mach_vm_copy;
 __Reply__mach_vm_read_overwrite_t Reply_mach_vm_read_overwrite;
 __Reply__mach_vm_msync_t Reply_mach_vm_msync;
 __Reply__mach_vm_behavior_set_t Reply_mach_vm_behavior_set;
 __Reply__mach_vm_map_t Reply_mach_vm_map;
 __Reply__mach_vm_machine_attribute_t Reply_mach_vm_machine_attribute;
 __Reply__mach_vm_remap_t Reply_mach_vm_remap;
 __Reply__mach_vm_page_query_t Reply_mach_vm_page_query;
 __Reply__mach_vm_region_recurse_t Reply_mach_vm_region_recurse;
 __Reply__mach_vm_region_t Reply_mach_vm_region;
 __Reply___mach_make_memory_entry_t Reply__mach_make_memory_entry;
 __Reply__mach_vm_purgable_control_t Reply_mach_vm_purgable_control;
};



#define subsystem_to_name_map_mach_vm { "mach_vm_allocate", 4800 }, { "mach_vm_deallocate", 4801 }, { "mach_vm_protect", 4802 }, { "mach_vm_inherit", 4803 }, { "mach_vm_read", 4804 }, { "mach_vm_read_list", 4805 }, { "mach_vm_write", 4806 }, { "mach_vm_copy", 4807 }, { "mach_vm_read_overwrite", 4808 }, { "mach_vm_msync", 4809 }, { "mach_vm_behavior_set", 4810 }, { "mach_vm_map", 4811 }, { "mach_vm_machine_attribute", 4812 }, { "mach_vm_remap", 4813 }, { "mach_vm_page_query", 4814 }, { "mach_vm_region_recurse", 4815 }, { "mach_vm_region", 4816 }, { "_mach_make_memory_entry", 4817 }, { "mach_vm_purgable_control", 4818 }
# 60 "./macosx/macosx-tdep.h" 2
# 84 "./macosx/macosx-tdep.h"

# 84 "./macosx/macosx-tdep.h"
struct internal_nlist;
struct external_nlist;
struct objfile;
extern enum gdb_osabi osabi_seen_in_attached_dyld;

extern int disable_aslr_flag;

extern CORE_ADDR kernel_slide;

struct loaded_kext_info {
  char name[
# 94 "./macosx/macosx-tdep.h" 3 4
               64
# 94 "./macosx/macosx-tdep.h"
                            ];
  uuid_t uuid;
  uint64_t address;
};

struct loaded_kexts_table {
  uint32_t version;
  uint32_t entry_size;
  uint32_t count;
  struct loaded_kext_info *kexts;
};

void macosx_internalize_symbol(struct internal_nlist *in, int *sect_p,
                               struct external_nlist *ext, bfd *abfd);

const char *dyld_symbol_stub_function_name(CORE_ADDR pc);
CORE_ADDR dyld_symbol_stub_function_address(CORE_ADDR pc, const char **name);

CORE_ADDR macosx_skip_trampoline_code(CORE_ADDR pc);
int macosx_in_solib_return_trampoline(CORE_ADDR pc, const char *name);
int macosx_in_solib_call_trampoline(CORE_ADDR pc, char *name);
int macosx_record_symbols_from_sect_p(bfd *abfd, unsigned char macho_type,
          unsigned char macho_sect);


CFMutableDictionaryRef create_dsym_uuids_for_path(char *dsym_bundle_path);


void paths_and_uuids_map_func(const void *in_url, const void *in_array,
                              void *in_results);



void find_source_path_mappings_posix(struct objfile *objfile,
                                     const char *dsym);


char *macosx_locate_dsym(struct objfile *objfile);

char *locate_kext_executable_by_dsym_plist(CFDictionaryRef dsym_info,
                                           CFUUIDRef uuid_ref);
char *locate_kext_executable_by_dsym_url(CFURLRef dsym_url);

char *macosx_locate_kext_executable_by_symfile(bfd *abfd);
struct objfile *macosx_find_objfile_matching_dsym_in_bundle(char *dsym_bundle_path,
           char **out_full_path);

int macosx_get_uuid_for_path(const char *filename, unsigned char uuid[], unsigned long len);

char *macosx_kext_info(const char *filename,
                       const char **bundle_executable_name_from_plist,
                       const char **bundle_identifier_name_from_plist);

enum gdb_osabi generic_mach_o_osabi_sniffer(bfd *abfd, enum bfd_architecture arch,
                                            unsigned long mach_32,
                                            unsigned long mach_64,
                                            int (*query_64_bit_fn)(void));

int fast_show_stack_trace_prologue(unsigned int count_limit,
                                   unsigned int print_start,
                                   unsigned int print_end,
                                   unsigned int wordsize,
                                   CORE_ADDR *sigtramp_start_ptr,
                                   CORE_ADDR *sigtramp_end_ptr,
                                   unsigned int *count,
                                   struct frame_info **fi,
                                   void (print_fun)(struct ui_out *uiout, int *frame_num,
                                                    CORE_ADDR pc, CORE_ADDR fp));

int macosx_enable_exception_callback(enum exception_event_kind kind, int enable);

struct symtabs_and_lines *macosx_find_exception_catchpoints(enum exception_event_kind kind, struct objfile *restrict_objfile);

struct exception_event_record *macosx_get_current_exception_event(void);

struct loaded_kexts_table *get_list_of_loaded_kexts(void);

extern void free_list_of_loaded_kexts(struct loaded_kexts_table *lks);

struct section_addr_info *get_section_addresses_for_macho_in_memory(CORE_ADDR mh_addr);

struct section_addr_info *get_section_addrs_of_macho_on_disk(const char *filename);

struct section_addr_info *get_section_addresses_for_bfd(bfd *abfd);

struct section_addr_info *macosx_get_kext_sect_addrs_from_kernel(const char *kext_filename, uint8_t **kext_uuids, const char *kext_bundle_ident);

char *macosx_pid_or_tid_to_str(ptid_t ptid);

int exhaustive_search_for_kernel_in_mem(struct objfile *ofile, CORE_ADDR *addr, uuid_t *uuid_output);

int dir_exists_p(const char *dir);

char *strtrunc(char *str, const char *substr);

char *expand_kext_cstr(const char *kext_path);


char *macosx_locate_executable_by_dbg_shell_command(CFStringRef uuid);


void update_command(const char *args, int from_tty);
void stack_flush_command(const char *args, int from_tty);


CFUUIDRef get_uuidref_for_uuid_t(uint8_t *uuid);


CORE_ADDR get_load_addr_of_macho_on_disk(const char *filename, enum gdb_osabi osabi);

int get_information_about_macho(const char *filename, CORE_ADDR mh_addr, bfd *abfd,
                                int require_kernel, int force_live_memory_reads,
                                uuid_t *uuid, enum gdb_osabi *osabi,
                                int *wordsize, CORE_ADDR *intended_load_address, CORE_ADDR *slide,
                                struct section_addr_info **addrs);

int slide_kernel_objfile(struct objfile *o, CORE_ADDR in_memory_addr, uuid_t in_memory_uuid, enum gdb_osabi osabi);

int try_to_find_and_load_kernel_via_uuid(CORE_ADDR in_memory_addr, uuid_t in_memory_uuid, enum gdb_osabi osabi);


struct gdb_copy_dyld_cache_local_symbols_entry
{
  uint32_t dylibOffset;
  uint32_t nlistStartIndex;
  uint32_t nlistCount;
};

extern uint8_t *dyld_shared_cache_local_nlists;
extern int dyld_shared_cache_local_nlists_count;
extern char *dyld_shared_cache_strings;
extern int dyld_shared_cache_strings_size;
extern struct gdb_copy_dyld_cache_local_symbols_entry *dyld_shared_cache_entries;
extern int dyld_shared_cache_entries_count;

void free_dyld_shared_cache_local_syms(void);
void get_dyld_shared_cache_local_syms(void);
struct gdb_copy_dyld_cache_local_symbols_entry *get_dyld_shared_cache_entry(CORE_ADDR intended_load_addr);
# 26 "config/tm-macosx.h" 2

#define BLOCK_ADDRESS_ABSOLUTE 1

#define BELIEVE_PCC_PROMOTION 1






#define INTERNALIZE_SYMBOL(intern,sect_p,extern,abfd) macosx_internalize_symbol(&intern, &sect_p, extern, abfd)


#define SOFUN_ADDRESS_MAYBE_MISSING 
#define TEXT_SEGMENT_NAME "LC_SEGMENT.__TEXT"
#define TEXT_SECTION_NAME "LC_SEGMENT.__TEXT.__text"
#define COALESCED_TEXT_SECTION_NAME "LC_SEGMENT.__TEXT.__textcoal_nt"
#define DATA_SECTION_NAME "LC_SEGMENT.__DATA.__data"
#define BSS_SECTION_NAME "LC_SEGMENT.__DATA.__bss"

#define TM_NEXTSTEP 1
#define MACOSX_DYLD 1
#define ATTACH_DETACH 
#define ATTACH_NO_WAIT 

#define SOLIB_ADD(filename,from_tty,targ,loadsyms) macosx_solib_add(filename, from_tty, targ, loadsyms)


#define SOLIB_IN_DYNAMIC_LINKER(pid,pc) 0

#define SOLIB_UNLOADED_LIBRARY_PATHNAME(pid) 0

#define SOLIB_LOADED_LIBRARY_PATHNAME(pid) 0

#define SOLIB_CREATE_CATCH_LOAD_HOOK(pid,tempflag,filename,cond_string) error("catch of library loads/unloads not yet implemented on this platform")


#define SOLIB_CREATE_CATCH_UNLOAD_HOOK(pid,tempflag,filename,cond_string) error("catch of library loads/unloads not yet implemented on this platform")


extern void macosx_add_shared_symbol_files(void);
#define ADD_SHARED_SYMBOL_FILES(args,from_tty) macosx_add_shared_symbol_files(args, from_tty)



const char *macosx_pc_solib(CORE_ADDR addr);
#define PC_SOLIB(addr) ((char *)macosx_pc_solib(addr))


#define target_pid_or_tid_to_str(PTID) macosx_pid_or_tid_to_str(PTID)
# 29 "tm.h" 2
# 1 "./macosx/tm-i386-macosx.h" 1





#define __GDB_TM_i386_MACOSX_H__ 1

int i386_fast_show_stack(unsigned int count_limit,
                         unsigned int print_start, unsigned int print_end,
                         unsigned int *count,
                         void (print_fun)(struct ui_out * uiout,
                                          int *frame_num,
                                          CORE_ADDR pc, CORE_ADDR fp));
#define FAST_COUNT_STACK_DEPTH(count_limit,print_start,print_end,count,print_fun) (i386_fast_show_stack(count_limit, print_start, print_end, count, print_fun))


char *i386_throw_catch_find_typeinfo(struct frame_info *curr_frame,
                                     int exception_type);
#define THROW_CATCH_FIND_TYPEINFO(curr_frame,exception_type) (i386_throw_catch_find_typeinfo(curr_frame, exception_type))
# 30 "tm.h" 2
# 1153 "defs.h" 2
# 1164 "defs.h"
# 1 "./../include/fopen-bin.h" 1
# 17 "./../include/fopen-bin.h"
#define FOPEN_RB "rb"
#define FOPEN_WB "wb"
#define FOPEN_AB "ab"
#define FOPEN_RUB "r+b"
#define FOPEN_WUB "w+b"
#define FOPEN_AUB "a+b"

#define FOPEN_RT "r"
#define FOPEN_WT "w"
#define FOPEN_AT "a"
#define FOPEN_RUT "r+"
#define FOPEN_WUT "w+"
#define FOPEN_AUT "a+"
# 1165 "defs.h" 2
# 1191 "defs.h"
#define ULONGEST_MAX (~(ULONGEST)0UL)



#define LONGEST_MAX ((LONGEST)(ULONGEST_MAX >> 1L))






extern int longest_to_int(long long)
  __attribute__((warn_unused_result));




extern char *savestring(const char *, size_t)
  __attribute__((warn_unused_result));


extern char *msavestring(void *, const char *, size_t)
  __attribute__((warn_unused_result));

extern char *strsave(const char *ptr)
  __attribute__((warn_unused_result));

extern char *mstrsave(void *, const char *)
  __attribute__((warn_unused_result));



extern void *xmmalloc(void *md, size_t size)
  __attribute__((warn_unused_result)) __attribute__((__malloc__));
extern void *xmrealloc(void *md, void *ptr, size_t size)
  __attribute__((warn_unused_result)) __attribute__((__malloc__));
extern void *xmcalloc(void *md, size_t number, size_t size)
  __attribute__((warn_unused_result)) __attribute__((__malloc__));
extern void xmfree(void *md, void *ptr);
# 1239 "defs.h"
extern void *xzalloc(size_t)
  __attribute__((warn_unused_result)) __attribute__((__malloc__));




#define XZALLOC(TYPE) ((TYPE*)xzalloc(sizeof(TYPE)))
#define XMALLOC(TYPE) ((TYPE*)xmalloc(sizeof(TYPE)))
#define XCALLOC(NMEMB,TYPE) ((TYPE*)xcalloc((NMEMB), sizeof(TYPE)))



extern void xasprintf(char **ret, const char *format, ...) __attribute__((format(printf, 2, 3)));







extern char *xstrprintf(const char *format, ...) __attribute__((format(printf, 1, 2)));
extern char *xstrvprintf(const char *format, va_list ap)
     __attribute__((format(gnu_printf, 1, 0)));


extern int xsnprintf(char *str, size_t size, const char *format, ...)
     __attribute__((format(printf, 3, 4)));

extern int parse_escape(const char **);


extern const char *error_pre_print;


extern const char *quit_pre_print;


extern const char *warning_pre_print;

extern void verror(const char *fmt, va_list ap)
     __attribute__((noreturn)) __attribute__((format(printf, 1, 0)));

extern void error(const char *fmt, ...) __attribute__((noreturn)) __attribute__((format(printf, 1, 2)));

extern void error_stream(struct ui_file *) __attribute__((noreturn));

extern void vfatal(const char *fmt, va_list ap)
     __attribute__((noreturn)) __attribute__((format(printf, 1, 0)));

extern void fatal(const char *fmt, ...) __attribute__((noreturn)) __attribute__((format(printf, 1, 2)));

extern void internal_verror(const char *file, int line,
         const char *, va_list ap)
     __attribute__((noreturn)) __attribute__((format(printf, 3, 0)));

extern void internal_error(const char *file, int line,
        const char *, ...) __attribute__((noreturn)) __attribute__((format(printf, 3, 4)));

extern void internal_vwarning(const char *file, int line,
         const char *, va_list ap)
     __attribute__((format(printf, 3, 0)));

extern void internal_warning(const char *file, int line,
        const char *, ...) __attribute__((format(printf, 3, 4)));

extern void nomem(long) __attribute__((noreturn));

extern void warning(const char *, ...) __attribute__((format(printf, 1, 2)));

extern void vwarning(const char *, va_list args) __attribute__((format(printf, 1, 0)));
# 1320 "defs.h"
# 1 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/stddef.h" 1 3 4
# 1321 "defs.h" 2







# 1 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/stdlib.h" 1 3
# 1329 "defs.h" 2







#define min(a,b) ((a) < (b) ? (a) : (b))



#define max(a,b) ((a) > (b) ? (a) : (b))
# 1370 "defs.h"
# 1 "gdbarch.h" 1
# 725 "gdbarch.sh"
# 773 "gdbarch.sh"

#define GDBARCH_H 

struct address_context;
struct floatformat;
struct ui_file;
struct frame_info;
struct value;
struct objfile;
struct minimal_symbol;
struct regcache;
struct reggroup;
struct regset;
struct disassemble_info;
struct target_ops;
struct obstack;

extern struct gdbarch *current_gdbarch;




extern const struct bfd_arch_info * gdbarch_bfd_arch_info (struct gdbarch *gdbarch);





#define TARGET_ARCHITECTURE (gdbarch_bfd_arch_info (current_gdbarch))


extern int gdbarch_byte_order (struct gdbarch *gdbarch);





#define TARGET_BYTE_ORDER (gdbarch_byte_order (current_gdbarch))


extern enum gdb_osabi gdbarch_osabi (struct gdbarch *gdbarch);





#define TARGET_OSABI (gdbarch_osabi (current_gdbarch))
# 831 "gdbarch.sh"
extern int gdbarch_short_bit (struct gdbarch *gdbarch);
extern void set_gdbarch_short_bit (struct gdbarch *gdbarch, int short_bit);




#define TARGET_SHORT_BIT (gdbarch_short_bit (current_gdbarch))




extern int gdbarch_int_bit (struct gdbarch *gdbarch);
extern void set_gdbarch_int_bit (struct gdbarch *gdbarch, int int_bit);




#define TARGET_INT_BIT (gdbarch_int_bit (current_gdbarch))




extern int gdbarch_long_bit (struct gdbarch *gdbarch);
extern void set_gdbarch_long_bit (struct gdbarch *gdbarch, int long_bit);




#define TARGET_LONG_BIT (gdbarch_long_bit (current_gdbarch))





extern int gdbarch_long_long_bit (struct gdbarch *gdbarch);
extern void set_gdbarch_long_long_bit (struct gdbarch *gdbarch, int long_long_bit);




#define TARGET_LONG_LONG_BIT (gdbarch_long_long_bit (current_gdbarch))






extern int gdbarch_float_bit (struct gdbarch *gdbarch);
extern void set_gdbarch_float_bit (struct gdbarch *gdbarch, int float_bit);




#define TARGET_FLOAT_BIT (gdbarch_float_bit (current_gdbarch))


extern const struct floatformat * gdbarch_float_format (struct gdbarch *gdbarch);
extern void set_gdbarch_float_format (struct gdbarch *gdbarch, const struct floatformat * float_format);




#define TARGET_FLOAT_FORMAT (gdbarch_float_format (current_gdbarch))


extern int gdbarch_double_bit (struct gdbarch *gdbarch);
extern void set_gdbarch_double_bit (struct gdbarch *gdbarch, int double_bit);




#define TARGET_DOUBLE_BIT (gdbarch_double_bit (current_gdbarch))


extern const struct floatformat * gdbarch_double_format (struct gdbarch *gdbarch);
extern void set_gdbarch_double_format (struct gdbarch *gdbarch, const struct floatformat * double_format);




#define TARGET_DOUBLE_FORMAT (gdbarch_double_format (current_gdbarch))


extern int gdbarch_long_double_bit (struct gdbarch *gdbarch);
extern void set_gdbarch_long_double_bit (struct gdbarch *gdbarch, int long_double_bit);




#define TARGET_LONG_DOUBLE_BIT (gdbarch_long_double_bit (current_gdbarch))


extern const struct floatformat * gdbarch_long_double_format (struct gdbarch *gdbarch);
extern void set_gdbarch_long_double_format (struct gdbarch *gdbarch, const struct floatformat * long_double_format);




#define TARGET_LONG_DOUBLE_FORMAT (gdbarch_long_double_format (current_gdbarch))
# 942 "gdbarch.sh"
extern int gdbarch_ptr_bit (struct gdbarch *gdbarch);
extern void set_gdbarch_ptr_bit (struct gdbarch *gdbarch, int ptr_bit);




#define TARGET_PTR_BIT (gdbarch_ptr_bit (current_gdbarch))




extern int gdbarch_addr_bit (struct gdbarch *gdbarch);
extern void set_gdbarch_addr_bit (struct gdbarch *gdbarch, int addr_bit);




#define TARGET_ADDR_BIT (gdbarch_addr_bit (current_gdbarch))




extern int gdbarch_bfd_vma_bit (struct gdbarch *gdbarch);
extern void set_gdbarch_bfd_vma_bit (struct gdbarch *gdbarch, int bfd_vma_bit);




#define TARGET_BFD_VMA_BIT (gdbarch_bfd_vma_bit (current_gdbarch))




extern int gdbarch_char_signed (struct gdbarch *gdbarch);
extern void set_gdbarch_char_signed (struct gdbarch *gdbarch, int char_signed);




#define TARGET_CHAR_SIGNED (gdbarch_char_signed (current_gdbarch))
# 991 "gdbarch.sh"
extern int gdbarch_read_pc_p (struct gdbarch *gdbarch);




#define TARGET_READ_PC_P() (gdbarch_read_pc_p (current_gdbarch))


typedef CORE_ADDR (gdbarch_read_pc_ftype) (ptid_t ptid);
extern CORE_ADDR gdbarch_read_pc (struct gdbarch *gdbarch, ptid_t ptid);
extern void set_gdbarch_read_pc (struct gdbarch *gdbarch, gdbarch_read_pc_ftype *read_pc);




#define TARGET_READ_PC(ptid) (gdbarch_read_pc (current_gdbarch, ptid))


typedef void (gdbarch_write_pc_ftype) (CORE_ADDR val, ptid_t ptid);
extern void gdbarch_write_pc (struct gdbarch *gdbarch, CORE_ADDR val, ptid_t ptid);
extern void set_gdbarch_write_pc (struct gdbarch *gdbarch, gdbarch_write_pc_ftype *write_pc);




#define TARGET_WRITE_PC(val,ptid) (gdbarch_write_pc (current_gdbarch, val, ptid))
# 1028 "gdbarch.sh"
extern int gdbarch_read_sp_p (struct gdbarch *gdbarch);




#define TARGET_READ_SP_P() (gdbarch_read_sp_p (current_gdbarch))


typedef CORE_ADDR (gdbarch_read_sp_ftype) (void);
extern CORE_ADDR gdbarch_read_sp (struct gdbarch *gdbarch);
extern void set_gdbarch_read_sp (struct gdbarch *gdbarch, gdbarch_read_sp_ftype *read_sp);




#define TARGET_READ_SP() (gdbarch_read_sp (current_gdbarch))






typedef void (gdbarch_virtual_frame_pointer_ftype) (CORE_ADDR pc, int *frame_regnum, long long *frame_offset);
extern void gdbarch_virtual_frame_pointer (struct gdbarch *gdbarch, CORE_ADDR pc, int *frame_regnum, long long *frame_offset);
extern void set_gdbarch_virtual_frame_pointer (struct gdbarch *gdbarch, gdbarch_virtual_frame_pointer_ftype *virtual_frame_pointer);




#define TARGET_VIRTUAL_FRAME_POINTER(pc,frame_regnum,frame_offset) (gdbarch_virtual_frame_pointer (current_gdbarch, pc, frame_regnum, frame_offset))


extern int gdbarch_pseudo_register_read_p (struct gdbarch *gdbarch);

typedef void (gdbarch_pseudo_register_read_ftype) (struct gdbarch *gdbarch, struct regcache *regcache, int cookednum, gdb_byte *buf);
extern void gdbarch_pseudo_register_read (struct gdbarch *gdbarch, struct regcache *regcache, int cookednum, gdb_byte *buf);
extern void set_gdbarch_pseudo_register_read (struct gdbarch *gdbarch, gdbarch_pseudo_register_read_ftype *pseudo_register_read);

extern int gdbarch_pseudo_register_write_p (struct gdbarch *gdbarch);

typedef void (gdbarch_pseudo_register_write_ftype) (struct gdbarch *gdbarch, struct regcache *regcache, int cookednum, const gdb_byte *buf);
extern void gdbarch_pseudo_register_write (struct gdbarch *gdbarch, struct regcache *regcache, int cookednum, const gdb_byte *buf);
extern void set_gdbarch_pseudo_register_write (struct gdbarch *gdbarch, gdbarch_pseudo_register_write_ftype *pseudo_register_write);

extern int gdbarch_num_regs (struct gdbarch *gdbarch);
extern void set_gdbarch_num_regs (struct gdbarch *gdbarch, int num_regs);




#define NUM_REGS (gdbarch_num_regs (current_gdbarch))







extern int gdbarch_num_pseudo_regs (struct gdbarch *gdbarch);
extern void set_gdbarch_num_pseudo_regs (struct gdbarch *gdbarch, int num_pseudo_regs);




#define NUM_PSEUDO_REGS (gdbarch_num_pseudo_regs (current_gdbarch))







extern int gdbarch_sp_regnum (struct gdbarch *gdbarch);
extern void set_gdbarch_sp_regnum (struct gdbarch *gdbarch, int sp_regnum);




#define SP_REGNUM (gdbarch_sp_regnum (current_gdbarch))


extern int gdbarch_pc_regnum (struct gdbarch *gdbarch);
extern void set_gdbarch_pc_regnum (struct gdbarch *gdbarch, int pc_regnum);




#define PC_REGNUM (gdbarch_pc_regnum (current_gdbarch))


extern int gdbarch_ps_regnum (struct gdbarch *gdbarch);
extern void set_gdbarch_ps_regnum (struct gdbarch *gdbarch, int ps_regnum);




#define PS_REGNUM (gdbarch_ps_regnum (current_gdbarch))


extern int gdbarch_fp0_regnum (struct gdbarch *gdbarch);
extern void set_gdbarch_fp0_regnum (struct gdbarch *gdbarch, int fp0_regnum);




#define FP0_REGNUM (gdbarch_fp0_regnum (current_gdbarch))




typedef int (gdbarch_stab_reg_to_regnum_ftype) (int stab_regnr);
extern int gdbarch_stab_reg_to_regnum (struct gdbarch *gdbarch, int stab_regnr);
extern void set_gdbarch_stab_reg_to_regnum (struct gdbarch *gdbarch, gdbarch_stab_reg_to_regnum_ftype *stab_reg_to_regnum);




#define STAB_REG_TO_REGNUM(stab_regnr) (gdbarch_stab_reg_to_regnum (current_gdbarch, stab_regnr))




typedef int (gdbarch_ecoff_reg_to_regnum_ftype) (int ecoff_regnr);
extern int gdbarch_ecoff_reg_to_regnum (struct gdbarch *gdbarch, int ecoff_regnr);
extern void set_gdbarch_ecoff_reg_to_regnum (struct gdbarch *gdbarch, gdbarch_ecoff_reg_to_regnum_ftype *ecoff_reg_to_regnum);




#define ECOFF_REG_TO_REGNUM(ecoff_regnr) (gdbarch_ecoff_reg_to_regnum (current_gdbarch, ecoff_regnr))




typedef int (gdbarch_dwarf_reg_to_regnum_ftype) (int dwarf_regnr);
extern int gdbarch_dwarf_reg_to_regnum (struct gdbarch *gdbarch, int dwarf_regnr);
extern void set_gdbarch_dwarf_reg_to_regnum (struct gdbarch *gdbarch, gdbarch_dwarf_reg_to_regnum_ftype *dwarf_reg_to_regnum);




#define DWARF_REG_TO_REGNUM(dwarf_regnr) (gdbarch_dwarf_reg_to_regnum (current_gdbarch, dwarf_regnr))




typedef int (gdbarch_sdb_reg_to_regnum_ftype) (int sdb_regnr);
extern int gdbarch_sdb_reg_to_regnum (struct gdbarch *gdbarch, int sdb_regnr);
extern void set_gdbarch_sdb_reg_to_regnum (struct gdbarch *gdbarch, gdbarch_sdb_reg_to_regnum_ftype *sdb_reg_to_regnum);




#define SDB_REG_TO_REGNUM(sdb_regnr) (gdbarch_sdb_reg_to_regnum (current_gdbarch, sdb_regnr))


typedef int (gdbarch_dwarf2_reg_to_regnum_ftype) (int dwarf2_regnr);
extern int gdbarch_dwarf2_reg_to_regnum (struct gdbarch *gdbarch, int dwarf2_regnr);
extern void set_gdbarch_dwarf2_reg_to_regnum (struct gdbarch *gdbarch, gdbarch_dwarf2_reg_to_regnum_ftype *dwarf2_reg_to_regnum);




#define DWARF2_REG_TO_REGNUM(dwarf2_regnr) (gdbarch_dwarf2_reg_to_regnum (current_gdbarch, dwarf2_regnr))


typedef const char * (gdbarch_register_name_ftype) (int regnr);
extern const char * gdbarch_register_name (struct gdbarch *gdbarch, int regnr);
extern void set_gdbarch_register_name (struct gdbarch *gdbarch, gdbarch_register_name_ftype *register_name);




#define REGISTER_NAME(regnr) (gdbarch_register_name (current_gdbarch, regnr))




extern int gdbarch_register_type_p (struct gdbarch *gdbarch);

typedef struct type * (gdbarch_register_type_ftype) (struct gdbarch *gdbarch, int reg_nr);
extern struct type * gdbarch_register_type (struct gdbarch *gdbarch, int reg_nr);
extern void set_gdbarch_register_type (struct gdbarch *gdbarch, gdbarch_register_type_ftype *register_type);
# 1227 "gdbarch.sh"
extern int gdbarch_deprecated_register_byte_p (struct gdbarch *gdbarch);




#define DEPRECATED_REGISTER_BYTE_P() (gdbarch_deprecated_register_byte_p (current_gdbarch))


typedef int (gdbarch_deprecated_register_byte_ftype) (int reg_nr);
extern int gdbarch_deprecated_register_byte (struct gdbarch *gdbarch, int reg_nr);
extern void set_gdbarch_deprecated_register_byte (struct gdbarch *gdbarch, gdbarch_deprecated_register_byte_ftype *deprecated_register_byte);




#define DEPRECATED_REGISTER_BYTE(reg_nr) (gdbarch_deprecated_register_byte (current_gdbarch, reg_nr))




extern int gdbarch_unwind_dummy_id_p (struct gdbarch *gdbarch);

typedef struct frame_id (gdbarch_unwind_dummy_id_ftype) (struct gdbarch *gdbarch, struct frame_info *info);
extern struct frame_id gdbarch_unwind_dummy_id (struct gdbarch *gdbarch, struct frame_info *info);
extern void set_gdbarch_unwind_dummy_id (struct gdbarch *gdbarch, gdbarch_unwind_dummy_id_ftype *unwind_dummy_id);




extern int gdbarch_deprecated_fp_regnum (struct gdbarch *gdbarch);
extern void set_gdbarch_deprecated_fp_regnum (struct gdbarch *gdbarch, int deprecated_fp_regnum);




#define DEPRECATED_FP_REGNUM (gdbarch_deprecated_fp_regnum (current_gdbarch))





extern int gdbarch_push_dummy_call_p (struct gdbarch *gdbarch);

typedef CORE_ADDR (gdbarch_push_dummy_call_ftype) (struct gdbarch *gdbarch, struct value *function, struct regcache *regcache, CORE_ADDR bp_addr, int nargs, struct value **args, CORE_ADDR sp, int struct_return, CORE_ADDR struct_addr);
extern CORE_ADDR gdbarch_push_dummy_call (struct gdbarch *gdbarch, struct value *function, struct regcache *regcache, CORE_ADDR bp_addr, int nargs, struct value **args, CORE_ADDR sp, int struct_return, CORE_ADDR struct_addr);
extern void set_gdbarch_push_dummy_call (struct gdbarch *gdbarch, gdbarch_push_dummy_call_ftype *push_dummy_call);
# 1283 "gdbarch.sh"
extern int gdbarch_deprecated_push_arguments_p (struct gdbarch *gdbarch);




#define DEPRECATED_PUSH_ARGUMENTS_P() (gdbarch_deprecated_push_arguments_p (current_gdbarch))


typedef CORE_ADDR (gdbarch_deprecated_push_arguments_ftype) (int nargs, struct value **args, CORE_ADDR sp, int struct_return, CORE_ADDR struct_addr);
extern CORE_ADDR gdbarch_deprecated_push_arguments (struct gdbarch *gdbarch, int nargs, struct value **args, CORE_ADDR sp, int struct_return, CORE_ADDR struct_addr);
extern void set_gdbarch_deprecated_push_arguments (struct gdbarch *gdbarch, gdbarch_deprecated_push_arguments_ftype *deprecated_push_arguments);




#define DEPRECATED_PUSH_ARGUMENTS(nargs,args,sp,struct_return,struct_addr) (gdbarch_deprecated_push_arguments (current_gdbarch, nargs, args, sp, struct_return, struct_addr))




extern int gdbarch_deprecated_register_size (struct gdbarch *gdbarch);
extern void set_gdbarch_deprecated_register_size (struct gdbarch *gdbarch, int deprecated_register_size);




#define DEPRECATED_REGISTER_SIZE (gdbarch_deprecated_register_size (current_gdbarch))


extern int gdbarch_call_dummy_location (struct gdbarch *gdbarch);
extern void set_gdbarch_call_dummy_location (struct gdbarch *gdbarch, int call_dummy_location);




#define CALL_DUMMY_LOCATION (gdbarch_call_dummy_location (current_gdbarch))


extern int gdbarch_push_dummy_code_p (struct gdbarch *gdbarch);

typedef CORE_ADDR (gdbarch_push_dummy_code_ftype) (struct gdbarch *gdbarch, CORE_ADDR sp, CORE_ADDR funaddr, int using_gcc, struct value **args, int nargs, struct type *value_type, CORE_ADDR *real_pc, CORE_ADDR *bp_addr);
extern CORE_ADDR gdbarch_push_dummy_code (struct gdbarch *gdbarch, CORE_ADDR sp, CORE_ADDR funaddr, int using_gcc, struct value **args, int nargs, struct type *value_type, CORE_ADDR *real_pc, CORE_ADDR *bp_addr);
extern void set_gdbarch_push_dummy_code (struct gdbarch *gdbarch, gdbarch_push_dummy_code_ftype *push_dummy_code);

typedef void (gdbarch_print_registers_info_ftype) (struct gdbarch *gdbarch, struct ui_file *file, struct frame_info *frame, int regnum, int all);
extern void gdbarch_print_registers_info (struct gdbarch *gdbarch, struct ui_file *file, struct frame_info *frame, int regnum, int all);
extern void set_gdbarch_print_registers_info (struct gdbarch *gdbarch, gdbarch_print_registers_info_ftype *print_registers_info);

extern int gdbarch_print_float_info_p (struct gdbarch *gdbarch);

typedef void (gdbarch_print_float_info_ftype) (struct gdbarch *gdbarch, struct ui_file *file, struct frame_info *frame, const char *args);
extern void gdbarch_print_float_info (struct gdbarch *gdbarch, struct ui_file *file, struct frame_info *frame, const char *args);
extern void set_gdbarch_print_float_info (struct gdbarch *gdbarch, gdbarch_print_float_info_ftype *print_float_info);

extern int gdbarch_print_vector_info_p (struct gdbarch *gdbarch);

typedef void (gdbarch_print_vector_info_ftype) (struct gdbarch *gdbarch, struct ui_file *file, struct frame_info *frame, const char *args);
extern void gdbarch_print_vector_info (struct gdbarch *gdbarch, struct ui_file *file, struct frame_info *frame, const char *args);
extern void set_gdbarch_print_vector_info (struct gdbarch *gdbarch, gdbarch_print_vector_info_ftype *print_vector_info);




typedef int (gdbarch_register_sim_regno_ftype) (int reg_nr);
extern int gdbarch_register_sim_regno (struct gdbarch *gdbarch, int reg_nr);
extern void set_gdbarch_register_sim_regno (struct gdbarch *gdbarch, gdbarch_register_sim_regno_ftype *register_sim_regno);




#define REGISTER_SIM_REGNO(reg_nr) (gdbarch_register_sim_regno (current_gdbarch, reg_nr))
# 1363 "gdbarch.sh"
extern int gdbarch_register_bytes_ok_p (struct gdbarch *gdbarch);




#define REGISTER_BYTES_OK_P() (gdbarch_register_bytes_ok_p (current_gdbarch))


typedef int (gdbarch_register_bytes_ok_ftype) (long nr_bytes);
extern int gdbarch_register_bytes_ok (struct gdbarch *gdbarch, long nr_bytes);
extern void set_gdbarch_register_bytes_ok (struct gdbarch *gdbarch, gdbarch_register_bytes_ok_ftype *register_bytes_ok);




#define REGISTER_BYTES_OK(nr_bytes) (gdbarch_register_bytes_ok (current_gdbarch, nr_bytes))


typedef int (gdbarch_cannot_fetch_register_ftype) (int regnum);
extern int gdbarch_cannot_fetch_register (struct gdbarch *gdbarch, int regnum);
extern void set_gdbarch_cannot_fetch_register (struct gdbarch *gdbarch, gdbarch_cannot_fetch_register_ftype *cannot_fetch_register);




#define CANNOT_FETCH_REGISTER(regnum) (gdbarch_cannot_fetch_register (current_gdbarch, regnum))


typedef int (gdbarch_cannot_store_register_ftype) (int regnum);
extern int gdbarch_cannot_store_register (struct gdbarch *gdbarch, int regnum);
extern void set_gdbarch_cannot_store_register (struct gdbarch *gdbarch, gdbarch_cannot_store_register_ftype *cannot_store_register);




#define CANNOT_STORE_REGISTER(regnum) (gdbarch_cannot_store_register (current_gdbarch, regnum))
# 1410 "gdbarch.sh"
extern int gdbarch_get_longjmp_target_p (struct gdbarch *gdbarch);




#define GET_LONGJMP_TARGET_P() (gdbarch_get_longjmp_target_p (current_gdbarch))


typedef int (gdbarch_get_longjmp_target_ftype) (CORE_ADDR *pc);
extern int gdbarch_get_longjmp_target (struct gdbarch *gdbarch, CORE_ADDR *pc);
extern void set_gdbarch_get_longjmp_target (struct gdbarch *gdbarch, gdbarch_get_longjmp_target_ftype *get_longjmp_target);




#define GET_LONGJMP_TARGET(pc) (gdbarch_get_longjmp_target (current_gdbarch, pc))


extern int gdbarch_believe_pcc_promotion (struct gdbarch *gdbarch);
extern void set_gdbarch_believe_pcc_promotion (struct gdbarch *gdbarch, int believe_pcc_promotion);







typedef int (gdbarch_convert_register_p_ftype) (int regnum, struct type *type);
extern int gdbarch_convert_register_p (struct gdbarch *gdbarch, int regnum, struct type *type);
extern void set_gdbarch_convert_register_p (struct gdbarch *gdbarch, gdbarch_convert_register_p_ftype *convert_register_p);




#define CONVERT_REGISTER_P(regnum,type) (gdbarch_convert_register_p (current_gdbarch, regnum, type))


typedef void (gdbarch_register_to_value_ftype) (struct frame_info *frame, int regnum, struct type *type, gdb_byte *buf);
extern void gdbarch_register_to_value (struct gdbarch *gdbarch, struct frame_info *frame, int regnum, struct type *type, gdb_byte *buf);
extern void set_gdbarch_register_to_value (struct gdbarch *gdbarch, gdbarch_register_to_value_ftype *register_to_value);




#define REGISTER_TO_VALUE(frame,regnum,type,buf) (gdbarch_register_to_value (current_gdbarch, frame, regnum, type, buf))


typedef void (gdbarch_value_to_register_ftype) (struct frame_info *frame, int regnum, struct type *type, const gdb_byte *buf);
extern void gdbarch_value_to_register (struct gdbarch *gdbarch, struct frame_info *frame, int regnum, struct type *type, const gdb_byte *buf);
extern void set_gdbarch_value_to_register (struct gdbarch *gdbarch, gdbarch_value_to_register_ftype *value_to_register);




#define VALUE_TO_REGISTER(frame,regnum,type,buf) (gdbarch_value_to_register (current_gdbarch, frame, regnum, type, buf))


typedef CORE_ADDR (gdbarch_pointer_to_address_ftype) (struct type *type, const gdb_byte *buf);
extern CORE_ADDR gdbarch_pointer_to_address (struct gdbarch *gdbarch, struct type *type, const gdb_byte *buf);
extern void set_gdbarch_pointer_to_address (struct gdbarch *gdbarch, gdbarch_pointer_to_address_ftype *pointer_to_address);




#define POINTER_TO_ADDRESS(type,buf) (gdbarch_pointer_to_address (current_gdbarch, type, buf))


typedef void (gdbarch_address_to_pointer_ftype) (struct type *type, gdb_byte *buf, CORE_ADDR addr);
extern void gdbarch_address_to_pointer (struct gdbarch *gdbarch, struct type *type, gdb_byte *buf, CORE_ADDR addr);
extern void set_gdbarch_address_to_pointer (struct gdbarch *gdbarch, gdbarch_address_to_pointer_ftype *address_to_pointer);




#define ADDRESS_TO_POINTER(type,buf,addr) (gdbarch_address_to_pointer (current_gdbarch, type, buf, addr))


extern int gdbarch_integer_to_address_p (struct gdbarch *gdbarch);

typedef CORE_ADDR (gdbarch_integer_to_address_ftype) (struct gdbarch *gdbarch, struct type *type, const gdb_byte *buf);
extern CORE_ADDR gdbarch_integer_to_address (struct gdbarch *gdbarch, struct type *type, const gdb_byte *buf);
extern void set_gdbarch_integer_to_address (struct gdbarch *gdbarch, gdbarch_integer_to_address_ftype *integer_to_address);
# 1502 "gdbarch.sh"
extern int gdbarch_deprecated_store_struct_return_p (struct gdbarch *gdbarch);




#define DEPRECATED_STORE_STRUCT_RETURN_P() (gdbarch_deprecated_store_struct_return_p (current_gdbarch))


typedef void (gdbarch_deprecated_store_struct_return_ftype) (CORE_ADDR addr, CORE_ADDR sp);
extern void gdbarch_deprecated_store_struct_return (struct gdbarch *gdbarch, CORE_ADDR addr, CORE_ADDR sp);
extern void set_gdbarch_deprecated_store_struct_return (struct gdbarch *gdbarch, gdbarch_deprecated_store_struct_return_ftype *deprecated_store_struct_return);




#define DEPRECATED_STORE_STRUCT_RETURN(addr,sp) (gdbarch_deprecated_store_struct_return (current_gdbarch, addr, sp))
# 1527 "gdbarch.sh"
extern int gdbarch_return_value_p (struct gdbarch *gdbarch);

typedef enum return_value_convention (gdbarch_return_value_ftype) (struct gdbarch *gdbarch, struct type *valtype, struct regcache *regcache, gdb_byte *readbuf, const gdb_byte *writebuf);
extern enum return_value_convention gdbarch_return_value (struct gdbarch *gdbarch, struct type *valtype, struct regcache *regcache, gdb_byte *readbuf, const gdb_byte *writebuf);
extern void set_gdbarch_return_value (struct gdbarch *gdbarch, gdbarch_return_value_ftype *return_value);






typedef void (gdbarch_extract_return_value_ftype) (struct type *type, struct regcache *regcache, gdb_byte *valbuf);
extern void gdbarch_extract_return_value (struct gdbarch *gdbarch, struct type *type, struct regcache *regcache, gdb_byte *valbuf);
extern void set_gdbarch_extract_return_value (struct gdbarch *gdbarch, gdbarch_extract_return_value_ftype *extract_return_value);




#define EXTRACT_RETURN_VALUE(type,regcache,valbuf) (gdbarch_extract_return_value (current_gdbarch, type, regcache, valbuf))


typedef void (gdbarch_store_return_value_ftype) (struct type *type, struct regcache *regcache, const gdb_byte *valbuf);
extern void gdbarch_store_return_value (struct gdbarch *gdbarch, struct type *type, struct regcache *regcache, const gdb_byte *valbuf);
extern void set_gdbarch_store_return_value (struct gdbarch *gdbarch, gdbarch_store_return_value_ftype *store_return_value);




#define STORE_RETURN_VALUE(type,regcache,valbuf) (gdbarch_store_return_value (current_gdbarch, type, regcache, valbuf))


typedef void (gdbarch_deprecated_extract_return_value_ftype) (struct type *type, gdb_byte *regbuf, gdb_byte *valbuf);
extern void gdbarch_deprecated_extract_return_value (struct gdbarch *gdbarch, struct type *type, gdb_byte *regbuf, gdb_byte *valbuf);
extern void set_gdbarch_deprecated_extract_return_value (struct gdbarch *gdbarch, gdbarch_deprecated_extract_return_value_ftype *deprecated_extract_return_value);




#define DEPRECATED_EXTRACT_RETURN_VALUE(type,regbuf,valbuf) (gdbarch_deprecated_extract_return_value (current_gdbarch, type, regbuf, valbuf))


typedef void (gdbarch_deprecated_store_return_value_ftype) (struct type *type, gdb_byte *valbuf);
extern void gdbarch_deprecated_store_return_value (struct gdbarch *gdbarch, struct type *type, gdb_byte *valbuf);
extern void set_gdbarch_deprecated_store_return_value (struct gdbarch *gdbarch, gdbarch_deprecated_store_return_value_ftype *deprecated_store_return_value);




#define DEPRECATED_STORE_RETURN_VALUE(type,valbuf) (gdbarch_deprecated_store_return_value (current_gdbarch, type, valbuf))


typedef int (gdbarch_deprecated_use_struct_convention_ftype) (int gcc_p, struct type *value_type);
extern int gdbarch_deprecated_use_struct_convention (struct gdbarch *gdbarch, int gcc_p, struct type *value_type);
extern void set_gdbarch_deprecated_use_struct_convention (struct gdbarch *gdbarch, gdbarch_deprecated_use_struct_convention_ftype *deprecated_use_struct_convention);




#define DEPRECATED_USE_STRUCT_CONVENTION(gcc_p,value_type) (gdbarch_deprecated_use_struct_convention (current_gdbarch, gcc_p, value_type))
# 1613 "gdbarch.sh"
extern int gdbarch_deprecated_extract_struct_value_address_p (struct gdbarch *gdbarch);




#define DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS_P() (gdbarch_deprecated_extract_struct_value_address_p (current_gdbarch))


typedef CORE_ADDR (gdbarch_deprecated_extract_struct_value_address_ftype) (struct regcache *regcache);
extern CORE_ADDR gdbarch_deprecated_extract_struct_value_address (struct gdbarch *gdbarch, struct regcache *regcache);
extern void set_gdbarch_deprecated_extract_struct_value_address (struct gdbarch *gdbarch, gdbarch_deprecated_extract_struct_value_address_ftype *deprecated_extract_struct_value_address);




#define DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS(regcache) (gdbarch_deprecated_extract_struct_value_address (current_gdbarch, regcache))


typedef CORE_ADDR (gdbarch_skip_prologue_ftype) (CORE_ADDR ip);
extern CORE_ADDR gdbarch_skip_prologue (struct gdbarch *gdbarch, CORE_ADDR ip);
extern void set_gdbarch_skip_prologue (struct gdbarch *gdbarch, gdbarch_skip_prologue_ftype *skip_prologue);




#define SKIP_PROLOGUE(ip) (gdbarch_skip_prologue (current_gdbarch, ip))
# 1648 "gdbarch.sh"
extern int gdbarch_skip_prologue_addr_ctx_p (struct gdbarch *gdbarch);




#define SKIP_PROLOGUE_ADDR_CTX_P() (gdbarch_skip_prologue_addr_ctx_p (current_gdbarch))


typedef CORE_ADDR (gdbarch_skip_prologue_addr_ctx_ftype) (struct address_context *addr_ctx);
extern CORE_ADDR gdbarch_skip_prologue_addr_ctx (struct gdbarch *gdbarch, struct address_context *addr_ctx);
extern void set_gdbarch_skip_prologue_addr_ctx (struct gdbarch *gdbarch, gdbarch_skip_prologue_addr_ctx_ftype *skip_prologue_addr_ctx);




#define SKIP_PROLOGUE_ADDR_CTX(addr_ctx) (gdbarch_skip_prologue_addr_ctx (current_gdbarch, addr_ctx))


typedef int (gdbarch_inner_than_ftype) (CORE_ADDR lhs, CORE_ADDR rhs);
extern int gdbarch_inner_than (struct gdbarch *gdbarch, CORE_ADDR lhs, CORE_ADDR rhs);
extern void set_gdbarch_inner_than (struct gdbarch *gdbarch, gdbarch_inner_than_ftype *inner_than);




#define INNER_THAN(lhs,rhs) (gdbarch_inner_than (current_gdbarch, lhs, rhs))


typedef const gdb_byte * (gdbarch_breakpoint_from_pc_ftype) (CORE_ADDR *pcptr, int *lenptr);
extern const gdb_byte * gdbarch_breakpoint_from_pc (struct gdbarch *gdbarch, CORE_ADDR *pcptr, int *lenptr);
extern void set_gdbarch_breakpoint_from_pc (struct gdbarch *gdbarch, gdbarch_breakpoint_from_pc_ftype *breakpoint_from_pc);




#define BREAKPOINT_FROM_PC(pcptr,lenptr) (gdbarch_breakpoint_from_pc (current_gdbarch, pcptr, lenptr))


extern int gdbarch_adjust_breakpoint_address_p (struct gdbarch *gdbarch);

typedef CORE_ADDR (gdbarch_adjust_breakpoint_address_ftype) (struct gdbarch *gdbarch, CORE_ADDR bpaddr);
extern CORE_ADDR gdbarch_adjust_breakpoint_address (struct gdbarch *gdbarch, CORE_ADDR bpaddr);
extern void set_gdbarch_adjust_breakpoint_address (struct gdbarch *gdbarch, gdbarch_adjust_breakpoint_address_ftype *adjust_breakpoint_address);

typedef int (gdbarch_memory_insert_breakpoint_ftype) (CORE_ADDR addr, gdb_byte *contents_cache);
extern int gdbarch_memory_insert_breakpoint (struct gdbarch *gdbarch, CORE_ADDR addr, gdb_byte *contents_cache);
extern void set_gdbarch_memory_insert_breakpoint (struct gdbarch *gdbarch, gdbarch_memory_insert_breakpoint_ftype *memory_insert_breakpoint);




#define MEMORY_INSERT_BREAKPOINT(addr,contents_cache) (gdbarch_memory_insert_breakpoint (current_gdbarch, addr, contents_cache))


typedef int (gdbarch_memory_remove_breakpoint_ftype) (CORE_ADDR addr, gdb_byte *contents_cache);
extern int gdbarch_memory_remove_breakpoint (struct gdbarch *gdbarch, CORE_ADDR addr, gdb_byte *contents_cache);
extern void set_gdbarch_memory_remove_breakpoint (struct gdbarch *gdbarch, gdbarch_memory_remove_breakpoint_ftype *memory_remove_breakpoint);




#define MEMORY_REMOVE_BREAKPOINT(addr,contents_cache) (gdbarch_memory_remove_breakpoint (current_gdbarch, addr, contents_cache))


extern CORE_ADDR gdbarch_decr_pc_after_break (struct gdbarch *gdbarch);
extern void set_gdbarch_decr_pc_after_break (struct gdbarch *gdbarch, CORE_ADDR decr_pc_after_break);




#define DECR_PC_AFTER_BREAK (gdbarch_decr_pc_after_break (current_gdbarch))
# 1729 "gdbarch.sh"
extern CORE_ADDR gdbarch_deprecated_function_start_offset (struct gdbarch *gdbarch);
extern void set_gdbarch_deprecated_function_start_offset (struct gdbarch *gdbarch, CORE_ADDR deprecated_function_start_offset);




#define DEPRECATED_FUNCTION_START_OFFSET (gdbarch_deprecated_function_start_offset (current_gdbarch))


typedef void (gdbarch_remote_translate_xfer_address_ftype) (struct gdbarch *gdbarch, struct regcache *regcache, CORE_ADDR gdb_addr, int gdb_len, CORE_ADDR *rem_addr, int *rem_len);
extern void gdbarch_remote_translate_xfer_address (struct gdbarch *gdbarch, struct regcache *regcache, CORE_ADDR gdb_addr, int gdb_len, CORE_ADDR *rem_addr, int *rem_len);
extern void set_gdbarch_remote_translate_xfer_address (struct gdbarch *gdbarch, gdbarch_remote_translate_xfer_address_ftype *remote_translate_xfer_address);
# 1751 "gdbarch.sh"
extern int gdbarch_fetch_tls_load_module_address_p (struct gdbarch *gdbarch);




#define FETCH_TLS_LOAD_MODULE_ADDRESS_P() (gdbarch_fetch_tls_load_module_address_p (current_gdbarch))


typedef CORE_ADDR (gdbarch_fetch_tls_load_module_address_ftype) (struct objfile *objfile);
extern CORE_ADDR gdbarch_fetch_tls_load_module_address (struct gdbarch *gdbarch, struct objfile *objfile);
extern void set_gdbarch_fetch_tls_load_module_address (struct gdbarch *gdbarch, gdbarch_fetch_tls_load_module_address_ftype *fetch_tls_load_module_address);




#define FETCH_TLS_LOAD_MODULE_ADDRESS(objfile) (gdbarch_fetch_tls_load_module_address (current_gdbarch, objfile))


extern CORE_ADDR gdbarch_frame_args_skip (struct gdbarch *gdbarch);
extern void set_gdbarch_frame_args_skip (struct gdbarch *gdbarch, CORE_ADDR frame_args_skip);




#define FRAME_ARGS_SKIP (gdbarch_frame_args_skip (current_gdbarch))


extern int gdbarch_unwind_pc_p (struct gdbarch *gdbarch);

typedef CORE_ADDR (gdbarch_unwind_pc_ftype) (struct gdbarch *gdbarch, struct frame_info *next_frame);
extern CORE_ADDR gdbarch_unwind_pc (struct gdbarch *gdbarch, struct frame_info *next_frame);
extern void set_gdbarch_unwind_pc (struct gdbarch *gdbarch, gdbarch_unwind_pc_ftype *unwind_pc);

extern int gdbarch_unwind_sp_p (struct gdbarch *gdbarch);

typedef CORE_ADDR (gdbarch_unwind_sp_ftype) (struct gdbarch *gdbarch, struct frame_info *next_frame);
extern CORE_ADDR gdbarch_unwind_sp (struct gdbarch *gdbarch, struct frame_info *next_frame);
extern void set_gdbarch_unwind_sp (struct gdbarch *gdbarch, gdbarch_unwind_sp_ftype *unwind_sp);
# 1800 "gdbarch.sh"
extern int gdbarch_deprecated_saved_pc_after_call_p (struct gdbarch *gdbarch);




#define DEPRECATED_SAVED_PC_AFTER_CALL_P() (gdbarch_deprecated_saved_pc_after_call_p (current_gdbarch))


typedef CORE_ADDR (gdbarch_deprecated_saved_pc_after_call_ftype) (struct frame_info *frame);
extern CORE_ADDR gdbarch_deprecated_saved_pc_after_call (struct gdbarch *gdbarch, struct frame_info *frame);
extern void set_gdbarch_deprecated_saved_pc_after_call (struct gdbarch *gdbarch, gdbarch_deprecated_saved_pc_after_call_ftype *deprecated_saved_pc_after_call);




#define DEPRECATED_SAVED_PC_AFTER_CALL(frame) (gdbarch_deprecated_saved_pc_after_call (current_gdbarch, frame))
# 1825 "gdbarch.sh"
extern int gdbarch_frame_num_args_p (struct gdbarch *gdbarch);




#define FRAME_NUM_ARGS_P() (gdbarch_frame_num_args_p (current_gdbarch))


typedef int (gdbarch_frame_num_args_ftype) (struct frame_info *frame);
extern int gdbarch_frame_num_args (struct gdbarch *gdbarch, struct frame_info *frame);
extern void set_gdbarch_frame_num_args (struct gdbarch *gdbarch, gdbarch_frame_num_args_ftype *frame_num_args);




#define FRAME_NUM_ARGS(frame) (gdbarch_frame_num_args (current_gdbarch, frame))
# 1855 "gdbarch.sh"
extern int gdbarch_deprecated_stack_align_p (struct gdbarch *gdbarch);




#define DEPRECATED_STACK_ALIGN_P() (gdbarch_deprecated_stack_align_p (current_gdbarch))


typedef CORE_ADDR (gdbarch_deprecated_stack_align_ftype) (CORE_ADDR sp);
extern CORE_ADDR gdbarch_deprecated_stack_align (struct gdbarch *gdbarch, CORE_ADDR sp);
extern void set_gdbarch_deprecated_stack_align (struct gdbarch *gdbarch, gdbarch_deprecated_stack_align_ftype *deprecated_stack_align);




#define DEPRECATED_STACK_ALIGN(sp) (gdbarch_deprecated_stack_align (current_gdbarch, sp))


extern int gdbarch_frame_align_p (struct gdbarch *gdbarch);

typedef CORE_ADDR (gdbarch_frame_align_ftype) (struct gdbarch *gdbarch, CORE_ADDR address);
extern CORE_ADDR gdbarch_frame_align (struct gdbarch *gdbarch, CORE_ADDR address);
extern void set_gdbarch_frame_align (struct gdbarch *gdbarch, gdbarch_frame_align_ftype *frame_align);
# 1889 "gdbarch.sh"
extern int gdbarch_deprecated_reg_struct_has_addr_p (struct gdbarch *gdbarch);




#define DEPRECATED_REG_STRUCT_HAS_ADDR_P() (gdbarch_deprecated_reg_struct_has_addr_p (current_gdbarch))


typedef int (gdbarch_deprecated_reg_struct_has_addr_ftype) (int gcc_p, struct type *type);
extern int gdbarch_deprecated_reg_struct_has_addr (struct gdbarch *gdbarch, int gcc_p, struct type *type);
extern void set_gdbarch_deprecated_reg_struct_has_addr (struct gdbarch *gdbarch, gdbarch_deprecated_reg_struct_has_addr_ftype *deprecated_reg_struct_has_addr);




#define DEPRECATED_REG_STRUCT_HAS_ADDR(gcc_p,type) (gdbarch_deprecated_reg_struct_has_addr (current_gdbarch, gcc_p, type))


typedef int (gdbarch_stabs_argument_has_addr_ftype) (struct gdbarch *gdbarch, struct type *type);
extern int gdbarch_stabs_argument_has_addr (struct gdbarch *gdbarch, struct type *type);
extern void set_gdbarch_stabs_argument_has_addr (struct gdbarch *gdbarch, gdbarch_stabs_argument_has_addr_ftype *stabs_argument_has_addr);

extern int gdbarch_frame_red_zone_size (struct gdbarch *gdbarch);
extern void set_gdbarch_frame_red_zone_size (struct gdbarch *gdbarch, int frame_red_zone_size);




#define FRAME_RED_ZONE_SIZE (gdbarch_frame_red_zone_size (current_gdbarch))


typedef CORE_ADDR (gdbarch_convert_from_func_ptr_addr_ftype) (struct gdbarch *gdbarch, CORE_ADDR addr, struct target_ops *targ);
extern CORE_ADDR gdbarch_convert_from_func_ptr_addr (struct gdbarch *gdbarch, CORE_ADDR addr, struct target_ops *targ);
extern void set_gdbarch_convert_from_func_ptr_addr (struct gdbarch *gdbarch, gdbarch_convert_from_func_ptr_addr_ftype *convert_from_func_ptr_addr);
# 1934 "gdbarch.sh"
typedef CORE_ADDR (gdbarch_addr_bits_remove_ftype) (CORE_ADDR addr);
extern CORE_ADDR gdbarch_addr_bits_remove (struct gdbarch *gdbarch, CORE_ADDR addr);
extern void set_gdbarch_addr_bits_remove (struct gdbarch *gdbarch, gdbarch_addr_bits_remove_ftype *addr_bits_remove);




#define ADDR_BITS_REMOVE(addr) (gdbarch_addr_bits_remove (current_gdbarch, addr))





typedef CORE_ADDR (gdbarch_smash_text_address_ftype) (CORE_ADDR addr);
extern CORE_ADDR gdbarch_smash_text_address (struct gdbarch *gdbarch, CORE_ADDR addr);
extern void set_gdbarch_smash_text_address (struct gdbarch *gdbarch, gdbarch_smash_text_address_ftype *smash_text_address);




#define SMASH_TEXT_ADDRESS(addr) (gdbarch_smash_text_address (current_gdbarch, addr))
# 1973 "gdbarch.sh"
extern int gdbarch_software_single_step_p (struct gdbarch *gdbarch);




#define SOFTWARE_SINGLE_STEP_P() (gdbarch_software_single_step_p (current_gdbarch))


typedef void (gdbarch_software_single_step_ftype) (enum target_signal sig, int insert_breakpoints_p);
extern void gdbarch_software_single_step (struct gdbarch *gdbarch, enum target_signal sig, int insert_breakpoints_p);
extern void set_gdbarch_software_single_step (struct gdbarch *gdbarch, gdbarch_software_single_step_ftype *software_single_step);




#define SOFTWARE_SINGLE_STEP(sig,insert_breakpoints_p) (gdbarch_software_single_step (current_gdbarch, sig, insert_breakpoints_p))





extern int gdbarch_single_step_through_delay_p (struct gdbarch *gdbarch);

typedef int (gdbarch_single_step_through_delay_ftype) (struct gdbarch *gdbarch, struct frame_info *frame);
extern int gdbarch_single_step_through_delay (struct gdbarch *gdbarch, struct frame_info *frame);
extern void set_gdbarch_single_step_through_delay (struct gdbarch *gdbarch, gdbarch_single_step_through_delay_ftype *single_step_through_delay);




typedef int (gdbarch_print_insn_ftype) (bfd_vma vma, struct disassemble_info *info);
extern int gdbarch_print_insn (struct gdbarch *gdbarch, bfd_vma vma, struct disassemble_info *info);
extern void set_gdbarch_print_insn (struct gdbarch *gdbarch, gdbarch_print_insn_ftype *print_insn);




#define TARGET_PRINT_INSN(vma,info) (gdbarch_print_insn (current_gdbarch, vma, info))


typedef CORE_ADDR (gdbarch_skip_trampoline_code_ftype) (CORE_ADDR pc);
extern CORE_ADDR gdbarch_skip_trampoline_code (struct gdbarch *gdbarch, CORE_ADDR pc);
extern void set_gdbarch_skip_trampoline_code (struct gdbarch *gdbarch, gdbarch_skip_trampoline_code_ftype *skip_trampoline_code);




#define SKIP_TRAMPOLINE_CODE(pc) (gdbarch_skip_trampoline_code (current_gdbarch, pc))






typedef CORE_ADDR (gdbarch_skip_solib_resolver_ftype) (struct gdbarch *gdbarch, CORE_ADDR pc);
extern CORE_ADDR gdbarch_skip_solib_resolver (struct gdbarch *gdbarch, CORE_ADDR pc);
extern void set_gdbarch_skip_solib_resolver (struct gdbarch *gdbarch, gdbarch_skip_solib_resolver_ftype *skip_solib_resolver);



typedef int (gdbarch_in_solib_return_trampoline_ftype) (CORE_ADDR pc, const char *name);
extern int gdbarch_in_solib_return_trampoline (struct gdbarch *gdbarch, CORE_ADDR pc, const char *name);
extern void set_gdbarch_in_solib_return_trampoline (struct gdbarch *gdbarch, gdbarch_in_solib_return_trampoline_ftype *in_solib_return_trampoline);




#define IN_SOLIB_RETURN_TRAMPOLINE(pc,name) (gdbarch_in_solib_return_trampoline (current_gdbarch, pc, name))
# 2053 "gdbarch.sh"
typedef int (gdbarch_in_function_epilogue_p_ftype) (struct gdbarch *gdbarch, CORE_ADDR addr);
extern int gdbarch_in_function_epilogue_p (struct gdbarch *gdbarch, CORE_ADDR addr);
extern void set_gdbarch_in_function_epilogue_p (struct gdbarch *gdbarch, gdbarch_in_function_epilogue_p_ftype *in_function_epilogue_p);
# 2066 "gdbarch.sh"
typedef char * (gdbarch_construct_inferior_arguments_ftype) (struct gdbarch *gdbarch, int argc, char **argv);
extern char * gdbarch_construct_inferior_arguments (struct gdbarch *gdbarch, int argc, char **argv);
extern void set_gdbarch_construct_inferior_arguments (struct gdbarch *gdbarch, gdbarch_construct_inferior_arguments_ftype *construct_inferior_arguments);

typedef void (gdbarch_elf_make_msymbol_special_ftype) (asymbol *sym, struct minimal_symbol *msym);
extern void gdbarch_elf_make_msymbol_special (struct gdbarch *gdbarch, asymbol *sym, struct minimal_symbol *msym);
extern void set_gdbarch_elf_make_msymbol_special (struct gdbarch *gdbarch, gdbarch_elf_make_msymbol_special_ftype *elf_make_msymbol_special);




#define ELF_MAKE_MSYMBOL_SPECIAL(sym,msym) (gdbarch_elf_make_msymbol_special (current_gdbarch, sym, msym))


typedef void (gdbarch_coff_make_msymbol_special_ftype) (int val, struct minimal_symbol *msym);
extern void gdbarch_coff_make_msymbol_special (struct gdbarch *gdbarch, int val, struct minimal_symbol *msym);
extern void set_gdbarch_coff_make_msymbol_special (struct gdbarch *gdbarch, gdbarch_coff_make_msymbol_special_ftype *coff_make_msymbol_special);




#define COFF_MAKE_MSYMBOL_SPECIAL(val,msym) (gdbarch_coff_make_msymbol_special (current_gdbarch, val, msym))




typedef void (gdbarch_dbx_make_msymbol_special_ftype) (int16_t desc, struct minimal_symbol *msym);
extern void gdbarch_dbx_make_msymbol_special (struct gdbarch *gdbarch, int16_t desc, struct minimal_symbol *msym);
extern void set_gdbarch_dbx_make_msymbol_special (struct gdbarch *gdbarch, gdbarch_dbx_make_msymbol_special_ftype *dbx_make_msymbol_special);




#define DBX_MAKE_MSYMBOL_SPECIAL(desc,msym) (gdbarch_dbx_make_msymbol_special (current_gdbarch, desc, msym))


extern const char * gdbarch_name_of_malloc (struct gdbarch *gdbarch);
extern void set_gdbarch_name_of_malloc (struct gdbarch *gdbarch, const char * name_of_malloc);




#define NAME_OF_MALLOC (gdbarch_name_of_malloc (current_gdbarch))


extern int gdbarch_cannot_step_breakpoint (struct gdbarch *gdbarch);
extern void set_gdbarch_cannot_step_breakpoint (struct gdbarch *gdbarch, int cannot_step_breakpoint);




#define CANNOT_STEP_BREAKPOINT (gdbarch_cannot_step_breakpoint (current_gdbarch))


extern int gdbarch_have_nonsteppable_watchpoint (struct gdbarch *gdbarch);
extern void set_gdbarch_have_nonsteppable_watchpoint (struct gdbarch *gdbarch, int have_nonsteppable_watchpoint);




#define HAVE_NONSTEPPABLE_WATCHPOINT (gdbarch_have_nonsteppable_watchpoint (current_gdbarch))
# 2136 "gdbarch.sh"
extern int gdbarch_address_class_type_flags_p (struct gdbarch *gdbarch);




#define ADDRESS_CLASS_TYPE_FLAGS_P() (gdbarch_address_class_type_flags_p (current_gdbarch))


typedef int (gdbarch_address_class_type_flags_ftype) (int byte_size, int dwarf2_addr_class);
extern int gdbarch_address_class_type_flags (struct gdbarch *gdbarch, int byte_size, int dwarf2_addr_class);
extern void set_gdbarch_address_class_type_flags (struct gdbarch *gdbarch, gdbarch_address_class_type_flags_ftype *address_class_type_flags);




#define ADDRESS_CLASS_TYPE_FLAGS(byte_size,dwarf2_addr_class) (gdbarch_address_class_type_flags (current_gdbarch, byte_size, dwarf2_addr_class))


extern int gdbarch_address_class_type_flags_to_name_p (struct gdbarch *gdbarch);

typedef const char * (gdbarch_address_class_type_flags_to_name_ftype) (struct gdbarch *gdbarch, int type_flags);
extern const char * gdbarch_address_class_type_flags_to_name (struct gdbarch *gdbarch, int type_flags);
extern void set_gdbarch_address_class_type_flags_to_name (struct gdbarch *gdbarch, gdbarch_address_class_type_flags_to_name_ftype *address_class_type_flags_to_name);

extern int gdbarch_address_class_name_to_type_flags_p (struct gdbarch *gdbarch);

typedef int (gdbarch_address_class_name_to_type_flags_ftype) (struct gdbarch *gdbarch, const char *name, int *type_flags_ptr);
extern int gdbarch_address_class_name_to_type_flags (struct gdbarch *gdbarch, const char *name, int *type_flags_ptr);
extern void set_gdbarch_address_class_name_to_type_flags (struct gdbarch *gdbarch, gdbarch_address_class_name_to_type_flags_ftype *address_class_name_to_type_flags);



typedef int (gdbarch_register_reggroup_p_ftype) (struct gdbarch *gdbarch, int regnum, struct reggroup *reggroup);
extern int gdbarch_register_reggroup_p (struct gdbarch *gdbarch, int regnum, struct reggroup *reggroup);
extern void set_gdbarch_register_reggroup_p (struct gdbarch *gdbarch, gdbarch_register_reggroup_p_ftype *register_reggroup_p);
# 2181 "gdbarch.sh"
extern int gdbarch_fetch_pointer_argument_p (struct gdbarch *gdbarch);




#define FETCH_POINTER_ARGUMENT_P() (gdbarch_fetch_pointer_argument_p (current_gdbarch))


typedef CORE_ADDR (gdbarch_fetch_pointer_argument_ftype) (struct frame_info *frame, int argi, struct type *type);
extern CORE_ADDR gdbarch_fetch_pointer_argument (struct gdbarch *gdbarch, struct frame_info *frame, int argi, struct type *type);
extern void set_gdbarch_fetch_pointer_argument (struct gdbarch *gdbarch, gdbarch_fetch_pointer_argument_ftype *fetch_pointer_argument);




#define FETCH_POINTER_ARGUMENT(frame,argi,type) (gdbarch_fetch_pointer_argument (current_gdbarch, frame, argi, type))





extern int gdbarch_regset_from_core_section_p (struct gdbarch *gdbarch);

typedef const struct regset * (gdbarch_regset_from_core_section_ftype) (struct gdbarch *gdbarch, const char *sect_name, size_t sect_size);
extern const struct regset * gdbarch_regset_from_core_section (struct gdbarch *gdbarch, const char *sect_name, size_t sect_size);
extern void set_gdbarch_regset_from_core_section (struct gdbarch *gdbarch, gdbarch_regset_from_core_section_ftype *regset_from_core_section);



typedef int (gdbarch_adjust_ehframe_regnum_ftype) (struct gdbarch *gdbarch, int regnum, int eh_frame_p);
extern int gdbarch_adjust_ehframe_regnum (struct gdbarch *gdbarch, int regnum, int eh_frame_p);
extern void set_gdbarch_adjust_ehframe_regnum (struct gdbarch *gdbarch, gdbarch_adjust_ehframe_regnum_ftype *adjust_ehframe_regnum);
# 920 "gdbarch.sh"

extern struct gdbarch_tdep *gdbarch_tdep (struct gdbarch *gdbarch);
# 983 "gdbarch.sh"
struct gdbarch_list
{
  struct gdbarch *gdbarch;
  struct gdbarch_list *next;
};

struct gdbarch_info
{

  const struct bfd_arch_info *bfd_arch_info;


  int byte_order;


  bfd *abfd;


  struct gdbarch_tdep_info *tdep_info;


  enum gdb_osabi osabi;
};

typedef struct gdbarch *(gdbarch_init_ftype) (struct gdbarch_info info, struct gdbarch_list *arches);
typedef void (gdbarch_dump_tdep_ftype) (struct gdbarch *gdbarch, struct ui_file *file);


extern void register_gdbarch_init(enum bfd_architecture architecture,
      gdbarch_init_ftype *)
  __attribute__((__deprecated__("Use '" "gdbarch_register" "' instead")));

extern void gdbarch_register (enum bfd_architecture architecture,
                              gdbarch_init_ftype *,
                              gdbarch_dump_tdep_ftype *);







extern const char **gdbarch_printable_names (void);





extern struct gdbarch_list *gdbarch_list_lookup_by_info (struct gdbarch_list *arches, const struct gdbarch_info *info);







extern struct gdbarch *gdbarch_alloc (const struct gdbarch_info *info, struct gdbarch_tdep *tdep);






extern void gdbarch_free (struct gdbarch *);






extern void *gdbarch_obstack_zalloc (struct gdbarch *gdbarch, long size);
#define GDBARCH_OBSTACK_CALLOC(GDBARCH,NR,TYPE) ((TYPE *) gdbarch_obstack_zalloc ((GDBARCH), (NR) * sizeof (TYPE)))
#define GDBARCH_OBSTACK_ZALLOC(GDBARCH,TYPE) ((TYPE *) gdbarch_obstack_zalloc ((GDBARCH), sizeof (TYPE)))
# 1067 "gdbarch.sh"
extern int gdbarch_update_p (struct gdbarch_info info);
# 1078 "gdbarch.sh"
extern struct gdbarch *gdbarch_find_by_info (struct gdbarch_info info);
# 1089 "gdbarch.sh"
extern void deprecated_current_gdbarch_select_hack (struct gdbarch *gdbarch);
# 1109 "gdbarch.sh"
struct gdbarch_data;

typedef void *(gdbarch_data_pre_init_ftype) (struct obstack *obstack);
extern struct gdbarch_data *gdbarch_data_register_pre_init (gdbarch_data_pre_init_ftype *init);
typedef void *(gdbarch_data_post_init_ftype) (struct gdbarch *gdbarch);
extern struct gdbarch_data *gdbarch_data_register_post_init (gdbarch_data_post_init_ftype *init);
extern void deprecated_set_gdbarch_data (struct gdbarch *gdbarch,
                                         struct gdbarch_data *data,
                    void *pointer);

extern void *gdbarch_data (struct gdbarch *gdbarch, struct gdbarch_data *);
# 1122 "gdbarch.sh"
# 1135 "gdbarch.sh"
typedef void (gdbarch_swap_ftype) (void);
extern void deprecated_register_gdbarch_swap(void *data, unsigned long size,
          gdbarch_swap_ftype *init)
  __attribute__((__deprecated__));
#define DEPRECATED_REGISTER_GDBARCH_SWAP(VAR) deprecated_register_gdbarch_swap(&(VAR), sizeof((VAR)), NULL)
# 1142 "gdbarch.sh"




extern void set_gdbarch_from_file (bfd *);





extern void initialize_current_architecture (void);


extern int gdbarch_debug;

extern void gdbarch_dump (struct gdbarch *gdbarch, struct ui_file *file);
# 1371 "defs.h" 2




enum { MAX_REGISTER_SIZE = 16 };






#define TARGET_CHAR_BIT 8
# 1391 "defs.h"
#define HOST_CHAR_BIT CHAR_BIT
# 1401 "defs.h"
#define BITS_BIG_ENDIAN (TARGET_BYTE_ORDER == BFD_ENDIAN_BIG)




extern long long extract_signed_integer(const gdb_byte *, int);


extern long long extract_signed_integer_with_byte_order(const gdb_byte *, int, int);

extern unsigned long long extract_unsigned_integer(const gdb_byte *, int);


extern unsigned long long extract_unsigned_integer_with_byte_order(const gdb_byte *, int, int);

extern int extract_long_unsigned_integer(const gdb_byte *, int, long long *);


extern int extract_long_unsigned_integer_with_byte_order(const gdb_byte *, int, long long *, int);

extern CORE_ADDR extract_typed_address(const gdb_byte *buf,
                                       struct type *type) __attribute__((warn_unused_result));

extern void store_signed_integer(gdb_byte *, int, long long);


extern void store_signed_integer_with_byte_order(gdb_byte *, int, long long, int);

extern void store_unsigned_integer(gdb_byte *, int, unsigned long long);


extern void store_unsigned_integer_with_byte_order(gdb_byte *, int, unsigned long long, int);

extern void store_typed_address(gdb_byte *buf, struct type *type,
                                CORE_ADDR addr);



extern int watchdog;




extern char *interpreter_p;







struct target_waitstatus;
struct cmd_list_element;



typedef void *gdb_client_data;


typedef enum {
  STATE_NOT_ACTIVE,
  STATE_ACTIVE,
  STATE_INFERIOR_LOADED,
  STATE_INFERIOR_EXITED,
  STATE_INFERIOR_LOGICALLY_RUNNING,
  STATE_INFERIOR_STOPPED
} Debugger_state;


extern void (*init_ui_hook)(char *argv0);
extern void (*command_loop_hook)(void);

extern void (*deprecated_pre_add_symbol_hook)(const char *)
  __attribute__((__deprecated__));
extern void (*deprecated_post_add_symbol_hook)(void)
  __attribute__((__deprecated__));
extern void (*selected_frame_level_changed_hook)(int)
  __attribute__((__deprecated__));
extern int (*deprecated_ui_loop_hook)(int signo)
  __attribute__((__deprecated__));
extern void (*deprecated_init_ui_hook)(char *argv0)
  __attribute__((__deprecated__));
extern void (*deprecated_command_loop_hook)(void)
  __attribute__((__deprecated__));
extern void (*deprecated_show_load_progress)(const char *section,
          unsigned long section_sent,
          unsigned long section_size,
          unsigned long total_sent,
          unsigned long total_size)
  __attribute__((__deprecated__));
extern void (*deprecated_print_frame_info_listing_hook)(struct symtab * s,
                                                        int line, int stopline,
                                                        int noerror)
  __attribute__((__deprecated__));

extern void (*print_frame_more_info_hook)(struct ui_out *uiout,
                                          struct symtab_and_line *sal,
                                          struct frame_info *fi);




extern void (*print_source_lines_hook)
     (struct symtab *s, int line, int stopline);


extern void (*state_change_hook)(Debugger_state new_state);


extern void (*frame_changed_hook)(int new_frame_number);


extern void (*stack_changed_hook)(void);


extern char *(*command_line_input_hook)(const char *, int, const char *);




extern void (*stepping_command_hook)(void);


extern int (*deprecated_query_hook)(const char *, va_list)
     __attribute__((__format__(__printf__, 1, 0))) __attribute__((__nonnull__(1))) __attribute__((__deprecated__));
extern void (*deprecated_warning_hook)(const char *, va_list)
     __attribute__((__format__(__printf__, 1, 0))) __attribute__((__nonnull__(1))) __attribute__((__deprecated__));

extern void (*deprecated_flush_hook)(struct ui_file * stream)
  __attribute__((__deprecated__));
extern void (*deprecated_create_breakpoint_hook)(struct breakpoint * b)
  __attribute__((__deprecated__));
extern void (*deprecated_delete_breakpoint_hook)(struct breakpoint * bpt)
  __attribute__((__deprecated__));
extern void (*deprecated_modify_breakpoint_hook)(struct breakpoint * bpt)
  __attribute__((__deprecated__));
extern void (*deprecated_interactive_hook)(void)
  __attribute__((__deprecated__));
extern void (*deprecated_registers_changed_hook)(void)
  __attribute__((__deprecated__));
extern void (*deprecated_readline_begin_hook)(const char *, ...)
     __attribute__((__format__(__printf__, 1, 2))) __attribute__((__nonnull__(1))) __attribute__((__deprecated__));
extern char *(*deprecated_readline_hook)(char *)
  __attribute__((__deprecated__));
extern void (*deprecated_readline_end_hook)(void)
  __attribute__((__deprecated__));
extern void (*deprecated_register_changed_hook)(int regno)
  __attribute__((__deprecated__));
extern void (*deprecated_memory_changed_hook)(CORE_ADDR addr, int len)
  __attribute__((__deprecated__));
extern void (*deprecated_context_hook)(int)
  __attribute__((__deprecated__));
extern ptid_t (*deprecated_target_wait_hook)(ptid_t ptid,

          struct target_waitstatus * status,
          gdb_client_data client_data)
  __attribute__((__deprecated__));

extern void (*deprecated_attach_hook)(void)
  __attribute__((__deprecated__));
extern void (*deprecated_detach_hook)(void)
  __attribute__((__deprecated__));
extern void (*deprecated_call_command_hook)(struct cmd_list_element * c,
         const char *cmd, int from_tty)
  __attribute__((__deprecated__));

extern void (*deprecated_set_hook)(struct cmd_list_element *c)
  __attribute__((__deprecated__));

extern void (*deprecated_error_hook)(void)
  __attribute__((__deprecated__));



extern void (*continue_command_hook)(void);


extern void (*deprecated_error_begin_hook)(void)
  __attribute__((__deprecated__));



extern int (*run_command_hook)(void);
extern void (*hand_call_function_hook)(void);


extern int (*deprecated_ui_load_progress_hook)(const char *section,
                                               unsigned long num)
  __attribute__((__deprecated__));



extern int use_windows;
# 1606 "defs.h"
#define DIRNAME_SEPARATOR ':'



#define SLASH_STRING "/"
# 1620 "defs.h"
#define PIDGET(PTID) (ptid_get_pid(PTID))
#define TIDGET(PTID) (ptid_get_lwp(PTID))
#define MERGEPID(PID,TID) ptid_build(PID, TID, 0)
# 1639 "defs.h"
#define ISATTY(FP) (isatty(fileno(FP)))
# 1671 "defs.h"
extern unsigned long long align_up(unsigned long long v, int n) __attribute__((warn_unused_result));
extern unsigned long long align_down(unsigned long long v, int n) __attribute__((warn_unused_result));


extern void breakup_args(char *scratch, int *argc, char **argv);


#define __CHECK_FUNCTION __extension__ __PRETTY_FUNCTION__


#define CHECK(expression) ((void)((expression) ? (void)0 : gdb_check(#expression, __FILE__, __LINE__, __CHECK_FUNCTION)))


#define CHECK_FATAL(expression) ((void)((expression) ? (void)0 : gdb_check_fatal(#expression, __FILE__, __LINE__, __CHECK_FUNCTION)))
# 1694 "defs.h"
extern void __attribute__((noreturn)) gdb_check(const char *str, const char *file,
        unsigned int line, const char *func);
extern void __attribute__((noreturn)) gdb_check_fatal(const char *str, const char *file,
       unsigned int line, const char *func);



extern int maint_use_timers;
extern struct cleanup *start_timer(int *timer_var, const char *timer_name,
       const char *this_mssg) __attribute__((warn_unused_result));


#define MALLOC_SUBSYSTEM (1 << 0)
#define OBJC_SUBSYSTEM (1 << 1)
#define LOADER_SUBSYSTEM (1 << 2)
#define SPINLOCK_SUBSYSTEM (1 << 3)
#define ALL_SUBSYSTEMS (MALLOC_SUBSYSTEM|OBJC_SUBSYSTEM|LOADER_SUBSYSTEM|SPINLOCK_SUBSYSTEM)





        

        
# 1727 "defs.h"
         
# 25 "valarith.c" 2
# 1 "value.h" 1
# 25 "value.h"
#define VALUE_H 1



# 1 "doublest.h" 1
# 25 "doublest.h"
#define DOUBLEST_H 



struct type;
struct floatformat;
# 42 "doublest.h"
# 1 "./../include/floatformat.h" 1
# 22 "./../include/floatformat.h"
#define FLOATFORMAT_H 1

# 1 "./../include/ansidecl.h" 1
# 25 "./../include/floatformat.h" 2


extern "C" {
# 38 "./../include/floatformat.h"
enum floatformat_byteorders {


  floatformat_little,



  floatformat_big,



  floatformat_littlebyte_bigword,





  floatformat_vax
};

enum floatformat_intbit { floatformat_intbit_yes, floatformat_intbit_no };

struct floatformat
{
  enum floatformat_byteorders byteorder;
  unsigned int totalsize;


  unsigned int sign_start;

  unsigned int exp_start;
  unsigned int exp_len;





  int exp_bias;



  unsigned int exp_nan;

  unsigned int man_start;
  unsigned int man_len;


  enum floatformat_intbit intbit;


  const char *name;


  int (*is_valid) (const struct floatformat *fmt, const void *from);
};


extern const struct floatformat floatformat_ieee_single_big;
extern const struct floatformat floatformat_ieee_single_little;
extern const struct floatformat floatformat_ieee_double_big;
extern const struct floatformat floatformat_ieee_double_little;


extern const struct floatformat floatformat_ieee_double_littlebyte_bigword;


extern const struct floatformat floatformat_vax_f;
extern const struct floatformat floatformat_vax_d;
extern const struct floatformat floatformat_vax_g;


extern const struct floatformat floatformat_i387_ext;
extern const struct floatformat floatformat_m68881_ext;
extern const struct floatformat floatformat_i960_ext;
extern const struct floatformat floatformat_m88110_ext;
extern const struct floatformat floatformat_m88110_harris_ext;
extern const struct floatformat floatformat_arm_ext_big;
extern const struct floatformat floatformat_arm_ext_littlebyte_bigword;

extern const struct floatformat floatformat_ia64_spill_big;
extern const struct floatformat floatformat_ia64_spill_little;
extern const struct floatformat floatformat_ia64_quad_big;
extern const struct floatformat floatformat_ia64_quad_little;





extern void
floatformat_to_double(const struct floatformat *, const void *, double *);




extern void
floatformat_from_double(const struct floatformat *, const double *, void *);


extern int
floatformat_is_valid(const struct floatformat *fmt, const void *from)
  __attribute__((warn_unused_result));


}
# 43 "doublest.h" 2
# 54 "doublest.h"
typedef long double DOUBLEST;




extern void floatformat_to_doublest (const struct floatformat *,
         const void *in, DOUBLEST *out);
extern void floatformat_from_doublest (const struct floatformat *,
           const DOUBLEST *in, void *out);

extern int floatformat_is_negative (const struct floatformat *,
        const bfd_byte *);
extern int floatformat_is_nan (const struct floatformat *, const bfd_byte *);
extern const char *floatformat_mantissa (const struct floatformat *,
      const bfd_byte *);
# 78 "doublest.h"
extern DOUBLEST deprecated_extract_floating(const void *addr, int len)
  __attribute__((__deprecated__("Use '" "extract_typed_floating" "' instead")));
extern void deprecated_store_floating(void *addr, int len, DOUBLEST val)
  __attribute__((__deprecated__("Use '" "store_typed_floating" "' instead")));





const struct floatformat *floatformat_from_type (struct type *type);

extern DOUBLEST extract_typed_floating (const void *addr,
     struct type *type);
extern void store_typed_floating (void *addr, struct type *type,
      DOUBLEST val);
extern void convert_typed_floating (const void *from,
        struct type *from_type,
                                    void *to, struct type *to_type);


extern const struct floatformat *floatformat_ieee_single[BFD_ENDIAN_UNKNOWN];
extern const struct floatformat *floatformat_ieee_double[BFD_ENDIAN_UNKNOWN];
extern const struct floatformat *floatformat_ieee_quad[BFD_ENDIAN_UNKNOWN];
extern const struct floatformat *floatformat_arm_ext[BFD_ENDIAN_UNKNOWN];
extern const struct floatformat *floatformat_ia64_spill[BFD_ENDIAN_UNKNOWN];
# 30 "value.h" 2


# 1 "gdb_regex.h" 1
# 22 "gdb_regex.h"
#define GDB_REGEX_H 1
# 33 "value.h" 2




enum opt_state
{
  opt_okay = 0,
  opt_away,
  opt_evicted,
  opt_other
};


# 1 "frame.h" 1
# 24 "frame.h"
#define FRAME_H 1
# 70 "frame.h"
# 1 "value.h" 1
# 71 "frame.h" 2

struct symtab_and_line;
struct frame_unwind;
struct frame_base;
struct block;
struct gdbarch;
struct ui_file;



struct frame_info;






struct frame_id
{
# 102 "frame.h"
  CORE_ADDR stack_addr;
# 113 "frame.h"
  CORE_ADDR code_addr;
# 125 "frame.h"
  CORE_ADDR special_addr;


  unsigned int stack_addr_p : 1;
  unsigned int code_addr_p : 1;
  unsigned int special_addr_p : 1;
};
# 151 "frame.h"
extern const struct frame_id null_frame_id;





extern struct frame_id frame_id_build (CORE_ADDR stack_addr,
           CORE_ADDR code_addr);





extern struct frame_id frame_id_build_special (CORE_ADDR stack_addr,
            CORE_ADDR code_addr,
            CORE_ADDR special_addr);




extern struct frame_id frame_id_build_wild (CORE_ADDR stack_addr);



extern int frame_id_p (struct frame_id l);



extern int frame_id_eq (struct frame_id l, struct frame_id r);




extern int frame_id_inner (struct frame_id l, struct frame_id r);



extern void fprint_frame_id (struct ui_file *file, struct frame_id id);
# 208 "frame.h"
extern struct frame_info *get_current_frame(void);


extern void frame_observer_target_changed(struct target_ops *);
# 226 "frame.h"
extern void flush_cached_frames(void);
extern void reinit_frame_cache(void);
# 238 "frame.h"
extern struct frame_info *get_selected_frame (const char *message);



extern void select_frame (struct frame_info *);



extern struct frame_info *get_prev_frame (struct frame_info *);
extern struct frame_info *get_next_frame (struct frame_info *);



extern struct frame_info *frame_find_by_id (struct frame_id id);







extern CORE_ADDR get_frame_pc (struct frame_info *);
# 274 "frame.h"
extern CORE_ADDR get_frame_address_in_block (struct frame_info *this_frame);
extern CORE_ADDR frame_unwind_address_in_block (struct frame_info *next_frame);




extern CORE_ADDR get_frame_sp (struct frame_info *);
extern CORE_ADDR frame_sp_unwind (struct frame_info *);





extern CORE_ADDR frame_func_unwind (struct frame_info *fi);
extern CORE_ADDR get_frame_func (struct frame_info *fi);
# 308 "frame.h"
extern void find_frame_sal (struct frame_info *frame,
       struct symtab_and_line *sal);
# 333 "frame.h"
extern CORE_ADDR get_frame_base (struct frame_info *);
# 353 "frame.h"
extern struct frame_id get_frame_id (struct frame_info *fi);
extern struct frame_id frame_unwind_id (struct frame_info *next_frame);




extern CORE_ADDR get_frame_base_address (struct frame_info *);






extern CORE_ADDR get_frame_locals_address (struct frame_info *);






extern CORE_ADDR get_frame_args_address (struct frame_info *);



extern int frame_relative_level (struct frame_info *fi);




enum frame_type
{


  NORMAL_FRAME,


  DUMMY_FRAME,


  INLINED_FRAME,



  SIGTRAMP_FRAME,


  SENTINEL_FRAME
};
extern enum frame_type get_frame_type (struct frame_info *);





extern void frame_register_unwind (struct frame_info *frame, int regnum,

       enum opt_state *optimizedp,
       enum lval_type *lvalp,
       CORE_ADDR *addrp, int *realnump,
       gdb_byte *valuep);






extern void frame_unwind_register (struct frame_info *frame,
       int regnum, gdb_byte *buf);
extern void get_frame_register (struct frame_info *frame,
    int regnum, gdb_byte *buf);

extern long long frame_unwind_register_signed (struct frame_info *frame,
          int regnum);
extern long long get_frame_register_signed (struct frame_info *frame,
       int regnum);
extern unsigned long long frame_unwind_register_unsigned (struct frame_info *frame,
            int regnum);
extern unsigned long long get_frame_register_unsigned (struct frame_info *frame,
          int regnum);



extern void frame_unwind_unsigned_register (struct frame_info *frame,
         int regnum, unsigned long long *val);






extern void frame_register (struct frame_info *frame, int regnum,

       enum opt_state *optimizedp, enum lval_type *lvalp,
       CORE_ADDR *addrp, int *realnump,
       gdb_byte *valuep);




extern void put_frame_register (struct frame_info *frame, int regnum,
    const gdb_byte *buf);






extern int frame_map_name_to_regnum (struct frame_info *frame,
         const char *name, int namelen);
extern const char *frame_map_regnum_to_name (struct frame_info *frame,
          int regnum);





extern CORE_ADDR frame_pc_unwind (struct frame_info *frame);



extern void frame_pop (struct frame_info *frame);
# 488 "frame.h"
extern void get_frame_memory (struct frame_info *this_frame, CORE_ADDR addr,
         gdb_byte *buf, int len);
extern long long get_frame_memory_signed (struct frame_info *this_frame,
     CORE_ADDR memaddr, int len);
extern unsigned long long get_frame_memory_unsigned (struct frame_info *this_frame,
        CORE_ADDR memaddr, int len);



extern int safe_frame_unwind_memory (struct frame_info *this_frame,
         CORE_ADDR addr, gdb_byte *buf, int len);



extern struct gdbarch *get_frame_arch (struct frame_info *this_frame);



enum print_what
  {

    SRC_LINE = -1,


    LOCATION,

    SRC_AND_LOC,

    LOC_AND_ADDRESS
  };
# 527 "frame.h"
#define SIZEOF_FRAME_SAVED_REGS (sizeof (CORE_ADDR) * (NUM_REGS+NUM_PSEUDO_REGS))






extern void *frame_obstack_zalloc (unsigned long size);
#define FRAME_OBSTACK_ZALLOC(TYPE) ((TYPE *) frame_obstack_zalloc (sizeof (TYPE)))
#define FRAME_OBSTACK_CALLOC(NUMBER,TYPE) ((TYPE *) frame_obstack_zalloc ((NUMBER) * sizeof (TYPE)))


struct regcache *frame_save_as_regcache (struct frame_info *this_frame);

extern struct block *get_frame_block (struct frame_info *,
                                      CORE_ADDR *addr_in_block);
# 570 "frame.h"
extern struct block *get_selected_block (CORE_ADDR *addr_in_block);


extern struct symbol *get_frame_function_inlined (struct frame_info *);
extern struct symbol *get_frame_function (struct frame_info *);

extern CORE_ADDR get_pc_function_start (CORE_ADDR);

extern struct frame_info *find_relative_frame (struct frame_info *, int *);

extern void show_and_print_stack_frame (struct frame_info *fi, int print_level,
     enum print_what print_what);

extern void print_stack_frame (struct frame_info *, int print_level,
          enum print_what print_what);

extern void show_stack_frame (struct frame_info *);

extern void print_frame_info (struct frame_info *, int print_level,
         enum print_what print_what, int args);

extern struct frame_info *block_innermost_frame(struct block *);

extern int deprecated_pc_in_call_dummy(CORE_ADDR pc)
  __attribute__((__deprecated__));
# 606 "frame.h"
extern int frame_register_read (struct frame_info *frame, int regnum,
    gdb_byte *buf);


extern CORE_ADDR refine_prologue_limit(CORE_ADDR pc, CORE_ADDR lim_pc,
           int max_skip_non_prologue_insns);


int inside_main_func(struct frame_info *this_frame);


extern void args_info(const char *, int);

extern void locals_info(const char *, int);

extern void (*deprecated_selected_frame_level_changed_hook)(int)
  __attribute__((__deprecated__));

extern void return_command(const char *, int);
# 651 "frame.h"
extern struct frame_info *deprecated_selected_frame __attribute__((__deprecated__));
# 665 "frame.h"
extern struct frame_info *deprecated_safe_get_selected_frame(void)
  __attribute__((__deprecated__));



extern struct frame_info *create_new_frame (CORE_ADDR base, CORE_ADDR pc);






extern void deprecated_update_frame_pc_hack(struct frame_info *frame,
         CORE_ADDR pc)
  __attribute__((__deprecated__));
# 688 "frame.h"
extern void deprecated_update_frame_base_hack(struct frame_info *frame,
           CORE_ADDR base)
  __attribute__((__deprecated__));



extern struct frame_info *frame_next_hack (struct frame_info *frame);
extern void *frame_cache_hack (struct frame_info *frame);



extern int backtrace_past_main;
# 47 "value.h" 2

struct block;
struct expression;
struct regcache;
struct symbol;
struct type;
struct ui_file;






struct value;

struct cached_value;



void value_clear_inferior_string_pool (void);





struct value *value_next (struct value *);



extern struct type *value_type (struct value *);





extern void deprecated_set_value_type(struct value *value,
          struct type *type)
  __attribute__((__deprecated__));



extern int value_bitsize (struct value *);
extern void set_value_bitsize (struct value *, int bit);





extern int value_bitpos (struct value *);
extern void set_value_bitpos (struct value *, int bit);







extern int value_offset (struct value *);
extern void set_value_offset (struct value *, int offset);





extern int deprecated_value_modifiable(struct value *value)
  __attribute__((__deprecated__));
extern void deprecated_set_value_modifiable(struct value *value,
         int modifiable)
  __attribute__((__deprecated__));
# 158 "value.h"
extern struct type *value_enclosing_type (struct value *);
extern struct value *value_change_enclosing_type (struct value *val,
        struct type *new_type);
extern int value_pointed_to_offset (struct value *value);
extern void set_value_pointed_to_offset (struct value *value, int val);
extern int value_embedded_offset (struct value *value);
extern void set_value_embedded_offset (struct value *value, int val);
# 181 "value.h"
extern int value_lazy (struct value *);
extern void set_value_lazy (struct value *value, int val);
# 198 "value.h"
extern gdb_byte *value_contents_raw (struct value *);







extern const gdb_byte *value_contents (struct value *);
extern gdb_byte *value_contents_writeable (struct value *);




extern gdb_byte *value_contents_all_raw (struct value *);
extern const gdb_byte *value_contents_all (struct value *);

extern int value_fetch_lazy (struct value *val);
extern int value_contents_equal (struct value *val1, struct value *val2);



extern enum opt_state value_optimized_out (struct value *value);
extern void set_value_optimized_out (struct value *value, enum opt_state val);







extern enum lval_type *deprecated_value_lval_hack(struct value *)
  __attribute__((__deprecated__));
#define VALUE_LVAL(val) (*deprecated_value_lval_hack(val))




extern CORE_ADDR *deprecated_value_address_hack(struct value *)
  __attribute__((__deprecated__));
#define VALUE_ADDRESS(val) (*deprecated_value_address_hack(val))


extern struct internalvar **deprecated_value_internalvar_hack(struct value *)
  __attribute__((__deprecated__));
#define VALUE_INTERNALVAR(val) (*deprecated_value_internalvar_hack(val))



extern struct frame_id *deprecated_value_frame_id_hack(struct value *)
  __attribute__((__deprecated__));
#define VALUE_FRAME_ID(val) (*deprecated_value_frame_id_hack(val))


extern short *deprecated_value_regnum_hack(struct value *)
  __attribute__((__deprecated__));
#define VALUE_REGNUM(val) (*deprecated_value_regnum_hack(val))



extern struct value *coerce_ref (struct value *value);







extern struct value *coerce_array (struct value *value);
extern struct value *coerce_number (struct value *value);



extern struct value *coerce_enum (struct value *value);




struct internalvar
{
  struct internalvar *next;
  char *name;
  struct value *value;
};
# 291 "value.h"
#define METHOD_PTR_IS_VIRTUAL(ADDR) 0


#define METHOD_PTR_FROM_VOFFSET(OFFSET) (0x80000000 + (OFFSET))
#define METHOD_PTR_TO_VOFFSET(ADDR) (~0x80000000 & (ADDR))


# 1 "symtab.h" 1
# 299 "value.h" 2
# 1 "gdbtypes.h" 1
# 26 "gdbtypes.h"
#define GDBTYPES_H 1


struct field;
struct block;







#define FT_VOID 0
#define FT_BOOLEAN 1
#define FT_CHAR 2
#define FT_SIGNED_CHAR 3
#define FT_UNSIGNED_CHAR 4
#define FT_SHORT 5
#define FT_SIGNED_SHORT 6
#define FT_UNSIGNED_SHORT 7
#define FT_INTEGER 8
#define FT_SIGNED_INTEGER 9
#define FT_UNSIGNED_INTEGER 10
#define FT_LONG 11
#define FT_SIGNED_LONG 12
#define FT_UNSIGNED_LONG 13
#define FT_LONG_LONG 14
#define FT_SIGNED_LONG_LONG 15
#define FT_UNSIGNED_LONG_LONG 16
#define FT_FLOAT 17
#define FT_DBL_PREC_FLOAT 18
#define FT_EXT_PREC_FLOAT 19
#define FT_COMPLEX 20
#define FT_DBL_PREC_COMPLEX 21
#define FT_EXT_PREC_COMPLEX 22
#define FT_STRING 23
#define FT_FIXED_DECIMAL 24
#define FT_FLOAT_DECIMAL 25
#define FT_BYTE 26
#define FT_UNSIGNED_BYTE 27
#define FT_TEMPLATE_ARG 28

#define FT_NUM_MEMBERS 29



#define B_SET(a,x) ((a)[(x)>>3] |= (1 << ((x)&7)))
#define B_CLR(a,x) ((a)[(x)>>3] &= ~(1 << ((x)&7)))
#define B_TST(a,x) ((a)[(x)>>3] & (1 << ((x)&7)))
#define B_TYPE unsigned char
#define B_BYTES(x) ( 1 + ((x)>>3) )
#define B_CLRALL(a,x) memset ((a), 0, B_BYTES(x))



enum type_code
  {
    TYPE_CODE_UNDEF,
    TYPE_CODE_PTR,
# 104 "gdbtypes.h"
    TYPE_CODE_ARRAY,

    TYPE_CODE_STRUCT,
    TYPE_CODE_UNION,
    TYPE_CODE_ENUM,
    TYPE_CODE_FLAGS,
    TYPE_CODE_FUNC,
    TYPE_CODE_INT,



    TYPE_CODE_FLT,






    TYPE_CODE_VOID,

    TYPE_CODE_SET,
    TYPE_CODE_RANGE,






    TYPE_CODE_STRING,



    TYPE_CODE_BITSTRING,



    TYPE_CODE_ERROR,


    TYPE_CODE_MEMBER,
    TYPE_CODE_METHOD,





    TYPE_CODE_METHODPTR,





    TYPE_CODE_MEMBERPTR,

    TYPE_CODE_REF,

    TYPE_CODE_CHAR,



    TYPE_CODE_BOOL,


    TYPE_CODE_COMPLEX,

    TYPE_CODE_TYPEDEF,
    TYPE_CODE_TEMPLATE,
    TYPE_CODE_TEMPLATE_ARG,

    TYPE_CODE_NAMESPACE
  };






#define TYPE_CODE_CLASS TYPE_CODE_STRUCT
# 191 "gdbtypes.h"
#define TYPE_FLAG_UNSIGNED (1 << 0)
#define TYPE_UNSIGNED(t) (TYPE_FLAGS (t) & TYPE_FLAG_UNSIGNED)





#define TYPE_FLAG_NOSIGN (1 << 1)
#define TYPE_NOSIGN(t) (TYPE_FLAGS (t) & TYPE_FLAG_NOSIGN)





#define TYPE_FLAG_STUB (1 << 2)
#define TYPE_STUB(t) (TYPE_FLAGS (t) & TYPE_FLAG_STUB)







#define TYPE_FLAG_TARGET_STUB (1 << 3)
#define TYPE_TARGET_STUB(t) (TYPE_FLAGS (t) & TYPE_FLAG_TARGET_STUB)







#define TYPE_FLAG_STATIC (1 << 4)
#define TYPE_STATIC(t) (TYPE_FLAGS (t) & TYPE_FLAG_STATIC)





#define TYPE_FLAG_CONST (1 << 5)
#define TYPE_CONST(t) (TYPE_INSTANCE_FLAGS (t) & TYPE_FLAG_CONST)





#define TYPE_FLAG_VOLATILE (1 << 6)
#define TYPE_VOLATILE(t) (TYPE_INSTANCE_FLAGS (t) & TYPE_FLAG_VOLATILE)






#define TYPE_FLAG_PROTOTYPED (1 << 7)
#define TYPE_PROTOTYPED(t) (TYPE_FLAGS (t) & TYPE_FLAG_PROTOTYPED)
# 256 "gdbtypes.h"
#define TYPE_FLAG_INCOMPLETE (1 << 8)
#define TYPE_INCOMPLETE(t) (TYPE_FLAGS (t) & TYPE_FLAG_INCOMPLETE)
# 278 "gdbtypes.h"
#define TYPE_FLAG_CODE_SPACE (1 << 9)
#define TYPE_CODE_SPACE(t) (TYPE_INSTANCE_FLAGS (t) & TYPE_FLAG_CODE_SPACE)

#define TYPE_FLAG_DATA_SPACE (1 << 10)
#define TYPE_DATA_SPACE(t) (TYPE_INSTANCE_FLAGS (t) & TYPE_FLAG_DATA_SPACE)




#define TYPE_FLAG_VARARGS (1 << 11)
#define TYPE_VARARGS(t) (TYPE_FLAGS (t) & TYPE_FLAG_VARARGS)




#define TYPE_FLAG_VECTOR (1 << 12)
#define TYPE_VECTOR(t) (TYPE_FLAGS (t) & TYPE_FLAG_VECTOR)






#define TYPE_FLAG_ADDRESS_CLASS_1 (1 << 13)
#define TYPE_ADDRESS_CLASS_1(t) (TYPE_INSTANCE_FLAGS(t) & TYPE_FLAG_ADDRESS_CLASS_1)

#define TYPE_FLAG_ADDRESS_CLASS_2 (1 << 14)
#define TYPE_ADDRESS_CLASS_2(t) (TYPE_INSTANCE_FLAGS(t) & TYPE_FLAG_ADDRESS_CLASS_2)

#define TYPE_FLAG_ADDRESS_CLASS_ALL (TYPE_FLAG_ADDRESS_CLASS_1 | TYPE_FLAG_ADDRESS_CLASS_2)

#define TYPE_ADDRESS_CLASS_ALL(t) (TYPE_INSTANCE_FLAGS(t) & TYPE_FLAG_ADDRESS_CLASS_ALL)
# 321 "gdbtypes.h"
#define TYPE_FLAG_FIXED_INSTANCE (1 << 15)



#define TYPE_FLAG_APPLE_CLOSURE (1 << 16)



#define TYPE_FLAG_RESTRICT (1 << 17)
#define TYPE_RESTRICT(t) (TYPE_INSTANCE_FLAGS (t) & TYPE_FLAG_RESTRICT)



#define TYPE_FLAG_OPTIMIZED (1 << 18)
#define TYPE_OPTIMIZED(t) (TYPE_FLAGS (t) & TYPE_FLAG_OPTIMIZED)


enum array_bound_type
{
  BOUND_SIMPLE = 0,
  BOUND_BY_VALUE_IN_REG,
  BOUND_BY_REF_IN_REG,
  BOUND_BY_VALUE_ON_STACK,
  BOUND_BY_REF_ON_STACK,
  BOUND_CANNOT_BE_DETERMINED
};


struct field
{
  union field_location
  {






    int bitpos;





    CORE_ADDR physaddr;
    char *physname;
  }
  loc;



  unsigned int artificial : 1;




  unsigned int static_kind : 2;




  unsigned int bitsize : 29;




  struct type *type;




  const char *name;
};




#pragma GCC diagnostic push
#pragma GCC diagnostic warning "-Wpadded"
#pragma GCC diagnostic warning "-Wpacked"






typedef struct main_type
{

  enum type_code code : 8;




  enum array_bound_type upper_bound_type : 4;
  enum array_bound_type lower_bound_type : 4;






  const char *name;
# 436 "gdbtypes.h"
  const char *tag_name;
# 450 "gdbtypes.h"
  struct objfile *objfile;
# 459 "gdbtypes.h"
  struct type *target_type;


  int flags : 30;



  unsigned int byte_order : 2;


  short nfields;







  short vptr_fieldno;
# 494 "gdbtypes.h"
  struct field *fields;
# 506 "gdbtypes.h"
  struct type *vptr_basetype;


  union type_specific
  {




    struct cplus_struct_type *cplus_stuff;





    const struct floatformat *floatformat;
  } type_specific;
} __attribute__((packed)) gdbtypes_h_main_type_t;




#pragma GCC diagnostic pop





struct type
{





  struct type *pointer_type;



  struct type *reference_type;






  struct type *chain;



  int instance_flags;
# 589 "gdbtypes.h"
  int length;


  struct main_type *main_type;
};

#define NULL_TYPE ((struct type *) 0)




enum runtime_type
  {
    CPLUS_RUNTIME,
    OBJC_RUNTIME
  };


struct fn_field
{
# 620 "gdbtypes.h"
  const char *physname;







  struct type *type;




  struct type *fcontext;


  unsigned int is_const:1;
  unsigned int is_volatile:1;
  unsigned int is_private:1;
  unsigned int is_protected:1;
  unsigned int is_public:1;
  unsigned int is_abstract:1;
  unsigned int is_static:1;
  unsigned int is_final:1;
  unsigned int is_synchronized:1;
  unsigned int is_native:1;
  unsigned int is_artificial:1;



  unsigned int is_stub:1;


  unsigned int is_inlined:1;


  unsigned int dummy:3;



  unsigned int voffset:16;

#define VOFFSET_STATIC 1
};


struct fn_fieldlist
{

  const char *name;


  int length;


  struct fn_field *fn_fields;
};


struct template_arg
{
  char *name;
  struct type *type;
};


struct runtime_info
{
  short has_vtable;
  struct type *primary_base;
  struct type **virtual_base_list;
};


struct local_type_info
{
  char *file;
  int line;
};

struct cplus_struct_type
  {





    short n_baseclasses;




    short nfn_fields;




    short nfn_fields_total;
# 727 "gdbtypes.h"
#define DECLARED_TYPE_CLASS 0
#define DECLARED_TYPE_UNION 1
#define DECLARED_TYPE_STRUCT 2
#define DECLARED_TYPE_TEMPLATE 3
    short declared_type;





    enum runtime_type runtime_type;
# 751 "gdbtypes.h"
    unsigned char *virtual_field_bits;






    unsigned char *private_field_bits;






    unsigned char *protected_field_bits;




    unsigned char *ignore_field_bits;
# 779 "gdbtypes.h"
    struct fn_fieldlist *fn_fieldlists;







    short ntemplate_args;
    struct template_arg *template_args;





    short ninstantiations;
    struct type **instantiations;
# 814 "gdbtypes.h"
    struct runtime_info *runtime_ptr;



    struct local_type_info *localtype_ptr;
  };


struct vbase
  {
    struct type *vbasetype;
    struct vbase *next;
  };


struct badness_vector
  {
    int length;
    int *rank;
  };



struct gdbtypes_enum_info
  {
    const char *name;
    int32_t value;
  };


struct gdbtypes_bitfield_info
  {
    const char *name;
    struct type *type;
    uint8_t msbit;
    uint8_t lsbit;
  };





int objc_fixup_ivar_offset(const struct type *type, int ivar);
int objc_fixup_class_length(const struct type *type);






extern struct cplus_struct_type cplus_struct_default;

extern void allocate_cplus_struct_type (struct type *);

#define INIT_CPLUS_SPECIFIC(type) (TYPE_CPLUS_SPECIFIC(type) = NULL)

#define ALLOCATE_CPLUS_STRUCT_TYPE(type) allocate_cplus_struct_type (type)
#define HAVE_CPLUS_STRUCT(type) (TYPE_CPLUS_SPECIFIC(type) != NULL)


#define TYPE_INSTANCE_FLAGS(thistype) (thistype)->instance_flags
#define TYPE_MAIN_TYPE(thistype) (thistype)->main_type
#define TYPE_NAME(thistype) TYPE_MAIN_TYPE(thistype)->name
#define TYPE_TAG_NAME(type) TYPE_MAIN_TYPE(type)->tag_name
#define TYPE_TARGET_TYPE(thistype) TYPE_MAIN_TYPE(thistype)->target_type
#define TYPE_POINTER_TYPE(thistype) (thistype)->pointer_type
#define TYPE_REFERENCE_TYPE(thistype) (thistype)->reference_type
#define TYPE_CHAIN(thistype) (thistype)->chain
# 891 "gdbtypes.h"
#define TYPE_LENGTH_ASSIGN(thistype) (thistype)->length
#define TYPE_LENGTH(thistype) ((TYPE_LENGTH_ASSIGN(thistype) < 0) ? objc_fixup_class_length(thistype) : TYPE_LENGTH_ASSIGN(thistype))



#define TYPE_OBJFILE(thistype) TYPE_MAIN_TYPE(thistype)->objfile
#define TYPE_FLAGS(thistype) TYPE_MAIN_TYPE(thistype)->flags


#define TYPE_CODE(thistype) TYPE_MAIN_TYPE(thistype)->code
#define TYPE_BYTE_ORDER(thistype) TYPE_MAIN_TYPE(thistype)->byte_order
#define TYPE_NFIELDS(thistype) TYPE_MAIN_TYPE(thistype)->nfields
#define TYPE_FIELDS(thistype) TYPE_MAIN_TYPE(thistype)->fields
#define TYPE_TEMPLATE_ARGS(thistype) TYPE_CPLUS_SPECIFIC_NONULL(thistype)->template_args
#define TYPE_INSTANTIATIONS(thistype) TYPE_CPLUS_SPECIFIC_NONULL(thistype)->instantiations

#define TYPE_RUNTIME(thistype) (TYPE_CPLUS_SPECIFIC_NONULL(thistype)->runtime_type)

#define TYPE_INDEX_TYPE(type) TYPE_FIELD_TYPE (type, 0)
#define TYPE_LOW_BOUND(range_type) TYPE_FIELD_BITPOS_ASSIGN (range_type, 0)
#define TYPE_HIGH_BOUND(range_type) TYPE_FIELD_BITPOS_ASSIGN (range_type, 1)

#define TYPE_STRIDE(range_type) TYPE_FIELD_BITPOS_ASSIGN (range_type, 2)



#define TYPE_ARRAY_UPPER_BOUND_TYPE(thistype) TYPE_MAIN_TYPE(thistype)->upper_bound_type

#define TYPE_ARRAY_LOWER_BOUND_TYPE(thistype) TYPE_MAIN_TYPE(thistype)->lower_bound_type


#define TYPE_ARRAY_UPPER_BOUND_VALUE(arraytype) (TYPE_FIELD_BITPOS_ASSIGN((TYPE_FIELD_TYPE((arraytype),0)),1))


#define TYPE_ARRAY_LOWER_BOUND_VALUE(arraytype) (TYPE_FIELD_BITPOS_ASSIGN((TYPE_FIELD_TYPE((arraytype),0)),0))






#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Waddress"



#define TYPE_VPTR_BASETYPE(thistype) TYPE_MAIN_TYPE(thistype)->vptr_basetype
#define TYPE_DOMAIN_TYPE(thistype) TYPE_MAIN_TYPE(thistype)->vptr_basetype
#define TYPE_VPTR_FIELDNO(thistype) TYPE_MAIN_TYPE(thistype)->vptr_fieldno
#define TYPE_FN_FIELDS(thistype) TYPE_CPLUS_SPECIFIC_NONULL(thistype)->fn_fields
#define TYPE_NFN_FIELDS(thistype) TYPE_CPLUS_SPECIFIC_NONULL(thistype)->nfn_fields
#define TYPE_NFN_FIELDS_TOTAL(thistype) TYPE_CPLUS_SPECIFIC_NONULL(thistype)->nfn_fields_total
#define TYPE_NTEMPLATE_ARGS(thistype) TYPE_CPLUS_SPECIFIC_NONULL(thistype)->ntemplate_args
#define TYPE_NINSTANTIATIONS(thistype) TYPE_CPLUS_SPECIFIC_NONULL(thistype)->ninstantiations
#define TYPE_DECLARED_TYPE(thistype) TYPE_CPLUS_SPECIFIC_NONULL(thistype)->declared_type
#define TYPE_TYPE_SPECIFIC(thistype) TYPE_MAIN_TYPE(thistype)->type_specific
#define TYPE_CPLUS_SPECIFIC(thistype) TYPE_MAIN_TYPE(thistype)->type_specific.cplus_stuff
#define TYPE_CPLUS_SPECIFIC_NONULL(thistype) ((TYPE_CPLUS_SPECIFIC(thistype) != NULL) ? TYPE_CPLUS_SPECIFIC(thistype) : &cplus_struct_default)

#define TYPE_FLOATFORMAT(thistype) TYPE_MAIN_TYPE(thistype)->type_specific.floatformat
#define TYPE_BASECLASS(thistype,index) TYPE_MAIN_TYPE(thistype)->fields[index].type
#define TYPE_N_BASECLASSES(thistype) TYPE_CPLUS_SPECIFIC_NONULL(thistype)->n_baseclasses
#define TYPE_BASECLASS_NAME(thistype,index) TYPE_MAIN_TYPE(thistype)->fields[index].name
#define TYPE_BASECLASS_BITPOS(thistype,index) TYPE_FIELD_BITPOS(thistype,index)
#define BASETYPE_VIA_PUBLIC(thistype,index) ((!TYPE_FIELD_PRIVATE(thistype, index)) && (!TYPE_FIELD_PROTECTED(thistype, index)))


#define BASETYPE_VIA_VIRTUAL(thistype,index) (TYPE_CPLUS_SPECIFIC_NONULL(thistype)->virtual_field_bits == NULL ? 0 : B_TST(TYPE_CPLUS_SPECIFIC_NONULL(thistype)->virtual_field_bits, (index)))



#define FIELD_TYPE(thisfld) ((thisfld).type)
#define FIELD_NAME(thisfld) ((thisfld).name)
#define FIELD_BITPOS(thisfld) ((thisfld).loc.bitpos)
#define FIELD_ARTIFICIAL(thisfld) ((thisfld).artificial)
#define FIELD_BITSIZE(thisfld) ((thisfld).bitsize)
#define FIELD_STATIC_KIND(thisfld) ((thisfld).static_kind)
#define FIELD_PHYSNAME(thisfld) ((thisfld).loc.physname)
#define FIELD_PHYSADDR(thisfld) ((thisfld).loc.physaddr)
#define SET_FIELD_PHYSNAME(thisfld,name) ((thisfld).static_kind = 1, FIELD_PHYSNAME(thisfld) = (name))

#define SET_FIELD_PHYSADDR(thisfld,name) ((thisfld).static_kind = 2, FIELD_PHYSADDR(thisfld) = (name))

#define TYPE_FIELD(thistype,n) TYPE_MAIN_TYPE(thistype)->fields[n]
#define TYPE_FIELD_TYPE(thistype,n) FIELD_TYPE(TYPE_FIELD(thistype, n))
#define TYPE_FIELD_NAME(thistype,n) FIELD_NAME(TYPE_FIELD(thistype, n))





#define TYPE_FIELD_BITPOS_ASSIGN(thistype,n) FIELD_BITPOS(TYPE_FIELD(thistype,n))
#define TYPE_FIELD_BITPOS(thistype,n) (FIELD_BITPOS(TYPE_FIELD(thistype,n)) < 0 ? objc_fixup_ivar_offset(thistype,n) : FIELD_BITPOS(TYPE_FIELD(thistype,n)))





#define TYPE_FIELD_ARTIFICIAL(thistype,n) FIELD_ARTIFICIAL(TYPE_FIELD(thistype,n))
#define TYPE_FIELD_BITSIZE(thistype,n) FIELD_BITSIZE(TYPE_FIELD(thistype,n))
#define TYPE_FIELD_PACKED(thistype,n) (FIELD_BITSIZE(TYPE_FIELD(thistype,n))!=0)
#define TYPE_TEMPLATE_ARG(thistype,n) TYPE_CPLUS_SPECIFIC_NONULL(thistype)->template_args[n]
#define TYPE_INSTANTIATION(thistype,n) TYPE_CPLUS_SPECIFIC_NONULL(thistype)->instantiations[n]

#define TYPE_FIELD_PRIVATE_BITS(thistype) TYPE_CPLUS_SPECIFIC_NONULL(thistype)->private_field_bits

#define TYPE_FIELD_PROTECTED_BITS(thistype) TYPE_CPLUS_SPECIFIC_NONULL(thistype)->protected_field_bits

#define TYPE_FIELD_IGNORE_BITS(thistype) TYPE_CPLUS_SPECIFIC_NONULL(thistype)->ignore_field_bits

#define TYPE_FIELD_VIRTUAL_BITS(thistype) TYPE_CPLUS_SPECIFIC_NONULL(thistype)->virtual_field_bits

#define SET_TYPE_FIELD_PRIVATE(thistype,n) B_SET (TYPE_CPLUS_SPECIFIC_NONULL(thistype)->private_field_bits, (n))

#define SET_TYPE_FIELD_PROTECTED(thistype,n) B_SET (TYPE_CPLUS_SPECIFIC_NONULL(thistype)->protected_field_bits, (n))

#define SET_TYPE_FIELD_IGNORE(thistype,n) B_SET (TYPE_CPLUS_SPECIFIC_NONULL(thistype)->ignore_field_bits, (n))

#define SET_TYPE_FIELD_VIRTUAL(thistype,n) B_SET (TYPE_CPLUS_SPECIFIC_NONULL(thistype)->virtual_field_bits, (n))

#define TYPE_FIELD_PRIVATE(thistype,n) (TYPE_CPLUS_SPECIFIC_NONULL(thistype)->private_field_bits == NULL ? 0 : B_TST(TYPE_CPLUS_SPECIFIC_NONULL(thistype)->private_field_bits, (n)))


#define TYPE_FIELD_PROTECTED(thistype,n) (TYPE_CPLUS_SPECIFIC_NONULL(thistype)->protected_field_bits == NULL ? 0 : B_TST(TYPE_CPLUS_SPECIFIC_NONULL(thistype)->protected_field_bits, (n)))


#define TYPE_FIELD_IGNORE(thistype,n) (TYPE_CPLUS_SPECIFIC_NONULL(thistype)->ignore_field_bits == NULL ? 0 : B_TST(TYPE_CPLUS_SPECIFIC_NONULL(thistype)->ignore_field_bits, (n)))


#define TYPE_FIELD_VIRTUAL(thistype,n) (TYPE_CPLUS_SPECIFIC_NONULL(thistype)->virtual_field_bits == NULL ? 0 : B_TST(TYPE_CPLUS_SPECIFIC_NONULL(thistype)->virtual_field_bits, (n)))



#define TYPE_FIELD_STATIC(thistype,n) (TYPE_MAIN_TYPE (thistype)->fields[n].static_kind != 0)
#define TYPE_FIELD_STATIC_KIND(thistype,n) TYPE_MAIN_TYPE (thistype)->fields[n].static_kind
#define TYPE_FIELD_STATIC_HAS_ADDR(thistype,n) (TYPE_MAIN_TYPE (thistype)->fields[n].static_kind == 2)
#define TYPE_FIELD_STATIC_PHYSNAME(thistype,n) FIELD_PHYSNAME(TYPE_FIELD(thistype, n))
#define TYPE_FIELD_STATIC_PHYSADDR(thistype,n) FIELD_PHYSADDR(TYPE_FIELD(thistype, n))

#define TYPE_FN_FIELDLISTS(thistype) TYPE_CPLUS_SPECIFIC_NONULL(thistype)->fn_fieldlists
#define TYPE_FN_FIELDLIST(thistype,n) TYPE_CPLUS_SPECIFIC_NONULL(thistype)->fn_fieldlists[n]
#define TYPE_FN_FIELDLIST1(thistype,n) TYPE_CPLUS_SPECIFIC_NONULL(thistype)->fn_fieldlists[n].fn_fields
#define TYPE_FN_FIELDLIST_NAME(thistype,n) TYPE_CPLUS_SPECIFIC_NONULL(thistype)->fn_fieldlists[n].name
#define TYPE_FN_FIELDLIST_LENGTH(thistype,n) TYPE_CPLUS_SPECIFIC_NONULL(thistype)->fn_fieldlists[n].length

#define TYPE_FN_FIELD(thisfn,n) (thisfn)[n]
#define TYPE_FN_FIELD_PHYSNAME(thisfn,n) (thisfn)[n].physname
#define TYPE_FN_FIELD_TYPE(thisfn,n) (thisfn)[n].type
#define TYPE_FN_FIELD_ARGS(thisfn,n) TYPE_FIELDS ((thisfn)[n].type)
#define TYPE_FN_FIELD_CONST(thisfn,n) ((thisfn)[n].is_const)
#define TYPE_FN_FIELD_VOLATILE(thisfn,n) ((thisfn)[n].is_volatile)
#define TYPE_FN_FIELD_PRIVATE(thisfn,n) ((thisfn)[n].is_private)
#define TYPE_FN_FIELD_PROTECTED(thisfn,n) ((thisfn)[n].is_protected)
#define TYPE_FN_FIELD_PUBLIC(thisfn,n) ((thisfn)[n].is_public)
#define TYPE_FN_FIELD_STATIC(thisfn,n) ((thisfn)[n].is_static)
#define TYPE_FN_FIELD_FINAL(thisfn,n) ((thisfn)[n].is_final)
#define TYPE_FN_FIELD_SYNCHRONIZED(thisfn,n) ((thisfn)[n].is_synchronized)
#define TYPE_FN_FIELD_NATIVE(thisfn,n) ((thisfn)[n].is_native)
#define TYPE_FN_FIELD_ARTIFICIAL(thisfn,n) ((thisfn)[n].is_artificial)
#define TYPE_FN_FIELD_ABSTRACT(thisfn,n) ((thisfn)[n].is_abstract)
#define TYPE_FN_FIELD_STUB(thisfn,n) ((thisfn)[n].is_stub)
#define TYPE_FN_FIELD_INLINED(thisfn,n) ((thisfn)[n].is_inlined)
#define TYPE_FN_FIELD_FCONTEXT(thisfn,n) ((thisfn)[n].fcontext)
#define TYPE_FN_FIELD_VOFFSET(thisfn,n) ((thisfn)[n].voffset-2)
#define TYPE_FN_FIELD_VIRTUAL_P(thisfn,n) ((thisfn)[n].voffset > 1)
#define TYPE_FN_FIELD_STATIC_P(thisfn,n) ((thisfn)[n].voffset == VOFFSET_STATIC)

#define TYPE_RUNTIME_PTR(thistype) (TYPE_CPLUS_SPECIFIC_NONULL(thistype)->runtime_ptr)
#define TYPE_VTABLE(thistype) (TYPE_RUNTIME_PTR(thistype)->has_vtable)
#define TYPE_HAS_VTABLE(thistype) (TYPE_RUNTIME_PTR(thistype) && TYPE_VTABLE(thistype))
#define TYPE_PRIMARY_BASE(thistype) (TYPE_RUNTIME_PTR(thistype)->primary_base)
#define TYPE_VIRTUAL_BASE_LIST(thistype) (TYPE_RUNTIME_PTR(thistype)->virtual_base_list)

#define TYPE_LOCALTYPE_PTR(thistype) (TYPE_CPLUS_SPECIFIC_NONULL(thistype)->localtype_ptr)
#define TYPE_LOCALTYPE_FILE(thistype) (TYPE_CPLUS_SPECIFIC_NONULL(thistype)->localtype_ptr->file)
#define TYPE_LOCALTYPE_LINE(thistype) (TYPE_CPLUS_SPECIFIC_NONULL(thistype)->localtype_ptr->line)
# 1075 "gdbtypes.h"
#define TYPE_IS_OPAQUE(thistype) (((TYPE_CODE(thistype) == TYPE_CODE_STRUCT) || (TYPE_CODE(thistype) == TYPE_CODE_UNION)) && ((TYPE_NFIELDS(thistype) == 0) && (TYPE_LENGTH(thistype) == 0)) && (TYPE_CPLUS_SPECIFIC_NONULL(thistype) && (TYPE_NFN_FIELDS(thistype) == 0)))







#pragma GCC diagnostic pop



struct builtin_type
{




  struct type *builtin_data_ptr;
# 1103 "gdbtypes.h"
  struct type *builtin_func_ptr;


  struct type *builtin_core_addr;






  struct type *builtin_true_char;


  struct type *builtin_void;
  struct type *builtin_char;
  struct type *builtin_short;
  struct type *builtin_int;
  struct type *builtin_long;
  struct type *builtin_signed_char;
  struct type *builtin_unsigned_char;
  struct type *builtin_unsigned_short;
  struct type *builtin_unsigned_int;
  struct type *builtin_unsigned_long;
  struct type *builtin_float;
  struct type *builtin_double;
  struct type *builtin_long_double;
  struct type *builtin_complex;
  struct type *builtin_double_complex;
  struct type *builtin_string;
  struct type *builtin_bool;
  struct type *builtin_long_long;
  struct type *builtin_unsigned_long_long;
};


extern const struct builtin_type *builtin_type (struct gdbarch *gdbarch);


extern struct type *builtin_type_void;
extern struct type *builtin_type_char;
extern struct type *builtin_type_short;
extern struct type *builtin_type_int;
extern struct type *builtin_type_long;
extern struct type *builtin_type_signed_char;
extern struct type *builtin_type_unsigned_char;
extern struct type *builtin_type_unsigned_short;
extern struct type *builtin_type_unsigned_int;
extern struct type *builtin_type_unsigned_long;
extern struct type *builtin_type_float;
extern struct type *builtin_type_double;
extern struct type *builtin_type_long_double;
extern struct type *builtin_type_complex;
extern struct type *builtin_type_double_complex;
extern struct type *builtin_type_string;
extern struct type *builtin_type_bool;





extern struct type *builtin_type_void_data_ptr;
# 1172 "gdbtypes.h"
extern struct type *builtin_type_void_func_ptr;


extern struct type *builtin_type_CORE_ADDR;



extern struct type *builtin_type_bfd_vma;
extern struct type *builtin_type_voidptrfuncptr;




extern struct type *builtin_type_int0;
extern struct type *builtin_type_int8;
extern struct type *builtin_type_uint8;
extern struct type *builtin_type_int16;
extern struct type *builtin_type_uint16;
extern struct type *builtin_type_int32;
extern struct type *builtin_type_uint32;
extern struct type *builtin_type_int64;
extern struct type *builtin_type_uint64;
extern struct type *builtin_type_int128;
extern struct type *builtin_type_uint128;


extern struct type *builtin_type_v4sf;
extern struct type *builtin_type_v4si;
extern struct type *builtin_type_v16qi;
extern struct type *builtin_type_v8qi;
extern struct type *builtin_type_v8hi;
extern struct type *builtin_type_v4hi;
extern struct type *builtin_type_v2si;


extern struct type *builtin_type_v2_float;
extern struct type *builtin_type_v2_int32;
extern struct type *builtin_type_v4_int16;
extern struct type *builtin_type_v8_int8;
extern struct type *builtin_type_vec64;


extern struct type *builtin_type_v2_double;
extern struct type *builtin_type_v4_float;
extern struct type *builtin_type_v2_int64;
extern struct type *builtin_type_v4_int32;
extern struct type *builtin_type_v8_int16;
extern struct type *builtin_type_v16_int8;
extern struct type *builtin_type_vec128;


extern struct type *builtin_type_ieee_single[BFD_ENDIAN_UNKNOWN];
extern struct type *builtin_type_ieee_single_big;
extern struct type *builtin_type_ieee_single_little;
extern struct type *builtin_type_ieee_double[BFD_ENDIAN_UNKNOWN];
extern struct type *builtin_type_ieee_double_big;
extern struct type *builtin_type_ieee_double_little;
extern struct type *builtin_type_ieee_double_littlebyte_bigword;
extern struct type *builtin_type_i387_ext;
extern struct type *builtin_type_m68881_ext;
extern struct type *builtin_type_i960_ext;
extern struct type *builtin_type_m88110_ext;
extern struct type *builtin_type_m88110_harris_ext;
extern struct type *builtin_type_arm_ext[BFD_ENDIAN_UNKNOWN];
extern struct type *builtin_type_arm_ext_big;
extern struct type *builtin_type_arm_ext_littlebyte_bigword;
extern struct type *builtin_type_ia64_spill[BFD_ENDIAN_UNKNOWN];
extern struct type *builtin_type_ia64_spill_big;
extern struct type *builtin_type_ia64_spill_little;
extern struct type *builtin_type_ia64_quad[BFD_ENDIAN_UNKNOWN];
extern struct type *builtin_type_ia64_quad_big;
extern struct type *builtin_type_ia64_quad_little;




extern struct type *builtin_type_true_char;




extern struct type *builtin_type_error;

extern struct type *builtin_type_long_long;
extern struct type *builtin_type_unsigned_long_long;



extern struct type *builtin_type_m2_char;
extern struct type *builtin_type_m2_int;
extern struct type *builtin_type_m2_card;
extern struct type *builtin_type_m2_real;
extern struct type *builtin_type_m2_bool;



extern struct type *builtin_type_f_character;
extern struct type *builtin_type_f_integer;
extern struct type *builtin_type_f_integer_s2;
extern struct type *builtin_type_f_logical;
extern struct type *builtin_type_f_logical_s1;
extern struct type *builtin_type_f_logical_s2;
extern struct type *builtin_type_f_real;
extern struct type *builtin_type_f_real_s8;
extern struct type *builtin_type_f_real_s16;
extern struct type *builtin_type_f_complex_s8;
extern struct type *builtin_type_f_complex_s16;
extern struct type *builtin_type_f_complex_s32;
extern struct type *builtin_type_f_void;






#define MAX_OF_TYPE(t) (TYPE_UNSIGNED(t) ? UMAX_OF_SIZE(TYPE_LENGTH(t)) : MAX_OF_SIZE(TYPE_LENGTH(t)))



#define MIN_OF_TYPE(t) (TYPE_UNSIGNED(t) ? UMIN_OF_SIZE(TYPE_LENGTH(t)) : MIN_OF_SIZE(TYPE_LENGTH(t)))
# 1304 "gdbtypes.h"
#define TYPE_ALLOC(t,size) ((TYPE_OBJFILE(t) != NULL) ? obstack_alloc(&TYPE_OBJFILE(t)->objfile_obstack, size) : xmalloc(size))




extern struct type *alloc_type(struct objfile *);

extern struct type *init_type(enum type_code, int, int, const char *,
         struct objfile *);







extern struct type *init_composite_type(const char *name, enum type_code code);
extern void append_composite_type_field(struct type *t, const char *name,
     struct type *field);

extern struct type *lookup_reference_type(struct type *);

extern struct type *make_reference_type(struct type *, struct type **);

extern struct type *make_cvr_type(int, int, int, struct type *, struct type **);

extern void replace_type(struct type *, struct type *);

extern int address_space_name_to_int(char *);

extern const char *address_space_int_to_name(int);

extern struct type *make_type_with_address_space (struct type *type,
        int space_identifier);

extern struct type *lookup_member_type (struct type *, struct type *);

extern void
smash_to_method_type (struct type *type, struct type *domain,
        struct type *to_type, struct field *args,
        int nargs, int varargs);

extern void smash_to_member_type (struct type *, struct type *, struct type *);

extern struct type *allocate_stub_method (struct type *);

extern const char *type_name_no_tag(const struct type *);

extern struct type *lookup_struct_elt_type(struct type *, const char *, int);

extern struct type *make_pointer_type (struct type *, struct type **);

extern struct type *lookup_pointer_type (struct type *);


extern struct type *make_function_type (struct type *, struct type **, int);

extern struct type *lookup_function_type (struct type *);

extern struct type *create_range_type(struct type *, struct type *, int,
          int);

extern struct type *create_array_type(struct type *, struct type *,
          struct type *);

extern struct type *create_string_type(struct type *, struct type *);

extern struct type *create_set_type(struct type *, struct type *);

extern struct type *lookup_unsigned_typename(const char *);

extern struct type *lookup_signed_typename(const char *);

extern struct type *check_typedef(struct type *);

#define CHECK_TYPEDEF(TYPE) (TYPE) = check_typedef(TYPE)

extern void check_stub_method_group(struct type *, int);

extern char *gdb_mangle_name (struct type *, int, int);

extern struct type *lookup_typename(const char *, struct block *, int);

extern struct type *lookup_template_type (char *, struct type *,
       struct block *);

extern struct type *lookup_fundamental_type (struct objfile *, int);

extern void fill_in_vptr_fieldno (struct type *);

extern int get_destructor_fn_field (struct type *, int *, int *);

extern int get_discrete_bounds (struct type *, long long *, long long *);


extern int get_array_bounds (struct type *, long long *, long long *, long long *);

extern int is_ancestor (struct type *, struct type *);

int is_ancestor_by_name (const char *base, struct type *dclass);

extern int has_vtable (struct type *);

extern struct type *primary_base_class (struct type *);

extern struct type **virtual_base_list (struct type *);

extern int virtual_base_list_length (struct type *);
extern int virtual_base_list_length_skip_primaries (struct type *);

extern int virtual_base_index (struct type *, struct type *);
extern int virtual_base_index_skip_primaries (struct type *, struct type *);


extern int class_index_in_primary_list (struct type *);

extern int count_virtual_fns (struct type *);







#define HP_ACC_VFUNC_START 4
# 1437 "gdbtypes.h"
#define HP_ACC_VBASE_START 2



#define HP_ACC_TYPEINFO_OFFSET 2



#define HP_ACC_TOP_OFFSET_OFFSET 1



#define LENGTH_MATCH(bv) ((bv)->rank[0])


#define LENGTH_MISMATCH_BADNESS 100

#define TOO_FEW_PARAMS_BADNESS 100

#define INCOMPATIBLE_TYPE_BADNESS 100


#define INTEGER_PROMOTION_BADNESS 1

#define FLOAT_PROMOTION_BADNESS 1

#define INTEGER_CONVERSION_BADNESS 2

#define FLOAT_CONVERSION_BADNESS 2

#define INT_FLOAT_CONVERSION_BADNESS 2

#define BOOLEAN_CONVERSION_BADNESS 2

#define POINTER_CONVERSION_BADNESS 2

#define VOID_PTR_CONVERSION_BADNESS 2

#define BASE_CONVERSION_BADNESS 2

#define REFERENCE_CONVERSION_BADNESS 2



#define NS_POINTER_CONVERSION_BADNESS 10


extern int compare_badness(struct badness_vector *, struct badness_vector *);

extern struct badness_vector *rank_function(struct type **, int,
         struct type **, int);

extern int rank_one_type(struct type *, struct type *);

extern const char *type_code_name(int code);

extern void recursive_dump_type(struct type *, int);



extern void print_scalar_formatted(const void *, struct type *, int, int,
       struct ui_file *);

extern int can_dereference(struct type *);

extern int is_integral_type(struct type *);

extern void maintenance_print_type(const char *, int);



extern void cleanup_undefined_arrays (void);



extern struct type *build_builtin_enum (const char *name, uint32_t size,
     int flags, struct gdbtypes_enum_info *,
     uint32_t n);

extern struct type *build_builtin_bitfield (const char *name, uint32_t size,
         struct gdbtypes_bitfield_info *,
         uint32_t n);
extern struct type *get_closure_dynamic_type (struct value *in_value);
extern struct value *get_closure_implementation_fn (struct value *);



int ftype_has_debug_info_p (struct type *type);


struct type *remove_all_typedefs (struct type *type);
# 300 "value.h" 2
# 1 "expression.h" 1
# 24 "expression.h"
#define EXPRESSION_H 1
# 46 "expression.h"
enum exp_opcode
  {


    OP_NULL,




    BINOP_ADD,
    BINOP_SUB,
    BINOP_MUL,
    BINOP_DIV,
    BINOP_REM,
    BINOP_MOD,
    BINOP_LSH,
    BINOP_RSH,
    BINOP_LOGICAL_AND,
    BINOP_LOGICAL_OR,
    BINOP_BITWISE_AND,
    BINOP_BITWISE_IOR,
    BINOP_BITWISE_XOR,
    BINOP_EQUAL,
    BINOP_NOTEQUAL,
    BINOP_LESS,
    BINOP_GTR,
    BINOP_LEQ,
    BINOP_GEQ,
    BINOP_REPEAT,
    BINOP_ASSIGN,
    BINOP_COMMA,
    BINOP_SUBSCRIPT,
    BINOP_EXP,



    BINOP_MIN,
    BINOP_MAX,



    STRUCTOP_MEMBER,



    STRUCTOP_MPTR,




    BINOP_INTDIV,

    BINOP_ASSIGN_MODIFY,






    BINOP_VAL,
    BINOP_INCL,
    BINOP_EXCL,




    BINOP_CONCAT,


    BINOP_IN,



    BINOP_RANGE,


    BINOP_END,


    TERNOP_COND,



    TERNOP_SLICE,




    TERNOP_SLICE_COUNT,






    MULTI_SUBSCRIPT,
# 151 "expression.h"
    OP_LONG,


    OP_DOUBLE,






    OP_VAR_VALUE,





    OP_LAST,




    OP_REGISTER,



    OP_INTERNALVAR,







    OP_FUNCALL,






    OP_OBJC_MSGCALL,






    OP_F77_UNDETERMINED_ARGLIST,



    OP_COMPLEX,





    OP_STRING,





    OP_BITSTRING,
# 225 "expression.h"
    OP_ARRAY,




    UNOP_CAST,





    UNOP_MEMVAL,




    UNOP_NEG,
    UNOP_LOGICAL_NOT,
    UNOP_COMPLEMENT,
    UNOP_IND,
    UNOP_ADDR,
    UNOP_PREINCREMENT,
    UNOP_POSTINCREMENT,
    UNOP_PREDECREMENT,
    UNOP_POSTDECREMENT,
    UNOP_SIZEOF,

    UNOP_PLUS,

    UNOP_CAP,
    UNOP_CHR,
    UNOP_ORD,
    UNOP_ABS,
    UNOP_FLOAT,
    UNOP_HIGH,
    UNOP_MAX,
    UNOP_MIN,
    UNOP_ODD,
    UNOP_TRUNC,


    UNOP_LOWER, UNOP_UPPER, UNOP_LENGTH, UNOP_CARD, UNOP_CHMAX, UNOP_CHMIN,

    OP_BOOL,
    OP_M2_STRING,
# 282 "expression.h"
    STRUCTOP_STRUCT,
    STRUCTOP_PTR,



    OP_THIS,



    OP_OBJC_SELF,


    OP_OBJC_SELECTOR,




    OP_SCOPE,
# 312 "expression.h"
    OP_LABELED,




    OP_TYPE,


    OP_NAME,


    OP_EXPRSTRING,


    OP_OBJC_NSSTRING,
# 337 "expression.h"
    OP_EXTENDED0,



    OP_EXTENDED_LAST = 0xff





  };

union exp_element
  {
    enum exp_opcode opcode;
    struct symbol *symbol;
    long long longconst;
    DOUBLEST doubleconst;


    char string;
    struct type *type;
    struct internalvar *internalvar;
    struct block *block;
  };

struct expression
  {
    const struct language_defn *language_defn;
    int nelts;
    union exp_element elts[3];
  };




#define EXP_ELEM_TO_BYTES(elements) ((elements) * sizeof(union exp_element))

#define BYTES_TO_EXP_ELEM(bytes) (((bytes) + sizeof(union exp_element) - 1) / sizeof(union exp_element))




extern struct expression *parse_expression(const char *);

extern struct expression *parse_expression_in_context(const char *, int);

extern struct expression *parse_exp_1(const char **, struct block *, int);




extern struct block *innermost_block;





enum noside
  {
    EVAL_NORMAL,
    EVAL_SKIP,
    EVAL_AVOID_SIDE_EFFECTS
# 408 "expression.h"
  };

extern struct value *evaluate_subexp_standard
  (struct type *, struct expression *, int *, enum noside);



extern void print_expression(struct expression *, struct ui_file *);

extern const char *op_string(enum exp_opcode);

extern void dump_raw_expression(struct expression *, struct ui_file *,
    const char *);
extern void dump_prefix_expression(struct expression *, struct ui_file *);
# 301 "value.h" 2

struct frame_info;
struct fn_field;

extern void print_address_demangle (CORE_ADDR, struct ui_file *, int);

extern long long value_as_long (struct value *val);
extern DOUBLEST value_as_double (struct value *val);
extern CORE_ADDR value_as_address (struct value *val);

extern long long unpack_long (struct type *type, const gdb_byte *valaddr);
extern DOUBLEST unpack_double (struct type *type, const gdb_byte *valaddr,
          int *invp);
extern CORE_ADDR unpack_pointer (struct type *type, const gdb_byte *valaddr);
extern long long unpack_field_as_long (struct type *type,
         const gdb_byte *valaddr,
         int fieldno);

extern void pack_long (gdb_byte *buf, struct type *type, long long num);

extern struct value *value_from_longest (struct type *type, long long num);
extern struct value *value_from_pointer (struct type *type, CORE_ADDR addr);
extern struct value *value_from_double (struct type *type, DOUBLEST num);
extern struct value *value_from_string (char *string);

extern struct value *value_at (struct type *type, CORE_ADDR addr);
extern struct value *value_at_lazy (struct type *type, CORE_ADDR addr);

extern struct value *value_from_register (struct type *type, int regnum,
       struct frame_info *frame);

extern struct value *value_of_variable (struct symbol *var, struct block *b);

extern struct value *value_of_register (int regnum, struct frame_info *frame);

extern int symbol_read_needs_frame (struct symbol *);

extern struct value *read_var_value (struct symbol *var,
         struct frame_info *frame);

extern struct value *locate_var_value (struct symbol *var,
           struct frame_info *frame);

extern struct value *allocate_value (struct type *type);

extern struct value *allocate_repeat_value (struct type *type, int count);

extern struct value *value_mark (void);

extern void value_free_to_mark (struct value *mark);

extern struct value *value_string(const char *ptr, int len);
extern struct value *value_bitstring(char *ptr, int len);

extern struct value *value_array (int lowbound, int highbound,
      struct value **elemvec);

extern struct value *value_concat (struct value *arg1, struct value *arg2);

extern struct value *value_binop (struct value *arg1, struct value *arg2,
      enum exp_opcode op);

extern struct value *value_add (struct value *arg1, struct value *arg2);

extern struct value *value_sub (struct value *arg1, struct value *arg2);

extern struct value *value_coerce_array (struct value *arg1);

extern struct value *value_coerce_function (struct value *arg1);

extern struct value *value_ind (struct value *arg1);

extern struct value *value_addr (struct value *arg1);

extern struct value *value_assign (struct value *toval,
       struct value *fromval);

extern struct value *value_pos (struct value *arg1);

extern struct value *value_neg (struct value *arg1);

extern struct value *value_complement(struct value *arg1);

extern struct value *value_struct_elt(struct value **argp,
          struct value **args,
          const char *name, int *static_memfuncp,
          const char *err);

extern struct value *value_aggregate_elt(struct type *curtype,
      char *name, enum noside noside);

extern struct value *value_static_field(struct type *type, int fieldno);

extern struct fn_field *value_find_oload_method_list (struct value **, char *,
            int, int *,
            struct type **, int *);

extern int find_overload_match (struct type **arg_types, int nargs,
    char *name, int method, int lax,
    struct value **objp, struct symbol *fsym,
    struct value **valp, struct symbol **symp,
    int *staticp);

extern struct value *value_field (struct value *arg1, int fieldno);

extern struct value *value_primitive_field (struct value *arg1, int offset,
         int fieldno,
         struct type *arg_type);


extern struct type *value_rtti_target_type (struct value *, int *, int *,
         int *);

extern struct value *value_full_object (struct value *, struct type *, int,
     int, int);

extern struct value *value_cast (struct type *type, struct value *arg2);

extern struct value *value_zero (struct type *type, enum lval_type lv);

extern struct value *value_repeat (struct value *arg1, int count);

extern struct value *value_subscript (struct value *array, struct value *idx);

extern struct value *register_value_being_returned (struct type *valtype,
          struct regcache *retbuf);

extern struct value *value_in (struct value *element, struct value *set);

extern int value_bit_index (struct type *type, const gdb_byte *addr,
       int index);

extern int using_struct_return (struct type *value_type, int gcc_p);

extern struct value *evaluate_expression (struct expression *exp);

extern struct value *evaluate_type (struct expression *exp);

extern struct value *evaluate_subexp_with_coercion (struct expression *,
          int *, enum noside);

extern struct value *parse_and_eval(const char *exp);

extern struct value *parse_to_comma_and_eval(const char **expp);

extern struct type *parse_and_eval_type(char *p, int length);

extern CORE_ADDR parse_and_eval_address(const char *exp);

extern CORE_ADDR parse_and_eval_address_1(const char **expptr);

extern long long parse_and_eval_long(const char *exp);

extern struct value *access_value_history(int num);

extern struct value *value_of_internalvar (struct internalvar *var);

extern void set_internalvar (struct internalvar *var, struct value *val);

extern void set_internalvar_component (struct internalvar *var,
           int offset,
           int bitpos, int bitsize,
           struct value *newvalue);

extern struct internalvar *lookup_internalvar(const char *name);

extern int value_equal (struct value *arg1, struct value *arg2);

extern int value_less (struct value *arg1, struct value *arg2);

extern int value_logical_not (struct value *arg1);



extern struct value *value_of_this (int complain);

extern struct value *value_x_binop (struct value *arg1, struct value *arg2,
        enum exp_opcode op,
        enum exp_opcode otherop,
        enum noside noside);

extern struct value *value_x_unop (struct value *arg1, enum exp_opcode op,
       enum noside noside);

extern struct value *value_fn_field (struct value **arg1p, struct fn_field *f,
         int j, struct type *type, int offset);

extern int binop_user_defined_p (enum exp_opcode op, struct value *arg1,
     struct value *arg2);

extern int unop_user_defined_p (enum exp_opcode op, struct value *arg1);

extern int destructor_name_p (const char *name, const struct type *type);



extern void value_free (struct value *);

extern void free_all_values (void);

extern void release_value (struct value *val);

extern int record_latest_value (struct value *val);

extern void modify_field(gdb_byte *addr, long long fieldval, int bitpos,
    int bitsize);

extern void type_print(struct type *type, const char *varstring,
         struct ui_file *stream, int show);


extern char *type_sprint(struct type *type, const char *varstring, int show);

extern char *type_sprint_quoted(struct type *type, const char *varstring,
    int show);

extern gdb_byte *baseclass_addr(struct type *type, int index,
    gdb_byte *valaddr,
    struct value **valuep, int *errp);

extern void print_longest (struct ui_file *stream, int format,
      int use_local, long long val);

extern void print_floating (const gdb_byte *valaddr, struct type *type,
       struct ui_file *stream);

extern void print_floating_in_hex (const gdb_byte *valaddr, struct type *type,
       struct ui_file *stream);

extern int value_print (struct value *val, struct ui_file *stream, int format,
   enum val_prettyprint pretty);

extern void value_print_array_elements (struct value *val,
     struct ui_file *stream, int format,
     enum val_prettyprint pretty);

extern struct value *value_release_to_mark (struct value *mark);

extern int val_print (struct type *type, const gdb_byte *valaddr,
        int embedded_offset, CORE_ADDR address,
        struct ui_file *stream, int format,
        int deref_ref, int recurse,
        enum val_prettyprint pretty);

extern int common_val_print (struct value *val,
        struct ui_file *stream, int format,
        int deref_ref, int recurse,
        enum val_prettyprint pretty);

extern int val_print_string (CORE_ADDR addr, int len, int width,
        struct ui_file *stream);

extern void print_variable_value (struct symbol *var,
      struct frame_info *frame,
      struct ui_file *stream);
extern void
print_variable_value (struct symbol *var, struct frame_info *frame,
        struct ui_file *stream);

extern int check_field (struct value *, const char *);

extern void typedef_print (struct type *type, struct symbol *news,
      struct ui_file *stream);

extern char *internalvar_name (struct internalvar *var);

extern void clear_value_history (void);

extern void clear_internalvars (void);



extern struct value *value_copy (struct value *);



extern struct value *varying_to_slice (struct value *);

extern struct value *value_slice (struct value *, int, int);

extern struct value *call_function_by_hand (struct value *, int,
         struct value **);

extern struct value *
call_function_by_hand_expecting_type (struct value *,
          struct type *, int,
          struct value **, int);

extern struct value *value_literal_complex (struct value *, struct value *,
         struct type *);

extern void find_rt_vbase_offset (struct type *, struct type *,
      const gdb_byte *, int, int *, int *);

extern CORE_ADDR find_function_addr (struct value *, struct type **);

extern struct value *find_function_in_inferior (const char *, struct type *);

extern struct value *value_allocate_space_in_inferior (int);

extern CORE_ADDR allocate_space_in_inferior_malloc (int);

extern CORE_ADDR default_push_arguments (int nargs, struct value ** args,
      CORE_ADDR sp, int struct_return,
      CORE_ADDR struct_addr);

extern CORE_ADDR legacy_push_arguments (int nargs, struct value ** args,
     CORE_ADDR sp, int struct_return,
     CORE_ADDR struct_addr);

struct cached_value * create_cached_function (const char *, struct type *);

extern struct value *lookup_cached_function (struct cached_value *cval);

extern struct value *value_of_local (const char *name, int complain);


extern void set_var_status (struct value *, int);

extern int value_var_status (struct value *);



enum check_which_threads
  {
    CHECK_CURRENT_THREAD,
    CHECK_SCHEDULER_VALUE,
    CHECK_ALL_THREADS
  };

extern int check_safe_call(regex_t unsafe[], int npatterns, int stack_depth,
      enum check_which_threads which_thread);

int set_unwind_on_signal(int new_val);

struct cleanup *make_cleanup_set_restore_unwind_on_signal(int newval);


struct cleanup *make_cleanup_set_restore_print_closure(int newval);


extern int valarith_c_inited;
# 26 "valarith.c" 2



# 1 "target.h" 1
# 26 "target.h"
#define TARGET_H 

struct objfile;
struct ui_file;
struct mem_attrib;
struct target_ops;
# 55 "target.h"
# 1 "dcache.h" 1
# 25 "dcache.h"
#define DCACHE_H 

typedef struct dcache_struct DCACHE;


void dcache_invalidate (DCACHE *dcache);


DCACHE *dcache_init (void);


void dcache_free (DCACHE *);



int dcache_xfer_memory (DCACHE *cache, CORE_ADDR mem, gdb_byte *my,
   int len, int should_write);
# 56 "target.h" 2
# 1 "memattr.h" 1
# 22 "memattr.h"
#define MEMATTR_H 

enum mem_access_mode
{
  MEM_RW,
  MEM_RO,
  MEM_WO,

  MEM_NONE
};

enum mem_access_width
{
  MEM_WIDTH_UNSPECIFIED,
  MEM_WIDTH_8,
  MEM_WIDTH_16,
  MEM_WIDTH_32,
  MEM_WIDTH_64
};
# 52 "memattr.h"
struct mem_attrib
{

  enum mem_access_mode mode;

  enum mem_access_width width;


  int hwbreak;





  int cache;



  int verify;
};

struct mem_region
{




  struct mem_region *next;

  CORE_ADDR lo;
  CORE_ADDR hi;


  int number;


  int enabled_p;


  struct mem_attrib attrib;
};

extern struct mem_region *lookup_mem_region(CORE_ADDR);


void mem_disable_caching (void);
void mem_enable_caching (void *);
# 57 "target.h" 2


enum strata
  {
    dummy_stratum,
    file_stratum,
    core_stratum,
    download_stratum,
    process_stratum,
    thread_stratum
  };

enum thread_control_capabilities
  {
    tc_none = 0,
    tc_schedlock = 1,
    tc_switch = 2
  };




enum target_waitkind
  {

    TARGET_WAITKIND_EXITED,



    TARGET_WAITKIND_STOPPED,



    TARGET_WAITKIND_SIGNALLED,



    TARGET_WAITKIND_LOADED,





    TARGET_WAITKIND_FORKED,




    TARGET_WAITKIND_VFORKED,




    TARGET_WAITKIND_EXECD,





    TARGET_WAITKIND_SYSCALL_ENTRY,
    TARGET_WAITKIND_SYSCALL_RETURN,




    TARGET_WAITKIND_SPURIOUS,
# 133 "target.h"
    TARGET_WAITKIND_IGNORE
  };

struct target_waitstatus
  {
    enum target_waitkind kind;


    union
      {
 int integer;
 enum target_signal sig;
 int related_pid;
 char *execd_pathname;
 int syscall_id;
      }
    value;







    int code;
    CORE_ADDR address;
  };



enum inferior_event_type
  {

    INF_QUIT_REQ,


    INF_REG_EVENT,

    INF_ERROR,

    INF_TIMER,

    INF_EXEC_COMPLETE,




    INF_EXEC_CONTINUE
  };


extern const char *target_signal_to_string(enum target_signal);


extern const char *target_signal_to_name(enum target_signal);


enum target_signal target_signal_from_name(const char *);
# 230 "target.h"
enum target_object
{

  TARGET_OBJECT_KOD,

  TARGET_OBJECT_AVR,

  TARGET_OBJECT_MEMORY,



  TARGET_OBJECT_RAW_MEMORY,

  TARGET_OBJECT_UNWIND_TABLE,

  TARGET_OBJECT_AUXV,

  TARGET_OBJECT_WCOOKIE


};

extern long long target_read_partial (struct target_ops *ops,
        enum target_object object,
        const char *annex, gdb_byte *buf,
        unsigned long long offset, long long len);






long long target_write_with_progress (struct target_ops *ops,
        enum target_object object,
        const char *annex, const gdb_byte *buf,
        unsigned long long offset, long long len,
        void (*progress) (unsigned long long, void *),
        void *baton);


extern long long target_write_partial (struct target_ops *ops,
         enum target_object object,
         const char *annex, const gdb_byte *buf,
         unsigned long long offset, long long len);


extern long long target_read (struct target_ops *ops,
       enum target_object object,
       const char *annex, gdb_byte *buf,
       unsigned long long offset, long long len);

extern long long target_write (struct target_ops *ops,
        enum target_object object,
        const char *annex, const gdb_byte *buf,
        unsigned long long offset, long long len);
# 293 "target.h"
extern void get_target_memory (struct target_ops *ops, CORE_ADDR addr,
          gdb_byte *buf, long long len);
extern unsigned long long get_target_memory_unsigned (struct target_ops *ops,
         CORE_ADDR addr, int len);






extern int target_activity_fd;

extern int (*target_activity_function) (void);

struct thread_info;

struct target_ops
  {
    struct target_ops *beneath;
    const char *to_shortname;
    const char *to_longname;
    const char *to_doc;



    void *to_data;




    void (*to_open)(const char *, int);



    void (*to_xclose)(struct target_ops *targ, int quitting);
    void (*to_close)(int);
    void (*to_attach)(const char *, int);
    void (*to_post_attach)(int);
    void (*to_detach)(const char *, int);
    void (*to_disconnect)(const char *, int);
    void (*to_resume)(ptid_t, int, enum target_signal);

    ptid_t (*to_wait)(ptid_t, struct target_waitstatus *,
        gdb_client_data client_data);
    void (*to_post_wait)(ptid_t, int);
    void (*to_fetch_registers)(int);
    void (*to_store_registers)(int);
    void (*to_prepare_to_store)(void);
# 363 "target.h"
    int (*deprecated_xfer_memory)(CORE_ADDR memaddr, gdb_byte *myaddr,
      int len, int write,
      struct mem_attrib *attrib,
      struct target_ops *target)
      __attribute__((__deprecated__("Use '" "to_xfer_partial" "' instead")));

    void (*to_files_info) (struct target_ops *);
    int (*to_insert_breakpoint) (CORE_ADDR, gdb_byte *);
    int (*to_remove_breakpoint) (CORE_ADDR, gdb_byte *);
    int (*to_can_use_hw_breakpoint) (int, int, int);
    int (*to_insert_hw_breakpoint) (CORE_ADDR, gdb_byte *);
    int (*to_remove_hw_breakpoint) (CORE_ADDR, gdb_byte *);
    int (*to_remove_watchpoint) (CORE_ADDR, int, int);
    int (*to_insert_watchpoint) (CORE_ADDR, int, int);
    int (*to_stopped_by_watchpoint) (void);
    int to_have_continuable_watchpoint;
    int (*to_stopped_data_address) (struct target_ops *, CORE_ADDR *);
    int (*to_region_size_ok_for_hw_watchpoint) (int);
    void (*to_terminal_init) (void);
    void (*to_terminal_inferior) (void);
    void (*to_terminal_ours_for_output) (void);
    void (*to_terminal_ours)(void);
    void (*to_terminal_save_ours)(void);
    void (*to_terminal_info)(const char *, int);
    void (*to_kill)(void);
    void (*to_load)(const char *, int);
    int (*to_lookup_symbol)(const char *, CORE_ADDR *);
    void (*to_create_inferior)(char *, char *, char **, int);
    void (*to_post_startup_inferior) (ptid_t);
    void (*to_acknowledge_created_inferior) (int);
    void (*to_insert_fork_catchpoint) (int);
    int (*to_remove_fork_catchpoint) (int);
    void (*to_insert_vfork_catchpoint) (int);
    int (*to_remove_vfork_catchpoint) (int);
    int (*to_follow_fork) (int);
    void (*to_insert_exec_catchpoint) (int);
    int (*to_remove_exec_catchpoint) (int);
    int (*to_reported_exec_events_per_exec_call) (void);
    int (*to_has_exited) (int, int, int *);
    void (*to_mourn_inferior) (void);
    int (*to_can_run) (void);
    void (*to_notice_signals) (ptid_t ptid);
    int (*to_thread_alive) (ptid_t ptid);
    void (*to_find_new_threads) (void);
    char *(*to_pid_to_str) (ptid_t);
    char *(*to_extra_thread_info) (struct thread_info *);
    void (*to_stop)(void);
    void (*to_rcmd)(const char *command, struct ui_file *output);
    int (*to_enable_exception_callback) (enum exception_event_kind, int);
    struct symtabs_and_lines *
    (*to_find_exception_catchpoints) (enum exception_event_kind, struct objfile *);
    struct exception_event_record *(*to_get_current_exception_event) (void);
    char *(*to_pid_to_exec_file) (int pid);
    enum strata to_stratum;
    int to_has_all_memory;
    int to_has_memory;
    int to_has_stack;
    int to_has_registers;
    int to_has_execution;
    int to_has_thread_control;
    struct section_table
     *to_sections;
    struct section_table
     *to_sections_end;

    int (*to_can_async_p)(void);
    int (*to_is_async_p)(void);
    void (*to_async)(void (*cb)(enum inferior_event_type, void *context),
       void *context);
    int to_async_mask_value;
    int (*to_find_memory_regions)(int (*)(CORE_ADDR, unsigned long,
                                          int, int, int, void *),
      void *);
    char *(*to_make_corefile_notes)(bfd *, int *);
    int (*to_bind_function)(char *);






    CORE_ADDR (*to_get_thread_local_address)(ptid_t ptid,
          CORE_ADDR load_module_addr,
          CORE_ADDR offset);




    long long (*to_xfer_partial)(struct target_ops *ops,
                               enum target_object object, const char *annex,
                               gdb_byte *readbuf, const gdb_byte *writebuf,
                               unsigned long long offset, long long len);




   char *(*to_get_thread_name)(ptid_t ptid);



   char *(*to_get_thread_id_str) (ptid_t ptid);






    int (*to_check_safe_call) (int subsystem, enum check_which_threads thread_mode);
# 480 "target.h"
    int (*to_setup_safe_print) (struct cleanup **);


    CORE_ADDR (*to_allocate_memory) (int size);




    int (*to_check_is_objfile_loaded) (struct objfile *objfile);




    struct value *(*to_load_solib)(char *path, char *flags) __attribute__((warn_unused_result));





    int (*to_keep_going) (CORE_ADDR stop_pc);




    void *(*to_save_thread_inferior_status)(void);
    void (*to_restore_thread_inferior_status)(void *);
    void (*to_free_thread_inferior_status)(void *);

    int to_magic;


  };





#define OPS_MAGIC 3840




extern struct target_ops current_target;



#define target_shortname (current_target.to_shortname)
#define target_longname (current_target.to_longname)
# 538 "target.h"
void target_close (struct target_ops *targ, int quitting);
# 548 "target.h"
#define target_attach(args,from_tty) (*current_target.to_attach)(args, from_tty)







#define target_post_attach(pid) (*current_target.to_post_attach) (pid)
# 566 "target.h"
extern void target_detach(const char *, int);




extern void target_disconnect(const char *, int);






#define target_resume(ptid,step,siggnal) do { dcache_invalidate(target_dcache); (*current_target.to_resume) (ptid, step, siggnal); } while (0)
# 592 "target.h"
#define target_wait(ptid,status,client_data) (*current_target.to_wait) (ptid, status, client_data)
# 605 "target.h"
#define target_post_wait(ptid,status) (*current_target.to_post_wait) (ptid, status)




#define target_fetch_registers(regno) (*current_target.to_fetch_registers) (regno)






#define target_store_registers(regs) (*current_target.to_store_registers) (regs)
# 626 "target.h"
#define target_prepare_to_store() (*current_target.to_prepare_to_store) ()


extern DCACHE *target_dcache;

extern int target_read_string (CORE_ADDR, char **, int, int *);

extern int target_read_memory (CORE_ADDR memaddr, gdb_byte *myaddr, int len);

extern int target_write_memory (CORE_ADDR memaddr, const gdb_byte *myaddr,
    int len);

extern int xfer_memory (CORE_ADDR, gdb_byte *, int, int,
   struct mem_attrib *, struct target_ops *);

extern int xfer_memory_from_corefile (CORE_ADDR, gdb_byte *, int, int,
   struct mem_attrib *, struct target_ops *);

extern int child_xfer_memory (CORE_ADDR, gdb_byte *, int, int,
         struct mem_attrib *, struct target_ops *);

extern char *child_pid_to_exec_file (int);

extern char *child_core_file_to_sym_file (char *);





extern void child_post_startup_inferior (ptid_t);

extern void child_acknowledge_created_inferior (int);

extern void child_insert_fork_catchpoint (int);

extern int child_remove_fork_catchpoint (int);

extern void child_insert_vfork_catchpoint (int);

extern int child_remove_vfork_catchpoint (int);

extern void child_acknowledge_created_inferior (int);

extern int child_follow_fork (int);

extern void child_insert_exec_catchpoint (int);

extern int child_remove_exec_catchpoint (int);

extern int child_reported_exec_events_per_exec_call (void);

extern int child_has_exited (int, int, int *);

extern int child_thread_alive (ptid_t);



extern int inferior_has_forked (int pid, int *child_pid);

extern int inferior_has_vforked (int pid, int *child_pid);

extern int inferior_has_execd (int pid, char **execd_pathname);



extern void print_section_info (struct target_ops *, bfd *);
extern void print_section_info_objfile (struct objfile *o);



#define target_files_info() (*current_target.to_files_info) (&current_target)
# 705 "target.h"
#define target_insert_breakpoint(addr,save) (*current_target.to_insert_breakpoint) (addr, save)







#define target_remove_breakpoint(addr,save) (*current_target.to_remove_breakpoint) (addr, save)





#define target_terminal_init() (*current_target.to_terminal_init) ()





#define target_terminal_inferior() (*current_target.to_terminal_inferior) ()
# 736 "target.h"
#define target_terminal_ours_for_output() (*current_target.to_terminal_ours_for_output) ()






#define target_terminal_ours() (*current_target.to_terminal_ours) ()







#define target_terminal_save_ours() (*current_target.to_terminal_save_ours)()





#define target_terminal_info(arg,from_tty) (*current_target.to_terminal_info)(arg, from_tty)



extern void target_kill(void);





extern void target_load(const char *arg, int from_tty);
# 777 "target.h"
#define target_lookup_symbol(name,addrp) (*current_target.to_lookup_symbol) (name, addrp)
# 786 "target.h"
#define target_create_inferior(exec_file,args,env,FROM_TTY) (*current_target.to_create_inferior) (exec_file, args, env, (FROM_TTY))
# 800 "target.h"
#define target_post_startup_inferior(ptid) (*current_target.to_post_startup_inferior) (ptid)





#define target_acknowledge_created_inferior(pid) (*current_target.to_acknowledge_created_inferior) (pid)






#define target_insert_fork_catchpoint(pid) (*current_target.to_insert_fork_catchpoint) (pid)


#define target_remove_fork_catchpoint(pid) (*current_target.to_remove_fork_catchpoint) (pid)


#define target_insert_vfork_catchpoint(pid) (*current_target.to_insert_vfork_catchpoint) (pid)


#define target_remove_vfork_catchpoint(pid) (*current_target.to_remove_vfork_catchpoint) (pid)
# 833 "target.h"
#define target_follow_fork(follow_child) (*current_target.to_follow_fork) (follow_child)






#define target_insert_exec_catchpoint(pid) (*current_target.to_insert_exec_catchpoint) (pid)


#define target_remove_exec_catchpoint(pid) (*current_target.to_remove_exec_catchpoint) (pid)






#define target_reported_exec_events_per_exec_call() (*current_target.to_reported_exec_events_per_exec_call) ()





#define target_has_exited(pid,wait_status,exit_status) (*current_target.to_has_exited) (pid,wait_status,exit_status)
# 866 "target.h"
#define target_mourn_inferior() (*current_target.to_mourn_inferior) ()




#define target_can_run(t) ((t)->to_can_run) ()




#define target_notice_signals(ptid) (*current_target.to_notice_signals) (ptid)




#define target_thread_alive(ptid) (*current_target.to_thread_alive) (ptid)




#define target_find_new_threads() (*current_target.to_find_new_threads) ();






#define target_stop current_target.to_stop





#define target_rcmd(command,outbuf) (*current_target.to_rcmd)(command, outbuf)
# 910 "target.h"
#define target_enable_exception_callback(kind,enable) (*current_target.to_enable_exception_callback) (kind, enable)






#define target_find_exception_catchpoints(kind,objfile) (*current_target.to_find_exception_catchpoints) (kind, objfile)




#define target_get_current_exception_event() (*current_target.to_get_current_exception_event) ()






#define target_has_all_memory (current_target.to_has_all_memory)




#define target_has_memory (current_target.to_has_memory)





#define target_has_stack (current_target.to_has_stack)




#define target_has_registers (current_target.to_has_registers)
# 955 "target.h"
#define target_has_execution (current_target.to_has_execution)






#define target_can_lock_scheduler (current_target.to_has_thread_control & tc_schedlock)


#define target_can_switch_threads (current_target.to_has_thread_control & tc_switch)




extern int gdb_override_async;



void gdb_set_async_override (void *on);


#define target_can_async_p() (gdb_override_async ? 0 : current_target.to_can_async_p ())


#define target_is_async_p() (current_target.to_is_async_p())


#define target_async(CALLBACK,CONTEXT) (current_target.to_async((CALLBACK), (CONTEXT)))
# 1000 "target.h"
#define target_async_mask_value (current_target.to_async_mask_value)


extern int target_async_mask(int mask);





#undef target_pid_to_str
#define target_pid_to_str(PID) current_target.to_pid_to_str (PID)


#define target_tid_to_str(PID) target_pid_to_str (PID)

extern char *normal_pid_to_str (ptid_t ptid);






#define target_extra_thread_info(TP) (current_target.to_extra_thread_info (TP))
# 1048 "target.h"
extern void (*deprecated_target_new_objfile_hook)(struct objfile *)
  __attribute__((__deprecated__));
# 1068 "target.h"
#define target_pid_to_exec_file(pid) (current_target.to_pid_to_exec_file) (pid)
# 1078 "target.h"
#define target_find_memory_regions(FUNC,DATA) (current_target.to_find_memory_regions) (FUNC, DATA)






#define target_make_corefile_notes(BFD,SIZE_P) (current_target.to_make_corefile_notes) (BFD, SIZE_P)






#define target_bind_function(NAME) (current_target.to_bind_function) (NAME)






#define target_get_thread_name(PTID) (current_target.to_get_thread_name) (PTID)






#define target_get_thread_id_str(PTID) (current_target.to_get_thread_id_str) (PTID)






#define target_check_safe_call(WHICH,THREAD_MODE) (current_target.to_check_safe_call) (WHICH, THREAD_MODE)






#define target_setup_safe_print (current_target.to_setup_safe_print)






#define target_allocate_memory (current_target.to_allocate_memory)







#define target_check_is_objfile_loaded(OBJFILE) (current_target.to_check_is_objfile_loaded) (OBJFILE)







#define target_load_solib(PATH,MODE) (current_target.to_load_solib) (PATH,MODE)






#define target_keep_going(PC) (current_target.to_keep_going) (PC)






#define target_save_thread_inferior_status() (current_target.to_save_thread_inferior_status) ()


#define target_restore_thread_inferior_status(VOID_PTR) (current_target.to_restore_thread_inferior_status) (VOID_PTR)


#define target_free_thread_inferior_status(VOID_PTR) (current_target.to_free_thread_inferior_status) (VOID_PTR)



#define target_get_thread_local_address (current_target.to_get_thread_local_address)

#define target_get_thread_local_address_p() (target_get_thread_local_address != NULL)






#define TARGET_CREATE_INFERIOR_HOOK(PID) 
# 1185 "target.h"
#define STOPPED_BY_WATCHPOINT(w) (*current_target.to_stopped_by_watchpoint) ()






#define HAVE_CONTINUABLE_WATCHPOINT (current_target.to_have_continuable_watchpoint)
# 1207 "target.h"
#define TARGET_CAN_USE_HARDWARE_WATCHPOINT(TYPE,CNT,OTHERTYPE) (*current_target.to_can_use_hw_breakpoint) (TYPE, CNT, OTHERTYPE);




#define TARGET_REGION_SIZE_OK_FOR_HW_WATCHPOINT(byte_count) (*current_target.to_region_size_ok_for_hw_watchpoint) (byte_count)
# 1222 "target.h"
#define target_insert_watchpoint(addr,len,type) (*current_target.to_insert_watchpoint) (addr, len, type)


#define target_remove_watchpoint(addr,len,type) (*current_target.to_remove_watchpoint) (addr, len, type)




#define target_insert_hw_breakpoint(addr,save) (*current_target.to_insert_hw_breakpoint) (addr, save)


#define target_remove_hw_breakpoint(addr,save) (*current_target.to_remove_hw_breakpoint) (addr, save)



extern int target_stopped_data_address_p (struct target_ops *);


#define target_stopped_data_address(target,x) (*target.to_stopped_data_address) (target, x)
# 1255 "target.h"
#define ENSURE_VFORKING_PARENT_REMAINS_STOPPED(PID) ((void)0)
# 1266 "target.h"
#define RESUME_EXECD_VFORKING_CHILD_TO_GET_PARENT_VFORK() ((void)0)
# 1284 "target.h"
extern void add_target (struct target_ops *);

extern int push_target (struct target_ops *);

extern int unpush_target (struct target_ops *);

extern void target_preopen (int);

extern void pop_target (void);





struct section_table
  {
    CORE_ADDR addr;
    CORE_ADDR endaddr;

    struct bfd_section *the_bfd_section;

    bfd *abfd;
  };



struct section_table *target_section_by_addr (struct target_ops *target,
           CORE_ADDR addr);




extern int memory_remove_breakpoint (CORE_ADDR, gdb_byte *);

extern int memory_insert_breakpoint (CORE_ADDR, gdb_byte *);

extern int default_memory_remove_breakpoint (CORE_ADDR, gdb_byte *);

extern int default_memory_insert_breakpoint (CORE_ADDR, gdb_byte *);




extern void initialize_targets(void);

extern void noprocess(void);

extern void find_default_attach(const char *, int);

extern void find_default_create_inferior(char *, char *, char **, int);

extern struct target_ops *find_run_target(void);

extern struct target_ops *find_core_target(void);

extern struct target_ops *find_target_beneath(struct target_ops *);

extern int target_resize_to_sections(struct target_ops *target,
         int num_added);

extern void remove_target_sections(bfd *abfd);






extern int remote_debug;


extern int baud_rate;

extern int remote_timeout;





extern void store_waitstatus (struct target_waitstatus *, int);
# 1372 "target.h"
extern int target_signal_to_host_p (enum target_signal signo);
# 1383 "target.h"
extern enum target_signal target_signal_from_host(int);
extern int target_signal_to_host(enum target_signal);


extern enum target_signal target_signal_from_command(int);


extern int signals_c_inited;


extern void push_remote_target(const char *name, int from_tty);


extern void push_remote_macosx_target(char *name, int from_tty);




void target_ignore(void);


void update_current_target(void);

extern struct target_ops deprecated_child_ops __attribute__((__deprecated__));


extern int set_trust_readonly(int);
void set_trust_readonly_cleanup(void *);



int length_of_this_instruction(CORE_ADDR memaddr);


void do_restore_target_async_mask(int mask);

int debug_to_enable_exception_callback(enum exception_event_kind kind,
                                       int enable);
# 30 "valarith.c" 2
# 1 "language.h" 1
# 27 "language.h"
#define LANGUAGE_H 1


struct value;
struct objfile;
struct expression;
struct ui_file;
# 44 "language.h"
#define _LANG_c 
#define _LANG_m2 
#define _LANG_fortran 
#define _LANG_pascal 

#define MAX_FORTRAN_DIMS 7





extern enum range_mode
  {
    range_mode_auto, range_mode_manual
  }
range_mode;






extern enum range_check
  {
    range_check_off, range_check_warn, range_check_on
  }
range_check;





extern enum type_mode
  {
    type_mode_auto, type_mode_manual
  }
type_mode;






extern enum type_check
  {
    type_check_off, type_check_warn, type_check_on
  }
type_check;





extern enum case_mode
  {
    case_mode_auto, case_mode_manual
  }
case_mode;





extern enum array_ordering
  {
    array_row_major, array_column_major
  }
array_ordering;






extern enum case_sensitivity
  {
    case_sensitive_on, case_sensitive_off
  }
case_sensitivity;



struct language_arch_info
{




  struct type **primitive_type_vector;

  struct type *string_char_type;
};

struct type *language_string_char_type (const struct language_defn *l,
     struct gdbarch *gdbarch);

struct type *language_lookup_primitive_type_by_name (const struct language_defn *l,
           struct gdbarch *gdbarch,
           const char *name);



struct language_defn
  {

    const char *la_name;



    enum language la_language;






    struct type **const *la_builtin_type_vector;



    enum range_check la_range_check;



    enum type_check la_type_check;


    enum case_sensitivity la_case_sensitivity;


    enum array_ordering la_array_ordering;




    const struct exp_descriptor *la_exp_desc;



    int (*la_parser) (void);


    void (*la_error)(const char *);







    void (*la_post_parser) (struct expression ** expp, int void_context_p);

    void (*la_printchar) (int ch, struct ui_file * stream);

    void (*la_printstr) (struct ui_file * stream, const gdb_byte *string,
    unsigned int length, int width,
    int force_ellipses);

    void (*la_emitchar) (int ch, struct ui_file * stream, int quoter);

    struct type *(*la_fund_type) (struct objfile *, int);



    void (*la_print_type)(struct type *, const char *, struct ui_file *, int,
     int);



    int (*la_val_print) (struct type *, const gdb_byte *, int, CORE_ADDR,
    struct ui_file *, int, int, int,
    enum val_prettyprint);



    int (*la_value_print) (struct value *, struct ui_file *,
      int, enum val_prettyprint);





    CORE_ADDR (*skip_trampoline) (CORE_ADDR pc);
# 237 "language.h"
    struct value *(*la_value_of_this) (int complain);





    struct symbol *(*la_lookup_symbol_nonlocal) (const char *,
       const char *,
       const struct block *,
       const domain_enum,
       struct symtab **);


    struct type *(*la_lookup_transparent_type) (const char *);


    char *(*la_demangle) (const char *mangled, int options);


    char *(*la_class_name_from_physname) (const char *physname);



    const struct op_print *la_op_print_tab;




    char c_style_arrays;


    char string_lower_bound;


    struct type **string_char_type;


    const char *(*la_word_break_characters)(void);


    void (*la_language_arch_info) (struct gdbarch *,
       struct language_arch_info *);



    long la_magic;
  };

#define LANG_MAGIC 910823L
# 303 "language.h"
extern const struct language_defn *current_language;




extern const struct language_defn *expected_language;






extern enum language_mode
  {
    language_mode_auto, language_mode_manual
  }
language_mode;





#define STRICT_TYPE (type_check != type_check_off)


#define RANGE_CHECK (range_check != range_check_off)



#define CAST_IS_CONVERSION (current_language->la_language == language_c || current_language->la_language == language_cplus || current_language->la_language == language_objc || current_language->la_language == language_objcplus)




extern void language_info (int);

struct cleanup * make_cleanup_restore_language (enum language new_lang);
extern enum language set_language (enum language);







#define create_fundamental_type(objfile,typeid) (current_language->la_fund_type(objfile, typeid))


#define LA_PRINT_TYPE(type,varstring,stream,show,level) (current_language->la_print_type(type,varstring,stream,show,level))


#define LA_VAL_PRINT(type,valaddr,offset,addr,stream,fmt,deref,recurse,pretty) (current_language->la_val_print(type,valaddr,offset,addr,stream,fmt,deref, recurse,pretty))


#define LA_VALUE_PRINT(val,stream,fmt,pretty) (current_language->la_value_print(val,stream,fmt,pretty))


#define LA_PRINT_CHAR(ch,stream) (current_language->la_printchar(ch, stream))

#define LA_PRINT_STRING(stream,string,length,width,force_ellipses) (current_language->la_printstr(stream, string, length, width, force_ellipses))

#define LA_EMIT_CHAR(ch,stream,quoter) (current_language->la_emitchar(ch, stream, quoter))
# 373 "language.h"
#define PRINT_LITERAL_FORM(c) ((c) >= 0x20 && ((c) < 0x7F || (c) >= 0xA0) && (!sevenbit_strings || (c) < 0x80))
# 389 "language.h"
extern int simple_type (struct type *);

extern int ordered_type (struct type *);

extern int same_type (struct type *, struct type *);

extern int integral_type (struct type *);

extern int numeric_type (struct type *);

extern int character_type (struct type *);

extern int boolean_type (struct type *);

extern int float_type (struct type *);

extern int pointer_type (struct type *);

extern int structured_type (struct type *);



#define unop_type_check(v,o) binop_type_check((v),NULL,(o))

extern void binop_type_check(struct value *, struct value *, int);



extern void op_error(const char *lhs, enum exp_opcode,
       const char *rhs);







extern void type_error(const char *, ...) __attribute__((format(printf, 1, 2)));

extern void range_error(const char *, ...) __attribute__((format(printf, 1, 2)));



extern int value_true(struct value *);

extern struct type *lang_bool_type(void);


#define LA_BOOL_TYPE lang_bool_type()



extern enum language language_enum(char *str);

extern const struct language_defn *language_def(enum language);

extern const char *language_str(enum language);


extern void add_language(const struct language_defn *);

extern enum language get_frame_language(void);


extern CORE_ADDR skip_language_trampoline(CORE_ADDR pc);


extern char *language_demangle(const struct language_defn *current_language,
                               const char *mangled, int options);


extern char *language_class_name_from_physname(const struct language_defn *,
            const char *physname);


extern const char *default_word_break_characters(void);
# 31 "valarith.c" 2
# 1 "gdb_assert.h" 1
# 22 "gdb_assert.h"
#define GDB_ASSERT_H 






#define gdb_assert(expr) ((void) ((expr) ? 0 : (gdb_assert_fail (#expr, __FILE__, __LINE__, ASSERT_FUNCTION), 0)))
# 39 "gdb_assert.h"
#define ASSERT_FUNCTION __PRETTY_FUNCTION__
# 49 "gdb_assert.h"
#define gdb_assert_fail(assertion,file,line,function) internal_error (file, line, _("%s: Assertion `%s' failed."), function, assertion)
# 32 "valarith.c" 2
# 1 "gdb_string.h" 1
# 24 "gdb_string.h"
#define GDB_STRING_H 
# 33 "valarith.c" 2

# 1 "/usr/local/lib/gcc/i386-apple-darwin9.8.0/7.0.0/include/c++/math.h" 1 3
# 35 "valarith.c" 2
# 1 "infcall.h" 1
# 23 "infcall.h"
#define INFCALL_H 

struct value;
struct type;

extern ptid_t get_hand_call_ptid(void);

extern CORE_ADDR find_function_addr (struct value *function,
         struct type **retval_type);

extern struct value *

hand_function_call(struct value *function, struct type *expect_type,
                   int nargs, struct value **args, int restore_frame);
# 47 "infcall.h"
extern struct value *call_function_by_hand (struct value *function, int nargs,
         struct value **args);


extern int inferior_function_calls_disabled_p;
int set_hand_function_call_timeout (int newval);
int hand_function_call_timeout_p (void);
# 36 "valarith.c" 2
# 1 "parser-defs.h" 1
# 27 "parser-defs.h"
#define PARSER_DEFS_H 1



struct block;

extern struct expression *expout;
extern int expout_size;
extern int expout_ptr;




extern struct block *expression_context_block;





extern CORE_ADDR expression_context_pc;



extern struct block *innermost_block;




extern struct block *block_found;


extern int arglist_len;




struct stoken
  {

    char *ptr;

    size_t length;
  };

struct ttype
  {
    struct stoken stoken;
    struct type *type;
  };

struct symtoken
  {
    struct stoken stoken;
    struct symbol *sym;
    int is_a_field_of_this;
  };


struct objc_class_str
  {
    struct stoken stoken;
    struct type *type;
    CORE_ADDR objc_class;
  };




enum type_pieces
  {
    tp_end = -1,
    tp_pointer,
    tp_reference,
    tp_array,
    tp_function,
    tp_const,
    tp_volatile,
    tp_space_identifier
  };

union type_stack_elt
  {
    enum type_pieces piece;
    int int_val;
  };
extern union type_stack_elt *type_stack;
extern int type_stack_depth, type_stack_size;

extern void write_exp_elt(union exp_element);

extern void write_exp_elt_opcode(enum exp_opcode);

extern void write_exp_elt_sym(struct symbol *);

extern void write_exp_elt_longcst(long long);

extern void write_exp_elt_dblcst(DOUBLEST);

extern void write_exp_elt_type(struct type *);

extern void write_exp_elt_intern(struct internalvar *);

extern void write_exp_string(struct stoken);

extern void write_exp_bitstring(struct stoken);

extern void write_exp_elt_block(struct block *);

extern void write_exp_msymbol(struct minimal_symbol *,
                              struct type *, struct type *);

extern void write_dollar_variable(struct stoken str);

extern struct symbol *parse_nested_classes_for_hpacc(char *, int, char **,
           int *, const char **);

extern const char *find_template_name_end(const char *);

extern void start_arglist(void);

extern int end_arglist(void);

extern char *copy_name(struct stoken);

extern void push_type(enum type_pieces);

extern void push_type_int(int);

extern void push_type_address_space(char *);

extern enum type_pieces pop_type(void);

extern int pop_type_int(void);

extern int length_of_subexp(struct expression *, int);

extern int dump_subexp(struct expression *, struct ui_file *, int);

extern int dump_subexp_body_standard(struct expression *,
         struct ui_file *, int);

extern void operator_length(struct expression *, int, int *, int *);

extern void operator_length_standard(struct expression *, int, int *, int *);

extern const char *op_name_standard(enum exp_opcode);

extern struct type *follow_types(struct type *);

extern void null_post_parser(struct expression **, int);




extern const char *lexptr;



extern const char *prev_lexptr;
# 196 "parser-defs.h"
extern char *namecopy;


extern int paren_depth;


extern int comma_terminates;
# 212 "parser-defs.h"
enum precedence
  {
    PREC_NULL, PREC_COMMA, PREC_ABOVE_COMMA, PREC_ASSIGN, PREC_LOGICAL_OR,
    PREC_LOGICAL_AND, PREC_BITWISE_IOR, PREC_BITWISE_AND, PREC_BITWISE_XOR,
    PREC_EQUAL, PREC_ORDER, PREC_SHIFT, PREC_ADD, PREC_MUL, PREC_REPEAT,
    PREC_HYPER, PREC_PREFIX, PREC_SUFFIX, PREC_BUILTIN_FUNCTION
  };




struct op_print
  {
    const char *string;
    enum exp_opcode opcode;

    enum precedence precedence;



    int right_assoc;
  };




struct exp_descriptor
  {

    void (*print_subexp)(struct expression *, int *, struct ui_file *,
    enum precedence);



    void (*operator_length)(struct expression*, int, int*, int *);


    const char *(*op_name)(enum exp_opcode);




    int (*dump_subexp_body)(struct expression *, struct ui_file *, int);


    struct value *(*evaluate_exp)(struct type *, struct expression *,
      int *, enum noside);
  };




extern const struct exp_descriptor exp_descriptor_standard;




extern void print_subexp(struct expression *, int *, struct ui_file *,
    enum precedence);

extern void print_subexp_standard(struct expression *, int *,
      struct ui_file *, enum precedence);




extern void parser_fprintf(FILE *, const char *, ...) __attribute__((format(printf, 2, 3)));


extern void start_msglist(void);
extern void add_msglist(struct stoken *str, int addcolon);
extern int end_msglist(void);
# 37 "valarith.c" 2





#define TRUNCATION_TOWARDS_ZERO ((-5 / 2) == -2)


static struct value *value_subscripted_rvalue(struct value *, struct value *);

int valarith_c_inited = 0;

void _initialize_valarith(void);
# 59 "valarith.c"
static long long
find_size_for_pointer_math (struct type *ptr_type)
{
  long long sz = -1;
  struct type *ptr_target;

  ptr_target = check_typedef ((ptr_type)->main_type->target_type);

  sz = (((ptr_target)->length < 0) ? objc_fixup_class_length(ptr_target) : (ptr_target)->length);
  if (sz == 0)
    {
      if ((ptr_type)->main_type->code == TYPE_CODE_VOID)
 sz = 1;
      else
 {
   const char *name;

   name = (ptr_target)->main_type->name;
   if (name == 
# 77 "valarith.c" 3 4
              __null
# 77 "valarith.c"
                  )
     name = (ptr_target)->main_type->tag_name;
   if (name == 
# 79 "valarith.c" 3 4
              __null
# 79 "valarith.c"
                  )
     error(("Cannot perform pointer math on incomplete types, " "try casting to a known type, or void *.")
                                                );
   else
     error(("Cannot perform pointer math on incomplete type \"%s\", " "try casting to a known type, or void *.")
                                                , name);
 }
    }
  return sz;
}

struct value *
value_add (struct value *arg1, struct value *arg2)
{
  struct value *valint;
  struct value *valptr;
  long long sz;
  struct type *type1, *type2, *valptrtype;

  arg1 = coerce_array (arg1);
  arg2 = coerce_array (arg2);
  type1 = check_typedef (value_type (arg1));
  type2 = check_typedef (value_type (arg2));

  if (((type1)->main_type->code == TYPE_CODE_PTR
       || (type2)->main_type->code == TYPE_CODE_PTR)
      &&
      (is_integral_type (type1) || is_integral_type (type2)))

    {
      struct value *retval;

      if ((type1)->main_type->code == TYPE_CODE_PTR)
 {
   valptr = arg1;
   valint = arg2;
   valptrtype = type1;
 }
      else
 {
   valptr = arg2;
   valint = arg1;
   valptrtype = type2;
 }

      sz = find_size_for_pointer_math (valptrtype);

      retval = value_from_pointer (valptrtype,
       value_as_address (valptr)
       + (sz * value_as_long (valint)));
      return retval;
    }

  return value_binop (arg1, arg2, BINOP_ADD);
}

struct value *
value_sub (struct value *arg1, struct value *arg2)
{
  struct type *type1, *type2;
  arg1 = coerce_array (arg1);
  arg2 = coerce_array (arg2);
  type1 = check_typedef (value_type (arg1));
  type2 = check_typedef (value_type (arg2));

  if ((type1)->main_type->code == TYPE_CODE_PTR)
    {
      if (is_integral_type (type2))
 {

   long long sz = find_size_for_pointer_math (type1);

   return value_from_pointer (type1,
         (value_as_address (arg1)
          - (sz * value_as_long (arg2))));
 }
      else if ((type2)->main_type->code == TYPE_CODE_PTR
        && (((check_typedef ((type1)->main_type->target_type))->length < 0) ? objc_fixup_class_length(check_typedef ((type1)->main_type->target_type)) : (check_typedef ((type1)->main_type->target_type))->length)
        == (((check_typedef ((type2)->main_type->target_type))->length < 0) ? objc_fixup_class_length(check_typedef ((type2)->main_type->target_type)) : (check_typedef ((type2)->main_type->target_type))->length))
 {

   long long sz = find_size_for_pointer_math (type1);
   return value_from_longest
     (builtin_type_long,
      (value_as_long (arg1) - value_as_long (arg2)) / sz);
 }
      else
 {
   error (("First argument of `-' is a pointer and second argument is neither\nan integer nor a pointer of the same type.")

                                            );
 }
    }

  return value_binop (arg1, arg2, BINOP_SUB);
}







struct value *
value_subscript(struct value *array, struct value *idx)
{
  struct value *bound;
  int c_style = current_language->c_style_arrays;
  struct type *tarray;

  array = coerce_ref(array);
  tarray = check_typedef(value_type(array));

  if ((tarray)->main_type->code == TYPE_CODE_ARRAY
      || (tarray)->main_type->code == TYPE_CODE_STRING)
    {
      long long lowerbound, upperbound, stride;
      get_array_bounds(tarray, &lowerbound, &upperbound, &stride);

      if ((*deprecated_value_lval_hack(array)) != lval_memory)
 return value_subscripted_rvalue(array, idx);

      if (c_style == 0)
 {
   long long index = value_as_long(idx);
   if ((index >= lowerbound) && (index <= upperbound))
     return value_subscripted_rvalue(array, idx);


    if ((upperbound != -1) || (lowerbound != 0))
     warning(("array or string index out of range"));

   c_style = 1;
 }

       array = value_coerce_array(array);

       if (c_style == 1) {
  ;
       }




       if (stride == 1)
  {
    if (lowerbound != 0)
      {
        bound = value_from_longest(builtin_type_int, (long long)lowerbound);
        idx = value_sub(idx, bound);
      }
  }
       else if (stride == -1)
  {
    if (upperbound != 0)
      {
        bound = value_from_longest(builtin_type_int, (long long)upperbound);
        idx = value_sub(bound, idx);
      }
  }
       else
  internal_error("valarith.c", 240, ("unsupported stride %ld"),
                        (long)stride);

       return value_ind(value_add(array, idx));
    }

  if ((tarray)->main_type->code == TYPE_CODE_BITSTRING)
    {
      struct type *range_type = (((tarray)->main_type->fields[0]).type);
      long long index = value_as_long(idx);
      struct value *v;
      off_t offset;
      int byte, bit_index;
      long long lowerbound, upperbound;
      get_discrete_bounds(range_type, &lowerbound, &upperbound);
      if ((index < lowerbound) || (index > upperbound))
 error(("bitstring index out of range"));
      index -= lowerbound;
      offset = (index / 8);
      byte = *((char *)value_contents(array) + offset);
      bit_index = (int)(index % 8);
      byte >>= (((gdbarch_byte_order (current_gdbarch)) == BFD_ENDIAN_BIG) ? (8 - 1 - bit_index) : bit_index);
      v = value_from_longest(lang_bool_type(), byte & 1);
      set_value_bitpos(v, bit_index);
      set_value_bitsize(v, 1);
      (*deprecated_value_lval_hack(v)) = (*deprecated_value_lval_hack(array));
      if ((*deprecated_value_lval_hack(array)) == lval_internalvar)
 (*deprecated_value_lval_hack(v)) = lval_internalvar_component;
      (*deprecated_value_address_hack(v)) = (*deprecated_value_address_hack(array));
      (*deprecated_value_frame_id_hack(v)) = (*deprecated_value_frame_id_hack(array));
      set_value_offset(v, (int)(offset + value_offset(array)));
      return v;
    }

  if (c_style)
    return value_ind(value_add(array, idx));
  else
    error(("not an array or string"));
}
# 289 "valarith.c"
static struct value *
value_subscripted_rvalue(struct value *array, struct value *idx)
{
  struct type *array_type = check_typedef(value_type(array));
  struct type *elt_type = check_typedef((array_type)->main_type->target_type);
  unsigned int elt_size = (((elt_type)->length < 0) ? objc_fixup_class_length(elt_type) : (elt_type)->length);
  long long lowerbound, upperbound, stride;
  long long index;
  unsigned int elt_offs;
  struct value *v;

  index = value_as_long(idx);
  get_array_bounds(array_type, &lowerbound, &upperbound, &stride);

  if ((index < lowerbound) || (index > upperbound))
    error(("no such vector element"));

  if (stride == 1)
    elt_offs = (elt_size * longest_to_int(index - lowerbound));
  else if (stride == -1)
    elt_offs = (elt_size * longest_to_int(upperbound - index));
  else
    internal_error("valarith.c", 311, ("unsupported vector stride %ld"),
                   (long)stride);

  if (elt_offs >= (size_t)(((array_type)->length < 0) ? objc_fixup_class_length(array_type) : (array_type)->length))
    error(("invalid array offset"));

  v = allocate_value(elt_type);
  if (value_lazy(array))
    set_value_lazy(v, 1);
  else
    memcpy(value_contents_writeable(v),
    (value_contents(array) + elt_offs), elt_size);

  if ((*deprecated_value_lval_hack(array)) == lval_internalvar)
    (*deprecated_value_lval_hack(v)) = lval_internalvar_component;
  else
    (*deprecated_value_lval_hack(v)) = (*deprecated_value_lval_hack(array));
  (*deprecated_value_address_hack(v)) = (*deprecated_value_address_hack(array));
  (*deprecated_value_regnum_hack(v)) = (*deprecated_value_regnum_hack(array));
  (*deprecated_value_frame_id_hack(v)) = (*deprecated_value_frame_id_hack(array));
  set_value_offset(v, (value_offset(array) + elt_offs));
  return v;
}







int
binop_user_defined_p (enum exp_opcode op, struct value *arg1, struct value *arg2)
{
  struct type *type1, *type2;
  if (op == BINOP_ASSIGN || op == BINOP_CONCAT)
    return 0;
  type1 = check_typedef (value_type (arg1));
  type2 = check_typedef (value_type (arg2));
  return ((type1)->main_type->code == TYPE_CODE_STRUCT
   || (type2)->main_type->code == TYPE_CODE_STRUCT
   || ((type1)->main_type->code == TYPE_CODE_REF
       && ((type1)->main_type->target_type)->main_type->code == TYPE_CODE_STRUCT)
   || ((type2)->main_type->code == TYPE_CODE_REF
       && ((type2)->main_type->target_type)->main_type->code == TYPE_CODE_STRUCT));
}







int
unop_user_defined_p (enum exp_opcode op, struct value *arg1)
{
  struct type *type1;
  if (op == UNOP_ADDR)
    return 0;
  type1 = check_typedef (value_type (arg1));
  for (;;)
    {
      if ((type1)->main_type->code == TYPE_CODE_STRUCT)
 return 1;
      else if ((type1)->main_type->code == TYPE_CODE_REF)
 type1 = (type1)->main_type->target_type;
      else
 return 0;
    }
}
# 390 "valarith.c"
struct value *
value_x_binop (struct value *arg1, struct value *arg2, enum exp_opcode op,
        enum exp_opcode otherop, enum noside noside)
{
  struct value **argvec;
  char *ptr;
  char tstr[13];
  int static_memfuncp;

  arg1 = coerce_ref (arg1);
  arg2 = coerce_ref (arg2);
  arg1 = coerce_enum (arg1);
  arg2 = coerce_enum (arg2);




  if ((check_typedef (value_type (arg1)))->main_type->code != TYPE_CODE_STRUCT)
    error (("Can't do that binary op on that type"));

  argvec = (struct value **) 
# 410 "valarith.c" 3 4
                            __builtin_alloca(
# 410 "valarith.c"
                            sizeof (struct value *) * 4
# 410 "valarith.c" 3 4
                            )
# 410 "valarith.c"
                                                                ;
  argvec[1] = value_addr (arg1);
  argvec[2] = arg2;
  argvec[3] = 0;


  strcpy (tstr, "operator__");
  ptr = tstr + 8;
  switch (op)
    {
    case BINOP_ADD:
      strcpy (ptr, "+");
      break;
    case BINOP_SUB:
      strcpy (ptr, "-");
      break;
    case BINOP_MUL:
      strcpy (ptr, "*");
      break;
    case BINOP_DIV:
      strcpy (ptr, "/");
      break;
    case BINOP_REM:
      strcpy (ptr, "%");
      break;
    case BINOP_LSH:
      strcpy (ptr, "<<");
      break;
    case BINOP_RSH:
      strcpy (ptr, ">>");
      break;
    case BINOP_BITWISE_AND:
      strcpy (ptr, "&");
      break;
    case BINOP_BITWISE_IOR:
      strcpy (ptr, "|");
      break;
    case BINOP_BITWISE_XOR:
      strcpy (ptr, "^");
      break;
    case BINOP_LOGICAL_AND:
      strcpy (ptr, "&&");
      break;
    case BINOP_LOGICAL_OR:
      strcpy (ptr, "||");
      break;
    case BINOP_MIN:
      strcpy (ptr, "<?");
      break;
    case BINOP_MAX:
      strcpy (ptr, ">?");
      break;
    case BINOP_ASSIGN:
      strcpy (ptr, "=");
      break;
    case BINOP_ASSIGN_MODIFY:
      switch (otherop)
 {
 case BINOP_ADD:
   strcpy (ptr, "+=");
   break;
 case BINOP_SUB:
   strcpy (ptr, "-=");
   break;
 case BINOP_MUL:
   strcpy (ptr, "*=");
   break;
 case BINOP_DIV:
   strcpy (ptr, "/=");
   break;
 case BINOP_REM:
   strcpy (ptr, "%=");
   break;
 case BINOP_BITWISE_AND:
   strcpy (ptr, "&=");
   break;
 case BINOP_BITWISE_IOR:
   strcpy (ptr, "|=");
   break;
 case BINOP_BITWISE_XOR:
   strcpy (ptr, "^=");
   break;
 case BINOP_MOD:
 default:
   error (("Invalid binary operation specified."));
 }
      break;
    case BINOP_SUBSCRIPT:
      strcpy (ptr, "[]");
      break;
    case BINOP_EQUAL:
      strcpy (ptr, "==");
      break;
    case BINOP_NOTEQUAL:
      strcpy (ptr, "!=");
      break;
    case BINOP_LESS:
      strcpy (ptr, "<");
      break;
    case BINOP_GTR:
      strcpy (ptr, ">");
      break;
    case BINOP_GEQ:
      strcpy (ptr, ">=");
      break;
    case BINOP_LEQ:
      strcpy (ptr, "<=");
      break;
    case BINOP_MOD:
    default:
      error (("Invalid binary operation specified."));
    }

  argvec[0] = value_struct_elt (&arg1, argvec + 1, tstr, &static_memfuncp, "structure");

  if (argvec[0])
    {
      if (static_memfuncp)
 {
   argvec[1] = argvec[0];
   argvec++;
 }
      if (noside == EVAL_AVOID_SIDE_EFFECTS)
 {
   struct type *return_type;
   return_type
     = (check_typedef (value_type (argvec[0])))->main_type->target_type;
   return value_zero (return_type, (*deprecated_value_lval_hack(arg1)));
 }
      return call_function_by_hand (argvec[0], 2 - static_memfuncp, argvec + 1);
    }
  error (("member function %s not found"), tstr);



}







struct value *
value_x_unop(struct value *arg1, enum exp_opcode op, enum noside noside)
{
  struct value **argvec;
  char *ptr, *mangle_ptr;
  char tstr[13], mangle_tstr[13];
  int static_memfuncp, nargs;

  arg1 = coerce_ref(arg1);
  arg1 = coerce_enum(arg1);




  if ((check_typedef(value_type(arg1)))->main_type->code != TYPE_CODE_STRUCT)
    error(("Cannot do that unary op on that type"));

  argvec = (struct value **)
# 570 "valarith.c" 3 4
                           __builtin_alloca(
# 570 "valarith.c"
                           sizeof(struct value *) * 4UL
# 570 "valarith.c" 3 4
                           )
# 570 "valarith.c"
                                                               ;
  argvec[1] = value_addr(arg1);
  argvec[2] = 0;

  nargs = 1;


  strcpy(tstr, "operator__");
  ptr = (tstr + 8UL);
  strcpy(mangle_tstr, "__");
  mangle_ptr = (mangle_tstr + 2UL);

  if (mangle_ptr == 
# 582 "valarith.c" 3 4
                   __null
# 582 "valarith.c"
                       ) {
    ;
  }

  switch (op)
    {
    case UNOP_PREINCREMENT:
      strcpy(ptr, "++");
      break;
    case UNOP_PREDECREMENT:
      strcpy(ptr, "--");
      break;
    case UNOP_POSTINCREMENT:
      strcpy(ptr, "++");
      argvec[2] = value_from_longest(builtin_type_int, 0);
      argvec[3] = 0;
      nargs ++;
      break;
    case UNOP_POSTDECREMENT:
      strcpy(ptr, "--");
      argvec[2] = value_from_longest(builtin_type_int, 0);
      argvec[3] = 0;
      nargs ++;
      break;
    case UNOP_LOGICAL_NOT:
      strcpy(ptr, "!");
      break;
    case UNOP_COMPLEMENT:
      strcpy(ptr, "~");
      break;
    case UNOP_NEG:
      strcpy(ptr, "-");
      break;
    case UNOP_PLUS:
      strcpy(ptr, "+");
      break;
    case UNOP_IND:
      strcpy(ptr, "*");
      break;
    default:
      error(("Invalid unary operation specified."));
    }

  argvec[0] = value_struct_elt(&arg1, (argvec + 1), tstr, &static_memfuncp,
                               "structure");

  if (argvec[0])
    {
      if (static_memfuncp)
 {
   argvec[1] = argvec[0];
   nargs --;
   argvec++;
 }
      if (noside == EVAL_AVOID_SIDE_EFFECTS)
 {
   struct type *return_type;
   return_type
     = (check_typedef(value_type(argvec[0])))->main_type->target_type;
   return value_zero(return_type, (*deprecated_value_lval_hack(arg1)));
 }
      return call_function_by_hand(argvec[0], nargs, (argvec + 1));
    }
  error(("member function %s not found"), tstr);
  return 0;
}
# 671 "valarith.c"
struct value *
value_concat (struct value *arg1, struct value *arg2)
{
  struct value *inval1;
  struct value *inval2;
  struct value *outval = 
# 676 "valarith.c" 3 4
                        __null
# 676 "valarith.c"
                            ;
  int inval1len, inval2len;
  int count, idx;
  char *ptr;
  char inchar;
  struct type *type1 = check_typedef (value_type (arg1));
  struct type *type2 = check_typedef (value_type (arg2));







  if ((type2)->main_type->code == TYPE_CODE_INT)
    {
      struct type *tmp = type1;
      type1 = tmp;
      tmp = type2;
      ((void) ((tmp != (struct type *)
# 695 "valarith.c" 3 4
     __null
# 695 "valarith.c"
     ) ? 0 : (internal_error ("valarith.c", 695, ("%s: Assertion `%s' failed."), __PRETTY_FUNCTION__, "tmp != (struct type *)NULL"), 0)));
      inval1 = arg2;
      inval2 = arg1;
    }
  else
    {
      inval1 = arg1;
      inval2 = arg2;
    }



  if ((type1)->main_type->code == TYPE_CODE_INT)
    {


      if ((type2)->main_type->code == TYPE_CODE_STRING
   || (type2)->main_type->code == TYPE_CODE_CHAR)
 {
   count = longest_to_int (value_as_long (inval1));
   inval2len = (((type2)->length < 0) ? objc_fixup_class_length(type2) : (type2)->length);
   ptr = (char *) 
# 716 "valarith.c" 3 4
                 __builtin_alloca(
# 716 "valarith.c"
                 count * inval2len
# 716 "valarith.c" 3 4
                 )
# 716 "valarith.c"
                                           ;
   if ((type2)->main_type->code == TYPE_CODE_CHAR)
     {
       inchar = (char) unpack_long (type2,
        value_contents (inval2));
       for (idx = 0; idx < count; idx++)
  {
    *(ptr + idx) = inchar;
  }
     }
   else
     {
       for (idx = 0; idx < count; idx++)
  {
    memcpy (ptr + (idx * inval2len), value_contents (inval2),
     inval2len);
  }
     }
   outval = value_string (ptr, count * inval2len);
 }
      else if ((type2)->main_type->code == TYPE_CODE_BITSTRING
        || (type2)->main_type->code == TYPE_CODE_BOOL)
 {
   error (("unimplemented support for bitstring/boolean repeats"));
 }
      else
 {
   error (("can't repeat values of that type"));
 }
    }
  else if ((type1)->main_type->code == TYPE_CODE_STRING
    || (type1)->main_type->code == TYPE_CODE_CHAR)
    {

      if ((type2)->main_type->code != TYPE_CODE_STRING
   && (type2)->main_type->code != TYPE_CODE_CHAR)
 {
   error (("Strings can only be concatenated with other strings."));
 }
      inval1len = (((type1)->length < 0) ? objc_fixup_class_length(type1) : (type1)->length);
      inval2len = (((type2)->length < 0) ? objc_fixup_class_length(type2) : (type2)->length);
      ptr = (char *) 
# 757 "valarith.c" 3 4
                    __builtin_alloca(
# 757 "valarith.c"
                    inval1len + inval2len
# 757 "valarith.c" 3 4
                    )
# 757 "valarith.c"
                                                  ;
      if ((type1)->main_type->code == TYPE_CODE_CHAR)
 {
   *ptr = (char) unpack_long (type1, value_contents (inval1));
 }
      else
 {
   memcpy (ptr, value_contents (inval1), inval1len);
 }
      if ((type2)->main_type->code == TYPE_CODE_CHAR)
 {
   *(ptr + inval1len) =
     (char) unpack_long (type2, value_contents (inval2));
 }
      else
 {
   memcpy (ptr + inval1len, value_contents (inval2), inval2len);
 }
      outval = value_string (ptr, inval1len + inval2len);
    }
  else if ((type1)->main_type->code == TYPE_CODE_BITSTRING
    || (type1)->main_type->code == TYPE_CODE_BOOL)
    {

      if ((type2)->main_type->code != TYPE_CODE_BITSTRING
   && (type2)->main_type->code != TYPE_CODE_BOOL)
 {
   error (("Bitstrings or booleans can only be concatenated with other bitstrings or booleans."));
 }
      error (("unimplemented support for bitstring/boolean concatenation."));
    }
  else
    {

      error (("illegal operands for concatenation."));
    }
  return (outval);
}
# 804 "valarith.c"
struct value *
value_binop(struct value *arg1, struct value *arg2, enum exp_opcode op)
{
  struct value *val = 
# 807 "valarith.c" 3 4
                     __null
# 807 "valarith.c"
                         ;
  struct type *type1, *type2;

  arg1 = coerce_ref(arg1);
  arg2 = coerce_ref(arg2);
  type1 = check_typedef(value_type(arg1));
  type2 = check_typedef(value_type(arg2));

  if ((((type1)->main_type->code != TYPE_CODE_FLT) && !is_integral_type(type1))
      ||
      (((type2)->main_type->code != TYPE_CODE_FLT) && !is_integral_type(type2)))
    error(("Argument to arithmetic operation not a number or boolean."));

  if (((type1)->main_type->code == TYPE_CODE_FLT)
      || ((type2)->main_type->code == TYPE_CODE_FLT))
    {



      DOUBLEST v1, v2, v = 0;
      v1 = value_as_double(arg1);
      v2 = value_as_double(arg2);
      switch (op)
 {
 case BINOP_ADD:
   v = (v1 + v2);
   break;

 case BINOP_SUB:
   v = (v1 - v2);
   break;

 case BINOP_MUL:
   v = (v1 * v2);
   break;

 case BINOP_DIV:
   v = (v1 / v2);
   break;

 case BINOP_EXP:
   
# 848 "valarith.c" 3 4
  (*__error()) 
# 848 "valarith.c"
        = 0;
   v = pow((double)v1, (double)v2);
   if (
# 850 "valarith.c" 3 4
      (*__error())
# 850 "valarith.c"
           )
     error(("Cannot perform exponentiation: %s"),
                  safe_strerror(
# 852 "valarith.c" 3 4
                               (*__error())
# 852 "valarith.c"
                                    ));
   break;

 default:
   error (("Integer-only operation on floating point number."));
 }




      if ((((((type1)->length < 0) ? objc_fixup_class_length(type1) : (type1)->length) * 8) > (gdbarch_double_bit (current_gdbarch)))
   || (((((type2)->length < 0) ? objc_fixup_class_length(type2) : (type2)->length) * 8) > (gdbarch_double_bit (current_gdbarch))))
 val = allocate_value(builtin_type_long_double);
      else
 val = allocate_value(builtin_type_double);

      store_typed_floating(value_contents_raw(val), value_type(val), v);
    }
  else if (((type1)->main_type->code == TYPE_CODE_BOOL)
    && ((type2)->main_type->code == TYPE_CODE_BOOL))
    {
      long long v1, v2, v = 0L;
      v1 = value_as_long(arg1);
      v2 = value_as_long(arg2);

      switch (op)
 {
 case BINOP_BITWISE_AND:
   v = (v1 & v2);
   break;

 case BINOP_BITWISE_IOR:
   v = (v1 | v2);
   break;

 case BINOP_BITWISE_XOR:
   v = (v1 ^ v2);
          break;

        case BINOP_EQUAL:
          v = (v1 == v2);
          break;

        case BINOP_NOTEQUAL:
          v = (v1 != v2);
   break;

 default:
   error(("Invalid operation on booleans."));
 }

      val = allocate_value(type1);
      store_signed_integer(value_contents_raw(val), (((type1)->length < 0) ? objc_fixup_class_length(type1) : (type1)->length), v);
    }
  else




    {
      unsigned int promoted_len1 = (((type1)->length < 0) ? objc_fixup_class_length(type1) : (type1)->length);
      unsigned int promoted_len2 = (((type2)->length < 0) ? objc_fixup_class_length(type2) : (type2)->length);
      int is_unsigned1 = ((type1)->main_type->flags & (1 << 0));
      int is_unsigned2 = ((type2)->main_type->flags & (1 << 0));
      size_t result_len;
      int unsigned_operation;



      if (promoted_len1 < (size_t)(((builtin_type_int)->length < 0) ? objc_fixup_class_length(builtin_type_int) : (builtin_type_int)->length))
 {
   is_unsigned1 = 0;
   promoted_len1 = (unsigned int)(((builtin_type_int)->length < 0) ? objc_fixup_class_length(builtin_type_int) : (builtin_type_int)->length);
 }
      if (promoted_len2 < (size_t)(((builtin_type_int)->length < 0) ? objc_fixup_class_length(builtin_type_int) : (builtin_type_int)->length))
 {
   is_unsigned2 = 0;
   promoted_len2 = (unsigned int)(((builtin_type_int)->length < 0) ? objc_fixup_class_length(builtin_type_int) : (builtin_type_int)->length);
 }






      if (op == BINOP_RSH || op == BINOP_LSH)
 {


   unsigned_operation = is_unsigned1;
   result_len = promoted_len1;
 }
      else if (promoted_len1 > promoted_len2)
 {
   unsigned_operation = is_unsigned1;
   result_len = promoted_len1;
 }
      else if (promoted_len2 > promoted_len1)
 {
   unsigned_operation = is_unsigned2;
   result_len = promoted_len2;
 }
      else
 {
   unsigned_operation = (is_unsigned1 || is_unsigned2);
   result_len = promoted_len1;
 }



      if (result_len > sizeof(unsigned long long))
 {
   if (result_len != (size_t)(((builtin_type_uint128)->length < 0) ? objc_fixup_class_length(builtin_type_uint128) : (builtin_type_uint128)->length))
     {
       error(("value_binop(v1, v2, %s) not supported for %lu byte integers"),
      op_name_standard(op),
      result_len);
     }
   else
     {
       int i;
       const gdb_byte *arg1_bytes = value_contents(arg1);
       const gdb_byte *arg2_bytes = value_contents(arg2);
       int arg1_len = (((value_type(arg1))->length < 0) ? objc_fixup_class_length(value_type(arg1)) : (value_type(arg1))->length);
       int arg2_len = (((value_type(arg2))->length < 0) ? objc_fixup_class_length(value_type(arg2)) : (value_type(arg2))->length);

       switch (op)
  {
  case BINOP_ADD:
  case BINOP_SUB:
  case BINOP_MUL:
  case BINOP_DIV:
  case BINOP_EXP:
  case BINOP_REM:
  case BINOP_MOD:
  case BINOP_LSH:
  case BINOP_RSH:
  case BINOP_MIN:
  case BINOP_MAX:
  case BINOP_LESS:
    error(("value_binop(v1, v2, %s) not supported for %lu byte integers"),
                        op_name_standard(op), result_len);
    break;

  case BINOP_BITWISE_AND:
    {
                    gdb_byte *val_bytes;
      val = allocate_value(unsigned_operation
                                         ? builtin_type_uint128
                                         : builtin_type_int128);

      val_bytes = value_contents_writeable(val);




                    {
                      const int val_len = (((value_type(val))->length < 0) ? objc_fixup_class_length(value_type(val)) : (value_type(val))->length);

                      for (i = 0; i < val_len; i++)
                        {
                          if ((i < arg1_len) && (i < arg2_len))
                            val_bytes[i] = (arg1_bytes[i] & arg2_bytes[i]);
                          else
                            val_bytes[i] = 0;
                        }
                    }
    }
    break;

  case BINOP_BITWISE_IOR:
    {
                    gdb_byte *val_bytes;
      val = allocate_value(unsigned_operation
                                         ? builtin_type_uint128
                                         : builtin_type_int128);

      val_bytes = value_contents_writeable(val);




                    {
                      const int val_len = (((value_type(val))->length < 0) ? objc_fixup_class_length(value_type(val)) : (value_type(val))->length);

                      for (i = 0; i < val_len; i++)
                        {
                          if ((i < arg1_len) && (i < arg2_len))
                            val_bytes[i] = (arg1_bytes[i] | arg2_bytes[i]);
                          else if (i < arg1_len)
                            val_bytes[i] = arg1_bytes[i];
                          else if (i < arg2_len)
                            val_bytes[i] = arg2_bytes[i];
                          else
                            val_bytes[i] = 0;
                        }
                    }
    }
    break;

  case BINOP_BITWISE_XOR:
    {
                    gdb_byte *val_bytes;
      val = allocate_value(unsigned_operation
                                         ? builtin_type_uint128
                                         : builtin_type_int128);

      val_bytes = value_contents_writeable(val);




                    {
                      const int val_len = (((value_type(val))->length < 0) ? objc_fixup_class_length(value_type(val)) : (value_type(val))->length);

                      for (i = 0; i < val_len; i++)
                        {
                          if ((i < arg1_len) && (i < arg2_len))
                            val_bytes[i] = (arg1_bytes[i] ^ arg2_bytes[i]);
                          else if (i < arg1_len)
                            val_bytes[i] = arg1_bytes[i];
                          else if (i < arg2_len)
                            val_bytes[i] = arg2_bytes[i];
                          else
                            val_bytes[i] = 0;
                        }
                    }
    }
    break;

  case BINOP_LOGICAL_AND:
    {
      unsigned long long arg1_not_zero = 0UL;
      unsigned long long arg2_not_zero = 0UL;
      for (i = 0; (i < arg1_len) && !arg1_not_zero; i++)
        arg1_not_zero = (arg1_bytes[i] != 0);

      for (i = 0; (i < arg2_len) && !arg2_not_zero; i++)
        arg2_not_zero = (arg2_bytes[i] != 0);

      val = allocate_value(builtin_type_unsigned_long);
      store_unsigned_integer(value_contents_raw(val),
        (((value_type(val))->length < 0) ? objc_fixup_class_length(value_type(val)) : (value_type(val))->length),
        arg1_not_zero && arg2_not_zero);
    }
    break;

  case BINOP_LOGICAL_OR:
    {
      unsigned long long arg1_not_zero = 0UL;
      unsigned long long arg2_not_zero = 0UL;
      for (i = 0; (i < arg1_len) && !arg1_not_zero; i++)
        arg1_not_zero = (arg1_bytes[i] != 0);

      if (arg1_not_zero == 0)
        for (i = 0; (i < arg2_len) && !arg2_not_zero; i++)
   arg2_not_zero = (arg2_bytes[i] != 0);

      val = allocate_value(builtin_type_unsigned_long);
      store_unsigned_integer(value_contents_raw(val),
        (((value_type(val))->length < 0) ? objc_fixup_class_length(value_type(val)) : (value_type(val))->length),
        arg1_not_zero || arg2_not_zero);
    }
    break;

  case BINOP_EQUAL:
  case BINOP_NOTEQUAL:
    {
      unsigned long long equal = 1UL;
      const int max_len = ((arg1_len > arg2_len)
                                         ? arg1_len : arg2_len);
      for (i = 0; (i < max_len) && equal; i++)
        {
   if ((i < arg1_len) && (i < arg2_len))
     equal = (arg1_bytes[i] == arg2_bytes[i]);
   else if (i < arg1_len)
     equal = (arg1_bytes[i] == 0);
                        else if (i < arg2_len)
     equal = (arg2_bytes[i] == 0);
                      }
      val = allocate_value(builtin_type_unsigned_long);
      store_unsigned_integer(value_contents_raw(val),
        (((value_type(val))->length < 0) ? objc_fixup_class_length(value_type(val)) : (value_type(val))->length),
        ((op == BINOP_EQUAL)
                                            ? equal : !equal));
    }
    break;

  default:
    error(("Invalid binary operation on numbers."));
  }
     }
 }
      else

      if (unsigned_operation)
 {
   unsigned long long v1, v2, v = 0UL;
   v1 = (unsigned long long)value_as_long(arg1);
   v2 = (unsigned long long)value_as_long(arg2);


   if (result_len < sizeof(unsigned long long))
     {
       v1 &= (((long long)1L << 8 * result_len) - 1UL);
       v2 &= (((long long)1L << 8 * result_len) - 1UL);
     }

   switch (op)
     {
     case BINOP_ADD:
       v = (v1 + v2);
       break;

     case BINOP_SUB:
       v = (v1 - v2);
       break;

     case BINOP_MUL:
       v = (v1 * v2);
       break;

     case BINOP_DIV:
       v = (v1 / v2);
       break;

     case BINOP_EXP:
       
# 1179 "valarith.c" 3 4
      (*__error()) 
# 1179 "valarith.c"
            = 0;
       v = (unsigned long long)pow((double)v1, (double)v2);
       if (
# 1181 "valarith.c" 3 4
          (*__error())
# 1181 "valarith.c"
               )
  error(("Cannot perform exponentiation: %s"),
                      safe_strerror(
# 1183 "valarith.c" 3 4
                                   (*__error())
# 1183 "valarith.c"
                                        ));
       break;

     case BINOP_REM:
       v = (v1 % v2);
       break;

     case BINOP_MOD:


       if (v2 == 0)
  {
    v = v1;
  }
       else
  {
    v = (v1 / v2);

    v = (v1 - (v2 * v));
  }
       break;

     case BINOP_LSH:
       v = (v1 << v2);
       break;

     case BINOP_RSH:
       v = (v1 >> v2);
       break;

     case BINOP_BITWISE_AND:
       v = (v1 & v2);
       break;

     case BINOP_BITWISE_IOR:
       v = (v1 | v2);
       break;

     case BINOP_BITWISE_XOR:
       v = (v1 ^ v2);
       break;

     case BINOP_LOGICAL_AND:
       v = (v1 && v2);
       break;

     case BINOP_LOGICAL_OR:
       v = (v1 || v2);
       break;

     case BINOP_MIN:
       v = ((v1 < v2) ? v1 : v2);
       break;

     case BINOP_MAX:
       v = ((v1 > v2) ? v1 : v2);
       break;

     case BINOP_EQUAL:
       v = (v1 == v2);
       break;

            case BINOP_NOTEQUAL:
              v = (v1 != v2);
              break;

     case BINOP_LESS:
       v = (v1 < v2);
       break;

     default:
       error(("Invalid binary operation on numbers."));
     }
# 1266 "valarith.c"
   val = allocate_value((result_len > (size_t)((gdbarch_long_bit (current_gdbarch))
                                                      / 8))
                               ? builtin_type_unsigned_long_long
                               : builtin_type_unsigned_long);
   store_unsigned_integer(value_contents_raw(val),
     (((value_type(val))->length < 0) ? objc_fixup_class_length(value_type(val)) : (value_type(val))->length), v);
 }
      else
 {
   long long v1, v2, v = 0L;
   v1 = value_as_long(arg1);
   v2 = value_as_long(arg2);

   switch (op)
     {
     case BINOP_ADD:
       v = (v1 + v2);
       break;

     case BINOP_SUB:
       v = (v1 - v2);
       break;

     case BINOP_MUL:
       v = (v1 * v2);
       break;

     case BINOP_DIV:
       if (v2 != 0)
  v = (v1 / v2);
       else
  error(("Division by zero"));
              break;

     case BINOP_EXP:
       
# 1301 "valarith.c" 3 4
      (*__error()) 
# 1301 "valarith.c"
            = 0;
       v = (long long)pow((double)v1, (double)v2);
       if (
# 1303 "valarith.c" 3 4
          (*__error())
# 1303 "valarith.c"
               )
  error(("Cannot perform exponentiation: %s"),
                      safe_strerror(
# 1305 "valarith.c" 3 4
                                   (*__error())
# 1305 "valarith.c"
                                        ));
       break;

     case BINOP_REM:
       if (v2 != 0)
  v = (v1 % v2);
       else
  error(("Division by zero"));
       break;

     case BINOP_MOD:


       if (v2 == 0)
  {
    v = v1;
  }
       else
  {
    v = (v1 / v2);

    if (((-5 / 2) == -2) && (v < 0) && ((v1 % v2) != 0))
      {
        v--;
      }
    v = (v1 - (v2 * v));
  }
       break;

     case BINOP_LSH:
       v = (v1 << v2);
       break;

     case BINOP_RSH:
       v = (v1 >> v2);
       break;

     case BINOP_BITWISE_AND:
       v = (v1 & v2);
       break;

     case BINOP_BITWISE_IOR:
       v = (v1 | v2);
       break;

     case BINOP_BITWISE_XOR:
       v = (v1 ^ v2);
       break;

     case BINOP_LOGICAL_AND:
       v = (v1 && v2);
       break;

     case BINOP_LOGICAL_OR:
       v = (v1 || v2);
       break;

     case BINOP_MIN:
       v = ((v1 < v2) ? v1 : v2);
       break;

     case BINOP_MAX:
       v = ((v1 > v2) ? v1 : v2);
       break;

     case BINOP_EQUAL:
       v = (v1 == v2);
       break;




            case BINOP_NOTEQUAL:
              v = (v1 != v2);
              break;

     case BINOP_LESS:
       v = (v1 < v2);
       break;

     default:
       error(("Invalid binary operation on numbers."));
     }
# 1398 "valarith.c"
   val = allocate_value((result_len > (size_t)((gdbarch_long_bit (current_gdbarch))
                                                      / 8))
                               ? builtin_type_long_long
                               : builtin_type_long);
   store_signed_integer(value_contents_raw(val),
                               (((value_type(val))->length < 0) ? objc_fixup_class_length(value_type(val)) : (value_type(val))->length), v);
 }
    }

  return val;
}



int
value_logical_not (struct value *arg1)
{
  int len;
  const gdb_byte *p;
  struct type *type1;

  arg1 = coerce_number (arg1);
  type1 = check_typedef (value_type (arg1));

  if ((type1)->main_type->code == TYPE_CODE_FLT)
    return 0 == value_as_double (arg1);

  len = (((type1)->length < 0) ? objc_fixup_class_length(type1) : (type1)->length);
  p = value_contents (arg1);

  while (--len >= 0)
    {
      if (*p++)
 break;
    }

  return len < 0;
}




static int
value_strcmp (struct value *arg1, struct value *arg2)
{
  int len1 = (((value_type (arg1))->length < 0) ? objc_fixup_class_length(value_type (arg1)) : (value_type (arg1))->length);
  int len2 = (((value_type (arg2))->length < 0) ? objc_fixup_class_length(value_type (arg2)) : (value_type (arg2))->length);
  const gdb_byte *s1 = value_contents (arg1);
  const gdb_byte *s2 = value_contents (arg2);
  int i, len = len1 < len2 ? len1 : len2;

  for (i = 0; i < len; i++)
    {
      if (s1[i] < s2[i])
        return -1;
      else if (s1[i] > s2[i])
        return 1;
      else
        continue;
    }

  if (len1 < len2)
    return -1;
  else if (len1 > len2)
    return 1;
  else
    return 0;
}




int
value_equal (struct value *arg1, struct value *arg2)
{
  int len;
  const gdb_byte *p1;
  const gdb_byte *p2;
  struct type *type1, *type2;
  enum type_code code1;
  enum type_code code2;
  int is_int1, is_int2;

  arg1 = coerce_array (arg1);
  arg2 = coerce_array (arg2);

  type1 = check_typedef (value_type (arg1));
  type2 = check_typedef (value_type (arg2));
  code1 = (type1)->main_type->code;
  code2 = (type2)->main_type->code;
  is_int1 = is_integral_type (type1);
  is_int2 = is_integral_type (type2);

  if (is_int1 && is_int2)
    return longest_to_int (value_as_long (value_binop (arg1, arg2,
             BINOP_EQUAL)));
  else if ((code1 == TYPE_CODE_FLT || is_int1)
    && (code2 == TYPE_CODE_FLT || is_int2))
    return value_as_double (arg1) == value_as_double (arg2);



  else if (code1 == TYPE_CODE_PTR && is_int2)
    return value_as_address (arg1) == (CORE_ADDR) value_as_long (arg2);
  else if (code2 == TYPE_CODE_PTR && is_int1)
    return (CORE_ADDR) value_as_long (arg1) == value_as_address (arg2);

  else if (code1 == code2
    && ((len = (int) (((type1)->length < 0) ? objc_fixup_class_length(type1) : (type1)->length))
        == (int) (((type2)->length < 0) ? objc_fixup_class_length(type2) : (type2)->length)))
    {
      p1 = value_contents (arg1);
      p2 = value_contents (arg2);
      while (--len >= 0)
 {
   if (*p1++ != *p2++)
     break;
 }
      return len < 0;
    }
  else if (code1 == TYPE_CODE_STRING && code2 == TYPE_CODE_STRING)
    {
      return value_strcmp (arg1, arg2) == 0;
    }
  else
    {
      error (("Invalid type combination in equality test."));
      return 0;
    }
}




int
value_less (struct value *arg1, struct value *arg2)
{
  enum type_code code1;
  enum type_code code2;
  struct type *type1, *type2;
  int is_int1, is_int2;

  arg1 = coerce_array (arg1);
  arg2 = coerce_array (arg2);

  type1 = check_typedef (value_type (arg1));
  type2 = check_typedef (value_type (arg2));
  code1 = (type1)->main_type->code;
  code2 = (type2)->main_type->code;
  is_int1 = is_integral_type (type1);
  is_int2 = is_integral_type (type2);

  if (is_int1 && is_int2)
    return longest_to_int (value_as_long (value_binop (arg1, arg2,
             BINOP_LESS)));
  else if ((code1 == TYPE_CODE_FLT || is_int1)
    && (code2 == TYPE_CODE_FLT || is_int2))
    return value_as_double (arg1) < value_as_double (arg2);
  else if (code1 == TYPE_CODE_PTR && code2 == TYPE_CODE_PTR)
    return value_as_address (arg1) < value_as_address (arg2);



  else if (code1 == TYPE_CODE_PTR && is_int2)
    return value_as_address (arg1) < (CORE_ADDR) value_as_long (arg2);
  else if (code2 == TYPE_CODE_PTR && is_int1)
    return (CORE_ADDR) value_as_long (arg1) < value_as_address (arg2);
  else if (code1 == TYPE_CODE_STRING && code2 == TYPE_CODE_STRING)
    return value_strcmp (arg1, arg2) < 0;
  else
    {
      error (("Invalid type combination in ordering comparison."));
      return 0;
    }
}



struct value *
value_pos (struct value *arg1)
{
  struct type *type;

  arg1 = coerce_ref (arg1);

  type = check_typedef (value_type (arg1));

  if ((type)->main_type->code == TYPE_CODE_FLT)
    return value_from_double (type, value_as_double (arg1));
  else if (is_integral_type (type))
    {


      if ((((type)->length < 0) ? objc_fixup_class_length(type) : (type)->length) < (((builtin_type_int)->length < 0) ? objc_fixup_class_length(builtin_type_int) : (builtin_type_int)->length))
 type = builtin_type_int;

      return value_from_longest (type, value_as_long (arg1));
    }
  else
    {
      error ("Argument to positive operation not a number.");
      return 0;
    }
}

struct value *
value_neg (struct value *arg1)
{
  struct type *type;
  struct type *result_type = value_type (arg1);

  arg1 = coerce_ref (arg1);

  type = check_typedef (value_type (arg1));

  if ((type)->main_type->code == TYPE_CODE_FLT)
    return value_from_double (result_type, -value_as_double (arg1));
  else if (is_integral_type (type))
    {


      if ((((type)->length < 0) ? objc_fixup_class_length(type) : (type)->length) < (((builtin_type_int)->length < 0) ? objc_fixup_class_length(builtin_type_int) : (builtin_type_int)->length))
 result_type = builtin_type_int;

      return value_from_longest (result_type, -value_as_long (arg1));
    }
  else
    {
      error (("Argument to negate operation not a number."));
      return 0;
    }
}

struct value *
value_complement (struct value *arg1)
{
  struct type *type;
  struct type *result_type = value_type (arg1);

  arg1 = coerce_ref (arg1);

  type = check_typedef (value_type (arg1));

  if (!is_integral_type (type))
    error (("Argument to complement operation not an integer or boolean."));



  if ((((type)->length < 0) ? objc_fixup_class_length(type) : (type)->length) < (((builtin_type_int)->length < 0) ? objc_fixup_class_length(builtin_type_int) : (builtin_type_int)->length))
    result_type = builtin_type_int;

  return value_from_longest (result_type, ~value_as_long (arg1));
}





int
value_bit_index(struct type *type, const gdb_byte *valaddr, int index)
{
  long long low_bound, high_bound;
  long long word;
  unsigned long rel_index;
  struct type *range = (((type)->main_type->fields[0]).type);
  if (get_discrete_bounds(range, &low_bound, &high_bound) < 0)
    return -2;
  if ((index < low_bound) || (index > high_bound))
    return -1;
  rel_index = (unsigned long)(index - low_bound);
  word = unpack_long(builtin_type_unsigned_char,
       (valaddr + (rel_index / 8)));
  rel_index %= 8;
  if (((gdbarch_byte_order (current_gdbarch)) == BFD_ENDIAN_BIG))
    rel_index = (8 - 1UL - rel_index);
  return ((word >> rel_index) & 1);
}

struct value *
value_in (struct value *element, struct value *set)
{
  int member;
  struct type *settype = check_typedef (value_type (set));
  struct type *eltype = check_typedef (value_type (element));
  if ((eltype)->main_type->code == TYPE_CODE_RANGE)
    eltype = (eltype)->main_type->target_type;
  if ((settype)->main_type->code != TYPE_CODE_SET)
    error (("Second argument of 'IN' has wrong type"));
  if ((eltype)->main_type->code != TYPE_CODE_INT
      && (eltype)->main_type->code != TYPE_CODE_CHAR
      && (eltype)->main_type->code != TYPE_CODE_ENUM
      && (eltype)->main_type->code != TYPE_CODE_BOOL)
    error(("First argument of 'IN' has wrong type"));
  member = value_bit_index(settype, value_contents(set),
      (int)value_as_long(element));
  if (member < 0)
    error(("First argument of 'IN' not in range"));
  return value_from_longest(lang_bool_type(), member);
}


void
_initialize_valarith(void)
{
  valarith_c_inited = 1;
  return;
}
